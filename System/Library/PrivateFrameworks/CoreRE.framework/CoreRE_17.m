uint64_t re::ecs2::SubdivisionSurfaceSystem::updateScenes(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  v4 = *(_QWORD *)(result + 104);
  if (v4 && (*(_BYTE *)(v4 + 424) & 0x10) != 0)
  {
    v6 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
    v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      v8 = *(uint64_t **)a2;
      v9 = v6 + 200;
      v10 = 8 * v7;
      do
      {
        v11 = *v8++;
        re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(v9, v11, (uint64_t)v13, 0);
        v10 -= 8;
      }
      while (v10);
    }
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
  }
  return result;
}

void re::ecs2::SubdivisionSurfaceSystem::willAddSceneToECSService(re::ecs2::SubdivisionSurfaceSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t re::ecs2::SubdivisionSurfaceSystem::willRemoveSceneFromECSService(re::ecs2::SubdivisionSurfaceSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t *re::ecs2::allocInfo_SubdivisionSurfaceSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_326);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_326))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115660, 0);
    *(uint64_t *)((char *)&qword_254115670 + 6) = 0;
    qword_254115670 = 0;
    qword_254115680 = 0;
    qword_254115688 = 0xFFFFFFFFLL;
    qword_254115660 = (uint64_t)&off_24ED7DAA8;
    qword_254115690 = (uint64_t)"SubdivisionSurfaceSystem";
    dword_254115698 = 0;
    unk_2541156A0 = 0u;
    unk_2541156B0 = 0u;
    unk_2541156C0 = 0u;
    qword_2541156D0 = 0;
    __cxa_guard_release(&_MergedGlobals_326);
  }
  return &qword_254115660;
}

void re::ecs2::initInfo_SubdivisionSurfaceSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCEBCE26D071EC6DELL;
  v5[1] = "SubdivisionSurfaceSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SubdivisionSurfaceSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SubdivisionSurfaceSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SubdivisionSurfaceSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SubdivisionSurfaceSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SubdivisionSurfaceSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::SubdivisionSurfaceSystem *re::internal::defaultConstruct<re::ecs2::SubdivisionSurfaceSystem>(int a1, int a2, re::ecs2::SubdivisionSurfaceSystem *this)
{
  return re::ecs2::SubdivisionSurfaceSystem::SubdivisionSurfaceSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SubdivisionSurfaceSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &off_24ED6E0D8;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SubdivisionSurfaceSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &off_24ED6E0D8;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SubdivisionSurfaceSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SubdivisionSurfaceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SubdivisionSurfaceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SubdivisionSurfaceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SubdivisionSurfaceSystem>, this);
}

uint64_t re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::dependsOnComponents(re::ecs2::SubdivisionSurfaceSystemComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

void re::ecs2::SubdivisionSurfaceSystem::~SubdivisionSurfaceSystem(re::ecs2::SubdivisionSurfaceSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED6E0D8;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED6E0D8;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SubdivisionSurfaceSystem::typeInfo(re::ecs2::SubdivisionSurfaceSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SubdivisionSurfaceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SubdivisionSurfaceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SubdivisionSurfaceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SubdivisionSurfaceSystem>, 0);
}

void re::SimplifiedMeshBufferFlagData::~SimplifiedMeshBufferFlagData(re::SimplifiedMeshBufferFlagData *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 32, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2257FA414()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  void (***v7)(_QWORD);

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = (void (***)(_QWORD))re::BucketArray<unsigned long,4ul>::operator[](v4, i);
        (**v7)(v7);
      }
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6E230;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6E230;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

id re::internal::defaultRetain<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_AcousticMeshComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541156E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541156E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115800, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115810 = 0;
    qword_254115820 = 0;
    qword_254115828 = 0xFFFFFFFFLL;
    qword_254115800 = (uint64_t)&off_24ED7DAA8;
    qword_254115830 = (uint64_t)"AcousticMeshComponent";
    dword_254115838 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254115870 = 0;
    __cxa_guard_release(&qword_2541156E8);
  }
  return &qword_254115800;
}

void re::ecs2::initInfo_AcousticMeshComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  re::IntrospectionRegistry *v18;
  const re::IntrospectionBase *v19;
  const char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  re::IntrospectionRegistry *v30;
  const re::IntrospectionBase *v31;
  const char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  re::IntrospectionRegistry *v42;
  const re::IntrospectionBase *v43;
  const char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  __int128 v58;
  uint64_t v59;
  const char *v60;
  const char *v61;

  v59 = 0x4FE77884F66CF2DALL;
  v60 = "AcousticMeshComponent";
  re::StringID::destroyString((re::StringID *)&v59);
  *((_OWORD *)this + 2) = v54;
  v4 = atomic_load((unsigned __int8 *)&qword_2541156E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541156E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115710 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "mesh";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254115718 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = atomic_load((unsigned __int8 *)&qword_2541156F8);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2541156F8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115740, 0);
        *(uint64_t *)((char *)&qword_254115750 + 6) = 0;
        qword_254115750 = 0;
        *(_QWORD *)&xmmword_254115760 = 0;
        *((_QWORD *)&xmmword_254115760 + 1) = 0xFFFFFFFFLL;
        qword_254115740 = (uint64_t)&off_24ED1FA08;
        qword_254115778 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254115770);
        qword_254115740 = (uint64_t)&off_24ED6E3D0;
        __cxa_guard_release(&qword_2541156F8);
      }
      if ((_MergedGlobals_327 & 1) == 0)
      {
        v15 = re::introspect_AcousticAbsorptionMaterial((re::IntrospectionBase **)1);
        if ((_MergedGlobals_327 & 1) == 0)
        {
          v16 = v15;
          _MergedGlobals_327 = 1;
          v17 = *(_DWORD *)(v15 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115740, 0);
          qword_254115750 = 0x2800000003;
          dword_254115758 = v17;
          word_25411575C = 0;
          *(_QWORD *)&xmmword_254115760 = 0;
          *((_QWORD *)&xmmword_254115760 + 1) = 0xFFFFFFFFLL;
          qword_254115770 = v16;
          qword_254115778 = 0;
          qword_254115740 = (uint64_t)&off_24ED6E3D0;
          re::IntrospectionRegistry::add(v18, v19);
          re::getPrettyTypeName((re *)&qword_254115740, (const re::IntrospectionBase *)&v59);
          if ((v60 & 1) != 0)
            v20 = v61;
          else
            v20 = (char *)&v60 + 1;
          if (v59 && (v60 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v59 + 40))();
          v56 = *(_OWORD *)(v16 + 32);
          v21 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v57);
          if (v21)
          {
            v22 = *v21;
            *((_QWORD *)&v55 + 1) = v22;
          }
          else
          {
            v58 = v56;
            re::TypeBuilder::beginListType((uint64_t)&v59, v57, 1, 0x28uLL, 8uLL, &v58);
            re::TypeBuilder::setConstructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v59, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v59, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v59, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v59, v23);
          }
          xmmword_254115760 = v55;
          re::StringID::destroyString((re::StringID *)v57);
        }
      }
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "absorptionMaterials";
      *(_QWORD *)(v24 + 16) = &qword_254115740;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0xA800000002;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254115720 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v26 = atomic_load((unsigned __int8 *)&qword_254115700);
      if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254115700))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115780, 0);
        *(uint64_t *)((char *)&qword_254115790 + 6) = 0;
        qword_254115790 = 0;
        *(_QWORD *)&xmmword_2541157A0 = 0;
        *((_QWORD *)&xmmword_2541157A0 + 1) = 0xFFFFFFFFLL;
        qword_254115780 = (uint64_t)&off_24ED1FA08;
        qword_2541157B8 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541157B0);
        qword_254115780 = (uint64_t)&off_24ED6E468;
        __cxa_guard_release(&qword_254115700);
      }
      if ((byte_2541156D9 & 1) == 0)
      {
        v27 = re::introspect_AcousticScatteringMaterial((re::IntrospectionBase **)1);
        if ((byte_2541156D9 & 1) == 0)
        {
          v28 = v27;
          byte_2541156D9 = 1;
          v29 = *(_DWORD *)(v27 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115780, 0);
          qword_254115790 = 0x2800000003;
          *(_DWORD *)algn_254115798 = v29;
          *(_WORD *)&algn_254115798[4] = 0;
          *(_QWORD *)&xmmword_2541157A0 = 0;
          *((_QWORD *)&xmmword_2541157A0 + 1) = 0xFFFFFFFFLL;
          qword_2541157B0 = v28;
          qword_2541157B8 = 0;
          qword_254115780 = (uint64_t)&off_24ED6E468;
          re::IntrospectionRegistry::add(v30, v31);
          re::getPrettyTypeName((re *)&qword_254115780, (const re::IntrospectionBase *)&v59);
          if ((v60 & 1) != 0)
            v32 = v61;
          else
            v32 = (char *)&v60 + 1;
          if (v59 && (v60 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v59 + 40))();
          v56 = *(_OWORD *)(v28 + 32);
          v33 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v57);
          if (v33)
          {
            v34 = *v33;
            *((_QWORD *)&v55 + 1) = v34;
          }
          else
          {
            v58 = v56;
            re::TypeBuilder::beginListType((uint64_t)&v59, v57, 1, 0x28uLL, 8uLL, &v58);
            re::TypeBuilder::setConstructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v59, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v59, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v59, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v59, v35);
          }
          xmmword_2541157A0 = v55;
          re::StringID::destroyString((re::StringID *)v57);
        }
      }
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "scatteringMaterials";
      *(_QWORD *)(v36 + 16) = &qword_254115780;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0xF800000003;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254115728 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v38 = atomic_load((unsigned __int8 *)&qword_254115708);
      if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254115708))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541157C0, 0);
        *(uint64_t *)((char *)&qword_2541157D0 + 6) = 0;
        qword_2541157D0 = 0;
        *(_QWORD *)&xmmword_2541157E0 = 0;
        *((_QWORD *)&xmmword_2541157E0 + 1) = 0xFFFFFFFFLL;
        qword_2541157C0 = (uint64_t)&off_24ED1FA08;
        qword_2541157F8 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541157F0);
        qword_2541157C0 = (uint64_t)&off_24ED6E500;
        __cxa_guard_release(&qword_254115708);
      }
      if ((byte_2541156DA & 1) == 0)
      {
        v39 = re::introspect_AcousticSoundReductionMaterial((re::IntrospectionBase **)1);
        if ((byte_2541156DA & 1) == 0)
        {
          v40 = v39;
          byte_2541156DA = 1;
          v41 = *(_DWORD *)(v39 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541157C0, 0);
          qword_2541157D0 = 0x2800000003;
          unk_2541157D8 = v41;
          word_2541157DC = 0;
          *(_QWORD *)&xmmword_2541157E0 = 0;
          *((_QWORD *)&xmmword_2541157E0 + 1) = 0xFFFFFFFFLL;
          qword_2541157F0 = v40;
          qword_2541157F8 = 0;
          qword_2541157C0 = (uint64_t)&off_24ED6E500;
          re::IntrospectionRegistry::add(v42, v43);
          re::getPrettyTypeName((re *)&qword_2541157C0, (const re::IntrospectionBase *)&v59);
          if ((v60 & 1) != 0)
            v44 = v61;
          else
            v44 = (char *)&v60 + 1;
          if (v59 && (v60 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v59 + 40))();
          v56 = *(_OWORD *)(v40 + 32);
          v45 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v57);
          if (v45)
          {
            v46 = *v45;
            *((_QWORD *)&v55 + 1) = v46;
          }
          else
          {
            v58 = v56;
            re::TypeBuilder::beginListType((uint64_t)&v59, v57, 1, 0x28uLL, 8uLL, &v58);
            re::TypeBuilder::setConstructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v59, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v59, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v59, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v59, v47);
          }
          xmmword_2541157E0 = v55;
          re::StringID::destroyString((re::StringID *)v57);
        }
      }
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "soundReductionMaterials";
      *(_QWORD *)(v48 + 16) = &qword_2541157C0;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0x14800000004;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_254115730 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      v51 = re::introspect_double((re *)1, v50);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "lastUpdateTimestamp";
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x1A000000005;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_254115738 = v52;
      __cxa_guard_release(&qword_2541156E0);
    }
  }
  *((_QWORD *)this + 2) = 0x1B000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254115710;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AcousticMeshComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AcousticMeshComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AcousticMeshComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AcousticMeshComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v53 = v54;
}

double re::internal::defaultConstruct<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AcousticMeshComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AcousticMeshComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AcousticMeshComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticMeshComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AcousticMeshComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AcousticMeshComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AcousticMeshComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AcousticMeshSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541156F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541156F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115878, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115888 = 0;
    qword_254115898 = 0;
    qword_2541158A0 = 0xFFFFFFFFLL;
    qword_254115878 = (uint64_t)&off_24ED7DAA8;
    qword_2541158A8 = (uint64_t)"AcousticMeshSystem";
    dword_2541158B0 = 0;
    xmmword_2541158B8 = 0u;
    unk_2541158C8 = 0u;
    xmmword_2541158D8 = 0u;
    qword_2541158E8 = 0;
    __cxa_guard_release(&qword_2541156F0);
  }
  return &qword_254115878;
}

void re::ecs2::initInfo_AcousticMeshSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xFAA62CA9EBAFD77ELL;
  v5[1] = "AcousticMeshSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1A800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AcousticMeshSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AcousticMeshSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AcousticMeshSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AcousticMeshSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AcousticMeshSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AcousticMeshSystem *re::internal::defaultConstruct<re::ecs2::AcousticMeshSystem>(int a1, int a2, re::ecs2::AcousticMeshSystem *this)
{
  return re::ecs2::AcousticMeshSystem::AcousticMeshSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AcousticMeshSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a3 + 48));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 16);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AcousticMeshSystem>(_QWORD *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a1 + 48));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 16);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AcousticMeshSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AcousticMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AcousticMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AcousticMeshSystem>, this);
}

uint64_t re::DynamicArray<re::AcousticAbsorptionMaterial>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  re::DynamicString *v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (re::DynamicString *)(*((_QWORD *)this + 4) + 112 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 32, (uint64_t *)a2 + 4);
  result = re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 72, (uint64_t *)a2 + 9);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::ecs2::AcousticMeshComponent::clearAllMeshMaterials(re::ecs2::AcousticMeshComponent *this)
{
  _QWORD *result;

  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 21);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 26);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 31);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 36);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 41);
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 46);
  *((_BYTE *)this + 408) = 1;
  return result;
}

void re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsWetDry(re::ecs2::AcousticMeshComponent *this, float a2)
{
  re *v3;
  float v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  double v16;
  _OWORD buf[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 > 1.0)
    a2 = 1.0;
  if (a2 < -1.0)
    a2 = -1.0;
  v4 = powf(3.0, -a2);
  v5 = *((_QWORD *)this + 23);
  if (v5)
  {
    v6 = v4;
    v7 = 0;
    v8 = v4;
    do
    {
      v9 = *((_QWORD *)this + 25);
      v10 = v9 + 112 * v7;
      v12 = *(_QWORD *)(v10 + 88);
      v11 = (unint64_t *)(v10 + 88);
      if (v12)
      {
        v13 = 0;
        v14 = (_QWORD *)(v9 + 112 * v7 + 104);
        do
        {
          *(float *)(*v14 + 4 * v13) = v6 * *(float *)(*v14 + 4 * v13);
          v15 = (id)*re::audioLogObjects(v3);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            if (*v11 <= v13)
            {
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v16 = *(float *)(*v14 + 4 * v13);
            LODWORD(buf[0]) = 134218496;
            *(double *)((char *)buf + 4) = v16;
            WORD6(buf[0]) = 2048;
            *(double *)((char *)buf + 14) = v8;
            WORD3(buf[1]) = 2048;
            *((_QWORD *)&buf[1] + 1) = 0x4072C00000000000;
            _os_log_debug_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEBUG, "[DryWet Ratio] absorption coefficient set to %f with ratioScale set to %f, maxScaleValue set to +/- %f [%%]", (uint8_t *)buf, 0x20u);
          }

          ++v13;
        }
        while (*v11 > v13);
        v5 = *((_QWORD *)this + 23);
      }
      ++v7;
    }
    while (v5 > v7);
  }
  *((_BYTE *)this + 408) = 1;
}

void re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsSpecDiffuse(re::ecs2::AcousticMeshComponent *this, float a2)
{
  float v3;
  re *v4;
  float v5;
  unint64_t v6;
  float v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  double v17;
  _OWORD buf[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 > 1.0)
    a2 = 1.0;
  v3 = -1.0;
  if (a2 >= -1.0)
    v3 = a2;
  v5 = powf(3.0, v3);
  v6 = *((_QWORD *)this + 33);
  if (v6)
  {
    v7 = v5;
    v8 = 0;
    v9 = v5;
    do
    {
      v10 = *((_QWORD *)this + 35);
      v11 = v10 + 112 * v8;
      v13 = *(_QWORD *)(v11 + 88);
      v12 = (unint64_t *)(v11 + 88);
      if (v13)
      {
        v14 = 0;
        v15 = (_QWORD *)(v10 + 112 * v8 + 104);
        do
        {
          *(float *)(*v15 + 4 * v14) = v7 * *(float *)(*v15 + 4 * v14);
          v16 = (id)*re::audioLogObjects(v4);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            if (*v12 <= v14)
            {
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v17 = *(float *)(*v15 + 4 * v14);
            LODWORD(buf[0]) = 134218496;
            *(double *)((char *)buf + 4) = v17;
            WORD6(buf[0]) = 2048;
            *(double *)((char *)buf + 14) = v9;
            WORD3(buf[1]) = 2048;
            *((_QWORD *)&buf[1] + 1) = 0x4072C00000000000;
            _os_log_debug_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEBUG, "[SpecDiffuse] scattering coefficient set to %f with ratioScale set to %f, maxScaleValue set to +/- %f [%%]", (uint8_t *)buf, 0x20u);
          }

          ++v14;
        }
        while (*v12 > v14);
        v6 = *((_QWORD *)this + 33);
      }
      ++v8;
    }
    while (v6 > v8);
  }
  *((_BYTE *)this + 408) = 1;
}

void re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsDullBright(_BOOL8 this, float a2)
{
  uint64_t v2;
  float v3;
  float v4;
  unint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  std::string *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  std::string *v19;
  void *v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  void *v24;
  void **v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  std::string *v36;
  NSObject *v37;
  NSObject *v38;
  void *v39;
  std::string *v40;
  std::string *v41;
  _BOOL8 v42;
  std::string v43;
  std::string v44;
  uint64_t v45;
  _BYTE v46[28];
  __int16 v47;
  unint64_t v48;
  void *__p[4];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v2 = this;
  v53 = *MEMORY[0x24BDAC8D0];
  if (a2 > 1.0)
    a2 = 1.0;
  if (a2 >= -1.0)
    v3 = a2;
  else
    v3 = -1.0;
  if (v3 >= 0.0)
    v4 = 0.5;
  else
    v4 = 0.8;
  if (*(_QWORD *)(this + 184))
  {
    v5 = 0;
    v6 = flt_22612E198[v3 < 0.0];
    v42 = this;
    do
    {
      v7 = *(_QWORD *)(v2 + 200);
      v8 = v7 + 112 * v5;
      v9 = (unint64_t *)(v8 + 88);
      v10 = (unint64_t *)(v8 + 48);
      if (*(_QWORD *)(v8 + 88) == *(_QWORD *)(v8 + 48))
      {
        std::string::basic_string[abi:nn180100]<0>(&v44, "");
        v11 = (std::string *)std::string::basic_string[abi:nn180100]<0>(&v43, "");
        if (*v9)
        {
          v12 = 0;
          v13 = v7 + 112 * v5;
          v14 = (_QWORD *)(v13 + 64);
          v15 = (_QWORD *)(v13 + 104);
          while (1)
          {
            v16 = *v10;
            if (*v10 <= v12)
              break;
            v17 = *(float *)(*v14 + 4 * v12);
            v18 = (float)(log10f(v17) * 4.0) + -11.20412;
            *(float *)(*v15 + 4 * v12) = *(float *)(*v15 + 4 * v12)
                                       * (float)((float)(v3
                                                       * (float)((float)(v4
                                                                       + (float)(0.7
                                                                               / (float)(expf(-(float)(v6 + (float)((float)(v18 + 0.4) * -0.8)))
                                                                                       + 1.0)))
                                                               + -1.0))
                                               + 1.0);
            std::to_string((std::string *)v46, v17);
            v19 = std::string::append((std::string *)v46, ", ");
            v20 = (void *)v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            __p[2] = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p[2]) >= 0)
              v21 = __p;
            else
              v21 = (void **)__p[0];
            if (SHIBYTE(__p[2]) >= 0)
              v22 = HIBYTE(__p[2]);
            else
              v22 = (std::string::size_type)__p[1];
            std::string::append(&v44, (const std::string::value_type *)v21, v22);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            if ((v46[23] & 0x80000000) != 0)
              operator delete(*(void **)v46);
            v16 = *v9;
            if (*v9 <= v12)
              goto LABEL_74;
            std::to_string((std::string *)v46, *(float *)(*v15 + 4 * v12));
            v23 = std::string::append((std::string *)v46, ", ");
            v24 = (void *)v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            __p[2] = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p[2]) >= 0)
              v25 = __p;
            else
              v25 = (void **)__p[0];
            if (SHIBYTE(__p[2]) >= 0)
              v26 = HIBYTE(__p[2]);
            else
              v26 = (std::string::size_type)__p[1];
            v11 = std::string::append(&v43, (const std::string::value_type *)v25, v26);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            if ((v46[23] & 0x80000000) != 0)
              operator delete(*(void **)v46);
            if (*v9 <= ++v12)
              goto LABEL_37;
          }
          v45 = 0;
          v51 = 0u;
          v52 = 0u;
          v50 = 0u;
          memset(__p, 0, sizeof(__p));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v46 = 136315906;
          *(_QWORD *)&v46[4] = "operator[]";
          *(_WORD *)&v46[12] = 1024;
          *(_DWORD *)&v46[14] = 789;
          *(_WORD *)&v46[18] = 2048;
          *(_QWORD *)&v46[20] = v12;
          v47 = 2048;
          v48 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_74:
          v45 = 0;
          v51 = 0u;
          v52 = 0u;
          v50 = 0u;
          memset(__p, 0, sizeof(__p));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v46 = 136315906;
          *(_QWORD *)&v46[4] = "operator[]";
          *(_WORD *)&v46[12] = 1024;
          *(_DWORD *)&v46[14] = 789;
          *(_WORD *)&v46[18] = 2048;
          *(_QWORD *)&v46[20] = v12;
          v47 = 2048;
          v48 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_37:
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          v28 = (std::string *)v44.__r_.__value_.__r.__words[0];
          v27 = --v44.__r_.__value_.__l.__size_;
        }
        else
        {
          v27 = HIBYTE(v44.__r_.__value_.__r.__words[2]) - 1;
          *((_BYTE *)&v44.__r_.__value_.__s + 23) = v27 & 0x7F;
          v28 = &v44;
        }
        v28->__r_.__value_.__s.__data_[v27] = 0;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (std::string *)v44.__r_.__value_.__r.__words[0];
          v31 = --v44.__r_.__value_.__l.__size_;
        }
        else
        {
          v31 = HIBYTE(v44.__r_.__value_.__r.__words[2]) - 1;
          *((_BYTE *)&v44.__r_.__value_.__s + 23) = v31 & 0x7F;
          v32 = &v44;
        }
        v2 = v42;
        v32->__r_.__value_.__s.__data_[v31] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
          v33 = --v43.__r_.__value_.__l.__size_;
        }
        else
        {
          v33 = HIBYTE(v43.__r_.__value_.__r.__words[2]) - 1;
          *((_BYTE *)&v43.__r_.__value_.__s + 23) = v33 & 0x7F;
          v34 = &v43;
        }
        v34->__r_.__value_.__s.__data_[v33] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
          v35 = --v43.__r_.__value_.__l.__size_;
        }
        else
        {
          v35 = HIBYTE(v43.__r_.__value_.__r.__words[2]) - 1;
          *((_BYTE *)&v43.__r_.__value_.__s + 23) = v35 & 0x7F;
          v36 = &v43;
        }
        v36->__r_.__value_.__s.__data_[v35] = 0;
        v37 = *re::audioLogObjects((re *)v11);
        this = os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG);
        if (this)
        {
          v40 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
          v41 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v41 = (std::string *)v43.__r_.__value_.__r.__words[0];
          LODWORD(__p[0]) = 134218498;
          *(double *)((char *)__p + 4) = v3;
          WORD2(__p[1]) = 2080;
          *(void **)((char *)&__p[1] + 6) = v40;
          HIWORD(__p[2]) = 2080;
          __p[3] = v41;
          _os_log_debug_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEBUG, "[DullBright] adjustment of %f changed the material's absorption coefficient for the frequencies %s to %s.", (uint8_t *)__p, 0x20u);
        }
        if (*v10 != 31)
        {
          v38 = *re::audioLogObjects((re *)this);
          this = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
          if (this)
          {
            if ((*(_BYTE *)(v8 + 8) & 1) != 0)
              v39 = *(void **)(v8 + 16);
            else
              v39 = (void *)(v8 + 9);
            LODWORD(__p[0]) = 136315138;
            *(void **)((char *)__p + 4) = v39;
            _os_log_impl(&dword_224FE9000, v38, OS_LOG_TYPE_DEFAULT, "Material %s's absorpion coefficient adjustment may not match expectations. The algorithm was tuned to adjust 31 ISO 1/3 octave-band frequencies, but the material's coefficients are defined for other ones.", (uint8_t *)__p, 0xCu);
          }
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
      }
      else
      {
        v29 = *re::audioLogObjects((re *)this);
        this = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          if ((*(_BYTE *)(v8 + 8) & 1) != 0)
            v30 = *(void **)(v8 + 16);
          else
            v30 = (void *)(v8 + 9);
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v30;
          _os_log_impl(&dword_224FE9000, v29, OS_LOG_TYPE_DEFAULT, "Material %s's absorpion coefficients could not be adjusted because the number of frequencies did not match the number of absorption coefficients.", (uint8_t *)__p, 0xCu);
        }
      }
      ++v5;
    }
    while (*(_QWORD *)(v2 + 184) > v5);
  }
  *(_BYTE *)(v2 + 408) = 1;
}

_QWORD *re::ecs2::AcousticMeshComponent::resetAllAcousticMaterials(re::ecs2::AcousticMeshComponent *this)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)((char *)this + 168);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 21);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(v2, 0, *((re::DynamicString **)this + 30), *((_QWORD *)this + 28));
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 31);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::copy((_QWORD *)this + 31, 0, *((re::DynamicString **)this + 40), *((_QWORD *)this + 38));
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)this + 41);
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::copy((_QWORD *)this + 41, 0, *((re::DynamicString **)this + 50), *((_QWORD *)this + 48));
  *((_BYTE *)this + 408) = 1;
  return result;
}

_QWORD *re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(_QWORD *this, unint64_t a2, re::DynamicString *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (!a4)
    return this;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v15 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v16) = 136315906;
    *(_QWORD *)((char *)&v16 + 4) = "copy";
    WORD6(v16) = 1024;
    HIWORD(v16) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, a2, v4, v15, v16);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_13;
  if (v7 >= v8)
  {
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, (uint64_t *)a3 + 14 * a4, (re::DynamicString *)(this[4] + 112 * a2));
  }
  else
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity(this, a2 + a4);
    v10 = v6[2];
    v11 = (uint64_t *)((char *)a3 + 112 * (v10 - a2));
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, v11, (re::DynamicString *)(v6[4] + 112 * a2));
    if (v10 - a2 != v4)
    {
      v12 = 0;
      v13 = v6[4] + 112 * v6[2];
      v14 = 112 * a2 + 112 * v4 - 112 * v10;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v13 + v12), (const re::DynamicString *)&v11[v12 / 8]);
        re::DynamicArray<float>::DynamicArray(v13 + v12 + 32, &v11[v12 / 8 + 4]);
        this = (_QWORD *)re::DynamicArray<float>::DynamicArray(v13 + v12 + 72, &v11[v12 / 8 + 9]);
        v12 += 112;
      }
      while (v14 != v12);
    }
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

BOOL re::ecs2::AcousticMeshStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  float v24;
  NSObject *v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t j;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  float v35;
  NSObject *v36;
  double v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  re *v54;
  uint64_t *v55;
  re *v56;
  re *v57;
  uint8_t v58;
  uint64_t v59;
  uint64_t *v60;
  re *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t i;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  BOOL v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  re *v92;
  _BOOL8 v93;
  NSObject *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  os_log_t v103;
  os_log_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  unint64_t *v112;
  uint8_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130[2];
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[40];
  __int128 v136;
  int v137;
  __int128 v138;
  __int128 v139;
  int v140;
  __int128 v141;
  __int128 v142;
  int v143;
  uint64_t v144;
  uint8_t buf[64];
  __int128 v146;
  __int128 v147;
  int v148;
  __int128 v149;
  __int128 v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  v133 = 0;
  v130[1] = 0;
  v131 = 0;
  v129 = 0;
  v130[0] = 0;
  v132 = 0;
  v126 = 0;
  v127 = 0;
  v125 = 0;
  v128 = 0;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a3[1]);
  v9 = (re *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v123 = *(_QWORD *)buf;
  v124 = *(_QWORD *)&buf[8];
  v119 = a5;
  if (*(_QWORD *)buf == a5 && *(unsigned __int16 *)&buf[8] == 0xFFFFLL)
  {
    v10 = 0;
    v11 = 0;
    if ((*(_DWORD *)&buf[8] & 0xFFFF0000) == 0xFFFF0000)
    {
LABEL_121:
      if (v11 + v10)
      {
        v91 = re::audioLogObjects(v9);
        v92 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v91);
        if ((_DWORD)v92)
          goto LABEL_133;
        goto LABEL_123;
      }
      goto LABEL_124;
    }
  }
  v106 = v8;
  v112 = a3 + 6;
  v115 = 0;
  v116 = a3 + 4;
  v8 = 2048;
  v118 = a3;
  v117 = a3 + 3;
  while (1)
  {
    v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v123);
    v13 = *(_QWORD *)v12;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 88))
      break;
    if (*(_BYTE *)(*(_QWORD *)v12 + 408))
      goto LABEL_9;
    v14 = v120;
LABEL_103:
    v9 = (re *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v123);
    v80 = v123 == v119 && (unsigned __int16)v124 == 0xFFFF && WORD1(v124) == 0xFFFF;
    v120 = v14;
    if (v80)
    {
      v11 = v127;
      v10 = v131;
      v8 = v106;
      goto LABEL_121;
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)v12 + 408))
  {
LABEL_39:
    v14 = *(_QWORD *)(v13 + 72);
    if (!v14)
    {
      v43 = 0;
      v40 = 0;
      v14 = v120;
      v38 = v117;
      v39 = v118;
      goto LABEL_47;
    }
    v38 = v117;
    v39 = v118;
    if (*(_BYTE *)(v13 + 161))
    {
      v40 = *(_QWORD *)(v13 + 64);
      v114 = *(_QWORD *)(v13 + 56);
      v113 = *(_BYTE *)(v13 + 160);
      v5 = *(_QWORD *)(v13 + 416);
      *(_QWORD *)(v13 + 72) = 0;
      v41 = re::audioLogObjects((re *)v12);
      v12 = re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v41);
      if ((_DWORD)v12)
      {
        v81 = *re::audioLogObjects((re *)v12);
        v12 = os_log_type_enabled(v81, OS_LOG_TYPE_INFO);
        if ((_DWORD)v12)
        {
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v40;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v114;
          _os_log_impl(&dword_224FE9000, v81, OS_LOG_TYPE_INFO, "AcousticMeshStateImpl::processDirtyComponents() prepared mesh update for meshID(%llu) sceneID(%llu) entityID(%llu)", buf, 0x20u);
        }
      }
      v42 = v40 >> 8;
      v40 = v40;
      v115 = v42;
      v43 = 1;
      if (!*(_QWORD *)(v13 + 72))
        goto LABEL_47;
    }
    else
    {
      v43 = 0;
      v40 = 0;
      v14 = v120;
    }
    if (!*(_BYTE *)(v13 + 408))
    {
LABEL_83:
      if ((*(_BYTE *)(*(_QWORD *)(v13 + 16) + 288) & 1) != 0)
      {
        v72 = 0;
        *(_BYTE *)(v13 + 88) = 1;
        *(_BYTE *)(v13 + 408) = 0;
        do
        {
          v73 = re::ecs2::ComponentBucketsBase::componentHandle((re::ecs2::ComponentBucketsBase *)v39[2], v38[v72], (re::ecs2::Component *)v13);
          if (v73 != -1 && (v74 & 0xFFFFFF00000000) != 0)
          {
            v76 = v73;
            v77 = v74;
            goto LABEL_101;
          }
          ++v72;
        }
        while (v72 != 4);
        v76 = -1;
        v77 = 0xFFFFFFFFLL;
LABEL_101:
        v78 = v112;
        goto LABEL_102;
      }
LABEL_84:
      for (i = 0; i != 4; ++i)
      {
        v69 = re::ecs2::ComponentBucketsBase::componentHandle((re::ecs2::ComponentBucketsBase *)v39[2], v38[i], (re::ecs2::Component *)v13);
        v71 = v69 == -1 || (v70 & 0xFFFFFF00000000) == 0;
        if (!v71)
        {
          v76 = v69;
          v77 = v70;
          goto LABEL_100;
        }
      }
      v76 = -1;
      v77 = 0xFFFFFFFFLL;
LABEL_100:
      v78 = v116;
LABEL_102:
      re::ecs2::ComponentBucketsBase::moveComponent((re::ecs2::ComponentBucketsBase *)v39[2], v76, v77, *v78);
      goto LABEL_103;
    }
LABEL_47:
    if (!*(_BYTE *)(v13 + 161) && !*(_QWORD *)(v13 + 80))
    {
      v62 = *(_QWORD *)(v13 + 40);
      if (v62)
      {
        v63 = atomic_load((unsigned int *)(v62 + 704));
        if (v63 == 2)
        {
          v64 = *(_QWORD *)(v13 + 40);
          if (v64)
          {
            v122 = v40;
            v65 = *(uint64_t **)(v64 + 264);
            v71 = v65 == re::AcousticMeshAsset::assetType((re::AcousticMeshAsset *)v12);
            v40 = v122;
            if (v71)
            {
              v66 = re::AssetHandle::asset<re::AcousticMeshAsset>((re::AcousticMeshAsset *)(v13 + 32));
              re::ObjCObject::operator=((id *)(v13 + 80), (id *)(v66 + 752));
            }
          }
          else
          {
            re::AcousticMeshAsset::assetType((re::AcousticMeshAsset *)v12);
          }
        }
      }
    }
    if (*(_QWORD *)(v13 + 80))
    {
      v121 = v43;
      *(_QWORD *)buf = 0;
      do
      {
        arc4random_buf(buf, 8uLL);
        v44 = *(_QWORD *)buf;
      }
      while (*(_QWORD *)buf < 0x3E8uLL);
      *(_QWORD *)(v13 + 72) = *(_QWORD *)buf;
      if (*(_BYTE *)(v13 + 161))
      {
        if (v121)
        {
          v45 = (re *)*(id *)(v13 + 80);
          v46 = re::audioLogObjects(v45);
          v47 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v46);
          v48 = v40 | (v115 << 8);
          if ((_DWORD)v47)
          {
            loga = *re::audioLogObjects(v47);
            v47 = (re *)os_log_type_enabled(loga, OS_LOG_TYPE_INFO);
            if ((_DWORD)v47)
            {
              *(_DWORD *)buf = 134218752;
              *(_QWORD *)&buf[4] = v14;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v44;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v48;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v114;
              _os_log_impl(&dword_224FE9000, loga, OS_LOG_TYPE_INFO, "AcousticMeshStateImpl::processDirtyComponents() prepared mesh update for oldMeshID(%llu) newMeshID(%llu) sceneID(%llu) entityID(%llu)", buf, 0x2Au);
            }
          }
          *(_QWORD *)buf = v48;
          *(_QWORD *)&buf[8] = v114;
          *(_QWORD *)&buf[16] = v14;
          *(_QWORD *)&buf[24] = v44;
          *(_QWORD *)&buf[32] = v45;
          buf[40] = v113;
          *(_DWORD *)&buf[41] = *(_DWORD *)v135;
          *(_DWORD *)&buf[44] = *(_DWORD *)&v135[3];
          *(_QWORD *)&buf[48] = v5;
          v154 = 1;
          v49 = v127;
          if (v127 >= v126)
          {
            v50 = v127 + 1;
            if (v126 < v127 + 1)
            {
              if (v125)
              {
                v51 = 8;
                if (v126)
                  v51 = 2 * v126;
                if (v51 <= v50)
                  v52 = v127 + 1;
                else
                  v52 = v51;
                re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity(&v125, v52);
              }
              else
              {
                re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity(&v125, v50);
                ++v128;
              }
            }
            v49 = v127;
          }
          v67 = v129 + 168 * v49;
          *(_BYTE *)v67 = 0;
          *(_DWORD *)(v67 + 160) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>>(v67, (uint64_t)buf);
          ++v127;
          ++v128;
          if (v154 != -1)
            ((void (*)(uint64_t *, uint8_t *))off_24ED6E368[v154])(&v134, buf);
        }
        else
        {
          v107 = *(_QWORD *)(v13 + 56);
          log = *(os_log_t *)(v13 + 64);
          v57 = (re *)*(id *)(v13 + 80);
          v58 = *(_BYTE *)(v13 + 160);
          v59 = *(_QWORD *)(v13 + 416);
          v60 = re::audioLogObjects(v57);
          v61 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v60);
          if ((_DWORD)v61)
          {
            v104 = (os_log_t)*re::audioLogObjects(v61);
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
            {
              v98 = *(_QWORD *)(v13 + 64);
              v99 = *(_QWORD *)(v13 + 56);
              v88 = v14;
              v89 = *(_QWORD *)(v13 + 72);
              v102 = *(id *)(v13 + 80);
              v105 = v104;
              objc_msgSend(v102, "submeshes");
              v100 = (void *)objc_claimAutoreleasedReturnValue();
              v96 = objc_msgSend(v100, "count");
              v97 = *(id *)(v13 + 80);
              v90 = objc_msgSend(v97, "vertexCount");
              *(_DWORD *)buf = 134219008;
              *(_QWORD *)&buf[4] = v89;
              v14 = v88;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v98;
              v38 = v117;
              v39 = v118;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v99;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v96;
              *(_WORD *)&buf[42] = 2048;
              *(_QWORD *)&buf[44] = v90;
              _os_log_debug_impl(&dword_224FE9000, v105, OS_LOG_TYPE_DEBUG, "AcousticMeshStateImpl::processDirtyComponents() prepared new ARKit mesh for meshID(%llu) sceneID(%llu) entityID(%llu) submeshes(%lu) vertices(%lu)", buf, 0x34u);

            }
          }
          *(_QWORD *)buf = log;
          *(_QWORD *)&buf[8] = v107;
          *(_QWORD *)&buf[16] = v44;
          *(_QWORD *)&buf[24] = v57;
          buf[32] = v58;
          *(_QWORD *)&buf[40] = v59;
          v153 = 1;
          re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::add((uint64_t)v130, (uint64_t)buf);
          if (v153 != -1)
            ((void (*)(_BYTE *, uint8_t *))off_24ED6E378[v153])(v135, buf);
        }
      }
      else
      {
        v144 = 0;
        v137 = 0;
        v136 = 0u;
        memset(&v135[8], 0, 32);
        v140 = 0;
        v138 = 0u;
        v139 = 0u;
        v141 = 0u;
        v142 = 0u;
        v143 = 0;
        v53 = *(void **)(v13 + 80);
        *(_QWORD *)&v135[16] = *(_QWORD *)(v13 + 72);
        *(int8x16_t *)v135 = vextq_s8(*(int8x16_t *)(v13 + 56), *(int8x16_t *)(v13 + 56), 8uLL);
        *(_QWORD *)&v135[24] = v53;
        re::DynamicArray<re::AcousticAbsorptionMaterial>::operator=((uint64_t)&v135[32], (uint64_t *)(v13 + 168));
        re::DynamicArray<re::AcousticScatteringMaterial>::operator=((uint64_t)&v138 + 8, (uint64_t *)(v13 + 248));
        v54 = (re *)re::DynamicArray<re::AcousticSoundReductionMaterial>::operator=((uint64_t)&v141 + 8, (uint64_t *)(v13 + 328));
        v55 = re::audioLogObjects(v54);
        v56 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v55);
        if ((_DWORD)v56)
        {
          v82 = *re::audioLogObjects(v56);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
          {
            v83 = *(_QWORD *)(v13 + 64);
            v103 = *(os_log_t *)(v13 + 56);
            v84 = *(_QWORD *)(v13 + 72);
            logb = (os_log_t)*(id *)(v13 + 80);
            v85 = v82;
            -[NSObject submeshes](logb, "submeshes");
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            v101 = objc_msgSend(v108, "count");
            v86 = *(id *)(v13 + 80);
            v87 = objc_msgSend(v86, "vertexCount");
            *(_DWORD *)buf = 134219008;
            *(_QWORD *)&buf[4] = v84;
            v38 = v117;
            v39 = v118;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v83;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v103;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v101;
            *(_WORD *)&buf[42] = 2048;
            *(_QWORD *)&buf[44] = v87;
            _os_log_debug_impl(&dword_224FE9000, v85, OS_LOG_TYPE_DEBUG, "AcousticMeshStateImpl::processDirtyComponents() prepared new non-ARKit mesh for meshID(%llu) sceneID(%llu) entityID(%llu) submeshes(%lu) vertices(%lu)", buf, 0x34u);

          }
        }
        *(_OWORD *)buf = *(_OWORD *)v135;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v135[16];
        *(_OWORD *)&buf[24] = *(_OWORD *)&v135[24];
        *(_OWORD *)&v135[24] = 0u;
        *(_OWORD *)&buf[40] = v136;
        v136 = 0u;
        ++v137;
        *(_DWORD *)&buf[56] = 1;
        v146 = v138;
        v147 = v139;
        v138 = 0u;
        v139 = 0u;
        v152 = v144;
        v149 = v141;
        v141 = 0u;
        v150 = v142;
        v142 = 0u;
        v144 = 0;
        ++v140;
        ++v143;
        v148 = 1;
        v151 = 1;
        v153 = 0;
        re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::add((uint64_t)v130, (uint64_t)buf);
        if (v153 != -1)
          ((void (*)(uint64_t *, uint8_t *))off_24ED6E378[v153])(&v134, buf);
        re::ecs2::AcousticMeshComponent::resetAllAcousticMaterials((re::ecs2::AcousticMeshComponent *)v13);
        re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v141 + 8);
        re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v138 + 8);
        re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v135[32]);

      }
    }
    if (!*(_QWORD *)(v13 + 72))
      goto LABEL_84;
    goto LABEL_83;
  }
LABEL_9:
  v15 = *re::audioLogObjects((re *)v12);
  v12 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)v12)
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEBUG, "Updating the Acoustic Materials", buf, 2u);
  }
  v16 = *(_QWORD *)(v13 + 184);
  if (!v16)
  {
LABEL_25:
    v28 = *(_QWORD *)(v13 + 264);
    if (v28)
    {
      for (j = 0; j < v28; ++j)
      {
        v30 = *(_QWORD *)(v13 + 280);
        v31 = v30 + 112 * j;
        v33 = *(_QWORD *)(v31 + 88);
        v32 = (unint64_t *)(v31 + 88);
        if (v33)
        {
          v22 = 0;
          v34 = (_QWORD *)(v30 + 112 * j + 104);
          do
          {
            v35 = *(float *)(*v34 + 4 * v22);
            if (v35 > 0.95)
              v35 = 0.95;
            if (v35 < 0.1)
              v35 = 0.1;
            *(float *)(*v34 + 4 * v22) = v35;
            v36 = (id)*re::audioLogObjects((re *)v12);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              v26 = *v32;
              if (*v32 <= v22)
                goto LABEL_132;
              v37 = *(float *)(*v34 + 4 * v22);
              *(_DWORD *)buf = 134218496;
              *(double *)&buf[4] = v37;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = 0x3FB99999A0000000;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = 0x3FEE666660000000;
              _os_log_debug_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEBUG, "Scattering coefficient set to %f with clampMin set to %f, clampMax set to %f", buf, 0x20u);
            }

            ++v22;
          }
          while (*v32 > v22);
          v28 = *(_QWORD *)(v13 + 264);
        }
      }
    }
    goto LABEL_39;
  }
  v17 = 0;
  while (1)
  {
    v18 = *(_QWORD *)(v13 + 200);
    v19 = v18 + 112 * v17;
    v21 = *(_QWORD *)(v19 + 88);
    v20 = (unint64_t *)(v19 + 88);
    if (v21)
      break;
LABEL_24:
    if (v16 <= ++v17)
      goto LABEL_25;
  }
  v22 = 0;
  v23 = (_QWORD *)(v18 + 112 * v17 + 104);
  while (2)
  {
    v24 = *(float *)(*v23 + 4 * v22);
    if (v24 > 0.95)
      v24 = 0.95;
    if (v24 < 0.01)
      v24 = 0.01;
    *(float *)(*v23 + 4 * v22) = v24;
    v25 = (id)*re::audioLogObjects((re *)v12);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
LABEL_20:

      if (*v20 <= ++v22)
      {
        v16 = *(_QWORD *)(v13 + 184);
        goto LABEL_24;
      }
      continue;
    }
    break;
  }
  v26 = *v20;
  if (*v20 > v22)
  {
    v27 = *(float *)(*v23 + 4 * v22);
    *(_DWORD *)buf = 134218496;
    *(double *)&buf[4] = v27;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 0x3F847AE140000000;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 0x3FEE666660000000;
    _os_log_debug_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEBUG, "Absorption coefficient set to %f with clampMin set to %f, clampMax set to %f", buf, 0x20u);
    goto LABEL_20;
  }
  v134 = 0;
  v146 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v135 = 136315906;
  *(_QWORD *)&v135[4] = "operator[]";
  *(_WORD *)&v135[12] = 1024;
  *(_DWORD *)&v135[14] = 789;
  *(_WORD *)&v135[18] = 2048;
  *(_QWORD *)&v135[20] = v22;
  *(_WORD *)&v135[28] = 2048;
  *(_QWORD *)&v135[30] = v26;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_132:
  v134 = 0;
  v146 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v135 = 136315906;
  *(_QWORD *)&v135[4] = "operator[]";
  *(_WORD *)&v135[12] = 1024;
  *(_DWORD *)&v135[14] = 789;
  *(_WORD *)&v135[18] = 2048;
  *(_QWORD *)&v135[20] = v22;
  *(_WORD *)&v135[28] = 2048;
  *(_QWORD *)&v135[30] = v26;
  _os_log_send_and_compose_impl();
  v92 = (re *)_os_crash_msg();
  __break(1u);
LABEL_133:
  v95 = *re::audioLogObjects(v92);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v127;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v131;
    _os_log_debug_impl(&dword_224FE9000, v95, OS_LOG_TYPE_DEBUG, "AcousticMeshStateImpl::processDirtyComponents() prepared to update %lu and add %lu meshes", buf, 0x16u);
  }
LABEL_123:
  v11 = v127;
LABEL_124:
  if (v11)
  {
    re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::DynamicArray((uint64_t)buf, (uint64_t *)&v125);
    *(_DWORD *)&buf[40] = 2;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 232))(v8, buf);
    if (*(_DWORD *)&buf[40] != -1)
      ((void (*)(_BYTE *, uint8_t *))off_24ED6E398[*(unsigned int *)&buf[40]])(v135, buf);
  }
  if (v131)
  {
    re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::DynamicArray((uint64_t)buf, v130);
    *(_DWORD *)&buf[40] = 1;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 232))(v8, buf);
    if (*(_DWORD *)&buf[40] != -1)
      ((void (*)(_BYTE *, uint8_t *))off_24ED6E398[*(unsigned int *)&buf[40]])(v135, buf);
  }
  v93 = *(_DWORD *)(v119 + 40) != 0;
  re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::deinit((uint64_t)&v125);
  re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::deinit((uint64_t)v130);
  return v93;
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 160 * v5;
  *(_BYTE *)v11 = 0;
  *(_DWORD *)(v11 + 152) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>>(v11, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

BOOL re::ecs2::AcousticMeshStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  __n128 v21;
  __n128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  float32x4_t v35[4];
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v36, a5, 0);
  v34 = v36;
  if (v36.n128_u64[0] != a5 || v36.n128_u16[4] != 0xFFFFLL || (v36.n128_u32[2] & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
      v11 = *(_QWORD *)v10;
      if (*(_BYTE *)(*(_QWORD *)v10 + 88) && !*(_BYTE *)(v11 + 408))
      {
        re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v11 + 16), (const re::ecs2::Entity *)1, &v36);
        if (!*(_BYTE *)(v11 + 89) || !re::areAlmostEqual<float>((float *)&v36, (float *)(v11 + 96)))
        {
          v21 = v37;
          *(__n128 *)(v11 + 96) = v36;
          *(__n128 *)(v11 + 112) = v21;
          v22 = v39;
          *(__n128 *)(v11 + 128) = v38;
          *(__n128 *)(v11 + 144) = v22;
          v23 = *(float32x4_t *)(v11 + 112);
          v24 = *(float32x4_t *)(v11 + 128);
          v25 = *(float32x4_t *)(v11 + 144);
          v35[0] = *(float32x4_t *)(v11 + 96);
          v35[1] = v23;
          v35[2] = v24;
          v35[3] = v25;
          re::audio::cleanUpTransformForPHASE(v35, v18, v19, v20, (uint64_t)&v36);
          v31 = v37;
          v32 = v36;
          v30 = v38;
          v33 = v39;
          v26 = *(_QWORD *)(v11 + 16);
          do
          {
            v27 = v26;
            v26 = *(_QWORD *)(v26 + 24);
          }
          while (v26);
          v28 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(v27 + 16));
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v28 + 272))(v28, *(_QWORD *)(v11 + 64), *(_QWORD *)(v11 + 56), 0, v32, v31, v30, v33, *(__n128 *)(v11 + 96), *(__n128 *)(v11 + 112), *(__n128 *)(v11 + 128), *(__n128 *)(v11 + 144));
          *(_BYTE *)(v11 + 89) = 1;
        }
      }
      else
      {
        for (i = 24; i != 56; i += 8)
        {
          v13 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), *(_QWORD *)(a3 + i), (re::ecs2::Component *)v11);
          if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
          {
            v16 = v13;
            v17 = v14;
            goto LABEL_18;
          }
        }
        v16 = -1;
        v17 = 0xFFFFFFFFLL;
LABEL_18:
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a3, v16, v17);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v34);
    }
    while (v34.n128_u64[0] != a5 || v34.n128_u16[4] != 0xFFFF || v34.n128_u16[5] != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AcousticMeshSystem::willAddSystemToECSService(re::ecs2::AcousticMeshSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((_QWORD *)this + 46) = result;
  *((_QWORD *)this + 15) = result;
  return result;
}

uint64_t re::ecs2::AcousticMeshSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 368) = 0;
  *(_QWORD *)(this + 120) = 0;
  return this;
}

uint64_t re::ecs2::AcousticMeshSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  re::ecs2::Scene *v48;
  uint64_t v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v48 = a2;
  if (!a2)
    return this;
  v2 = this;
  v3 = (_DWORD *)re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)&v50 = v2;
  *((_QWORD *)&v50 + 1) = re::ecs2::AcousticMeshSystem::activateComponents;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v3 + 54, (uint64_t)&v50);
  *(_QWORD *)&v50 = v2;
  *((_QWORD *)&v50 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v3 + 76, (uint64_t)&v50);
  *(_QWORD *)&v50 = v2;
  *((_QWORD *)&v50 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v3 + 98, (uint64_t)&v50);
  std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__emplace_unique_key_args<re::ecs2::Scene *,re::ecs2::Scene * const&>(v2 + 384, &v48, &v48);
  v4 = (uint64_t)v48;
  v49[0] = (uint64_t)v48;
  v5 = *(_QWORD *)(v2 + 256);
  v6 = *(_DWORD *)(v2 + 264);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(v2 + 272);
    else
      v7 = *(_QWORD **)(v2 + 280);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(v2 + 272);
    if (!v5)
      goto LABEL_18;
  }
  else
  {
    v8 = *(uint64_t **)(v2 + 280);
    if (!v5)
      goto LABEL_18;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_17:
    *(_QWORD *)&v50 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v2 + 248, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 128, v50);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::init(v13, v2 + 128, v4);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 184), v49, (uint64_t *)&v50);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v2 + 248, v50);
    v14 = v2 + 296;
    v15 = v50;
    goto LABEL_50;
  }
LABEL_18:
  v57 = 0u;
  v50 = 0u;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = -1;
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  v55 = 1;
  v56 = 0uLL;
  v16 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)&v57 = 0;
  v17 = *(_QWORD *)(v2 + 136);
  DWORD2(v57) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::setBucketsCapacity((uint64_t *)(v2 + 128), (v16 + 4) >> 2);
    v17 = *(_QWORD *)(v2 + 136);
  }
  if (v17 <= v16 >> 2)
  {
    v49[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v16 >> 2;
    v64 = 2048;
    v65 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  if ((*(_BYTE *)(v2 + 144) & 1) != 0)
    v18 = v2 + 152;
  else
    v18 = *(_QWORD *)(v2 + 160);
  v19 = *(_QWORD *)(v18 + 8 * (v16 >> 2));
  ++*(_QWORD *)(v2 + 168);
  ++*(_DWORD *)(v2 + 176);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v50;
  v22 = v51;
  v23 = v52;
  *(_QWORD *)(v20 + 48) = v53;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v53 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v50);
  v25 = *(_QWORD *)(v2 + 168);
  if (!v25)
  {
LABEL_73:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 128, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::init(v26, v2 + 128, v49[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(v2 + 168) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 184), v49, (uint64_t *)v66);
  v27 = *(_QWORD *)(v2 + 168);
  v28 = *(_QWORD *)(v2 + 288);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(v2 + 288) = v27;
  *(_QWORD *)&v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 248), v29, &v50);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(v2 + 288) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(v2 + 264) & 1) != 0)
      v32 = v2 + 272;
    else
      v32 = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(v2 + 256) - 8) &= v30;
  }
  v33 = *(_QWORD *)(v2 + 168);
  v34 = *(_QWORD *)(v2 + 336);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *(_QWORD *)(v2 + 336) = v33;
  *(_QWORD *)&v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 296), v35, &v50);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *(_QWORD *)(v2 + 336) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*(_BYTE *)(v2 + 312) & 1) != 0)
      v38 = v2 + 320;
    else
      v38 = *(_QWORD *)(v2 + 328);
    *(_QWORD *)(v38 + 8 * *(_QWORD *)(v2 + 304) - 8) &= v36;
  }
  v15 = *(_QWORD *)&v66[0];
  v14 = v2 + 296;
LABEL_50:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(v2 + 360))
    goto LABEL_68;
  v39 = *(_QWORD *)(v2 + 304);
  v40 = *(_DWORD *)(v2 + 312);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)(v2 + 320);
    else
      v41 = *(_QWORD **)(v2 + 328);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        goto LABEL_68;
    }
    goto LABEL_66;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)(v2 + 320);
    if (!v39)
      goto LABEL_68;
  }
  else
  {
    v42 = *(uint64_t **)(v2 + 328);
    if (!v39)
      goto LABEL_68;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
  {
LABEL_66:
    v47 = *(re::ecs2::System **)(v2 + 344);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
  }
LABEL_68:
  this = *(_QWORD *)(v2 + 368);
  if (this)
  {
    this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 16))(this, v48);
    if (this)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, 770);
  }
  return this;
}

uint64_t ___ZN2re4ecs218AcousticMeshSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke(uint64_t a1)
{
  re *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = (re *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v3 = *((_QWORD *)v2 + 3);
  if (v3)
  {
    v4 = (uint64_t *)*((_QWORD *)v2 + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      v7 = *re::audioLogObjects(v2);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v7;
        v10 = *(_QWORD *)(*(_QWORD *)(v8 + 104) + 280);
        v11 = *(_QWORD *)(a1 + 40);
        v12 = *(_QWORD *)(v6 + 16);
        v13 = *(_QWORD *)(v12 + 280);
        v14 = *(_QWORD *)(v12 + 296);
        v15 = *(_QWORD *)(v6 + 72);
        *(_DWORD *)buf = 136316162;
        v18 = v10;
        v19 = 2048;
        v20 = v11;
        v21 = 2080;
        v22 = v13;
        v23 = 2048;
        v24 = v14;
        v25 = 2048;
        v26 = v15;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "[AcousticMeshSystem::ServiceResetCallback] deregistering geometry for scene(%s, %llu) entity(%s, %llu) meshAssetID(%llu)", buf, 0x34u);

      }
      *(_QWORD *)(v6 + 72) = 0;
      *(_WORD *)(v6 + 88) = 0;
      v2 = (re *)re::ecs2::Component::markDirty((_QWORD *)v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), 3, *(_QWORD *)(a1 + 40), 1);
}

_QWORD *re::ecs2::AcousticMeshSystem::willRemoveSceneFromECSService(_QWORD *this, re::ecs2::Scene *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  if (a2)
  {
    v2 = this;
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v17 = v2;
    *((_QWORD *)&v17 + 1) = re::ecs2::AcousticMeshSystem::activateComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 216, &v17);
    *(_QWORD *)&v17 = v2;
    *((_QWORD *)&v17 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 304, &v17);
    *(_QWORD *)&v17 = v2;
    *((_QWORD *)&v17 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v17);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__erase_unique<re::ecs2::Scene *>(v2 + 48, &v16);
    *(_QWORD *)&v17 = v16;
    v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v2 + 23, &v17);
    if (v4 != -1)
    {
      v5 = v2[24] + 16 * v4;
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)(v2 + 31), *(_QWORD *)(v5 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)(v2 + 37), *(_QWORD *)(v5 + 8));
      v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)(v2 + 16), *(_QWORD *)(v5 + 8));
      if (*v6)
      {
        v7 = v6;
        *v6 = 0;
        v8 = v6 + 1;
        v9 = *(_QWORD *)(v6[1] + 288);
        if (v9)
        {
          v10 = v6[12];
          if (v10)
          {
            for (i = 0; i != v10; ++i)
            {
              v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
              re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
        v13 = 0;
        v14 = v7 + 3;
        do
        {
          v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
          if (*(_QWORD *)v15)
            re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
          v14[v13++] = -1;
        }
        while (v13 != 4);
        *v8 = 0;
        v8[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v2 + 23, &v17);
    }
    this = (_QWORD *)v2[46];
    if (this)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, re::ecs2::Scene *))(*this + 16))(this, v16);
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*this + 40))(this, 770, *(_QWORD *)(*((_QWORD *)v16 + 13) + 272) >> 1);
    }
  }
  return this;
}

uint64_t re::ecs2::AcousticMeshSystem::activateComponents(_BOOL8 a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v4 = a3;
    v5 = &a3[a4];
    do
    {
      v6 = *v4;
      *(_BYTE *)(v6 + 89) = 0;
      v7 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 56) = *(_QWORD *)(v7 + 296);
      do
      {
        v8 = v7;
        v7 = *(_QWORD *)(v7 + 24);
      }
      while (v7);
      *(_QWORD *)(v6 + 64) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 104) + 272) >> 1;
      v9 = *re::audioLogObjects((re *)a1);
      a1 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if (a1)
      {
        v10 = *(_QWORD *)(v6 + 16);
        v11 = v9;
        do
        {
          v12 = v10;
          v10 = *(_QWORD *)(v10 + 24);
        }
        while (v10);
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 104) + 280);
        v14 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 280);
        v16 = *(_QWORD *)(v6 + 56);
        v15 = *(_QWORD *)(v6 + 64);
        *(_DWORD *)buf = 136315906;
        v19 = v13;
        v20 = 2048;
        v21 = v15;
        v22 = 2080;
        v23 = v14;
        v24 = 2048;
        v25 = v16;
        _os_log_debug_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEBUG, "[AcousticMeshSystem::activateComponents] component for scene(%s, %llu) entity(%s, %llu)", buf, 0x2Au);

      }
      ++v4;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t re::ecs2::AcousticMeshSystem::deactivateComponents(unint64_t prime, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v5;
  BOOL v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD **v16;
  _QWORD *i;
  unint64_t v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  _QWORD **v26;
  size_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *j;
  size_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  re *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  NSObject *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v75;
  uint64_t v76;
  void *v77[2];
  void *v78[2];
  int v79;
  void *__p[2];
  void *v81[2];
  float v82;
  char v83;
  uint8_t buf[4];
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  int v90;
  _BYTE v91[32];
  __int128 v92;
  uint64_t v93;

  v5 = a3;
  v93 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(prime + 368))
    v6 = a4 == 0;
  else
    v6 = 1;
  if (v6)
    goto LABEL_130;
  v7 = prime;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v81 = 0u;
  v76 = a4;
  v82 = 1.0;
  *(_OWORD *)v77 = 0u;
  *(_OWORD *)v78 = 0u;
  v79 = 1065353216;
  v8 = &a3[a4];
  v9 = a3;
  do
  {
    v10 = *v9;
    v11 = *(_QWORD *)(*v9 + 72);
    if (!v11)
      goto LABEL_96;
    LOBYTE(v92) = 0;
    v91[24] = 0;
    v12 = *(_QWORD *)(v10 + 56);
    v13 = *(_QWORD *)(v10 + 64);
    *(_QWORD *)v91 = v13;
    *(_QWORD *)&v91[8] = v12;
    *(_QWORD *)&v91[16] = v11;
    if (*(_BYTE *)(v10 + 161))
    {
      *(_QWORD *)&v91[24] = *(_QWORD *)(v10 + 416);
      LOBYTE(v92) = 1;
    }
    v14 = (unint64_t)__p[1];
    if (__p[1])
    {
      v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v4 = v13;
        if (__p[1] <= (void *)v13)
          v4 = v13 % (unint64_t)__p[1];
      }
      else
      {
        v4 = ((unint64_t)__p[1] - 1) & v13;
      }
      v16 = (_QWORD **)*((_QWORD *)__p[0] + v4);
      if (v16)
      {
        for (i = *v16; i; i = (_QWORD *)*i)
        {
          v18 = i[1];
          if (v18 == v13)
          {
            if (i[2] == v13)
              goto LABEL_81;
          }
          else
          {
            if (v15.u32[0] > 1uLL)
            {
              if ((void *)v18 >= __p[1])
                v18 %= (unint64_t)__p[1];
            }
            else
            {
              v18 &= (unint64_t)__p[1] - 1;
            }
            if (v18 != v4)
              break;
          }
        }
      }
    }
    prime = (unint64_t)operator new(0x40uLL);
    i = (_QWORD *)prime;
    *(_QWORD *)prime = 0;
    *(_QWORD *)(prime + 8) = v13;
    *(_QWORD *)(prime + 56) = 0;
    *(_QWORD *)(prime + 16) = v13;
    *(_QWORD *)(prime + 24) = 0;
    *(_QWORD *)(prime + 32) = 0;
    *(_QWORD *)(prime + 40) = 0;
    *(_DWORD *)(prime + 48) = 0;
    v19 = (float)((unint64_t)v81[1] + 1);
    if (!v14 || (float)(v82 * (float)v14) < v19)
    {
      v20 = (v14 & (v14 - 1)) != 0;
      if (v14 < 3)
        v20 = 1;
      v21 = v20 | (2 * v14);
      v22 = vcvtps_u32_f32(v19 / v82);
      if (v21 <= v22)
        v23 = v22;
      else
        v23 = v21;
      if (v23 == 1)
      {
        v23 = 2;
      }
      else if ((v23 & (v23 - 1)) != 0)
      {
        prime = std::__next_prime(v23);
        v23 = prime;
        v14 = (unint64_t)__p[1];
      }
      if (v23 > v14)
        goto LABEL_37;
      if (v23 < v14)
      {
        prime = vcvtps_u32_f32((float)(unint64_t)v81[1] / v82);
        if (v14 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          prime = std::__next_prime(prime);
        }
        else
        {
          v30 = 1 << -(char)__clz(prime - 1);
          if (prime >= 2)
            prime = v30;
        }
        if (v23 <= prime)
          v23 = prime;
        if (v23 >= v14)
        {
          v14 = (unint64_t)__p[1];
        }
        else
        {
          if (v23)
          {
LABEL_37:
            if (v23 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v24 = operator new(8 * v23);
            prime = (unint64_t)__p[0];
            __p[0] = v24;
            if (prime)
              operator delete((void *)prime);
            v25 = 0;
            __p[1] = (void *)v23;
            do
              *((_QWORD *)__p[0] + v25++) = 0;
            while (v23 != v25);
            v26 = (_QWORD **)v81[0];
            if (v81[0])
            {
              v27 = *((_QWORD *)v81[0] + 1);
              v28 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
              v28.i16[0] = vaddlv_u8(v28);
              if (v28.u32[0] > 1uLL)
              {
                if (v27 >= v23)
                  v27 %= v23;
              }
              else
              {
                v27 &= v23 - 1;
              }
              *((_QWORD *)__p[0] + v27) = v81;
              for (j = *v26; j; v27 = v32)
              {
                v32 = j[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v32 >= v23)
                    v32 %= v23;
                }
                else
                {
                  v32 &= v23 - 1;
                }
                if (v32 != v27)
                {
                  if (!*((_QWORD *)__p[0] + v32))
                  {
                    *((_QWORD *)__p[0] + v32) = v26;
                    goto LABEL_62;
                  }
                  *v26 = (_QWORD *)*j;
                  *j = **((_QWORD **)__p[0] + v32);
                  **((_QWORD **)__p[0] + v32) = j;
                  j = v26;
                }
                v32 = v27;
LABEL_62:
                v26 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v14 = v23;
            goto LABEL_66;
          }
          prime = (unint64_t)__p[0];
          __p[0] = 0;
          if (prime)
            operator delete((void *)prime);
          v14 = 0;
          __p[1] = 0;
        }
      }
LABEL_66:
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v14 <= v13)
          v4 = v13 % v14;
        else
          v4 = v13;
      }
      else
      {
        v4 = (v14 - 1) & v13;
      }
    }
    v33 = __p[0];
    v34 = (_QWORD *)*((_QWORD *)__p[0] + v4);
    if (v34)
    {
      *i = *v34;
    }
    else
    {
      *i = v81[0];
      v81[0] = i;
      v33[v4] = v81;
      if (!*i)
        goto LABEL_80;
      v35 = *(_QWORD *)(*i + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v35 >= v14)
          v35 %= v14;
      }
      else
      {
        v35 &= v14 - 1;
      }
      v34 = (char *)__p[0] + 8 * v35;
    }
    *v34 = i;
LABEL_80:
    ++v81[1];
LABEL_81:
    v36 = i[4];
    v37 = i[5];
    if (v37 >= v36)
    {
      v4 = v37 + 1;
      if (v36 < v37 + 1)
      {
        if (i[3])
        {
          v38 = 2 * v36;
          v6 = v36 == 0;
          v39 = 8;
          if (!v6)
            v39 = v38;
          if (v39 <= v4)
            v40 = v4;
          else
            v40 = v39;
          prime = (unint64_t)re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(i + 3, v40);
        }
        else
        {
          prime = (unint64_t)re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(i + 3, v4);
          ++*((_DWORD *)i + 12);
        }
      }
      v37 = i[5];
    }
    v41 = i[7] + 40 * v37;
    *(_OWORD *)v41 = *(_OWORD *)v91;
    *(_OWORD *)(v41 + 16) = *(_OWORD *)&v91[16];
    *(_QWORD *)(v41 + 32) = v92;
    ++i[5];
    ++*((_DWORD *)i + 12);
    v42 = re::audioLogObjects((re *)prime);
    v43 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v42);
    if ((_DWORD)v43)
    {
      v47 = *re::audioLogObjects(v43);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        v49 = *(_QWORD *)(v10 + 64);
        v48 = *(_QWORD *)(v10 + 72);
        v50 = *(_QWORD *)(v10 + 56);
        *(_DWORD *)buf = 134218496;
        v85 = v48;
        v86 = 2048;
        v87 = v49;
        v88 = 2048;
        v89 = v50;
        _os_log_debug_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEBUG, "AcousticMeshSystem::deactivateComponents: component mesh(%llu) for scene(%llu) entity(%llu)", buf, 0x20u);
      }
    }
    v44 = *(_QWORD *)(v10 + 16);
    do
    {
      v45 = v44;
      v44 = *(_QWORD *)(v44 + 24);
    }
    while (v44);
    v46 = *(_QWORD *)(v45 + 16);
    prime = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((float *)v77, *(unint64_t *)v91, v91);
    *(_QWORD *)(prime + 24) = v46;
LABEL_96:
    ++v9;
  }
  while (v9 != v8);
  if (v81[1])
  {
    v51 = re::audioLogObjects((re *)prime);
    v52 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v51);
    if ((_DWORD)v52)
    {
      v75 = *re::audioLogObjects(v52);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v91 = 134217984;
        *(void **)&v91[4] = v81[1];
        _os_log_debug_impl(&dword_224FE9000, v75, OS_LOG_TYPE_DEBUG, "AcousticMeshSystem::deactivateComponents: adding %lu meshes for removal", v91, 0xCu);
      }
    }
    v53 = v81[0];
    if (v81[0])
    {
      do
      {
        *(_QWORD *)v91 = v53[2];
        re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray((uint64_t)&v91[8], v53 + 3);
        v54 = *(_QWORD *)(v7 + 368);
        v55 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((float *)v77, *(unint64_t *)v91, v91);
        v56 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 16))(v54, v55[3]);
        re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray((uint64_t)buf, (uint64_t *)&v91[8]);
        v90 = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v56 + 232))(v56, buf);
        if (v90 != -1)
          ((void (*)(char *, uint8_t *))off_24ED6E398[v90])(&v83, buf);
        if (*(_QWORD *)&v91[8] && *((_QWORD *)&v92 + 1))
          (*(void (**)(void))(**(_QWORD **)&v91[8] + 40))();
        v53 = (_QWORD *)*v53;
      }
      while (v53);
    }
  }
  v57 = v78[0];
  if (v78[0])
  {
    do
    {
      v58 = (_QWORD *)*v57;
      operator delete(v57);
      v57 = v58;
    }
    while (v58);
  }
  v59 = v77[0];
  v77[0] = 0;
  if (v59)
    operator delete(v59);
  v60 = v81[0];
  if (v81[0])
  {
    do
    {
      v61 = v60;
      v60 = (_QWORD *)*v60;
      v62 = v61[3];
      if (v62 && v61[7])
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 40))(v62);
      operator delete(v61);
    }
    while (v60);
  }
  prime = (unint64_t)__p[0];
  __p[0] = 0;
  if (prime)
    operator delete((void *)prime);
  a4 = v76;
LABEL_130:
  if (a4)
  {
    v63 = &v5[a4];
    do
    {
      v64 = *v5;
      v65 = re::audioLogObjects((re *)prime);
      prime = re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v65);
      if ((_DWORD)prime)
      {
        v66 = *re::audioLogObjects((re *)prime);
        prime = os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)prime)
        {
          v67 = *(_QWORD *)(v64 + 16);
          v68 = v66;
          do
          {
            v69 = v67;
            v67 = *(_QWORD *)(v67 + 24);
          }
          while (v67);
          v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 16) + 104) + 280);
          v71 = *(_QWORD *)(*(_QWORD *)(v64 + 16) + 280);
          v73 = *(_QWORD *)(v64 + 56);
          v72 = *(_QWORD *)(v64 + 64);
          *(_DWORD *)v91 = 136315906;
          *(_QWORD *)&v91[4] = v70;
          *(_WORD *)&v91[12] = 2048;
          *(_QWORD *)&v91[14] = v72;
          *(_WORD *)&v91[22] = 2080;
          *(_QWORD *)&v91[24] = v71;
          LOWORD(v92) = 2048;
          *(_QWORD *)((char *)&v92 + 2) = v73;
          _os_log_debug_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEBUG, "[AcousticMeshSystem::deactivateComponents] component for scene(%s, %llu) entity(%s, %llu)", v91, 0x2Au);

        }
      }
      *(_WORD *)(v64 + 88) = 0;
      ++v5;
      *(_QWORD *)(v64 + 64) = 0;
      *(_QWORD *)(v64 + 72) = 0;
      *(_QWORD *)(v64 + 56) = 0;
    }
    while (v5 != v63);
  }
  return 0;
}

uint64_t re::ecs2::AcousticMeshSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  re *isStatisticCollectionEnabled;
  uint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::System *v33;
  _BYTE v34[16];
  uint64_t v35[2];
  _QWORD v36[2];
  uint64_t v37;

  v36[0] = a3;
  v36[1] = a4;
  if (a2)
  {
    v4 = result;
    if (*(_QWORD *)(result + 368))
    {
      v6 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v6)
        v7 = *(_QWORD *)(v6 + 24);
      else
        v7 = 0;
      v8 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v35);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v8);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v10 = re::profilerThreadContext(isStatisticCollectionEnabled);
        v11 = *(int64x2_t **)(v10 + 152);
        if (v11)
        {
          v12 = v11[588].u64[0];
          if (v12 >= v7)
            v12 = v7;
          v11[588].i64[0] = v12;
          v13 = v11[588].u64[1];
          if (v13 <= v7)
            v13 = v7;
          v11[588].i64[1] = v13;
          v14 = vdupq_n_s64(1uLL);
          v14.i64[0] = v7;
          v11[589] = vaddq_s64(v11[589], v14);
          *(_BYTE *)(v10 + 184) = 0;
        }
      }
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 3057, v4);
      v37 = a2;
      v15 = *(_QWORD *)(*(_QWORD *)(v4 + 192)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 184), &v37)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v4 + 296, v15);
      v16 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 128, v15);
      v17 = *(_QWORD *)(*v16 + 224);
      v18 = v16[3];
      v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
      if (*(_DWORD *)(v19 + 40))
        v20 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v36, v16, v18, v19, 0);
      else
        v20 = 0;
      v21 = v16[5];
      v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
      if (*(_DWORD *)(v22 + 40))
        v20 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v36, v16, v21, v22, 0);
      v23 = v16[6];
      v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
      if (*(_DWORD *)(v24 + 40))
      {
        if (((v20 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, v36, v16, v23, v24, 0)) & 1) == 0)goto LABEL_21;
      }
      else if (!v20)
      {
LABEL_21:
        if (*(_BYTE *)(v4 + 360))
        {
          v25 = *(_QWORD *)(v4 + 304);
          v26 = *(_DWORD *)(v4 + 312);
          if (v25 >= 0xB)
          {
            if ((v26 & 1) != 0)
              v27 = (_QWORD *)(v4 + 320);
            else
              v27 = *(_QWORD **)(v4 + 328);
            v29 = 8 * v25;
            while (!*v27)
            {
              ++v27;
              v29 -= 8;
              if (!v29)
                goto LABEL_41;
            }
LABEL_39:
            v33 = *(re::ecs2::System **)(v4 + 344);
            if (!*((_BYTE *)v33 + 86))
              re::ecs2::System::queueToRun(v33, 0.0);
            goto LABEL_41;
          }
          if ((v26 & 1) == 0)
          {
            v28 = *(uint64_t **)(v4 + 328);
            if (!v25)
              goto LABEL_41;
LABEL_36:
            v30 = 0;
            v31 = 8 * v25;
            do
            {
              v32 = *v28++;
              v30 |= v32;
              v31 -= 8;
            }
            while (v31);
            if (!v30)
              goto LABEL_41;
            goto LABEL_39;
          }
          v28 = (uint64_t *)(v4 + 320);
          if (v25)
            goto LABEL_36;
        }
LABEL_41:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v35);
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 296, v15);
      goto LABEL_21;
    }
  }
  return result;
}

void re::ecs2::AcousticMeshSystem::~AcousticMeshSystem(re::ecs2::AcousticMeshSystem *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 384);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 16);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 384);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 16);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AcousticMeshSystem::typeInfo(re::ecs2::AcousticMeshSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AcousticMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AcousticMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AcousticMeshSystem>, 0);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AcousticMeshComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AcousticMeshComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AcousticMeshComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 120);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 80);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 40);

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 112);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 72);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 32);

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{

}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 160);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24ED6E368[v4])(&v7, result);
  *(_DWORD *)(v3 + 160) = -1;
  v5 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED6E388[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 160) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  v6 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 72) = v8;
  ++*(_DWORD *)(a3 + 64);
  ++*(_DWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 104) = 0;
  v9 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 88) = v9;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 112) = v11;
  ++*(_DWORD *)(a3 + 104);
  ++*(_DWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 144) = 0;
  v12 = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 128) = v12;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 136) = v13;
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 152) = v14;
  ++*(_DWORD *)(a3 + 144);
  ++*(_DWORD *)(a2 + 144);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  __n128 result;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v4;
  result = *(__n128 *)(a3 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::deinit(a2);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 152);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24ED6E378[v4])(&v7, result);
  *(_DWORD *)(v3 + 152) = -1;
  v5 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED6E3B0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 152) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  v4 = a3[1].n128_u64[1];
  a3[1].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[1].n128_u64[1] = v4;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u32[2] = 0;
  v5 = a3[2].n128_u64[1];
  a2[2].n128_u64[0] = a3[2].n128_u64[0];
  a2[2].n128_u64[1] = v5;
  a3[2].n128_u64[0] = 0;
  a3[2].n128_u64[1] = 0;
  v6 = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = a3[3].n128_u64[0];
  a3[3].n128_u64[0] = v6;
  v7 = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = a3[4].n128_u64[0];
  a3[4].n128_u64[0] = v7;
  ++a3[3].n128_u32[2];
  ++a2[3].n128_u32[2];
  a2[6].n128_u64[1] = 0;
  a2[5].n128_u64[0] = 0;
  a2[5].n128_u64[1] = 0;
  a2[4].n128_u64[1] = 0;
  a2[6].n128_u32[0] = 0;
  v8 = a3[5].n128_u64[0];
  a2[4].n128_u64[1] = a3[4].n128_u64[1];
  a2[5].n128_u64[0] = v8;
  a3[4].n128_u64[1] = 0;
  a3[5].n128_u64[0] = 0;
  v9 = a2[5].n128_u64[1];
  a2[5].n128_u64[1] = a3[5].n128_u64[1];
  a3[5].n128_u64[1] = v9;
  v10 = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = a3[6].n128_u64[1];
  a3[6].n128_u64[1] = v10;
  ++a3[6].n128_u32[0];
  ++a2[6].n128_u32[0];
  a2[9].n128_u64[0] = 0;
  a2[7].n128_u64[1] = 0;
  a2[8].n128_u64[0] = 0;
  a2[7].n128_u64[0] = 0;
  a2[8].n128_u32[2] = 0;
  v11 = a3[7].n128_u64[1];
  a2[7].n128_u64[0] = a3[7].n128_u64[0];
  a2[7].n128_u64[1] = v11;
  a3[7].n128_u64[0] = 0;
  a3[7].n128_u64[1] = 0;
  v12 = a2[8].n128_u64[0];
  a2[8].n128_u64[0] = a3[8].n128_u64[0];
  a3[8].n128_u64[0] = v12;
  v13 = a2[9].n128_u64[0];
  a2[9].n128_u64[0] = a3[9].n128_u64[0];
  a3[9].n128_u64[0] = v13;
  ++a3[8].n128_u32[2];
  ++a2[8].n128_u32[2];
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  uint64_t v4;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  v4 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 3) = 0;
  *(_QWORD *)(a2 + 24) = v4;
  result = (__n128)a3[2];
  *(__n128 *)(a2 + 32) = result;
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::IntrospectionBase *v12;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = 0;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  re::DynamicString::setCapacity(&v14, 0);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  v9 = *(_QWORD *)(a4 + 32) + 112 * v8;
  *(_QWORD *)v9 = v14;
  v10 = v16;
  *(_OWORD *)(v9 + 8) = v15;
  *(_DWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + 56) = 1;
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 1;
  v11 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v11 + 1;
  ++*(_DWORD *)(a4 + 24);
  v12 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 112 * v11);
  re::introspectionInitElement(a2, a3, a1[6], v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::AcousticAbsorptionMaterial>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 112 * a2 + 56;
    v9 = a2;
    do
    {
      v10 = *((_QWORD *)v3 + 4);
      v11 = v10 + v8;
      v12 = *(_QWORD *)(v10 + v8 + 16);
      if (v12)
      {
        if (*(_QWORD *)(v11 + 48))
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v10 + v8 + 24) = 0;
        *(_QWORD *)(v10 + v8 + 32) = 0;
        *(_QWORD *)(v10 + v8 + 16) = 0;
        ++*(_DWORD *)(v10 + v8 + 40);
      }
      v15 = *(_QWORD *)(v11 - 24);
      v14 = (_QWORD *)(v11 - 24);
      v13 = v15;
      if (v15)
      {
        if (*(_QWORD *)(v10 + v8 + 8))
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        *(_QWORD *)(v10 + v8 + 8) = 0;
        v14[1] = 0;
        v14[2] = 0;
        *v14 = 0;
        ++*(_DWORD *)(v10 + v8);
      }
      result = *(_anonymous_namespace_ **)(v10 + v8 - 56);
      if (result)
      {
        if ((*(_BYTE *)(v10 + v8 - 48) & 1) != 0)
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v10 + v8 - 40));
        *(_OWORD *)(v10 + v8 - 56) = 0u;
        *(_OWORD *)(v10 + v8 - 40) = 0u;
      }
      ++v9;
      v8 += 112;
    }
    while (v9 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 112 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        v6 += 112;
        *(_DWORD *)(v7 + 96) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 112 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::IntrospectionBase *v12;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = 0;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  re::DynamicString::setCapacity(&v14, 0);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  v9 = *(_QWORD *)(a4 + 32) + 112 * v8;
  *(_QWORD *)v9 = v14;
  v10 = v16;
  *(_OWORD *)(v9 + 8) = v15;
  *(_DWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + 56) = 1;
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 1;
  v11 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v11 + 1;
  ++*(_DWORD *)(a4 + 24);
  v12 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 112 * v11);
  re::introspectionInitElement(a2, a3, a1[6], v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 112 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::IntrospectionBase *v12;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = 0;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  re::DynamicString::setCapacity(&v14, 0);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  v9 = *(_QWORD *)(a4 + 32) + 112 * v8;
  *(_QWORD *)v9 = v14;
  v10 = v16;
  *(_OWORD *)(v9 + 8) = v15;
  *(_DWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + 56) = 1;
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 1;
  v11 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v11 + 1;
  ++*(_DWORD *)(a4 + 24);
  v12 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 112 * v11);
  re::introspectionInitElement(a2, a3, a1[6], v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 112 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::AcousticMeshComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59B00;
  result = 0.0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 74) = 0u;
  *(_WORD *)(v1 + 160) = 1;
  *(_QWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 400) = 0;
  *(_BYTE *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_DWORD *)(v1 + 312) = 0;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_DWORD *)(v1 + 352) = 0;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_DWORD *)(v1 + 392) = 0;
  return result;
}

id re::internal::defaultRetain<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>(uint64_t *result, uint64_t *a2, re::DynamicString *this)
{
  uint64_t *v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      re::DynamicString::operator=(this, (re::DynamicString *)v5);
      re::DynamicArray<float>::operator=((uint64_t)this + 32, v5 + 4);
      result = (uint64_t *)re::DynamicArray<float>::operator=((uint64_t)this + 72, v5 + 9);
      v5 += 14;
      this = (re::DynamicString *)((char *)this + 112);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6E598;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6E5F0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6E648;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6E6A0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6E598;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6E5F0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6E648;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6E6A0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E598;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E598;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E5F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E5F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E648;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E648;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E6A0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E6A0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

double `anonymous namespace'::internalDrawBox(uint64_t a1, float32x4_t *a2, float *a3, __n128 *a4, float a5)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double result;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float v46;

  v46 = a5;
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[4] - *a3;
  v10 = a3[5] - v8;
  v11 = a3[2];
  v12 = a3[6] - v11;
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  v16 = a2[3];
  v17 = vmulq_n_f32(*a2, *a3);
  v18 = vmlaq_n_f32(v17, v14, v8);
  v45 = vaddq_f32(v16, vmlaq_n_f32(v18, v15, v11));
  v19 = vmulq_n_f32(v13, v7 + v9);
  v20 = vmlaq_n_f32(v19, v14, v8);
  v21 = v11 + v12;
  v43 = vaddq_f32(v16, vmlaq_n_f32(v20, v15, v21));
  v44 = vaddq_f32(v16, vmlaq_n_f32(v20, v15, v11));
  v22 = v8 + v10;
  v23 = vmlaq_n_f32(v17, v14, v22);
  v41 = vaddq_f32(v16, vmlaq_n_f32(v23, v15, v11));
  v42 = vaddq_f32(v16, vmlaq_n_f32(v18, v15, v21));
  v24 = vmlaq_n_f32(v19, v14, v22);
  v39 = vaddq_f32(v16, vmlaq_n_f32(v24, v15, v21));
  v40 = vaddq_f32(v16, vmlaq_n_f32(v24, v15, v11));
  v38 = vaddq_f32(v16, vmlaq_n_f32(v23, v15, v21));
  v25 = re::PrimitiveRenderingContext::addLine(a1, &v45, &v44);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v25, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v25, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v26 = re::PrimitiveRenderingContext::addLine(a1, &v44, &v43);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v26, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v26, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v27 = re::PrimitiveRenderingContext::addLine(a1, &v43, &v42);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v27, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v27, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v28 = re::PrimitiveRenderingContext::addLine(a1, &v45, &v42);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v28, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v28, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v29 = re::PrimitiveRenderingContext::addLine(a1, &v45, &v41);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v29, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v29, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v30 = re::PrimitiveRenderingContext::addLine(a1, &v44, &v40);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v30, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v30, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v31 = re::PrimitiveRenderingContext::addLine(a1, &v43, &v39);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v31, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v31, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v32 = re::PrimitiveRenderingContext::addLine(a1, &v42, &v38);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v32, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v32, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v33 = re::PrimitiveRenderingContext::addLine(a1, &v41, &v40);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v33, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v33, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v34 = re::PrimitiveRenderingContext::addLine(a1, &v40, &v39);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v34, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v34, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v35 = re::PrimitiveRenderingContext::addLine(a1, &v39, &v38);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v35, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v35, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  v36 = re::PrimitiveRenderingContext::addLine(a1, &v41, &v38);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v36, &v46, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v36, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), (re *)*(_QWORD *)(a1 + 1192)).n128_u64[0];
  return result;
}

re::ecs2::SkeletalDebugComponentStateImpl *re::ecs2::SkeletalDebugComponentStateImpl::SkeletalDebugComponentStateImpl(re::ecs2::SkeletalDebugComponentStateImpl *this, re::ecs2::SkeletalDebugSystem *a2)
{
  _QWORD v4[2];
  _QWORD v5[6];

  v5[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED6E6F8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[4] = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 5;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::SkeletalDebugComponentStateImpl *)((char *)this + 16), (uint64_t)v4);
  return this;
}

BOOL re::ecs2::SkeletalDebugComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  const __int16 *v20;
  int16x8_t *v21;
  int16x8_t v22;
  int v23;
  int16x8_t *v24;
  uint64_t v25;
  uint16x8_t v26;
  int v27;
  int v28;
  const __int16 *v29;
  int16x8_t v30;
  int v31;
  uint16x8_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v36, a5, 0);
  v8 = v36;
  v9 = v37;
  v36 = a4;
  v37 = v8;
  v38 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
      if (*(_BYTE *)(*(_QWORD *)v14 + 25)
        || *(_BYTE *)(v15 + 120)
        || (v17 = (unint64_t *)(a3 + 32), *(_BYTE *)(v15 + 121)))
      {
        v18 = *(_QWORD *)(v16 + 176);
        v17 = (unint64_t *)(a3 + 32);
        if (v18)
        {
          v17 = (unint64_t *)(a3 + 32);
          if (*(_QWORD *)(v18 + 40))
          {
            v19 = *(unsigned __int16 *)(v16 + 82);
            v17 = (unint64_t *)(a3 + 32);
            if (*(_WORD *)(v16 + 82))
            {
              v20 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                    + 16);
              v21 = *(int16x8_t **)(v16 + 88);
              v22 = vld1q_dup_s16(v20);
              v23 = 1;
              v24 = v21;
              v25 = *(unsigned __int16 *)(v16 + 82);
              while (1)
              {
                v26 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v22, *v24), (int8x16_t)xmmword_2260F1E80);
                v26.i16[0] = vmaxvq_u16(v26);
                if (v26.i32[0])
                  break;
                v23 -= 8;
                ++v24;
                if (!--v25)
                {
LABEL_17:
                  v17 = (unint64_t *)(a3 + 32);
                  goto LABEL_27;
                }
              }
              v27 = v26.u16[0] - v23;
              v28 = *(unsigned __int16 *)(v16 + 80);
              v17 = (unint64_t *)(a3 + 32);
              if (v27 < v28)
              {
                v17 = (unint64_t *)(a3 + 32);
                if (*(_QWORD *)(v16 + 232))
                {
                  v29 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                        + 16);
                  v30 = vld1q_dup_s16(v29);
                  v31 = 1;
                  while (1)
                  {
                    v32 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v30, *v21), (int8x16_t)xmmword_2260F1E80);
                    v32.i16[0] = vmaxvq_u16(v32);
                    if (v32.i32[0])
                      break;
                    v31 -= 8;
                    ++v21;
                    if (!--v19)
                      goto LABEL_17;
                  }
                  if (v32.u16[0] - v31 >= v28)
                    v17 = (unint64_t *)(a3 + 32);
                  else
                    v17 = (unint64_t *)(a3 + 48);
                }
              }
            }
          }
        }
      }
LABEL_27:
      v33 = v36;
      v34 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v37);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v33, v34, *v17);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v37);
    }
    while (v37 != a5 || (unsigned __int16)v38 != 0xFFFF || WORD1(v38) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::SkeletalDebugComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const re::MeshNameMap *v22;
  _QWORD *v23;
  uint64_t v24;
  const re::SkeletalPoseDefinitionAsset *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t PerspectiveCameraInScene;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OrthographicCameraInScene;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t CustomMatrixCameraInScene;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  re::internal *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  float v75;
  float v76;
  unint64_t v77;
  __n128 v78;
  unsigned int v79;
  float v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int32x2_t v86;
  __n128 *v87;
  unint64_t v88;
  float v89;
  unint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float v108;
  float v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float v118;
  int32x4_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x4_t v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  float v132;
  float32x4_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float32x4_t v159;
  float32x4_t v160;
  _OWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  uint64_t v181;
  unsigned int v182;
  float32x4_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  uint64_t v203;
  unint64_t v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  int32x2_t v211;
  float v212;
  float32x4_t v213;
  float v214;
  float v215;
  float v216;
  float32x4_t v217;
  uint64_t v218;
  float32x4_t v219;
  __int128 v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int32x4_t v229;
  uint64_t v230;
  unint64_t v231;
  re::MeshBoundingBoxes *v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float32x4_t v242;
  float32x4_t v243;
  unsigned int v244;
  float32x4_t v245;
  float32x4_t v246;
  float v247;
  uint64_t v248;
  _OWORD *v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  float *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int32x4_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  re::MeshBoundingBoxes *v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float32x4_t v273;
  float32x4_t v274;
  float v275;
  float32x4_t v276;
  float32x4_t v277;
  float v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  unint64_t v285;
  float *v286;
  uint64_t v288;
  uint64_t v289;
  re *v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  re::MeshAsset *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  _QWORD *v300;
  _QWORD *v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  const re::MeshNameMap *v306;
  uint64_t v307;
  uint64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float v311;
  float32x4_t v312;
  uint64_t v313;
  uint64_t v314;
  float32x4_t v315;
  uint64_t v316;
  unint64_t v317;
  re::DynamicString *v318[2];
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  re::DynamicString *v323[2];
  re::DynamicString *v324[2];
  float32x4_t v325;
  float32x4_t v326;
  re::MeshAsset *v327;
  uint64_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  uint64_t v333;
  unint64_t v334;
  float32x4_t v335;
  __int128 v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  _QWORD v341[2];
  float32x4_t v342;
  uint64_t v343;
  uint64_t v344;
  float32x4_t v345;
  int32x4_t v346;
  float32x4_t v347;
  uint64_t v348;
  __int128 v349;
  StringID v350;
  __n128 v351;
  float32x4_t v352;
  float v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  __int128 v360;
  _BYTE v361[18];
  __int16 v362;
  unint64_t v363;
  __int16 v364;
  const re::MeshNameMap *v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  _BYTE v372[40];
  _BYTE v373[277];
  char v374;
  _BYTE v375[10];
  uint64_t v376;
  _BYTE v377[73];
  char v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  re *v384;
  _BYTE v385[48];
  __int128 v386;
  uint64_t v387;

  v5 = a5;
  v387 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v366, a5, 0);
  v348 = a4;
  v349 = v366;
  if ((_QWORD)v366 != v5 || WORD4(v366) != 0xFFFFLL || (DWORD2(v366) & 0xFFFF0000) != 4294901760)
  {
    v9 = (__n128 *)("N2re12MeshCompilerE" + 10);
    v298 = v5;
    do
    {
      v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v349);
      v307 = *(_QWORD *)v10;
      v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      v12 = *(_QWORD *)(v11 + 176);
      v13 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v300 = *(_QWORD **)(v11 + 232);
      v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      v16 = *(_QWORD *)(v12 + 40);
      if (v16 && (v17 = atomic_load((unsigned int *)(v16 + 704)), v17 == 2))
      {
        v292 = v15;
        v327 = (re::MeshAsset *)(v12 + 32);
        v18 = (_QWORD *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v12 + 32));
        v19 = v18[49];
        v20 = v18[47];
        v21 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v333 = v14;
        if (v21)
        {
          v22 = (const re::MeshNameMap *)(v21 + 216);
          v297 = *(_QWORD *)(v21 + 208);
          v295 = *(_QWORD *)(v21 + 192);
        }
        else
        {
          v295 = v20;
          v297 = v19;
          v22 = (const re::MeshNameMap *)(v18 + 56);
        }
        v23 = v300;
        v24 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(v300 + 4));
        if (v24)
          v25 = (const re::SkeletalPoseDefinitionAsset *)v24;
        else
          v25 = (const re::SkeletalPoseDefinitionAsset *)(v300 + 19);
        v26 = re::ecs2::SkeletalPoseComponent::calculateRigMappingDataDepHash((uint64_t)v300, v13);
        re::ecs2::SkeletalPoseComponent::ensureSkeletalPoseRigMappingDataUpToDate(v300, v25, (const re::MeshAsset *)v18, v22, (const re::RigRuntimeData *)(v13 + 23), v26);
        v5 = v298;
        v27 = "S_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_";
        if (v300[59] && v300[71] <= *(_QWORD *)(v333 + 112))
        {
          re::ecs2::TransformComponent::worldSRT((re::ecs2::TransformComponent **)v11, (const re::ecs2::Entity *)1, (uint64_t)&v345);
          v342 = 0uLL;
          v28 = v11;
          v343 = 0;
          v344 = 0x3F80000000000000;
          do
          {
            v29 = v28;
            v28 = *(_QWORD *)(v28 + 24);
          }
          while (v28);
          PerspectiveCameraInScene = re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(*(_QWORD *)(v29 + 16));
          v31 = v11;
          do
          {
            v32 = v31;
            v31 = *(_QWORD *)(v31 + 24);
          }
          while (v31);
          v33 = *(_QWORD *)(v32 + 16);
          if (PerspectiveCameraInScene)
          {
            v34 = re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(v33);
            re::ecs2::PerspectiveCameraComponent::calculateWorldPose(v34, 0, (uint64_t)&v342);
          }
          else
          {
            OrthographicCameraInScene = re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(v33);
            v37 = v11;
            do
            {
              v38 = v37;
              v37 = *(_QWORD *)(v37 + 24);
            }
            while (v37);
            v39 = *(_QWORD *)(v38 + 16);
            if (OrthographicCameraInScene)
            {
              v40 = re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(v39);
              re::ecs2::OrthographicCameraComponent::calculateWorldPose(v40, 0, (uint64_t)&v342);
            }
            else if (re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(v39))
            {
              do
              {
                v41 = v11;
                v11 = *(_QWORD *)(v11 + 24);
              }
              while (v11);
              CustomMatrixCameraInScene = re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(*(_QWORD *)(v41 + 16));
              re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(CustomMatrixCameraInScene, 0, &v342);
            }
          }
          if (*(_BYTE *)(v307 + 25))
          {
            v43 = *(_QWORD *)(v333 + 112);
            v341[0] = *(_QWORD *)(v333 + 128);
            v341[1] = v43;
            v296 = (re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>(v327);
            v45 = *(_QWORD *)(a1 + 8);
            v46 = *(_QWORD *)(v45 + 112);
            if (v46)
            {
              v293 = *(_QWORD *)(v45 + 120);
              v47 = v307;
              v48 = *(_QWORD *)(v307 + 40);
              v49 = v48 >> 1;
              if ((v48 & 1) == 0)
                v49 = v48 >> 1;
              v328 = v46;
              if (v49)
              {
                if (re::DynamicString::operator!=(v307 + 32, v307 + 208) || !*(_QWORD *)(v307 + 256))
                {
                  if ((v48 & 1) != 0)
                  {
                    v50 = (_QWORD *)v307;
                    v51 = *(re::internal **)(v307 + 48);
                  }
                  else
                  {
                    v50 = (_QWORD *)v307;
                    v51 = (re::internal *)(v307 + 41);
                  }
                  re::internal::regularExpressionCreate(v51, (uint64_t)&v356);
                  v54 = v50[27];
                  if ((v54 & 1) != 0)
                  {
                    v50[27] = 1;
                    v55 = (_BYTE *)v50[28];
                  }
                  else
                  {
                    *((_BYTE *)v50 + 216) = v54 & 1;
                    v55 = (char *)v50 + 217;
                  }
                  *v55 = 0;
                  v56 = v50 + 30;
                  re::DynamicArray<re::DynamicArray<unsigned char>>::clear(v50 + 30);
                  if (v356.i8[0])
                  {
                    v57 = v300[71];
                    re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(v56, v57);
                    v334 = v57;
                    if (v57)
                    {
                      v58 = 0;
                      v59 = 0;
                      while (1)
                      {
                        v60 = v59;
                        if (v300[80] <= (unint64_t)v59)
                          v61 = 0xFFFFFFFFLL;
                        else
                          v61 = *(unsigned int *)(v300[81] + 4 * v59);
                        v62 = re::MeshAsset::skeletonAtIndex(v296, v61);
                        v63 = *(_QWORD *)(v307 + 256);
                        if (v63 <= v58)
                          goto LABEL_183;
                        v64 = v62;
                        v65 = *(_QWORD *)(v62 + 24);
                        re::DynamicArray<BOOL>::resize(*(_QWORD *)(v307 + 272) + 40 * v58, v65);
                        if (v65)
                          break;
LABEL_72:
                        v58 = v60 + 1;
                        v59 = v60 + 1;
                        v5 = v298;
                        v9 = (__n128 *)("N2re12MeshCompilerE" + 10);
                        if (v334 <= v58)
                          goto LABEL_73;
                      }
                      v63 = 0;
                      v67 = 8;
                      while (1)
                      {
                        v68 = *(_QWORD *)(v64 + 24);
                        if (v68 <= v63)
                          goto LABEL_176;
                        v69 = *(char **)(*(_QWORD *)(v64 + 32) + v67);
                        v70 = strrchr(v69, 47);
                        v71 = v70 ? v70 + 1 : v69;
                        re::internal::regularExpressionFullMatch(v71, (_QWORD **)&v356.i64[1], (uint64_t)v385);
                        v22 = *(const re::MeshNameMap **)(v307 + 256);
                        if ((unint64_t)v22 <= v58)
                          break;
                        v72 = *(_QWORD *)(v307 + 272);
                        v22 = *(const re::MeshNameMap **)(v72 + 40 * v58 + 16);
                        if ((unint64_t)v22 <= v63)
                          goto LABEL_178;
                        v73 = v385[0];
                        *(_BYTE *)(*(_QWORD *)(v72 + 40 * v58 + 32) + v63) = v385[0];
                        if (v73)
                        {
                          if (*(_QWORD *)&v385[8])
                          {
                            v66 = *(_QWORD *)&v385[40];
                            if (*(_QWORD *)&v385[40])
                              (*(void (**)(void))(**(_QWORD **)&v385[8] + 40))();
                          }
                        }
                        ++v63;
                        v67 += 16;
                        if (v65 == v63)
                          goto LABEL_72;
                      }
LABEL_177:
                      v355.i64[0] = 0;
                      v369 = 0u;
                      v370 = 0u;
                      v367 = 0u;
                      v368 = 0u;
                      v366 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v361 = 136315906;
                      *(_QWORD *)&v361[4] = "operator[]";
                      *(_WORD *)&v361[12] = 1024;
                      *(_DWORD *)&v361[14] = 789;
                      v362 = 2048;
                      v363 = v58;
                      v364 = 2048;
                      v365 = v22;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_178:
                      v355.i64[0] = 0;
                      v369 = 0u;
                      v370 = 0u;
                      v367 = 0u;
                      v368 = 0u;
                      v366 = 0u;
                      v204 = MEMORY[0x24BDACB70];
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v361 = 136315906;
                      *(_QWORD *)&v361[4] = "operator[]";
                      *(_WORD *)&v361[12] = 1024;
                      *(_DWORD *)&v361[14] = 789;
                      v362 = 2048;
                      v363 = v63;
                      v364 = 2048;
                      v365 = v22;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_179:
                      re::internal::assertLog((re::internal *)6, v203, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v204, v65);
                      _os_crash();
                      __break(1u);
LABEL_180:
                      re::internal::assertLog((re::internal *)6, v203, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v204, v22);
                      _os_crash();
                      __break(1u);
LABEL_181:
                      *(_QWORD *)v361 = 0;
                      v359 = 0u;
                      v360 = 0u;
                      v357 = 0u;
                      v358 = 0u;
                      v356 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v385 = 136315906;
                      *(_QWORD *)&v385[4] = "operator[]";
                      *(_WORD *)&v385[12] = 1024;
                      *(_DWORD *)&v385[14] = 789;
                      *(_WORD *)&v385[18] = 2048;
                      *(_QWORD *)&v385[20] = v58;
                      *(_WORD *)&v385[28] = 2048;
                      *(_QWORD *)&v385[30] = v63;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_182:
                      re::internal::assertLog((re::internal *)4, v85, "assertion failure: '%s' (%s:line %i) ", "assetService", "isFontLoaded", 320);
                      _os_crash();
                      __break(1u);
LABEL_183:
                      *(_QWORD *)v361 = 0;
                      v369 = 0u;
                      v370 = 0u;
                      v367 = 0u;
                      v368 = 0u;
                      v366 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v385 = 136315906;
                      *(_QWORD *)&v385[4] = "operator[]";
                      *(_WORD *)&v385[12] = 1024;
                      *(_DWORD *)&v385[14] = 789;
                      *(_WORD *)&v385[18] = 2048;
                      *(_QWORD *)&v385[20] = v58;
                      *(_WORD *)&v385[28] = 2048;
                      *(_QWORD *)&v385[30] = v63;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_184;
                    }
                  }
LABEL_73:
                  re::DynamicString::operator=((re::DynamicString *)(v307 + 208), (re::DynamicString *)(v307 + 32));
                  if (v356.i8[0])
                  {
                    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v356.i64[1]);
                    v23 = v300;
                  }
                  else
                  {
                    v23 = v300;
                    if (v357.i64[1] && (v358.i8[0] & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v357.i64[1] + 40))();
                  }
                  v47 = v307;
                }
              }
              else
              {
                v52 = *(_QWORD *)(v307 + 216);
                if ((v52 & 1) != 0)
                {
                  *(_QWORD *)(v307 + 216) = 1;
                  v53 = *(_BYTE **)(v307 + 224);
                }
                else
                {
                  *(_BYTE *)(v307 + 216) = v52 & 1;
                  v53 = (_BYTE *)(v307 + 217);
                }
                *v53 = 0;
                re::DynamicArray<re::DynamicArray<unsigned char>>::clear((_QWORD *)(v307 + 240));
              }
              v74 = *(_QWORD *)(v328 + 104);
              v289 = *(_QWORD *)(v74 + 304);
              v288 = *(_QWORD *)(v74 + 312);
              re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)&v366, *(_QWORD *)(v288 + 224), *(re::RenderManager **)(v288 + 248));
              v378 = *(_BYTE *)(v47 + 27);
              v75 = *(float *)(v47 + 116);
              v76 = v345.f32[0];
              v77 = v23[71];
              re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((_QWORD *)(v47 + 240), v77);
              v78.n128_u64[0] = *(_QWORD *)(v47 + 96);
              v78.n128_u32[2] = *(_DWORD *)(v47 + 104);
              v78.n128_u32[3] = 1.0;
              v351 = v78;
              v294 = v77;
              if (!v77)
                goto LABEL_129;
              v58 = 0;
              v79 = 0;
              v80 = fmax((float)(v75 * v76), 0.001);
              v291 = (re *)(v307 + 184);
              while (1)
              {
                v81 = v79;
                if (v23[80] <= (unint64_t)v79)
                  v82 = 0xFFFFFFFFLL;
                else
                  v82 = *(unsigned int *)(v23[81] + 4 * v79);
                v301 = (_QWORD *)re::MeshAsset::skeletonAtIndex(v296, v82);
                v63 = *(_QWORD *)(v307 + 256);
                if (v63)
                {
                  if (v63 <= v58)
                    goto LABEL_181;
                  v83 = *(_QWORD *)(v307 + 272) + 40 * v58;
                  v308 = *(_QWORD *)(v83 + 32);
                  v22 = *(const re::MeshNameMap **)(v83 + 16);
                }
                else
                {
                  v22 = 0;
                  v308 = 0;
                }
                v299 = v81;
                v84 = re::SkeletalPoseRigMappingData::poseRigMapAbsoluteJointTransforms((uint64_t)(v300 + 59), v81, v341);
                v87 = (__n128 *)("N2re8internal13CallableMemFnINS_4ecs228BasicComponentStateSceneDataINS2_28CharacterCont"
                                 "rollerComponentEEEMS5_F20REEventHandlerResultPNS2_6EntityERK22REComponentDidAddEventEFS6_S8_SB_EJEEE"
                               + 109);
                v58 = 0x22610B000;
                if (!v85)
                  goto LABEL_128;
                v63 = v84;
                v88 = v85;
                v65 = 0;
                v314 = v301[7];
                v317 = v301[6];
                v86.i32[0] = *(_DWORD *)(v307 + 112);
                v353 = v80;
                v89 = (float)(*(float *)v86.i32 * 0.25) / *(float *)v86.i32;
                v309 = (float32x4_t)vdupq_lane_s32(v86, 0);
                v311 = *(float *)v86.i32;
                v306 = v22;
                do
                {
                  if (v65 >= (unint64_t)v22 || *(_BYTE *)(v308 + v65))
                  {
                    if (v317 <= v65)
                    {
                      re::internal::assertLog((re::internal *)6, v85, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v65, v317);
                      _os_crash();
                      __break(1u);
LABEL_176:
                      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v63, v68);
                      _os_crash();
                      __break(1u);
                      goto LABEL_177;
                    }
                    v90 = *(unsigned int *)(v314 + 4 * v65);
                    v91 = v345;
                    v92 = v347;
                    if (v88 > v90)
                    {
                      v93 = vmulq_f32(v345, *(float32x4_t *)(v63 + (v65 << 6) + 48));
                      v94 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v346, v346), (int8x16_t)v346, 0xCuLL);
                      v95 = vnegq_f32((float32x4_t)v346);
                      v96 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL), v95), v93, v94);
                      v97 = (int8x16_t)vaddq_f32(v96, v96);
                      v98 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), v97, 0xCuLL);
                      v99 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL), v95), v98, v94);
                      v356 = vaddq_f32(v347, vaddq_f32(vaddq_f32(v93, vmulq_laneq_f32(v98, (float32x4_t)v346, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), v99, 0xCuLL)));
                      v100 = vmulq_f32(v345, *(float32x4_t *)(v63 + (v90 << 6) + 48));
                      v101 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), (int8x16_t)v100, 0xCuLL), v95), v100, v94);
                      v102 = (int8x16_t)vaddq_f32(v101, v101);
                      v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), v102, 0xCuLL);
                      v104 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), (int8x16_t)v103, 0xCuLL), v95), v103, v94);
                      v105 = vaddq_f32(v347, vaddq_f32(vaddq_f32(v100, vmulq_laneq_f32(v103, (float32x4_t)v346, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), v104, 0xCuLL)));
                      *(float32x4_t *)v385 = v105;
                      v106 = vsubq_f32(v356, v105);
                      v107 = vmulq_f32(v106, v106);
                      LODWORD(v108) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2), vaddq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 1))).u32[0];
                      v109 = *((float *)v27 + 315);
                      if (fabsf(v108) >= v109)
                      {
                        v110 = vrsqrte_f32((float32x2_t)LODWORD(v108));
                        v111 = vmul_f32(v110, vrsqrts_f32((float32x2_t)LODWORD(v108), vmul_f32(v110, v110)));
                        v112 = vmulq_n_f32(v106, vmul_f32(v111, vrsqrts_f32((float32x2_t)LODWORD(v108), vmul_f32(v111, v111))).f32[0]);
                        v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL);
                        v114 = vmlaq_f32(vmulq_f32(v112, (float32x4_t)xmmword_2261027C0), (float32x4_t)xmmword_2260E5F20, v113);
                        v115 = vmulq_f32(v114, v114);
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), v115)).f32[0]) >= v109)
                        {
                          v117 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), (int8x16_t)v114, 0xCuLL);
                        }
                        else
                        {
                          v116 = (int8x16_t)vmlaq_f32(vmulq_f32(v112, (float32x4_t)xmmword_2261027D0), (float32x4_t)xmmword_2260E5F40, v113);
                          v117 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), v116, 0xCuLL);
                        }
                        v118 = sqrtf(v108);
                        v119 = (int32x4_t)vmulq_f32(v117, v117);
                        v119.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v119, 2), vadd_f32(*(float32x2_t *)v119.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v119.i8, 1))).u32[0];
                        v120 = vrsqrte_f32((float32x2_t)v119.u32[0]);
                        v121 = vmul_f32(v120, vrsqrts_f32((float32x2_t)v119.u32[0], vmul_f32(v120, v120)));
                        v122 = vmulq_n_f32(v117, vmul_f32(v121, vrsqrts_f32((float32x2_t)v119.u32[0], vmul_f32(v121, v121))).f32[0]);
                        v123 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v122, (int32x4_t)v122), (int8x16_t)v122, 0xCuLL), vnegq_f32(v112)), v122, v113);
                        v124 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v123, (int32x4_t)v123), (int8x16_t)v123, 0xCuLL);
                        v125 = (int32x4_t)vmulq_f32(v123, v123);
                        v125.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v125.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v125, 2), *(float32x2_t *)v125.i8)).u32[0];
                        v126 = vrsqrte_f32((float32x2_t)v125.u32[0]);
                        v127 = vmul_f32(v126, vrsqrts_f32((float32x2_t)v125.u32[0], vmul_f32(v126, v126)));
                        v128 = vmulq_n_f32(v124, vmul_f32(v127, vrsqrts_f32((float32x2_t)v125.u32[0], vmul_f32(v127, v127))).f32[0]);
                        v129 = v118 * 0.1;
                        if ((float)(v118 * 0.1) > 0.025)
                          v129 = 0.025;
                        v130 = vmulq_n_f32(v122, v129);
                        v131 = vmulq_n_f32(v128, v129);
                        v132 = v118 * 0.2;
                        if (v132 > 0.04)
                          v132 = 0.04;
                        v133 = vaddq_f32(v105, vmulq_n_f32(v112, v132));
                        *(float32x4_t *)v361 = vaddq_f32(v133, v130);
                        v354 = vsubq_f32(v133, v130);
                        v355 = vaddq_f32(v133, v131);
                        v352 = vsubq_f32(v133, v131);
                        v134 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, v385, v361);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v134, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v134, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v135 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, v385, &v355);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v135, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v135, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v136 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, v385, &v354);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v136, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v136, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v137 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, v385, &v352);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v137, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v137, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v138 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, v361, &v355);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v138, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v138, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v139 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, &v355, &v354);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v139, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v139, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v140 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, &v354, &v352);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v140, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v140, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v141 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, &v352, v361);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v141, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v141, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v142 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, v361, &v356);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v142, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v142, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v143 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, &v355, &v356);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v143, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v143, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v144 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, &v354, &v356);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v144, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v144, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v145 = re::PrimitiveRenderingContext::addLine((uint64_t)&v366, &v352, &v356);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v145, &v353, (_anonymous_namespace_ *)v373, v375, v371, v376, v384);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v145, &v351, (_anonymous_namespace_ *)v372, &v374, v371, v376, v384);
                        v91 = v345;
                        v92 = v347;
                        v27 = "ZN2re8internal14makeNodeUniqueINS0_48CoreIKDoubleExponentialTransformFilterNodeHelperENS_9"
                              "AllocatorEJffEEEDaPT0_DpT1_EUlPvE_"
                            + 87;
                        v9 = (__n128 *)"CompilerE";
                        v87 = (__n128 *)"F20REEventHandlerResultPNS2_6EntityERK22REComponentDidAddEventEFS6_S8_SB_EJEEE";
                        v58 = (unint64_t)"F20REEventHandlerResultPNS2_6EntityERK22REComponentDidAddEventEFS6_S8_SB_EJEEE";
                        v22 = v306;
                      }
                    }
                    v146 = 0;
                    v147 = *(float *)v346.i32;
                    v148 = v147 + v147;
                    v149 = *(float *)&v346.i32[2];
                    v150 = v149 + v149;
                    v151 = v147 * (float)(v147 + v147);
                    v152 = *(float *)&v346.i32[1] * (float)(*(float *)&v346.i32[1] + *(float *)&v346.i32[1]);
                    v153 = v149 * (float)(v149 + v149);
                    v154 = v148 * *(float *)&v346.i32[1];
                    v155 = v148 * *(float *)&v346.i32[2];
                    v156 = (float)(*(float *)&v346.i32[1] + *(float *)&v346.i32[1]) * *(float *)&v346.i32[2];
                    v157 = v148 * *(float *)&v346.i32[3];
                    v158 = (float)(*(float *)&v346.i32[1] + *(float *)&v346.i32[1]) * *(float *)&v346.i32[3];
                    v159.i32[3] = 0;
                    v159.f32[0] = 1.0 - (float)(v152 + v153);
                    v159.f32[1] = v154 + (float)(v150 * *(float *)&v346.i32[3]);
                    v159.f32[2] = v155 - v158;
                    v160.i32[3] = 0;
                    v160.f32[0] = v154 - (float)(v150 * *(float *)&v346.i32[3]);
                    v161 = (_OWORD *)(v63 + (v65 << 6));
                    v162 = v161[1];
                    v163 = v161[2];
                    v164 = v161[3];
                    v160.f32[1] = 1.0 - (float)(v151 + v153);
                    v160.f32[2] = v156 + v157;
                    v165.i32[3] = 0;
                    v165.f32[0] = v155 + v158;
                    v165.f32[1] = v156 - v157;
                    v165.f32[2] = 1.0 - (float)(v151 + v152);
                    v166 = vmulq_n_f32(v159, v91.f32[0]);
                    v92.i32[3] = 1.0;
                    v167 = vmulq_n_f32(v160, *(float *)vshrq_n_u64((uint64x2_t)v91, 0x20uLL).i32);
                    *(_OWORD *)v385 = *v161;
                    *(_OWORD *)&v385[16] = v162;
                    v168 = vmulq_laneq_f32(v165, v91, 2);
                    *(_OWORD *)&v385[32] = v163;
                    v386 = v164;
                    do
                    {
                      *(float32x4_t *)((char *)&v356 + v146) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v166, COERCE_FLOAT(*(_OWORD *)&v385[v146])), v167, *(float32x2_t *)&v385[v146], 1), v168, *(float32x4_t *)&v385[v146], 2), v92, *(float32x4_t *)&v385[v146], 3);
                      v146 += 16;
                    }
                    while (v146 != 64);
                    v169 = v356;
                    v170 = v353;
                    v171 = vaddq_f32(v359, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v356, v311), (float32x4_t)0, v357), (float32x4_t)0, v358));
                    v355 = v359;
                    v356 = vdivq_f32(v171, (float32x4_t)vdupq_laneq_s32((int32x4_t)v171, 3));
                    v172 = vmulq_f32(v169, (float32x4_t)0);
                    v173 = vaddq_f32(v359, vmlaq_f32(vmlaq_f32(v172, v309, v357), (float32x4_t)0, v358));
                    *(float32x4_t *)v385 = vdivq_f32(v173, (float32x4_t)vdupq_laneq_s32((int32x4_t)v173, 3));
                    v335 = v359;
                    v174 = vaddq_f32(v359, vmlaq_f32(vmlaq_f32(v172, (float32x4_t)0, v357), v309, v358));
                    *(_OWORD *)v323 = *(_OWORD *)v385;
                    v329 = vdivq_f32(v174, (float32x4_t)vdupq_laneq_s32((int32x4_t)v174, 3));
                    *(float32x4_t *)v361 = v329;
                    v354 = (float32x4_t)v9[53];
                    v175 = vsubq_f32(v356, v359);
                    v176 = vmulq_f32(v175, v175);
                    v354 = (float32x4_t)v87[190];
                    v355 = v335;
                    v177 = vsubq_f32(*(float32x4_t *)v323, v335);
                    v178 = vmulq_f32(v177, v177);
                    v354 = *(float32x4_t *)(v58 + 3088);
                    v355 = v335;
                    v179 = vsubq_f32(v329, v335);
                    v180 = vmulq_f32(v179, v179);
                  }
                  ++v65;
                }
                while (v65 != v88);
                v5 = v298;
                if (!*(_BYTE *)(v307 + 26))
                  goto LABEL_128;
                if (!v293)
                  goto LABEL_182;
                v181 = *(_QWORD *)(v307 + 192);
                if (!v181)
                  goto LABEL_111;
                v182 = atomic_load((unsigned int *)(v181 + 704));
                if (v182 != 2)
                {
                  if (!*(_QWORD *)(v307 + 192))
                  {
LABEL_111:
                    (*(void (**)(float32x4_t *__return_ptr, uint64_t, const char *))(*(_QWORD *)v293 + 8))(&v356, v293, "engine:Courier.refont");
                    v183 = *(float32x4_t *)(v307 + 184);
                    *(float32x4_t *)(v307 + 184) = v356;
                    v356 = v183;
                    v184 = *(_QWORD *)(v307 + 200);
                    *(_QWORD *)(v307 + 200) = v357.i64[0];
                    v357.i64[0] = v184;
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v356);
                  }
                  re::AssetHandle::loadAsync(v291);
                }
                v185 = *(_QWORD *)(v307 + 192);
                if (v185)
                {
                  v186 = atomic_load((unsigned int *)(v185 + 704));
                  if (v186 == 2)
                  {
                    re::makeFontID(v291, (re::StringID *)v361);
                    v187 = *(float *)v346.i32;
                    v188 = v187 + v187;
                    v189 = *(float *)&v346.i32[2];
                    v190 = v189 + v189;
                    v191 = v187 * (float)(v187 + v187);
                    v192 = *(float *)&v346.i32[1] * (float)(*(float *)&v346.i32[1] + *(float *)&v346.i32[1]);
                    v193 = v189 * (float)(v189 + v189);
                    v194 = v188 * *(float *)&v346.i32[1];
                    v195 = v188 * *(float *)&v346.i32[2];
                    v196 = (float)(*(float *)&v346.i32[1] + *(float *)&v346.i32[1]) * *(float *)&v346.i32[2];
                    v197 = v188 * *(float *)&v346.i32[3];
                    v198 = (float)(*(float *)&v346.i32[1] + *(float *)&v346.i32[1]) * *(float *)&v346.i32[3];
                    v199.i32[3] = 0;
                    v199.f32[0] = 1.0 - (float)(v192 + v193);
                    v199.f32[1] = v194 + (float)(v190 * *(float *)&v346.i32[3]);
                    v199.f32[2] = v195 - v198;
                    v200.i32[3] = 0;
                    v200.f32[0] = v194 - (float)(v190 * *(float *)&v346.i32[3]);
                    v200.f32[1] = 1.0 - (float)(v191 + v193);
                    v200.f32[2] = v196 + v197;
                    v201.i32[3] = 0;
                    v201.f32[0] = v195 + v198;
                    v201.f32[1] = v196 - v197;
                    v201.f32[2] = 1.0 - (float)(v191 + v192);
                    v312 = vmulq_n_f32(v200, *(float *)vshrq_n_u64((uint64x2_t)v345, 0x20uLL).i32);
                    v315 = vmulq_n_f32(v199, v345.f32[0]);
                    v310 = vmulq_laneq_f32(v201, v345, 2);
                    v202 = v347;
                    v202.i32[3] = 1.0;
                    v305 = v202;
                    re::StringID::StringID((re::StringID *)&v350, (const StringID *)v361);
                    v204 = 0;
                    v211.i32[0] = v343;
                    v205 = *(float *)v211.i32 + *(float *)v211.i32;
                    v206 = *(float *)&v344;
                    v207 = (float)(*(float *)v211.i32 + *(float *)v211.i32) * *(float *)&v344;
                    v208 = (float)(*((float *)&v343 + 1) + *((float *)&v343 + 1)) * *((float *)&v344 + 1);
                    v209 = *(float *)&v344 * (float)(*((float *)&v343 + 1) + *((float *)&v343 + 1));
                    v210 = (float)(*(float *)v211.i32 + *(float *)v211.i32) * *((float *)&v344 + 1);
                    *(float *)v211.i32 = *(float *)v211.i32 * (float)(*(float *)v211.i32 + *(float *)v211.i32);
                    v212 = *((float *)&v343 + 1) * (float)(*((float *)&v343 + 1) + *((float *)&v343 + 1));
                    v213.i32[3] = 0;
                    v213.f32[0] = v207 + v208;
                    v213.f32[1] = v209 - v210;
                    v213.f32[2] = 1.0 - (float)(*(float *)v211.i32 + v212);
                    v214 = v205 * *((float *)&v343 + 1);
                    v215 = (float)(v206 + v206) * *((float *)&v344 + 1);
                    v216 = v206 * (float)(v206 + v206);
                    v217.i32[3] = 0;
                    v217.f32[0] = v214 - v215;
                    v217.f32[1] = 1.0 - (float)(*(float *)v211.i32 + v216);
                    v217.f32[2] = v209 + v210;
                    v303 = v217;
                    v304 = v213;
                    v65 = v301[3];
                    v218 = v301[4];
                    v219.i32[3] = 0;
                    v219.f32[0] = 1.0 - (float)(v216 + v212);
                    v219.f32[1] = v214 + v215;
                    v219.f32[2] = v207 - v208;
                    v302 = v219;
                    v58 = v289;
                    do
                    {
                      if (!v22)
                        goto LABEL_119;
                      if ((unint64_t)v22 <= v204)
                        goto LABEL_180;
                      if (*(_BYTE *)(v308 + v204))
                      {
LABEL_119:
                        if (v65 <= v204)
                          goto LABEL_179;
                        v220 = *(_OWORD *)(v63 + (v204 << 6) + 48);
                        HIDWORD(v220) = 1.0;
                        v336 = v220;
                        v211.i32[0] = *(_DWORD *)(v307 + 80);
                        *(float32x4_t *)v324 = vmulq_n_f32(v303, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v211, 0), 0x20uLL).i32);
                        v330 = vmulq_n_f32(v304, *(float *)v211.i32);
                        *(float32x4_t *)v318 = vmulq_n_f32(v302, *(float *)v211.i32);
                        v221 = *(char **)(v218 + 16 * v204 + 8);
                        v222 = strrchr(v221, 47);
                        v223 = 0;
                        *(_OWORD *)v385 = *(_OWORD *)v318;
                        *(_OWORD *)&v385[16] = *(_OWORD *)v324;
                        *(float32x4_t *)&v385[32] = v330;
                        v386 = v336;
                        do
                        {
                          *(float32x4_t *)((char *)&v356 + v223) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v315, COERCE_FLOAT(*(_OWORD *)&v385[v223])), v312, *(float32x2_t *)&v385[v223], 1), v310, *(float32x4_t *)&v385[v223], 2), v305, *(float32x4_t *)&v385[v223], 3);
                          v223 += 16;
                        }
                        while (v223 != 64);
                        if (v222)
                          v224 = v222 + 1;
                        else
                          v224 = v221;
                        re::DebugRenderer::drawText(v289, (__int128 *)&v356, v224, &v350, (__int128 *)(v307 + 64));
                        v22 = v306;
                      }
                      ++v204;
                    }
                    while (v204 != v88);
                    re::StringID::destroyString((re::StringID *)&v350);
                    re::StringID::destroyString((re::StringID *)v361);
                    v5 = v298;
                    v9 = (__n128 *)("N2re12MeshCompilerE" + 10);
                  }
                }
LABEL_128:
                v23 = v300;
                v58 = (v299 + 1);
                v79 = v299 + 1;
                if (v294 <= v58)
                {
LABEL_129:
                  if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)&v366))
                    re::PrimitiveRenderer::submitContext(v288, (unint64_t *)&v366);
                  if (v379)
                  {
                    if (v383)
                      (*(void (**)(void))(*(_QWORD *)v379 + 40))();
                    v383 = 0;
                    v380 = 0;
                    v381 = 0;
                    v379 = 0;
                    ++v382;
                  }
                  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v377);
                  re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)&v366);
                  goto LABEL_136;
                }
              }
            }
LABEL_184:
            re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) ", "renderManager", "doDrawModelSkeletons", 404);
            _os_crash();
            __break(1u);
LABEL_185:
            re::internal::assertLog((re::internal *)4, v35, "assertion failure: '%s' (%s:line %i) ", "meshBoundingBoxes.size() == instances.size()", "doDrawModelBoundingBoxes", 338);
            _os_crash();
            __break(1u);
          }
LABEL_136:
          v225 = v292;
          if (v292)
          {
            if (*(_BYTE *)(v307 + 120))
            {
              v226 = *(_QWORD *)(v292 + 96);
              if (v226)
              {
                if (*(_QWORD *)(v226 + 104) != v295)
                  goto LABEL_185;
                v227 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
                v228 = *(_QWORD *)(v227 + 32);
                v229 = v346;
                v319 = v345;
                v337 = v347;
                v230 = *(_QWORD *)(*(_QWORD *)(v227 + 104) + 312);
                re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)&v366, *(_QWORD *)(v230 + 224), *(re::RenderManager **)(v230 + 248));
                v378 = *(_BYTE *)(v307 + 27);
                if (v295)
                {
                  v231 = 0;
                  v232 = (re::MeshBoundingBoxes *)(v226 + 80);
                  v233 = *(float *)v229.i32 * (float)(*(float *)v229.i32 + *(float *)v229.i32);
                  v234 = *(float *)&v229.i32[1] * (float)(*(float *)&v229.i32[1] + *(float *)&v229.i32[1]);
                  v235 = *(float *)&v229.i32[2] * (float)(*(float *)&v229.i32[2] + *(float *)&v229.i32[2]);
                  v236 = (float)(*(float *)v229.i32 + *(float *)v229.i32) * *(float *)&v229.i32[1];
                  v237 = (float)(*(float *)v229.i32 + *(float *)v229.i32) * *(float *)&v229.i32[2];
                  v238 = (float)(*(float *)&v229.i32[1] + *(float *)&v229.i32[1]) * *(float *)&v229.i32[2];
                  v239 = (float)(*(float *)v229.i32 + *(float *)v229.i32) * *(float *)&v229.i32[3];
                  v240 = (float)(*(float *)&v229.i32[1] + *(float *)&v229.i32[1]) * *(float *)&v229.i32[3];
                  v241 = (float)(*(float *)&v229.i32[2] + *(float *)&v229.i32[2]) * *(float *)&v229.i32[3];
                  v242.i32[3] = 0;
                  v242.f32[0] = 1.0 - (float)(v234 + v235);
                  v242.f32[1] = v236 + v241;
                  v242.f32[2] = v237 - v240;
                  v243.i32[3] = 0;
                  v243.f32[0] = v236 - v241;
                  v243.f32[1] = 1.0 - (float)(v233 + v235);
                  v243.f32[2] = v238 + v239;
                  *(float *)&v244 = 1.0 - (float)(v233 + v234);
                  v245.f32[0] = v237 + v240;
                  v245.f32[1] = v238 - v239;
                  v245.i64[1] = v244;
                  v325 = vmulq_n_f32(v243, *(float *)vshrq_n_u64((uint64x2_t)v319, 0x20uLL).i32);
                  v331 = vmulq_n_f32(v242, v319.f32[0]);
                  v320 = vmulq_laneq_f32(v245, v319, 2);
                  v246 = v337;
                  v246.i32[3] = 1.0;
                  v338 = v246;
                  v247 = fmax((float)(*(float *)(v307 + 116) * v345.f32[0]), 0.001);
                  v248 = v228 + 72;
                  do
                  {
                    v249 = (_OWORD *)re::DataArray<re::MeshInstance>::get(v248, *(_QWORD *)(v297 + 8 * v231));
                    v250 = 0;
                    v251 = v249[3];
                    v252 = v249[4];
                    v253 = v249[5];
                    *(_OWORD *)v385 = v249[2];
                    *(_OWORD *)&v385[16] = v251;
                    *(_OWORD *)&v385[32] = v252;
                    v386 = v253;
                    do
                    {
                      *(float32x4_t *)((char *)&v356 + v250) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v331, COERCE_FLOAT(*(_OWORD *)&v385[v250])), v325, *(float32x2_t *)&v385[v250], 1), v320, *(float32x4_t *)&v385[v250], 2), v338, *(float32x4_t *)&v385[v250], 3);
                      v250 += 16;
                    }
                    while (v250 != 64);
                    v254 = (float *)re::MeshBoundingBoxes::boundingBox(v232, v231);
                    ++v231;
                  }
                  while (v231 != v295);
                }
                if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)&v366))
                  re::PrimitiveRenderer::submitContext(v230, (unint64_t *)&v366);
                if (v379)
                {
                  if (v383)
                    (*(void (**)(void))(*(_QWORD *)v379 + 40))();
                  v383 = 0;
                  v380 = 0;
                  v381 = 0;
                  v379 = 0;
                  ++v382;
                }
                re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v377);
                re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)&v366);
                v225 = v292;
              }
            }
            if (*(_BYTE *)(v307 + 121))
            {
              v255 = *(_QWORD *)(v225 + 96);
              if (v255)
              {
                v256 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
                v257 = *(_QWORD *)(v256 + 32);
                v258 = v346;
                v321 = v345;
                v339 = v347;
                v259 = *(_QWORD *)(*(_QWORD *)(v256 + 104) + 312);
                re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)&v366, *(_QWORD *)(v259 + 224), *(re::RenderManager **)(v259 + 248));
                v378 = *(_BYTE *)(v307 + 27);
                v260 = v295;
                if (v295)
                {
                  v261 = 0;
                  v262 = 0;
                  v263 = (re::MeshBoundingBoxes *)(v255 + 152);
                  v264 = *(float *)v258.i32 * (float)(*(float *)v258.i32 + *(float *)v258.i32);
                  v265 = *(float *)&v258.i32[1] * (float)(*(float *)&v258.i32[1] + *(float *)&v258.i32[1]);
                  v266 = *(float *)&v258.i32[2] * (float)(*(float *)&v258.i32[2] + *(float *)&v258.i32[2]);
                  v267 = (float)(*(float *)v258.i32 + *(float *)v258.i32) * *(float *)&v258.i32[1];
                  v268 = (float)(*(float *)v258.i32 + *(float *)v258.i32) * *(float *)&v258.i32[2];
                  v269 = (float)(*(float *)&v258.i32[1] + *(float *)&v258.i32[1]) * *(float *)&v258.i32[2];
                  v270 = (float)(*(float *)v258.i32 + *(float *)v258.i32) * *(float *)&v258.i32[3];
                  v271 = (float)(*(float *)&v258.i32[1] + *(float *)&v258.i32[1]) * *(float *)&v258.i32[3];
                  v272 = (float)(*(float *)&v258.i32[2] + *(float *)&v258.i32[2]) * *(float *)&v258.i32[3];
                  v273.i32[3] = 0;
                  v273.f32[0] = 1.0 - (float)(v265 + v266);
                  v273.f32[1] = v267 + v272;
                  v273.f32[2] = v268 - v271;
                  v274.i32[3] = 0;
                  v274.f32[0] = v267 - v272;
                  v274.f32[1] = 1.0 - (float)(v264 + v266);
                  v274.f32[2] = v269 + v270;
                  v275 = v264 + v265;
                  v276.i32[3] = 0;
                  v276.f32[0] = v268 + v271;
                  v276.f32[1] = v269 - v270;
                  v276.f32[2] = 1.0 - v275;
                  v326 = vmulq_n_f32(v274, *(float *)vshrq_n_u64((uint64x2_t)v321, 0x20uLL).i32);
                  v332 = vmulq_n_f32(v273, v321.f32[0]);
                  v322 = vmulq_laneq_f32(v276, v321, 2);
                  v277 = v339;
                  v277.i32[3] = 1.0;
                  v340 = v277;
                  v278 = fmax((float)(*(float *)(v307 + 116) * v345.f32[0]), 0.001);
                  v316 = v257 + 72;
                  v313 = v257 + 8;
                  do
                  {
                    v279 = re::DataArray<re::MeshInstance>::get(v316, *(_QWORD *)(v297 + 8 * v262));
                    v280 = 0;
                    v281 = *(_OWORD *)(v279 + 48);
                    v282 = *(_OWORD *)(v279 + 64);
                    v283 = *(_OWORD *)(v279 + 80);
                    *(_OWORD *)v385 = *(_OWORD *)(v279 + 32);
                    *(_OWORD *)&v385[16] = v281;
                    *(_OWORD *)&v385[32] = v282;
                    v386 = v283;
                    do
                    {
                      *(float32x4_t *)((char *)&v356 + v280) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v332, COERCE_FLOAT(*(_OWORD *)&v385[v280])), v326, *(float32x2_t *)&v385[v280], 1), v322, *(float32x4_t *)&v385[v280], 2), v340, *(float32x4_t *)&v385[v280], 3);
                      v280 += 16;
                    }
                    while (v280 != 64);
                    v284 = *(_QWORD *)(re::DataArray<re::MeshModel>::get(v313, *(_QWORD *)(v279 + 16)) + 56);
                    if (v284)
                    {
                      v285 = v284 + v261;
                      do
                      {
                        v286 = (float *)re::MeshBoundingBoxes::boundingBox(v263, v261);
                        ++v261;
                        --v284;
                      }
                      while (v284);
                      v261 = v285;
                      v260 = v295;
                    }
                    ++v262;
                  }
                  while (v262 != v260);
                }
                if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)&v366))
                  re::PrimitiveRenderer::submitContext(v259, (unint64_t *)&v366);
                v5 = v298;
                v9 = (__n128 *)("N2re12MeshCompilerE" + 10);
                if (v379)
                {
                  if (v383)
                    (*(void (**)(void))(*(_QWORD *)v379 + 40))();
                  v383 = 0;
                  v380 = 0;
                  v381 = 0;
                  v379 = 0;
                  ++v382;
                }
                re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v377);
                re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)&v366);
              }
            }
          }
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v12 + 32));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v349);
    }
    while ((_QWORD)v349 != v5 || WORD4(v349) != 0xFFFF || WORD5(v349) != 0xFFFF);
  }
  return *(_DWORD *)(v5 + 40) != 0;
}

uint64_t re::ecs2::SkeletalDebugSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re::ecs2::System *v25;
  _BYTE v26[16];
  uint64_t v27[2];
  _QWORD v28[2];
  uint64_t v29;

  v5 = result;
  v28[0] = a3;
  v28[1] = a4;
  v6 = *(_QWORD *)(result + 104);
  if (!v6 || (*(_BYTE *)(v6 + 424) & 0x10) != 0)
  {
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v27);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26, 3087, v5);
    v29 = a2;
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 232)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v5 + 224), &v29)+ 8);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 336, v7);
    v8 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 168, v7);
    v9 = *(_QWORD *)(*v8 + 224);
    v10 = v8[3];
    v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v10);
    if (*(_DWORD *)(v11 + 40))
      v12 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v9, v28, v8, v10, v11, 0);
    else
      v12 = 0;
    v13 = v8[5];
    v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v13);
    if (*(_DWORD *)(v14 + 40))
      v12 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v28, v8, v13, v14, 0);
    v15 = v8[6];
    v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v15);
    if (*(_DWORD *)(v16 + 40))
    {
      if (((v12 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, v28, v8, v15, v16, 0)) & 1) == 0)goto LABEL_11;
    }
    else if (!v12)
    {
LABEL_11:
      if (*(_BYTE *)(v5 + 400))
      {
        v17 = *(_QWORD *)(v5 + 344);
        v18 = *(_DWORD *)(v5 + 352);
        if (v17 >= 0xB)
        {
          if ((v18 & 1) != 0)
            v19 = (_QWORD *)(v5 + 360);
          else
            v19 = *(_QWORD **)(v5 + 368);
          v21 = 8 * v17;
          while (!*v19)
          {
            ++v19;
            v21 -= 8;
            if (!v21)
              goto LABEL_31;
          }
LABEL_29:
          v25 = *(re::ecs2::System **)(v5 + 384);
          if (!*((_BYTE *)v25 + 86))
            re::ecs2::System::queueToRun(v25, 0.0);
          goto LABEL_31;
        }
        if ((v18 & 1) == 0)
        {
          v20 = *(uint64_t **)(v5 + 368);
          if (!v17)
            goto LABEL_31;
LABEL_26:
          v22 = 0;
          v23 = 8 * v17;
          do
          {
            v24 = *v20++;
            v22 |= v24;
            v23 -= 8;
          }
          while (v23);
          if (!v22)
            goto LABEL_31;
          goto LABEL_29;
        }
        v20 = (uint64_t *)(v5 + 360);
        if (v17)
          goto LABEL_26;
      }
LABEL_31:
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v27);
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 336, v7);
    goto LABEL_11;
  }
  return result;
}

uint64_t re::ecs2::SkeletalDebugSystem::willAddSystemToECSService(re::ecs2::SkeletalDebugSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  *((_QWORD *)this + 15) = result;
  return result;
}

_QWORD *re::ecs2::SkeletalDebugSystem::willRemoveSystemFromECSService(_QWORD *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

void re::ecs2::SkeletalDebugSystem::willAddSceneToECSService(re::ecs2::SkeletalDebugSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 168;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::SkeletalDebugSystem *)((char *)this + 288);
  v6 = *((_QWORD *)this + 37);
  v7 = *((_DWORD *)this + 76);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 312);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 40);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 312);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 40);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 288, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalDebugSystem *)((char *)this + 224), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 336;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 26);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 22);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 21, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 22);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 184) & 1) != 0)
    v19 = (char *)this + 192;
  else
    v19 = (char *)*((_QWORD *)this + 25);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 26);
  ++*((_DWORD *)this + 54);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 26);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 26) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalDebugSystem *)((char *)this + 224), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 26);
  v29 = *((_QWORD *)this + 41);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 41) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 41) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 304) & 1) != 0)
      v33 = (char *)this + 312;
    else
      v33 = (char *)*((_QWORD *)this + 40);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 37) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 26);
  v35 = *((_QWORD *)this + 47);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 47) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::SkeletalDebugSystem *)((char *)this + 336), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 47) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 352) & 1) != 0)
      v39 = (char *)this + 360;
    else
      v39 = (char *)*((_QWORD *)this + 46);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 43) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 336;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 400))
    return;
  v40 = *((_QWORD *)this + 43);
  v41 = *((_DWORD *)this + 88);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 360);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 46);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 48);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 360);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 46);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::SkeletalDebugSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalDebugSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 224);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 28, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 29) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 288, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 336, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 168, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_SkeletalDebugComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_328);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_328))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115950, 0);
    *(uint64_t *)((char *)&qword_254115960 + 6) = 0;
    qword_254115960 = 0;
    qword_254115970 = 0;
    qword_254115978 = 0xFFFFFFFFLL;
    qword_254115950 = (uint64_t)&off_24ED7DAA8;
    qword_254115980 = (uint64_t)"SkeletalDebugComponent";
    dword_254115988 = 0;
    xmmword_254115990 = 0u;
    unk_2541159A0 = 0u;
    xmmword_2541159B0 = 0u;
    qword_2541159C0 = 0;
    __cxa_guard_release(&_MergedGlobals_328);
  }
  return &qword_254115950;
}

void re::ecs2::initInfo_SkeletalDebugComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[2];
  __int128 v41;

  v40[0] = 0xBC69695610230606;
  v40[1] = "SkeletalDebugComponent";
  re::StringID::destroyString((re::StringID *)v40);
  *((_OWORD *)this + 2) = v41;
  v4 = atomic_load((unsigned __int8 *)&qword_2541158F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541158F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115908 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "drawModelSkeleton";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254115910 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "drawJointNames";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254115918 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::DynamicString>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "jointNameFilter";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254115920 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v22 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "textColor";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x4000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254115928 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_float((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "textScale";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x5000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254115930 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "boneColor";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x6000000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254115938 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::introspect_float((re *)1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "axisLength";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x7000000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_254115940 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::introspect_BOOL((re *)1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "drawJointsWithDepth";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x1B00000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_254115948 = v38;
      __cxa_guard_release(&qword_2541158F8);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254115908;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalDebugComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalDebugComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalDebugComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalDebugComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v39 = v41;
}

uint64_t re::internal::defaultConstruct<re::ecs2::SkeletalDebugComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::SkeletalDebugComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalDebugComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a3 + 240);
  v4 = *(_QWORD *)(a3 + 208);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 224));
    *(_OWORD *)(a3 + 208) = 0u;
    *(_OWORD *)(a3 + 224) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 184));
  v5 = *(_QWORD *)(a3 + 32);
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a3 + 48));
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalDebugComponent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a1 + 240);
  v2 = *(_QWORD *)(a1 + 208);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 224));
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 184));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 48));
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_SkeletalDebugComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalDebugComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalDebugComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalDebugComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalDebugComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SkeletalDebugSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254115900);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115900))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541159C8, 0);
    *(uint64_t *)((char *)&qword_2541159D8 + 6) = 0;
    qword_2541159D8 = 0;
    qword_2541159E8 = 0;
    qword_2541159F0 = 0xFFFFFFFFLL;
    qword_2541159C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541159F8 = (uint64_t)"SkeletalDebugSystem";
    dword_254115A00 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_254115A38 = 0;
    __cxa_guard_release(&qword_254115900);
  }
  return &qword_2541159C8;
}

void re::ecs2::initInfo_SkeletalDebugSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xC92384EC8ACA73D2;
  v5[1] = "SkeletalDebugSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SkeletalDebugSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalDebugSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalDebugSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalDebugSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalDebugSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::SkeletalDebugSystem *re::internal::defaultConstruct<re::ecs2::SkeletalDebugSystem>(int a1, int a2, re::ecs2::SkeletalDebugSystem *this)
{
  return re::ecs2::SkeletalDebugSystem::SkeletalDebugSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalDebugSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 21);
  a3[16] = &off_24ED6E6F8;
  v4 = a3[18];
  if (v4)
  {
    if (a3[19])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[20]);
      a3[19] = 0;
      a3[20] = 0;
    }
    a3[18] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalDebugSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 21);
  a1[16] = &off_24ED6E6F8;
  v2 = a1[18];
  if (v2)
  {
    if (a1[19])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[20]);
      a1[19] = 0;
      a1[20] = 0;
    }
    a1[18] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalDebugSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalDebugSystem>, this);
}

uint64_t re::ecs2::SkeletalDebugComponentStateImpl::dependsOnComponents(re::ecs2::SkeletalDebugComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalDebugComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalDebugComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::SkeletalDebugSystem::~SkeletalDebugSystem(re::ecs2::SkeletalDebugSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 21);
  *((_QWORD *)this + 16) = &off_24ED6E6F8;
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 21);
  *((_QWORD *)this + 16) = &off_24ED6E6F8;
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SkeletalDebugSystem::typeInfo(re::ecs2::SkeletalDebugSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalDebugSystem>, 0);
}

void `anonymous namespace'::internalDrawArrow(uint64_t a1, float32x4_t *a2, float32x4_t *a3, __n128 *a4, float a5, float a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  unint64_t v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v26;
  float32x4_t v27;
  float v28;

  v28 = a5;
  v6 = vsubq_f32(*a3, *a2);
  v7 = vmulq_f32(v6, v6);
  LODWORD(v8) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  if (fabsf(v8) >= 1.0e-10)
  {
    v12 = v8;
    v13 = vrsqrte_f32((float32x2_t)LODWORD(v8));
    v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
    v23 = vmulq_n_f32(v6, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
    v15 = re::PrimitiveRenderingContext::addLine(a1, a2, a3);
    re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v15, &v28, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v15, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    if (fabsf(v23.f32[2]) >= 0.00001)
    {
      v17.i32[0] = 0;
      v17.f32[1] = -v23.f32[2];
      v16 = v23;
      v17.i64[1] = v23.u32[1];
    }
    else
    {
      v16 = v23;
      v17.i64[1] = 0;
      v17.f32[0] = -v23.f32[1];
      v17.i32[1] = v23.i32[0];
    }
    v18 = (int32x4_t)vmulq_f32(v17, v17);
    v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
    v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
    v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
    v24 = vmulq_n_f32(vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]), a6 * 0.25);
    v26 = vmulq_n_f32(v16, a6);
    v27 = vaddq_f32(vsubq_f32(*a3, v26), v24);
    v21 = re::PrimitiveRenderingContext::addLine(a1, a3, &v27);
    re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v21, &v28, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v21, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    v27 = vsubq_f32(vsubq_f32(*a3, v26), v24);
    v22 = re::PrimitiveRenderingContext::addLine(a1, a3, &v27);
    re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v22, &v28, (_anonymous_namespace_ *)(a1 + 240), (_BYTE *)(a1 + 518), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v22, a4, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  }
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6E7E8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6E840;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6E898;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6E8F0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6E7E8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6E840;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6E898;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6E8F0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E7E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E7E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E840;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E840;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E898;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E898;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6E8F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6E8F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::SkeletalDebugComponent>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;

  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v2 = (_QWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 32) = 0u;
  v3 = (_QWORD *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = off_24ED59B80;
  *(_DWORD *)(v4 + 24) = 0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_QWORD *)(a1 + 64) = 0x3F8000003F800000;
  *(_QWORD *)(a1 + 72) = 0x3F8000003F800000;
  *(_DWORD *)(a1 + 80) = 1084227584;
  *(_OWORD *)(a1 + 96) = xmmword_22610D480;
  *(_QWORD *)(a1 + 112) = 0x3CA3D70A3DCCCCCDLL;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 144) = xmmword_226104350;
  *(_OWORD *)(a1 + 160) = xmmword_22610BC10;
  *(_QWORD *)(a1 + 176) = -1;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  re::DynamicString::setCapacity(v2, 0);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::peerVideoStreamingLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::peerVideoStreamingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "PeerVideoStreaming");
  }
  return &re::peerVideoStreamingLogObjects(void)::logObjects;
}

uint64_t re::PeerVideoStreamingLogObjects::loggingEnabled(re::PeerVideoStreamingLogObjects *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = (unsigned __int8 *)&unk_255828000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255828000;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"peervideostreaming.log.enabled", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::PeerVideoStreamingLogObjects::loggingEnabled(void)::value = v6;
      v2 = (_BYTE *)&unk_255828000;
    }
  }
  return v2[2192];
}

uint64_t *re::ecs2::allocInfo_DynamicLightShadowComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_329);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_329))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115A60, 0);
    *(uint64_t *)((char *)&qword_254115A70 + 6) = 0;
    qword_254115A70 = 0;
    qword_254115A80 = 0;
    qword_254115A88 = 0xFFFFFFFFLL;
    qword_254115A60 = (uint64_t)&off_24ED7DAA8;
    qword_254115A90 = (uint64_t)"DynamicLightShadowComponent";
    dword_254115A98 = 0;
    xmmword_254115AA0 = 0u;
    unk_254115AB0 = 0u;
    xmmword_254115AC0 = 0u;
    qword_254115AD0 = 0;
    __cxa_guard_release(&_MergedGlobals_329);
  }
  return &qword_254115A60;
}

void re::ecs2::initInfo_DynamicLightShadowComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x8E6D63D77A0FC50CLL;
  v14[1] = "DynamicLightShadowComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254115A48);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254115A48);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115A50 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "enableDynamicLightShadow";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254115A58 = v12;
      __cxa_guard_release(&qword_254115A48);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254115A50;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicLightShadowComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicLightShadowComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicLightShadowComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicLightShadowComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::DynamicLightShadowComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59C00;
}

void *re::internal::defaultDestruct<re::ecs2::DynamicLightShadowComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::DynamicLightShadowComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59C00;
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicLightShadowComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DynamicLightShadowComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicLightShadowComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicLightShadowComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicLightShadowComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicLightShadowComponent>, this);
}

void re::DynamicArray<re::ecs2::AnimationShadowEntry>::clear(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    v4 = *(uint64_t **)(a1 + 32);
    v5 = 144 * v3;
    do
    {
      re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)v4, a2);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v4 + 6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v4 + 3));
      v4 += 18;
      v5 -= 144;
    }
    while (v5);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::DynamicArray<re::ecs2::AnimationEntry>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    result = *(_QWORD *)(result + 32);
    v3 = 248 * v2;
    do
    {
      re::ecs2::AnimationEntry::~AnimationEntry((id *)result);
      result = v4 + 248;
      v3 -= 248;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

re::ecs2::AnimationComponentEntry *re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear(re::ecs2::AnimationComponentEntry *result, double a2)
{
  re::ecs2::AnimationComponentEntry *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v3)
  {
    result = (re::ecs2::AnimationComponentEntry *)*((_QWORD *)result + 4);
    v4 = 72 * v3;
    do
    {
      re::ecs2::AnimationComponentEntry::~AnimationComponentEntry(result, a2);
      result = (re::ecs2::AnimationComponentEntry *)(v5 + 72);
      v4 -= 72;
    }
    while (v4);
  }
  ++*((_DWORD *)v2 + 6);
  return result;
}

double re::ecs2::AnimationComponentEntry::deinit(re::ecs2::AnimationComponentEntry *this, double a2)
{
  if (*(_QWORD *)this)
  {

    *(_QWORD *)this = 0;
  }
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0x80000000;
  *((_QWORD *)this + 6) = &str_240;
  LODWORD(a2) = 0;
  return re::AnimationController::stop((re::ecs2::AnimationComponentEntry *)((char *)this + 56), a2);
}

double re::ecs2::AnimationEntry::deinit(re::ecs2::AnimationEntry *this)
{
  re::ecs2::AnimationEntry *v1;
  uint64_t v2;
  void (***v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  _QWORD *WeakRetained;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const re::ecs2::Component *v16;
  re::ecs2::NetworkComponent *v17;
  const void *v18;
  double result;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *(void (****)(_QWORD))(v2 + 288);
    if (v3)
    {
      v4 = re::globalAllocators(this)[2];
      (**v3)(v3);
      this = (re::ecs2::AnimationEntry *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
      v2 = *((_QWORD *)v1 + 6);
      *(_QWORD *)(v2 + 288) = 0;
    }
    v5 = re::globalAllocators(this)[2];
    re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v2);
  }
  *((_QWORD *)v1 + 6) = 0;
  v6 = (const void *)*((_QWORD *)v1 + 11);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)v1 + 11) = 0;
  }
  if (*((_QWORD *)v1 + 28))
  {
    WeakRetained = objc_loadWeakRetained((id *)v1 + 27);
    if (WeakRetained)
    {
      v8 = WeakRetained;
      v9 = (char *)(WeakRetained - 1);
      do
      {
        v10 = v9;
        v9 = (char *)*((_QWORD *)v9 + 3);
      }
      while (v9);
      v11 = *((_QWORD *)v10 + 2);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 56);
        if (v12)
        {
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
          v14 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v13);
          if (v14)
          {
            v15 = v14;
            v16 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v8 + 3), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 72))(v15, *((_QWORD *)v1 + 28), (uint64_t)v16 + 32);
            v17 = (re::ecs2::NetworkComponent *)v8[24];
            if (!v17)
              v17 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v8 + 3), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            re::ecs2::NetworkComponent::markDirty(v17, v16);
          }
        }
      }

    }
    *((_QWORD *)v1 + 28) = 0;
  }
  objc_destroyWeak((id *)v1 + 27);
  *((_QWORD *)v1 + 27) = 0;
  v18 = (const void *)*((_QWORD *)v1 + 30);
  if (v18)
  {
    CFRelease(v18);
    *((_QWORD *)v1 + 30) = 0;
  }
  if (*(_QWORD *)v1)
  {

    *(_QWORD *)v1 = 0;
  }
  *((_QWORD *)v1 + 1) = 0;
  *((_WORD *)v1 + 28) = 512;
  *((_BYTE *)v1 + 58) = 0;
  *((_QWORD *)v1 + 9) = 0;
  *((_QWORD *)v1 + 10) = 0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 12) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_DWORD *)v1 + 29) = 0x80000000;
  *((_BYTE *)v1 + 112) = 0;
  *((_QWORD *)v1 + 15) = &str_240;
  *((_QWORD *)v1 + 16) = 0;
  *((_BYTE *)v1 + 136) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)((char *)v1 + 140) = result;
  return result;
}

void re::ecs2::AnimationEntry::parentTimebase(re::ecs2::AnimationEntry *this@<X0>, re::ecs2::Entity *a2@<X1>, OpaqueCMTimebase *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  re::ecs2::Entity *v8;
  const void *v9;
  re::ecs2::Entity *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *((_QWORD *)this + 11);
  if (v5)
  {
    *(_BYTE *)a4 = 1;
LABEL_3:
    *(_QWORD *)(a4 + 8) = v5;
    return;
  }
  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    if (*((_QWORD *)this + 29) == v7)
    {
      *(_BYTE *)a4 = 1;
      v5 = *((_QWORD *)this + 30);
      goto LABEL_3;
    }
    v8 = a2;
    v9 = (const void *)*((_QWORD *)this + 30);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)this + 30) = 0;
    }
    if (!v8)
      goto LABEL_17;
    do
    {
      v10 = v8;
      v8 = (re::ecs2::Entity *)*((_QWORD *)v8 + 3);
    }
    while (v8);
    v11 = *((_QWORD *)v10 + 2);
    if (v11
      && (v12 = *(_QWORD *)(v11 + 56)) != 0
      && (v13 = (*(uint64_t (**)(uint64_t, re::ecs2::Entity *, OpaqueCMTimebase *))(*(_QWORD *)v12 + 32))(v12, a2, a3), (v14 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v13)) != 0)&& (v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 96))(v14, *((_QWORD *)this + 12))) != 0)
    {
      *((_QWORD *)this + 29) = *((_QWORD *)this + 12);
      *((_QWORD *)this + 30) = v15;
      *(_BYTE *)a4 = 1;
      *(_QWORD *)(a4 + 8) = v15;
    }
    else
    {
LABEL_17:
      *(_BYTE *)a4 = 0;
    }
  }
  else
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = a3;
  }
}

uint64_t *re::ecs2::AnimationShadowEntry::deinit(re::ecs2::AnimationShadowEntry *this, double a2)
{
  uint64_t v3;
  uint64_t *result;

  *(_QWORD *)this = 0;
  LODWORD(a2) = 0;
  re::AnimationController::stop((re::ecs2::AnimationShadowEntry *)((char *)this + 8), a2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {

    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  result = std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)this + 6, 0);
  *((_BYTE *)this + 88) = 2;
  return result;
}

re::ecs2::AnimationComponent *re::ecs2::AnimationComponent::AnimationComponent(re::ecs2::AnimationComponent *this)
{
  uint64_t v2;
  uint64_t *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED6E948;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_DWORD *)(v2 + 112) = 0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_DWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 1000;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_WORD *)(v2 + 240) = 0;
  v3 = re::globalAllocators((re *)v2);
  v4 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 96, 8);
  v5 = re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationComponentEventDelegate(v4, this);
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v5;
  if (v6)

  return this;
}

uint64_t `anonymous namespace'::animationTokenIndex<re::ecs2::AnimationShadowEntry>(uint64_t result, unint64_t a2, char *a3, unint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;

  if (!a2)
    goto LABEL_12;
  v4 = &a3[144 * a2];
  v5 = a3;
  do
  {
    v6 = &v5[144 * (a2 >> 1)];
    v8 = *(_QWORD *)v6;
    v7 = v6 + 144;
    v9 = v8 >= a4;
    if (v8 >= a4)
      a2 >>= 1;
    else
      a2 += ~(a2 >> 1);
    if (!v9)
      v5 = v7;
  }
  while (a2);
  if (v5 != v4 && *(_QWORD *)v5 == a4)
  {
    *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = 0x8E38E38E38E38E39 * ((v5 - a3) >> 4);
  }
  else
  {
LABEL_12:
    *(_BYTE *)result = 0;
  }
  return result;
}

uint64_t `anonymous namespace'::animationTokenIndex<re::ecs2::AnimationEntry>(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_12;
  v4 = a3 + 248 * a2;
  v5 = a3;
  do
  {
    v6 = v5 + 248 * (a2 >> 1);
    v7 = *(_QWORD *)(v6 + 128);
    v8 = v6 + 248;
    if (v7 >= a4)
      a2 >>= 1;
    else
      a2 += ~(a2 >> 1);
    if (v7 < a4)
      v5 = v8;
  }
  while (a2);
  if (v5 != v4 && *(_QWORD *)(v5 + 128) == a4)
  {
    *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = 0xEF7BDEF7BDEF7BDFLL * ((v5 - a3) >> 3);
  }
  else
  {
LABEL_12:
    *(_BYTE *)result = 0;
  }
  return result;
}

uint64_t re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(re::AssetHandle *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

void re::ecs2::AnimationComponent::initOwnershipState(re::ecs2::AnimationComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  const re::ecs2::AnimationEntry *v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;

  if (!*((_BYTE *)this + 240))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2 && (v3 = *(_QWORD *)(v2 + 200)) != 0 && *(_QWORD *)(v3 + 32) && RESyncableGetOwnerPeerID())
    {
      *((_BYTE *)this + 240) = 1;
    }
    else
    {
      *((_BYTE *)this + 240) = 2;
      v4 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
        v6 = *((_QWORD *)this + 13);
        if (v6)
        {
          v7 = v5;
          v8 = (const re::ecs2::AnimationEntry *)*((_QWORD *)this + 15);
          v9 = 248 * v6;
          do
          {
            re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v7, v8, (uint64_t)v10);
            if (v10[0])
              *((_QWORD *)v8 + 9) = v11;
            v8 = (const re::ecs2::AnimationEntry *)((char *)v8 + 248);
            v9 -= 248;
          }
          while (v9);
        }
      }
    }
  }
}

uint64_t re::ecs2::AnimationComponent::parentSimulationTimer(re::ecs2::AnimationComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  do
  {
    v2 = v1;
    v1 = *(_QWORD *)(v1 + 24);
  }
  while (v1);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 56);
  if (!v4)
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  return re::ServiceLocator::serviceOrNull<re::SimulationTimer>(v5);
}

void re::ecs2::AnimationComponent::animationEntryParentTime(re::ecs2::Entity **this@<X0>, double a2@<D0>, const re::ecs2::AnimationEntry *a3@<X1>, uint64_t a4@<X8>)
{
  Float64 Seconds;
  CMTime time;
  _BYTE v8[8];
  CMTimebaseRef timebase;

  re::ecs2::AnimationEntry::parentTimebase(a3, this[2], this[28], (uint64_t)v8);
  if (v8[0])
  {
    if (timebase)
    {
      CMTimebaseGetTime(&time, timebase);
      Seconds = CMTimeGetSeconds(&time);
      *(_BYTE *)a4 = 1;
      *(Float64 *)(a4 + 8) = Seconds;
    }
    else
    {
      *(_BYTE *)a4 = 1;
      *(double *)(a4 + 8) = a2;
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
}

_QWORD *re::ecs2::AnimationComponent::processFinishedAnimations(_QWORD *this, re::ecs2::Component *a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::Entity *SceneDataEntity;
  uint64_t v20;
  const re::ecs2::Component *v21;
  re::ecs2::NetworkComponent *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  re::ecs2::NetworkComponent *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  __int128 *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  re::ecs2::EntityComponentCollection *v46;
  _OWORD v47[5];
  uint64_t v48;

  v2 = (uint64_t)this;
  v48 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 240) == 2)
  {
    v3 = this[19];
    if (!v3)
      goto LABEL_50;
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v45 = v4;
      while (1)
      {
        v6 = *(_QWORD *)(v2 + 168);
        if (*(_BYTE *)(v6 + 248 * v5 + 57) == 2)
          break;
        v7 = v6 + 248 * v5;
        v9 = *(_QWORD *)(v7 + 88);
        v8 = v7 + 88;
        v10 = *(_QWORD *)(v2 + 16);
        v11 = (_QWORD *)(v8 + 136);
        if (v9 != *(_QWORD *)(v8 + 136) && v10 != 0)
        {
          do
          {
            v13 = v10;
            v10 = *(_QWORD *)(v10 + 24);
          }
          while (v10);
          v14 = *(_QWORD *)(v13 + 16);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 56);
            if (v15)
            {
              v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
              v17 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v16);
              if (v17)
              {
                v18 = v17;
                LOBYTE(v47[0]) = 0;
                SceneDataEntity = makeSceneDataEntity(v14, (uint64_t)v47, 1, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
                v46 = (re::ecs2::Entity *)((char *)SceneDataEntity + 32);
                v20 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v20)
                {
                  v21 = (const re::ecs2::Component *)v20;
                  if (*v11)
                  {
                    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 72))(v18, *v11, v20 + 32);
                    v22 = (re::ecs2::NetworkComponent *)*((_QWORD *)SceneDataEntity + 25);
                    if (!v22)
                      v22 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(v46, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                    re::ecs2::NetworkComponent::markDirty(v22, v21);
                    *v11 = 0;
                  }
                  v23 = v6 + 248 * v5;
                  *(_QWORD *)(v23 + 96) = 0;
                  v24 = (uint64_t *)(v23 + 96);
                  a2 = *(re::ecs2::Component **)v8;
                  if (*(_QWORD *)v8)
                  {
                    v25 = (*(uint64_t (**)(uint64_t, re::ecs2::Component *, uint64_t, _QWORD))(*(_QWORD *)v18 + 64))(v18, a2, (uint64_t)v21 + 32, 0);
                    v26 = (re::ecs2::NetworkComponent *)*((_QWORD *)SceneDataEntity + 25);
                    if (!v26)
                      v26 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(v46, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                    re::ecs2::NetworkComponent::markDirty(v26, v21);
                    if (v25)
                    {
                      objc_storeWeak((id *)(v6 + 248 * v5 + 216), (char *)SceneDataEntity + 8);
                      *v24 = v25;
                      *v11 = *(_QWORD *)v8;
                    }
                  }
                }
              }
            }
          }
        }
        ++v5;
        v3 = *(_QWORD *)(v2 + 152);
        if (v5 >= v3)
        {
          if ((v45 & 1) != 0)
            goto LABEL_49;
LABEL_50:
          this = re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries((_QWORD *)v2);
          v43 = *(_QWORD *)(v2 + 152);
          if (v43 == *(_QWORD *)(v2 + 104))
          {
            if (v43)
              v44 = 2;
            else
              v44 = 1;
            *(_BYTE *)(v2 + 240) = v44;
            if (!v43)
              return re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)(v2 + 136), 0);
            return this;
          }
LABEL_57:
          re::internal::assertLog((re::internal *)4, v42, "assertion failure: '%s' (%s:line %i) Owned animation entries expected to match animation entries.", "m_ownedAnimationEntries.size() == m_animationEntries.size()", "processFinishedAnimations", 725);
          _os_crash();
          __break(1u);
        }
      }
      v27 = v6 + 248 * v5;
      v28 = *(_QWORD *)(v27 + 192);
      if (v28)
      {
        v29 = *(_QWORD **)(v27 + 208);
        v30 = &v29[2 * v28];
        do
        {
          v31 = *(_QWORD *)(v2 + 16);
          do
          {
            v32 = v31;
            v31 = *(_QWORD *)(v31 + 24);
          }
          while (v31);
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)&v47[0] = *v29;
          v34 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v33 + 152, (uint64_t *)v47);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 8);
            if (v35)
            {
              v36 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v35 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v36)
                re::ecs2::AnimationComponent::stop(v36, v29[1], 0.0);
            }
          }
          v29 += 2;
        }
        while (v29 != v30);
        v3 = *(_QWORD *)(v2 + 152);
      }
      if (v3 <= v5)
        break;
      v37 = *(_QWORD *)(v2 + 168);
      if (v3 - 1 > v5)
      {
        v38 = (__int128 *)(v37 + 248 * v5);
        if ((__int128 *)((char *)v38 + 248) != (__int128 *)(v37 + 248 * v3))
        {
          v39 = 248 * v3 - 248 * v5 - 248;
          do
          {
            v40 = (__int128 *)((char *)v38 + 248);
            re::ecs2::AnimationEntry::operator=(v38, (__int128 *)((char *)v38 + 248));
            v38 = v40;
            v39 -= 248;
          }
          while (v39);
          v3 = *(_QWORD *)(v2 + 152);
          v37 = *(_QWORD *)(v2 + 168);
        }
      }
      re::ecs2::AnimationEntry::~AnimationEntry((id *)(v37 + 248 * v3 - 248));
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_QWORD *)(v2 + 152) = v3;
      ++*(_DWORD *)(v2 + 160);
      *(_DWORD *)(v2 + 128) = 0;
      v4 = 1;
      if (v5 >= v3)
      {
LABEL_49:
        re::ecs2::NetworkComponent::markComponentDirty((re::ecs2::NetworkComponent *)v2, a2);
        goto LABEL_50;
      }
    }
    memset(v47, 0, sizeof(v47));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_57;
  }
  if (this[13])
    v41 = 3;
  else
    v41 = 1;
  *((_BYTE *)this + 240) = v41;
  return this;
}

uint64_t re::ecs2::AnimationComponent::stop(uint64_t this, uint64_t a2, float a3)
{
  uint64_t v3;
  float *v4;
  uint64_t v5;
  char v7;

  v3 = *(_QWORD *)(this + 152);
  if (v3)
  {
    v4 = (float *)(*(_QWORD *)(this + 168) + 148);
    v5 = 248 * v3;
    while (*(_QWORD *)(v4 - 5) != a2)
    {
      v4 += 62;
      v5 -= 248;
      if (!v5)
        return re::ecs2::Component::enqueueMarkDirty(this);
    }
    if (a3 <= 0.0)
    {
      v7 = 2;
    }
    else
    {
      *v4 = a3;
      v7 = 4;
    }
    *((_BYTE *)v4 - 91) = v7;
    *(_DWORD *)(this + 128) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

_QWORD *re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries(_QWORD *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  if (!*((_BYTE *)this + 241))
  {
    v1 = (uint64_t)this;
    if (*((_BYTE *)this + 240) == 2)
    {
      v2 = *((_DWORD *)this + 32);
      if (!v2 || *((_DWORD *)this + 28) != v2)
      {
        this = (_QWORD *)re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)(this + 11));
        v3 = *(_QWORD *)(v1 + 136);
        if (*(_QWORD *)(v1 + 88))
        {
          v4 = (_QWORD *)(v1 + 88);
          if (v3)
          {
            this = re::DynamicArray<re::ecs2::AnimationEntry>::copy(v4, v1 + 136);
            ++*(_DWORD *)(v1 + 112);
          }
          else
          {
            this = (_QWORD *)re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)v4);
          }
        }
        else if (v3)
        {
          v5 = *(_QWORD *)(v1 + 152);
          *(_QWORD *)(v1 + 88) = v3;
          re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)(v1 + 88), v5);
          ++*(_DWORD *)(v1 + 112);
          this = re::DynamicArray<re::ecs2::AnimationEntry>::copy((_QWORD *)(v1 + 88), v1 + 136);
        }
        *(_DWORD *)(v1 + 128) = *(_DWORD *)(v1 + 112);
        if (!*(_QWORD *)(v1 + 104))
          return re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)(v1 + 88), 0);
      }
    }
  }
  return this;
}

void re::ecs2::AnimationComponent::processDefaultTimebaseChanges(re::ecs2::AnimationComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (*((_QWORD *)this + 9) != *((_QWORD *)this + 29))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      do
      {
        v3 = v2;
        v2 = *(_QWORD *)(v2 + 24);
      }
      while (v2);
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 56);
        if (v5)
        {
          v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
          v7 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v6);
          v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(v7, *((_QWORD *)this + 9));
          if (v8)
          {
            v9 = v8;
            v10 = (const void *)*((_QWORD *)this + 28);
            if (v10)
              CFRelease(v10);
            v11 = *((_QWORD *)this + 9);
            *((_QWORD *)this + 28) = v9;
            *((_QWORD *)this + 29) = v11;
          }
        }
      }
    }
  }
}

uint64_t re::ecs2::AnimationComponent::processActiveAnimations(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  __int128 v5;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  double v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  int v37;
  uint64_t v38;
  re::ecs2::NetworkComponent *v39;
  BOOL v40;
  char v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  const re::ecs2::Component *v49;
  re::ecs2::NetworkComponent *v50;
  const re::ecs2::Component *v51;
  int v52;
  re::ecs2::NetworkComponent *v54;
  re::ecs2::Entity *v55;
  _anonymous_namespace_ *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  _BYTE v65[20];
  __int128 v66;
  _BYTE v67[12];
  __int16 v68;
  int v69;
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  _DWORD v74[12];
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v56 = (_anonymous_namespace_ *)(a1 + 176);
  v5 = 0uLL;
  __asm { FMOV            V8.2S, #1.0 }
  v10 = 1;
  do
  {
    *(_BYTE *)(a1 + 241) = 1;
    v11 = *(_QWORD *)(a1 + 192);
    v12 = *(_QWORD *)(a1 + 104);
    if (!v11)
      goto LABEL_37;
    if (!v12)
    {
LABEL_33:
      v27 = 144 * v12;
      v28 = v12;
      do
      {
        v29 = (uint64_t *)(*(_QWORD *)(a1 + 208) + v27);
        re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)v29, *(double *)&v5);
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v29 + 6);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v29 + 3));
        ++v28;
        v27 += 144;
      }
      while (v28 < *(_QWORD *)(a1 + 192));
      *(_QWORD *)(a1 + 192) = v12;
      ++*(_DWORD *)(a1 + 200);
      if (!v12)
        goto LABEL_46;
      goto LABEL_45;
    }
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(a1 + 120) + 248 * v13;
      v15 = *(_QWORD *)(a1 + 208);
      v16 = (uint64_t *)(v15 + 144 * v13);
      v17 = *(_QWORD *)(v14 + 128);
      if (v17 <= *v16)
      {
        if (v17 < *v16)
        {
          v64 = DWORD2(v5);
          *(_OWORD *)&v65[4] = v5;
          v66 = v5;
          v61 = v5;
          v62 = v5;
          v59 = v5;
          v60 = v5;
          v57 = v5;
          v58 = v5;
          BYTE8(v62) = 2;
          v63 = 0;
          *(_QWORD *)v65 = _D8;
          v12 = v11 + 1;
          v65[12] = 0;
          if (v11 + 1 <= v13)
            goto LABEL_76;
          if (v11 >= *(_QWORD *)(a1 + 184))
          {
            re::DynamicArray<re::ecs2::AnimationShadowEntry>::growCapacity(v56, v11 + 1);
            v5 = 0uLL;
            v11 = *(_QWORD *)(a1 + 192);
            v15 = *(_QWORD *)(a1 + 208);
          }
          v20 = v15 + 144 * v11;
          if (v11 <= v13)
          {
            *(_QWORD *)(v20 + 80) = 0;
            *(_OWORD *)v20 = v5;
            *(_OWORD *)(v20 + 16) = v5;
            *(_OWORD *)(v20 + 32) = v5;
            *(_QWORD *)(v20 + 48) = 0;
            *(_WORD *)(v20 + 88) = 2;
            *(_QWORD *)(v20 + 96) = 0;
            *(_BYTE *)(v20 + 104) = 0;
            *(_QWORD *)(v20 + 108) = _D8;
            *(_DWORD *)(v20 + 116) = 0;
            *(_BYTE *)(v20 + 120) = 0;
          }
          else
          {
            *(_QWORD *)(v20 + 80) = 0;
            *(_OWORD *)v20 = v5;
            *(_OWORD *)(v20 + 16) = v5;
            *(_OWORD *)(v20 + 32) = v5;
            *(_QWORD *)(v20 + 48) = 0;
            *(_WORD *)(v20 + 88) = 2;
            *(_QWORD *)(v20 + 96) = 0;
            *(_BYTE *)(v20 + 104) = 0;
            *(_QWORD *)(v20 + 108) = _D8;
            *(_DWORD *)(v20 + 116) = 0;
            *(_BYTE *)(v20 + 120) = 0;
            re::ecs2::AnimationShadowEntry::operator=((uint64_t *)v20, (uint64_t *)(v20 - 144));
            v21 = *(_QWORD *)(a1 + 208);
            v22 = *(_QWORD *)(a1 + 192);
            v23 = (uint64_t *)(v21 + 144 * v22 - 144);
            if (v23 != (uint64_t *)(v21 + 144 * v13))
            {
              v24 = 144 * v13 - 144 * v22 + 144;
              do
              {
                v12 = (unint64_t)(v23 - 18);
                re::ecs2::AnimationShadowEntry::operator=(v23, v23 - 18);
                v23 = (uint64_t *)v12;
                v24 += 144;
              }
              while (v24);
              v21 = *(_QWORD *)(a1 + 208);
            }
            v20 = v21 + 144 * v13;
          }
          re::ecs2::AnimationShadowEntry::operator=((uint64_t *)v20, (uint64_t *)&v57);
          ++*(_QWORD *)(a1 + 192);
          ++*(_DWORD *)(a1 + 200);
          re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)&v57, v25);
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v60);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v58 + 8));
          v2 = *(_QWORD *)(a1 + 192);
          if (v2 <= v13)
            goto LABEL_77;
          v16 = (uint64_t *)(*(_QWORD *)(a1 + 208) + 144 * v13);
        }
        ++v13;
        v11 = *(_QWORD *)(a1 + 192);
      }
      else
      {
        if (v11 <= v13)
        {
          *(_QWORD *)v67 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v74[0] = 136315906;
          *(_QWORD *)&v74[1] = "removeStableAt";
          LOWORD(v74[3]) = 1024;
          *(_DWORD *)((char *)&v74[3] + 2) = 969;
          HIWORD(v74[4]) = 2048;
          *(_QWORD *)&v74[5] = v13;
          LOWORD(v74[7]) = 2048;
          *(_QWORD *)((char *)&v74[7] + 2) = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          v75 = 0u;
          v76 = 0u;
          memset(v74, 0, sizeof(v74));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v67 = 136315906;
          *(_QWORD *)&v67[4] = "insert";
          v68 = 1024;
          v69 = 887;
          v70 = 2048;
          v71 = v13;
          v72 = 2048;
          v73 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_77:
          *(_QWORD *)v67 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v74[0] = 136315906;
          *(_QWORD *)&v74[1] = "operator[]";
          LOWORD(v74[3]) = 1024;
          *(_DWORD *)((char *)&v74[3] + 2) = 789;
          HIWORD(v74[4]) = 2048;
          *(_QWORD *)&v74[5] = v13;
          LOWORD(v74[7]) = 2048;
          *(_QWORD *)((char *)&v74[7] + 2) = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_78;
        }
        if (v11 - 1 > v13 && v16 + 18 != (uint64_t *)(v15 + 144 * v11))
        {
          v18 = 144 * v11 - 144 * v13 - 144;
          do
          {
            v19 = v16 + 18;
            re::ecs2::AnimationShadowEntry::operator=(v16, v16 + 18);
            v16 = v19;
            v18 -= 144;
          }
          while (v18);
          v11 = *(_QWORD *)(a1 + 192);
          v15 = *(_QWORD *)(a1 + 208);
        }
        v2 = v15 + 144 * v11;
        re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)(v2 - 144), *(double *)&v5);
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v2 - 96));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 - 120));
        v11 = *(_QWORD *)(a1 + 192) - 1;
        *(_QWORD *)(a1 + 192) = v11;
        ++*(_DWORD *)(a1 + 200);
      }
      v12 = *(_QWORD *)(a1 + 104);
      _CF = v13 >= v11 || v13 >= v12;
      v5 = 0uLL;
    }
    while (!_CF);
    if (v11 > v12)
      goto LABEL_33;
LABEL_37:
    if (v11 >= v12)
    {
      v12 = v11;
      if (!v11)
        goto LABEL_46;
LABEL_45:
      v38 = *(_QWORD *)(a1 + 104);
      if (v12 == v38)
        goto LABEL_46;
LABEL_78:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Expected shadow entry count(%zu) to match entry count (%zu)!", "!m_shadowEntries.size() || m_shadowEntries.size() == m_animationEntries.size()", "processActiveAnimations", 851, v12, v38);
      _os_crash();
      __break(1u);
    }
    v30 = 248 * v11;
    v31 = 0uLL;
    do
    {
      v32 = *(_QWORD *)(a1 + 120);
      v64 = DWORD2(v31);
      *(_OWORD *)&v65[4] = v31;
      v66 = v31;
      v61 = v31;
      v62 = v31;
      v59 = v31;
      v60 = v31;
      v57 = v31;
      v58 = v31;
      BYTE8(v62) = 2;
      v63 = 0;
      *(_QWORD *)v65 = _D8;
      v65[12] = 0;
      v33 = *(_QWORD *)(a1 + 192);
      v34 = 0uLL;
      if (v33 >= *(_QWORD *)(a1 + 184))
      {
        re::DynamicArray<re::ecs2::AnimationShadowEntry>::growCapacity(v56, v33 + 1);
        v34 = 0uLL;
        v33 = *(_QWORD *)(a1 + 192);
      }
      v35 = *(_QWORD *)(a1 + 208) + 144 * v33;
      *(_QWORD *)(v35 + 80) = 0;
      *(_OWORD *)v35 = v34;
      *(_OWORD *)(v35 + 16) = v34;
      *(_OWORD *)(v35 + 32) = v34;
      *(_QWORD *)(v35 + 48) = 0;
      *(_WORD *)(v35 + 88) = 2;
      *(_QWORD *)(v35 + 96) = 0;
      *(_BYTE *)(v35 + 104) = 0;
      *(_QWORD *)(v35 + 108) = _D8;
      *(_DWORD *)(v35 + 116) = 0;
      *(_BYTE *)(v35 + 120) = 0;
      re::ecs2::AnimationShadowEntry::operator=((uint64_t *)v35, (uint64_t *)&v57);
      ++*(_QWORD *)(a1 + 192);
      ++*(_DWORD *)(a1 + 200);
      re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)&v57, v36);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v60);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v58 + 8));
      v31 = 0uLL;
      v10 &= v37;
      ++v11;
      v30 += 248;
    }
    while (v11 < *(_QWORD *)(a1 + 104));
    v12 = *(_QWORD *)(a1 + 192);
    if (v12)
      goto LABEL_45;
LABEL_46:
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v39 = *(re::ecs2::NetworkComponent **)(v2 + 200);
      if (v39)
      {
        if (*((_QWORD *)v39 + 4))
        {
          if (RESyncableIsAuthoritative())
          {
            v12 = *(_QWORD *)(a1 + 192);
            goto LABEL_51;
          }
        }
        else
        {
LABEL_51:
          if (v12)
          {
            v54 = v39;
            v55 = (re::ecs2::Entity *)v2;
            v40 = 0;
            v41 = 0;
            v42 = (_BYTE *)(*(_QWORD *)(a1 + 208) + 88);
            v43 = 144 * v12;
            do
            {
              if (!*v42)
              {
                v2 = v42[16] & 4;
                v44 = *((_QWORD *)v42 - 7);
                if (!v44)
                  goto LABEL_59;
                v45 = atomic_load((unsigned int *)(v44 + 704));
                if (v45 != 2)
                  goto LABEL_59;
                v46 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
                v47 = (uint64_t *)*((_QWORD *)v42 - 7);
                if (v47)
                  v47 = (uint64_t *)v47[33];
                if (v46 == v47)
                {
                  v48 = re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)(v42 - 64));
                  if (v48)
                    re::AnimationSceneEntityData::markTargetEntityAsDirty((re::AnimationSceneEntityData *)(v48 + 24), v55, v2 == 0);
                }
                else
                {
LABEL_59:
                  v40 = (v40 | (v2 >> 2)) != 0;
                  v41 |= (_DWORD)v2 == 0;
                }
              }
              v42 += 144;
              v43 -= 144;
            }
            while (v43);
            if ((v41 & 1) != 0 && (v49 = (const re::ecs2::Component *)*((_QWORD *)v55 + 21)) != 0)
            {
              v50 = v54;
              re::ecs2::NetworkComponent::markDirty(v54, v49);
            }
            else
            {
              v50 = v54;
            }
            if (v40)
            {
              v51 = (const re::ecs2::Component *)*((_QWORD *)v55 + 30);
              if (v51)
                re::ecs2::NetworkComponent::markDirty(v50, v51);
            }
          }
        }
      }
    }
    *(_BYTE *)(a1 + 241) = 0;
    v52 = *(_DWORD *)(a1 + 128);
    re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries((_QWORD *)a1);
    v5 = 0uLL;
  }
  while (v52 != *(_DWORD *)(a1 + 128));
  if (!*(_QWORD *)(a1 + 192))
    re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(v56, 0);
  return v10 & 1;
}

uint64_t `anonymous namespace'::processAnimationState(uint64_t a1, uint64_t *a2, uint64_t a3, re::ecs2::Entity **a4, OpaqueCMTimebase *a5)
{
  re *v9;
  double v10;
  int v11;
  int v12;
  float v13;
  float v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  OpaqueCMTimebase *v18;
  uint64_t v19;
  re::ecs2::Entity *v20;
  re::ecs2::Entity *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _anonymous_namespace_ *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  re::Allocator *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  re::ecs2::Entity *v48;
  unint64_t v49;
  re::ecs2::Entity *v50;
  re::ecs2::Entity *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *Timeline;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  BOOL v79;
  unint64_t v80;
  char v81[8];
  OpaqueCMTimebase *v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[3];
  char v86[8];
  void *v87;
  _QWORD v88[3];
  char v89[8];
  unint64_t v90;
  _BYTE v91[18];
  __int16 v92;
  _BYTE v93[18];
  uint8_t buf[16];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  re::ecs2::AnimationEntry::parentTimebase((re::ecs2::AnimationEntry *)a1, a4[2], a5, (uint64_t)v86);
  if (!v86[0])
    return 0;
  v11 = *(unsigned __int8 *)(a1 + 57);
  if (v11 == *((unsigned __int8 *)a2 + 88))
  {
    v12 = 0;
    goto LABEL_4;
  }
  if (v11 == 2)
  {
    re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)a2, v10);
    return 1;
  }
  v40 = *(_QWORD *)(a1 + 128);
  if (v40 != *a2)
  {
    *a2 = v40;
    *((_BYTE *)a2 + 104) = *(_BYTE *)(a1 + 136);
  }
  v41 = a2[1];
  if (v41)
  {
    v9 = (re *)re::DataArray<re::internal::TimelineTree>::tryGet(v41 + (a2[2] >> 56 << 6) + 72, a2[2]);
    if (v9)
    {
      v12 = 0;
      v42 = *(unsigned __int8 *)(a1 + 57);
LABEL_96:
      switch(v42)
      {
        case 0:
          re::AnimationController::resume((re::AnimationController *)(a2 + 1));
          v12 = 1;
          break;
        case 1:
        case 3:
        case 5:
          re::AnimationController::pause((re::AnimationController *)(a2 + 1));
          break;
        default:
          v75 = *re::ecsComponentsLogObjects(v9);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            v76 = *(char *)(a1 + 57);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v76;
            _os_log_impl(&dword_224FE9000, v75, OS_LOG_TYPE_DEFAULT, "Unexpected animiation playback state: %u", buf, 8u);
          }
          break;
      }
      goto LABEL_4;
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    *(_QWORD *)v91 = &off_24ED6EA98;
    *(_QWORD *)&v93[4] = v91;
    *(_QWORD *)&v96 = &buf[8];
    *(_QWORD *)&buf[8] = &off_24ED6EA98;
    *(_QWORD *)buf = 0;
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](a2 + 6, v44);
    v45 = (uint64_t *)a2[10];
    a2[10] = 0;
    if (v45 == a2 + 7)
    {
      v46 = 4;
      v45 = a2 + 7;
    }
    else
    {
      if (!v45)
        goto LABEL_81;
      v46 = 5;
    }
    (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_81:
    if ((_QWORD)v96)
    {
      if ((uint8_t *)v96 == &buf[8])
      {
        a2[10] = (uint64_t)(a2 + 7);
        (*(void (**)(uint8_t *, uint64_t *))(*(_QWORD *)&buf[8] + 24))(&buf[8], a2 + 7);
      }
      else
      {
        a2[10] = v96;
        *(_QWORD *)&v96 = 0;
      }
    }
    else
    {
      a2[10] = 0;
    }
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
    v70 = *(_QWORD **)&v93[4];
    if (*(_BYTE **)&v93[4] == v91)
    {
      v71 = 4;
      v70 = v91;
    }
    else
    {
      if (!*(_QWORD *)&v93[4])
        goto LABEL_91;
      v71 = 5;
    }
    (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_91:
    Timeline = (_QWORD *)a2[6];
    if (Timeline)
      goto LABEL_92;
    return 0;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v85, (const re::AssetHandle *)a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v85);
  re::AssetHandle::operator=(a2 + 3, (uint64_t *)a1);
  if (!Timeline)
    return 0;
LABEL_92:
  v83 = *(_OWORD *)(a1 + 104);
  v84 = *(_QWORD *)(a1 + 120);
  a2[1] = (*(uint64_t (**)(uint64_t, _QWORD *, uint8_t *, __int128 *, _QWORD, re::ecs2::Entity **))(*(_QWORD *)a3 + 72))(a3, Timeline, buf, &v83, *(unsigned __int8 *)(a1 + 136), a4 + 10);
  a2[2] = v72;
  v10 = re::BindNode::deinit((re::BindNode *)buf);
  v73 = a2[1];
  if (v73)
  {
    v74 = *a2;
    v9 = (re *)re::DataArray<re::internal::TimelineTree>::tryGet(v73 + (a2[2] >> 56 << 6) + 72, a2[2]);
    if (v9)
      *((_QWORD *)v9 + 21) = v74;
  }
  v42 = *(unsigned __int8 *)(a1 + 57);
  v12 = 1;
  if (*(_BYTE *)(a1 + 57))
    goto LABEL_96;
LABEL_4:
  *((_BYTE *)a2 + 88) = *(_BYTE *)(a1 + 57);
  v13 = *(float *)(a1 + 140);
  if (*((float *)a2 + 27) != v13)
  {
    re::AnimationController::setSpeed((uint64_t)(a2 + 1), v13);
    *((_DWORD *)a2 + 27) = *(_DWORD *)(a1 + 140);
  }
  v14 = *(float *)(a1 + 144);
  if (*((float *)a2 + 28) != v14)
  {
    re::AnimationController::setBlendFactor((re::AnimationController *)(a2 + 1), v14, 0);
    *((_DWORD *)a2 + 28) = *(_DWORD *)(a1 + 144);
    v12 = 1;
  }
  v15 = v87;
  if (v87 != (void *)a2[12])
  {
    re::AnimationController::setParentClockOrTimebase(a2 + 1, v87);
    a2[12] = (uint64_t)v15;
  }
  if (*((unsigned __int8 *)a2 + 89) != *(unsigned __int8 *)(a1 + 58))
  {
    re::AnimationController::setTime(a2 + 1, *(double *)(a1 + 80));
    *((_BYTE *)a2 + 89) = *(_BYTE *)(a1 + 58);
    v12 = 1;
  }
  LODWORD(v10) = *(_DWORD *)(a1 + 148);
  if (*((float *)a2 + 29) != *(float *)&v10)
  {
    re::AnimationController::stop((re::AnimationController *)(a2 + 1), v10);
    *((_DWORD *)a2 + 29) = *(_DWORD *)(a1 + 148);
  }
  if (!*((_BYTE *)a2 + 120) || !*(_BYTE *)(a1 + 152))
  {
    if (!(*(unsigned __int8 *)(a1 + 152) | *((unsigned __int8 *)a2 + 120)))
      goto LABEL_112;
    if (!*(_BYTE *)(a1 + 152))
    {
      if (!*((_BYTE *)a2 + 120))
        goto LABEL_105;
      v47 = a2[17];
      if (!v47)
        goto LABEL_105;
      v48 = a4[2];
      if (!v48)
        goto LABEL_105;
      v49 = *a2;
      v50 = a4[2];
      do
      {
        v51 = v50;
        v50 = (re::ecs2::Entity *)*((_QWORD *)v50 + 3);
      }
      while (v50);
      v52 = *((_QWORD *)v51 + 2);
      if (!v52)
        goto LABEL_105;
      *(_QWORD *)buf = a2[16];
      v53 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v52 + 152, (uint64_t *)buf);
      if (!v53)
        goto LABEL_105;
      v54 = *(_QWORD *)(v53 + 8);
      if (!v54)
        goto LABEL_105;
      v55 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v54 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v55)
        goto LABEL_105;
      v26 = v55;
      v56 = *((_QWORD *)v48 + 37);
      if (!v89[0])
        goto LABEL_105;
      v57 = v90;
      v58 = *(_QWORD *)(v26 + 152);
      if (v58 <= v90)
      {
        v88[0] = 0;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v91 = 136315906;
        *(_QWORD *)&v91[4] = "operator[]";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 789;
        v92 = 2048;
        *(_QWORD *)v93 = v57;
        *(_WORD *)&v93[8] = 2048;
        *(_QWORD *)&v93[10] = v58;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        v59 = *(_QWORD *)(v26 + 168);
        v60 = v59 + 248 * v90;
        v62 = *(_QWORD *)(v60 + 192);
        v61 = (uint64_t *)(v60 + 192);
        v58 = v62;
        v63 = (char *)v61[2];
        v64 = &v63[16 * v62];
        v65 = v63;
        if (v62)
        {
          v66 = 16 * v58;
          v65 = (char *)v61[2];
          while (*(_QWORD *)v65 != v56 || *((_QWORD *)v65 + 1) != v49)
          {
            v65 += 16;
            v66 -= 16;
            if (!v66)
            {
              v65 = v64;
              break;
            }
          }
        }
        v49 = (v65 - v63) >> 4;
        if (v49 == v58)
          goto LABEL_104;
        if (v58 > v49)
        {
          v67 = v58 - 1;
          if (v58 - 1 > v49)
          {
            *(_OWORD *)&v63[16 * v49] = *((_OWORD *)v64 - 1);
            v67 = *v61 - 1;
          }
          *v61 = v67;
          ++*(_DWORD *)(v59 + 248 * v57 + 200);
          goto LABEL_104;
        }
      }
      v88[0] = 0;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v91 = 136315906;
      *(_QWORD *)&v91[4] = "removeAt";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 931;
      v92 = 2048;
      *(_QWORD *)v93 = v49;
      *(_WORD *)&v93[8] = 2048;
      *(_QWORD *)&v93[10] = v58;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      JUMPOUT(0x2258097A8);
    }
LABEL_23:
    re::AnimationController::timebase(a2 + 1, (uint64_t)buf);
    if (!buf[0])
      goto LABEL_105;
    re::AnimationController::timebase(a2 + 1, (uint64_t)v81);
    v16 = *(_QWORD *)(a1 + 168);
    if (!v16)
      goto LABEL_105;
    v17 = (unint64_t)a4[2];
    if (!v17)
      goto LABEL_105;
    v18 = v82;
    v19 = *a2;
    v20 = a4[2];
    do
    {
      v21 = v20;
      v20 = (re::ecs2::Entity *)*((_QWORD *)v20 + 3);
    }
    while (v20);
    v22 = *((_QWORD *)v21 + 2);
    if (!v22)
      goto LABEL_105;
    *(_QWORD *)buf = *(_QWORD *)(a1 + 160);
    v23 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v22 + 152, (uint64_t *)buf);
    if (!v23)
      goto LABEL_105;
    v24 = *(_QWORD *)(v23 + 8);
    if (!v24)
      goto LABEL_105;
    v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!v25)
      goto LABEL_105;
    v26 = v25;
    if (!v89[0])
      goto LABEL_105;
    v27 = v90;
    v28 = *(_QWORD *)(v26 + 192);
    if (v28 <= v90)
    {
      v88[0] = 0;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      *(_OWORD *)buf = 0u;
      v80 = v28;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v91 = 136315906;
      *(_QWORD *)&v91[4] = "operator[]";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 789;
      v92 = 2048;
      *(_QWORD *)v93 = v27;
      *(_WORD *)&v93[8] = 2048;
      *(_QWORD *)&v93[10] = v80;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      re::AnimationController::timebase((_QWORD *)(*(_QWORD *)(v26 + 208) + 144 * v90 + 8), (uint64_t)v88);
      if (!LOBYTE(v88[0]))
        goto LABEL_105;
      CMTimebaseSetSourceTimebase(v18, (CMTimebaseRef)v88[1]);
      v29 = *(_QWORD *)(v17 + 296);
      if (!v89[0])
        goto LABEL_105;
      v17 = v90;
      v16 = *(_QWORD *)(v26 + 152);
      if (v16 > v90)
      {
        v30 = *(_QWORD *)(v26 + 168);
        v31 = v30 + 248 * v90;
        v34 = *(_QWORD *)(v31 + 192);
        v33 = (unint64_t *)(v31 + 192);
        v32 = v34;
        v35 = *(v33 - 1);
        if (v34 >= v35)
        {
          v36 = v32 + 1;
          if (v35 < v32 + 1)
          {
            v37 = (_anonymous_namespace_ *)(v33 - 2);
            if (*(v33 - 2))
            {
              v38 = 2 * v35;
              if (!v35)
                v38 = 8;
              if (v38 <= v36)
                v39 = v36;
              else
                v39 = v38;
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(v37, v39);
            }
            else
            {
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(v33 - 2, v36);
              ++*(_DWORD *)(v30 + 248 * v17 + 200);
            }
          }
          v32 = *v33;
        }
        v77 = v30 + 248 * v17;
        v78 = (_QWORD *)(*(_QWORD *)(v77 + 208) + 16 * v32);
        *v78 = v29;
        v78[1] = v19;
        *v33 = v32 + 1;
        ++*(_DWORD *)(v77 + 200);
LABEL_104:
        *(_DWORD *)(v26 + 128) = 0;
LABEL_105:
        if (*((_BYTE *)a2 + 120))
          v79 = 0;
        else
          v79 = *(_BYTE *)(a1 + 152) == 0;
        if (!v79)
        {
          if (!*((_BYTE *)a2 + 120) || *(_BYTE *)(a1 + 152))
          {
            if (!*((_BYTE *)a2 + 120))
            {
              if (*(_BYTE *)(a1 + 152))
                *((_BYTE *)a2 + 120) = 1;
            }
            *((_OWORD *)a2 + 8) = *(_OWORD *)(a1 + 160);
            if (!v12)
              return 1;
            goto LABEL_113;
          }
          *((_BYTE *)a2 + 120) = 0;
        }
        goto LABEL_112;
      }
    }
    v88[2] = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v91 = 136315906;
    *(_QWORD *)&v91[4] = "operator[]";
    *(_WORD *)&v91[12] = 1024;
    *(_DWORD *)&v91[14] = 789;
    v92 = 2048;
    *(_QWORD *)v93 = v17;
    *(_WORD *)&v93[8] = 2048;
    *(_QWORD *)&v93[10] = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a2[16] != *(_QWORD *)(a1 + 160) || a2[17] != *(_QWORD *)(a1 + 168))
    goto LABEL_23;
LABEL_112:
  if (v12)
LABEL_113:
    re::AnimationController::updateAndApply((re::AnimationController *)(a2 + 1));
  return 1;
}

uint64_t re::ServiceLocator::serviceOrNull<re::SimulationTimer>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::SimulationTimer>(void)::info = re::introspect_SimulationTimer(0);
  }
  v3 = re::introspect<re::SimulationTimer>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::ecs2::AnimationComponent::pauseAnimationsForDeactivation(re::ecs2::AnimationComponent *this)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  re *v9;
  double v10;
  NSObject *v11;
  double v12;
  uint8_t v13[16];
  _BYTE v14[8];
  double v15;

  if (*((_BYTE *)this + 240) == 2)
  {
    v2 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
      v4 = *((_QWORD *)this + 19);
      if (v4)
      {
        v5 = v3;
        v6 = *((_QWORD *)this + 21);
        v7 = 248 * v4;
        do
        {
          if (!*(_BYTE *)(v6 + 57))
          {
            v8 = *(double *)(v6 + 72);
            *(_BYTE *)(v6 + 57) = 3;
            re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v5, (const re::ecs2::AnimationEntry *)v6, (uint64_t)v14);
            if (v14[0])
            {
              v10 = *(double *)(v6 + 80) + (v15 - v8) * *(float *)(v6 + 140);
              *(double *)(v6 + 72) = v15;
              *(double *)(v6 + 80) = v10;
            }
            else
            {
              v11 = *re::ecsComponentsLogObjects(v9);
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v13 = 0;
                _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Animation deactivated while desynchronized, possible inconsistent state.", v13, 2u);
              }
              v12 = *(double *)(v6 + 80) + (v5 - v8) * *(float *)(v6 + 140);
              *(double *)(v6 + 72) = v5;
              *(double *)(v6 + 80) = v12;
            }
            ++*(_BYTE *)(v6 + 58);
            *((_DWORD *)this + 32) = 0;
          }
          v6 += 248;
          v7 -= 248;
        }
        while (v7);
      }
    }
  }
}

void re::ecs2::AnimationComponent::detachAnimations(re::ecs2::AnimationComponent *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  if (*((_BYTE *)this + 240) == 2)
  {
    re::ecs2::AnimationComponent::pauseAnimationsForDeactivation(this);
    v3 = *((_QWORD *)this + 19);
    if (v3)
    {
      v4 = 248 * v3;
      v5 = (_BYTE *)(*((_QWORD *)this + 21) + 57);
      do
      {
        if (*v5 == 3)
          *v5 = 5;
        v5 += 248;
        v4 -= 248;
      }
      while (v4);
    }
    re::DynamicArray<re::ecs2::AnimationShadowEntry>::clear((uint64_t)this + 176, v2);
  }
}

uint64_t re::ecs2::AnimationComponent::play(uint64_t a1, uint64_t *a2, __int128 *a3, unsigned int a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t IsAuthoritative;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  re::ecs2::Component *v28;
  NSObject *v30;
  id v31[3];
  uint64_t v32[4];
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v10 = *(_QWORD *)(a1 + 16);
  if (!v10
    || (v11 = *(_QWORD *)(v10 + 200)) == 0
    || !*(_QWORD *)(v11 + 32)
    || (IsAuthoritative = RESyncableIsAuthoritative(), (IsAuthoritative & 1) != 0))
  {
    re::ecs2::AnimationEntry::AnimationEntry((re::ecs2::AnimationEntry *)v31);
    v13 = re::ecs2::AnimationComponent::parentSimulationTimer((re::ecs2::AnimationComponent *)a1);
    v14 = 0;
    if (v13 && (*(_BYTE *)(v10 + 288) & 1) != 0)
    {
      (*(void (**)(uint64_t, double))(*(_QWORD *)v13 + 48))(v13, 0.0);
      v15 = 0;
    }
    else
    {
      v15 = 3;
    }
    v35 = v14;
    v34 = v15;
    *(_BYTE *)(a1 + 240) = 2;
    v16 = *(_QWORD *)(a1 + 216) + 1;
    do
    {
      v17 = v16;
      v16 = 1;
    }
    while (!v17);
    *(_QWORD *)(a1 + 216) = v17;
    v37 = *a3;
    v38 = *((_QWORD *)a3 + 2);
    v39 = v17;
    v36 = 0;
    v33 = a5;
    v40 = a4;
    re::AssetHandle::operator=(v32, a2);
    v18 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    v19 = a2[1];
    if (v19)
      v20 = *(uint64_t **)(v19 + 264);
    else
      v20 = 0;
    if (v18 == v20)
    {
      re::AssetHandle::loadNow(v19, 0);
      v27 = re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)a2);
      if (!v27)
        goto LABEL_21;
      re::AnimationSceneEntityData::prepareEntityHierarchyForAnimationScene((re::AnimationSceneEntityData *)(v27 + 24), *(re::ecs2::Entity **)(a1 + 16), (re::ecs2::Entity *)((a4 >> 1) & 1));
    }
    else if (*(_BYTE *)(v19 + 312)
           && *(_DWORD *)(*(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)a2) + 8) + 8) == 17)
    {
      v21 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)a2);
      v22 = *((_QWORD *)v21 + 1);
      v24 = re::globalAllocators(v23);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 304, 16);
      v26 = (_QWORD *)re::FromToByAnimationAssetData<re::GenericSRT<float>>::FromToByAnimationAssetData(v25, v22);
      *v26 = &off_24ED329A0;
      v32[3] = (uint64_t)v26;
LABEL_21:
      re::DynamicArray<re::ecs2::AnimationEntry>::add(a1 + 136, (__int128 *)v31);
      *(_DWORD *)(a1 + 128) = 0;
      if ((a4 & 2) != 0)
        re::ecs2::NetworkComponent::markComponentDirty((re::ecs2::NetworkComponent *)a1, v28);
      re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries((_QWORD *)a1);
      re::ecs2::AnimationEntry::~AnimationEntry(v31);
      return v17;
    }
    re::AssetHandle::operator=((uint64_t *)v31, a2);
    goto LABEL_21;
  }
  v30 = *re::ecsComponentsLogObjects((re *)IsAuthoritative);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v31[0]) = 0;
    _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "Cannot play animation on entity, current process is non-authoritative.", (uint8_t *)v31, 2u);
  }
  return 0;
}

uint64_t re::AssetHandle::asset<re::TimelineAsset>(re::TimelineAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::TimelineAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

__int128 *re::DynamicArray<re::ecs2::AnimationEntry>::add(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  result = re::ecs2::AnimationEntry::AnimationEntry(*(_QWORD *)(a1 + 32) + 248 * v5, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ecs2::AnimationComponent::pause(re::ecs2::AnimationComponent *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  re *v10;
  NSObject *v11;
  double v12;
  uint8_t v13[16];
  _BYTE v14[8];
  double v15;

  v4 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
  if (v4)
  {
    v5 = *((_QWORD *)this + 19);
    if (v5)
    {
      v6 = *((_QWORD *)this + 21);
      v7 = 248 * v5;
      while (*(_QWORD *)(v6 + 128) != a2)
      {
        v6 += 248;
        v7 -= 248;
        if (!v7)
          return;
      }
      if (!*(_BYTE *)(v6 + 57))
      {
        v8 = *(double *)(v6 + 72);
        v9 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
        *(_BYTE *)(v6 + 57) = 1;
        re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v9, (const re::ecs2::AnimationEntry *)v6, (uint64_t)v14);
        if (v14[0])
        {
          v9 = v15;
        }
        else
        {
          v11 = *re::ecsComponentsLogObjects(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v13 = 0;
            _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Animation paused while desynchronized, possible inconsistent state.", v13, 2u);
          }
        }
        v12 = (v9 - v8) * *(float *)(v6 + 140);
        *(double *)(v6 + 72) = v9;
        *(double *)(v6 + 80) = v12;
        *((_DWORD *)this + 32) = 0;
      }
    }
  }
}

void re::ecs2::AnimationComponent::resume(re::ecs2::AnimationComponent *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
  if (v4)
  {
    v5 = *((_QWORD *)this + 19);
    if (v5)
    {
      v6 = *((_QWORD *)this + 21) + 72;
      v7 = 248 * v5;
      while (*(_QWORD *)(v6 + 56) != a2)
      {
        v6 += 248;
        v7 -= 248;
        if (!v7)
          return;
      }
      if (*(_BYTE *)(v6 - 15) == 1)
      {
        if ((*(_DWORD *)(*((_QWORD *)this + 2) + 288) & 1) != 0)
          v8 = 0;
        else
          v8 = 3;
        *(_BYTE *)(v6 - 15) = v8;
        *(double *)v6 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
        *((_DWORD *)this + 32) = 0;
      }
    }
  }
}

re::ecs2::AnimationComponentEntry *re::ecs2::AnimationComponent::stopAll(re::ecs2::AnimationComponent *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  re::AnimationController *v9;

  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    v4 = *((_QWORD *)this + 21);
    *((_DWORD *)this + 32) = 0;
    v5 = 248 * v3;
    v6 = (_BYTE *)(v4 + 57);
    do
    {
      *v6 = 2;
      v6 += 248;
      v5 -= 248;
    }
    while (v5);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = 72 * v7;
    v9 = (re::AnimationController *)(*((_QWORD *)this + 8) + 56);
    do
    {
      LODWORD(a2) = 0;
      a2 = re::AnimationController::stop(v9, a2);
      v9 = (re::AnimationController *)((char *)v9 + 72);
      v8 -= 72;
    }
    while (v8);
  }
  return re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear((re::ecs2::AnimationComponent *)((char *)this + 32), a2);
}

void re::ecs2::AnimationComponent::animationDuration(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, _anonymous_namespace_ *a3@<X8>)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v7[8];
  unint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19))
    v4 = (char *)this + 136;
  else
    v4 = (char *)this + 88;
  if (v7[0])
  {
    v5 = v8;
    v6 = *((_QWORD *)v4 + 2);
    if (v6 <= v8)
    {
      v9 = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v18 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v10 = 136315906;
      v11 = "operator[]";
      v12 = 1024;
      v13 = 797;
      v14 = 2048;
      v15 = v5;
      v16 = 2048;
      v17 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void `anonymous namespace'::getTimelineDuration(_anonymous_namespace_ *this, const re::ecs2::AnimationEntry *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *Timeline;
  _QWORD v6[3];

  v3 = *((_QWORD *)a2 + 6);
  if (v3)
  {
    *(_BYTE *)this = 1;
    v4 = *(_QWORD *)(v3 + 80);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a2);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
    if (!Timeline)
    {
      *(_BYTE *)this = 0;
      return;
    }
    (*(void (**)(_QWORD *))(*Timeline + 40))(Timeline);
    *(_BYTE *)this = 1;
  }
  *((_QWORD *)this + 1) = v4;
}

void re::ecs2::AnimationComponent::fadeBlendFactor(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  re::AnimationController *v7;
  const re::Timeline *v8;
  float v9;
  _BYTE v10[8];
  unint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (v10[0])
  {
    v5 = v11;
    v6 = *((_QWORD *)this + 24);
    if (v6 <= v11)
    {
      v12 = 0;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v13 = 136315906;
      v14 = "operator[]";
      v15 = 1024;
      v16 = 797;
      v17 = 2048;
      v18 = v5;
      v19 = 2048;
      v20 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v7 = (re::AnimationController *)(*((_QWORD *)this + 26) + 144 * v11 + 8);
    v8 = (const re::Timeline *)re::AnimationController::timeline(v7);
    v9 = re::AnimationController::blendFactor(v7, v8);
    *(_BYTE *)a3 = 1;
    *(float *)(a3 + 4) = v9;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::AnimationComponent::animationPlaybackTime(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22[8];
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[14];
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = a2;
  v36 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19))
    v6 = (char *)this + 136;
  else
    v6 = (char *)this + 88;
  if (!v22[0])
    goto LABEL_17;
  v7 = v23;
  v8 = *((_QWORD *)v6 + 2);
  if (v8 <= v23)
  {
    v20 = 0;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    *(_QWORD *)v26 = "operator[]";
    *(_WORD *)&v26[8] = 1024;
    *(_DWORD *)&v26[10] = 797;
    v27 = 2048;
    v28 = v7;
    v29 = 2048;
    v30 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  v9 = *((_QWORD *)v6 + 4);
  v10 = v9 + 248 * v23;
  v12 = *(unsigned __int8 *)(v10 + 57);
  v11 = (_BYTE *)(v10 + 57);
  if (v12 == 2
    || (v13 = *(_QWORD *)(v9 + 248 * v23 + 64),
        v13 != (re::ecs2::AnimationComponent::currentFrameCount(*((re::ecs2::AnimationComponent **)this + 2)) & 0xFFFFFFFFFFFFFFFLL)))
  {
    if (!(_BYTE)v20)
      goto LABEL_13;
    v3 = v21;
    v15 = *((_QWORD *)this + 24);
    if (v15 > v21)
    {
      v16 = *((_QWORD *)this + 26);
      if (*(unsigned __int8 *)(v16 + 144 * v21 + 89) == *(unsigned __int8 *)(v9 + 248 * v7 + 58))
      {
        re::AnimationController::time((re::AnimationController *)(v16 + 144 * v21 + 8), a3);
        return;
      }
LABEL_13:
      if ((_BYTE)v31)
      {
        switch(*v11)
        {
          case 0:
            v17 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
            if (!v17)
              goto LABEL_17;
            v18 = (*(double (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
            re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v18, (const re::ecs2::AnimationEntry *)(v9 + 248 * v7), (uint64_t)&v25);
            if (!(_BYTE)v25)
              goto LABEL_17;
            v14 = *(double *)(v9 + 248 * v7 + 80)
                + (*(double *)&v26[4] - *(double *)(v9 + 248 * v7 + 72)) * *(float *)(v9 + 248 * v7 + 140);
            break;
          case 1:
          case 3:
          case 5:
            v14 = *(double *)(v9 + 248 * v7 + 80);
            break;
          default:
            goto LABEL_17;
        }
        if (v14 <= *((double *)&v31 + 1))
        {
          *(_BYTE *)a3 = 1;
          goto LABEL_19;
        }
      }
LABEL_17:
      *(_BYTE *)a3 = 0;
      return;
    }
LABEL_25:
    v24 = 0;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    v19 = v15;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    *(_QWORD *)v26 = "operator[]";
    *(_WORD *)&v26[8] = 1024;
    *(_DWORD *)&v26[10] = 797;
    v27 = 2048;
    v28 = v3;
    v29 = 2048;
    v30 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_BYTE *)a3 = 1;
  v14 = *(double *)(v9 + 248 * v7 + 80);
LABEL_19:
  *(double *)(a3 + 8) = v14;
}

unint64_t re::ecs2::AnimationComponent::currentFrameCount(re::ecs2::AnimationComponent *this)
{
  re::ecs2::AnimationComponent *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!this)
    return 0xFFFFFFFFFFFFFFFLL;
  do
  {
    v1 = this;
    this = (re::ecs2::AnimationComponent *)*((_QWORD *)this + 3);
  }
  while (this);
  v2 = *((_QWORD *)v1 + 2);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 56)) != 0
    && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3),
        (v5 = re::ServiceLocator::serviceOrNull<re::FrameManager>(v4)) != 0))
  {
    return *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(v5 + 16) << 60);
  }
  else
  {
    return 0xFFFFFFFFFFFFFFFLL;
  }
}

void re::ecs2::AnimationComponent::setAnimationPlaybackTime(re::ecs2::AnimationComponent *this, unint64_t a2, double a3)
{
  re *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  re *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  _BYTE v16[8];
  unint64_t v17;
  uint64_t v18;
  uint8_t v19[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  uint8_t buf[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (v16[0])
  {
    v7 = v17;
    v8 = *((_QWORD *)this + 19);
    if (v8 <= v17)
    {
      v18 = 0;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v19 = 136315906;
      v20 = "operator[]";
      v21 = 1024;
      v22 = 789;
      v23 = 2048;
      v24 = v7;
      v25 = 2048;
      v26 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = *((_QWORD *)this + 21);
    v10 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v10)
    {
      v11 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v11, (const re::ecs2::AnimationEntry *)(v9 + 248 * v7), (uint64_t)buf);
      if (buf[0])
      {
        v11 = *(double *)&buf[8];
      }
      else
      {
        v14 = *re::ecsComponentsLogObjects(v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Animation setting playback time while desynchronized, possible inconsistent state.", v19, 2u);
        }
      }
      *(double *)(v9 + 248 * v7 + 72) = v11;
    }
    v15 = v9 + 248 * v7;
    *(double *)(v15 + 80) = a3;
    *((_DWORD *)this + 32) = 0;
    ++*(_BYTE *)(v15 + 58);
    *(_QWORD *)(v15 + 64) = re::ecs2::AnimationComponent::currentFrameCount(*((re::ecs2::AnimationComponent **)this + 2)) & 0xFFFFFFFFFFFFFFFLL;
  }
  else
  {
    v13 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Cannot set playback time for invalid animation token: %llu", buf, 0xCu);
    }
  }
}

uint64_t re::ecs2::AnimationComponent::animationPlaybackSpeed@<X0>(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  unint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19))
    v4 = (char *)this + 136;
  else
    v4 = (char *)this + 88;
  if (v9[0])
  {
    v6 = v10;
    v7 = *((_QWORD *)v4 + 2);
    if (v7 <= v10)
    {
      v11 = 0;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v12 = 136315906;
      v13 = "operator[]";
      v14 = 1024;
      v15 = 797;
      v16 = 2048;
      v17 = v6;
      v18 = 2048;
      v19 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = *((_QWORD *)v4 + 4) + 248 * v10;
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v8 + 140);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

BOOL re::ecs2::AnimationComponent::setAnimationPlaybackSpeed(re::ecs2::AnimationComponent *this, unint64_t a2, float a3)
{
  re *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  re *v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  _BYTE v18[8];
  double v19;
  _BYTE v20[8];
  unint64_t v21;
  uint64_t v22;
  uint8_t v23[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  uint8_t buf[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = v20[0];
  if (v20[0])
  {
    re::ecs2::AnimationComponent::animationPlaybackTime(this, a2, (uint64_t)v18);
    v8 = v21;
    v9 = *((_QWORD *)this + 19);
    if (v9 <= v21)
    {
      v22 = 0;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v10 = *((_QWORD *)this + 21);
    *(float *)(v10 + 248 * v21 + 140) = a3;
    *((_DWORD *)this + 32) = 0;
    v11 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v11)
    {
      v12 = (*(double (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
      re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v12, (const re::ecs2::AnimationEntry *)(v10 + 248 * v8), (uint64_t)buf);
      if (buf[0])
      {
        v12 = *(double *)&buf[8];
      }
      else
      {
        v15 = *re::ecsComponentsLogObjects(v13);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v23 = 0;
          _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Animation setting playback speed while desynchronized, possible inconsistent state.", v23, 2u);
        }
      }
      *(double *)(v10 + 248 * v8 + 72) = v12;
    }
    if (v18[0])
    {
      v16 = v19;
    }
    else
    {
      re::ecs2::AnimationComponent::animationDuration(this, a2, (_anonymous_namespace_ *)buf);
      v16 = *(double *)&buf[8];
      if (!buf[0])
        v16 = 0.0;
    }
    *(double *)(v10 + 248 * v8 + 80) = v16;
  }
  else
  {
    v14 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Cannot set playback speed for invalid animation token: %llu", buf, 0xCu);
    }
  }
  return v7 != 0;
}

uint64_t re::ecs2::AnimationComponent::animationBlendFactor@<X0>(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  unint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19))
    v4 = (char *)this + 136;
  else
    v4 = (char *)this + 88;
  if (v9[0])
  {
    v6 = v10;
    v7 = *((_QWORD *)v4 + 2);
    if (v7 <= v10)
    {
      v11 = 0;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v12 = 136315906;
      v13 = "operator[]";
      v14 = 1024;
      v15 = 797;
      v16 = 2048;
      v17 = v6;
      v18 = 2048;
      v19 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = *((_QWORD *)v4 + 4) + 248 * v10;
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v8 + 144);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

BOOL re::ecs2::AnimationComponent::setAnimationBlendFactor(re::ecs2::AnimationComponent *this, unint64_t a2, float a3)
{
  re *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  _BYTE v12[8];
  unint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7 = v12[0];
  if (v12[0])
  {
    v8 = v13;
    v9 = *((_QWORD *)this + 19);
    if (v9 <= v13)
    {
      v14 = 0;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v15 = 136315906;
      v16 = "operator[]";
      v17 = 1024;
      v18 = 789;
      v19 = 2048;
      v20 = v8;
      v21 = 2048;
      v22 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(float *)(*((_QWORD *)this + 21) + 248 * v13 + 144) = a3;
    *((_DWORD *)this + 32) = 0;
  }
  else
  {
    v10 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Cannot set blend factor for invalid animation token: %llu", buf, 0xCu);
    }
  }
  return v7 != 0;
}

void re::ecs2::AnimationComponent::animationParentTimebase(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[8];
  unint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19))
    v5 = (char *)this + 136;
  else
    v5 = (char *)this + 88;
  if (v8[0])
  {
    v6 = v9;
    v7 = *((_QWORD *)v5 + 2);
    if (v7 <= v9)
    {
      v10 = 0;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v11 = 136315906;
      v12 = "operator[]";
      v13 = 1024;
      v14 = 797;
      v15 = 2048;
      v16 = v6;
      v17 = 2048;
      v18 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::ecs2::AnimationEntry::parentTimebase((re::ecs2::AnimationEntry *)(*((_QWORD *)v5 + 4) + 248 * v9), *((re::ecs2::Entity **)this + 2), 0, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
  }
}

void re::ecs2::AnimationComponent::setAnimationParentTimebase(re::ecs2::AnimationComponent *this, unint64_t a2, OpaqueCMTimebase *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  re *v10;
  double Seconds;
  NSObject *v12;
  uint64_t v13;
  const void *v14;
  double *v15;
  const void *v16;
  CMTime time;
  _BYTE v18[8];
  unint64_t v19;
  uint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  _OWORD v29[5];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (v18[0])
  {
    v5 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v5)
    {
      v6 = v19;
      v7 = *((_QWORD *)this + 19);
      if (v7 <= v19)
      {
        v20 = 0;
        memset(v29, 0, sizeof(v29));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 789;
        v25 = 2048;
        v26 = v6;
        v27 = 2048;
        v28 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v8 = *((_QWORD *)this + 21);
      v9 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v9, (const re::ecs2::AnimationEntry *)(v8 + 248 * v6), (uint64_t)v29);
      Seconds = v9;
      if (a3)
      {
        CMTimebaseGetTime(&time, a3);
        Seconds = CMTimeGetSeconds(&time);
      }
      if (LOBYTE(v29[0]))
      {
        v9 = *((double *)v29 + 1);
      }
      else
      {
        v12 = *re::ecsComponentsLogObjects(v10);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Animation setting timebase while desynchronized, possible inconsistent state.", buf, 2u);
        }
      }
      v13 = v8 + 248 * v6;
      v16 = *(const void **)(v13 + 88);
      v15 = (double *)(v13 + 88);
      v14 = v16;
      *(v15 - 2) = Seconds - (v9 - *(v15 - 2));
      if (v16)
        CFRelease(v14);
      *(_QWORD *)v15 = a3;
      if (a3)
        CFRetain(a3);
      *((_DWORD *)this + 32) = 0;
    }
  }
}

uint64_t re::ecs2::AnimationComponent::shadowAnimationController(re::ecs2::AnimationComponent *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::Component *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  do
  {
    v5 = v2;
    v2 = *(_QWORD *)(v2 + 24);
  }
  while (v2);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  if (!*(_QWORD *)(v6 + 56))
    return 0;
  re::ecs2::AnimationComponent::initOwnershipState(this);
  re::ecs2::AnimationComponent::processFinishedAnimations(this, v7);
  re::ecs2::AnimationComponent::processDefaultTimebaseChanges(this);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 56) + 32))(*(_QWORD *)(v6 + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::AnimationService>(v8);
  re::ecs2::AnimationComponent::processActiveAnimations((uint64_t)this, v9);
  v10 = *((_QWORD *)this + 24);
  if (!v10)
    return 0;
  result = *((_QWORD *)this + 26) + 8;
  v12 = 144 * v10;
  while (*(_QWORD *)(result - 8) != a2)
  {
    result += 144;
    v12 -= 144;
    if (!v12)
      return 0;
  }
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::AnimationService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::AnimationService>(void)::info = re::introspect_AnimationService(0);
  }
  v3 = re::introspect<re::AnimationService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

unint64_t re::ecs2::AnimationComponent::animationEntry(re::ecs2::AnimationComponent *this, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  _BYTE v6[8];
  unint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 19))
    v2 = (char *)this + 136;
  else
    v2 = (char *)this + 88;
  if (!v6[0])
    return 0;
  v3 = v7;
  v4 = *((_QWORD *)v2 + 2);
  if (v4 <= v7)
  {
    v8 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v9 = 136315906;
    v10 = "operator[]";
    v11 = 1024;
    v12 = 797;
    v13 = 2048;
    v14 = v3;
    v15 = 2048;
    v16 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)v2 + 4) + 248 * v7;
}

_QWORD *re::ecs2::AnimationComponent::AnimationComponentEventDelegate::addEvent(uint64_t a1, char a2, re::AnimationController *this, uint64_t a4, double a5)
{
  _QWORD *result;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;

  result = (_QWORD *)re::AnimationController::userData(this);
  v10 = result;
  v11 = *(_DWORD *)(a4 + 60);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 48);
  if (v12 + 1 > 8 * v13)
  {
    result = re::BucketArray<re::GeomDeformerStack,8ul>::setBucketsCapacity((_QWORD *)(a1 + 40), (v12 + 8) >> 3);
    v13 = *(_QWORD *)(a1 + 48);
  }
  if (v13 <= v12 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    v14 = a1 + 64;
  else
    v14 = *(_QWORD *)(a1 + 72);
  v15 = a5;
  v16 = *(_QWORD *)(v14 + 8 * (v12 >> 3));
  ++*(_QWORD *)(a1 + 80);
  ++*(_DWORD *)(a1 + 88);
  v17 = v16 + 40 * (v12 & 7);
  *(_BYTE *)v17 = a2;
  *(_QWORD *)(v17 + 8) = v10;
  *(float *)(v17 + 16) = v15;
  *(_DWORD *)(v17 + 20) = v11;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  return result;
}

void re::ecs2::AnimationComponent::AnimationComponentEventDelegate::publishTimelineEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *WeakRetained;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  double v27;
  _QWORD *v28;
  double v29;
  float v30;
  _QWORD *v31;
  uint64_t v32;
  double v33;
  _QWORD *v34;
  const void *v35;
  void *Type;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::EventBus *v41;
  NSObject *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  const void *v46;
  uint64_t HasTimelineEvent;
  re::EventBus *v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  _QWORD *v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  double v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  re::EventBus *v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  re::EventBus *v71;
  uint8_t buf[8];
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  double v79;
  double v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v18 = WeakRetained;
    v19 = WeakRetained[1];
    if (v19)
    {
      v20 = (void *)(v19 + 8);
      v21 = (id)(v19 + 8);
      v22 = v19;
      do
      {
        v23 = v22;
        v22 = *(_QWORD *)(v22 + 24);
      }
      while (v22);
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
      {
        v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 56) + 32))(*(_QWORD *)(v24 + 56));
        v26 = (re *)re::ServiceLocator::serviceOrNull<re::Engine>(v25);
        if (v26)
        {
          if (*((_QWORD *)v26 + 172))
          {
            v71 = (re::EventBus *)*((_QWORD *)v26 + 172);
            if (a8)
              v27 = *(double *)(a8 + 40);
            else
              v27 = 0.0;
            v28 = *(_QWORD **)(a5 + 80);
            if (v28)
            {
              v29 = v27;
              v26 = v28 + 1;
              v27 = v29;
              v20 = (void *)(v19 + 8);
            }
            switch(a2)
            {
              case 5:
                v78 = 0;
                v76 = 0u;
                v77 = 0u;
                v74 = 0u;
                v75 = 0u;
                *(_QWORD *)buf = v19;
                v73 = a3;
                v30 = a9;
                *(float *)&v74 = v30;
                v31 = v28 + 3;
                *((_QWORD *)&v74 + 1) = v28[4];
                *(_QWORD *)&v75 = a6;
                *((_QWORD *)&v75 + 1) = v28 + 3;
                *(_QWORD *)&v76 = a7;
                if (*(_QWORD *)(a8 + 32))
                  v32 = a8;
                else
                  v32 = 0;
                *((_QWORD *)&v76 + 1) = v32;
                *(double *)&v77 = v27;
                *((_QWORD *)&v77 + 1) = *(_QWORD *)(a8 + 48);
                LOBYTE(v78) = *(_BYTE *)(a8 + 56);
                v33 = *(float *)(a8 + 8);
                v79 = *(double *)(a4 + 24);
                v80 = v33;
                v34 = v28;
                v35 = (const void *)(v28[3] >> 1);
                Type = re::EventBus::getTypeId<REAnimationHasTimelineEventStart>();
                re::EventBus::publish(v71, v19, (uint64_t)Type, (uint64_t)buf, 0x68uLL, v35);
                v37 = v19;
                do
                {
                  v38 = v37;
                  v37 = *(_QWORD *)(v37 + 24);
                }
                while (v37);
                if (*(_QWORD *)(v38 + 16))
                {
                  v39 = v19;
                  do
                  {
                    v40 = v39;
                    v39 = *(_QWORD *)(v39 + 24);
                  }
                  while (v39);
                  v41 = *(re::EventBus **)(*(_QWORD *)(v40 + 16) + 288);
                  if (v41)
                    re::EventBus::publish<re::ecs2::Entity,REAnimationHasTimelineEventStart>(v41, v19, (uint64_t)buf, (const void *)(*v31 >> 1));
                }
                goto LABEL_50;
              case 6:
                *(double *)&v74 = a9;
                v43 = v28[4];
                *(_QWORD *)&v76 = *(_QWORD *)(a4 + 24);
                v44 = *(float *)(a8 + 8);
                DWORD2(v76) = *(_DWORD *)(a8 + 4);
                *(_QWORD *)buf = v19;
                v73 = a3;
                *((_QWORD *)&v74 + 1) = v43;
                *(_QWORD *)&v75 = a6;
                *((_QWORD *)&v75 + 1) = v28 + 3;
                *(double *)&v77 = v44;
                if (*(_QWORD *)(a8 + 32))
                  v45 = a8;
                else
                  v45 = 0;
                *((_QWORD *)&v77 + 1) = v45;
                v78 = a7;
                v79 = v27;
                v80 = *(double *)(a8 + 48);
                v81 = *(_BYTE *)(a8 + 56);
                v34 = v28;
                v46 = (const void *)(v28[3] >> 1);
                HasTimelineEvent = re::EventBus::getTypeId<REAnimationHasTimelineEventUpdate>();
                v48 = v71;
                v49 = v19;
                v50 = 112;
                goto LABEL_41;
              case 7:
                v78 = 0;
                v76 = 0u;
                v77 = 0u;
                v74 = 0u;
                v75 = 0u;
                *(_QWORD *)buf = v19;
                v73 = a3;
                v51 = a9;
                *(float *)&v74 = v51;
                v52 = v28 + 3;
                *((_QWORD *)&v74 + 1) = v28[4];
                *(_QWORD *)&v75 = a6;
                *((_QWORD *)&v75 + 1) = v28 + 3;
                *(_QWORD *)&v76 = a7;
                v34 = v28;
                if (a8)
                {
                  if (*(_QWORD *)(a8 + 32))
                    v53 = a8;
                  else
                    v53 = 0;
                }
                else
                {
                  v53 = 0;
                }
                *((_QWORD *)&v76 + 1) = v53;
                *(double *)&v77 = v27;
                *((_QWORD *)&v77 + 1) = *(_QWORD *)(a8 + 48);
                LOBYTE(v78) = *(_BYTE *)(a8 + 56);
                v60 = (const void *)(*v52 >> 1);
                v61 = re::EventBus::getTypeId<REAnimationHasTimelineEventEnd>();
                re::EventBus::publish(v71, v19, v61, (uint64_t)buf, 0x58uLL, v60);
                v62 = v19;
                do
                {
                  v63 = v62;
                  v62 = *(_QWORD *)(v62 + 24);
                }
                while (v62);
                if (*(_QWORD *)(v63 + 16))
                {
                  v64 = v19;
                  do
                  {
                    v65 = v64;
                    v64 = *(_QWORD *)(v64 + 24);
                  }
                  while (v64);
                  v66 = *(re::EventBus **)(*(_QWORD *)(v65 + 16) + 288);
                  if (v66)
                  {
                    v67 = (const void *)(*v52 >> 1);
                    v68 = re::EventBus::getTypeId<REAnimationHasTimelineEventEnd>();
                    re::EventBus::publish(v66, v19, v68, (uint64_t)buf, 0x58uLL, v67);
                  }
                }
                goto LABEL_50;
              case 8:
                *(_QWORD *)buf = v19;
                v73 = a3;
                v54 = a9;
                *(float *)&v74 = v54;
                *((_QWORD *)&v74 + 1) = v28[4];
                *(_QWORD *)&v75 = *(_QWORD *)(a4 + 24);
                *((_QWORD *)&v75 + 1) = v28 + 3;
                *(_QWORD *)&v76 = a7;
                *((double *)&v76 + 1) = v27;
                v34 = v28;
                v46 = (const void *)(v28[3] >> 1);
                v55 = re::EventBus::getTypeId<REAnimationTimelineEventPause>();
                goto LABEL_36;
              case 9:
                *(_QWORD *)buf = v19;
                v73 = a3;
                v56 = a9;
                *(float *)&v74 = v56;
                *((_QWORD *)&v74 + 1) = v28[4];
                *(_QWORD *)&v75 = *(_QWORD *)(a4 + 24);
                *((_QWORD *)&v75 + 1) = v28 + 3;
                *(_QWORD *)&v76 = a7;
                *((double *)&v76 + 1) = v27;
                v34 = v28;
                v46 = (const void *)(v28[3] >> 1);
                v55 = re::EventBus::getTypeId<REAnimationTimelineEventResume>();
LABEL_36:
                HasTimelineEvent = v55;
                v48 = v71;
                v49 = v19;
                v50 = 64;
                goto LABEL_41;
              case 10:
                *(_QWORD *)buf = v19;
                v73 = a3;
                v57 = a9;
                *(float *)&v74 = v57;
                *((_QWORD *)&v74 + 1) = v28[4];
                *(_QWORD *)&v75 = a6;
                *((_QWORD *)&v75 + 1) = v28 + 3;
                *(_QWORD *)&v76 = a7;
                *((double *)&v76 + 1) = v27;
                *(_QWORD *)&v77 = *(_QWORD *)(a8 + 48);
                BYTE8(v77) = *(_BYTE *)(a8 + 56);
                v58 = *(float *)(a8 + 8);
                v78 = *(_QWORD *)(a4 + 24);
                v79 = v58;
                v34 = v28;
                v46 = (const void *)(v28[3] >> 1);
                HasTimelineEvent = re::EventBus::getTypeId<REAnimationTimelineEventSkipped>();
                v48 = v71;
                v49 = v19;
                v50 = 96;
                goto LABEL_41;
              case 11:
                *(_QWORD *)buf = v19;
                v73 = a3;
                *(_QWORD *)&v74 = v28[4];
                *((_QWORD *)&v74 + 1) = v28 + 3;
                *(_QWORD *)&v75 = a7;
                *((double *)&v75 + 1) = v27;
                v34 = v28;
                v46 = (const void *)(v28[3] >> 1);
                v59 = re::EventBus::getTypeId<REAnimationTimelineEventTerminated>();
                goto LABEL_40;
              case 12:
                *(_QWORD *)buf = v19;
                v73 = a3;
                *(_QWORD *)&v74 = v28[4];
                *((_QWORD *)&v74 + 1) = v28 + 3;
                *(_QWORD *)&v75 = a7;
                *((double *)&v75 + 1) = v27;
                v34 = v28;
                v46 = (const void *)(v28[3] >> 1);
                v59 = re::EventBus::getTypeId<REAnimationTimelineEventCreated>();
LABEL_40:
                HasTimelineEvent = v59;
                v48 = v71;
                v49 = v19;
                v50 = 48;
LABEL_41:
                re::EventBus::publish(v48, v49, HasTimelineEvent, (uint64_t)buf, v50, v46);
                goto LABEL_51;
              default:
                v34 = v28;
                v42 = *re::animationLogObjects(v26);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = a2;
                  _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, "Unexpected event state %d", buf, 8u);
                }
LABEL_50:
                if (v34)
LABEL_51:

                break;
            }
          }
        }
      }
      do
      {
        v69 = v19;
        v19 = *(_QWORD *)(v19 + 24);
      }
      while (v19);
      v70 = *(_QWORD *)(v69 + 16);
      if (v70)
        (*(void (**)(_QWORD))(**(_QWORD **)(v70 + 56) + 200))(*(_QWORD *)(v70 + 56));

    }
  }
}

uint64_t re::EventBus::publish<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::EventBus *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  void *Type;

  Type = re::EventBus::getTypeId<REAnimationHasTimelineEventStart>();
  return re::EventBus::publish(a1, a2, (uint64_t)Type, a3, 0x68uLL, a4);
}

uint64_t re::ecs2::AnimationComponent::setParentAnimation(re::ecs2::AnimationComponent *this, unint64_t a2, re::ecs2::Entity *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  unint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (v14[0])
  {
    if (a3)
      v8 = *((_QWORD *)a3 + 37);
    else
      v8 = 0;
    v9 = v15;
    v10 = *((_QWORD *)this + 19);
    if (v10 <= v15)
    {
      v16 = 0;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v17 = 136315906;
      v18 = "operator[]";
      v19 = 1024;
      v20 = 789;
      v21 = 2048;
      v22 = v9;
      v23 = 2048;
      v24 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v11 = *((_QWORD *)this + 21) + 248 * v15;
    v13 = *(unsigned __int8 *)(v11 + 152);
    v12 = v11 + 152;
    if (!v13)
      *(_BYTE *)v12 = 1;
    *(_QWORD *)(v12 + 8) = v8;
    *(_QWORD *)(v12 + 16) = a4;
    *((_DWORD *)this + 32) = 0;
  }
  return result;
}

void re::ecs2::AnimationComponent::AnimationComponentEventDelegate::publishEvents(id *this)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::EventBus *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  re::EventBus *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t HasTerminated;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  id v54;
  unint64_t i;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  WeakRetained = objc_loadWeakRetained(this + 4);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    if (!*((_DWORD *)this + 6))
    {
      *((_DWORD *)this + 6) = 1;
      v4 = WeakRetained[1];
      if (v4)
      {
        v5 = (id)(v4 + 8);
        v6 = v3[1];
        if (v6)
        {
          v7 = v3[1];
          do
          {
            v8 = v7;
            v7 = *(_QWORD *)(v7 + 24);
          }
          while (v7);
          if (*(_QWORD *)(v8 + 16))
          {
            do
            {
              v9 = v6;
              v6 = *(_QWORD *)(v6 + 24);
            }
            while (v6);
            v10 = *(re::EventBus **)(*(_QWORD *)(v9 + 16) + 288);
            if (v10)
              goto LABEL_79;
          }
        }
        v11 = v4;
        do
        {
          v12 = v11;
          v11 = *(_QWORD *)(v11 + 24);
        }
        while (v11);
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 56);
          if (v14)
          {
            v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
            v16 = re::ServiceLocator::serviceOrNull<re::Engine>(v15);
            if (v16)
            {
              v10 = *(re::EventBus **)(v16 + 1376);
              if (v10)
              {
LABEL_79:
                if (this[10])
                {
                  v17 = 0;
                  do
                  {
                    v18 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)(this + 5), v17);
                    v19 = v18;
                    switch(*(_BYTE *)v18)
                    {
                      case 1:
                        v20 = *(_QWORD *)(v18 + 8);
                        v59 = v4;
                        v60 = v20;
                        LOBYTE(v20) = atomic_load((unsigned __int8 *)&qword_255833FF0);
                        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_255833FF0))
                        {
                          qword_255833FE8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26REAnimationHasStartedEvent" & 0x7FFFFFFFFFFFFFFFLL), v40);
                          __cxa_guard_release(&qword_255833FF0);
                        }
                        re::EventBus::publish(v10, v4, qword_255833FE8, (uint64_t)&v59, 0x10uLL, 0);
                        v21 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v21;
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        LOBYTE(v21) = atomic_load((unsigned __int8 *)&qword_255834000);
                        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_255834000))
                        {
                          qword_255833FF8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24REAnimationDidStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v41);
                          __cxa_guard_release(&qword_255834000);
                        }
                        re::EventBus::publish(v10, v4, qword_255833FF8, (uint64_t)&v59, 0xCuLL, 0);
                        v22 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v22;
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        LOBYTE(v22) = atomic_load((unsigned __int8 *)&qword_255834010);
                        if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_255834010))
                        {
                          qword_255834008 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"21REAnimationStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v42);
                          __cxa_guard_release(&qword_255834010);
                        }
                        v23 = qword_255834008;
                        goto LABEL_37;
                      case 2:
                        v24 = *(_QWORD *)(v18 + 8);
                        v59 = v4;
                        v60 = v24;
                        LODWORD(v61) = *(_DWORD *)(v18 + 16);
                        LOBYTE(v24) = atomic_load((unsigned __int8 *)&qword_255834020);
                        if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255834020))
                        {
                          qword_255834018 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"28REAnimationHasCompletedEvent" & 0x7FFFFFFFFFFFFFFFLL), v43);
                          __cxa_guard_release(&qword_255834020);
                        }
                        re::EventBus::publish(v10, v4, qword_255834018, (uint64_t)&v59, 0x18uLL, 0);
                        v59 = *(_QWORD *)(v19 + 8);
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        v25 = atomic_load((unsigned __int8 *)&qword_255834030);
                        if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_255834030))
                        {
                          qword_255834028 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25REAnimationCompletedEvent" & 0x7FFFFFFFFFFFFFFFLL), v44);
                          __cxa_guard_release(&qword_255834030);
                        }
                        re::EventBus::publish(v10, v4, qword_255834028, (uint64_t)&v59, 0x10uLL, 0);
                        v26 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v26;
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        LOBYTE(v26) = atomic_load((unsigned __int8 *)&qword_255834040);
                        if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_255834040))
                        {
                          qword_255834038 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"27REAnimationDidCompleteEvent" & 0x7FFFFFFFFFFFFFFFLL), v45);
                          __cxa_guard_release(&qword_255834040);
                        }
                        re::EventBus::publish(v10, v4, qword_255834038, (uint64_t)&v59, 0xCuLL, 0);
                        v27 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v27;
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        LOBYTE(v27) = atomic_load((unsigned __int8 *)&qword_255834050);
                        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255834050))
                        {
                          qword_255834048 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24REAnimationCompleteEvent" & 0x7FFFFFFFFFFFFFFFLL), v46);
                          __cxa_guard_release(&qword_255834050);
                        }
                        v23 = qword_255834048;
                        goto LABEL_37;
                      case 3:
                        v28 = *(_QWORD *)(v18 + 8);
                        v59 = v4;
                        v60 = v28;
                        v61 = *(_QWORD *)(v18 + 16);
                        LOBYTE(v28) = atomic_load((unsigned __int8 *)&qword_255834060);
                        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_255834060))
                        {
                          qword_255834058 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25REAnimationHasLoopedEvent" & 0x7FFFFFFFFFFFFFFFLL), v47);
                          __cxa_guard_release(&qword_255834060);
                        }
                        re::EventBus::publish(v10, v4, qword_255834058, (uint64_t)&v59, 0x18uLL, 0);
                        v59 = *(_QWORD *)(v19 + 8);
                        v60 = *(_QWORD *)(v19 + 16);
                        v29 = atomic_load((unsigned __int8 *)&qword_255834070);
                        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_255834070))
                        {
                          qword_255834068 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"22REAnimationLoopedEvent" & 0x7FFFFFFFFFFFFFFFLL), v48);
                          __cxa_guard_release(&qword_255834070);
                        }
                        re::EventBus::publish(v10, v4, qword_255834068, (uint64_t)&v59, 0x10uLL, 0);
                        v30 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v30;
                        v60 = *(_QWORD *)(v19 + 16);
                        LOBYTE(v30) = atomic_load((unsigned __int8 *)&qword_255834080);
                        if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_255834080))
                        {
                          qword_255834078 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"23REAnimationDidLoopEvent" & 0x7FFFFFFFFFFFFFFFLL), v49);
                          __cxa_guard_release(&qword_255834080);
                        }
                        re::EventBus::publish(v10, v4, qword_255834078, (uint64_t)&v59, 0x10uLL, 0);
                        v31 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v31;
                        v60 = *(_QWORD *)(v19 + 16);
                        LOBYTE(v31) = atomic_load((unsigned __int8 *)&qword_255834090);
                        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_255834090))
                        {
                          qword_255834088 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"20REAnimationLoopEvent" & 0x7FFFFFFFFFFFFFFFLL), v50);
                          __cxa_guard_release(&qword_255834090);
                        }
                        v23 = qword_255834088;
                        v32 = v10;
                        v33 = v4;
                        v34 = 16;
                        goto LABEL_38;
                      case 4:
                        v35 = *(_QWORD *)(v18 + 8);
                        v59 = v4;
                        v60 = v35;
                        LODWORD(v61) = *(_DWORD *)(v18 + 16);
                        HasTerminated = re::EventBus::getTypeId<REAnimationHasTerminatedEvent>();
                        re::EventBus::publish(v10, v4, HasTerminated, (uint64_t)&v59, 0x18uLL, 0);
                        v59 = *(_QWORD *)(v19 + 8);
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        v37 = atomic_load((unsigned __int8 *)&qword_2558340B0);
                        if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_2558340B0))
                        {
                          qword_2558340A8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26REAnimationTerminatedEvent" & 0x7FFFFFFFFFFFFFFFLL), v51);
                          __cxa_guard_release(&qword_2558340B0);
                        }
                        re::EventBus::publish(v10, v4, qword_2558340A8, (uint64_t)&v59, 0x10uLL, 0);
                        v38 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v38;
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        LOBYTE(v38) = atomic_load((unsigned __int8 *)&qword_2558340C0);
                        if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_2558340C0))
                        {
                          qword_2558340B8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"28REAnimationDidTerminateEvent" & 0x7FFFFFFFFFFFFFFFLL), v52);
                          __cxa_guard_release(&qword_2558340C0);
                        }
                        re::EventBus::publish(v10, v4, qword_2558340B8, (uint64_t)&v59, 0xCuLL, 0);
                        v39 = *(_QWORD *)(v19 + 8);
                        LODWORD(v59) = 0;
                        HIDWORD(v59) = v39;
                        LODWORD(v60) = *(_DWORD *)(v19 + 16);
                        LOBYTE(v39) = atomic_load((unsigned __int8 *)&qword_2558340D0);
                        if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_2558340D0))
                        {
                          qword_2558340C8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25REAnimationTerminateEvent" & 0x7FFFFFFFFFFFFFFFLL), v53);
                          __cxa_guard_release(&qword_2558340D0);
                        }
                        v23 = qword_2558340C8;
LABEL_37:
                        v32 = v10;
                        v33 = v4;
                        v34 = 12;
LABEL_38:
                        re::EventBus::publish(v32, v33, v23, (uint64_t)&v59, v34, 0);
                        break;
                      default:
                        break;
                    }
                    ++v17;
                  }
                  while (v17 < (unint64_t)this[10]);
                }
              }
            }
          }
        }
      }
      v54 = this[10];
      if (v54)
      {
        for (i = 0; (id)i != v54; ++i)
        {
          v56 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)(this + 5), i);
          v57 = *(_QWORD *)(v56 + 24);
          if (v57)
          {
            v58 = v56;

            *(_QWORD *)(v58 + 24) = 0;
          }
        }
      }
      this[10] = 0;
      ++*((_DWORD *)this + 22);
      --*((_DWORD *)this + 6);
      if (v4)

    }
  }
}

uint64_t re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 40 * (a2 & 7);
}

BOOL re::ecs2::AnimationComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v28, a5, 0);
  v9 = v28;
  v10 = v29;
  v28 = a4;
  v29 = v9;
  v30 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
      v16 = *(unsigned __int8 **)v15;
      v17 = *(_QWORD *)(*(_QWORD *)v15 + 16);
      v18 = (unint64_t *)(a3 + 32);
      if (v17)
      {
        v19 = *(_QWORD *)(v17 + 200);
        if (v19 && (!*(_QWORD *)(v19 + 32) || RESyncableIsAuthoritative()))
        {
          v20 = v16[240] == 2;
        }
        else
        {
          v21 = *(_QWORD *)(a1 + 8);
          if (v21)
            v20 = (*(unsigned __int8 *)(v21 + 424) >> 4) & 1;
          else
            v20 = 0;
        }
        re::ecs2::AnimationComponent::initOwnershipState((re::ecs2::AnimationComponent *)v16);
        if (v16[240])
          v22 = v20 == 0;
        else
          v22 = 1;
        v18 = (unint64_t *)(a3 + 32);
        if (!v22)
        {
          re::ecs2::AnimationComponent::processDefaultTimebaseChanges((re::ecs2::AnimationComponent *)v16);
          v18 = (unint64_t *)(a3 + 40);
        }
      }
      v23 = v28;
      v24 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v29);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v23, v24, *v18);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
    }
    while (v29 != a5 || (unsigned __int16)v30 != 0xFFFF || WORD1(v30) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AnimationComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD *v17;
  re::ecs2::Component *v18;
  int active;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a3 + 8));
  if (result)
  {
    v9 = result;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
    v10 = v24;
    v11 = v25;
    v24 = a4;
    v25 = v10;
    v26 = v11;
    v12 = (unsigned __int16)v11;
    v13 = v11 & 0xFFFF0000;
    if (v10 != a5 || v12 != 0xFFFF || v13 != 4294901760)
    {
      do
      {
        v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
        v17 = *(_QWORD **)v16;
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 80) + 24);
        re::ecs2::AnimationComponent::processFinishedAnimations(v17, v18);
        active = re::ecs2::AnimationComponent::processActiveAnimations((uint64_t)v17, v9);
        v20 = v17[10];
        v21 = *(_DWORD *)(v20 + 24) - 1;
        *(_DWORD *)(v20 + 24) = v21;
        if (!v21 && *(_QWORD *)(v20 + 80))
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
        if (active)
        {
          v22 = v24;
          v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v25);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(_QWORD *)(a3 + 32));
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
      }
      while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  return result;
}

BOOL re::ecs2::AnimationComponentStateImplLegacy::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  v8 = v21;
  v9 = v22;
  v21 = a4;
  v22 = v8;
  v23 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22)
                      + 48);
      v15 = v21;
      v16 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      if (v14)
        v17 = 40;
      else
        v17 = 32;
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v15, v16, *(_QWORD *)(a3 + v17));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AnimationComponentStateImplLegacy::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v11;
  double v12;
  re *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *Timeline;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  re::AnimationController *v27;
  uint64_t v28;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[4];
  __int128 v34;
  uint64_t v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  _OWORD v44[5];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a3 + 8));
  if (result)
  {
    v8 = result;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v44, a5, 0);
    v33[3] = a4;
    v34 = v44[0];
    if (*(_QWORD *)&v44[0] != a5 || WORD4(v44[0]) != 0xFFFFLL || (DWORD2(v44[0]) & 0xFFFF0000) != 4294901760)
    {
      do
      {
        v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
        v13 = *(re **)v11;
        v14 = *(_QWORD *)(*(_QWORD *)v11 + 16);
        if (v14)
        {
          if ((*(_BYTE *)(v14 + 288) & 1) != 0)
          {
            v15 = *((_QWORD *)v13 + 6);
            if (v15)
            {
              v16 = 0;
              for (i = 0; i != v15; ++i)
              {
                v18 = *((_QWORD *)v13 + 6);
                if (v18 <= i)
                {
                  v35 = 0;
                  memset(v44, 0, sizeof(v44));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v36 = 136315906;
                  v37 = "operator[]";
                  v38 = 1024;
                  v39 = 789;
                  v40 = 2048;
                  v41 = i;
                  v42 = 2048;
                  v43 = v18;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                v19 = *((_QWORD *)v13 + 8);
                v20 = v19 + v16;
                v21 = *(unsigned __int8 *)(v19 + v16 + 25);
                if (v21 == 2)
                {
                  LODWORD(v12) = *(_DWORD *)(v20 + 36);
                  v12 = re::AnimationController::stop((re::AnimationController *)(v20 + 56), v12);
                  *(_BYTE *)(v20 + 25) = 0;
                }
                else if (v21 == 1)
                {
                  v22 = v19 + v16;
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(v19 + v16));
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
                  if (Timeline)
                  {
                    v24 = *(_OWORD *)(v22 + 32);
                    v32 = *(_QWORD *)(v22 + 48);
                    v31 = v24;
                    v25 = (*(uint64_t (**)(uint64_t, _QWORD *, _OWORD *, __int128 *, uint64_t, _QWORD *))(*(_QWORD *)v8 + 72))(v8, Timeline, v44, &v31, 4, (_QWORD *)v13 + 10);
                    *(_QWORD *)(v22 + 56) = v25;
                    *(_QWORD *)(v22 + 64) = v26;
                    v27 = (re::AnimationController *)(v22 + 56);
                    if (v25)
                    {
                      v28 = re::DataArray<re::internal::TimelineTree>::tryGet(v25 + (v26 >> 56 << 6) + 72, v26);
                      if (v28)
                        *(_QWORD *)(v28 + 168) = i;
                    }
                    re::AnimationController::updateAndApply(v27);
                    *(_BYTE *)(v20 + 25) = 0;
                    v12 = re::BindNode::deinit((re::BindNode *)v44);
                  }
                }
                v16 += 72;
              }
            }
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v34);
      }
      while ((_QWORD)v34 != a5 || WORD4(v34) != 0xFFFF || WORD5(v34) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  return result;
}

_QWORD *`anonymous namespace'::getTimeline(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;

  v1 = result[1];
  if (!v1)
    return 0;
  v2 = result;
  v3 = atomic_load((unsigned int *)(v1 + 704));
  if (v3 != 2)
    goto LABEL_10;
  v4 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  v5 = (uint64_t *)v2[1];
  if (v5)
    v5 = (uint64_t *)v5[33];
  if (v4 != v5)
  {
    v6 = re::TimelineAsset::assetType((re::TimelineAsset *)v4);
    v8 = *(uint64_t **)(v2[1] + 264);
    if (v6 != v8)
    {
      re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Unknown timeline asset handle type: %s", "!\"Unreachable code\"", "getTimeline", 112, *v8);
      result = (_QWORD *)_os_crash();
      __break(1u);
      return result;
    }
    result = v2;
    goto LABEL_8;
  }
  result = (_QWORD *)re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)v2);
  if (!result)
    return result;
  v9 = result[1];
  if (!v9)
    return 0;
  v10 = atomic_load((unsigned int *)(v9 + 704));
  if (v10 != 2)
  {
LABEL_10:
    re::AssetHandle::loadAsync((re::AssetHandle *)result);
    return 0;
  }
LABEL_8:
  result = (_QWORD *)re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)result);
  if (result)
    return (_QWORD *)result[2];
  return result;
}

void `anonymous namespace'::getAnimationTarget(uint64_t a1, re *this, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3 == 2)
  {
    v3 = *((_QWORD *)this + 2);
    do
    {
      v4 = v3;
      v3 = *(_QWORD *)(v3 + 24);
    }
    while (v3);
    re::makeBindNode(*(_anonymous_namespace_ **)(*(_QWORD *)(v4 + 16) + 56), a1);
  }
  else if (a3 == 1)
  {
    v5 = *((_QWORD *)this + 2);
    do
    {
      v6 = v5;
      v5 = *(_QWORD *)(v5 + 24);
    }
    while (v5);
    re::makeBindNode(*(re **)(v6 + 16), a1);
  }
  else if (a3)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)this, "assertion failure: '%s' (%s:line %i) Invalid animation component target.", "!\"Unreachable code\"", "getAnimationTarget", 69);
    _os_crash();
    __break(1u);
  }
  else
  {
    re::makeEntityBindNodeForComponent(this, a1);
  }
}

void re::ecs2::AnimationSystem::willAddSceneToECSService(re::ecs2::AnimationSystem *this, re::EventBus **a2)
{
  re::EventBus *v3;
  void *v4;
  __objc2_class_ro *Type;
  re *EventInfo;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t HasTerminated;
  unint64_t v25;
  re *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  re::ecs2::Scene *v37;
  _BYTE v38[24];
  uint64_t v39;
  _BYTE *v40;
  _BYTE v41[24];
  uint64_t v42;
  re *v43;
  _BYTE v44[24];
  uint64_t v45;
  _BYTE *v46;
  uint64_t (**v47)();
  _QWORD v48[5];
  uint64_t v49;
  uint64_t (***v50)();
  _QWORD v51[3];
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v37 = (re::ecs2::Scene *)a2;
  v3 = a2[36];
  if (v3)
  {
    v31[0] = 0;
    v31[1] = 0;
    v32 = 1;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    v36 = 0;
    v4 = re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    Type = re::EventBus::getTypeId<REComponentDidActivateEvent>();
    EventInfo = (re *)re::EventBus::addOrGetEventInfo(v3, (uint64_t)Type);
    v7 = re::globalAllocators(EventInfo)[2];
    v51[0] = &off_24ED6F098;
    v52 = v7;
    v53 = v51;
    re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>((uint64_t)v51, 0, &v47);
    v8 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)&v47, 0, (uint64_t)v4);
    v10 = v9;
    if (v50)
    {
      ((void (*)(uint64_t (***)()))**v50)(v50);
      if (v50 != &v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
      v50 = 0;
    }
    if (v53)
    {
      (*(void (**)(_QWORD *))*v53)(v53);
      if (v53 != v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
    }
    v11 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    *v11 = v8;
    v11[1] = v10;
    v14 = v13;
    v15 = (re *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    *(_QWORD *)v15 = v12;
    *((_QWORD *)v15 + 1) = v14;
    v42 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 32, 0);
    *(_QWORD *)v16 = &off_24ED6EB28;
    *((_QWORD *)v16 + 1) = this;
    *((_QWORD *)v16 + 2) = re::ecs2::AnimationSystem::willRemoveComponentHandler;
    *((_QWORD *)v16 + 3) = 0;
    v43 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, (uint64_t)v41, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    *v20 = v17;
    v20[1] = v19;
    v21 = v43;
    if (v43)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v43)(v43);
      if (v43 != (re *)v41)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      v43 = 0;
    }
    v22 = re::globalAllocators(v21)[2];
    v39 = v22;
    v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 32, 0);
    *v23 = &off_24ED6EB80;
    v23[1] = this;
    v23[2] = re::ecs2::AnimationSystem::animationTerminatedHandler;
    v23[3] = 0;
    v40 = v23;
    v45 = v22;
    v46 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v44, (uint64_t)v38);
    HasTerminated = re::EventBus::getTypeId<REAnimationHasTerminatedEvent>();
    v25 = re::EventBus::addOrGetEventInfo(v3, HasTerminated);
    v52 = v45;
    v53 = 0;
    v26 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v51, (uint64_t)v44);
    v49 = re::globalAllocators(v26)[2];
    v50 = 0;
    v47 = &off_24ED6EC40;
    v48[3] = v52;
    v48[4] = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v48, (uint64_t)v51);
    v50 = &v47;
    if (v53)
    {
      (*(void (**)(_QWORD *))*v53)(v53);
      if (v53 != v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
    }
    v27 = re::EventBus::EventInfo::addSubscription(v25, (uint64_t)&v47, 0, 0);
    v29 = v28;
    if (v50)
    {
      ((void (*)(uint64_t (***)()))**v50)(v50);
      if (v50 != &v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
    }
    if (v46)
    {
      (**(void (***)(_BYTE *))v46)(v46);
      if (v46 != v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
    }
    v30 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    *v30 = v27;
    v30[1] = v29;
    if (v40)
    {
      (**(void (***)(_BYTE *))v40)(v40);
      if (v40 != v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
      v40 = 0;
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v37, (uint64_t)v31);
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v31);
    if (v31[0] && (v32 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
    a2 = (re::EventBus **)v37;
  }
  re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::addScene((uint64_t)this + 240, (uint64_t)a2);
  re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::addScene((uint64_t)this + 496, (uint64_t)v37);
}

uint64_t `anonymous namespace'::activateComponent(uint64_t a1)
{
  re::ecs2::AnimationComponent *v1;
  re::ecs2::AnimationComponent *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  re *v11;
  double v12;
  NSObject *v13;
  _BOOL4 v14;
  __int16 v16[8];
  char v17[8];
  double v18;

  v1 = (re::ecs2::AnimationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v1)
  {
    v2 = v1;
    if (*((_BYTE *)v1 + 240) == 2)
    {
      v3 = re::ecs2::AnimationComponent::parentSimulationTimer(v1);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
        v5 = *((_QWORD *)v2 + 19);
        if (v5)
        {
          v6 = v4;
          v7 = *((_QWORD *)v2 + 21);
          v8 = 248 * v5;
          do
          {
            v9 = *(unsigned __int8 *)(v7 + 57);
            if (v9 == 5 || v9 == 3)
            {
              *(_BYTE *)(v7 + 57) = 0;
              re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)v2, v6, (const re::ecs2::AnimationEntry *)v7, (uint64_t)v17);
              if (v17[0])
              {
                v12 = v18;
              }
              else
              {
                v13 = *re::ecsComponentsLogObjects(v11);
                v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
                v12 = v6;
                if (v14)
                {
                  v16[0] = 0;
                  _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Animation activated while desynchronized, possible inconsistent state.", (uint8_t *)v16, 2u);
                  v12 = v6;
                }
              }
              *(double *)(v7 + 72) = v12;
              *((_DWORD *)v2 + 32) = 0;
            }
            v7 += 248;
            v8 -= 248;
          }
          while (v8);
        }
      }
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::deactivateComponent(uint64_t a1)
{
  re::ecs2::AnimationComponent *v1;

  v1 = (re::ecs2::AnimationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v1)
    re::ecs2::AnimationComponent::pauseAnimationsForDeactivation(v1);
  return 0;
}

uint64_t re::ecs2::AnimationSystem::willRemoveComponentHandler(uint64_t a1, uint64_t a2)
{
  re::ecs2::AnimationComponent *v2;

  v2 = (re::ecs2::AnimationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
    re::ecs2::AnimationComponent::detachAnimations(v2);
  return 0;
}

uint64_t re::ecs2::AnimationSystem::animationTerminatedHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::NetworkComponent *v4;
  re::ecs2::NetworkComponent *v5;
  unint64_t v6;
  re::ecs2::Component *v7;

  v4 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    v5 = v4;
    if (*((_BYTE *)v4 + 240) == 2)
    {
      v6 = re::ecs2::AnimationComponent::animationEntry(v4, *(_QWORD *)(a3 + 8));
      if (v6)
      {
        if (*(_BYTE *)(v6 + 57) != 5)
        {
          re::ecs2::AnimationComponent::stop((uint64_t)v5, *(_QWORD *)(a3 + 8), 0.0);
          re::ecs2::NetworkComponent::markComponentDirty(v5, v7);
          re::ecs2::Component::markDirty(v5);
        }
      }
    }
  }
  return 0;
}

void re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  _OWORD v65[5];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v56[0] = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    v14 = a1 + 168;
    v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  v55 = 0u;
  v48 = 0u;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = -1;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v53 = 1;
  v54 = 0uLL;
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v55 = 0;
  v17 = *(_QWORD *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v16 + 4) >> 2);
    v17 = *(_QWORD *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 858;
    v61 = 2048;
    v62 = v16 >> 2;
    v63 = 2048;
    v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v18 + 8 * (v16 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v48;
  v22 = v49;
  v23 = v50;
  *(_QWORD *)(v20 + 48) = v51;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  v25 = *(_QWORD *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::init(v26, a1, v56[0]);
  *(_QWORD *)&v65[0] = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 160);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 160) = v27;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v32 = a1 + 144;
    else
      v32 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v30;
  }
  v33 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 208);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *(_QWORD *)(a1 + 208) = v33;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v38 = a1 + 192;
    else
      v38 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v38 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v36;
  }
  v15 = *(_QWORD *)&v65[0];
  v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v39 = *(_QWORD *)(a1 + 176);
  v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)(a1 + 192);
    else
      v41 = *(_QWORD **)(a1 + 200);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        return;
    }
LABEL_65:
    v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
    return;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)(a1 + 192);
    if (!v39)
      return;
  }
  else
  {
    v42 = *(uint64_t **)(a1 + 200);
    if (!v39)
      return;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
    goto LABEL_65;
}

int8x16_t re::ecs2::AnimationSystem::willAddSystemToECSService(re::ecs2::AnimationSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  re *v4;
  re::EventBus *v5;
  _QWORD *v6;
  uint64_t v7;
  int8x16_t result;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 25) = re::ServiceLocator::serviceOrNull<re::ecs2::AnimationSceneService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v4 = (re *)re::ServiceLocator::serviceOrNull<re::Engine>(v3);
  *((_QWORD *)this + 26) = v4;
  v5 = (re::EventBus *)*((_QWORD *)v4 + 172);
  if (v5)
  {
    v10 = re::globalAllocators(v4)[2];
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 32, 0);
    *v6 = &off_24ED6EBE8;
    v6[1] = this;
    v6[2] = re::ecs2::AnimationSystem::sceneWillRemoveHandler;
    v6[3] = 0;
    v11 = v6;
    *((_QWORD *)this + 19) = re::EventBus::subscribe<re::ecs2::Scene,RESceneWillRemoveEvent>(v5, (uint64_t)v9, 0, 0);
    *((_QWORD *)this + 20) = v7;
    if (v11)
    {
      (**(void (***)(_BYTE *))v11)(v11);
      if (v11 != v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
  }
  result = *(int8x16_t *)((char *)this + 200);
  *((int8x16_t *)this + 14) = vextq_s8(result, result, 8uLL);
  *((_QWORD *)this + 61) = result.i64[0];
  return result;
}

uint64_t re::ecs2::AnimationSystem::sceneWillRemoveHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::AnimationComponent **v4;
  uint64_t v5;
  re::ecs2::AnimationComponent *v6;

  v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(re::ecs2::AnimationComponent ***)(v2 + 40);
      v5 = 8 * v3;
      do
      {
        v6 = *v4++;
        re::ecs2::AnimationComponent::detachAnimations(v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::AnimationSystem::willRemoveSceneFromECSService(re::ecs2::AnimationSystem *this, re::ecs2::Scene *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  re::ecs2::Scene *v11;

  v11 = a2;
  v3 = (char *)this + 104;
  v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v11);
  if (v4)
  {
    v5 = *((_QWORD *)v11 + 36);
    if (v5)
    {
      v6 = v4;
      v7 = *(_QWORD *)(v4 + 40);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v9 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v6, i);
          re::EventBus::unsubscribe(v5, *(_QWORD *)v9, *(_QWORD *)(v9 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v11);
  }
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 240, (uint64_t)v11);
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 496, (uint64_t)v11);
}

uint64_t re::ecs2::AnimationSystem::willRemoveSystemFromECSService(re::ecs2::AnimationSystem *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 26) + 1376);
  if (result)
    result = re::EventBus::unsubscribe(result, *((_QWORD *)this + 19), *((_QWORD *)this + 20));
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  return result;
}

uint64_t re::ecs2::AnimationSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17[2];
  _QWORD v18[2];

  v18[0] = a3;
  v18[1] = a4;
  if (a2)
  {
    if ((a3 & 0xFF00000000) == 0)
    {
      v4 = result;
      if (*(_QWORD *)(result + 200))
      {
        v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v17);
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
        if ((_DWORD)isStatisticCollectionEnabled)
        {
          v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
          v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
          v11 = *(int64x2_t **)(v8 + 152);
          if (v11)
          {
            v12 = v11[432].u64[0];
            if (v12 >= v10)
              v12 = v10;
            v11[432].i64[0] = v12;
            v13 = v11[432].u64[1];
            if (v13 <= v10)
              v13 = v10;
            v11[432].i64[1] = v13;
            v14 = vdupq_n_s64(1uLL);
            v14.i64[0] = v10;
            v11[433] = vaddq_s64(v11[433], v14);
            *(_BYTE *)(v8 + 184) = 0;
          }
        }
        re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v16, 3029, v4);
        re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(v4 + 240, a2, (uint64_t)v18);
        v15 = *(_QWORD *)(v4 + 208);
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 424) & 0x10) != 0)
            re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(v4 + 496, a2, (uint64_t)v18);
        }
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v16);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v17);
      }
    }
  }
  return result;
}

void re::ecs2::introspect_AnimationComponentTarget(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_255833EE8);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_255833EE8);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Entity";
      qword_255834108 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Scene";
      qword_255834110 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Service";
      qword_255834118 = v32;
      __cxa_guard_release(&qword_255833EE8);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255833EF0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255833EF0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2558342A8, "AnimationComponentTarget", 1, 1, 1, 1);
    qword_2558342A8 = (uint64_t)&off_24ED7D9E8;
    qword_2558342E8 = (uint64_t)&re::ecs2::introspect_AnimationComponentTarget(BOOL)::enumTable;
    dword_2558342B8 = 9;
    __cxa_guard_release(&qword_255833EF0);
  }
  if ((_MergedGlobals_416 & 1) == 0)
  {
    _MergedGlobals_416 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558342A8, a2);
    v34 = 0xC1A027EF051A1D4;
    v35 = "AnimationComponentTarget";
    v38[0] = 6104748;
    v38[1] = "char";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_2558342E8;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_2558342C8 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnimationComponentTarget", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::AnimationComponentEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_WORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 44) = 0x80000000;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = &str_240;
}

void re::internal::defaultDestruct<re::ecs2::AnimationComponentEntry>(double a1, uint64_t a2, uint64_t a3, re::ecs2::AnimationComponentEntry *a4)
{
  re::ecs2::AnimationComponentEntry::~AnimationComponentEntry(a4, a1);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::AnimationComponentEntry>(uint64_t result)
{
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_WORD *)(result + 24) = 0;
  *(_DWORD *)(result + 44) = 0x80000000;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = &str_240;
  return result;
}

void re::internal::defaultConstruct<re::ecs2::ExternalAnimationEntry>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::ExternalAnimationEntry>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

re::ecs2::AnimationEntry *re::internal::defaultConstruct<re::ecs2::AnimationEntry>(int a1, int a2, re::ecs2::AnimationEntry *this)
{
  return re::ecs2::AnimationEntry::AnimationEntry(this);
}

void re::internal::defaultDestruct<re::ecs2::AnimationEntry>(uint64_t a1, uint64_t a2, id *a3)
{
  re::ecs2::AnimationEntry::~AnimationEntry(a3);
}

uint64_t *re::ecs2::allocInfo_AnimationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255833F68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255833F68))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834560, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_255834570 = 0;
    qword_255834580 = 0;
    qword_255834588 = 0xFFFFFFFFLL;
    qword_255834560 = (uint64_t)&off_24ED7DAA8;
    qword_255834590 = (uint64_t)"AnimationComponent";
    dword_255834598 = 0;
    xmmword_2558345A0 = 0u;
    xmmword_2558345B0 = 0u;
    xmmword_2558345C0 = 0u;
    qword_2558345D0 = 0;
    __cxa_guard_release(&qword_255833F68);
  }
  return &qword_255834560;
}

void re::ecs2::initInfo_AnimationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v2;
  const re::IntrospectionBase *v4;
  unsigned __int8 v5;
  re *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t *v12;
  char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  const re::IntrospectionBase *v16;
  unsigned __int8 v17;
  int v18;
  re::IntrospectionRegistry *v19;
  const re::IntrospectionBase *v20;
  const char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  re::IntrospectionRegistry *v39;
  const re::IntrospectionBase *v40;
  const char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  re *v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  const re::IntrospectionBase *v59;
  uint64_t v60;
  const re::IntrospectionBase *v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  char **v64;
  char *v65;
  unsigned int *v66;
  _anonymous_namespace_ *v67;
  unint64_t v68;
  unint64_t i;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char v73;
  unsigned __int8 *v74;
  int v75;
  uint64_t v76;
  unint64_t j;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unsigned __int8 *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  re *v91;
  uint64_t *v92;
  const re::IntrospectionBase *v93;
  void *v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  re::IntrospectionRegistry *v98;
  const re::IntrospectionBase *v99;
  const char *v100;
  StringID v101;
  uint64_t v102;
  uint64_t *v103;
  const re::IntrospectionBase *v104;
  uint64_t v105;
  const re::IntrospectionBase *v106;
  uint64_t *v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  char **v110;
  char *v111;
  unsigned int *v112;
  _anonymous_namespace_ *v113;
  unint64_t v114;
  unint64_t k;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  unint64_t m;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char v127;
  unsigned __int8 *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  const re::IntrospectionBase *v134;
  void *v135;
  uint64_t v136;
  uint64_t *v137;
  const re::IntrospectionBase *v138;
  void *v139;
  uint64_t v140;
  uint64_t *v141;
  const re::IntrospectionBase *v142;
  void *v143;
  uint64_t v144;
  uint64_t *v145;
  const re::IntrospectionBase *v146;
  void *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  const re::IntrospectionBase *v153;
  void *v154;
  uint64_t v155;
  uint64_t *v156;
  const re::IntrospectionBase *v157;
  void *v158;
  uint64_t v159;
  uint64_t *v160;
  const re::IntrospectionBase *v161;
  void *v162;
  uint64_t v163;
  uint64_t *v164;
  const re::IntrospectionBase *v165;
  void *v166;
  uint64_t v167;
  uint64_t *v168;
  const re::IntrospectionBase *v169;
  void *v170;
  uint64_t v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  const re::IntrospectionBase *v174;
  unsigned __int8 v175;
  re::IntrospectionRegistry *v176;
  const re::IntrospectionBase *v177;
  const char *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  re *v183;
  uint64_t *v184;
  re *v185;
  uint64_t *v186;
  re *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  re *v191;
  uint64_t *v192;
  re *v193;
  uint64_t *v194;
  re *v195;
  uint64_t *v196;
  re *v197;
  uint64_t *v198;
  re *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  re *v205;
  uint64_t *v206;
  const re::IntrospectionBase *v207;
  uint64_t v208;
  uint64_t *v209;
  const re::IntrospectionBase *v210;
  uint64_t v211;
  int v212;
  uint64_t *v213;
  void *v214;
  void *v215;
  uint64_t *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  StringID v222;
  char *__s1[2];
  __int128 v224;
  const char *v225;

  *(_QWORD *)&v224 = 0x3B8DF49FA88D23F2;
  *((_QWORD *)&v224 + 1) = "AnimationComponent";
  re::StringID::destroyString((re::StringID *)&v224);
  *((_OWORD *)this + 2) = v218;
  v5 = atomic_load((unsigned __int8 *)&qword_255833F60);
  if ((v5 & 1) == 0)
  {
    v6 = (re *)__cxa_guard_acquire(&qword_255833F60);
    if ((_DWORD)v6)
    {
      v7 = re::introspectionAllocator(v6);
      v8 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "Component";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_255834180 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v11 = atomic_load((unsigned __int8 *)&qword_2558340E8);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2558340E8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834228, 0);
        *(_QWORD *)(v50 + 22) = 0;
        qword_255834238 = 0;
        *(_QWORD *)&xmmword_255834248 = 0;
        *((_QWORD *)&xmmword_255834248 + 1) = 0xFFFFFFFFLL;
        qword_255834228 = (uint64_t)&off_24ED1FA08;
        qword_255834260 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_255834258);
        qword_255834228 = (uint64_t)&off_24ED6EE78;
        __cxa_guard_release(&qword_2558340E8);
      }
      if ((byte_255833EE5 & 1) == 0)
      {
        v12 = (uint64_t *)qword_255833F28;
        v13 = &byte_255833EE5;
        if (qword_255833F28)
          goto LABEL_10;
        v14 = atomic_load((unsigned __int8 *)&qword_255833F18);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255833F18))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834380, 0);
          *(_QWORD *)(v52 + 22) = 0;
          qword_255834390 = 0;
          *(_QWORD *)&xmmword_2558343A0 = 0;
          *((_QWORD *)&xmmword_2558343A0 + 1) = 0xFFFFFFFFLL;
          qword_255834380 = (uint64_t)&off_24ED7DAA8;
          qword_2558343B0 = (uint64_t)"AnimationComponentEntry";
          dword_2558343B8 = 0;
          xmmword_2558343C0 = 0u;
          xmmword_2558343D0 = 0u;
          xmmword_2558343E0 = 0u;
          qword_2558343F0 = 0;
          __cxa_guard_release(&qword_255833F18);
        }
        qword_255833F28 = (uint64_t)&qword_255834380;
        *(_QWORD *)&v224 = 0x637CB5C20625B3F2;
        *((_QWORD *)&v224 + 1) = "AnimationComponentEntry";
        v15 = 8;
        re::StringID::destroyString((re::StringID *)&v224);
        xmmword_2558343A0 = v220;
        v17 = atomic_load((unsigned __int8 *)&qword_255833F20);
        if ((v17 & 1) == 0)
        {
          v53 = (re *)__cxa_guard_acquire(&qword_255833F20);
          if ((_DWORD)v53)
          {
            v54 = re::introspectionAllocator(v53);
            v56 = re::introspect_AssetHandle((re *)1, v55);
            v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
            *(_DWORD *)v57 = 1;
            *(_QWORD *)(v57 + 8) = "timeline";
            *(_QWORD *)(v57 + 16) = v56;
            *(_QWORD *)(v57 + 24) = 0;
            *(_QWORD *)(v57 + 32) = 1;
            *(_DWORD *)(v57 + 40) = 0;
            *(_QWORD *)(v57 + 48) = 0;
            *(_QWORD *)(v57 + 56) = 0;
            *(_DWORD *)(v57 + 64) = 0;
            qword_255834138 = v57;
            v58 = re::introspectionAllocator((re *)v57);
            re::ecs2::introspect_AnimationComponentTarget((re::ecs2 *)v58, v59);
            v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
            *(_DWORD *)v60 = 1;
            *(_QWORD *)(v60 + 8) = "target";
            *(_QWORD *)(v60 + 16) = &qword_2558342A8;
            *(_QWORD *)(v60 + 24) = 0;
            *(_QWORD *)(v60 + 32) = 0x1800000002;
            *(_DWORD *)(v60 + 40) = 0;
            *(_QWORD *)(v60 + 48) = 0;
            *(_QWORD *)(v60 + 56) = 0;
            *(_DWORD *)(v60 + 64) = 0;
            qword_255834140 = v60;
            v33 = re::introspectionAllocator((re *)v60);
            v62 = atomic_load((unsigned __int8 *)&qword_255833EF8);
            if ((v62 & 1) == 0)
            {
              v183 = (re *)__cxa_guard_acquire(&qword_255833EF8);
              if ((_DWORD)v183)
              {
                v184 = re::introspectionAllocator(v183);
                v185 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v184 + 32))(v184, 24, 8);
                *(_DWORD *)v185 = 1;
                *((_QWORD *)v185 + 1) = 0;
                *((_QWORD *)v185 + 2) = "None";
                qword_255834120 = (uint64_t)v185;
                v186 = re::introspectionAllocator(v185);
                v187 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v186 + 32))(v186, 24, 8);
                *(_DWORD *)v187 = 1;
                *((_QWORD *)v187 + 1) = 1;
                *((_QWORD *)v187 + 2) = "Start";
                qword_255834128 = (uint64_t)v187;
                v188 = re::introspectionAllocator(v187);
                v189 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v188 + 32))(v188, 24, 8);
                *(_DWORD *)v189 = 1;
                *(_QWORD *)(v189 + 8) = 2;
                *(_QWORD *)(v189 + 16) = "Stop";
                qword_255834130 = v189;
                __cxa_guard_release(&qword_255833EF8);
              }
            }
            v63 = atomic_load((unsigned __int8 *)&qword_255833F00);
            if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_255833F00))
            {
              re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2558342F0, "AnimationComponentRequest", 1, 1, 1, 1);
              qword_2558342F0 = (uint64_t)&off_24ED7D9E8;
              qword_255834330 = (uint64_t)&_MergedGlobals_10;
              dword_255834300 = 9;
              __cxa_guard_release(&qword_255833F00);
            }
            if ((byte_255833EE1 & 1) == 0)
            {
              byte_255833EE1 = 1;
              re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558342F0, v61);
              *(_QWORD *)&v221 = 0x77264D5E53E0FCACLL;
              *((_QWORD *)&v221 + 1) = "AnimationComponentRequest";
              *(_QWORD *)&v224 = 6104748;
              *((_QWORD *)&v224 + 1) = "char";
              v64 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v224);
              if (!v64)
              {
                re::StringID::destroyString((re::StringID *)&v224);
                re::internal::assertLog((re::internal *)5, v190, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnimationComponentRequest");
                _os_crash();
                __break(1u);
                goto LABEL_142;
              }
              v65 = *v64;
              re::StringID::destroyString((re::StringID *)&v224);
              v66 = (unsigned int *)qword_255834330;
              __s1[1] = v65;
              re::TypeBuilder::beginEnumType((uint64_t)&v224, (uint64_t *)&v221, 1, 1, (uint64_t)__s1);
              v68 = *v66;
              if ((_DWORD)v68)
              {
                for (i = 0; i < v68; ++i)
                {
                  v70 = *(_QWORD *)(*((_QWORD *)v66 + 1) + 8 * i);
                  if (*(_DWORD *)v70 == 1)
                  {
                    v71 = *(char **)(v70 + 16);
                    if (v71)
                    {
                      v72 = *v71;
                      if (*v71)
                      {
                        v73 = v71[1];
                        if (v73)
                        {
                          v74 = (unsigned __int8 *)(v71 + 2);
                          do
                          {
                            v72 = 31 * v72 + v73;
                            v75 = *v74++;
                            v73 = v75;
                          }
                          while (v75);
                        }
                      }
                    }
                    else
                    {
                      v72 = 0;
                    }
                    v76 = *(_QWORD *)(v70 + 8);
                    *(_QWORD *)&v222.var0 = 2 * v72;
                    v222.var1 = v71;
                    re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v224, v76, &v222);
                    re::StringID::destroyString((re::StringID *)&v222);
                    v68 = *v66;
                  }
                }
                if (v68)
                {
                  for (j = 0; j < v68; ++j)
                  {
                    v78 = *(_QWORD *)(*((_QWORD *)v66 + 1) + 8 * j);
                    if (*(_DWORD *)v78 == 2)
                    {
                      v79 = *(char **)(v78 + 16);
                      if (v79)
                      {
                        v80 = *v79;
                        if (*v79)
                        {
                          v81 = v79[1];
                          if (v81)
                          {
                            v82 = (unsigned __int8 *)(v79 + 2);
                            do
                            {
                              v80 = 31 * v80 + v81;
                              v83 = *v82++;
                              v81 = v83;
                            }
                            while (v83);
                          }
                        }
                      }
                      else
                      {
                        v80 = 0;
                      }
                      v84 = *(_QWORD *)(v78 + 8);
                      *(_QWORD *)&v222.var0 = 2 * v80;
                      v222.var1 = v79;
                      re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v224, v84, &v222);
                      re::StringID::destroyString((re::StringID *)&v222);
                      v68 = *v66;
                    }
                  }
                }
              }
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v224, v85);
              xmmword_255834310 = (__int128)v222;
              re::StringID::destroyString((re::StringID *)&v221);
            }
            v86 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
            *(_DWORD *)v86 = 1;
            *(_QWORD *)(v86 + 8) = "request";
            *(_QWORD *)(v86 + 16) = &qword_2558342F0;
            *(_QWORD *)(v86 + 24) = 0;
            *(_QWORD *)(v86 + 32) = 0x1900000003;
            *(_DWORD *)(v86 + 40) = 0;
            *(_QWORD *)(v86 + 48) = 0;
            *(_QWORD *)(v86 + 56) = 0;
            *(_DWORD *)(v86 + 64) = 0;
            qword_255834148 = v86;
            v87 = re::introspectionAllocator((re *)v86);
            v88 = re::introspect_AnimationHandoffDesc((re::IntrospectionBase **)1);
            v89 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v87 + 32))(v87, 72, 8);
            *(_DWORD *)v89 = 1;
            *(_QWORD *)(v89 + 8) = "handoff";
            *(_QWORD *)(v89 + 16) = v88;
            *(_QWORD *)(v89 + 24) = 0;
            *(_QWORD *)(v89 + 32) = 0x2000000004;
            *(_DWORD *)(v89 + 40) = 0;
            *(_QWORD *)(v89 + 48) = 0;
            *(_QWORD *)(v89 + 56) = 0;
            *(_DWORD *)(v89 + 64) = 0;
            qword_255834150 = v89;
            __cxa_guard_release(&qword_255833F20);
          }
        }
        qword_255834390 = 0x4800000008;
        v12 = &qword_255834380;
        dword_255834398 = 8;
        word_25583439C = 0;
        dword_2558343B8 = 4;
        *(_QWORD *)&xmmword_2558343C0 = &qword_255834138;
        *((_QWORD *)&xmmword_2558343C0 + 1) = re::internal::defaultConstruct<re::ecs2::AnimationComponentEntry>;
        *(_QWORD *)&xmmword_2558343D0 = re::internal::defaultDestruct<re::ecs2::AnimationComponentEntry>;
        *(_QWORD *)&xmmword_2558343E0 = 0;
        *((_QWORD *)&xmmword_2558343D0 + 1) = 0;
        *((_QWORD *)&xmmword_2558343E0 + 1) = re::internal::defaultConstructV2<re::ecs2::AnimationComponentEntry>;
        qword_2558343F0 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::AnimationComponentEntry>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834380, v16);
        v224 = v220;
        if ((byte_255833EE5 & 1) == 0)
        {
LABEL_10:
          byte_255833EE5 = 1;
          v18 = *((_DWORD *)v12 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834228, 0);
          qword_255834238 = 0x2800000003;
          dword_255834240 = v18;
          word_255834244 = 0;
          *(_QWORD *)&xmmword_255834248 = 0;
          *((_QWORD *)&xmmword_255834248 + 1) = 0xFFFFFFFFLL;
          qword_255834258 = (uint64_t)v12;
          qword_255834260 = 0;
          qword_255834228 = (uint64_t)&off_24ED6EE78;
          re::IntrospectionRegistry::add(v19, v20);
          re::getPrettyTypeName((re *)&qword_255834228, (const re::IntrospectionBase *)&v224);
          if ((BYTE8(v224) & 1) != 0)
            v21 = v225;
          else
            v21 = (char *)&v224 + 9;
          if ((_QWORD)v224 && (BYTE8(v224) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v224 + 40))();
          v221 = *((_OWORD *)v12 + 2);
          v22 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v222);
          if (v22)
          {
            v23 = *v22;
            *((_QWORD *)&v220 + 1) = v23;
          }
          else
          {
            *(_OWORD *)__s1 = v221;
            re::TypeBuilder::beginListType((uint64_t)&v224, (uint64_t *)&v222, 1, 0x28uLL, 8uLL, (__int128 *)__s1);
            re::TypeBuilder::setConstructor((uint64_t)&v224, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v224, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v224, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v224, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v224, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v224, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v224, v24);
          }
          xmmword_255834248 = v220;
          re::StringID::destroyString((re::StringID *)&v222);
        }
      }
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "animations";
      *(_QWORD *)(v25 + 16) = &qword_255834228;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x2000000001;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_255834188 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_uint64_t((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "defaultTimebaseID";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x4800000002;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_255834190 = v29;
      v10 = re::introspectionAllocator((re *)v29);
      v30 = atomic_load((unsigned __int8 *)&qword_2558340F0);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_2558340F0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834268, 0);
        *(_QWORD *)(v51 + 22) = 0;
        qword_255834278 = 0;
        *(_QWORD *)&xmmword_255834288 = 0;
        *((_QWORD *)&xmmword_255834288 + 1) = 0xFFFFFFFFLL;
        qword_255834268 = (uint64_t)&off_24ED1FA08;
        qword_2558342A0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_255834298);
        qword_255834268 = (uint64_t)&off_24ED6EF10;
        __cxa_guard_release(&qword_2558340F0);
      }
      if ((byte_255833EE6 & 1) != 0)
        goto LABEL_36;
      v31 = qword_255833F58;
      v15 = (uint64_t)&byte_255833EE6;
      if (qword_255833F58)
        goto LABEL_26;
      v32 = atomic_load((unsigned __int8 *)&qword_255833F48);
      if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_255833F48))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834470, 0);
        *(_QWORD *)(v90 + 22) = 0;
        qword_255834480 = 0;
        *(_QWORD *)&xmmword_255834490 = 0;
        *((_QWORD *)&xmmword_255834490 + 1) = 0xFFFFFFFFLL;
        qword_255834470 = (uint64_t)&off_24ED7DAA8;
        qword_2558344A0 = (uint64_t)"AnimationEntry";
        dword_2558344A8 = 0;
        xmmword_2558344B0 = 0u;
        xmmword_2558344C0 = 0u;
        xmmword_2558344D0 = 0u;
        qword_2558344E0 = 0;
        __cxa_guard_release(&qword_255833F48);
      }
      qword_255833F58 = (uint64_t)&qword_255834470;
      *(_QWORD *)&v224 = 0xC56CB686D928B6DCLL;
      *((_QWORD *)&v224 + 1) = "AnimationEntry";
      LODWORD(v13) = 8;
      re::StringID::destroyString((re::StringID *)&v224);
      xmmword_255834490 = v219;
      v35 = atomic_load((unsigned __int8 *)&qword_255833F50);
      if ((v35 & 1) != 0 || (v91 = (re *)__cxa_guard_acquire(&qword_255833F50), !(_DWORD)v91))
      {
LABEL_25:
        v36 = v15 - 6;
        *(_QWORD *)(v36 + 0x5A0) = 0xF800000008;
        v31 = v15 + 1418;
        *(_DWORD *)(v36 + 0x5A8) = (_DWORD)v13;
        *(_WORD *)(v15 + 0x5A6) = 0;
        *(_DWORD *)(v36 + 0x5C8) = 15;
        *(_QWORD *)(v36 + 0x5D0) = v15 + 1538;
        *(_QWORD *)(v36 + 0x5D8) = re::internal::defaultConstruct<re::ecs2::AnimationEntry>;
        *(_QWORD *)(v36 + 0x5E0) = re::internal::defaultDestruct<re::ecs2::AnimationEntry>;
        *(_QWORD *)(v36 + 0x5F0) = 0;
        *(_QWORD *)(v36 + 0x5E8) = 0;
        *(_QWORD *)(v36 + 0x5F8) = re::internal::defaultConstructV2<re::ecs2::AnimationEntry>;
        *(_QWORD *)(v36 + 0x600) = re::internal::defaultDestructV2<re::ecs2::AnimationEntry>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)(v15 + 1418), v34);
        v224 = v219;
        if ((*(_BYTE *)v15 & 1) != 0)
        {
LABEL_36:
          v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
          *(_DWORD *)v45 = 1;
          *(_QWORD *)(v45 + 8) = "m_animationEntries";
          *(_QWORD *)(v45 + 16) = &qword_255834268;
          *(_QWORD *)(v45 + 24) = 0;
          *(_QWORD *)(v45 + 32) = 0x5800000003;
          *(_DWORD *)(v45 + 40) = 0;
          *(_QWORD *)(v45 + 48) = 0;
          *(_QWORD *)(v45 + 56) = 0;
          *(_DWORD *)(v45 + 64) = 0;
          qword_255834198 = v45;
          v46 = re::introspectionAllocator((re *)v45);
          v48 = re::introspect_uint64_t((re *)1, v47);
          v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
          *(_DWORD *)v49 = 1;
          *(_QWORD *)(v49 + 8) = "m_currentAnimationToken";
          *(_QWORD *)(v49 + 16) = v48;
          *(_QWORD *)(v49 + 24) = 0;
          *(_QWORD *)(v49 + 32) = 0xD800000004;
          *(_DWORD *)(v49 + 40) = 0;
          *(_QWORD *)(v49 + 48) = 0;
          *(_QWORD *)(v49 + 56) = 0;
          *(_DWORD *)(v49 + 64) = 0;
          qword_2558341A0 = v49;
          __cxa_guard_release(&qword_255833F60);
          goto LABEL_2;
        }
LABEL_26:
        *(_BYTE *)v15 = 1;
        v37 = v15 - 6;
        v38 = *(_DWORD *)(v31 + 24);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)(v15 + 898), 0);
        *(_QWORD *)(v37 + 0x398) = 0x2800000003;
        *(_DWORD *)(v37 + 0x3A0) = v38;
        *(_WORD *)(v15 + 0x39E) = 0;
        *(_QWORD *)(v37 + 0x3A8) = 0;
        *(_QWORD *)(v37 + 0x3B0) = 0xFFFFFFFFLL;
        *(_QWORD *)(v37 + 0x3B8) = v31;
        *(_QWORD *)(v37 + 0x3C0) = 0;
        *(_QWORD *)(v37 + 0x388) = &off_24ED6EF10;
        re::IntrospectionRegistry::add(v39, v40);
        re::getPrettyTypeName((re *)(v15 + 898), (const re::IntrospectionBase *)&v224);
        if ((BYTE8(v224) & 1) != 0)
          v41 = v225;
        else
          v41 = (char *)&v224 + 9;
        if ((_QWORD)v224 && (BYTE8(v224) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v224 + 40))();
        v221 = *(_OWORD *)(v31 + 32);
        v42 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v222);
        if (v42)
        {
          v43 = *v42;
          *((_QWORD *)&v220 + 1) = v43;
        }
        else
        {
          *(_OWORD *)__s1 = v221;
          re::TypeBuilder::beginListType((uint64_t)&v224, (uint64_t *)&v222, 1, 0x28uLL, 8uLL, (__int128 *)__s1);
          re::TypeBuilder::setConstructor((uint64_t)&v224, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
          re::TypeBuilder::setDestructor((uint64_t)&v224, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
          re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v224, 1);
          re::TypeBuilder::setListAccessors((uint64_t)&v224, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
          re::TypeBuilder::setListIndexer((uint64_t)&v224, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
          re::TypeBuilder::setListIterator((uint64_t)&v224, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v224, v44);
        }
        xmmword_255834288 = v220;
        re::StringID::destroyString((re::StringID *)&v222);
        goto LABEL_36;
      }
      v92 = re::introspectionAllocator(v91);
      v94 = re::introspect_AssetHandle((re *)1, v93);
      v95 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v92 + 32))(v92, 72, 8);
      *(_DWORD *)v95 = 1;
      *(_QWORD *)(v95 + 8) = "timeline";
      *(_QWORD *)(v95 + 16) = v94;
      *(_QWORD *)(v95 + 24) = 0;
      v2 = 1;
      *(_QWORD *)(v95 + 32) = 1;
      *(_DWORD *)(v95 + 40) = 0;
      *(_QWORD *)(v95 + 48) = 0;
      *(_QWORD *)(v95 + 56) = 0;
      *(_DWORD *)(v95 + 64) = 0;
      qword_2558344E8 = v95;
      v216 = re::introspectionAllocator((re *)v95);
      v96 = atomic_load((unsigned __int8 *)&qword_2558340D8);
      if ((v96 & 1) != 0)
      {
LABEL_78:
        if ((byte_255833EE3 & 1) == 0)
        {
          byte_255833EE3 = 1;
          v97 = re::introspect_SRTAnimationAssetData((re::IntrospectionBase **)1);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558341A8, 0);
          qword_2558341B8 = 0x800000001;
          dword_2558341C0 = 8;
          word_2558341C4 = 0;
          *(_QWORD *)&xmmword_2558341C8 = 0;
          *((_QWORD *)&xmmword_2558341C8 + 1) = 0xFFFFFFFFLL;
          qword_2558341A8 = (uint64_t)&off_24ED30800;
          qword_2558341D8 = v97;
          qword_2558341E0 = 0;
          re::IntrospectionRegistry::add(v98, v99);
          re::getPrettyTypeName((re *)&qword_2558341A8, (const re::IntrospectionBase *)&v224);
          if ((BYTE8(v224) & 1) != 0)
            v100 = v225;
          else
            v100 = (char *)&v224 + 9;
          if ((_QWORD)v224 && (BYTE8(v224) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v224 + 40))();
          if ((unint64_t)__s1[0] >> 1 == 94623636 && (__s1[1] == "char*" || !strcmp(__s1[1], "char*")))
          {
            v101 = (StringID)v224;
          }
          else
          {
            v224 = *(_OWORD *)(v97 + 32);
            v101 = v222;
          }
          xmmword_2558341C8 = (__int128)v101;
          re::StringID::destroyString((re::StringID *)__s1);
        }
        v102 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v216 + 32))(v216, 72, 8);
        *(_DWORD *)v102 = 1;
        *(_QWORD *)(v102 + 8) = "srtTimelineData";
        *(_QWORD *)(v102 + 16) = &qword_2558341A8;
        *(_QWORD *)(v102 + 24) = 0;
        *(_QWORD *)(v102 + 32) = 0x3000000002;
        *(_DWORD *)(v102 + 40) = 0;
        *(_QWORD *)(v102 + 48) = 0;
        *(_QWORD *)(v102 + 56) = 0;
        *(_DWORD *)(v102 + 64) = 0;
        qword_2558344F0 = v102;
        v103 = re::introspectionAllocator((re *)v102);
        re::ecs2::introspect_AnimationComponentTarget((re::ecs2 *)v103, v104);
        v105 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v103 + 32))(v103, 72, 8);
        *(_DWORD *)v105 = 1;
        *(_QWORD *)(v105 + 8) = "target";
        *(_QWORD *)(v105 + 16) = &qword_2558342A8;
        *(_QWORD *)(v105 + 24) = 0;
        *(_QWORD *)(v105 + 32) = 0x3800000003;
        *(_DWORD *)(v105 + 40) = 0;
        *(_QWORD *)(v105 + 48) = 0;
        *(_QWORD *)(v105 + 56) = 0;
        *(_DWORD *)(v105 + 64) = 0;
        qword_2558344F8 = v105;
        v107 = re::introspectionAllocator((re *)v105);
        v108 = atomic_load((unsigned __int8 *)&qword_255833F08);
        if ((v108 & 1) == 0)
        {
          v191 = (re *)__cxa_guard_acquire(&qword_255833F08);
          if ((_DWORD)v191)
          {
            v192 = re::introspectionAllocator(v191);
            v193 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v192 + 32))(v192, 24, 8);
            *(_DWORD *)v193 = 1;
            *((_QWORD *)v193 + 1) = 0;
            *((_QWORD *)v193 + 2) = "Playing";
            qword_255834158 = (uint64_t)v193;
            v194 = re::introspectionAllocator(v193);
            v195 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v194 + 32))(v194, 24, 8);
            *(_DWORD *)v195 = 1;
            *((_QWORD *)v195 + 1) = 1;
            *((_QWORD *)v195 + 2) = "Paused";
            qword_255834160 = (uint64_t)v195;
            v196 = re::introspectionAllocator(v195);
            v197 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v196 + 32))(v196, 24, 8);
            *(_DWORD *)v197 = 1;
            *((_QWORD *)v197 + 1) = 2;
            *((_QWORD *)v197 + 2) = "Stopped";
            qword_255834168 = (uint64_t)v197;
            v198 = re::introspectionAllocator(v197);
            v199 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v198 + 32))(v198, 24, 8);
            *(_DWORD *)v199 = 1;
            *((_QWORD *)v199 + 1) = 3;
            *((_QWORD *)v199 + 2) = "DeactivatePaused";
            qword_255834170 = (uint64_t)v199;
            v200 = re::introspectionAllocator(v199);
            v201 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v200 + 32))(v200, 24, 8);
            *(_DWORD *)v201 = 1;
            *(_QWORD *)(v201 + 8) = 4;
            *(_QWORD *)(v201 + 16) = "FadeOut";
            qword_255834178 = v201;
            __cxa_guard_release(&qword_255833F08);
          }
        }
        v109 = atomic_load((unsigned __int8 *)&qword_255833F10);
        if ((v109 & 1) == 0 && __cxa_guard_acquire(&qword_255833F10))
        {
          re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834338, "AnimationEntryState", 1, 1, 1, 1);
          qword_255834338 = (uint64_t)&off_24ED7D9E8;
          qword_255834378 = (uint64_t)&unk_2540F7C70;
          dword_255834348 = 9;
          __cxa_guard_release(&qword_255833F10);
        }
        if ((byte_255833EE2 & 1) == 0)
        {
          byte_255833EE2 = 1;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834338, v106);
          *(_QWORD *)&v221 = 0x3630FE52B2D2DB86;
          *((_QWORD *)&v221 + 1) = "AnimationEntryState";
          *(_QWORD *)&v224 = 6104748;
          *((_QWORD *)&v224 + 1) = "char";
          v110 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v224);
          if (!v110)
          {
            re::StringID::destroyString((re::StringID *)&v224);
            re::internal::assertLog((re::internal *)5, v202, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnimationEntryState");
            _os_crash();
            __break(1u);
            goto LABEL_149;
          }
          v111 = *v110;
          re::StringID::destroyString((re::StringID *)&v224);
          v112 = (unsigned int *)qword_255834378;
          __s1[0] = (char *)v33;
          __s1[1] = v111;
          re::TypeBuilder::beginEnumType((uint64_t)&v224, (uint64_t *)&v221, 1, 1, (uint64_t)__s1);
          v114 = *v112;
          if ((_DWORD)v114)
          {
            for (k = 0; k < v114; ++k)
            {
              v116 = *(_QWORD *)(*((_QWORD *)v112 + 1) + 8 * k);
              if (*(_DWORD *)v116 == 1)
              {
                v117 = *(char **)(v116 + 16);
                if (v117)
                {
                  v118 = *v117;
                  if (*v117)
                  {
                    v119 = v117[1];
                    if (v119)
                    {
                      v120 = (unsigned __int8 *)(v117 + 2);
                      do
                      {
                        v118 = 31 * v118 + v119;
                        v121 = *v120++;
                        v119 = v121;
                      }
                      while (v121);
                    }
                  }
                }
                else
                {
                  v118 = 0;
                }
                v122 = *(_QWORD *)(v116 + 8);
                *(_QWORD *)&v222.var0 = 2 * v118;
                v222.var1 = v117;
                re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v224, v122, &v222);
                re::StringID::destroyString((re::StringID *)&v222);
                v114 = *v112;
              }
            }
            if (v114)
            {
              for (m = 0; m < v114; ++m)
              {
                v124 = *(_QWORD *)(*((_QWORD *)v112 + 1) + 8 * m);
                if (*(_DWORD *)v124 == 2)
                {
                  v125 = *(char **)(v124 + 16);
                  if (v125)
                  {
                    v126 = *v125;
                    if (*v125)
                    {
                      v127 = v125[1];
                      if (v127)
                      {
                        v128 = (unsigned __int8 *)(v125 + 2);
                        do
                        {
                          v126 = 31 * v126 + v127;
                          v129 = *v128++;
                          v127 = v129;
                        }
                        while (v129);
                      }
                    }
                  }
                  else
                  {
                    v126 = 0;
                  }
                  v130 = *(_QWORD *)(v124 + 8);
                  *(_QWORD *)&v222.var0 = 2 * v126;
                  v222.var1 = v125;
                  re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v224, v130, &v222);
                  re::StringID::destroyString((re::StringID *)&v222);
                  v114 = *v112;
                }
              }
            }
          }
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v224, v131);
          xmmword_255834358 = (__int128)v222;
          re::StringID::destroyString((re::StringID *)&v221);
        }
        v132 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v107 + 32))(v107, 72, 8);
        *(_DWORD *)v132 = 1;
        *(_QWORD *)(v132 + 8) = "animationState";
        *(_QWORD *)(v132 + 16) = &qword_255834338;
        *(_QWORD *)(v132 + 24) = 0;
        *(_QWORD *)(v132 + 32) = 0x3900000004;
        *(_DWORD *)(v132 + 40) = 0;
        *(_QWORD *)(v132 + 48) = 0;
        *(_QWORD *)(v132 + 56) = 0;
        *(_DWORD *)(v132 + 64) = 0;
        qword_255834500 = v132;
        v133 = re::introspectionAllocator((re *)v132);
        v135 = re::introspect_uint8_t((re *)1, v134);
        v136 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v133 + 32))(v133, 72, 8);
        *(_DWORD *)v136 = 1;
        *(_QWORD *)(v136 + 8) = "statePlaybackTimeVersion";
        *(_QWORD *)(v136 + 16) = v135;
        *(_QWORD *)(v136 + 24) = 0;
        *(_QWORD *)(v136 + 32) = 0x3A00000005;
        *(_DWORD *)(v136 + 40) = 0;
        *(_QWORD *)(v136 + 48) = 0;
        *(_QWORD *)(v136 + 56) = 0;
        *(_DWORD *)(v136 + 64) = 0;
        qword_255834508 = v136;
        v137 = re::introspectionAllocator((re *)v136);
        v139 = re::introspect_double((re *)1, v138);
        v140 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v137 + 32))(v137, 72, 8);
        *(_DWORD *)v140 = 1;
        *(_QWORD *)(v140 + 8) = "stateTime";
        *(_QWORD *)(v140 + 16) = v139;
        *(_QWORD *)(v140 + 24) = 0;
        *(_QWORD *)(v140 + 32) = 0x4800000006;
        *(_DWORD *)(v140 + 40) = 0;
        *(_QWORD *)(v140 + 48) = 0;
        *(_QWORD *)(v140 + 56) = 0;
        *(_DWORD *)(v140 + 64) = 0;
        qword_255834510 = v140;
        v141 = re::introspectionAllocator((re *)v140);
        v143 = re::introspect_double((re *)1, v142);
        v144 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v141 + 32))(v141, 72, 8);
        *(_DWORD *)v144 = 1;
        *(_QWORD *)(v144 + 8) = "statePlaybackTime";
        *(_QWORD *)(v144 + 16) = v143;
        *(_QWORD *)(v144 + 24) = 0;
        *(_QWORD *)(v144 + 32) = 0x5000000007;
        *(_DWORD *)(v144 + 40) = 0;
        *(_QWORD *)(v144 + 48) = 0;
        *(_QWORD *)(v144 + 56) = 0;
        *(_DWORD *)(v144 + 64) = 0;
        qword_255834518 = v144;
        v145 = re::introspectionAllocator((re *)v144);
        v147 = re::introspect_uint64_t((re *)1, v146);
        v148 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v145 + 32))(v145, 72, 8);
        *(_DWORD *)v148 = 1;
        *(_QWORD *)(v148 + 8) = "parentTimebaseID";
        *(_QWORD *)(v148 + 16) = v147;
        *(_QWORD *)(v148 + 24) = 0;
        *(_QWORD *)(v148 + 32) = 0x6000000008;
        *(_DWORD *)(v148 + 40) = 0;
        *(_QWORD *)(v148 + 48) = 0;
        *(_QWORD *)(v148 + 56) = 0;
        *(_DWORD *)(v148 + 64) = 0;
        qword_255834520 = v148;
        v149 = re::introspectionAllocator((re *)v148);
        v150 = re::introspect_AnimationHandoffDesc((re::IntrospectionBase **)1);
        v151 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v149 + 32))(v149, 72, 8);
        *(_DWORD *)v151 = 1;
        *(_QWORD *)(v151 + 8) = "handoff";
        *(_QWORD *)(v151 + 16) = v150;
        *(_QWORD *)(v151 + 24) = 0;
        *(_QWORD *)(v151 + 32) = 0x6800000009;
        *(_DWORD *)(v151 + 40) = 0;
        *(_QWORD *)(v151 + 48) = 0;
        *(_QWORD *)(v151 + 56) = 0;
        *(_DWORD *)(v151 + 64) = 0;
        qword_255834528 = v151;
        v152 = re::introspectionAllocator((re *)v151);
        v154 = re::introspect_uint64_t((re *)1, v153);
        v155 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v152 + 32))(v152, 72, 8);
        *(_DWORD *)v155 = 1;
        *(_QWORD *)(v155 + 8) = "animationToken";
        *(_QWORD *)(v155 + 16) = v154;
        *(_QWORD *)(v155 + 24) = 0;
        *(_QWORD *)(v155 + 32) = 0x800000000ALL;
        *(_DWORD *)(v155 + 40) = 0;
        *(_QWORD *)(v155 + 48) = 0;
        *(_QWORD *)(v155 + 56) = 0;
        *(_DWORD *)(v155 + 64) = 0;
        qword_255834530 = v155;
        v156 = re::introspectionAllocator((re *)v155);
        v158 = re::introspect_uint8_t((re *)1, v157);
        v159 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v156 + 32))(v156, 72, 8);
        *(_DWORD *)v159 = 1;
        *(_QWORD *)(v159 + 8) = "playbackFlags";
        *(_QWORD *)(v159 + 16) = v158;
        *(_QWORD *)(v159 + 24) = 0;
        *(_QWORD *)(v159 + 32) = 0x880000000BLL;
        *(_DWORD *)(v159 + 40) = 0;
        *(_QWORD *)(v159 + 48) = 0;
        *(_QWORD *)(v159 + 56) = 0;
        *(_DWORD *)(v159 + 64) = 0;
        qword_255834538 = v159;
        v160 = re::introspectionAllocator((re *)v159);
        v162 = re::introspect_float((re *)1, v161);
        v163 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v160 + 32))(v160, 72, 8);
        *(_DWORD *)v163 = 1;
        *(_QWORD *)(v163 + 8) = "playbackSpeed";
        *(_QWORD *)(v163 + 16) = v162;
        *(_QWORD *)(v163 + 24) = 0;
        *(_QWORD *)(v163 + 32) = 0x8C0000000CLL;
        *(_DWORD *)(v163 + 40) = 0;
        *(_QWORD *)(v163 + 48) = 0;
        *(_QWORD *)(v163 + 56) = 0;
        *(_DWORD *)(v163 + 64) = 0;
        qword_255834540 = v163;
        v164 = re::introspectionAllocator((re *)v163);
        v166 = re::introspect_float((re *)1, v165);
        v167 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v164 + 32))(v164, 72, 8);
        *(_DWORD *)v167 = 1;
        *(_QWORD *)(v167 + 8) = "blendFactor";
        *(_QWORD *)(v167 + 16) = v166;
        *(_QWORD *)(v167 + 24) = 0;
        *(_QWORD *)(v167 + 32) = 0x900000000DLL;
        *(_DWORD *)(v167 + 40) = 0;
        *(_QWORD *)(v167 + 48) = 0;
        *(_QWORD *)(v167 + 56) = 0;
        *(_DWORD *)(v167 + 64) = 0;
        qword_255834548 = v167;
        v168 = re::introspectionAllocator((re *)v167);
        v170 = re::introspect_float((re *)1, v169);
        v171 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v168 + 32))(v168, 72, 8);
        *(_DWORD *)v171 = 1;
        *(_QWORD *)(v171 + 8) = "fadeOutTime";
        *(_QWORD *)(v171 + 16) = v170;
        *(_QWORD *)(v171 + 24) = 0;
        *(_QWORD *)(v171 + 32) = 0x940000000ELL;
        *(_DWORD *)(v171 + 40) = 0;
        *(_QWORD *)(v171 + 48) = 0;
        *(_QWORD *)(v171 + 56) = 0;
        *(_DWORD *)(v171 + 64) = 0;
        qword_255834550 = v171;
        v216 = re::introspectionAllocator((re *)v171);
        v172 = atomic_load((unsigned __int8 *)&qword_2558340E0);
        if ((v172 & 1) != 0)
        {
LABEL_121:
          if ((byte_255833EE4 & 1) == 0)
          {
            v213 = (uint64_t *)qword_255833F40;
            if (qword_255833F40)
              goto LABEL_126;
            v173 = atomic_load((unsigned __int8 *)&qword_255833F30);
            if ((v173 & 1) == 0 && __cxa_guard_acquire(&qword_255833F30))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558343F8, 0);
              *(_QWORD *)(v204 + 22) = 0;
              qword_255834408 = 0;
              *(_QWORD *)&xmmword_255834418 = 0;
              *((_QWORD *)&xmmword_255834418 + 1) = 0xFFFFFFFFLL;
              qword_2558343F8 = (uint64_t)&off_24ED7DAA8;
              qword_255834428 = (uint64_t)"ExternalAnimationEntry";
              dword_255834430 = 0;
              *(_OWORD *)(v204 + 64) = 0u;
              *(_OWORD *)(v204 + 80) = 0u;
              *(_OWORD *)(v204 + 96) = 0u;
              qword_255834468 = 0;
              __cxa_guard_release(&qword_255833F30);
            }
            qword_255833F40 = (uint64_t)&qword_2558343F8;
            __s1[0] = (char *)0x2AAB698E8554D832;
            __s1[1] = "ExternalAnimationEntry";
            re::StringID::destroyString((re::StringID *)__s1);
            xmmword_255834418 = v224;
            v175 = atomic_load((unsigned __int8 *)&qword_255833F38);
            if ((v175 & 1) == 0)
            {
              v205 = (re *)__cxa_guard_acquire(&qword_255833F38);
              if ((_DWORD)v205)
              {
                v206 = re::introspectionAllocator(v205);
                v214 = re::introspect_uint64_t((re *)1, v207);
                v208 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v206 + 32))(v206, 72, 8);
                *(_DWORD *)v208 = 1;
                *(_QWORD *)(v208 + 8) = "entity";
                *(_QWORD *)(v208 + 16) = v214;
                *(_QWORD *)(v208 + 24) = 0;
                *(_QWORD *)(v208 + 32) = v2;
                *(_DWORD *)(v208 + 40) = 0;
                *(_QWORD *)(v208 + 48) = 0;
                *(_QWORD *)(v208 + 56) = 0;
                *(_DWORD *)(v208 + 64) = 0;
                qword_2558340F8 = v208;
                v209 = re::introspectionAllocator((re *)v208);
                v215 = re::introspect_uint64_t((re *)1, v210);
                v211 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v209 + 32))(v209, 72, 8);
                *(_DWORD *)v211 = 1;
                *(_QWORD *)(v211 + 8) = "token";
                *(_QWORD *)(v211 + 16) = v215;
                *(_QWORD *)(v211 + 24) = 0;
                *(_QWORD *)(v211 + 32) = 0x800000002;
                *(_DWORD *)(v211 + 40) = 0;
                *(_QWORD *)(v211 + 48) = 0;
                *(_QWORD *)(v211 + 56) = 0;
                *(_DWORD *)(v211 + 64) = 0;
                qword_255834100 = v211;
                __cxa_guard_release(&qword_255833F38);
              }
            }
            qword_255834408 = 0x1000000008;
            dword_255834410 = 8;
            word_255834414 = 1;
            dword_255834430 = 2;
            qword_255834438 = (uint64_t)&qword_2558340F8;
            qword_255834440 = (uint64_t)re::internal::defaultConstruct<re::ecs2::ExternalAnimationEntry>;
            qword_255834448 = (uint64_t)re::internal::defaultDestruct<re::ecs2::ExternalAnimationEntry>;
            qword_255834458 = 0;
            qword_255834450 = 0;
            qword_255834460 = (uint64_t)re::internal::defaultConstructV2<re::ecs2::ExternalAnimationEntry>;
            qword_255834468 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::ExternalAnimationEntry>;
            re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558343F8, v174);
            *(_OWORD *)__s1 = v224;
            v213 = &qword_2558343F8;
            if ((byte_255833EE4 & 1) == 0)
            {
LABEL_126:
              byte_255833EE4 = 1;
              v212 = *((_DWORD *)v213 + 6);
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558341E8, 0);
              qword_2558341F8 = 0x180000000DLL;
              dword_255834200 = v212;
              word_255834204 = 0;
              *(_QWORD *)&xmmword_255834208 = 0;
              *((_QWORD *)&xmmword_255834208 + 1) = 0xFFFFFFFFLL;
              qword_255834218 = (uint64_t)v213;
              qword_255834220 = 0;
              qword_2558341E8 = (uint64_t)&off_24ED6EDF8;
              re::IntrospectionRegistry::add(v176, v177);
              re::getPrettyTypeName((re *)&qword_2558341E8, (const re::IntrospectionBase *)&v224);
              if ((BYTE8(v224) & 1) != 0)
                v178 = v225;
              else
                v178 = (char *)&v224 + 9;
              if ((_QWORD)v224 && (BYTE8(v224) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v224 + 40))();
              v221 = *((_OWORD *)v213 + 2);
              v179 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v222);
              if (v179)
              {
                v180 = *v179;
                *((_QWORD *)&v220 + 1) = v180;
              }
              else
              {
                *(_OWORD *)__s1 = v221;
                re::TypeBuilder::beginOptionalType((uint64_t)&v224, (uint64_t *)&v222, 0x18uLL, 8uLL, (__int128 *)__s1);
                re::TypeBuilder::setOptionalAccessors((uint64_t)&v224, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
                re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v224, v181);
              }
              xmmword_255834208 = v220;
              re::StringID::destroyString((re::StringID *)&v222);
            }
          }
          v182 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v216 + 32))(v216, 72, 8);
          *(_DWORD *)v182 = 1;
          *(_QWORD *)(v182 + 8) = "parentAnimationEntry";
          *(_QWORD *)(v182 + 16) = &qword_2558341E8;
          *(_QWORD *)(v182 + 24) = 0;
          *(_QWORD *)(v182 + 32) = 0x980000000FLL;
          *(_DWORD *)(v182 + 40) = 0;
          *(_QWORD *)(v182 + 48) = 0;
          *(_QWORD *)(v182 + 56) = 0;
          *(_DWORD *)(v182 + 64) = 0;
          qword_255834558 = v182;
          __cxa_guard_release(&qword_255833F50);
          goto LABEL_25;
        }
LABEL_149:
        if (__cxa_guard_acquire(&qword_2558340E0))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558341E8, 0);
          *(_QWORD *)(v203 + 22) = 0;
          qword_2558341F8 = 0;
          *(_QWORD *)&xmmword_255834208 = 0;
          *((_QWORD *)&xmmword_255834208 + 1) = 0xFFFFFFFFLL;
          qword_2558341E8 = (uint64_t)&off_24ED2DDF8;
          qword_255834220 = 0;
          re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_255834218);
          qword_2558341E8 = (uint64_t)&off_24ED6EDF8;
          __cxa_guard_release(&qword_2558340E0);
        }
        goto LABEL_121;
      }
LABEL_142:
      if (__cxa_guard_acquire(&qword_2558340D8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558341A8, 0);
        *(uint64_t *)((char *)&qword_2558341B8 + 6) = 0;
        qword_2558341B8 = 0;
        *(_QWORD *)&xmmword_2558341C8 = 0;
        *((_QWORD *)&xmmword_2558341C8 + 1) = 0xFFFFFFFFLL;
        qword_2558341A8 = (uint64_t)&off_24ED30800;
        qword_2558341E0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2558341D8);
        __cxa_guard_release(&qword_2558340D8);
      }
      goto LABEL_78;
    }
  }
LABEL_2:
  *((_QWORD *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_255834180;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationComponent>;
  re::IntrospectionRegistry::add(this, v4);
  v217 = v218;
}

re::ecs2::AnimationComponent *re::internal::defaultConstruct<re::ecs2::AnimationComponent>(int a1, int a2, re::ecs2::AnimationComponent *this)
{
  return re::ecs2::AnimationComponent::AnimationComponent(this);
}

void re::internal::defaultDestruct<re::ecs2::AnimationComponent>(double a1, uint64_t a2, uint64_t a3, re::ecs2::AnimationComponent *a4)
{
  re::ecs2::AnimationComponent::~AnimationComponent(a4, a1);
}

uint64_t re::ecs2::introspect_AnimationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AnimationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255833F70);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255833F70))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558345D8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2558345E8 = 0;
    qword_2558345F8 = 0;
    qword_255834600 = 0xFFFFFFFFLL;
    qword_2558345D8 = (uint64_t)&off_24ED7DAA8;
    qword_255834608 = (uint64_t)"AnimationSystem";
    dword_255834610 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_255834648 = 0;
    __cxa_guard_release(&qword_255833F70);
  }
  return &qword_2558345D8;
}

void re::ecs2::initInfo_AnimationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE82A1A547CEAFD66;
  v5[1] = "AnimationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x2E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AnimationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AnimationSystem *re::internal::defaultConstruct<re::ecs2::AnimationSystem>(int a1, int a2, re::ecs2::AnimationSystem *this)
{
  return re::ecs2::AnimationSystem::AnimationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AnimationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 62);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 30);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnimationSystem>(_QWORD *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 62);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 30);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnimationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationSystem>, this);
}

void re::ecs2::AnimationComponent::AnimationComponentEventDelegate::~AnimationComponentEventDelegate(re::ecs2::AnimationComponent::AnimationComponentEventDelegate *this)
{
  re::ecs2::AnimationComponent::AnimationComponentEventDelegate::~AnimationComponentEventDelegate(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t *v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24ED6E998;
  v2 = (uint64_t *)((char *)this + 40);
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)v2, i);
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = v5;

        *(_QWORD *)(v7 + 24) = 0;
      }
    }
  }
  while (*((_QWORD *)this + 6))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  *((_QWORD *)this + 10) = 0;
  ++*((_DWORD *)this + 22);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  objc_destroyWeak((id *)this + 4);
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnimationComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnimationComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnimationComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::AnimationSystem::~AnimationSystem(re::ecs2::AnimationSystem *this)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 62);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 30);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 62);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 30);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnimationSystem::typeInfo(re::ecs2::AnimationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationSystem>, 0);
}

void re::ecs2::AnimationComponent::~AnimationComponent(re::ecs2::AnimationComponent *this, double a2)
{
  re::ecs2::AnimationComponent::~AnimationComponent(this, a2);
  JUMPOUT(0x2276933B8);
}

{
  const void *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  *((_QWORD *)this + 29) = 0;
  v3 = (const void *)*((_QWORD *)this + 28);
  if (v3)
    CFRelease(v3);
  re::DynamicArray<re::ecs2::AnimationShadowEntry>::clear((uint64_t)this + 176, a2);
  re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)this + 88);
  *((_DWORD *)this + 32) = 0;
  re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)this + 136);
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear((re::ecs2::AnimationComponent *)((char *)this + 32), v4);
  *((_QWORD *)this + 27) = 1000;
  *((_BYTE *)this + 240) = 0;
  v6 = *((_QWORD *)this + 22);
  if (v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 26);
    if (v7)
    {
      v8 = *((_QWORD *)this + 24);
      if (v8)
      {
        v9 = 144 * v8;
        do
        {
          re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)v7, v5);
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v7 + 6);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v7 + 3));
          v7 += 18;
          v9 -= 144;
        }
        while (v9);
        v6 = *((_QWORD *)this + 22);
        v7 = (uint64_t *)*((_QWORD *)this + 26);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 40))(v6, v7);
    }
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 22) = 0;
    ++*((_DWORD *)this + 50);
  }
  re::DynamicArray<re::ecs2::AnimationEntry>::deinit((uint64_t)this + 136);
  re::DynamicArray<re::ecs2::AnimationEntry>::deinit((uint64_t)this + 88);
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {

    *((_QWORD *)this + 10) = 0;
  }
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit((uint64_t)this + 32, v10);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void std::__function::__func<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED6EA98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6EA98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::operator()(uint64_t a1, uint64_t *a2, Allocator *a3)
{
  return re::internal::destroy(*a2, *(re::Timeline **)(a1 + 8), a3);
}

uint64_t std::__function::__func<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<`anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::target_type()
{
}

re::ecs2::AnimationEntry *re::ecs2::AnimationEntry::AnimationEntry(re::ecs2::AnimationEntry *this)
{
  *(_OWORD *)((char *)this + 41) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_WORD *)((char *)this + 57) = 2;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_BYTE *)this + 112) = 0;
  *((_DWORD *)this + 29) = 0x80000000;
  *((_QWORD *)this + 15) = &str_240;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)((char *)this + 140) = _D0;
  *((_DWORD *)this + 37) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 50) = 0;
  *((_QWORD *)this + 24) = 0;
  objc_initWeak((id *)this + 27, 0);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  return this;
}

void re::ecs2::AnimationEntry::~AnimationEntry(id *this)
{
  id v2;

  re::ecs2::AnimationEntry::deinit((re::ecs2::AnimationEntry *)this);
  objc_destroyWeak(this + 27);
  this[27] = 0;
  v2 = this[22];
  if (v2)
  {
    if (this[26])
      (*(void (**)(id))(*(_QWORD *)v2 + 40))(v2);
    this[26] = 0;
    this[23] = 0;
    this[24] = 0;
    this[22] = 0;
    ++*((_DWORD *)this + 50);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 3));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)this);
}

void re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6EB28;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6EB28;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6EB80;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6EB80;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6EBE8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6EBE8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::ecs2::AnimationComponentEntry::~AnimationComponentEntry(re::ecs2::AnimationComponentEntry *this, double a2)
{
  if (*(_QWORD *)this)
  {

    *(_QWORD *)this = 0;
  }
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0x80000000;
  *((_QWORD *)this + 6) = &str_240;
  LODWORD(a2) = 0;
  re::AnimationController::stop((re::ecs2::AnimationComponentEntry *)((char *)this + 56), a2);
  re::AssetHandle::~AssetHandle(this);
}

id *re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationComponentEventDelegate(id *this, re::ecs2::AnimationComponent *a2)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0);
  *this = &off_24ED6E998;
  *((_DWORD *)this + 6) = 0;
  objc_initWeak(this + 4, (char *)a2 + 8);
  this[5] = 0;
  this[6] = 0;
  *((_DWORD *)this + 14) = 1;
  this[9] = 0;
  this[10] = 0;
  this[8] = 0;
  *((_DWORD *)this + 22) = 0;
  return this;
}

__int128 *re::ecs2::AnimationEntry::operator=(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  _BYTE to[24];
  int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  *(_QWORD *)a1 = 0;
  v5 = *((_QWORD *)a1 + 2);
  *(__int128 *)((char *)a1 + 8) = 0u;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v8 = *a2;
  *a2 = v4;
  *(_OWORD *)to = v8;
  *((_QWORD *)a2 + 2) = v5;
  *(_QWORD *)&to[16] = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)to);
  v9 = *(__int128 *)((char *)a1 + 24);
  *((_QWORD *)a1 + 3) = 0;
  v10 = *((_QWORD *)a1 + 5);
  a1[2] = 0u;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v11 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  v13 = *(__int128 *)((char *)a2 + 24);
  *(__int128 *)((char *)a2 + 24) = v9;
  *(_OWORD *)to = v13;
  *((_QWORD *)a2 + 5) = v10;
  *(_QWORD *)&to[16] = v12;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)to);
  v14 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  LOBYTE(v14) = *((_BYTE *)a1 + 56);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v14;
  LOBYTE(v14) = *((_BYTE *)a1 + 57);
  *((_BYTE *)a1 + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v14;
  LOBYTE(v14) = *((_BYTE *)a1 + 58);
  *((_BYTE *)a1 + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a2 + 58) = v14;
  v15 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v15;
  v16 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v16;
  v17 = *((_QWORD *)a1 + 11);
  *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v17;
  v18 = *((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v18;
  v19 = *((_QWORD *)a1 + 15);
  v20 = *(__int128 *)((char *)a1 + 104);
  v21 = *((_QWORD *)a2 + 15);
  *(__int128 *)((char *)a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *((_QWORD *)a1 + 15) = v21;
  *(__int128 *)((char *)a2 + 104) = v20;
  *((_QWORD *)a2 + 15) = v19;
  v22 = *((_QWORD *)a1 + 16);
  *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v22;
  LOBYTE(v22) = *((_BYTE *)a1 + 136);
  *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
  *((_BYTE *)a2 + 136) = v22;
  LODWORD(v20) = *((_DWORD *)a1 + 35);
  *((_DWORD *)a1 + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v20;
  LODWORD(v20) = *((_DWORD *)a1 + 36);
  *((_DWORD *)a1 + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v20;
  LODWORD(v20) = *((_DWORD *)a1 + 37);
  *((_DWORD *)a1 + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  *(_QWORD *)to = 0;
  objc_moveWeak((id *)to, (id *)a1 + 27);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a1 + 27, (id *)a2 + 27);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2 + 27, (id *)to);
  objc_destroyWeak((id *)to);
  v23 = *((_QWORD *)a1 + 28);
  *((_QWORD *)a1 + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v23;
  v24 = *((_QWORD *)a1 + 29);
  *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v24;
  v25 = *((_QWORD *)a1 + 30);
  *((_QWORD *)a1 + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v25;
  v26 = *((unsigned __int8 *)a1 + 152);
  if (*((_BYTE *)a1 + 152))
  {
    *(_OWORD *)&to[7] = a1[10];
    if (!*((_BYTE *)a2 + 152))
    {
      *((_BYTE *)a1 + 152) = 0;
      v27 = *((_BYTE *)a2 + 152) != 0;
      goto LABEL_11;
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + 152))
    {
      v28 = 0;
      goto LABEL_7;
    }
    *((_BYTE *)a1 + 152) = 1;
  }
  a1[10] = a2[10];
  v28 = *((unsigned __int8 *)a2 + 152);
LABEL_7:
  if (!(v28 | v26))
    goto LABEL_15;
  v27 = v28 != 0;
  if (!v26 && v28)
  {
    *((_BYTE *)a2 + 152) = 0;
    goto LABEL_15;
  }
LABEL_11:
  if (v26 && !v27)
    *((_BYTE *)a2 + 152) = 1;
  a2[10] = *(_OWORD *)&to[7];
LABEL_15:
  v29 = (uint64_t)(a2 + 11);
  *(_QWORD *)to = *((_QWORD *)a1 + 22);
  *(_OWORD *)&to[8] = *(__int128 *)((char *)a1 + 184);
  *((_QWORD *)a1 + 22) = 0;
  *((_QWORD *)a1 + 23) = 0;
  *((_QWORD *)a1 + 24) = 0;
  v33 = *((_QWORD *)a1 + 26);
  *((_QWORD *)a1 + 26) = 0;
  ++*((_DWORD *)a1 + 50);
  v32 = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a1 + 11), v29);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v29, (uint64_t)to);
  if (*(_QWORD *)to && v33)
    (*(void (**)(void))(**(_QWORD **)to + 40))();
  return a1;
}

_QWORD *re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF8uLL))
        {
          v2 = 248 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 248 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 248, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 248 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ecs2::AnimationEntry::AnimationEntry(v11, v8);
          re::ecs2::AnimationEntry::~AnimationEntry((id *)v8);
          v8 = (__int128 *)((char *)v8 + 248);
          v11 += 248;
          v10 -= 248;
        }
        while (v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__int128 *re::ecs2::AnimationEntry::AnimationEntry(uint64_t a1, __int128 *a2)
{
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 57) = 2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = 0x80000000;
  *(_QWORD *)(a1 + 120) = &str_240;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 140) = _D0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  objc_initWeak((id *)(a1 + 216), 0);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  return re::ecs2::AnimationEntry::operator=((__int128 *)a1, a2);
}

uint64_t *re::ecs2::AnimationShadowEntry::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE v27[24];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  v5 = a1[1];
  v6 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a2[1] = v5;
  a2[2] = v6;
  v7 = *(_OWORD *)(a1 + 3);
  a1[3] = 0;
  a1[4] = 0;
  v8 = a1[5];
  a1[5] = 0;
  a1[4] = a2[4];
  a2[4] = 0;
  v9 = a1[3];
  a1[3] = 0;
  a1[3] = a2[3];
  a2[3] = v9;
  v10 = a1[5];
  a1[5] = a2[5];
  v11 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a2 + 3) = v7;
  *(_OWORD *)v27 = v11;
  a2[5] = v8;
  *(_QWORD *)&v27[16] = v10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
  v12 = a1[6];
  a1[6] = a2[6];
  a2[6] = v12;
  if (a2 != a1)
  {
    v13 = a1 + 7;
    v14 = a2 + 7;
    v15 = (uint64_t *)a1[10];
    v16 = (uint64_t *)a2[10];
    if (v15 == a1 + 7)
    {
      if (v16 == v14)
      {
        (*(void (**)(uint64_t *, _BYTE *))(a1[7] + 24))(a1 + 7, v27);
        (*(void (**)(uint64_t))(*(_QWORD *)a1[10] + 32))(a1[10]);
        a1[10] = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2[10] + 24))(a2[10], a1 + 7);
        (*(void (**)(uint64_t))(*(_QWORD *)a2[10] + 32))(a2[10]);
        a2[10] = 0;
        a1[10] = (uint64_t)v13;
        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v27 + 24))(v27, a2 + 7);
        (*(void (**)(_BYTE *))(*(_QWORD *)v27 + 32))(v27);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *))(a1[7] + 24))(a1 + 7, a2 + 7);
        (*(void (**)(uint64_t))(*(_QWORD *)a1[10] + 32))(a1[10]);
        a1[10] = a2[10];
      }
      a2[10] = (uint64_t)v14;
    }
    else if (v16 == v14)
    {
      (*(void (**)(uint64_t *, uint64_t *))(a2[7] + 24))(a2 + 7, a1 + 7);
      (*(void (**)(uint64_t))(*(_QWORD *)a2[10] + 32))(a2[10]);
      a2[10] = a1[10];
      a1[10] = (uint64_t)v13;
    }
    else
    {
      a1[10] = (uint64_t)v16;
      a2[10] = (uint64_t)v15;
    }
  }
  v17 = *((_BYTE *)a1 + 88);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v17;
  v18 = *((_BYTE *)a1 + 89);
  *((_BYTE *)a1 + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v18;
  v19 = a1[12];
  a1[12] = a2[12];
  a2[12] = v19;
  LOBYTE(v19) = *((_BYTE *)a1 + 104);
  *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
  *((_BYTE *)a2 + 104) = v19;
  v20 = *((_DWORD *)a1 + 27);
  *((_DWORD *)a1 + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v20;
  v21 = *((_DWORD *)a1 + 28);
  *((_DWORD *)a1 + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v21;
  v22 = *((_DWORD *)a1 + 29);
  *((_DWORD *)a1 + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v22;
  v23 = *((unsigned __int8 *)a1 + 120);
  if (*((_BYTE *)a1 + 120))
  {
    *(_OWORD *)&v27[7] = *((_OWORD *)a1 + 8);
    if (!*((_BYTE *)a2 + 120))
    {
      *((_BYTE *)a1 + 120) = 0;
      v24 = *((_BYTE *)a2 + 120) != 0;
      goto LABEL_20;
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + 120))
    {
      v25 = 0;
      goto LABEL_16;
    }
    *((_BYTE *)a1 + 120) = 1;
  }
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  v25 = *((unsigned __int8 *)a2 + 120);
LABEL_16:
  if (!(v25 | v23))
    return a1;
  v24 = v25 != 0;
  if (!v23 && v25)
  {
    *((_BYTE *)a2 + 120) = 0;
    return a1;
  }
LABEL_20:
  if (v23 && !v24)
    *((_BYTE *)a2 + 120) = 1;
  *((_OWORD *)a2 + 8) = *(_OWORD *)&v27[7];
  return a1;
}

_QWORD *re::DynamicArray<re::ecs2::AnimationShadowEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v17;
  double v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 144 * v9;
        __asm { FMOV            V8.2S, #1.0 }
        do
        {
          v17 = &v7[v10 / 8];
          v17[10] = 0;
          *(_OWORD *)v17 = 0u;
          *((_OWORD *)v17 + 1) = 0u;
          *((_OWORD *)v17 + 2) = 0u;
          v17[6] = 0;
          *((_WORD *)v17 + 44) = 2;
          v17[12] = 0;
          *((_BYTE *)v17 + 104) = 0;
          *(_QWORD *)((char *)v17 + 108) = _D8;
          *((_DWORD *)v17 + 29) = 0;
          *((_BYTE *)v17 + 120) = 0;
          re::ecs2::AnimationShadowEntry::operator=(&v7[v10 / 8], (uint64_t *)(v8 + v10));
          re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)(v8 + v10), v18);
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v8 + v10 + 48));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + v10 + 24));
          v10 += 144;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

id *re::DynamicArray<re::ecs2::AnimationEntry>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  id *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = (id *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 248 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = 248 * v9;
      v11 = *(_QWORD *)(a2 + 32) + v10;
      v12 = a1[4] + v10;
      v13 = 248 * v4 - v10;
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        *(_OWORD *)(v12 + 41) = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)v12 = 0u;
        *(_WORD *)(v12 + 57) = 2;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_BYTE *)(v12 + 112) = 0;
        *(_DWORD *)(v12 + 116) = 0x80000000;
        *(_QWORD *)(v12 + 120) = &str_240;
        *(_QWORD *)(v12 + 128) = 0;
        *(_BYTE *)(v12 + 136) = 0;
        *(_QWORD *)(v12 + 140) = _D8;
        *(_DWORD *)(v12 + 148) = 0;
        *(_BYTE *)(v12 + 152) = 0;
        *(_QWORD *)(v12 + 208) = 0;
        *(_QWORD *)(v12 + 176) = 0;
        *(_QWORD *)(v12 + 184) = 0;
        *(_DWORD *)(v12 + 200) = 0;
        *(_QWORD *)(v12 + 192) = 0;
        objc_initWeak((id *)(v12 + 216), 0);
        *(_QWORD *)(v12 + 232) = 0;
        *(_QWORD *)(v12 + 240) = 0;
        *(_QWORD *)(v12 + 224) = 0;
        result = (id *)re::ecs2::AnimationEntry::operator=(v12, v11);
        v11 += 248;
        v12 += 248;
        v13 -= 248;
      }
      while (v13);
    }
  }
  else
  {
    result = (id *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 248 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      result = (id *)(a1[4] + 248 * v4);
      v7 = -248 * v4 + 248 * v6;
      do
      {
        re::ecs2::AnimationEntry::~AnimationEntry(result);
        result = (id *)(v8 + 248);
        v7 -= 248;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = re::ecs2::AnimationEntry::operator=(a3, v5);
      v5 += 248;
      a3 += 248;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::ecs2::AnimationEntry::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  re *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  const void *v14;
  const void *v15;

  re::ecs2::AnimationEntry::deinit((re::ecs2::AnimationEntry *)a1);
  re::AssetHandle::operator=((uint64_t *)a1, (uint64_t *)a2);
  v4 = re::AssetHandle::operator=((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    v7 = re::globalAllocators(v6);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 304, 16);
    v9 = (_QWORD *)re::FromToByAnimationAssetData<re::GenericSRT<float>>::FromToByAnimationAssetData(v8, v5);
    *v9 = &off_24ED329A0;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = *(const void **)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
    CFRetain(v10);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 140) = *(_QWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (*(_BYTE *)(a1 + 152) || *(_BYTE *)(a2 + 152))
  {
    if (!*(_BYTE *)(a1 + 152) || *(_BYTE *)(a2 + 152))
    {
      if (!*(_BYTE *)(a1 + 152) && *(_BYTE *)(a2 + 152))
        *(_BYTE *)(a1 + 152) = 1;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    }
    else
    {
      *(_BYTE *)(a1 + 152) = 0;
    }
  }
  if (a1 != a2)
  {
    v12 = *(_QWORD *)(a2 + 176);
    if (*(_QWORD *)(a1 + 176))
    {
      if (v12)
        re::DynamicArray<re::RigNodeChannel>::copy((void **)(a1 + 176), a2 + 176);
      else
        *(_QWORD *)(a1 + 192) = 0;
      ++*(_DWORD *)(a1 + 200);
    }
    else if (v12)
    {
      v13 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 176) = v12;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(a1 + 176), v13);
      ++*(_DWORD *)(a1 + 200);
      re::DynamicArray<re::RigNodeChannel>::copy((void **)(a1 + 176), a2 + 176);
    }
  }
  v14 = *(const void **)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v14;
  if (v14)
    CFRetain(v14);
  v15 = *(const void **)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v15;
  if (v15)
    CFRetain(v15);
  return a1;
}

uint64_t re::EventBus::getTypeId<REAnimationHasTimelineEventUpdate>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255833F80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255833F80))
  {
    qword_255833F78 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"33REAnimationHasTimelineEventUpdate" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_255833F80);
  }
  return qword_255833F78;
}

uint64_t re::EventBus::getTypeId<REAnimationHasTimelineEventEnd>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255833F90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255833F90))
  {
    qword_255833F88 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"30REAnimationHasTimelineEventEnd" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_255833F90);
  }
  return qword_255833F88;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventCreated>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255833FA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255833FA0))
  {
    qword_255833F98 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"31REAnimationTimelineEventCreated" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_255833FA0);
  }
  return qword_255833F98;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventTerminated>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255833FB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255833FB0))
  {
    qword_255833FA8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"34REAnimationTimelineEventTerminated" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_255833FB0);
  }
  return qword_255833FA8;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventSkipped>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255833FC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255833FC0))
  {
    qword_255833FB8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"31REAnimationTimelineEventSkipped" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_255833FC0);
  }
  return qword_255833FB8;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventPause>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255833FD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255833FD0))
  {
    qword_255833FC8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"29REAnimationTimelineEventPause" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_255833FD0);
  }
  return qword_255833FC8;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventResume>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_255833FE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255833FE0))
  {
    qword_255833FD8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"30REAnimationTimelineEventResume" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_255833FE0);
  }
  return qword_255833FD8;
}

uint64_t re::EventBus::getTypeId<REAnimationHasTerminatedEvent>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2558340A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558340A0))
  {
    qword_255834098 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"29REAnimationHasTerminatedEvent" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_2558340A0);
  }
  return qword_255834098;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6F098;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6F098;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 16;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6EC40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6EC40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6EC40;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6EC40;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6EC98;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6ECF0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6ED48;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6EDA0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6EC98;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6ECF0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6ED48;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6EDA0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6EC98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6EC98;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6ECF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6ECF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6ED48;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6ED48;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6EDA0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6EDA0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  if (a2)
  {
    v3 = *a2;
    if (*(_BYTE *)result)
    {
      v2 = *a2;
    }
    else
    {
      *(_BYTE *)result = 1;
      v2 = v3;
    }
    *(_OWORD *)(result + 8) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::destroy(double a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(a3, a1);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::init(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(a3, a1);
  *(_QWORD *)a3 = a4;
  result = re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((_QWORD *)a3, 0);
  ++*(_DWORD *)(a3 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, double a6)
{
  unint64_t v11;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v11 >= a5)
  {
    if (v11 > a5)
      re::DynamicArray<re::ecs2::AnimationComponentEntry>::resize(a4, a5, a6);
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  double v8;
  re::IntrospectionBase *v9;
  __int128 v11[2];
  __int128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  HIDWORD(v12) = 0x80000000;
  v14 = 0;
  v15 = 0;
  v13 = &str_240;
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::add(a4, v11);
  re::ecs2::AnimationComponentEntry::~AnimationComponentEntry((re::ecs2::AnimationComponentEntry *)v11, v8);
  v9 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 72 * *(_QWORD *)(a4 + 16) - 72);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 72 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 72 * a3;
}

uint64_t re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(uint64_t a1, double a2)
{
  uint64_t result;
  re::ecs2::AnimationComponentEntry *v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v4 = *(re::ecs2::AnimationComponentEntry **)(a1 + 32);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (v5)
      {
        v6 = 72 * v5;
        do
        {
          re::ecs2::AnimationComponentEntry::~AnimationComponentEntry(v4, a2);
          v4 = (re::ecs2::AnimationComponentEntry *)((char *)v4 + 72);
          v6 -= 72;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v4 = *(re::ecs2::AnimationComponentEntry **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::ecs2::AnimationComponentEntry *))(*(_QWORD *)result + 40))(result, v4);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  double v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          v2 = 72 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 72 * v9;
        v11 = v7;
        do
        {
          *((_BYTE *)v11 + 40) = 0;
          v11[4] = 0;
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          *((_WORD *)v11 + 12) = 0;
          *((_DWORD *)v11 + 11) = 0x80000000;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = &str_240;
          re::ecs2::AnimationComponentEntry::operator=((__int128 *)v11, v8);
          re::ecs2::AnimationComponentEntry::~AnimationComponentEntry((re::ecs2::AnimationComponentEntry *)v8, v12);
          v8 = (__int128 *)((char *)v8 + 72);
          v11 += 9;
          v10 -= 72;
        }
        while (v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__int128 *re::ecs2::AnimationComponentEntry::operator=(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;

  v4 = *a1;
  *(_QWORD *)a1 = 0;
  v5 = *((_QWORD *)a1 + 2);
  *(__int128 *)((char *)a1 + 8) = 0u;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v8 = *a2;
  *a2 = v4;
  v17 = v8;
  *((_QWORD *)a2 + 2) = v5;
  v18 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  v9 = *((_BYTE *)a1 + 24);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v9;
  v10 = *((_BYTE *)a1 + 25);
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a2 + 25) = v10;
  v11 = *((_QWORD *)a1 + 6);
  v12 = a1[2];
  v13 = *((_QWORD *)a2 + 6);
  a1[2] = a2[2];
  *((_QWORD *)a1 + 6) = v13;
  a2[2] = v12;
  *((_QWORD *)a2 + 6) = v11;
  v14 = *((_QWORD *)a1 + 7);
  v15 = *((_QWORD *)a1 + 8);
  *(__int128 *)((char *)a1 + 56) = 0u;
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = v14;
  *((_QWORD *)a2 + 8) = v15;
  return a1;
}

void re::DynamicArray<re::ecs2::AnimationComponentEntry>::resize(uint64_t a1, unint64_t a2, double a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return;
    v9 = 72 * a2;
    v10 = a2;
    do
    {
      re::ecs2::AnimationComponentEntry::~AnimationComponentEntry((re::ecs2::AnimationComponentEntry *)(*(_QWORD *)(a1 + 32) + v9), a3);
      ++v10;
      v9 += 72;
    }
    while (v10 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((_QWORD *)a1, a2);
      v5 = *(_QWORD *)(a1 + 16);
    }
    v6 = a2 - v5;
    if (a2 > v5)
    {
      v7 = 72 * v5;
      do
      {
        v8 = *(_QWORD *)(a1 + 32) + v7;
        *(_OWORD *)(v8 + 32) = 0uLL;
        *(_OWORD *)(v8 + 48) = 0uLL;
        *(_QWORD *)(v8 + 56) = 0;
        *(_QWORD *)(v8 + 64) = 0;
        *(_OWORD *)v8 = 0uLL;
        *(_OWORD *)(v8 + 16) = 0uLL;
        *(_DWORD *)(v8 + 44) = 0x80000000;
        *(_QWORD *)(v8 + 48) = &str_240;
        v7 += 72;
        --v6;
      }
      while (v6);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

__int128 *re::DynamicArray<re::ecs2::AnimationComponentEntry>::add(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::growCapacity((_QWORD *)a1, v4 + 1);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v5 = *(_QWORD *)(a1 + 32) + 72 * v4;
  *(_BYTE *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_WORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 44) = 0x80000000;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = &str_240;
  result = re::ecs2::AnimationComponentEntry::operator=((__int128 *)v5, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::AnimationComponentEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4, double a5)
{
  double v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear((re::ecs2::AnimationComponentEntry *)a1, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(a1, a5);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::resize(a1, a4, v9);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      v12 = *(char **)(a1 + 32);
      v13 = 72 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a3, 0);
        v12 += 72;
        v13 -= 72;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 72 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 72 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::AnimationEntry>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::AnimationEntry>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::AnimationEntry>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  re::IntrospectionBase *v8;
  __int128 v10[15];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  re::ecs2::AnimationEntry::AnimationEntry((re::ecs2::AnimationEntry *)v10);
  re::DynamicArray<re::ecs2::AnimationEntry>::add(a4, v10);
  re::ecs2::AnimationEntry::~AnimationEntry((id *)v10);
  v8 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 248 * *(_QWORD *)(a4 + 16) - 248);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 248 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 248 * a3;
}

uint64_t re::DynamicArray<re::ecs2::AnimationEntry>::deinit(uint64_t a1)
{
  uint64_t result;
  id *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(id **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 248 * v4;
        do
        {
          re::ecs2::AnimationEntry::~AnimationEntry(v3);
          v3 += 31;
          v5 -= 248;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(id **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::ecs2::AnimationEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 248 * a2;
    v9 = a2;
    do
    {
      re::ecs2::AnimationEntry::~AnimationEntry((id *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 248;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 248 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)(v7 + 240) = 0;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
        re::ecs2::AnimationEntry::AnimationEntry((re::ecs2::AnimationEntry *)v7);
        v6 += 248;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::AnimationEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 248 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 248;
        v11 -= 248;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 248 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 248 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

id re::internal::defaultRetain<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void re::ecs2::TextComponent::~TextComponent(id *this)
{
  id v2;
  id v3;
  id v4;
  CGColor *v5;

  *this = &off_24ED6F0F0;
  objc_msgSend(this[4], "invalidate");
  v2 = this[4];
  this[4] = 0;

  objc_msgSend(this[6], "invalidate");
  v3 = this[6];
  this[6] = 0;

  v4 = this[10];
  if (v4)
    CFRelease(v4);
  v5 = (CGColor *)this[11];
  if (v5)
    CGColorRelease(v5);

  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  re::ecs2::TextComponent::~TextComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::TextComponent::setSize(re::ecs2::TextComponent *this, const CGSize *a2)
{
  re::ecs2::TextComponent *v3;
  CGFloat width;
  double height;
  BOOL v6;
  double v7;
  NSObject *v8;
  CGFloat v9;
  NSObject *v10;
  CGFloat v11;
  int v12;
  CGFloat v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v3 = this;
  v16 = *MEMORY[0x24BDAC8D0];
  width = a2->width;
  height = a2->height;
  v6 = *((double *)this + 8) == a2->width && *((double *)this + 9) == height;
  v7 = a2->width;
  if (!v6)
  {
    this = (re::ecs2::TextComponent *)re::ecs2::Component::markDirty(this);
    v7 = a2->width;
  }
  if (v7 > 2048.0)
  {
    v8 = *re::ecsComponentsLogObjects(this);
    this = (re::ecs2::TextComponent *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)this)
    {
      v9 = a2->width;
      v12 = 134218240;
      v13 = v9;
      v14 = 1024;
      v15 = 2048;
      _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "Clamping TextComponent width from %f to %d. Larger sizes are not supported.", (uint8_t *)&v12, 0x12u);
    }
    width = 2048.0;
  }
  if (a2->height > 2048.0)
  {
    v10 = *re::ecsComponentsLogObjects(this);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = a2->height;
      v12 = 134218240;
      v13 = v11;
      v14 = 1024;
      v15 = 2048;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Clamping TextComponent height from %f to %d. Larger sizes are not supported.", (uint8_t *)&v12, 0x12u);
    }
    height = 2048.0;
  }
  *((CGFloat *)v3 + 8) = width;
  *((double *)v3 + 9) = height;
}

void re::ecs2::TextComponent::setAttributedString(re::ecs2::TextComponent *this, const __CFAttributedString *a2)
{
  const void *v4;

  if (*((const __CFAttributedString **)this + 10) != a2)
  {
    re::ecs2::Component::markDirty(this);
    v4 = (const void *)*((_QWORD *)this + 10);
    if (v4)
      CFRelease(v4);
    *((_QWORD *)this + 10) = a2;
    if (a2)
      CFRetain(a2);
  }
}

CGColorRef re::ecs2::TextComponent::setBackgroundColor(CGColorRef this, CGColor *a2)
{
  CGColor *v2;
  _QWORD *v3;
  const __CFString *v4;
  const void *v5;

  v2 = a2;
  v3 = this;
  if (!a2)
  {
    v4 = (const __CFString *)*MEMORY[0x24BDBF208];
    do
      this = CGColorGetConstantColor(v4);
    while (!this);
    v2 = this;
  }
  if ((CGColor *)v3[11] != v2)
  {
    re::ecs2::Component::markDirty(v3);
    v5 = (const void *)v3[11];
    if (v5)
      CFRelease(v5);
    v3[11] = v2;
    return (CGColorRef)CFRetain(v2);
  }
  return this;
}

float re::ecs2::TextComponent::edgeInsets(re::ecs2::TextComponent *this)
{
  return *((float *)this + 25);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::initComponentType(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  re::ecs2::ComponentTypeRegistry *v9;
  char *v10;
  uint64_t result;
  StringID v12;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::TextComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"TextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TextComponent>, 0);
  }
  re::getPrettyTypeName((re *)re::introspect<re::ecs2::TextComponent>(void)::info, (const re::IntrospectionBase *)&v15);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v15, "Component", v13);
  if (v13[0])
  {
    v4 = (v16[0] & 1) != 0 ? v16[0] >> 1 : LOBYTE(v16[0]) >> 1;
    if (v14 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v15, 0, v14, (re::DynamicString *)&v12);
      re::DynamicString::operator=((re::DynamicString *)&v15, (re::DynamicString *)&v12);
      v3 = *(re **)&v12.var0;
      if (*(_QWORD *)&v12.var0)
      {
        if (((uint64_t)v12.var1 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v12.var0 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = v6;
  if ((v16[0] & 1) != 0)
    v8 = (const char *)v16[1];
  else
    v8 = (char *)v16 + 1;
  *(_QWORD *)&v12.var0 = 0;
  v12.var1 = (char *)&str_110;
  re::ecs2::ComponentType<re::ecs2::TextComponent>::ComponentType((uint64_t)v7, &v12, a1, 4);
  re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v10 = re::ecs2::ComponentTypeRegistry::instance(v9);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v10, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  result = v15;
  if (v15)
  {
    if ((v16[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

re::ecs2::TextComponent *re::ecs2::TextComponent::clone(re::ecs2::TextComponent *this, const re::ecs2::Component *a2)
{
  re::ecs2::TextComponent *v3;
  float v4;
  void *v5;
  void *v6;
  void *v7;
  re::ecs2::TextComponent *v9[2];

  (*(void (**)(re::ecs2::TextComponent **__return_ptr))(*(_QWORD *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                 + 32))(v9);
  v3 = v9[0];
  *(_OWORD *)v9 = *((_OWORD *)this + 4);
  re::ecs2::TextComponent::setSize(v3, (const CGSize *)v9);
  re::ecs2::TextComponent::setAttributedString(v3, *((const __CFAttributedString **)this + 10));
  re::ecs2::TextComponent::setBackgroundColor(v3, *((CGColor **)this + 11));
  v4 = *((float *)this + 24);
  if (*((float *)v3 + 24) != v4)
    re::ecs2::Component::markDirty(v3);
  *((float *)v3 + 24) = v4;
  v5 = _Block_copy(*((const void **)this + 15));
  v6 = _Block_copy(v5);
  v7 = (void *)*((_QWORD *)v3 + 15);
  *((_QWORD *)v3 + 15) = v6;

  return v3;
}

uint64_t re::ecs2::TextComponentStateImpl::dependsOnComponents(re::ecs2::TextComponentStateImpl *this)
{
  return *((_QWORD *)this + 8);
}

re::ecs2::TextSystem *re::ecs2::TextComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  float v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  re *v32;
  unint64_t v33;
  size_t v36;
  size_t v37;
  CGColorSpace *v38;
  CGContext *v39;
  re *v40;
  CGImage *v41;
  re *v42;
  id v43;
  _anonymous_namespace_ *v44;
  const re::ImportGraphicsContext *v45;
  id v46;
  re *v47;
  NSObject *v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  _QWORD *v54;
  float32x2_t *v55;
  float32_t v56;
  float64x2_t v57;
  _QWORD *v58;
  re::ecs2::NetworkComponent *v59;
  const re::ecs2::Component *v60;
  re *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t TextureAsset;
  re::TextureAsset *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  re::ecs2::NetworkComponent *v71;
  re::ecs2::TextSystem *v73;
  float64x2_t v74;
  const re::TextureHandle *v75;
  uint64_t TextureCompressionType;
  id v77;
  void **v78;
  const __CFString *name;
  re::ecs2::EntityComponentCollection *image;
  _QWORD *v81;
  _DWORD *v82;
  id v83;
  _QWORD v84[6];
  id v85;
  id v86[4];
  id v87;
  uint64_t v88;
  id v89;
  char v90;
  id v91[4];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unsigned int v95;
  id v96;
  _BYTE v97[12];
  __int128 v98;
  _BYTE v99[10];
  int v100;
  char v101;
  int v102;
  char v103;
  int v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v91, (uint64_t)a5, 0);
  v82 = v91[0];
  v83 = v91[1];
  if (v91[0] == a5 && LOWORD(v91[1]) == 0xFFFFLL && ((uint64_t)v91[1] & 0xFFFF0000) == 4294901760)
    return (re::ecs2::TextSystem *)(a5[10] != 0);
  v78 = (void **)(a1 + 16);
  name = (const __CFString *)*MEMORY[0x24BDBF318];
  v75 = (const re::TextureHandle *)(a1 + 24);
  v11 = 0x24BDE5000uLL;
  v74 = (float64x2_t)vdupq_n_s64(0x3F371EA104B00977uLL);
  while (1)
  {
    v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v82);
    if (!*(_BYTE *)(a1 + 40))
      break;
LABEL_19:
    v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v82);
    re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v33, *(_QWORD *)(a3 + 32));
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v82);
    if (v82 == a5 && (unsigned __int16)v83 == 0xFFFF && WORD1(v83) == 0xFFFF)
      return (re::ecs2::TextSystem *)(a5[10] != 0);
  }
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD **)(*(_QWORD *)v12 + 16);
  +[RETextLayer layer](RETextLayer, "layer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setName:", CFSTR("TextComponent Text Layer"));
  objc_msgSend(v15, "setValue:forKeyPath:", MEMORY[0x24BDBD1C8], CFSTR("separatedOptions.enableContext"));
  if (*(_BYTE *)(a1 + 40))
  {
    v84[1] = 0;
    v84[2] = 0;
    v84[0] = 0x3FF0000000000000;
    v84[3] = 0xBFF0000000000000;
    v84[4] = 0;
    v84[5] = 0;
    objc_msgSend(v15, "setAffineTransform:", v84);
  }
  v16 = _Block_copy(*(const void **)(v13 + 120));

  if (v16)
    objc_msgSend(v15, "setGeometryFlipped:", 1);
  objc_msgSend(MEMORY[0x24BDE56C8], "layer");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setName:", CFSTR("Parent of TextComponent Layer"));
  objc_msgSend(v17, "addSublayer:", v15);
  v18 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v17;

  objc_msgSend(*(id *)(v11 + 2000), "begin");
  objc_msgSend(*(id *)(v11 + 2000), "setDisableActions:", 1);
  v20 = *(double *)(v13 + 64);
  v19 = *(double *)(v13 + 72);
  v21 = *(float *)(v13 + 96);
  v22 = *(unsigned __int8 *)(a1 + 40);
  v23 = *(id *)(v13 + 40);
  v24 = v23;
  if (v22)
  {
    objc_msgSend(v23, "setContentsScale:", 2.0);
    objc_msgSend(*(id *)(v13 + 56), "setFrame:", 0.0, 0.0, v20, v19);
  }
  else
  {
    objc_msgSend(v23, "sublayers");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "objectAtIndex:", 0);
    v26 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "setFrame:", 0.0, 0.0, v20, v19);
    objc_msgSend(v24, "setContentsScale:", 2.0);

    v24 = (void *)v26;
  }
  objc_msgSend(v24, "setFrame:", 0.0, 0.0, v20, v19);
  objc_msgSend(v24, "setAttributedString:", *(_QWORD *)(v13 + 80));
  objc_msgSend(v24, "setBackgroundColor:", *(_QWORD *)(v13 + 88));
  LODWORD(v27) = *(_DWORD *)(v13 + 100);
  LODWORD(v28) = *(_DWORD *)(v13 + 104);
  LODWORD(v29) = *(_DWORD *)(v13 + 108);
  LODWORD(v30) = *(_DWORD *)(v13 + 112);
  objc_msgSend(v24, "setEdgeInsets:", v27, v28, v29, v30);
  v31 = _Block_copy(*(const void **)(v13 + 120));
  objc_msgSend(v24, "setRenderBlock:", v31);

  objc_msgSend(v24, "setNeedsDisplay");
  v32 = (re *)objc_msgSend(*(id *)(v11 + 2000), "commit");
  if (*(_BYTE *)(a1 + 40))
  {
LABEL_18:

    v11 = 0x24BDE5000;
    goto LABEL_19;
  }
  v81 = v14;
  v36 = vcvtpd_u64_f64(v20);
  v37 = vcvtpd_u64_f64(v19);
  if (!(v37 * v36))
  {
    v48 = *re::ecsComponentsLogObjects(v32);
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    LODWORD(v91[0]) = 134218240;
    *(id *)((char *)v91 + 4) = (id)v36;
    WORD2(v91[1]) = 2048;
    *(id *)((char *)&v91[1] + 6) = (id)v37;
    v49 = v48;
    v50 = "TextComponent attempted to create an empty context size of (%lu x %lu)";
LABEL_47:
    _os_log_impl(&dword_224FE9000, v49, OS_LOG_TYPE_DEFAULT, v50, (uint8_t *)v91, 0x16u);
    goto LABEL_18;
  }
  v38 = CGColorSpaceCreateWithName(name);
  v39 = CGBitmapContextCreate(0, v36, v37, 8uLL, 4 * v36, v38, 1u);
  CGColorSpaceRelease(v38);
  if (!v39)
  {
    v51 = *re::ecsComponentsLogObjects(v40);
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    LODWORD(v91[0]) = 134218240;
    *(id *)((char *)v91 + 4) = (id)v36;
    WORD2(v91[1]) = 2048;
    *(id *)((char *)&v91[1] + 6) = (id)v37;
    v49 = v51;
    v50 = "TextComponent failed to create a context size of (%lu x %lu)";
    goto LABEL_47;
  }
  objc_msgSend(*(id *)(v13 + 40), "renderInContext:", v39);
  v41 = CGBitmapContextCreateImage(v39);
  CGContextRelease(v39);
  if (!v41)
  {
    v52 = *re::ecsComponentsLogObjects(v42);
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    LODWORD(v91[0]) = 134218240;
    *(id *)((char *)v91 + 4) = (id)v36;
    WORD2(v91[1]) = 2048;
    *(id *)((char *)&v91[1] + 6) = (id)v37;
    v49 = v52;
    v50 = "TextComponent failed to create an image of a given bitmap context of size (%lu x %lu)";
    goto LABEL_47;
  }
  v77 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 184);
  v88 = 0;
  v89 = v77;
  v91[0] = 0;
  *(_QWORD *)v97 = 0;
  TextureCompressionType = re::mtl::getTextureCompressionType(&v89, &v88, v91, v97);
  v43 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  v87 = v43;
  objc_msgSend(v43, sel_setStorageMode_, 0);
  if ((objc_msgSend(v43, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v43, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v43, sel_setCompressionType_, TextureCompressionType);
  }
  memset(v97, 0, sizeof(v97));
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  *(_QWORD *)v99 = 0;
  v99[8] = 0;
  v104 = 6;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v98 = 0x100000001uLL;
  v44 = re::ImportGraphicsContext::createFromRenderManager(*(re::ImportGraphicsContext **)(*(_QWORD *)(a1 + 8) + 112), (re::ImportGraphicsContext *)v86);
  v45 = CGImageRetain(v41);
  if (!v95)
  {
    v46 = v91[1];
    v85 = v46;

    if (v95 != -1)
      v47 = (re *)((uint64_t (*)(char *, id *))*(&off_24ED6F258 + v95))(&v90, &v91[1]);
    if (v46)
    {
      NS::SharedPtr<MTL::Texture>::operator=(v78, &v85);
      if (*(_QWORD *)(a1 + 32) && *(_QWORD *)v75)
      {
        re::TextureHandle::setMetalTexture(v75, v78);
      }
      else
      {
        re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 64), v78, (os_unfair_lock_s **)v91);
        re::TextureHandle::operator=(v75, (re::TextureHandle *)v91);
        re::TextureHandle::invalidate((re::TextureHandle *)v91);
      }
    }
    else
    {
      v53 = *re::ecsComponentsLogObjects(v47);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v91[0]) = 0;
        _os_log_impl(&dword_224FE9000, v53, OS_LOG_TYPE_DEFAULT, "TextComponent failed to convert a CGImage to an mtl::Texture", (uint8_t *)v91, 2u);
      }
    }
    if (v85)

    if (v87)
    CGImageRelease(v41);
    v54 = v81;
    image = (re::ecs2::EntityComponentCollection *)(v81 + 4);
    v55 = (float32x2_t *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v81 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v56 = (double)v36 * 0.000352777778;
    v57.f64[0] = (double)v37;
    v57.f64[1] = v21;
    v55[4].f32[1] = v56;
    v55[5] = vcvt_f32_f64(vmulq_f64(v57, v74));
    v55[4].i16[0] = 32;
    v55[6].i32[1] = 4;
    re::ecs2::Component::markDirty(v55);
    v58 = (_QWORD *)v81[22];
    if (!v58)
      v58 = (_QWORD *)re::ecs2::EntityComponentCollection::add(image, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!v58[9])
    {
      (*(void (**)(id *__return_ptr, _QWORD, const char *))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 120) + 8))(v91, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120), "engine:transparentUnlitNoTonemap.rematerial");
      v54 = v81;
      re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v58 + 7), (re::AssetHandle *)v91);
      re::ecs2::Component::markDirty(v58);
      v59 = (re::ecs2::NetworkComponent *)v81[25];
      if (v59
        || (v59 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(image, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) != 0)
      {
        re::ecs2::NetworkComponent::markDirty(v59, (const re::ecs2::Component *)v58);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v91);
    }
    v60 = (const re::ecs2::Component *)v54[24];
    if (!v60)
      v60 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::add(image, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!*((_QWORD *)v60 + 6))
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)v60 + 32, 1uLL);
      if (!*((_QWORD *)v60 + 6))
        goto LABEL_76;
      v62 = *((_QWORD *)v60 + 8);
      v63 = re::globalAllocators(v61);
      v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63[2] + 32))(v63[2], 408, 8);
      *(_OWORD *)v64 = 0u;
      *(_OWORD *)(v64 + 16) = 0u;
      *(_OWORD *)(v64 + 32) = 0u;
      *(_OWORD *)(v64 + 48) = 0u;
      *(_OWORD *)(v64 + 64) = 0u;
      *(_OWORD *)(v64 + 80) = 0u;
      *(_OWORD *)(v64 + 96) = 0u;
      *(_OWORD *)(v64 + 112) = 0u;
      *(_OWORD *)(v64 + 128) = 0u;
      *(_OWORD *)(v64 + 144) = 0u;
      *(_OWORD *)(v64 + 160) = 0u;
      *(_OWORD *)(v64 + 176) = 0u;
      *(_OWORD *)(v64 + 192) = 0u;
      *(_OWORD *)(v64 + 208) = 0u;
      *(_OWORD *)(v64 + 224) = 0u;
      *(_OWORD *)(v64 + 240) = 0u;
      *(_OWORD *)(v64 + 256) = 0u;
      *(_OWORD *)(v64 + 272) = 0u;
      *(_OWORD *)(v64 + 288) = 0u;
      *(_OWORD *)(v64 + 304) = 0u;
      *(_OWORD *)(v64 + 320) = 0u;
      *(_OWORD *)(v64 + 336) = 0u;
      *(_OWORD *)(v64 + 352) = 0u;
      *(_OWORD *)(v64 + 368) = 0u;
      *(_OWORD *)(v64 + 384) = 0u;
      *(_QWORD *)(v64 + 400) = 0;
      re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v64);
      ++*(_DWORD *)(v62 + 16);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v62, v64);
      *(_QWORD *)(v62 + 8) = 0;

    }
    LOBYTE(v91[0]) = 0;
    v91[1] = *v78;
    v95 = 0;
    v96 = 0;
    *(_QWORD *)((char *)&v98 + 5) = 0;
    *(_QWORD *)&v98 = 0;
    *(_DWORD *)v97 = 16777473;
    v97[4] = 1;
    *(_DWORD *)&v97[8] = 1;
    *(_DWORD *)v99 = 0;
    TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v91, 6, (__int128 *)v97);

    if (v95 != -1)
      v66 = (re::TextureAsset *)((uint64_t (*)(_BYTE *, id *))*(&off_24ED6F258 + v95))(v97, &v91[1]);
    v67 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120);
    v68 = re::TextureAsset::assetType(v66);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v67
                                                                                                  + 416))(v86, v67, TextureAsset, v68, 0, 0, 0);
    if (!*((_QWORD *)v60 + 6))
    {
      v89 = 0;
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      memset(v91, 0, sizeof(v91));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v97 = 136315906;
      *(_QWORD *)&v97[4] = "operator[]";
      LOWORD(v98) = 1024;
      *(_DWORD *)((char *)&v98 + 2) = 789;
      WORD3(v98) = 2048;
      *((_QWORD *)&v98 + 1) = 0;
      *(_WORD *)v99 = 2048;
      *(_QWORD *)&v99[2] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_76:
      v86[0] = 0;
      v93 = 0u;
      v94 = 0u;
      v92 = 0u;
      memset(v91, 0, sizeof(v91));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v97 = 136315906;
      *(_QWORD *)&v97[4] = "operator[]";
      LOWORD(v98) = 1024;
      *(_DWORD *)((char *)&v98 + 2) = 789;
      WORD3(v98) = 2048;
      *((_QWORD *)&v98 + 1) = 0;
      *(_WORD *)v99 = 2048;
      *(_QWORD *)&v99[2] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v69 = *((_QWORD *)v60 + 8);
    ++*(_DWORD *)(v69 + 16);
    v70 = *(_QWORD *)v69;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v91, (const re::AssetHandle *)v86);
    re::ecs2::SerializableMaterialParameterBlock::setTexture(v70, "textureBaseColor", (const re::AssetHandle *)v91);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v91);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)v60);
    v71 = (re::ecs2::NetworkComponent *)v81[25];
    if (v71
      || (v71 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(image, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) != 0)
    {
      re::ecs2::NetworkComponent::markDirty(v71, (const re::ecs2::Component *)v55);
      re::ecs2::NetworkComponent::markDirty(v71, v60);
      re::ecs2::NetworkComponent::markDirty(v71, (const re::ecs2::Component *)v13);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v86);
    goto LABEL_18;
  }
  v73 = (re::ecs2::TextSystem *)std::__throw_bad_variant_access[abi:nn180100]();
  return re::ecs2::TextSystem::TextSystem(v73);
}

re::ecs2::TextSystem *re::ecs2::TextSystem::TextSystem(re::ecs2::TextSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED6F180;
  *(_QWORD *)(v2 + 160) = &off_24ED6F140;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 208) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 21) = this;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_BYTE *)this + 200) = 0;
  v10 = 1;
  v11[0] = re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9 = v11;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 208), (uint64_t)&v9);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 62) = 1;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 1;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 104) = 1;
  *(_OWORD *)((char *)this + 449) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 44, 0);
  *((_DWORD *)this + 92) += 2;
  *((_QWORD *)this + 49) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 50, 0);
  *((_DWORD *)this + 104) += 2;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = this;
  *((_QWORD *)this + 57) = v3;
  *((_BYTE *)this + 464) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  LOBYTE(v10) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v9);
  return this;
}

double re::ecs2::TextSystem::willAddSceneToECSService(re::ecs2::TextSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  uint64_t v49;
  double result;
  re::ecs2::Scene *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  int v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  unint64_t v68;
  _OWORD v69[5];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = (char *)this + 232;
    v51 = a2;
    v5 = (re::ecs2::TextSystem *)((char *)this + 352);
    v6 = *((_QWORD *)this + 45);
    v7 = *((_DWORD *)this + 92);
    if (v6 >= 0xB)
    {
      if ((v7 & 1) != 0)
        v8 = (_QWORD *)((char *)this + 376);
      else
        v8 = (_QWORD *)*((_QWORD *)this + 48);
      v10 = 8 * v6;
      while (!*v8)
      {
        ++v8;
        v10 -= 8;
        if (!v10)
          goto LABEL_18;
      }
      goto LABEL_17;
    }
    if ((v7 & 1) != 0)
    {
      v9 = (uint64_t *)((char *)this + 376);
      if (!v6)
        goto LABEL_18;
    }
    else
    {
      v9 = (uint64_t *)*((_QWORD *)this + 48);
      if (!v6)
        goto LABEL_18;
    }
    v11 = 0;
    v12 = 8 * v6;
    do
    {
      v13 = *v9++;
      v11 |= v13;
      v12 -= 8;
    }
    while (v12);
    if (v11)
    {
LABEL_17:
      *(_QWORD *)&v53 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 352, 0);
      v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v53);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::TextSystem *)((char *)this + 288), &v51, (uint64_t *)&v53);
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v53);
      v15 = (char *)this + 400;
      v16 = v53;
      goto LABEL_50;
    }
LABEL_18:
    v60 = 0u;
    v53 = 0u;
    *(_QWORD *)&v54 = 0;
    *((_QWORD *)&v54 + 1) = -1;
    v55 = 0u;
    v56 = 0u;
    v57 = 0;
    v58 = 1;
    v59 = 0uLL;
    v17 = *((_QWORD *)this + 34);
    *(_QWORD *)&v60 = 0;
    v18 = *((_QWORD *)this + 30);
    DWORD2(v60) = 0;
    if (v17 + 1 > 4 * v18)
    {
      re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::setBucketsCapacity((_QWORD *)this + 29, (v17 + 4) >> 2);
      v18 = *((_QWORD *)this + 30);
    }
    if (v18 <= v17 >> 2)
    {
      v52 = 0;
      memset(v69, 0, sizeof(v69));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v61 = 136315906;
      v62 = "operator[]";
      v63 = 1024;
      v64 = 858;
      v65 = 2048;
      v66 = v17 >> 2;
      v67 = 2048;
      v68 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if ((*((_BYTE *)this + 248) & 1) != 0)
        v19 = (char *)this + 256;
      else
        v19 = (char *)*((_QWORD *)this + 33);
      v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
      ++*((_QWORD *)this + 34);
      ++*((_DWORD *)this + 70);
      v21 = v20 + 112 * (v17 & 3);
      v22 = v53;
      v23 = v54;
      v24 = v55;
      *(_QWORD *)(v21 + 48) = v56;
      *(_OWORD *)(v21 + 16) = v23;
      *(_OWORD *)(v21 + 32) = v24;
      *(_OWORD *)v21 = v22;
      re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v56 + 8);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v53);
      v26 = *((_QWORD *)this + 34);
      if (v26)
      {
        v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
        re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::init(v27, (uint64_t)v4, (uint64_t)v51);
        *(_QWORD *)&v69[0] = *((_QWORD *)this + 34) - 1;
        re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::TextSystem *)((char *)this + 288), &v51, (uint64_t *)v69);
        v28 = *((_QWORD *)this + 34);
        v29 = *((_QWORD *)this + 49);
        if ((v28 & 0x3F) != 0)
          v30 = (v28 >> 6) + 1;
        else
          v30 = v28 >> 6;
        *((_QWORD *)this + 49) = v28;
        *(_QWORD *)&v53 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v53);
        if (v28 && v29 > v28)
        {
          v31 = 63;
          v32 = *((_QWORD *)this + 49) & 0x3FLL;
          if (v32 && v32 != 63)
            v31 = ~(-1 << v32);
          if ((*((_BYTE *)this + 368) & 1) != 0)
            v33 = (char *)this + 376;
          else
            v33 = (char *)*((_QWORD *)this + 48);
          *(_QWORD *)&v33[8 * *((_QWORD *)this + 45) - 8] &= v31;
        }
        v34 = *((_QWORD *)this + 34);
        v35 = *((_QWORD *)this + 55);
        if ((v34 & 0x3F) != 0)
          v36 = (v34 >> 6) + 1;
        else
          v36 = v34 >> 6;
        *((_QWORD *)this + 55) = v34;
        *(_QWORD *)&v53 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::TextSystem *)((char *)this + 400), v36, &v53);
        if (v34 && v35 > v34)
        {
          v37 = 63;
          v38 = *((_QWORD *)this + 55) & 0x3FLL;
          if (v38 && v38 != 63)
            v37 = ~(-1 << v38);
          if ((*((_BYTE *)this + 416) & 1) != 0)
            v39 = (char *)this + 424;
          else
            v39 = (char *)*((_QWORD *)this + 54);
          *(_QWORD *)&v39[8 * *((_QWORD *)this + 51) - 8] &= v37;
        }
        v16 = *(_QWORD *)&v69[0];
        v15 = (char *)this + 400;
LABEL_50:
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
        if (*((_BYTE *)this + 464))
        {
          v40 = *((_QWORD *)this + 51);
          v41 = *((_DWORD *)this + 104);
          if (v40 >= 0xB)
          {
            if ((v41 & 1) != 0)
              v42 = (_QWORD *)((char *)this + 424);
            else
              v42 = (_QWORD *)*((_QWORD *)this + 54);
            v44 = 8 * v40;
            while (!*v42)
            {
              ++v42;
              v44 -= 8;
              if (!v44)
                goto LABEL_68;
            }
LABEL_66:
            v48 = (re::ecs2::System *)*((_QWORD *)this + 56);
            if (!*((_BYTE *)v48 + 86))
              re::ecs2::System::queueToRun(v48, 0.0);
            goto LABEL_68;
          }
          if ((v41 & 1) == 0)
          {
            v43 = (uint64_t *)*((_QWORD *)this + 54);
            if (!v40)
              goto LABEL_68;
LABEL_63:
            v45 = 0;
            v46 = 8 * v40;
            do
            {
              v47 = *v43++;
              v45 |= v47;
              v46 -= 8;
            }
            while (v46);
            if (!v45)
              goto LABEL_68;
            goto LABEL_66;
          }
          v43 = (uint64_t *)((char *)this + 424);
          if (v40)
            goto LABEL_63;
        }
LABEL_68:
        v49 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        *(_QWORD *)&v53 = this;
        *((_QWORD *)&v53 + 1) = re::ecs2::TextSystem::willRemoveComponents;
        *(_QWORD *)&v54 = 0;
        *((_QWORD *)&v54 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::TextSystem>(re::ecs2::TextSystem *,REEventHandlerResult (re::ecs2::TextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
        return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(v49 + 392, (uint64_t)&v53);
      }
    }
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v51, v52);
    _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::TextSystem::willRemoveComponents()
{
  return 0;
}

void re::ecs2::TextSystem::willRemoveSceneFromECSService(re::ecs2::TextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::ComponentBucketsBase *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_QWORD *)&v18 = a2;
    v4 = (uint64_t *)((char *)this + 288);
    v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 36, &v18);
    if (v5 != -1)
    {
      v6 = *((_QWORD *)this + 37) + 16 * v5;
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 352, *(_QWORD *)(v6 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 400, *(_QWORD *)(v6 + 8));
      v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 232, *(_QWORD *)(v6 + 8));
      if (*v7)
      {
        v8 = v7;
        *v7 = 0;
        v9 = v7 + 1;
        v10 = *(_QWORD *)(v7[1] + 288);
        if (v10)
        {
          v11 = v7[12];
          if (v11)
          {
            for (i = 0; i != v11; ++i)
            {
              v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
              re::EventBus::unsubscribe(v10, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
        v14 = 0;
        v15 = v8 + 3;
        do
        {
          v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
          if (*(_QWORD *)v16)
            re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
          v15[v14++] = -1;
        }
        while (v14 != 4);
        *v9 = 0;
        v9[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v4, &v18);
    }
    v17 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v18 = this;
    *((_QWORD *)&v18 + 1) = re::ecs2::TextSystem::willRemoveComponents;
    v19 = 0;
    v20 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::TextSystem>(re::ecs2::TextSystem *,REEventHandlerResult (re::ecs2::TextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(v17 + 392, &v18);
  }
}

uint64_t re::ecs2::TextSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::System *v26;
  uint64_t v28;
  uint64_t v29[2];
  _QWORD v30[2];
  uint64_t v31;

  v30[0] = a3;
  v30[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v29);
  if (*(_QWORD *)(a1 + 112))
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      v7 = *(uint64_t **)a2;
      v28 = *(_QWORD *)a2 + 8 * v6;
      while (1)
      {
        v31 = *v7;
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 296)
                       + 16
                       * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 288), &v31)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 400, v8);
        v9 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 232, v8);
        v10 = *(_QWORD *)(*v9 + 224);
        v11 = v9[3];
        v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
        if (*(_DWORD *)(v12 + 40))
          v13 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, v30, v9, v11, v12, 0);
        else
          v13 = 0;
        v14 = v9[5];
        v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
        if (*(_DWORD *)(v15 + 40))
          v13 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v30, v9, v14, v15, 0);
        v16 = v9[6];
        v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
        if (*(_DWORD *)(v17 + 40))
          break;
        if (v13)
          goto LABEL_11;
LABEL_12:
        if (*(_BYTE *)(a1 + 464))
        {
          v18 = *(_QWORD *)(a1 + 408);
          v19 = *(_DWORD *)(a1 + 416);
          if (v18 < 0xB)
          {
            v22 = (uint64_t *)(a1 + 424);
            if ((v19 & 1) == 0)
              v22 = *(uint64_t **)(a1 + 432);
            if (!v18)
              goto LABEL_30;
            v23 = 0;
            v24 = 8 * v18;
            do
            {
              v25 = *v22++;
              v23 |= v25;
              v24 -= 8;
            }
            while (v24);
            if (!v23)
              goto LABEL_30;
          }
          else
          {
            v20 = (_QWORD *)(a1 + 424);
            if ((v19 & 1) == 0)
              v20 = *(_QWORD **)(a1 + 432);
            v21 = 8 * v18;
            while (!*v20)
            {
              ++v20;
              v21 -= 8;
              if (!v21)
                goto LABEL_30;
            }
          }
          v26 = *(re::ecs2::System **)(a1 + 448);
          if (!*((_BYTE *)v26 + 86))
            re::ecs2::System::queueToRun(v26, 0.0);
        }
LABEL_30:
        if (++v7 == (uint64_t *)v28)
          return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
      }
      if (((v13 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, v30, v9, v16, v17, 0)) & 1) == 0)goto LABEL_12;
LABEL_11:
      re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 400, v8);
      goto LABEL_12;
    }
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
}

uint64_t *re::ecs2::allocInfo_TextSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_245);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_245))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834678, 0);
    *(uint64_t *)((char *)&qword_255834688 + 6) = 0;
    qword_255834688 = 0;
    qword_255834698 = 0;
    qword_2558346A0 = 0xFFFFFFFFLL;
    qword_255834678 = (uint64_t)&off_24ED7DAA8;
    qword_2558346A8 = (uint64_t)"TextSystem";
    dword_2558346B0 = 0;
    xmmword_2558346B8 = 0u;
    unk_2558346C8 = 0u;
    xmmword_2558346D8 = 0u;
    qword_2558346E8 = 0;
    __cxa_guard_release(&_MergedGlobals_245);
  }
  return &qword_255834678;
}

void re::ecs2::initInfo_TextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x106ABBCAF453B8;
  v5[1] = "TextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1D800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_TextSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::TextSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::TextSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TextSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::TextSystem *re::internal::defaultConstruct<re::ecs2::TextSystem>(int a1, int a2, re::ecs2::TextSystem *this)
{
  return re::ecs2::TextSystem::TextSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::TextSystem>(uint64_t a1, uint64_t a2, re::ecs2::TextSystem *a3)
{
  re::ecs2::TextSystem::~TextSystem(a3);
}

uint64_t re::ecs2::introspect_TextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TextSystem>, this);
}

uint64_t *re::ecs2::allocInfo_TextComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_255834670);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255834670))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558346F0, 0);
    *(uint64_t *)((char *)&qword_255834700 + 6) = 0;
    qword_255834700 = 0;
    qword_255834710 = 0;
    qword_255834718 = 0xFFFFFFFFLL;
    qword_2558346F0 = (uint64_t)&off_24ED7DAA8;
    qword_255834720 = (uint64_t)"TextComponent";
    dword_255834728 = 0;
    xmmword_255834730 = 0u;
    unk_255834740 = 0u;
    xmmword_255834750 = 0u;
    qword_255834760 = 0;
    __cxa_guard_release(&qword_255834670);
  }
  return &qword_2558346F0;
}

void re::ecs2::initInfo_TextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x76749A51D9215460;
  v10[1] = "TextComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_255834668);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_255834668);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_255834660 = v8;
      __cxa_guard_release(&qword_255834668);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_255834660;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::TextComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::TextComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TextComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

__n128 re::internal::defaultConstruct<re::ecs2::TextComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  __n128 result;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED6F0F0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  result = *(__n128 *)MEMORY[0x24BDBF148];
  *(_QWORD *)(v3 + 120) = 0;
  *(__n128 *)(v3 + 64) = result;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

__n128 re::internal::defaultConstructV2<re::ecs2::TextComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  __n128 result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED6F0F0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  result = *(__n128 *)MEMORY[0x24BDBF148];
  *(_QWORD *)(v1 + 120) = 0;
  *(__n128 *)(v1 + 64) = result;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TextComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::TextComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::TextComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::TextComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::TextSystem::~TextSystem(re::ecs2::TextSystem *this)
{
  re::ecs2::TextSystem::~TextSystem(this);
  JUMPOUT(0x2276933B8);
}

{
  char *v2;
  uint64_t v3;
  void *v4;

  v2 = (char *)this + 232;
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 232);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 288);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 352);
  *((_QWORD *)this + 49) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 400);
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 400);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 352);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 288);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  *((_QWORD *)this + 20) = &off_24ED6F140;
  v3 = *((_QWORD *)this + 26);
  if (v3)
  {
    if (*((_QWORD *)this + 27))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 28));
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
  re::TextureHandle::invalidate((re::ecs2::TextSystem *)((char *)this + 184));
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {

    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::TextSystem::typeInfo(re::ecs2::TextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TextSystem>, 0);
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::ComponentType(uint64_t a1, const StringID *a2, uint64_t a3, int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24ED6F278;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(a1 + 32), (const char *)0x80);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::TextComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"TextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TextComponent>, 0);
  }
  v8 = re::introspect<re::ecs2::TextComponent>(void)::info;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  v9 = (char *)v8[6];
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v18[0] = 2 * v10;
  v18[1] = v9;
  v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
  if (v14)
  {
    v15 = *v14;
  }
  else
  {
    v16 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  re::StringID::destroyString((re::StringID *)v18);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  return a1;
}

double re::ecs2::ComponentType<re::ecs2::TextComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::TextComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::TextComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

__n128 re::ecs2::ComponentType<re::ecs2::TextComponent>::doMakeComponent@<Q0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  __n128 result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 128, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED6F0F0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  result = *(__n128 *)MEMORY[0x24BDBF148];
  *(_QWORD *)(v3 + 120) = 0;
  *(__n128 *)(v3 + 64) = result;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED6F2E8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

void *re::ecs2::ComponentType<re::ecs2::TextComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::ecs2::TextComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"TextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TextComponent>, 0);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[473];
}

__n128 re::ecs2::ComponentType<re::ecs2::TextComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::TextComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED6F278;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TextComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TextComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TextComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TextComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TextComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TextComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TextComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TextComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED6F2E8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6F390;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6F3E8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6F440;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6F498;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6F390;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6F3E8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6F440;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6F498;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6F390;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6F390;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6F3E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6F3E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6F440;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6F440;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6F498;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6F498;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::TextSystem>(re::ecs2::TextSystem *,REEventHandlerResult (re::ecs2::TextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

id re::internal::defaultRetain<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(re::NetworkSystemFeatureFlags *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  uint64_t v4;
  const char *v5;

  v2 = (unsigned __int8 *)&unk_255828000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255828000;
    if ((_DWORD)v4)
    {
      re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(void)::enable = re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(void)::$_0::operator()(v4, v5);
      v2 = (_BYTE *)&unk_255828000;
    }
  }
  return v2[2208];
}

BOOL re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  re *v2;
  unsigned __int8 v3;
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"enableECSNetworkHFLogs", a2, (char *)v6);
  if (LOBYTE(v6[0]))
    v3 = BYTE1(v6[0]);
  else
    v3 = 0;
  v4 = *re::ecsNetworkLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "enableECSNetworkHFLogs=%d.", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(re::NetworkSystemFeatureFlags *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  uint64_t v4;
  const char *v5;

  v2 = (unsigned __int8 *)&unk_255828000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255828000;
    if ((_DWORD)v4)
    {
      re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(void)::enable = re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(void)::$_0::operator()(v4, v5);
      v2 = (_BYTE *)&unk_255828000;
    }
  }
  return v2[2224];
}

BOOL re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  re *v2;
  unsigned __int8 v3;
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"suppressNetworkReparentMarkDirty", a2, (char *)v6);
  if (LOBYTE(v6[0]))
    v3 = BYTE1(v6[0]);
  else
    v3 = 1;
  v4 = *re::ecsNetworkLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "suppressNetworkReparentMarkDirty=%d.", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t re::NetworkSystemFeatureFlags::enableAltSharedApp(re::NetworkSystemFeatureFlags *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  uint64_t v4;
  const char *v5;

  v2 = (unsigned __int8 *)&unk_255828000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255828000;
    if ((_DWORD)v4)
    {
      re::NetworkSystemFeatureFlags::enableAltSharedApp(void)::enable = re::NetworkSystemFeatureFlags::enableAltSharedApp(void)::$_0::operator()(v4, v5);
      v2 = (_BYTE *)&unk_255828000;
    }
  }
  return v2[2240];
}

BOOL re::NetworkSystemFeatureFlags::enableAltSharedApp(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  re *v2;
  unsigned __int8 v3;
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"enableAltSharedApp", a2, (char *)v6);
  if (LOBYTE(v6[0]))
    v3 = BYTE1(v6[0]);
  else
    v3 = 0;
  v4 = *re::ecsNetworkLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "enableAltSharedApp=%d.", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t *re::ecs2::allocInfo_MotionStateComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254115AE0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115AE0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115B28, 0);
    *(uint64_t *)((char *)&qword_254115B38 + 6) = 0;
    qword_254115B38 = 0;
    qword_254115B48 = 0;
    qword_254115B50 = 0xFFFFFFFFLL;
    qword_254115B28 = (uint64_t)&off_24ED7DAA8;
    qword_254115B58 = (uint64_t)"MotionStateComponent";
    dword_254115B60 = 0;
    unk_254115B68 = 0u;
    unk_254115B78 = 0u;
    unk_254115B88 = 0u;
    qword_254115B98 = 0;
    __cxa_guard_release(&qword_254115AE0);
  }
  return &qword_254115B28;
}

void re::ecs2::initInfo_MotionStateComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[2];
  __int128 v35;

  v34[0] = 0x8DBCDE6D401C29C4;
  v34[1] = "MotionStateComponent";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_330);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_330);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115AE8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_linearVelocity";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x6000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254115AF0 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "m_angularVelocity";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x7000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254115AF8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "isSleeping";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x1900000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254115B00 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v20 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "m_userSetLinearVelocity";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x8000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254115B08 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_uint32_t((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "m_userSetLinearVelocityVersion";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x9000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254115B10 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v27 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "m_userSetAngularVelocity";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0xA000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254115B18 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_uint32_t((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "m_userSetAngularVelocityVersion";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0xB000000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254115B20 = v32;
      __cxa_guard_release(&_MergedGlobals_330);
    }
  }
  *((_QWORD *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_254115AE8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MotionStateComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MotionStateComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MotionStateComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MotionStateComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v33 = v35;
}

double re::internal::defaultConstruct<re::ecs2::MotionStateComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59C80;
  *(_WORD *)(v3 + 25) = 0;
  *(_QWORD *)(v3 + 32) = 0x3F8000003F800000;
  *(_QWORD *)(v3 + 40) = 1065353216;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0x3F80000000000000;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 140) = 0u;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_DWORD *)(v3 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MotionStateComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::MotionStateComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59C80;
  *(_WORD *)(v1 + 25) = 0;
  *(_QWORD *)(v1 + 32) = 0x3F8000003F800000;
  *(_QWORD *)(v1 + 40) = 1065353216;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0x3F80000000000000;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 140) = 0u;
  *(_QWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MotionStateComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MotionStateComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MotionStateComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MotionStateComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MotionStateComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MotionStateComponent>, this);
}

uint64_t re::ecs2::MotionStateComponent::makeSyncInfo(re::ecs2::MotionStateComponent *this)
{
  uint64_t v1;

  v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  return v1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  *(_BYTE *)(a3 + 25) = 0;
  *(_OWORD *)(a3 + 96) = 0uLL;
  *(_OWORD *)(a3 + 112) = 0uLL;
  *(_OWORD *)(a3 + 128) = 0uLL;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 160) = 0uLL;
  *(_DWORD *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 26) = 1;
  return 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x227691F24](a2, a3 + 25, 1);
  if (!*(_BYTE *)(a3 + 25))
  {
    MEMORY[0x227691F24](a2, a3 + 96, 4);
    MEMORY[0x227691F24](a2, a3 + 100, 4);
    MEMORY[0x227691F24](a2, a3 + 104, 4);
    MEMORY[0x227691F24](a2, a3 + 112, 4);
    MEMORY[0x227691F24](a2, a3 + 116, 4);
    MEMORY[0x227691F24](a2, a3 + 120, 4);
  }
  MEMORY[0x227691F24](a2, a3 + 80, 1);
  if (!*(_BYTE *)(a3 + 25))
  {
    MEMORY[0x227691F24](a2, a3 + 128, 4);
    MEMORY[0x227691F24](a2, a3 + 132, 4);
    MEMORY[0x227691F24](a2, a3 + 136, 4);
    MEMORY[0x227691F24](a2, a3 + 144, 4);
    MEMORY[0x227691F24](a2, a3 + 160, 4);
    MEMORY[0x227691F24](a2, a3 + 164, 4);
    MEMORY[0x227691F24](a2, a3 + 168, 4);
    MEMORY[0x227691F24](a2, a3 + 176, 4);
  }
  return 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v10 = 0;
  RESyncBitReaderReadBool();
  MEMORY[0x227691F24](a3, &v10, 1);
  if (!v10)
  {
    v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a3, &v9, 4);
    MEMORY[0x227691F24](a3, (char *)&v9 + 4, 4);
    MEMORY[0x227691F24](a3, (char *)&v9 + 8, 4);
    v8 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a3, &v8, 4);
    MEMORY[0x227691F24](a3, (char *)&v8 + 4, 4);
    MEMORY[0x227691F24](a3, (char *)&v8 + 8, 4);
  }
  v7 = 0;
  RESyncBitReaderReadUInt8();
  MEMORY[0x227691F24](a3, &v7, 1);
  if (!v10)
  {
    v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a3, &v9, 4);
    MEMORY[0x227691F24](a3, (char *)&v9 + 4, 4);
    MEMORY[0x227691F24](a3, (char *)&v9 + 8, 4);
    v6 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a3, &v6, 4);
    v8 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a3, &v8, 4);
    MEMORY[0x227691F24](a3, (char *)&v8 + 4, 4);
    MEMORY[0x227691F24](a3, (char *)&v8 + 8, 4);
    v5 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a3, &v5, 4);
  }
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v11 = 0;
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadBool();
  v10 = 0u;
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  v8 = 0;
  RESyncBitReaderReadData();
  v9 = 0u;
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  v7 = 0;
  RESyncBitReaderReadData();
  MEMORY[0x227691F24](a4, &v11, 1);
  if (!v11)
  {
    v10 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a4, &v10, 4);
    MEMORY[0x227691F24](a4, (char *)&v10 + 4, 4);
    MEMORY[0x227691F24](a4, (char *)&v10 + 8, 4);
    v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a4, &v9, 4);
    MEMORY[0x227691F24](a4, (char *)&v9 + 4, 4);
    MEMORY[0x227691F24](a4, (char *)&v9 + 8, 4);
  }
  v6 = 0;
  RESyncBitReaderReadData();
  RESyncBitReaderReadBool();
  MEMORY[0x227691F24](a4, &v6, 1);
  if (!v11)
  {
    v10 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a4, &v10, 4);
    MEMORY[0x227691F24](a4, (char *)&v10 + 4, 4);
    MEMORY[0x227691F24](a4, (char *)&v10 + 8, 4);
    v8 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a4, &v8, 4);
    v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a4, &v9, 4);
    MEMORY[0x227691F24](a4, (char *)&v9 + 4, 4);
    MEMORY[0x227691F24](a4, (char *)&v9 + 8, 4);
    v7 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x227691F24](a4, &v7, 4);
  }
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_5()
{
  RESyncBitReaderReadData();
  RESyncBitWriterWriteBool();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt8();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  return RESyncBitWriterWriteUInt32();
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_6()
{
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteBool();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteBool();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitWriterWriteUInt32();
  RESyncBitReaderReadData();
  return RESyncBitWriterWriteUInt32();
}

void re::ecs2::RayTracedShadowReceiverSystem::willAddSystemToECSService(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v2 + 8))(&v5, v2, "engine:rayTracedAmbientOcclusionGround.rematerial");
    v3 = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)((char *)this + 168) = v5;
    v5 = v3;
    v4 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v6;
    v6 = v4;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  }
}

double re::ecs2::RayTracedShadowReceiverSystem::willRemoveSystemFromECSService(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  __int128 v2;
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;

  v2 = *(_OWORD *)((char *)this + 168);
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  v5 = v2;
  v6 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  *((_QWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::RayTracedShadowReceiverSystem::updateScenes(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  re::AssetHandle *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re::ecs2::RenderingSubsystem **v8;
  uint64_t v9;
  _UNKNOWN **v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re::RenderManager *v18;
  re::MeshAsset *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  int v24;
  signed int v25;
  _anonymous_namespace_ *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int32 v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int32 v47;
  __int32 v48;
  uint64_t *v49;
  re *isStatisticCollectionEnabled;
  uint64_t v51;
  int64x2_t *v52;
  unint64_t v53;
  unint64_t v54;
  int64x2_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  __int128 v65;
  int32x4_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float v71;
  float v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  float32x4_t v85;
  uint64_t v86;
  float v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _anonymous_namespace_ *v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (**v126)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  re *v144;
  uint64_t v145;
  int64x2_t v146;
  re::AssetHandle *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  float32x4_t v151;
  unsigned int v152;
  unsigned int v153;
  float32x4_t v154;
  int32x4_t v155;
  float32x4_t v156;
  unint64_t v157;
  uint64_t v158;
  re::RenderFrameData *v159[2];
  uint64_t v160;
  re::RenderFrame *v161[2];
  re::DynamicString **v162;
  uint64_t *v163;
  unsigned int v164;
  re::ecs2::RenderingSubsystem *v165;
  _QWORD v166[2];
  float32x4_t v167[4];
  float32x4_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t v175;
  _BYTE v176[16];
  uint64_t v177[2];
  __int128 v178;
  __int128 v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[3];
  __int128 v184;
  int32x4_t v185;
  __int128 v186;
  __int128 v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  __int128 v192;
  float32x4_t v193;
  float32x4_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  char v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  _QWORD v207[4];
  char v208;
  char v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  __int128 v214;
  _BYTE v215[19];
  unint64_t v216;
  int32x4_t v217;
  __int128 v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  float32x4_t v224[4];
  _BYTE v225[48];
  uint64_t v226;
  unsigned int v227;
  float32x4_t v228;
  uint64_t v229;

  v3 = a1;
  v229 = *MEMORY[0x24BDAC8D0];
  v4 = (re::AssetHandle *)(a1 + 21);
  v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 21));
  if (!v5 || *(_BYTE *)(v5 + 1656))
  {
    re::AssetHandle::loadAsync(v4);
    return;
  }
  v6 = v3[13];
  if (!v6 || (*(_BYTE *)(v6 + 424) & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      v8 = *(re::ecs2::RenderingSubsystem ***)a2;
      v9 = *(_QWORD *)a2 + 8 * v7;
      v10 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      v11 = &unk_255828000;
      v146 = vdupq_n_s64(1uLL);
      v157 = (unint64_t)v3;
      v150 = v9;
      do
      {
        v165 = *v8;
        if (*v8)
        {
          v12 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v165 + 200), (const re::ecs2::ComponentTypeBase *)v10[36]);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v14 = *(uint64_t **)(v12 + 40);
              if (v11[200] != -1)
                dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
              if (!re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows)
              {
                v15 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v165 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (!v15 || !*(_QWORD *)(v15 + 24) || !*(_BYTE *)(**(_QWORD **)(v15 + 40) + 30))
                {
                  v16 = re::AssetHandle::asset<re::MaterialAsset>(v4);
                  if (v16)
                  {
                    v149 = v16;
                    v18 = (re::RenderManager *)v3[14];
                    if (!v18)
                      goto LABEL_148;
                    v19 = (re::MeshAsset *)re::RenderManager::perFrameAllocator(v18);
                    v20 = v3[15];
                    v21 = re::MeshAsset::assetType(v19);
                    (*(void (**)(_QWORD *__return_ptr, uint64_t, const char *, uint64_t *))(*(_QWORD *)v20 + 32))(v183, v20, "sharedCircularPlaneMesh.compiledmesh", v21);
                    v22 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v183);
                    if (v22)
                    {
                      v147 = v4;
                      v148 = (_QWORD *)v22;
                      v182 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v157 + 136) + 24))(*(_QWORD *)(v157 + 136));
                      v23 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v182 + 16))(v182);
                      v24 = *((_DWORD *)v23 + 31);
                      if (!v24)
                        v24 = *((_DWORD *)v23 + 4);
                      v25 = v24 + 1;
                      v180 = 0;
                      v178 = 0u;
                      v179 = 0u;
                      v181 = 0x7FFFFFFFLL;
                      v190.i32[0] = 0;
                      v188 = 0u;
                      v189 = 0u;
                      *(uint64_t *)((char *)v190.i64 + 4) = 0x7FFFFFFFLL;
                      v27 = 8 * v13;
                      v28 = v14;
                      v163 = &v14[v13];
                      do
                      {
                        v29 = *v28++;
                        *(_QWORD *)&v184 = 0;
                        (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v182 + 8))(v225, v182, *(_QWORD *)(v29 + 16));
                        if (v225[0])
                          v30 = *(_QWORD *)&v225[8];
                        else
                          v30 = 0;
                        *(_QWORD *)&v184 = v30;
                        *(_DWORD *)v225 = 0;
                        v31 = (_QWORD *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v188, (uint64_t *)&v184, (int *)v225);
                        ++*v31;
                        v27 -= 8;
                      }
                      while (v27);
                      v32 = v190.i32[0];
                      if (v190.i32[0])
                      {
                        v33 = 0;
                        v34 = (int *)(v189.i64[0] + 8);
                        while (1)
                        {
                          v35 = *v34;
                          v34 += 8;
                          if (v35 < 0)
                            break;
                          if (v190.u32[0] == ++v33)
                          {
                            LODWORD(v33) = v190.i32[0];
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v33) = 0;
                      }
                      if (v190.i32[0] != (_DWORD)v33)
                      {
                        v36 = v33;
                        v37 = v189.i64[0];
                        do
                        {
                          v38 = v37 + 32 * v36;
                          v39 = *(_QWORD *)(v38 + 24);
                          memset(&v225[8], 0, 20);
                          *(_QWORD *)&v225[32] = 0;
                          *(_QWORD *)v225 = v19;
                          re::DynamicArray<re::MeshScene>::setCapacity(v225, v39);
                          v42 = *(_QWORD *)(v38 + 16);
                          v41 = (_QWORD *)(v38 + 16);
                          v40 = v42;
                          ++*(_DWORD *)&v225[24];
                          v43 = 0x94D049BB133111EBLL
                              * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                * (v42 ^ (v42 >> 30))) >> 27));
                          v44 = v43 ^ (v43 >> 31);
                          if ((_QWORD)v178)
                          {
                            v45 = v44 % DWORD2(v179);
                            v46 = *(unsigned int *)(*((_QWORD *)&v178 + 1) + 4 * v45);
                            if ((_DWORD)v46 != 0x7FFFFFFF)
                            {
                              while (*(_QWORD *)(v179 + (v46 << 6) + 16) != v40)
                              {
                                v46 = *(_DWORD *)(v179 + (v46 << 6) + 8) & 0x7FFFFFFF;
                                if ((_DWORD)v46 == 0x7FFFFFFF)
                                  goto LABEL_41;
                              }
                              goto LABEL_42;
                            }
                          }
                          else
                          {
                            LODWORD(v45) = 0;
                          }
LABEL_41:
                          re::HashTable<unsigned long long,re::RayTracedShadowReceiverCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v178, v45, v44, v41, (uint64_t)v225);
                          ++HIDWORD(v181);
LABEL_42:
                          re::DynamicArray<re::MeshScene>::deinit((uint64_t)v225);
                          v37 = v189.i64[0];
                          if (v190.i32[0] <= (v33 + 1))
                            v47 = v33 + 1;
                          else
                            v47 = v190.i32[0];
                          while (1)
                          {
                            v36 = (v33 + 1);
                            if (v47 - 1 == (_DWORD)v33)
                              break;
                            LODWORD(v33) = v33 + 1;
                            v48 = v36;
                            if ((*(_DWORD *)(v189.i64[0] + 32 * v36 + 8) & 0x80000000) != 0)
                              goto LABEL_49;
                          }
                          v48 = v47;
LABEL_49:
                          LODWORD(v33) = v48;
                        }
                        while (v32 != v48);
                      }
                      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v188);
                      v49 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v177);
                      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v49);
                      if ((isStatisticCollectionEnabled & 1) != 0)
                      {
                        v51 = re::profilerThreadContext(isStatisticCollectionEnabled);
                        v52 = *(int64x2_t **)(v51 + 152);
                        if (v52)
                        {
                          v53 = v52[428].u64[0];
                          if (v53 >= v13)
                            v53 = v13;
                          v52[428].i64[0] = v53;
                          v54 = v52[428].u64[1];
                          if (v54 <= v13)
                            v54 = v13;
                          v52[428].i64[1] = v54;
                          v55.i64[1] = v146.i64[1];
                          v55.i64[0] = v13;
                          v52[429] = vaddq_s64(v52[429], v55);
                          *(_BYTE *)(v51 + 184) = 0;
                        }
                      }
                      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v176, 3079, v157);
                      v175 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v157 + 144) + 16))(*(_QWORD *)(v157 + 144));
                      do
                      {
                        v56 = *v14;
                        v57 = *(_QWORD **)(*v14 + 16);
                        if (*(_BYTE *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v175, (unint64_t)v57))
                        {
                          if (*(_BYTE *)(v56 + 25))
                          {
                            v58 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v57 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                            if (!v58 || *(_BYTE *)(v58 + 27))
                            {
                              re::ecs2::ShadowHelper::findShadowReceiverAnchor((uint64_t)v57, &v182, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0, v225);
                              if (v225[0])
                              {
                                v151 = v228;
                                v152 = *(_DWORD *)&v225[24];
                                v158 = *(_QWORD *)&v225[16];
                                v160 = v226;
                                v153 = v227;
                                v155 = *(int32x4_t *)&v225[32];
                                v59 = *(_QWORD *)(*(_QWORD *)(v157 + 112) + 32);
                                v168.i64[0] = 0x3F8000003F800000;
                                v168.i64[1] = 1065353216;
                                v169 = 0;
                                v170 = 0x3F80000000000000;
                                v171 = 0;
                                v172 = 0;
                                re::ecs2::computeSubtreeCasterAABB(&v173, v57, v59, &v168);
                                v60 = (uint32x4_t)vcgtq_f32(v173, v174);
                                v60.i32[3] = v60.i32[2];
                                if ((vmaxvq_u32(v60) & 0x80000000) == 0)
                                {
                                  re::ecs2::TransformComponent::parentWorldMatrix4x4F((re::ecs2::TransformComponent *)v57, (const re::ecs2::Entity *)1, v167);
                                  re::AABB::transform(&v173, v167, (uint64_t)&v188);
                                  v173 = v188;
                                  v174 = v189;
                                  v61 = (uint32x4_t)vcgtq_f32(v188, v189);
                                  v61.i32[3] = v61.i32[2];
                                  if ((vmaxvq_u32(v61) & 0x80000000) != 0)
                                  {
                                    v63 = 0uLL;
                                  }
                                  else
                                  {
                                    v62.i64[0] = 0x3F0000003F000000;
                                    v62.i64[1] = 0x3F0000003F000000;
                                    v63 = vmulq_f32(vaddq_f32(v188, v189), v62);
                                  }
                                  *(_QWORD *)&v65 = v158;
                                  *(_QWORD *)&v64 = v160;
                                  v66 = v155;
                                  v67 = 0;
                                  v68 = vsubq_f32(v189, v188);
                                  v68.i32[3] = 0;
                                  v224[0] = vmaxnmq_f32(v68, (float32x4_t)0);
                                  v224[1] = vmulq_f32(v224[0], (float32x4_t)xmmword_22612FAD0);
                                  v224[2] = vmulq_f32(v224[0], (float32x4_t)xmmword_22612FAE0);
                                  v224[3] = vmulq_f32(v224[0], (float32x4_t)xmmword_22612FAF0);
                                  v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v155, 0xCuLL);
                                  v70 = vnegq_f32((float32x4_t)v155);
                                  v71 = 0.0;
                                  v72 = 0.0;
                                  do
                                  {
                                    v73 = v224[v67];
                                    v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL), v70), v73, v69);
                                    v75 = vmulq_f32(v74, v74);
                                    v76 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), v75)).f32[0]);
                                    v77 = vmulq_f32((float32x4_t)v155, v73);
                                    v78 = vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1));
                                    v79 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2);
                                    if (v71 < v76)
                                      v71 = v76;
                                    v80 = fabsf(vaddq_f32(v79, v78).f32[0]);
                                    if (v72 < v80)
                                      v72 = v80;
                                    ++v67;
                                  }
                                  while (v67 != 4);
                                  if (v72 >= v71)
                                    v81 = v71;
                                  else
                                    v81 = v72;
                                  v82 = vaddq_f32(vmulq_lane_f32((float32x4_t)v155, *(float32x2_t *)v155.i8, 1), (float32x4_t)xmmword_2260E5F50);
                                  v83 = vmulq_f32(v82, v82);
                                  v84 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0];
                                  v85 = 0uLL;
                                  if (v84 > 0.0)
                                  {
                                    v85.f32[0] = sqrtf(v84);
                                    v85 = vdivq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 0));
                                  }
                                  v86 = 0;
                                  v87 = v71 * 0.5;
                                  v88 = v87 + v81;
                                  v89 = vmulq_f32((float32x4_t)v155, vsubq_f32(v63, v151));
                                  v90 = vaddq_f32(vsubq_f32(v63, vmulq_n_f32((float32x4_t)v155, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).f32[0])), vmulq_n_f32(v85, (float)(1.0 - fabsf(*(float *)&v155.i32[1])) * (float)(v88 - v87)));
                                  v90.i32[3] = 1.0;
                                  *((_QWORD *)&v65 + 1) = v152;
                                  v66.i32[3] = 0;
                                  *((_QWORD *)&v64 + 1) = v153;
                                  v184 = v65;
                                  v185 = v66;
                                  v91 = v88 + v88;
                                  v186 = v64;
                                  v187 = xmmword_2260E5D70;
                                  do
                                  {
                                    *(float32x4_t *)((char *)&v188 + v86) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(__int128 *)((char *)&v184 + v86))), (float32x4_t)xmmword_2260E5F20, *(float32x2_t *)((char *)&v184 + v86), 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)((char *)&v184 + v86), 2), v90, *(float32x4_t *)((char *)&v184 + v86), 3);
                                    v86 += 16;
                                  }
                                  while (v86 != 64);
                                  v92 = 0;
                                  v93 = v188;
                                  v94 = v189;
                                  v95 = v190;
                                  v96 = v191;
                                  LODWORD(v97) = 0;
                                  *((float *)&v97 + 1) = v91;
                                  *(_QWORD *)&v98 = 0;
                                  *((_QWORD *)&v98 + 1) = LODWORD(v91);
                                  v184 = LODWORD(v91);
                                  v185 = (int32x4_t)v97;
                                  v186 = v98;
                                  v187 = xmmword_2260E5D70;
                                  do
                                  {
                                    *(float32x4_t *)((char *)&v188 + v92) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, COERCE_FLOAT(*(__int128 *)((char *)&v184 + v92))), v94, *(float32x2_t *)((char *)&v184 + v92), 1), v95, *(float32x4_t *)((char *)&v184 + v92), 2), v96, *(float32x4_t *)((char *)&v184 + v92), 3);
                                    v92 += 16;
                                  }
                                  while (v92 != 64);
                                  *(float32x4_t *)v159 = v189;
                                  *(float32x4_t *)v161 = v188;
                                  v154 = v191;
                                  v156 = v190;
                                  v208 = 0;
                                  v209 = 0;
                                  v210 = 0u;
                                  v188 = 0u;
                                  v189 = 0u;
                                  v190.i64[0] = 0;
                                  v191 = 0u;
                                  v192 = 0u;
                                  v193 = 0u;
                                  v194 = 0u;
                                  v195 = 0u;
                                  v196 = 0u;
                                  v197 = 0u;
                                  v198 = 0u;
                                  v199 = 0;
                                  v200 = 0u;
                                  v201 = 0u;
                                  v202 = 0u;
                                  v203 = 0u;
                                  v204 = 0u;
                                  v205 = 0u;
                                  v206 = 0u;
                                  memset(v207, 0, 28);
                                  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
                                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                                  v211 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                                  __asm { FMOV            V0.2S, #1.0 }
                                  v212 = _D0;
                                  v213 = 1065353216;
                                  v214 = 0u;
                                  memset(v215, 0, sizeof(v215));
                                  v216 = 0xFFFFFFFF00000001;
                                  v217 = vdupq_n_s32(0x7F800000u);
                                  *(_QWORD *)&v104 = 0x7F0000007FLL;
                                  *((_QWORD *)&v104 + 1) = 0x7F0000007FLL;
                                  v218 = v104;
                                  v219 = 0;
                                  v220 = 0;
                                  v221 = 0;
                                  v222 = 0;
                                  v223 = 0x10100010001;
                                  v105 = v148[47];
                                  v166[0] = v148[49];
                                  v166[1] = v105;
                                  v185.i64[0] = 0;
                                  v184 = 0uLL;
                                  re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(&v184, (uint64_t)v19, v105);
                                  re::FixedArray<re::SkinningInfluence>::copy(&v184, (uint64_t)v166);
                                  v188.i64[0] = v185.i64[0];
                                  v188.i64[1] = *((_QWORD *)&v184 + 1);
                                  if ((_QWORD)v184 && *((_QWORD *)&v184 + 1))
                                    (*(void (**)(void))(*(_QWORD *)v184 + 40))();
                                  v106 = (*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 72, 8);
                                  v107 = v148[110];
                                  *(_QWORD *)&v184 = v148[111];
                                  *((_QWORD *)&v184 + 1) = v107;
                                  v189.i64[1] = re::MeshBoundingBoxes::MeshBoundingBoxes(v106, (uint64_t)v19, (const void **)&v184, 1);
                                  v108 = (*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 72, 8);
                                  v109 = v148[113];
                                  *(_QWORD *)&v184 = v148[114];
                                  *((_QWORD *)&v184 + 1) = v109;
                                  v190.i64[0] = re::MeshBoundingBoxes::MeshBoundingBoxes(v108, (uint64_t)v19, (const void **)&v184, 1);
                                  v219 = v190.i64[0];
                                  v191 = *(float32x4_t *)v161;
                                  v192 = *(_OWORD *)v159;
                                  v193 = v156;
                                  v194 = v154;
                                  v110 = *(_QWORD *)(v149 + 1664);
                                  v111 = (_QWORD *)(*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 8, 8);
                                  *v111 = v110;
                                  *(_QWORD *)&v195 = v111;
                                  *((_QWORD *)&v195 + 1) = 1;
                                  v112 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(*(re::MaterialParameterBlock **)(v149 + 1672), v19);
                                  v113 = (uint64_t *)(*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 8, 8);
                                  *v113 = v112;
                                  *(_QWORD *)&v201 = v113;
                                  *((_QWORD *)&v201 + 1) = 1;
                                  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v182 + 8))(&v184, v182, v57);
                                  if ((_BYTE)v184)
                                    v114 = *((_QWORD *)&v184 + 1);
                                  else
                                    v114 = 0;
                                  if (!(_QWORD)v178
                                    || (v115 = 0x94D049BB133111EBLL
                                             * ((0xBF58476D1CE4E5B9 * (v114 ^ (v114 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                 * (v114 ^ (v114 >> 30))) >> 27)),
                                        v116 = *(unsigned int *)(*((_QWORD *)&v178 + 1)
                                                               + 4 * ((v115 ^ (v115 >> 31)) % DWORD2(v179))),
                                        (_DWORD)v116 == 0x7FFFFFFF))
                                  {
LABEL_94:
                                    v117 = 0;
                                  }
                                  else
                                  {
                                    while (*(_QWORD *)(v179 + (v116 << 6) + 16) != v114)
                                    {
                                      v116 = *(_DWORD *)(v179 + (v116 << 6) + 8) & 0x7FFFFFFF;
                                      if ((_DWORD)v116 == 0x7FFFFFFF)
                                        goto LABEL_94;
                                    }
                                    v117 = (_anonymous_namespace_ *)(v179 + (v116 << 6) + 24);
                                  }
                                  if (*(_QWORD *)v117)
                                    re::DynamicArray<re::MeshScene>::add(v117, (__int128 *)&v188);
                                  if (v207[2])
                                  {
                                    if ((_QWORD)v205)
                                      *(_QWORD *)&v205 = 0;
                                    if (*((_QWORD *)&v204 + 1))
                                      (*(void (**)(void))(*(_QWORD *)v207[2] + 40))();
                                  }
                                }
                              }
                            }
                          }
                        }
                        ++v14;
                      }
                      while (v14 != v163);
                      v118 = *(_QWORD *)(*(_QWORD *)(v157 + 112) + 104);
                      if (v118)
                        v162 = (re::DynamicString **)re::RenderFrameBox::get(v118 + 344, 0xFFFFFFFFFFFFFFFuLL);
                      else
                        v162 = 0;
                      v164 = v180;
                      v119 = 0;
                      if (v180)
                      {
                        v120 = (int *)(v179 + 8);
                        while (1)
                        {
                          v121 = *v120;
                          v120 += 16;
                          if (v121 < 0)
                            break;
                          if (v180 == ++v119)
                          {
                            LODWORD(v119) = v180;
                            break;
                          }
                        }
                      }
                      if (v180 != (_DWORD)v119)
                      {
                        v122 = v119;
                        v123 = v179;
                        while (1)
                        {
                          v124 = v123 + (v122 << 6);
                          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v165, *(const re::ecs2::Scene **)(v124 + 16), v162, &v184);
                          v173.i64[0] = (unint64_t)v184 >> 1;
                          v125 = re::RenderFrameData::stream((re::RenderFrameData *)(v162 + 33), (const re::WeakStringID *)&v173);
                          v126 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v125, (uint64_t *)v224);
                          if (!v126)
                          {
                            v142 = *(_QWORD *)(*(_QWORD *)(v125 + 48) + 8);
                            v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v142 + 32))(v142, 56, 8);
                            *(_QWORD *)v143 = 0;
                            *(_QWORD *)(v143 + 8) = 0;
                            *(_DWORD *)(v143 + 16) = 1;
                            *(_QWORD *)(v143 + 32) = 0;
                            *(_QWORD *)(v143 + 40) = 0;
                            *(_QWORD *)(v143 + 24) = 0;
                            *(_DWORD *)(v143 + 48) = 0;
                            v144 = (re *)re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::init(v143, v142, 1uLL);
                            v145 = re::globalAllocators(v144)[2];
                            *(_QWORD *)v225 = &off_24ED6F740;
                            *(_QWORD *)&v225[8] = v142;
                            *(_QWORD *)&v225[24] = v145;
                            *(_QWORD *)&v225[32] = v225;
                            v188.i64[1] = v143;
                            v188.i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::RayTracedShadowReceiverCollection,4ul> *>::__handle[abi:nn180100];
                            v191.i64[1] = v145;
                            *(_QWORD *)&v192 = 0;
                            re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v190, (uint64_t)v225);
                            v126 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v125, (uint64_t *)v224, (re *)&v188);
                            if ((_QWORD)v192)
                            {
                              v167[0].i64[0] = (uint64_t)&v188;
                              (*(void (**)(_QWORD, float32x4_t *))(*(_QWORD *)v192 + 16))(v192, v167);
                              if ((_QWORD)v192)
                              {
                                (**(void (***)(_QWORD))v192)(v192);
                                if ((float32x4_t *)v192 != &v190)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v191.i64[1] + 40))(v191.i64[1]);
                                *(_QWORD *)&v192 = 0;
                              }
                            }
                            if (v188.i64[0])
                              ((void (*)(int))v188.i64[0])(0);
                            if (*(_QWORD *)&v225[32])
                            {
                              (***(void (****)(_QWORD))&v225[32])(*(_QWORD *)&v225[32]);
                              if (*(_BYTE **)&v225[32] != v225)
                                (*(void (**)(_QWORD))(**(_QWORD **)&v225[24] + 40))(*(_QWORD *)&v225[24]);
                            }
                          }
                          v127 = v124 + 24;
                          v129 = *(_QWORD *)(v124 + 24);
                          v130 = *(_QWORD *)(v124 + 32);
                          v131 = *(_QWORD *)(v124 + 40);
                          *(_QWORD *)v127 = 0;
                          *(_QWORD *)(v127 + 8) = 0;
                          *(_QWORD *)(v127 + 16) = 0;
                          v132 = *(_QWORD *)(v127 + 32);
                          *(_QWORD *)(v127 + 32) = 0;
                          ++*(_DWORD *)(v127 + 24);
                          v133 = *(_QWORD *)(v128 + 40);
                          v134 = *(_QWORD *)(v128 + 8);
                          if (v133 + 1 > 4 * v134)
                          {
                            re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::setBucketsCapacity((_QWORD *)v128, (v133 + 4) >> 2);
                            v134 = *(_QWORD *)(v128 + 8);
                          }
                          if (v134 <= v133 >> 2)
                            break;
                          if ((*(_BYTE *)(v128 + 16) & 1) != 0)
                            v135 = v128 + 24;
                          else
                            v135 = *(_QWORD *)(v128 + 32);
                          v136 = *(_QWORD *)(v135 + 8 * (v133 >> 2));
                          ++*(_QWORD *)(v128 + 40);
                          ++*(_DWORD *)(v128 + 48);
                          v137 = v136 + 40 * (v133 & 3);
                          *(_QWORD *)v137 = v129;
                          v188.i64[0] = 0;
                          *(_QWORD *)(v137 + 8) = v130;
                          v188.i64[1] = 0;
                          *(_QWORD *)(v137 + 16) = v131;
                          v189.i64[0] = 0;
                          *(_QWORD *)(v137 + 32) = v132;
                          v190.i64[0] = 0;
                          v189.i32[2] = 2;
                          *(_DWORD *)(v137 + 24) = 1;
                          re::DynamicArray<re::MeshScene>::deinit((uint64_t)&v188);
                          v139 = *(_QWORD *)(v128 + 40);
                          if (!v139)
                            goto LABEL_147;
                          re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v128, v139 - 1);
                          re::StringID::destroyString((re::StringID *)&v184);
                          v123 = v179;
                          if (v180 <= (int)v119 + 1)
                            v140 = v119 + 1;
                          else
                            v140 = v180;
                          while (1)
                          {
                            v122 = (v119 + 1);
                            if (v140 - 1 == (_DWORD)v119)
                              break;
                            LODWORD(v119) = v119 + 1;
                            v141 = v122;
                            if ((*(_DWORD *)(v179 + (v122 << 6) + 8) & 0x80000000) != 0)
                              goto LABEL_133;
                          }
                          v141 = v140;
LABEL_133:
                          LODWORD(v119) = v141;
                          if (v164 == v141)
                            goto LABEL_113;
                        }
                        v167[0].i64[0] = 0;
                        v191 = 0u;
                        v192 = 0u;
                        v189 = 0u;
                        v190 = 0u;
                        v188 = 0u;
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v225 = 136315906;
                        *(_QWORD *)&v225[4] = "operator[]";
                        *(_WORD *)&v225[12] = 1024;
                        *(_DWORD *)&v225[14] = 858;
                        *(_WORD *)&v225[18] = 2048;
                        *(_QWORD *)&v225[20] = v133 >> 2;
                        *(_WORD *)&v225[28] = 2048;
                        *(_QWORD *)&v225[30] = v134;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_147:
                        re::internal::assertLog((re::internal *)4, v138, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v146.i64[0]);
                        _os_crash();
                        __break(1u);
LABEL_148:
                        re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 167);
                        _os_crash();
                        __break(1u);
                      }
LABEL_113:
                      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v176);
                      re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v177);
                      re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v178);
                      v4 = v147;
                    }
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v183);
                    v3 = (_QWORD *)v157;
                    v9 = v150;
                    v10 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
                    v11 = (_QWORD *)&unk_255828000;
                  }
                }
              }
            }
          }
        }
        ++v8;
      }
      while (v8 != (re::ecs2::RenderingSubsystem **)v9);
    }
  }
}

float32x4_t re::ecs2::computeSubtreeCasterAABB(float32x4_t *a1, _QWORD *a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re::MeshBoundingBoxes *v18;
  float32x4_t result;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v30;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  _OWORD v69[3];
  __n128 v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  _OWORD v74[3];

  v8 = a2[22];
  if (!v8
    || (v9 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v8 + 32))) == 0
    || (v10 = v9,
        (v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) != 0)&& !*(_BYTE *)(v11 + 27))
  {
    result = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v21.i64[0] = 0x7F0000007FLL;
    v21.i64[1] = 0x7F0000007FLL;
    *a1 = result;
    a1[1] = v21;
    goto LABEL_12;
  }
  v12 = *(_QWORD *)(v10 + 392);
  v13 = *(_QWORD *)(v10 + 376);
  v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v14)
  {
    v12 = *(_QWORD *)(v14 + 208);
    v13 = *(_QWORD *)(v14 + 192);
  }
  re::ecs2::MeshComponent::updateStaticBoundingBoxData((_QWORD *)v8, *(const re::ecs2::Entity **)(v8 + 16), 0);
  v15 = *(_QWORD *)(v8 + 288);
  v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (v16 && (v17 = *(_QWORD *)(v16 + 96)) != 0)
  {
    v18 = (re::MeshBoundingBoxes *)(v17 + 80);
    result = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    *a1 = result;
    a1[1] = v20;
    if (!v13)
      goto LABEL_12;
  }
  else
  {
    result = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v58.i64[0] = 0x7F0000007FLL;
    v58.i64[1] = 0x7F0000007FLL;
    *a1 = result;
    a1[1] = v58;
    if (!v15)
      goto LABEL_12;
    v18 = (re::MeshBoundingBoxes *)(v15 + 152);
    if (!v13)
      goto LABEL_12;
  }
  if (v13 == *((_QWORD *)v18 + 3))
  {
    v59 = 0;
    v60 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v61.i64[0] = 0x7F0000007FLL;
    v61.i64[1] = 0x7F0000007FLL;
    do
    {
      v67 = v61;
      v68 = v60;
      v62 = (float32x4_t *)re::DataArray<re::MeshInstance>::get(a3 + 72, *(_QWORD *)(v12 + 8 * v59));
      v63 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox(v18, v59);
      re::AABB::transform(v63, v62 + 2, (uint64_t)&v70);
      v65 = v67;
      v64 = v68;
      v64.i32[3] = 0;
      result = (float32x4_t)v70;
      v66 = v71;
      result.i32[3] = 0;
      v65.i32[3] = 0;
      v66.i32[3] = 0;
      v60 = vminnmq_f32(v64, result);
      v61 = vmaxnmq_f32(v65, v66);
      *a1 = v60;
      a1[1] = v61;
      ++v59;
    }
    while (v13 != v59);
  }
LABEL_12:
  v22 = (float32x4_t *)a2[30];
  if (v22)
  {
    _Q2 = a4[1];
    _Q3 = v22[3];
    v25 = vmulq_f32(*a4, v22[2]);
    v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL);
    v27 = vnegq_f32(_Q2);
    v28 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), (int8x16_t)_Q3, 0xCuLL), v27), _Q3, v26);
    _S7 = _Q3.i32[3];
    v30 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), v28, 0xCuLL), _Q3, _Q2, 3), _Q2, _Q3, 3);
    __asm { FMLA            S3, S7, V2.S[3] }
    v35 = v22[4];
    v36 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v27), v35, v26);
    v37 = (int8x16_t)vaddq_f32(v36, v36);
    v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), v37, 0xCuLL);
    v39 = (float)(v30.f32[0] + v30.f32[0]) * v30.f32[0];
    v40 = vmuls_lane_f32(v30.f32[1] + v30.f32[1], *(float32x2_t *)v30.f32, 1);
    v41 = vmuls_lane_f32(v30.f32[2] + v30.f32[2], v30, 2);
    v42 = vmuls_lane_f32(v30.f32[0] + v30.f32[0], *(float32x2_t *)v30.f32, 1);
    v43 = vmuls_lane_f32(v30.f32[0] + v30.f32[0], v30, 2);
    v44 = vmuls_lane_f32(v30.f32[1] + v30.f32[1], v30, 2);
    v30.i32[3] = _Q3.i32[0];
    v45 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), v27), v38, v26);
    v46 = vaddq_f32(a4[2], vmulq_f32(*a4, vaddq_f32(vaddq_f32(v35, vmulq_laneq_f32(v38, _Q2, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL))));
    *a4 = v25;
    a4[1] = v30;
    a4[2] = v46;
    _Q2.f32[0] = _Q3.f32[0] * (float)(v30.f32[0] + v30.f32[0]);
    v26.f32[0] = _Q3.f32[0] * (float)(v30.f32[1] + v30.f32[1]);
    _Q3.f32[0] = _Q3.f32[0] * (float)(v30.f32[2] + v30.f32[2]);
    v47.i32[3] = 0;
    v47.f32[0] = 1.0 - (float)(v40 + v41);
    v30.i32[3] = 0;
    v47.f32[1] = v42 + _Q3.f32[0];
    v47.f32[2] = v43 - v26.f32[0];
    v38.i32[3] = 0;
    v38.f32[0] = v42 - _Q3.f32[0];
    v38.f32[1] = 1.0 - (float)(v39 + v41);
    v38.f32[2] = v44 + _Q2.f32[0];
    v30.f32[0] = v43 + v26.f32[0];
    v30.f32[1] = v44 - _Q2.f32[0];
    v30.f32[2] = 1.0 - (float)(v39 + v40);
    v70 = (__n128)vmulq_n_f32(v47, v25.f32[0]);
    v71 = vmulq_n_f32(v38, *(float *)vshrq_n_u64((uint64x2_t)v25, 0x20uLL).i32);
    v46.i32[3] = 1.0;
    v72 = vmulq_laneq_f32(v30, v25, 2);
    v73 = v46;
    re::AABB::transform(a1, (float32x4_t *)&v70, (uint64_t)v74);
    result.i64[0] = *(_QWORD *)&v74[0];
    v48 = (float32x4_t)v74[1];
    *a1 = (float32x4_t)v74[0];
    a1[1] = v48;
  }
  v49 = a2[41];
  if (v49)
  {
    v50 = (uint64_t *)a2[43];
    v51 = 8 * v49;
    do
    {
      v52 = *v50++;
      v53 = a4[1];
      v69[0] = *a4;
      v69[1] = v53;
      v69[2] = a4[2];
      re::ecs2::computeSubtreeCasterAABB(&v70, v52, a3, v69);
      v54 = *a1;
      v55 = a1[1];
      v54.i32[3] = 0;
      v56 = (float32x4_t)v70;
      v57 = v71;
      v56.i32[3] = 0;
      result = vminnmq_f32(v54, v56);
      v55.i32[3] = 0;
      v57.i32[3] = 0;
      *a1 = result;
      a1[1] = vmaxnmq_f32(v55, v57);
      v51 -= 8;
    }
    while (v51);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_RayTracedShadowReceiverComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_331);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_331))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115BC8, 0);
    *(uint64_t *)((char *)&qword_254115BD8 + 6) = 0;
    qword_254115BD8 = 0;
    qword_254115BE8 = 0;
    qword_254115BF0 = 0xFFFFFFFFLL;
    qword_254115BC8 = (uint64_t)&off_24ED7DAA8;
    qword_254115BF8 = (uint64_t)"RayTracedShadowReceiverComponent";
    dword_254115C00 = 0;
    unk_254115C08 = 0u;
    unk_254115C18 = 0u;
    unk_254115C28 = 0u;
    qword_254115C38 = 0;
    __cxa_guard_release(&_MergedGlobals_331);
  }
  return &qword_254115BC8;
}

void re::ecs2::initInfo_RayTracedShadowReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xA5B027ABDA48EFCALL;
  v14[1] = "RayTracedShadowReceiverComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254115BA8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254115BA8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115BB8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "isVisible";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254115BC0 = v12;
      __cxa_guard_release(&qword_254115BA8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254115BB8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 256;
  *(_QWORD *)v3 = &off_24ED59D00;
}

void *re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 256;
  *(_QWORD *)v1 = &off_24ED59D00;
}

void *re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RayTracedShadowReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedShadowReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayTracedShadowReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayTracedShadowReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayTracedShadowReceiverComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RayTracedShadowReceiverSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254115BB0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115BB0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115C40, 0);
    *(uint64_t *)((char *)&qword_254115C50 + 6) = 0;
    qword_254115C50 = 0;
    qword_254115C60 = 0;
    qword_254115C68 = 0xFFFFFFFFLL;
    qword_254115C40 = (uint64_t)&off_24ED7DAA8;
    qword_254115C70 = (uint64_t)"RayTracedShadowReceiverSystem";
    dword_254115C78 = 0;
    xmmword_254115C80 = 0u;
    unk_254115C90 = 0u;
    xmmword_254115CA0 = 0u;
    qword_254115CB0 = 0;
    __cxa_guard_release(&qword_254115BB0);
  }
  return &qword_254115C40;
}

void re::ecs2::initInfo_RayTracedShadowReceiverSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x972D57F883EE808ELL;
  v5[1] = "RayTracedShadowReceiverSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RayTracedShadowReceiverSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED6F670;
  *(_BYTE *)(v3 + 160) = 1;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 21));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED6F670;
  *(_BYTE *)(v1 + 160) = 1;
  *(_QWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverSystem>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 21));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RayTracedShadowReceiverSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayTracedShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayTracedShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayTracedShadowReceiverSystem>, this);
}

void re::ecs2::RayTracedShadowReceiverSystem::~RayTracedShadowReceiverSystem(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  re::AssetHandle::~AssetHandle((re::ecs2::RayTracedShadowReceiverSystem *)((char *)this + 168));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::RayTracedShadowReceiverSystem *)((char *)this + 168));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::RayTracedShadowReceiverSystem::typeInfo(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayTracedShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayTracedShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayTracedShadowReceiverSystem>, 0);
}

void re::HashTable<unsigned long long,re::RayTracedShadowReceiverCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::RayTracedShadowReceiverCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

_QWORD *re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::RayTracedShadowReceiverCollection,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22581D0F4()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, i);
        re::DynamicArray<re::MeshScene>::deinit(v7);
      }
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6F740;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6F740;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

id re::internal::defaultRetain<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(uint64_t a1, int a2, re::ecs2::EntityHandle *a3, uint64_t a4, char a5)
{
  __int128 v9;
  __int128 v10;
  uint64_t i;

  *(_DWORD *)a1 = a2;
  re::ecs2::EntityHandle::EntityHandle((id *)(a1 + 16), a3);
  re::StringID::StringID((re::StringID *)(a1 + 40), (const StringID *)((char *)a3 + 24));
  v9 = *((_OWORD *)a3 + 4);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a1 + 80) = v9;
  re::ecs2::EntityHandle::EntityHandle((id *)(a1 + 96), (const re::ecs2::EntityHandle *)a4);
  re::StringID::StringID((re::StringID *)(a1 + 120), (const StringID *)(a4 + 24));
  v10 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 160) = v10;
  *(_BYTE *)(a1 + 176) = a5;
  for (i = 180; i != 204; i += 8)
    *(_QWORD *)(a1 + i) = 0xBF8000003F800000;
  do
  {
    *(_QWORD *)(a1 + i) = 0xBF8000003F800000;
    i += 8;
  }
  while (i != 228);
  return a1;
}

BOOL re::ecs2::PhysicsJointDefinition::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  result = re::ecs2::PinHandle::operator==(a1 + 16, a2 + 16);
  if (result)
  {
    result = re::ecs2::PinHandle::operator==(a1 + 96, a2 + 96);
    if (result)
    {
      if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176)
        && *(float *)(a1 + 180) == *(float *)(a2 + 180)
        && *(float *)(a1 + 184) == *(float *)(a2 + 184)
        && *(float *)(a1 + 188) == *(float *)(a2 + 188)
        && *(float *)(a1 + 192) == *(float *)(a2 + 192)
        && *(float *)(a1 + 196) == *(float *)(a2 + 196)
        && *(float *)(a1 + 200) == *(float *)(a2 + 200)
        && *(float *)(a1 + 204) == *(float *)(a2 + 204)
        && *(float *)(a1 + 208) == *(float *)(a2 + 208)
        && *(float *)(a1 + 212) == *(float *)(a2 + 212)
        && *(float *)(a1 + 216) == *(float *)(a2 + 216)
        && *(float *)(a1 + 228) == *(float *)(a2 + 228))
      {
        return *(float *)(a1 + 232) == *(float *)(a2 + 232);
      }
      return 0;
    }
  }
  return result;
}

uint64_t re::ecs2::PhysicsJointDefinition::getDataToCreateRuntimeJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, float32x4_t *a6, re **a7, float32x4_t *a8)
{
  float32x4_t v9;
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  re::ecs2::PhysicsSimulationService *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  re::ecs2::PhysicsSimulationData *v26;
  NSObject *v27;
  const char *v28;
  simd_float4x4 *v29;
  NSObject *v30;
  uint32_t v31;
  unint64_t v33;
  char *v34;
  char *v35;
  const re::ecs2::Entity *v36;
  uint64_t v37;
  re::ecs2::PhysicsSimulationData *v38;
  re::ecs2::PhysicsSimulationData *v39;
  NSObject *v40;
  int v41;
  _BOOL4 v42;
  const char *v43;
  simd_float4x4 *v44;
  NSObject *v45;
  NSObject *v46;
  re::ecs2::PhysicsSimulationData *v47;
  NSObject *v48;
  int v49;
  _BOOL4 v50;
  uint32_t v51;
  uint64_t v52;
  simd_float4 *v53;
  re *v54;
  float32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  re *v62;
  float32x4_t v63;
  int32x4_t v64;
  int8x16_t v65;
  re *v66;
  float32x4_t v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  NSObject *v71;
  const char *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  char v78;
  NSObject *v79;
  __int32 v80;
  re *v81;
  uint64_t v82;
  re *v83;
  NSObject *v84;
  const char *v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  simd_float4 v89;
  simd_float4 v90;
  simd_float4 v91;
  simd_float4 v92;
  re::ecs2::TransformComponent **v93;
  uint64_t v94;
  const char *v95;
  re::ecs2::PhysicsSimulationData *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  _OWORD v100[4];
  char v101[16];
  float32x4_t v102;
  float32x4_t v103;
  _OWORD v104[4];
  char v105[16];
  float32x4_t v106;
  float32x4_t v107;
  simd_float4x4 v108;
  simd_float4x4 v109;
  uint8_t buf[4];
  const char *v111;
  __int16 v112;
  const re::ecs2::Entity *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  re::ecs2::TransformComponent **v117;
  __int16 v118;
  re::ecs2::PhysicsSimulationData *v119;
  __int16 v120;
  re::ecs2::PhysicsSimulationData *v121;
  uint64_t v122;
  simd_float4x4 v123;
  simd_float4x4 v124;

  v122 = *MEMORY[0x24BDAC8D0];
  *a7 = 0;
  *a5 = 0;
  a8->i64[0] = 0;
  a8->i64[1] = 0;
  a8[1].i64[0] = 0;
  a8[1].i64[1] = 0x3F80000000000000;
  v9 = a8[1];
  *a6 = *a8;
  a6[1] = v9;
  v10 = *(_QWORD *)(a3 + 56);
  if (!v10)
  {
    v27 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): scene->ecsService() == nullptr!";
LABEL_17:
      v29 = (simd_float4x4 *)buf;
      v30 = v27;
      v31 = 2;
LABEL_18:
      _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)v29, v31);
    }
    return 3;
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v19 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v18);
  if (!v19)
  {
    v27 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): PhysicsSimulationService == nullptr!";
      goto LABEL_17;
    }
    return 3;
  }
  v20 = (re::ecs2::PhysicsSimulationService *)v19;
  v99 = a4;
  v21 = re::ecs2::EntityHandle::resolve(a1 + 16, (char *)a3);
  v22 = (uint64_t)v21;
  if (!v21)
    goto LABEL_12;
  v23 = v21;
  do
  {
    v24 = v23;
    v23 = (char *)*((_QWORD *)v23 + 3);
  }
  while (v23);
  if (!*((_QWORD *)v24 + 2))
  {
LABEL_12:
    if (!*(_QWORD *)(a1 + 24))
    {
      v96 = 0;
      v97 = 0;
      v98 = "null";
      goto LABEL_21;
    }
    v27 = *re::physicsLogObjects((re *)v21);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 was deleted";
      goto LABEL_17;
    }
    return 3;
  }
  v98 = (const char *)*((_QWORD *)v21 + 35);
  v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v25)
  {
    v40 = *re::physicsLogObjects(0);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      return 3;
    *(_DWORD *)buf = 136315394;
    v111 = v98;
    v112 = 2048;
    v113 = (const re::ecs2::Entity *)v22;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have RigidBodyComponent";
    goto LABEL_54;
  }
  v97 = v25;
  v26 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v20, (const re::ecs2::Entity *)v22);
  if (!v26)
  {
    v41 = *(_DWORD *)(v22 + 288);
    v40 = *re::physicsLogObjects(0);
    v42 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
    if ((v41 & 1) != 0)
    {
      if (!v42)
        return 3;
      *(_DWORD *)buf = 136315394;
      v111 = v98;
      v112 = 2048;
      v113 = (const re::ecs2::Entity *)v22;
      v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have PhysicsSimulation";
      goto LABEL_54;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136315394;
      v111 = v98;
      v112 = 2048;
      v113 = (const re::ecs2::Entity *)v22;
      v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) is not active";
      v44 = (simd_float4x4 *)buf;
LABEL_36:
      v45 = v40;
LABEL_59:
      v51 = 22;
LABEL_60:
      _os_log_impl(&dword_224FE9000, v45, OS_LOG_TYPE_DEFAULT, v43, (uint8_t *)v44, v51);
    }
    return 2;
  }
  v96 = v26;
LABEL_21:
  v33 = (unint64_t)re::ecs2::EntityHandle::resolve(a1 + 96, (char *)a3);
  if (v33)
  {
    v34 = (char *)v33;
    do
    {
      v35 = v34;
      v34 = (char *)*((_QWORD *)v34 + 3);
    }
    while (v34);
    if (*((_QWORD *)v35 + 2))
    {
      v95 = *(const char **)(v33 + 280);
      v36 = (const re::ecs2::Entity *)v33;
      v37 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v33 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v37)
      {
        v94 = v37;
        v38 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v20, v36);
        if (v38)
        {
          v39 = v38;
          v33 = (unint64_t)v36;
          goto LABEL_45;
        }
        v49 = *((_DWORD *)v36 + 72);
        v46 = *re::physicsLogObjects(0);
        v50 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
        if ((v49 & 1) == 0)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136315394;
            v111 = v95;
            v112 = 2048;
            v113 = v36;
            v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) is not active";
            v44 = (simd_float4x4 *)buf;
LABEL_58:
            v45 = v46;
            goto LABEL_59;
          }
          return 2;
        }
        if (!v50)
          return 3;
        *(_DWORD *)buf = 136315394;
        v111 = v95;
        v112 = 2048;
        v113 = v36;
        v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have PhysicsSimulation";
      }
      else
      {
        v46 = *re::physicsLogObjects(0);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          return 3;
        *(_DWORD *)buf = 136315394;
        v111 = v95;
        v112 = 2048;
        v113 = v36;
        v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 %s (%p) does not have RigidBodyComponent";
      }
      v29 = (simd_float4x4 *)buf;
      v30 = v46;
      goto LABEL_73;
    }
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v27 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return 3;
    *(_WORD *)buf = 0;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 was deleted";
    goto LABEL_17;
  }
  if (!(v22 | v33))
  {
    v27 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return 3;
    *(_WORD *)buf = 0;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Both Entities are null";
    goto LABEL_17;
  }
  v39 = 0;
  v94 = 0;
  v95 = "null";
LABEL_45:
  if (v22 == v33)
  {
    v40 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      return 3;
    *(_DWORD *)buf = 136315394;
    v111 = v98;
    v112 = 2048;
    v113 = (const re::ecs2::Entity *)v22;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entities %s (%p) are the same";
LABEL_54:
    v29 = (simd_float4x4 *)buf;
    v30 = v40;
LABEL_73:
    v31 = 22;
    goto LABEL_18;
  }
  v93 = (re::ecs2::TransformComponent **)v33;
  if (v96 && v39 && v96 != v39)
  {
    v47 = v39;
    v48 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      return 3;
    *(_DWORD *)buf = 136316418;
    v111 = v98;
    v112 = 2048;
    v113 = (const re::ecs2::Entity *)v22;
    v114 = 2080;
    v115 = v95;
    v116 = 2048;
    v117 = v93;
    v118 = 2048;
    v119 = v96;
    v120 = 2048;
    v121 = v47;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p) and Entity %s (%p) have different Physic"
          "sSimulations: %p %p";
    v29 = (simd_float4x4 *)buf;
    goto LABEL_51;
  }
  v52 = (uint64_t)v39;
  v53 = (simd_float4 *)re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity((uint64_t)v20, v22);
  v91 = v53[8];
  v92 = v53[7];
  v89 = v53[10];
  v90 = v53[9];
  re::ecs2::PinHandle::pinPose((id *)(a1 + 16), 1, (uint64_t)v105);
  if (!v105[0])
  {
    v71 = *re::physicsLogObjects(v54);
    if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      return 3;
    v72 = *(const char **)(a1 + 48);
    *(_DWORD *)buf = 136315650;
    v111 = v98;
    v112 = 2048;
    v113 = (const re::ecs2::Entity *)v22;
    v114 = 2080;
    v115 = v72;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have Pin named %s";
    v29 = (simd_float4x4 *)buf;
    v30 = v71;
    goto LABEL_78;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v22, (const re::ecs2::Entity *)1, buf);
  v123.columns[1] = v91;
  v123.columns[0] = v92;
  v123.columns[3] = v89;
  v123.columns[2] = v90;
  v109 = __invert_f4(v123);
  *(double *)v55.i64 = re::operator*<float>((float32x4_t *)&v109, (uint64_t)buf, v104);
  re::Matrix4x4<float>::extractScale((uint64_t)v104, v55, v56, v57);
  v59.i64[0] = v58;
  v59.i64[1] = v60;
  v61 = v107;
  *a6 = v106;
  a6[1] = v61;
  *a6 = vmulq_f32(*a6, v59);
  re::ecs2::PinHandle::pinPose((id *)(a1 + 96), 1, (uint64_t)v101);
  if (!v101[0])
  {
    v73 = *re::physicsLogObjects(v62);
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      return 3;
    v74 = *(_QWORD *)(a1 + 128);
    v109.columns[0].i32[0] = 136315650;
    *(uint64_t *)((char *)v109.columns[0].i64 + 4) = (uint64_t)v95;
    v109.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v109.columns[0].i64[1] + 6) = (uint64_t)v93;
    v109.columns[1].i16[3] = 2080;
    v109.columns[1].i64[1] = v74;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 %s (%p) does not have Pin named %s";
    v29 = &v109;
    v30 = v73;
LABEL_78:
    v31 = 32;
    goto LABEL_18;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(v93, (const re::ecs2::Entity *)1, &v109);
  v124.columns[1] = v91;
  v124.columns[0] = v92;
  v124.columns[3] = v89;
  v124.columns[2] = v90;
  v108 = __invert_f4(v124);
  *(double *)v63.i64 = re::operator*<float>((float32x4_t *)&v108, (uint64_t)&v109, v100);
  re::Matrix4x4<float>::extractScale((uint64_t)v100, v63, v64, v65);
  v67.i64[0] = (uint64_t)v66;
  v67.i64[1] = v68;
  v69 = v103;
  *a8 = v102;
  a8[1] = v69;
  *a8 = vmulq_f32(*a8, v67);
  if (v96)
    v70 = (uint64_t)v96;
  else
    v70 = v52;
  if (v70 != a2)
  {
    v48 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      return 3;
    v108.columns[0].i32[0] = 136316418;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
    v108.columns[1].i16[3] = 2080;
    v108.columns[1].i64[1] = (uint64_t)v95;
    v108.columns[2].i16[0] = 2048;
    *(uint64_t *)((char *)v108.columns[2].i64 + 2) = (uint64_t)v93;
    v108.columns[2].i16[5] = 2048;
    *(uint64_t *)((char *)&v108.columns[2].i64[1] + 4) = v70;
    v108.columns[3].i16[2] = 2048;
    *(uint64_t *)((char *)v108.columns[3].i64 + 6) = a2;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): PhysicsSimulation from Entities different from the give"
          "n simulation, Entity %s (%p), Entity %s (%p): %p %p";
    v29 = &v108;
LABEL_51:
    v30 = v48;
    v31 = 62;
    goto LABEL_18;
  }
  if ((*(_DWORD *)a1 - 1) >= 6)
  {
    v79 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      return 3;
    v80 = *(_DWORD *)a1;
    v108.columns[0].i32[0] = 136316162;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
    v108.columns[1].i16[3] = 2080;
    v108.columns[1].i64[1] = (uint64_t)v95;
    v108.columns[2].i16[0] = 2048;
    *(uint64_t *)((char *)v108.columns[2].i64 + 2) = (uint64_t)v93;
    v108.columns[2].i16[5] = 1024;
    v108.columns[2].i32[3] = v80;
    v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p), Entity %s (%p), unrecognized joint type %d";
    v29 = &v108;
    v30 = v79;
    v31 = 48;
    goto LABEL_18;
  }
  if (!v97)
  {
    v76 = v94;
    if (!v94)
    {
LABEL_97:
      v87 = *re::physicsLogObjects(v66);
      if (!os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        return 2;
      v108.columns[0].i32[0] = 136315906;
      *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
      v108.columns[0].i16[6] = 2048;
      *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
      v108.columns[1].i16[3] = 2080;
      v108.columns[1].i64[1] = (uint64_t)v95;
      v108.columns[2].i16[0] = 2048;
      *(uint64_t *)((char *)v108.columns[2].i64 + 2) = (uint64_t)v93;
      v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Neither Entity %s (%p) nor Entity %s (%p) has dynamic RigidBody";
      v44 = &v108;
      v45 = v87;
      v51 = 42;
      goto LABEL_60;
    }
    v78 = 0;
    goto LABEL_89;
  }
  v75 = *(_QWORD *)(v97 + 336);
  *a5 = v75;
  v76 = v94;
  if (!v75)
  {
    v40 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      return 2;
    v108.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
    v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p) does not have RigidBody";
    v44 = &v108;
    goto LABEL_36;
  }
  v77 = *(_DWORD *)(v75 + 208) == 2;
  v78 = v77;
  if (v94)
  {
LABEL_89:
    v81 = *(re **)(v76 + 336);
    *a7 = v81;
    if (v81)
    {
      if (*((_DWORD *)v81 + 52) == 2)
        v78 = 1;
      if ((v78 & 1) == 0)
        goto LABEL_97;
      goto LABEL_93;
    }
    v46 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      return 2;
    v108.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v95;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = (uint64_t)v93;
    v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p) does not have RigidBody";
    v44 = &v108;
    goto LABEL_58;
  }
  if (!v77)
    goto LABEL_97;
LABEL_93:
  if (v99)
  {
    v82 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v99 + 40) + 16))(*(_QWORD *)(v99 + 40));
    v83 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v99 + 40) + 24))(*(_QWORD *)(v99 + 40));
    if (v82 != *a5)
    {
      v84 = *re::physicsLogObjects(v83);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        v108.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
        v108.columns[0].i16[6] = 2048;
        *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
        v85 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) RigidBody is different from expected";
        v86 = v84;
LABEL_106:
        _os_log_impl(&dword_224FE9000, v86, OS_LOG_TYPE_DEFAULT, v85, (uint8_t *)&v108, 0x16u);
        return 1;
      }
      return 1;
    }
    if (v83 != *a7)
    {
      v88 = *re::physicsLogObjects(v83);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        v108.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v95;
        v108.columns[0].i16[6] = 2048;
        *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = (uint64_t)v93;
        v85 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 %s (%p) RigidBody is different from expected";
        v86 = v88;
        goto LABEL_106;
      }
      return 1;
    }
  }
  return 0;
}

uint64_t *re::ecs2::allocInfo_PhysicsJointDefinition(re::ecs2 *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254115CC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115CC8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115DA0, 0);
    *(uint64_t *)((char *)&qword_254115DB0 + 6) = 0;
    qword_254115DB0 = 0;
    qword_254115DC0 = 0;
    qword_254115DC8 = 0xFFFFFFFFLL;
    qword_254115DA0 = (uint64_t)&off_24ED7DAA8;
    qword_254115DD0 = (uint64_t)"PhysicsJointDefinition";
    dword_254115DD8 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_254115E10 = 0;
    __cxa_guard_release(&qword_254115CC8);
  }
  return &qword_254115DA0;
}

void re::ecs2::initInfo_PhysicsJointDefinition(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned __int8 v21;
  const re::IntrospectionBase *v22;
  re::IntrospectionRegistry *v23;
  const re::IntrospectionBase *v24;
  const char *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 v28;
  const re::IntrospectionBase *v29;
  re::IntrospectionRegistry *v30;
  const re::IntrospectionBase *v31;
  const char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const char *v38;
  uint64_t v39[2];

  *(_QWORD *)&v37 = 0x19B84C07D352F8ACLL;
  *((_QWORD *)&v37 + 1) = "PhysicsJointDefinition";
  re::StringID::destroyString((re::StringID *)&v37);
  *((_OWORD *)this + 2) = v35;
  v4 = atomic_load((unsigned __int8 *)&qword_254115CC0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254115CC0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_PhysicsJointType((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_type";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254115CE0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_BOOL((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_checkForCollisions";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0xB000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254115CE8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v15 = re::ecs2::introspect_PinHandle((re::IntrospectionBase **)1);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "m_pinHandle0";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254115CF0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::ecs2::introspect_PinHandle((re::IntrospectionBase **)1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "m_pinHandle1";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x6000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254115CF8 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v21 = atomic_load((unsigned __int8 *)&qword_254115CD0);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254115CD0))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_254115D10);
        __cxa_guard_release(&qword_254115CD0);
      }
      if ((_MergedGlobals_332 & 1) == 0)
      {
        _MergedGlobals_332 = 1;
        v22 = (const re::IntrospectionBase *)re::introspect_LinearLimit((re::IntrospectionBase **)1);
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_254115D10, v22, 3);
        re::IntrospectionRegistry::add(v23, v24);
        re::getPrettyTypeName((re *)&unk_254115D10, (const re::IntrospectionBase *)&v37);
        if ((BYTE8(v37) & 1) != 0)
          v25 = v38;
        else
          v25 = (char *)&v37 + 9;
        if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
        v37 = *((_OWORD *)v22 + 2);
        xmmword_254115D30 = v36;
        re::StringID::destroyString((re::StringID *)v39);
      }
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "m_linearLimits";
      *(_QWORD *)(v26 + 16) = &unk_254115D10;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xB400000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254115D00 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v28 = atomic_load((unsigned __int8 *)&qword_254115CD8);
      if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254115CD8))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_254115D58);
        __cxa_guard_release(&qword_254115CD8);
      }
      if ((byte_254115CB9 & 1) == 0)
      {
        byte_254115CB9 = 1;
        v29 = (const re::IntrospectionBase *)re::introspect_AngularLimit((re::IntrospectionBase **)1);
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_254115D58, v29, 3);
        re::IntrospectionRegistry::add(v30, v31);
        re::getPrettyTypeName((re *)&unk_254115D58, (const re::IntrospectionBase *)&v37);
        if ((BYTE8(v37) & 1) != 0)
          v32 = v38;
        else
          v32 = (char *)&v37 + 9;
        if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
        v37 = *((_OWORD *)v29 + 2);
        xmmword_254115D78 = v36;
        re::StringID::destroyString((re::StringID *)v39);
      }
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "m_angularLimits";
      *(_QWORD *)(v33 + 16) = &unk_254115D58;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0xCC00000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254115D08 = v33;
      __cxa_guard_release(&qword_254115CC0);
    }
  }
  *((_QWORD *)this + 2) = 0xF000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254115CE0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinition>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinition>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsJointDefinition>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v35;
}

id *re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinition>(int a1, int a2, id *this)
{
  return re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(this);
}

void re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::PinHandle::~PinHandle((id *)(a3 + 96));
  re::ecs2::PinHandle::~PinHandle((id *)(a3 + 16));
}

void re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinition>(uint64_t a1)
{
  re::ecs2::PinHandle::~PinHandle((id *)(a1 + 96));
  re::ecs2::PinHandle::~PinHandle((id *)(a1 + 16));
}

uint64_t re::ecs2::introspect_PhysicsJointDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsJointDefinition", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsJointDefinition, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsJointDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsJointDefinition>, this);
}

__n128 re::ecs2::VideoPlayerStatusComponent::didUpdateInApp(re::ecs2::VideoPlayerStatusComponent *this, __n128 result)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::EventBus *v7;
  int v8;
  void *Type;
  uint32x2_t v10;
  void *v11;
  int v12;
  void *v13;
  unint64_t v14;
  __n128 *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = *((_QWORD *)this + 2);
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = *(re::EventBus **)(v6 + 288);
      if (v7)
      {
        v8 = *((unsigned __int8 *)this + 49);
        if (*((unsigned __int8 *)this + 136) != v8)
        {
          LOBYTE(v17) = *((_BYTE *)this + 136);
          BYTE1(v17) = v8;
          Type = re::EventBus::getTypeId<REVideoPlayerContentTypeChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)Type, (uint64_t)&v17, 2uLL, 0);
          *((_BYTE *)this + 136) = *((_BYTE *)this + 49);
        }
        result.n128_u64[0] = *((_QWORD *)this + 8);
        v10 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)((char *)this + 152), (float32x2_t)result.n128_u64[0]));
        if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) != 0)
        {
          v17 = *((_QWORD *)this + 7);
          v18 = result.n128_u64[0];
          v11 = re::EventBus::getTypeId<REVideoPlayerVideoSizeChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)v11, (uint64_t)&v17, 0x10uLL, 0);
          result = *(__n128 *)((char *)this + 56);
          *((__n128 *)this + 9) = result;
        }
        v12 = *((unsigned __int8 *)this + 72);
        if (*((unsigned __int8 *)this + 160) != v12)
        {
          LOBYTE(v17) = *((_BYTE *)this + 160);
          BYTE1(v17) = v12;
          v13 = re::EventBus::getTypeId<REVideoPlayerViewingModeChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)v13, (uint64_t)&v17, 2uLL, 0);
          *((_BYTE *)this + 160) = *((_BYTE *)this + 72);
        }
        v15 = (__n128 *)((char *)this + 88);
        v14 = *((_QWORD *)this + 11);
        if (*((_QWORD *)this + 22) != v14)
        {
          v17 = *((_QWORD *)this + 10);
          v18 = v14;
          v19 = *((_QWORD *)this + 12);
          v16 = re::EventBus::getTypeId<REVideoPlayerVideoReceiverEndpointChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)v16, (uint64_t)&v17, 0x18uLL, 0);
          objc_storeStrong((id *)this + 21, *((id *)this + 10));
          result = *v15;
          *((__n128 *)this + 11) = *v15;
        }
      }
    }
  }
  return result;
}

void re::ecs2::VideoPlayerStatusComponent::setMediaInfo(re::ecs2::Component *a1, unsigned __int8 *a2)
{
  int v2;
  re::ecs2::NetworkComponent *v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*((unsigned __int8 *)a1 + 48) != v2)
  {
    *((_BYTE *)a1 + 48) = v2;
    v4 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)a1 + 2) + 200);
    if (v4)
      re::ecs2::NetworkComponent::markDirty(v4, a1);
    v5 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((unsigned __int8 *)a1 + 48);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setMediaInfo media: %d", (uint8_t *)v7, 8u);
    }
  }
}

void re::ecs2::VideoPlayerStatusComponent::setContentInfo(re::ecs2::Component *a1, unsigned __int8 *a2)
{
  int v2;
  re::ecs2::NetworkComponent *v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*((unsigned __int8 *)a1 + 49) != v2)
  {
    *((_BYTE *)a1 + 49) = v2;
    v4 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)a1 + 2) + 200);
    if (v4)
      re::ecs2::NetworkComponent::markDirty(v4, a1);
    v5 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((unsigned __int8 *)a1 + 49);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setContentInfo media: %d", (uint8_t *)v7, 8u);
    }
  }
}

void re::ecs2::VideoPlayerStatusComponent::setVideoIsReadyToRender(re::ecs2::VideoPlayerStatusComponent *this, int a2)
{
  re::ecs2::NetworkComponent *v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((unsigned __int8 *)this + 73) != a2)
  {
    *((_BYTE *)this + 73) = a2;
    v3 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)this + 2) + 200);
    if (v3)
      re::ecs2::NetworkComponent::markDirty(v3, this);
    v4 = *re::videoLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((unsigned __int8 *)this + 73);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setVideoIsReadyToRender = %d", (uint8_t *)v6, 8u);
    }
  }
}

void re::ecs2::VideoPlayerStatusComponent::setVideoReceiverEndpointAvailable(re::ecs2::VideoPlayerStatusComponent *this, int a2)
{
  re::ecs2::NetworkComponent *v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((unsigned __int8 *)this + 104) != a2)
  {
    *((_BYTE *)this + 104) = a2;
    v3 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)this + 2) + 200);
    if (v3)
      re::ecs2::NetworkComponent::markDirty(v3, this);
    v4 = *re::videoLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((unsigned __int8 *)this + 104);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setVideoReceiverEndpointAvailable = %d", (uint8_t *)v6, 8u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_VideoPlayerStatusComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2558347E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2558347E0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558349E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2558349F0 = 0;
    qword_255834A00 = 0;
    qword_255834A08 = 0xFFFFFFFFLL;
    qword_2558349E0 = (uint64_t)&off_24ED7DAA8;
    qword_255834A10 = (uint64_t)"VideoPlayerStatusComponent";
    dword_255834A18 = 0;
    xmmword_255834A20 = 0u;
    unk_255834A30 = 0u;
    xmmword_255834A40 = 0u;
    qword_255834A50 = 0;
    __cxa_guard_release(&qword_2558347E0);
  }
  return &qword_2558349E0;
}

void re::ecs2::initInfo_VideoPlayerStatusComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t v12;
  const re::IntrospectionBase *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  const re::IntrospectionBase *v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  re *v51;
  const re::IntrospectionBase *v52;
  uint64_t *v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int *v58;
  _anonymous_namespace_ *v59;
  unint64_t v60;
  unint64_t i;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  unint64_t j;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char v73;
  unsigned __int8 *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  re *v80;
  const re::IntrospectionBase *v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int *v86;
  _anonymous_namespace_ *v87;
  unint64_t v88;
  unint64_t k;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char v93;
  unsigned __int8 *v94;
  int v95;
  uint64_t v96;
  unint64_t m;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char v101;
  unsigned __int8 *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  re *v107;
  uint64_t *v108;
  re *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  re *v113;
  uint64_t *v114;
  re *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  const char *v123;
  StringID v124;
  void *v125;
  uint64_t v126;
  _OWORD v127[31];

  *(_QWORD *)&v127[0] = 0x10446737D3AC3CDELL;
  *((_QWORD *)&v127[0] + 1) = "VideoPlayerStatusComponent";
  re::StringID::destroyString((re::StringID *)v127);
  *((_OWORD *)this + 2) = v120;
  v4 = atomic_load((unsigned __int8 *)&qword_2558347D8);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v5 = (re *)__cxa_guard_acquire(&qword_2558347D8);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v6 = re::introspectionAllocator(v5);
  v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = "Component";
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 40) = 3;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_255834898 = v8;
  v9 = re::introspectionAllocator((re *)v8);
  v10 = (uint64_t *)qword_2558347A0;
  if (!qword_2558347A0)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_255834788);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255834788))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558348F0, 0);
      *(_QWORD *)(v50 + 22) = 0;
      qword_255834900 = 0;
      *(_QWORD *)&xmmword_255834910 = 0;
      *((_QWORD *)&xmmword_255834910 + 1) = 0xFFFFFFFFLL;
      qword_2558348F0 = (uint64_t)&off_24ED7DAA8;
      qword_255834920 = (uint64_t)"VideoPlayerMediaInfo";
      dword_255834928 = 0;
      xmmword_255834930 = 0u;
      *(_OWORD *)&qword_255834940 = 0u;
      xmmword_255834950 = 0u;
      qword_255834960 = 0;
      __cxa_guard_release(&qword_255834788);
    }
    qword_2558347A0 = (uint64_t)&qword_2558348F0;
    v12 = 1;
    *(_QWORD *)&v127[0] = 0xE22DD1D6E85FB5ECLL;
    *((_QWORD *)&v127[0] + 1) = "VideoPlayerMediaInfo";
    re::StringID::destroyString((re::StringID *)v127);
    xmmword_255834910 = v121;
    v14 = atomic_load((unsigned __int8 *)&qword_255834798);
    if ((v14 & 1) == 0)
    {
      v51 = (re *)__cxa_guard_acquire(&qword_255834798);
      if ((_DWORD)v51)
      {
        v53 = re::introspectionAllocator(v51);
        v54 = atomic_load((unsigned __int8 *)&qword_255834778);
        if ((v54 & 1) == 0)
        {
          v107 = (re *)__cxa_guard_acquire(&qword_255834778);
          if ((_DWORD)v107)
          {
            v108 = re::introspectionAllocator(v107);
            v109 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v108 + 32))(v108, 24, 8);
            *(_DWORD *)v109 = 1;
            *((_QWORD *)v109 + 1) = 0;
            *((_QWORD *)v109 + 2) = "InvalidVideo";
            qword_2558347E8 = (uint64_t)v109;
            v110 = re::introspectionAllocator(v109);
            v111 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 24, 8);
            *(_DWORD *)v111 = 1;
            *(_QWORD *)(v111 + 8) = 1;
            *(_QWORD *)(v111 + 16) = "Video";
            qword_2558347F0 = v111;
            __cxa_guard_release(&qword_255834778);
          }
        }
        v55 = atomic_load((unsigned __int8 *)&qword_255834780);
        if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_255834780))
        {
          re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834808, "VideoPlayerMediaType", 1, 1, 1, 1);
          qword_255834808 = (uint64_t)&off_24ED7D9E8;
          qword_255834848 = (uint64_t)&_MergedGlobals_11;
          dword_255834818 = 9;
          __cxa_guard_release(&qword_255834780);
        }
        if ((_MergedGlobals_165 & 1) == 0)
        {
          _MergedGlobals_165 = 1;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834808, v52);
          v122 = 0xE22DD1D6E86A0B04;
          v123 = "VideoPlayerMediaType";
          *(_QWORD *)&v127[0] = 0x31CD534126;
          *((_QWORD *)&v127[0] + 1) = "uint8_t";
          v56 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v127);
          if (!v56)
          {
            re::StringID::destroyString((re::StringID *)v127);
            re::internal::assertLog((re::internal *)5, v112, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VideoPlayerMediaType");
            _os_crash();
            __break(1u);
LABEL_84:
            v113 = (re *)__cxa_guard_acquire(&qword_2558347C8);
            if ((_DWORD)v113)
            {
              v114 = re::introspectionAllocator(v113);
              v115 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 24, 8);
              *(_DWORD *)v115 = 1;
              *((_QWORD *)v115 + 1) = 0;
              *((_QWORD *)v115 + 2) = "InvalidVideo";
              qword_2558347F8 = (uint64_t)v115;
              v116 = re::introspectionAllocator(v115);
              v117 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v116 + 32))(v116, 24, 8);
              *(_DWORD *)v117 = 1;
              *(_QWORD *)(v117 + 8) = 1;
              *(_QWORD *)(v117 + 16) = "Video";
              qword_255834800 = v117;
              __cxa_guard_release(&qword_2558347C8);
            }
            goto LABEL_50;
          }
          v57 = *v56;
          re::StringID::destroyString((re::StringID *)v127);
          v58 = (unsigned int *)qword_255834848;
          v126 = v57;
          re::TypeBuilder::beginEnumType((uint64_t)v127, &v122, 1, 1, (uint64_t)&v125);
          v60 = *v58;
          if ((_DWORD)v60)
          {
            for (i = 0; i < v60; ++i)
            {
              v62 = *(_QWORD *)(*((_QWORD *)v58 + 1) + 8 * i);
              if (*(_DWORD *)v62 == 1)
              {
                v63 = *(char **)(v62 + 16);
                if (v63)
                {
                  v64 = *v63;
                  if (*v63)
                  {
                    v65 = v63[1];
                    if (v65)
                    {
                      v66 = (unsigned __int8 *)(v63 + 2);
                      do
                      {
                        v64 = 31 * v64 + v65;
                        v67 = *v66++;
                        v65 = v67;
                      }
                      while (v67);
                    }
                  }
                }
                else
                {
                  v64 = 0;
                }
                v68 = *(_QWORD *)(v62 + 8);
                *(_QWORD *)&v124.var0 = 2 * v64;
                v124.var1 = v63;
                re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v127, v68, &v124);
                re::StringID::destroyString((re::StringID *)&v124);
                v60 = *v58;
              }
            }
            if (v60)
            {
              for (j = 0; j < v60; ++j)
              {
                v70 = *(_QWORD *)(*((_QWORD *)v58 + 1) + 8 * j);
                if (*(_DWORD *)v70 == 2)
                {
                  v71 = *(char **)(v70 + 16);
                  if (v71)
                  {
                    v72 = *v71;
                    if (*v71)
                    {
                      v73 = v71[1];
                      if (v73)
                      {
                        v74 = (unsigned __int8 *)(v71 + 2);
                        do
                        {
                          v72 = 31 * v72 + v73;
                          v75 = *v74++;
                          v73 = v75;
                        }
                        while (v75);
                      }
                    }
                  }
                  else
                  {
                    v72 = 0;
                  }
                  v76 = *(_QWORD *)(v70 + 8);
                  *(_QWORD *)&v124.var0 = 2 * v72;
                  v124.var1 = v71;
                  re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v127, v76, &v124);
                  re::StringID::destroyString((re::StringID *)&v124);
                  v60 = *v58;
                }
              }
            }
          }
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v127, v77);
          xmmword_255834828 = (__int128)v124;
          re::StringID::destroyString((re::StringID *)&v122);
        }
        v78 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
        *(_DWORD *)v78 = 1;
        *(_QWORD *)(v78 + 8) = "mediaType";
        *(_QWORD *)(v78 + 16) = &qword_255834808;
        *(_QWORD *)(v78 + 24) = 0;
        *(_QWORD *)(v78 + 32) = 1;
        *(_DWORD *)(v78 + 40) = 0;
        *(_QWORD *)(v78 + 48) = 0;
        *(_QWORD *)(v78 + 56) = 0;
        *(_DWORD *)(v78 + 64) = 0;
        qword_255834790 = v78;
        __cxa_guard_release(&qword_255834798);
      }
    }
    qword_255834900 = 0x100000008;
    v10 = &qword_2558348F0;
    dword_255834908 = 1;
    word_25583490C = 1;
    dword_255834928 = 1;
    *(_QWORD *)&xmmword_255834930 = &qword_255834790;
    *((_QWORD *)&xmmword_255834930 + 1) = re::internal::defaultConstruct<re::ecs2::VideoPlayerMediaInfo>;
    qword_255834940 = (uint64_t)re::internal::defaultDestruct<re::ecs2::VideoPlayerMediaInfo>;
    unk_255834948 = 0;
    *(_QWORD *)&xmmword_255834950 = 0;
    *((_QWORD *)&xmmword_255834950 + 1) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerMediaInfo>;
    qword_255834960 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::VideoPlayerMediaInfo>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558348F0, v13);
    v127[0] = v121;
  }
  v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = "m_mediaInfo";
  *(_QWORD *)(v15 + 16) = v10;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0x3000000001;
  *(_DWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_DWORD *)(v15 + 64) = 0;
  qword_2558348A0 = v15;
  v16 = re::introspectionAllocator((re *)v15);
  v17 = re::introspect_Vector2F((re::IntrospectionBase **)1);
  v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = "m_currentPlayerScreenSize";
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0x3800000002;
  *(_DWORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 56) = 0;
  *(_DWORD *)(v18 + 64) = 0;
  qword_2558348A8 = v18;
  v19 = re::introspectionAllocator((re *)v18);
  v21 = re::introspect_float((re *)1, v20);
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = "m_safezoneradius";
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0x1C00000003;
  *(_DWORD *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 56) = 0;
  *(_DWORD *)(v22 + 64) = 0;
  qword_2558348B0 = v22;
  v23 = re::introspectionAllocator((re *)v22);
  v24 = re::introspect_Vector3F((re::IntrospectionBase **)1);
  v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
  *(_DWORD *)v25 = 1;
  *(_QWORD *)(v25 + 8) = "m_currentSceneSize";
  *(_QWORD *)(v25 + 16) = v24;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0x2000000004;
  *(_DWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 64) = 0;
  qword_2558348B8 = v25;
  v26 = re::introspectionAllocator((re *)v25);
  v28 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v27);
  v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
  *(_DWORD *)v29 = 1;
  *(_QWORD *)(v29 + 8) = "m_currentViewingMode";
  *(_QWORD *)(v29 + 16) = v28;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0x4800000006;
  *(_DWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 56) = 0;
  *(_DWORD *)(v29 + 64) = 0;
  qword_2558348C0 = v29;
  v30 = re::introspectionAllocator((re *)v29);
  v32 = re::introspect_BOOL((re *)1, v31);
  v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 8) = "m_videoIsReadyToRender";
  *(_QWORD *)(v33 + 16) = v32;
  *(_QWORD *)(v33 + 24) = 0;
  *(_QWORD *)(v33 + 32) = 0x4900000007;
  *(_DWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 48) = 0;
  *(_QWORD *)(v33 + 56) = 0;
  *(_DWORD *)(v33 + 64) = 0;
  qword_2558348C8 = v33;
  v34 = re::introspectionAllocator((re *)v33);
  v35 = re::introspect_Vector2F((re::IntrospectionBase **)1);
  v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
  *(_DWORD *)v36 = 1;
  *(_QWORD *)(v36 + 8) = "m_currentScreenVideoDimension";
  *(_QWORD *)(v36 + 16) = v35;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = 0x4000000008;
  *(_DWORD *)(v36 + 40) = 0;
  *(_QWORD *)(v36 + 48) = 0;
  *(_QWORD *)(v36 + 56) = 0;
  *(_DWORD *)(v36 + 64) = 0;
  qword_2558348D0 = v36;
  v9 = re::introspectionAllocator((re *)v36);
  v37 = qword_2558347C0;
  if (qword_2558347C0)
  {
LABEL_12:
    v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = "m_contentInfo";
    *(_QWORD *)(v41 + 16) = v37;
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = 0x3100000009;
    *(_DWORD *)(v41 + 40) = 0;
    *(_QWORD *)(v41 + 48) = 0;
    *(_QWORD *)(v41 + 56) = 0;
    *(_DWORD *)(v41 + 64) = 0;
    qword_2558348D8 = v41;
    v42 = re::introspectionAllocator((re *)v41);
    v44 = re::introspect_BOOL((re *)1, v43);
    v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
    *(_DWORD *)v45 = 1;
    *(_QWORD *)(v45 + 8) = "m_videoReceiverEndpointAvailable";
    *(_QWORD *)(v45 + 16) = v44;
    *(_QWORD *)(v45 + 24) = 0;
    *(_QWORD *)(v45 + 32) = 0x680000000ALL;
    *(_DWORD *)(v45 + 40) = 0;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_DWORD *)(v45 + 64) = 0;
    qword_2558348E0 = v45;
    v46 = re::introspectionAllocator((re *)v45);
    v48 = re::introspect_AssetHandle((re *)1, v47);
    v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
    *(_DWORD *)v49 = 1;
    *(_QWORD *)(v49 + 8) = "m_videoAsset";
    *(_QWORD *)(v49 + 16) = v48;
    *(_QWORD *)(v49 + 24) = 0;
    *(_QWORD *)(v49 + 32) = 0x700000000BLL;
    *(_DWORD *)(v49 + 40) = 0;
    *(_QWORD *)(v49 + 48) = 0;
    *(_QWORD *)(v49 + 56) = 0;
    *(_DWORD *)(v49 + 64) = 0;
    qword_2558348E8 = v49;
    __cxa_guard_release(&qword_2558347D8);
LABEL_2:
    *((_QWORD *)this + 2) = 0xC000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 11;
    *((_QWORD *)this + 8) = &qword_255834898;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoPlayerStatusComponent>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoPlayerStatusComponent>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerStatusComponent>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoPlayerStatusComponent>;
    re::IntrospectionRegistry::add(this, v3);
    v119 = v120;
    return;
  }
  v38 = atomic_load((unsigned __int8 *)&qword_2558347A8);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_2558347A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834968, 0);
    *(_QWORD *)(v79 + 22) = 0;
    qword_255834978 = 0;
    *(_QWORD *)&xmmword_255834988 = 0;
    *((_QWORD *)&xmmword_255834988 + 1) = 0xFFFFFFFFLL;
    qword_255834968 = (uint64_t)&off_24ED7DAA8;
    qword_255834998 = (uint64_t)"VideoPlayerContentInfo";
    dword_2558349A0 = 0;
    xmmword_2558349A8 = 0u;
    *(_OWORD *)&qword_2558349B8 = 0u;
    xmmword_2558349C8 = 0u;
    qword_2558349D8 = 0;
    __cxa_guard_release(&qword_2558347A8);
  }
  qword_2558347C0 = (uint64_t)&qword_255834968;
  *(_QWORD *)&v127[0] = 0xDC86BCC6BE29816;
  *((_QWORD *)&v127[0] + 1) = "VideoPlayerContentInfo";
  re::StringID::destroyString((re::StringID *)v127);
  xmmword_255834988 = v121;
  v40 = atomic_load((unsigned __int8 *)&qword_2558347B8);
  v12 = (uint64_t)&qword_2558347B0;
  if ((v40 & 1) != 0 || (v80 = (re *)__cxa_guard_acquire(&qword_2558347B8), !(_DWORD)v80))
  {
LABEL_11:
    *(_QWORD *)(v12 + 0x1C8) = 0x100000008;
    v37 = v12 + 440;
    *(_DWORD *)(v12 + 0x1D0) = 1;
    *(_WORD *)(v12 + 0x1D4) = 1;
    *(_DWORD *)(v12 + 0x1F0) = 1;
    *(_QWORD *)(v12 + 0x1F8) = v12;
    *(_QWORD *)(v12 + 0x1F8 + 8) = re::internal::defaultConstruct<re::ecs2::VideoPlayerContentInfo>;
    *(_QWORD *)(v12 + 0x208) = re::internal::defaultDestruct<re::ecs2::VideoPlayerContentInfo>;
    *(_QWORD *)(v12 + 0x218) = 0;
    *(_QWORD *)(v12 + 0x210) = 0;
    *(_QWORD *)(v12 + 0x220) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerContentInfo>;
    *(_QWORD *)(v12 + 0x228) = re::internal::defaultDestructV2<re::ecs2::VideoPlayerContentInfo>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)(v12 + 440), v39);
    v127[0] = v121;
    goto LABEL_12;
  }
  v53 = re::introspectionAllocator(v80);
  v82 = atomic_load((unsigned __int8 *)&qword_2558347C8);
  if ((v82 & 1) == 0)
    goto LABEL_84;
LABEL_50:
  v83 = atomic_load((unsigned __int8 *)&qword_2558347D0);
  if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_2558347D0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834850, "VideoPlayerContentType", 1, 1, 1, 1);
    qword_255834850 = (uint64_t)&off_24ED7D9E8;
    qword_255834890 = (uint64_t)&unk_2540F7C90;
    dword_255834860 = 9;
    __cxa_guard_release(&qword_2558347D0);
  }
  if ((byte_255834771 & 1) != 0)
    goto LABEL_78;
  byte_255834771 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834850, v81);
  v122 = 0xDC86BCC6BECED2ELL;
  v123 = "VideoPlayerContentType";
  *(_QWORD *)&v127[0] = 0x31CD534126;
  *((_QWORD *)&v127[0] + 1) = "uint8_t";
  v84 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v127);
  if (v84)
  {
    v85 = *v84;
    re::StringID::destroyString((re::StringID *)v127);
    v86 = (unsigned int *)qword_255834890;
    v126 = v85;
    re::TypeBuilder::beginEnumType((uint64_t)v127, &v122, 1, 1, (uint64_t)&v125);
    v88 = *v86;
    if ((_DWORD)v88)
    {
      for (k = 0; k < v88; ++k)
      {
        v90 = *(_QWORD *)(*((_QWORD *)v86 + 1) + 8 * k);
        if (*(_DWORD *)v90 == 1)
        {
          v91 = *(char **)(v90 + 16);
          if (v91)
          {
            v92 = *v91;
            if (*v91)
            {
              v93 = v91[1];
              if (v93)
              {
                v94 = (unsigned __int8 *)(v91 + 2);
                do
                {
                  v92 = 31 * v92 + v93;
                  v95 = *v94++;
                  v93 = v95;
                }
                while (v95);
              }
            }
          }
          else
          {
            v92 = 0;
          }
          v96 = *(_QWORD *)(v90 + 8);
          *(_QWORD *)&v124.var0 = 2 * v92;
          v124.var1 = v91;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v127, v96, &v124);
          re::StringID::destroyString((re::StringID *)&v124);
          v88 = *v86;
        }
      }
      if (v88)
      {
        for (m = 0; m < v88; ++m)
        {
          v98 = *(_QWORD *)(*((_QWORD *)v86 + 1) + 8 * m);
          if (*(_DWORD *)v98 == 2)
          {
            v99 = *(char **)(v98 + 16);
            if (v99)
            {
              v100 = *v99;
              if (*v99)
              {
                v101 = v99[1];
                if (v101)
                {
                  v102 = (unsigned __int8 *)(v99 + 2);
                  do
                  {
                    v100 = 31 * v100 + v101;
                    v103 = *v102++;
                    v101 = v103;
                  }
                  while (v103);
                }
              }
            }
            else
            {
              v100 = 0;
            }
            v104 = *(_QWORD *)(v98 + 8);
            *(_QWORD *)&v124.var0 = 2 * v100;
            v124.var1 = v99;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v127, v104, &v124);
            re::StringID::destroyString((re::StringID *)&v124);
            v88 = *v86;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v127, v105);
    xmmword_255834870 = (__int128)v124;
    re::StringID::destroyString((re::StringID *)&v122);
LABEL_78:
    v106 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
    *(_DWORD *)v106 = 1;
    *(_QWORD *)(v106 + 8) = "contentType";
    *(_QWORD *)(v106 + 16) = v12 + 160;
    *(_QWORD *)(v106 + 24) = 0;
    *(_QWORD *)(v106 + 32) = 1;
    *(_DWORD *)(v106 + 40) = 0;
    *(_QWORD *)(v106 + 48) = 0;
    *(_QWORD *)(v106 + 56) = 0;
    *(_DWORD *)(v106 + 64) = 0;
    *(_QWORD *)v12 = v106;
    __cxa_guard_release((__guard *)(v12 + 8));
    goto LABEL_11;
  }
  re::StringID::destroyString((re::StringID *)v127);
  re::internal::assertLog((re::internal *)5, v118, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VideoPlayerContentType");
  _os_crash();
  __break(1u);
}

void re::internal::defaultConstruct<re::ecs2::VideoPlayerStatusComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  re::make::shared::unsafelyInplace<re::ecs2::VideoPlayerStatusComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoPlayerStatusComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoPlayerStatusComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoPlayerStatusComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoPlayerStatusComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoPlayerStatusComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoPlayerStatusComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoPlayerStatusComponent>, this);
}

void *re::EventBus::getTypeId<REVideoPlayerContentTypeChangedEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<REVideoPlayerContentTypeChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"36REVideoPlayerContentTypeChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[480];
}

void *re::EventBus::getTypeId<REVideoPlayerVideoSizeChangedEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<REVideoPlayerVideoSizeChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"34REVideoPlayerVideoSizeChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[482];
}

void *re::EventBus::getTypeId<REVideoPlayerViewingModeChangedEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<REVideoPlayerViewingModeChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"36REVideoPlayerViewingModeChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[484];
}

void *re::EventBus::getTypeId<REVideoPlayerVideoReceiverEndpointChangedEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<REVideoPlayerVideoReceiverEndpointChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"46REVideoPlayerVideoReceiverEndpointChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[486];
}

void re::make::shared::unsafelyInplace<re::ecs2::VideoPlayerStatusComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59D80;
  *(_DWORD *)(v1 + 28) = -1082130432;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_WORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 176) = -1;
  *(_QWORD *)(v1 + 184) = 0;
}

double re::ecs2::downgradeStaticTextComponentFromFall2023@<D0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  char v6;
  double result;
  __int128 v8;
  char v9;
  __int128 v10;
  char v11;

  v6 = *((_BYTE *)this + 144);
  v8 = *((_OWORD *)this + 8);
  v9 = v6;
  re::ColorGamut4F::as((uint64_t)&v8, 0, 3, (uint64_t)&v10);
  result = *(double *)&v10;
  *((_OWORD *)this + 8) = v10;
  *((_BYTE *)this + 144) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_StaticTextComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254115E20);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115E20))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115E68, 0);
    *(uint64_t *)((char *)&qword_254115E78 + 6) = 0;
    qword_254115E78 = 0;
    qword_254115E88 = 0;
    qword_254115E90 = 0xFFFFFFFFLL;
    qword_254115E68 = (uint64_t)&off_24ED7DAA8;
    qword_254115E98 = (uint64_t)"StaticTextComponent";
    dword_254115EA0 = 0;
    unk_254115EA8 = 0u;
    unk_254115EB8 = 0u;
    unk_254115EC8 = 0u;
    qword_254115ED8 = 0;
    __cxa_guard_release(&qword_254115E20);
  }
  return &qword_254115E68;
}

void re::ecs2::initInfo_StaticTextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0x57F126D54E440CC4;
  v31[1] = "StaticTextComponent";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_333);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_333);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115E30 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x8000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254115E38 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::ecs2::introspect_TextAnchor((re::ecs2 *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "anchor";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254115E40 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::IntrospectionInfo<re::DynamicString>::get(1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "text";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254115E48 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_AssetHandle((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "fontAssetHandle";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x4800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254115E50 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_ColorGamut((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "colorGamut";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x9000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254115E58 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 64, 8);
      *(_DWORD *)v29 = 6;
      *(_QWORD *)(v29 + 8) = 1;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      *(_BYTE *)(v29 + 40) = 1;
      *(_QWORD *)(v29 + 48) = re::ecs2::downgradeStaticTextComponentFromFall2023;
      *(_DWORD *)(v29 + 56) = 2;
      qword_254115E60 = v29;
      __cxa_guard_release(&_MergedGlobals_333);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254115E30;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::StaticTextComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::StaticTextComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StaticTextComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StaticTextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

uint64_t re::internal::defaultConstruct<re::ecs2::StaticTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::StaticTextComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::StaticTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::StaticTextComponent>(uint64_t a1)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_StaticTextComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StaticTextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StaticTextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StaticTextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StaticTextComponent>, this);
}

uint64_t *re::ecs2::allocInfo_StaticTextSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254115E28);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115E28))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115EE0, 0);
    *(uint64_t *)((char *)&qword_254115EF0 + 6) = 0;
    qword_254115EF0 = 0;
    qword_254115F00 = 0;
    qword_254115F08 = 0xFFFFFFFFLL;
    qword_254115EE0 = (uint64_t)&off_24ED7DAA8;
    qword_254115F10 = (uint64_t)"StaticTextSystem";
    dword_254115F18 = 0;
    unk_254115F20 = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254115F50 = 0;
    __cxa_guard_release(&qword_254115E28);
  }
  return &qword_254115EE0;
}

void re::ecs2::initInfo_StaticTextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xEB707E3A47CF15D4;
  v5[1] = "StaticTextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_StaticTextSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::StaticTextSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::StaticTextSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StaticTextSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StaticTextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::StaticTextSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED6F798;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::StaticTextSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::StaticTextSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED6F798;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::StaticTextSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_StaticTextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StaticTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StaticTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StaticTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StaticTextSystem>, this);
}

double re::ecs2::StaticTextSystem::willAddSceneToECSService(re::ecs2::StaticTextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 13);
  if (!v2 || (*(_BYTE *)(v2 + 424) & 0x10) != 0)
  {
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v5[0] = 0;
    v5[2] = 0;
    v5[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::createSubscription(REEventHandlerResult (*)(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Slice<re::ecs2::StaticTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::Subscription const&,re::Slice<re::ecs2::StaticTextComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 304), (uint64_t)v5);
  }
  return result;
}

uint64_t `anonymous namespace'::deactivateComponent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  re::TextManager *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 56));
  v6 = re::ServiceLocator::service<re::RenderManager>(v5);
  if (a3)
  {
    v7 = *(re::TextManager **)(v6 + 72);
    v8 = 8 * a3;
    do
    {
      v9 = *a2++;
      re::TextManager::removeStaticText(v7, *(_QWORD *)(v9 + 96), *(_QWORD *)(v9 + 104));
      v8 -= 8;
    }
    while (v8);
  }
  return 0;
}

void re::ecs2::StaticTextSystem::willRemoveSceneFromECSService(re::ecs2::StaticTextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 13);
  if (!v2 || (*(_BYTE *)(v2 + 424) & 0x10) != 0)
  {
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v4 = 0;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::createSubscription(REEventHandlerResult (*)(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Slice<re::ecs2::StaticTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::Subscription const&,re::Slice<re::ecs2::StaticTextComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 304, &v4);
  }
}

uint64_t re::ecs2::StaticTextSystem::updateScenes(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _UNKNOWN **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  int v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t **v18;
  float32x4_t **v19;
  float32x4_t *v20;
  re::ecs2::TransformComponent **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float32x4_t v32;
  re *v33;
  uint64_t v34;
  unsigned int v35;
  double v36;
  double v37;
  __n128 v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int *v42;
  re::DynamicString **v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  re::RenderFrame *v54;
  uint64_t *v55;
  re::TextManager *v56;
  unsigned int v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  unsigned int v68;
  uint64_t v69;
  _BYTE v70[16];
  uint64_t v71[2];
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;

  v2 = result;
  v86 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = a2[1];
    if (v4)
    {
      v5 = *a2;
      v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      v7 = (uint64_t)&(*a2)[(_QWORD)v4];
      v52 = v7;
      v53 = result;
      do
      {
        v8 = *v5;
        if (*v5)
        {
          v9 = *(_QWORD *)(v2 + 112);
          if (!v9)
          {
            re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 152);
            _os_crash();
            __break(1u);
          }
          v56 = *(re::TextManager **)(v9 + 72);
          if (v56)
          {
            v10 = *(unsigned __int8 **)(v9 + 152);
            v55 = v5;
            if (v10)
              v57 = *v10;
            else
              v57 = 0;
            re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v71);
            re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v6[38]);
            re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70, 3021, v2);
            v11 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 104);
            if (v11)
              v54 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
            else
              v54 = 0;
            v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 24))(*(_QWORD *)(v2 + 136));
            v13 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
            v14 = *((_DWORD *)v13 + 31);
            if (!v14)
              v14 = *((_DWORD *)v13 + 4);
            v15 = v14 + 1;
            v68 = 0;
            v66 = 0u;
            v67 = 0u;
            v69 = 0x7FFFFFFFLL;
            v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 144) + 16))(*(_QWORD *)(v2 + 144));
            v16 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v6[38]);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 24);
              if (v17)
              {
                v18 = *(float32x4_t ***)(v16 + 40);
                v19 = &v18[v17];
                do
                {
                  v20 = *v18;
                  v21 = (re::ecs2::TransformComponent **)(*v18)[1].i64[0];
                  if (*(_BYTE *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v65, (unint64_t)v21))
                  {
                    v64 = 0;
                    (*(void (**)(float32x4_t *__return_ptr, uint64_t, re::ecs2::TransformComponent **))(*(_QWORD *)v12 + 8))(&v76, v12, v21);
                    if (v76.i8[0])
                      v22 = v76.i64[1];
                    else
                      v22 = 0;
                    v63 = 0;
                    v64 = v22;
                    v76.i64[0] = (uint64_t)&v66;
                    v76.i64[1] = v8;
                    v77.i64[0] = v22;
                    v23 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v66, (uint64_t *)&v77);
                    if (v23)
                    {
                      v24 = *v23;
                    }
                    else
                    {
                      v25 = 0xBF58476D1CE4E5B9
                          * ((*(_QWORD *)(*(_QWORD *)(v76.i64[1] + 104) + 272) >> 31) ^ (*(_QWORD *)(*(_QWORD *)(v76.i64[1] + 104) + 272) >> 1));
                      v26 = (0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31);
                      v27 = 0x94D049BB133111EBLL
                          * ((0xBF58476D1CE4E5B9 * (v77.i64[0] ^ ((unint64_t)v77.i64[0] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v77.i64[0] ^ ((unint64_t)v77.i64[0] >> 30))) >> 27));
                      v24 = ((v27 ^ (v27 >> 31)) + (v26 << 6) + (v26 >> 2) - 0x61C8864680B583E9) ^ v26;
                    }
                    v63 = v24;
                    v28 = v20[9].i8[0];
                    v72 = v20[8];
                    v73.i8[0] = v28;
                    re::ColorGamut4F::as((uint64_t)&v72, v57, 1, (uint64_t)&v76);
                    v58 = v76;
                    v29 = v20[6].i64[0];
                    if (v29)
                      goto LABEL_27;
                    v33 = (re *)&v20[4].u32[2];
                    v34 = v20[5].i64[0];
                    if (v34)
                    {
                      v35 = atomic_load((unsigned int *)(v34 + 704));
                      if (v35 == 2)
                      {
                        re::makeFontID(v33, (re::StringID *)&v59);
                        v20[7].i64[0] = re::TextManager::computeSize((_BOOL8)v56, (const re::DynamicString *)&v20[2].u32[2], (const re::FontID *)&v59, v36, v37, v38);
                        re::StringID::invalid((re::StringID *)&v76);
                        v77.i64[0] = 0x3F8000003F800000;
                        v77.i64[1] = 0x3F8000003F800000;
                        v78 = 0u;
                        v79 = 0u;
                        v80 = 0u;
                        v81 = 0u;
                        v82 = -1;
                        v83 = 0;
                        v84 = 0;
                        v85 = re::kInvalidStringRenderHandle;
                        re::ecs2::TransformComponent::worldMatrix4x4F(v21, (const re::ecs2::Entity *)1, &v72);
                        v78 = v72;
                        v79 = v73;
                        v80 = v74;
                        v81 = v75;
                        v82 = v63;
                        v77 = v58;
                        re::StringID::operator=((unint64_t *)&v76, (uint64_t *)&v59);
                        v20[6].i64[0] = re::TextManager::addStaticText(v56, (uint64_t)&v20[2].i64[1], (uint64_t)&v76);
                        v20[6].i64[1] = v39;
                        v20[2].i8[0] = 1;
                        re::StringID::destroyString((re::StringID *)&v76);
                        re::StringID::destroyString((re::StringID *)&v59);
                        v29 = v20[6].i64[0];
                        if (!v29)
                          goto LABEL_55;
LABEL_27:
                        v30 = v20[6].i64[1];
                        re::ecs2::TransformComponent::worldMatrix4x4F(v21, (const re::ecs2::Entity *)1, &v59);
                        if (v20[1].i32[3] == 1)
                        {
                          v31 = 0;
                          v32 = vnegq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v59, v20[7].f32[0] * 0.5), (float32x4_t)0, v60), (float32x4_t)0, v61), vmlaq_f32(vmlaq_n_f32(vmulq_f32(v59, (float32x4_t)0), v60, v20[7].f32[1] * -0.5), (float32x4_t)0, v61)));
                          v32.i32[3] = 1.0;
                          v72 = v59;
                          v73 = v60;
                          v74 = v61;
                          v75 = v62;
                          do
                          {
                            *(float32x4_t *)((char *)&v76 + v31) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(_OWORD *)((char *)&v72 + v31))), (float32x4_t)xmmword_2260E5F20, *(float32x2_t *)&v72.f32[v31 / 4], 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)((char *)&v72 + v31), 2), v32, *(float32x4_t *)((char *)&v72 + v31), 3);
                            v31 += 16;
                          }
                          while (v31 != 64);
                          v59 = v76;
                          v60 = v77;
                          v61 = v78;
                          v62 = v79;
                        }
                        re::TextManager::modifyStaticTextColor(v56, v29, v30, v58.i64[0], v58.i64[1]);
                        re::TextManager::modifyStaticTextWorldMatrix(v56, v29, v30, (__int128 *)&v59);
                        re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long long &>((uint64_t)&v66, &v64, &v63);
                        goto LABEL_37;
                      }
                    }
                    re::AssetHandle::loadAsync(v33);
                  }
LABEL_37:
                  ++v18;
                }
                while (v18 != v19);
              }
            }
            v40 = v68;
            if (v68)
            {
              v41 = 0;
              v42 = (int *)(v67 + 8);
              v43 = (re::DynamicString **)v54;
              while (1)
              {
                v44 = *v42;
                v42 += 8;
                if (v44 < 0)
                  break;
                if (v68 == ++v41)
                {
                  LODWORD(v41) = v68;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v41) = 0;
              v43 = (re::DynamicString **)v54;
            }
            if (v68 != (_DWORD)v41)
            {
              v45 = v41;
              v46 = v67;
              do
              {
                v47 = v46 + 32 * v45;
                v48 = *(_QWORD *)(v47 + 24);
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, *(const re::ecs2::Scene **)(v47 + 16), v43, &v76);
                v72.i64[0] = (unint64_t)v76.i64[0] >> 1;
                v59.i64[0] = v48;
                v49 = re::RenderFrameData::stream((re::RenderFrameData *)(v43 + 33), (const re::WeakStringID *)&v72);
                (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v49 + 48) + 680))(*(_QWORD *)(v49 + 48), &v59);
                re::StringID::destroyString((re::StringID *)&v76);
                v46 = v67;
                if (v68 <= (int)v41 + 1)
                  v50 = v41 + 1;
                else
                  v50 = v68;
                v51 = v41;
                while (1)
                {
                  v45 = (v51 + 1);
                  if (v50 - 1 == v51)
                    break;
                  ++v51;
                  LODWORD(v41) = v45;
                  if ((*(_DWORD *)(v67 + 32 * v45 + 8) & 0x80000000) != 0)
                    goto LABEL_54;
                }
                LODWORD(v41) = v50;
LABEL_54:
                ;
              }
              while (v40 != (_DWORD)v41);
            }
LABEL_55:
            re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v66);
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70);
            result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v71);
            v7 = v52;
            v2 = v53;
            v5 = v55;
            v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
          }
        }
        ++v5;
      }
      while (v5 != (uint64_t *)v7);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long long &>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

void re::ecs2::StaticTextSystem::~StaticTextSystem(re::ecs2::StaticTextSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::StaticTextSystem::typeInfo(re::ecs2::StaticTextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StaticTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StaticTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StaticTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StaticTextSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::StaticTextComponent>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_24ED59E00;
  *(_DWORD *)(v2 + 28) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  v3 = (_QWORD *)(v2 + 40);
  re::DynamicString::setCapacity(v3, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = re::kInvalidStringRenderHandle;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0x3F8000003F800000;
  *(_QWORD *)(a1 + 136) = 0x3F8000003F800000;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::createSubscription(REEventHandlerResult (*)(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Slice<re::ecs2::StaticTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::Subscription const&,re::Slice<re::ecs2::StaticTextComponent*>&&)#1}::__invoke(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a2 + 8))(a1, *a3, a3[1]);
}

uint64_t *re::ecs2::allocInfo_MeshSortGroupToken(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254115F60);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115F60))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115FF8, 0);
    *(uint64_t *)((char *)&qword_254116008 + 6) = 0;
    qword_254116008 = 0;
    qword_254116018 = 0;
    qword_254116020 = 0xFFFFFFFFLL;
    qword_254115FF8 = (uint64_t)&off_24ED7DAA8;
    qword_254116028 = (uint64_t)"MeshSortGroupToken";
    dword_254116030 = 0;
    unk_254116038 = 0u;
    unk_254116048 = 0u;
    unk_254116058 = 0u;
    qword_254116068 = 0;
    __cxa_guard_release(&qword_254115F60);
  }
  return &qword_254115FF8;
}

void re::ecs2::initInfo_MeshSortGroupToken(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[2];
  __int128 v26;

  v25[0] = 0xE012E5EA2B5454CALL;
  v25[1] = "MeshSortGroupToken";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_334);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_334);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint64_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_groupId";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254115F88 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_MeshSortingConfiguration((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_sortingConfiguration";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254115F90 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_useDepthBias";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x900000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254115F98 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v19 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "m_sortPointOverride";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254115FA0 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v22 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "m_groupNormal";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x3000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254115FA8 = v23;
      __cxa_guard_release(&_MergedGlobals_334);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254115F88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSortGroupToken>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSortGroupToken>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSortGroupToken>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSortGroupToken>;
  re::IntrospectionRegistry::add(this, v3);
  v24 = v26;
}

void re::internal::defaultConstruct<re::ecs2::MeshSortGroupToken>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_WORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 80) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::MeshSortGroupToken>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_WORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 80) = 0;
  return result;
}

uint64_t *re::ecs2::allocInfo_MeshSortingComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254115F70);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115F70))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116070, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254116080 = 0;
    qword_254116090 = 0;
    qword_254116098 = 0xFFFFFFFFLL;
    qword_254116070 = (uint64_t)&off_24ED7DAA8;
    qword_2541160A0 = (uint64_t)"MeshSortingComponent";
    dword_2541160A8 = 0;
    xmmword_2541160B0 = 0u;
    unk_2541160C0 = 0u;
    xmmword_2541160D0 = 0u;
    qword_2541160E0 = 0;
    __cxa_guard_release(&qword_254115F70);
  }
  return &qword_254116070;
}

void re::ecs2::initInfo_MeshSortingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  re::IntrospectionBase *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;

  v42[0] = 0x3ED245A66561E00CLL;
  v42[1] = "MeshSortingComponent";
  re::StringID::destroyString((re::StringID *)v42);
  *((_OWORD *)this + 2) = v43;
  v4 = atomic_load((unsigned __int8 *)&qword_254115F78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254115F78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115FB0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_MeshSortingConfiguration((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "sortingConfiguration";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254115FB8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = v13;
      v15 = (uint64_t *)qword_254115F68;
      if (!qword_254115F68)
      {
        v15 = re::ecs2::allocInfo_MeshSortGroupToken((re::ecs2 *)v13);
        qword_254115F68 = (uint64_t)v15;
        re::ecs2::initInfo_MeshSortGroupToken((re::ecs2 *)v15, v16);
      }
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "groupToken";
      *(_QWORD *)(v17 + 16) = v15;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254115FC0 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_int((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "priorityInGroup";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xA000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254115FC8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_int((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "depthPriorityInGroup";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xA400000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254115FD0 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v27 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "sortPointOverride";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x13000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254115FD8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::IntrospectionInfo<re::DynamicArray<int>>::get(1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "meshPartPrioritiesInGroup";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x14000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254115FE0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::IntrospectionInfo<re::DynamicArray<int>>::get(1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "meshPartDepthPrioritiesInGroup";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x16800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254115FE8 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_BOOL((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "isManagingUISorting";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0xA800000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254115FF0 = v40;
      __cxa_guard_release(&qword_254115F78);
    }
  }
  *((_QWORD *)this + 2) = 0x1D000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254115FB0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSortingComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSortingComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSortingComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSortingComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v41 = v43;
}

double re::internal::defaultConstruct<re::ecs2::MeshSortingComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshSortingComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshSortingComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshSortingComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshSortingComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSortingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSortingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSortingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSortingComponent>, this);
}

uint64_t *re::ecs2::allocInfo_MeshSortingSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254115F80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254115F80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541160E8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541160F8 = 0;
    qword_254116108 = 0;
    qword_254116110 = 0xFFFFFFFFLL;
    qword_2541160E8 = (uint64_t)&off_24ED7DAA8;
    qword_254116118 = (uint64_t)"MeshSortingSystem";
    dword_254116120 = 0;
    xmmword_254116128 = 0u;
    unk_254116138 = 0u;
    xmmword_254116148 = 0u;
    qword_254116158 = 0;
    __cxa_guard_release(&qword_254115F80);
  }
  return &qword_2541160E8;
}

void re::ecs2::initInfo_MeshSortingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x410912A8B5CB478CLL;
  v5[1] = "MeshSortingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MeshSortingSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSortingSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSortingSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSortingSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSortingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::MeshSortingSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED6F828;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::MeshSortingSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::MeshSortingSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED6F828;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::MeshSortingSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshSortingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSortingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSortingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSortingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSortingSystem>, this);
}

__n128 re::ecs2::MeshSortGroupToken::createNewToken@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v5;
  _QWORD v6[2];

  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  uuid_generate_random((unsigned __int8 *)v6);
  *(_QWORD *)a2 = (v6[1] + (v6[0] << 6) + (v6[0] >> 2) - 0x61C8864680B583E9) ^ v6[0];
  *(_WORD *)(a2 + 8) = *(_WORD *)a1;
  if (*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(a2 + 16) = 1;
    result = *(__n128 *)(a1 + 32);
    *(__n128 *)(a2 + 32) = result;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a2 + 48) = 1;
    result = *(__n128 *)(a1 + 64);
    *(__n128 *)(a2 + 64) = result;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    *(_BYTE *)(a2 + 80) = 1;
    result = *(__n128 *)(a1 + 96);
    v5 = *(_OWORD *)(a1 + 112);
    *(__n128 *)(a2 + 96) = result;
    *(_OWORD *)(a2 + 112) = v5;
  }
  return result;
}

uint64_t re::ecs2::MeshSortGroupToken::createNewToken@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    *(_QWORD *)a3 = *(_QWORD *)(v3 + 296);
    *(_WORD *)(a3 + 8) = *(_WORD *)a2;
    if (*(_BYTE *)(a2 + 16))
    {
      *(_BYTE *)(a3 + 16) = 1;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
    }
    if (*(_BYTE *)(a2 + 48))
    {
      *(_BYTE *)(a3 + 48) = 1;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
    }
    if (*(_BYTE *)(a2 + 80))
    {
      *(_BYTE *)(a3 + 80) = 1;
      v4 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 112) = v4;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Component must be part of an entity", "component->entity() != nullptr", "createNewToken", 86);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::MeshSortGroupToken::operator=(uint64_t result, uint64_t a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  __int128 v6;

  if (result != a2)
  {
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    v2 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(result + 16))
      v3 = 0;
    else
      v3 = v2 == 0;
    if (!v3)
    {
      if (*(_BYTE *)(result + 16))
        v4 = v2 == 0;
      else
        v4 = 0;
      if (v4)
      {
        *(_BYTE *)(result + 16) = 0;
      }
      else
      {
        if (!*(_BYTE *)(result + 16) && *(_BYTE *)(a2 + 16))
          *(_BYTE *)(result + 16) = 1;
        *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
      }
    }
    if (*(_BYTE *)(result + 48))
      v5 = 0;
    else
      v5 = *(_BYTE *)(a2 + 48) == 0;
    if (!v5)
    {
      if (!*(_BYTE *)(result + 48) || *(_BYTE *)(a2 + 48))
      {
        if (!*(_BYTE *)(result + 48) && *(_BYTE *)(a2 + 48))
          *(_BYTE *)(result + 48) = 1;
        *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 64);
      }
      else
      {
        *(_BYTE *)(result + 48) = 0;
      }
    }
    if (*(_BYTE *)(result + 80) || *(_BYTE *)(a2 + 80))
    {
      if (!*(_BYTE *)(result + 80) || *(_BYTE *)(a2 + 80))
      {
        if (!*(_BYTE *)(result + 80) && *(_BYTE *)(a2 + 80))
          *(_BYTE *)(result + 80) = 1;
        v6 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(result + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(result + 112) = v6;
      }
      else
      {
        *(_BYTE *)(result + 80) = 0;
      }
    }
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 8) = 0;
    if (*(_BYTE *)(a2 + 16))
      *(_BYTE *)(a2 + 16) = 0;
    if (*(_BYTE *)(a2 + 48))
      *(_BYTE *)(a2 + 48) = 0;
    if (*(_BYTE *)(a2 + 80))
      *(_BYTE *)(a2 + 80) = 0;
  }
  return result;
}

uint64_t re::ecs2::MeshSortingSystem::willAddSystemToECSService(re::ecs2::MeshSortingSystem *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 20) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v2);
  return re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
}

double re::ecs2::MeshSortingSystem::willRemoveSystemFromECSService(re::ecs2::MeshSortingSystem *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::MeshSortingSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  re::ecs2::RenderingSubsystem **v5;
  uint64_t v6;
  __guard *v7;
  re::ecs2::SceneComponentTable *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::Allocator *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void **v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  re::Allocator *v44;
  unsigned int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  signed int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t i;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  signed int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t j;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  const re::ecs2::EntityComponentCollection *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  BOOL v119;
  uint64_t v120;
  int v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t QualifiedComponentForSorting;
  id *v126;
  float32x4_t *v127;
  float32x4_t v128;
  uint64_t v129;
  float32x4_t v130;
  id v131;
  float32x4_t v132;
  float32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v139;
  unint64_t v140;
  int v141;
  __n128 v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  _QWORD *v163;
  _QWORD *v164;
  int v165;
  uint64_t v166;
  int *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  re::ecs2::HierarchicalFadeComponent **v184;
  uint64_t v185;
  re::ecs2::HierarchicalFadeComponent *v186;
  int v187;
  uint64_t v188;
  int *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  int *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int *v227;
  int v228;
  _DWORD *v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  int *v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  float32x4_t v239;
  float32x4_t **v240;
  uint64_t v241;
  _QWORD *v242;
  float32x4_t **k;
  float32x4_t *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  char v250;
  re::ecs2::TransformComponent *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  float32x4_t *v257;
  uint64_t v258;
  int *v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  int *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  float32x4_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  float32x4_t v275;
  uint32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  float32x4_t *v282;
  float32x4_t *v283;
  int v284;
  int v285;
  uint64_t *v286;
  uint64_t v287;
  _QWORD *v288;
  unsigned int *v289;
  _QWORD *v290;
  uint64_t *v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  unint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t v309;
  int *v310;
  int v311;
  re::RenderFrameData *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  double v321;
  uint64_t v322;
  uint64_t v323;
  re::ecs2::RenderingSubsystem **v324;
  uint64_t *v325;
  re::ecs2::HierarchicalFadeComponent **v326;
  int32x4_t v327;
  uint64_t *v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  float32x4_t v335;
  _QWORD *v336;
  float32x4_t v337;
  unsigned int *v338;
  uint64_t v339;
  re::Allocator *v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t *v343;
  unint64_t v344;
  _OWORD v345[2];
  const re::ecs2::EntityComponentCollection *v346;
  uint64_t v347;
  _QWORD v348[2];
  uint64_t v349;
  void *v350[2];
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  _QWORD v357[2];
  unint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361[4];
  int v362;
  uint64_t v363;
  _BYTE v364[120];
  __int128 v365;
  __int128 v366;
  unsigned int v367;
  uint64_t v368;
  __int128 v369;
  __int128 v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  re::Allocator *v374;
  re::RenderFrame *v375;
  re::ecs2::RenderingSubsystem *v376;
  re::ecs2::TransformComponent *v377;
  float32x4_t v378;
  unint64_t v379;
  float32x4_t v380;
  float32x4_t v381;
  _BYTE v382[12];
  _BYTE v383[48];
  float32x4_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;

  v2 = a1;
  v389 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(re::ecs2::RenderingSubsystem ***)a2;
      v6 = *(_QWORD *)a2 + 8 * v4;
      v327 = vdupq_n_s32(0x7F800000u);
      v322 = v6;
      do
      {
        v376 = *v5;
        v8 = (re::ecs2::RenderingSubsystem *)((char *)v376 + 200);
        v9 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v376 + 200), (const re::ecs2::ComponentTypeBase *)v7[453]);
        if (v9)
        {
          v328 = *(uint64_t **)(v9 + 40);
          v331 = *(_QWORD *)(v9 + 24);
        }
        else
        {
          v328 = 0;
          v331 = 0;
        }
        v10 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10)
        {
          v326 = *(re::ecs2::HierarchicalFadeComponent ***)(v10 + 40);
          v329 = *(_QWORD *)(v10 + 24);
        }
        else
        {
          v326 = 0;
          v329 = 0;
        }
        v11 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v11)
        {
          v325 = *(uint64_t **)(v11 + 40);
          v13 = *(_QWORD *)(v11 + 24);
        }
        else
        {
          v325 = 0;
          v13 = 0;
        }
        if (v331 || v329 || v13)
        {
          v14 = *(_QWORD *)(v2 + 112);
          if (!v14)
          {
            re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 328);
            _os_crash();
            __break(1u);
          }
          v323 = v13;
          v324 = v5;
          v375 = (re::RenderFrame *)re::RenderFrameBox::get(*(_QWORD *)(v14 + 104) + 344, 0xFFFFFFFFFFFFFFFuLL);
          v15 = (re::Allocator *)*((_QWORD *)v375 + 47);
          v374 = v15;
          v373 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 24))(*(_QWORD *)(v2 + 136));
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v373 + 16))(v373);
          v17 = *(_DWORD *)(v16 + 124);
          if (!v17)
            v17 = *(_DWORD *)(v16 + 16);
          v371 = 0;
          v369 = 0u;
          v370 = 0u;
          v372 = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v369, (uint64_t)v15, v17 + 1);
          v367 = 0;
          v365 = 0u;
          v366 = 0u;
          v368 = 0x7FFFFFFFLL;
          v340 = v15;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v365, (uint64_t)v15, 3);
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v364);
          v362 = 0;
          memset(v361, 0, sizeof(v361));
          v363 = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v361, (uint64_t)v364, 3);
          v18 = v328;
          if (v331)
          {
            while (1)
            {
              v19 = *v18;
              v21 = *v18 + 176;
              v20 = *(_QWORD *)v21;
              v380.i64[0] = *v18;
              v122 = v20 == 0;
              v22 = 32;
              if (v122)
                v21 = v19 + 32;
              else
                v22 = 176;
              if (*(_BYTE *)(v21 + 9) && *(_BYTE *)(v21 + 8) != 5)
                break;
LABEL_53:
              if (++v18 == &v328[v331])
              {
                v44 = v374;
                goto LABEL_56;
              }
            }
            v23 = *(_QWORD *)(v19 + v22);
            v24 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
            v25 = v24 ^ (v24 >> 31);
            if ((_QWORD)v365)
            {
              v26 = v25 % DWORD2(v366);
              v27 = *((_QWORD *)&v365 + 1);
              v28 = *(unsigned int *)(*((_QWORD *)&v365 + 1) + 4 * v26);
              if ((_DWORD)v28 != 0x7FFFFFFF)
              {
                while (*(_QWORD *)(v366 + (v28 << 6) + 16) != v23)
                {
                  v28 = *(_DWORD *)(v366 + (v28 << 6) + 8) & 0x7FFFFFFF;
                  if ((_DWORD)v28 == 0x7FFFFFFF)
                    goto LABEL_30;
                }
                re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(v366 + (v28 << 6) + 24), &v380);
                goto LABEL_53;
              }
LABEL_30:
              memset(&v383[8], 0, 20);
              *(_QWORD *)&v383[32] = 0;
              *(_QWORD *)v383 = v340;
              re::DynamicArray<float *>::setCapacity(v383, 0);
              ++*(_DWORD *)&v383[24];
              re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v383, &v380);
              v29 = v26;
              v30 = *(unsigned int *)(v27 + 4 * v26);
              if ((_DWORD)v30 != 0x7FFFFFFF)
              {
                while (*(_QWORD *)(v366 + (v30 << 6) + 16) != v23)
                {
                  v30 = *(_DWORD *)(v366 + (v30 << 6) + 8) & 0x7FFFFFFF;
                  if ((_DWORD)v30 == 0x7FFFFFFF)
                    goto LABEL_35;
                }
                goto LABEL_50;
              }
            }
            else
            {
              memset(&v383[8], 0, 20);
              *(_QWORD *)&v383[32] = 0;
              *(_QWORD *)v383 = v340;
              re::DynamicArray<float *>::setCapacity(v383, 0);
              ++*(_DWORD *)&v383[24];
              re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v383, &v380);
              v29 = 0;
            }
LABEL_35:
            v31 = v368;
            if ((_DWORD)v368 == 0x7FFFFFFF)
            {
              v31 = v367;
              v32 = v367;
              if (v367 == DWORD2(v366))
              {
                re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v365, 2 * HIDWORD(v366));
                v32 = v367;
                v29 = v25 % DWORD2(v366);
              }
              v367 = v32 + 1;
              v33 = v366;
              v34 = *(_DWORD *)(v366 + (v31 << 6) + 8);
            }
            else
            {
              v33 = v366;
              v34 = *(_DWORD *)(v366 + ((unint64_t)v368 << 6) + 8);
              LODWORD(v368) = v34 & 0x7FFFFFFF;
            }
            v35 = v33 + (v31 << 6);
            *(_DWORD *)(v35 + 8) = v34 | 0x80000000;
            v36 = *((_QWORD *)&v365 + 1);
            *(_DWORD *)(v35 + 8) = *(_DWORD *)(*((_QWORD *)&v365 + 1) + 4 * v29) | 0x80000000;
            *(_QWORD *)v35 = v25;
            *(_QWORD *)(v35 + 16) = v23;
            *(_QWORD *)(v35 + 24) = 0;
            v37 = (_QWORD *)(v35 + 24);
            *(_QWORD *)(v35 + 56) = 0;
            v38 = (void **)(v35 + 56);
            *(_QWORD *)(v35 + 32) = 0;
            *(_QWORD *)(v35 + 40) = 0;
            *(_DWORD *)(v35 + 48) = 0;
            if (*(_QWORD *)v383)
            {
              v39 = *(_QWORD *)&v383[16];
              *v37 = *(_QWORD *)v383;
              re::DynamicArray<float *>::setCapacity(v37, v39);
              v41 = *(_QWORD *)(v35 + 40);
              v40 = (unint64_t *)(v35 + 40);
              ++*((_DWORD *)v40 + 2);
              if (v39 >= v41)
              {
                re::DynamicArray<float *>::setCapacity(v37, v39);
                v42 = *v40;
                v43 = *(_QWORD *)&v383[32];
                if (*v40)
                {
                  memmove(*v38, *(const void **)&v383[32], 8 * v42);
                  v42 = *v40;
                }
                memcpy((char *)*v38 + 8 * v42, (const void *)(v43 + 8 * v42), 8 * v39 - 8 * v42);
              }
              else if (v39)
              {
                memmove(*v38, *(const void **)&v383[32], 8 * v39);
              }
              *v40 = v39;
            }
            *(_DWORD *)(v36 + 4 * v29) = v31;
            ++HIDWORD(v366);
            ++HIDWORD(v368);
            v2 = a1;
LABEL_50:
            if (*(_QWORD *)v383 && *(_QWORD *)&v383[32])
              (*(void (**)(void))(**(_QWORD **)v383 + 40))();
            goto LABEL_53;
          }
          v44 = v340;
LABEL_56:
          v357[1] = 0;
          v358 = 0;
          v359 = 0;
          v360 = 0;
          v341 = (uint64_t)v44;
          v357[0] = v44;
          re::DynamicArray<float *>::setCapacity(v357, 0);
          ++v359;
          v45 = v367;
          if (v367)
          {
            v46 = 0;
            v47 = (int *)(v366 + 8);
            while (1)
            {
              v48 = *v47;
              v47 += 16;
              if (v48 < 0)
                break;
              if (v367 == ++v46)
              {
                LODWORD(v46) = v367;
                break;
              }
            }
          }
          else
          {
            LODWORD(v46) = 0;
          }
          if (v367 != (_DWORD)v46)
          {
            v49 = v46;
            v50 = v366;
            do
            {
              v51 = v50 + (v49 << 6);
              v52 = *(_QWORD *)(v51 + 40);
              if (v52)
              {
                v53 = *(uint64_t **)(v51 + 56);
                v54 = 8 * v52;
                do
                {
                  v55 = *v53++;
                  *(_QWORD *)v383 = v55;
                  re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v357, v383);
                  v54 -= 8;
                }
                while (v54);
              }
              v56 = v360;
              v57 = v358;
              v58 = 126 - 2 * __clz(v358);
              if (v358)
                v59 = v58;
              else
                v59 = 0;
              std::__introsort<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **,false>(v360, (uint64_t *)(v360 + 8 * v358), v59, 1);
              if (v57)
              {
                v60 = 0;
                v61 = *(_DWORD *)(*(_QWORD *)v56 + 160);
                v62 = 8 * v57;
                do
                {
                  v64 = *(_QWORD *)v56;
                  v56 += 8;
                  v63 = v64;
                  v65 = *(_DWORD *)(v64 + 160);
                  if (v61 != v65)
                    ++v60;
                  *(_BYTE *)(v63 + 400) = v60;
                  v61 = v65;
                  v62 -= 8;
                }
                while (v62);
              }
              v358 = 0;
              ++v359;
              if (v45 <= (int)v46 + 1)
                v66 = v46 + 1;
              else
                v66 = v45;
              while (1)
              {
                v49 = (v46 + 1);
                if (v66 - 1 == (_DWORD)v46)
                  break;
                LODWORD(v46) = v46 + 1;
                v67 = v49;
                if ((*(_DWORD *)(v50 + (v49 << 6) + 8) & 0x80000000) != 0)
                  goto LABEL_82;
              }
              v67 = v66;
LABEL_82:
              LODWORD(v46) = v67;
            }
            while (v45 != v67);
          }
          v68 = *(_QWORD *)(v2 + 160);
          if (v68)
          {
            v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68);
            v354 = 0u;
            v355 = 0u;
            LODWORD(v356) = 0;
            *(_QWORD *)((char *)&v356 + 4) = 0x7FFFFFFFLL;
            if (*(_QWORD *)v69)
            {
              v70 = v69;
              if (*(_DWORD *)(v69 + 28) <= 3u)
                v71 = 3;
              else
                v71 = *(_DWORD *)(v69 + 28);
              re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)&v354, *(_QWORD *)v69, v71);
              v72 = DWORD2(v355);
              if (HIDWORD(v355))
              {
                if (DWORD2(v355))
                  memset_pattern16(*((void **)&v354 + 1), &unk_2260EB7B0, 4 * DWORD2(v355));
                if ((_DWORD)v356)
                {
                  v73 = 0;
                  v74 = 48 * v356;
                  do
                  {
                    v75 = *(_DWORD *)(v355 + v73 + 8);
                    if (v75 < 0)
                      *(_DWORD *)(v355 + v73 + 8) = v75 & 0x7FFFFFFF;
                    v73 += 48;
                  }
                  while (v74 != v73);
                }
                *(_QWORD *)&v356 = 0x7FFFFFFF00000000;
                HIDWORD(v355) = 0;
                v72 = DWORD2(v355);
                ++DWORD2(v356);
              }
              v76 = *(_DWORD *)(v70 + 28);
              if (v72 < v76)
                re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v354, v76);
              v77 = *(unsigned int *)(v70 + 32);
              if ((_DWORD)v77)
              {
                v78 = 0;
                for (i = 0; i < v77; ++i)
                {
                  v80 = *(_QWORD *)(v70 + 16);
                  v81 = (uint64_t *)(v80 + v78);
                  if ((*(_DWORD *)(v80 + v78 + 8) & 0x80000000) != 0)
                  {
                    v82 = *v81;
                    v83 = DWORD1(v356);
                    v84 = *v81 % (unint64_t)DWORD2(v355);
                    if (DWORD1(v356) == 0x7FFFFFFF)
                    {
                      v83 = v356;
                      v85 = v356;
                      if ((_DWORD)v356 == DWORD2(v355))
                      {
                        re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v354, 2 * HIDWORD(v355));
                        v85 = v356;
                        v84 = v82 % DWORD2(v355);
                      }
                      LODWORD(v356) = v85 + 1;
                      v86 = v355;
                      v87 = *(_DWORD *)(v355 + 48 * v83 + 8);
                    }
                    else
                    {
                      v86 = v355;
                      v87 = *(_DWORD *)(v355 + 48 * DWORD1(v356) + 8);
                      DWORD1(v356) = v87 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v86 + 48 * v83 + 8) = v87 | 0x80000000;
                    *(_DWORD *)(v355 + 48 * v83 + 8) = *(_DWORD *)(v355 + 48 * v83 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)&v354 + 1) + 4 * v84);
                    *(_QWORD *)(v355 + 48 * v83) = v82;
                    *(_QWORD *)(v355 + 48 * v83 + 16) = v81[2];
                    v88 = v355;
                    v89 = v355 + 48 * v83;
                    *(_OWORD *)(v89 + 24) = *(_OWORD *)(v81 + 3);
                    v90 = *(unsigned __int8 *)(v80 + v78 + 40);
                    *(_BYTE *)(v89 + 40) = v90;
                    if (v90)
                      *(_DWORD *)(v88 + 48 * v83 + 44) = *(_DWORD *)(v80 + v78 + 44);
                    *(_DWORD *)(*((_QWORD *)&v354 + 1) + 4 * v84) = v83;
                    ++HIDWORD(v355);
                    v77 = *(unsigned int *)(v70 + 32);
                    v2 = a1;
                  }
                  v78 += 48;
                }
              }
            }
          }
          else
          {
            v355 = 0u;
            v356 = 0u;
            v354 = 0u;
            DWORD1(v356) = 0x7FFFFFFF;
          }
          v353 = 0;
          v91 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 32))(*(_QWORD *)(v2 + 40));
          v92 = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v91);
          v353 = v92;
          if (v92)
          {
            v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 16))(v92);
            *(_OWORD *)v350 = 0u;
            v351 = 0u;
            LODWORD(v352) = 0;
            *(_QWORD *)((char *)&v352 + 4) = 0x7FFFFFFFLL;
            if (*(_QWORD *)v93)
            {
              v94 = v93;
              if (*(_DWORD *)(v93 + 28) <= 3u)
                v95 = 3;
              else
                v95 = *(_DWORD *)(v93 + 28);
              re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v350, *(_QWORD *)v93, v95);
              v96 = DWORD2(v351);
              if (HIDWORD(v351))
              {
                if (DWORD2(v351))
                  memset_pattern16(v350[1], &unk_2260EB7B0, 4 * DWORD2(v351));
                if ((_DWORD)v352)
                {
                  v97 = 0;
                  v98 = 40 * v352;
                  do
                  {
                    v99 = *(_DWORD *)(v351 + v97 + 8);
                    if (v99 < 0)
                      *(_DWORD *)(v351 + v97 + 8) = v99 & 0x7FFFFFFF;
                    v97 += 40;
                  }
                  while (v98 != v97);
                }
                LODWORD(v352) = 0;
                HIDWORD(v351) = 0;
                v96 = DWORD2(v351);
                *(_QWORD *)((char *)&v352 + 4) = __PAIR64__(DWORD2(v352), 0x7FFFFFFF) + 0x100000000;
              }
              v100 = *(_DWORD *)(v94 + 28);
              if (v96 < v100)
                re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v350, v100);
              v101 = *(unsigned int *)(v94 + 32);
              if ((_DWORD)v101)
              {
                v102 = 0;
                for (j = 0; j < v101; ++j)
                {
                  v104 = (uint64_t *)(*(_QWORD *)(v94 + 16) + v102);
                  if ((v104[1] & 0x80000000) != 0)
                  {
                    v105 = *v104;
                    v106 = DWORD1(v352);
                    v107 = *v104 % (unint64_t)DWORD2(v351);
                    if (DWORD1(v352) == 0x7FFFFFFF)
                    {
                      v106 = v352;
                      v108 = v352;
                      if ((_DWORD)v352 == DWORD2(v351))
                      {
                        re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v350, 2 * HIDWORD(v351));
                        v108 = v352;
                        v107 = v105 % DWORD2(v351);
                      }
                      LODWORD(v352) = v108 + 1;
                      v109 = v351;
                      v110 = *(_DWORD *)(v351 + 40 * v106 + 8);
                    }
                    else
                    {
                      v109 = v351;
                      v110 = *(_DWORD *)(v351 + 40 * DWORD1(v352) + 8);
                      DWORD1(v352) = v110 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v109 + 40 * v106 + 8) = v110 | 0x80000000;
                    *(_DWORD *)(v351 + 40 * v106 + 8) = *(_DWORD *)(v351 + 40 * v106 + 8) & 0x80000000 | *((_DWORD *)v350[1] + v107);
                    *(_QWORD *)(v351 + 40 * v106) = v105;
                    *(_QWORD *)(v351 + 40 * v106 + 16) = v104[2];
                    *(_OWORD *)(v351 + 40 * v106 + 24) = *(_OWORD *)(v104 + 3);
                    *((_DWORD *)v350[1] + v107) = v106;
                    ++HIDWORD(v351);
                    v101 = *(unsigned int *)(v94 + 32);
                  }
                  v102 += 40;
                }
              }
            }
          }
          else
          {
            v351 = 0u;
            v352 = 0u;
            *(_OWORD *)v350 = 0u;
            DWORD1(v352) = 0x7FFFFFFF;
          }
          v349 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 144) + 16))(*(_QWORD *)(v2 + 144));
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v376, 0, (re::DynamicString **)v375, v348);
          v112 = v328;
          v113 = &v328[v331];
          if (v331)
          {
            do
            {
              v114 = *v112;
              v115 = 176;
              if (*(_QWORD *)(*v112 + 176))
              {
                v116 = *v112 + 176;
              }
              else
              {
                v115 = 32;
                v116 = *v112 + 32;
              }
              v379 = *(_QWORD *)(v114 + v115);
              v117 = *(unsigned __int8 *)(v116 + 8);
              v118 = *(unsigned __int8 *)(v116 + 9);
              v119 = *(_BYTE *)(v116 + 9) != 0;
              v120 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 88);
              if (v120)
              {
                v380.i8[0] = 0;
                *(_QWORD *)v383 = 0xF2997E03A38ACEACLL;
                *(_QWORD *)&v383[8] = "meshsorting:enableDepthBias";
                v121 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v120, v383, &v380);
                re::StringID::destroyString((re::StringID *)v383);
                if (!v121)
                {
                  if (v118)
                    v122 = v380.u8[0] == 0;
                  else
                    v122 = 1;
                  v119 = !v122;
                }
                v113 = &v328[v331];
              }
              v378 = *(float32x4_t *)(v114 + 304);
              if (v117 != 5)
                goto LABEL_159;
              if (*(_BYTE *)(v116 + 16))
                v378 = *(float32x4_t *)(v116 + 32);
              if (*(_BYTE *)(v116 + 48))
              {
                v124 = *(_QWORD *)(v116 + 64);
                v123 = *(_QWORD *)(v116 + 72);
              }
              else
              {
LABEL_159:
                v124 = 0;
                v123 = 0;
              }
              if (!v379)
                goto LABEL_212;
              v377 = *(re::ecs2::TransformComponent **)(v114 + 16);
              QualifiedComponentForSorting = re::ecs2::MeshSortingSystem::getQualifiedComponentForSorting((re::ecs2::TransformComponent *)((char *)v377 + 32), v111);
              if (QualifiedComponentForSorting)
              {
                v126 = (id *)QualifiedComponentForSorting;
                if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)QualifiedComponentForSorting + 32))(QualifiedComponentForSorting) != 6)
                {
                  v129 = (*((uint64_t (**)(id *))*v126 + 4))(v126);
                  v130.i64[0] = 0x7F0000007FLL;
                  v130.i64[1] = 0x7F0000007FLL;
                  v335 = v130;
                  v332 = v123;
                  if (v129 == -1)
                  {
                    v131 = objc_retainAutorelease(v126[6]);
                    v337 = (float32x4_t)v327;
                    if (v131)
                    {
                      objc_msgSend(v131, "worldBoundingBox");
                      v132.i32[3] = 0;
                      v337 = vminnmq_f32(v132, (float32x4_t)xmmword_2261088F0);
                      v133.i32[3] = 0;
                      v128 = vmaxnmq_f32(v133, (float32x4_t)xmmword_226108900);
LABEL_169:
                      v335 = v128;
                    }
                  }
                  else
                  {
                    v337 = (float32x4_t)v327;
                  }
                  (*(void (**)(_BYTE *__return_ptr, uint64_t, re::ecs2::TransformComponent *))(*(_QWORD *)v373 + 8))(v383, v373, v377);
                  if (v383[0])
                    v134 = *(_QWORD *)&v383[8];
                  else
                    v134 = 0;
                  v347 = v134;
                  v135 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v369, &v347, &v374);
                  v136 = *(_QWORD *)(v114 + 336);
                  *(_QWORD *)v383 = *(_QWORD *)(v114 + 352);
                  *(_QWORD *)&v383[8] = v136;
                  re::DynamicArray<int>::DynamicArray((uint64_t)&v380, v341, (uint64_t)v383);
                  v137 = *(_QWORD *)(v114 + 376);
                  *(_QWORD *)v383 = *(_QWORD *)(v114 + 392);
                  *(_QWORD *)&v383[8] = v137;
                  re::DynamicArray<int>::DynamicArray((uint64_t)v345, v341, (uint64_t)v383);
                  if (v117 != 5 && v119)
                    v139 = *(unsigned __int8 *)(v114 + 400);
                  else
                    v139 = *(_DWORD *)(v114 + 160);
                  v344 = *((_QWORD *)v377 + 37);
                  v140 = v344;
                  *(_QWORD *)v383 = v379;
                  v141 = *(_DWORD *)(v114 + 164);
                  *(_DWORD *)&v383[8] = v139;
                  *(_DWORD *)&v383[12] = v141;
                  re::DynamicArray<float>::DynamicArray((uint64_t)&v383[16], (uint64_t *)&v380);
                  re::DynamicArray<float>::DynamicArray((uint64_t)&v384.i64[1], (uint64_t *)v345);
                  v143 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v140 ^ (v140 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v140 ^ (v140 >> 30))) >> 27));
                  v144 = v143 ^ (v143 >> 31);
                  if (*(_QWORD *)v135)
                  {
                    v145 = v144 % *(unsigned int *)(v135 + 24);
                    v146 = *(unsigned int *)(*(_QWORD *)(v135 + 8) + 4 * v145);
                    if ((_DWORD)v146 != 0x7FFFFFFF)
                    {
                      v147 = *(_QWORD *)(v135 + 16);
                      while (*(_QWORD *)(v147 + 120 * v146 + 16) != v140)
                      {
                        LODWORD(v146) = *(_DWORD *)(v147 + 120 * v146 + 8) & 0x7FFFFFFF;
                        if ((_DWORD)v146 == 0x7FFFFFFF)
                          goto LABEL_186;
                      }
LABEL_187:
                      if (v384.i64[1])
                      {
                        if (v388)
                          (*(void (**)(__n128))(*(_QWORD *)v384.i64[1] + 40))(v142);
                        v388 = 0;
                        v385 = 0;
                        v386 = 0;
                        v384.i64[1] = 0;
                        ++v387;
                      }
                      if (*(_QWORD *)&v383[16] && v384.i64[0])
                        (*(void (**)(__n128))(**(_QWORD **)&v383[16] + 40))(v142);
                      v148 = *(_QWORD *)(v135 + 96);
                      *(_QWORD *)&v149 = 0x7F0000007FLL;
                      *((_QWORD *)&v149 + 1) = 0x7F0000007FLL;
                      *(int32x4_t *)v383 = v327;
                      *(_OWORD *)&v383[16] = v149;
                      v383[32] = v117;
                      v384 = v378;
                      v385 = v124;
                      v386 = v332;
                      LOWORD(v387) = v119;
                      BYTE2(v387) = *(_BYTE *)(v116 + 80);
                      v150 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v379 ^ (v379 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v379 ^ (v379 >> 30))) >> 27));
                      v151 = v150 ^ (v150 >> 31);
                      if (v148)
                      {
                        v152 = v151 % *(unsigned int *)(v135 + 120);
                        v153 = *(unsigned int *)(*(_QWORD *)(v135 + 104) + 4 * v152);
                        if ((_DWORD)v153 != 0x7FFFFFFF)
                        {
                          v154 = *(_QWORD *)(v135 + 112);
                          while (*(_QWORD *)(v154 + (v153 << 7) + 16) != v379)
                          {
                            v153 = *(_DWORD *)(v154 + (v153 << 7) + 8) & 0x7FFFFFFF;
                            if ((_DWORD)v153 == 0x7FFFFFFF)
                              goto LABEL_201;
                          }
                          v156 = v154 + (v153 << 7);
                          goto LABEL_203;
                        }
                      }
                      else
                      {
                        LODWORD(v152) = 0;
                      }
LABEL_201:
                      v155 = re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v135 + 96, v152, v151, &v379, v383);
                      ++*(_DWORD *)(v135 + 136);
                      v156 = *(_QWORD *)(v135 + 112) + ((unint64_t)v155 << 7);
LABEL_203:
                      v157 = v156 + 32;
                      *(_BYTE *)(v135 + 192) |= !v119;
                      v158 = *(float32x4_t *)(v156 + 32);
                      v159 = *(float32x4_t *)(v156 + 48);
                      v158.i32[3] = 0;
                      v160 = v337;
                      v160.i32[3] = 0;
                      v161 = vminnmq_f32(v158, v160);
                      v159.i32[3] = 0;
                      v162 = v335;
                      v162.i32[3] = 0;
                      *(float32x4_t *)(v156 + 32) = v161;
                      *(float32x4_t *)(v156 + 48) = vmaxnmq_f32(v159, v162);
                      *(_QWORD *)v383 = 0;
                      v163 = (_QWORD *)re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v354, (uint64_t *)&v377);
                      if (v163)
                        *(_QWORD *)v383 = *v163;
                      v164 = (_QWORD *)re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long long &>((uint64_t)v361, (uint64_t *)&v379, v383);
                      *(_BYTE *)(v157 + 81) |= *v164 != *(_QWORD *)v383;
                      if (*(_QWORD *)&v345[0])
                      {
                        v111 = v346;
                        if (v346)
                          (*(void (**)(void))(**(_QWORD **)&v345[0] + 40))();
                      }
                      if (v380.i64[0])
                      {
                        v111 = *(const re::ecs2::EntityComponentCollection **)v382;
                        if (*(_QWORD *)v382)
                          (*(void (**)(void))(*(_QWORD *)v380.i64[0] + 40))();
                      }
                      goto LABEL_211;
                    }
                  }
                  else
                  {
                    LODWORD(v145) = 0;
                  }
LABEL_186:
                  v142 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v135, v145, v144, &v344, (__n128 *)v383);
                  ++*(_DWORD *)(v135 + 40);
                  goto LABEL_187;
                }
                re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v377, (const re::ecs2::Entity *)1, v383);
                v127 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v126 + 4));
                if (v127)
                {
                  v332 = v123;
                  re::MeshAsset::aabbFromMesh(v127, (float32x4_t *)v383, (uint64_t)&v380);
                  v337 = v380;
                  v128 = v381;
                  goto LABEL_169;
                }
              }
LABEL_211:
              v113 = &v328[v331];
LABEL_212:
              ++v112;
              v2 = a1;
            }
            while (v112 != v113);
          }
          v165 = v352;
          v166 = 0;
          if ((_DWORD)v352)
          {
            v167 = (int *)(v351 + 8);
            while (1)
            {
              v168 = *v167;
              v167 += 10;
              if (v168 < 0)
                break;
              if (v352 == ++v166)
              {
                LODWORD(v166) = v352;
                break;
              }
            }
          }
          if ((_DWORD)v352 != (_DWORD)v166)
          {
            v169 = v166;
            v170 = v351;
            do
            {
              v171 = v170 + 40 * v169;
              v173 = *(_QWORD *)(v171 + 16);
              v172 = (unint64_t *)(v171 + 16);
              if (re::ecs2::MeshSortingSystem::getQualifiedComponentForSorting((re::ecs2::MeshSortingSystem *)(v173 + 32), v111)&& *(_BYTE *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v349, *v172))
              {
                (*(void (**)(_BYTE *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v373 + 8))(v383, v373, *v172);
                if (v383[0])
                  v174 = *(_QWORD *)&v383[8];
                else
                  v174 = 0;
                v380.i64[0] = v174;
                v175 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v369, (uint64_t *)&v380, &v374);
                *(_QWORD *)&v345[0] = *(_QWORD *)(*v172 + 296);
                *(_QWORD *)v383 = 0;
                *(_QWORD *)&v383[8] = 0;
                *(_QWORD *)re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v175 + 48, (uint64_t *)v345, v383) = v172[1];
              }
              v170 = v351;
              if (v352 <= (int)v166 + 1)
                v176 = v166 + 1;
              else
                v176 = v352;
              while (1)
              {
                v169 = (v166 + 1);
                if (v176 - 1 == (_DWORD)v166)
                  break;
                LODWORD(v166) = v166 + 1;
                v177 = v169;
                if ((*(_DWORD *)(v351 + 40 * v169 + 8) & 0x80000000) != 0)
                  goto LABEL_233;
              }
              v177 = v176;
LABEL_233:
              LODWORD(v166) = v177;
            }
            while (v165 != v177);
          }
          if (v353)
          {
            *(_QWORD *)v383 = v2;
            *(_QWORD *)&v383[8] = &v349;
            *(_QWORD *)&v383[16] = &v376;
            *(_QWORD *)&v383[24] = &v375;
            *(_QWORD *)&v383[32] = v341;
            *(_QWORD *)&v383[40] = &v353;
            v384.i64[0] = (uint64_t)&v369;
            v384.i64[1] = (uint64_t)&v373;
            v178 = v325;
            if (v323)
            {
              v179 = 8 * v323;
              do
              {
                v180 = *v178;
                v181 = *(unsigned __int8 *)(*v178 + 25);
                if (v181 != 1)
                {
                  re::ecs2::MeshSortingSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)const::$_0::operator()((uint64_t)v383, *(_QWORD *)(v180 + 16), *(_QWORD *)(*(_QWORD *)(v180 + 16) + 296), v181, *(_BYTE *)(v180 + 26));
                  if (*(_BYTE *)(v180 + 26))
                  {
                    (*(void (**)(float32x4_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v373 + 8))(&v380, v373, *(_QWORD *)(v180 + 16));
                    if (v380.i8[0])
                      v182 = v380.i64[1];
                    else
                      v182 = 0;
                    *(_QWORD *)&v345[0] = v182;
                    v183 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v369, (uint64_t *)v345, &v374);
                    *(_BYTE *)(v183 + 193) = 1;
                    v380 = 0uLL;
                    *(_QWORD *)re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v183 + 48, (uint64_t *)(v180 + 32), &v380) = *(_QWORD *)(*(_QWORD *)(v180 + 16) + 296);
                  }
                }
                ++v178;
                v179 -= 8;
              }
              while (v179);
            }
            v184 = v326;
            if (v329)
            {
              v185 = 8 * v329;
              do
              {
                v186 = *v184;
                if ((*(_BYTE *)(*((_QWORD *)*v184 + 2) + 288) & 1) != 0)
                {
                  re::ecs2::HierarchicalFadeComponent::getFadeGroupID(*v184, (uint64_t)&v380);
                  if (v380.i8[0])
                    re::ecs2::MeshSortingSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)const::$_0::operator()((uint64_t)v383, *((_QWORD *)v186 + 2), v380.u64[1], 2, 0);
                }
                ++v184;
                v185 -= 8;
              }
              while (v185);
            }
          }
          v187 = v356;
          if ((_DWORD)v356)
          {
            v188 = 0;
            v189 = (int *)(v355 + 8);
            while (1)
            {
              v190 = *v189;
              v189 += 12;
              if (v190 < 0)
                break;
              if (v356 == ++v188)
              {
                LODWORD(v188) = v356;
                break;
              }
            }
          }
          else
          {
            LODWORD(v188) = 0;
          }
          if ((_DWORD)v356 != (_DWORD)v188)
          {
            v191 = v188;
            v192 = v355;
            v193 = v356;
            do
            {
              v194 = v192 + 48 * v191;
              v196 = *(_QWORD *)(v194 + 24);
              v195 = (_QWORD *)(v194 + 24);
              if (v196)
              {
                v197 = *(_QWORD *)(v192 + 48 * v191 + 16);
                (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v373 + 8))(v383, v373, v197);
                if (v383[0])
                  v198 = *(_QWORD *)&v383[8];
                else
                  v198 = 0;
                v380.i64[0] = v198;
                v199 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v369, (uint64_t *)&v380, &v374);
                *(_QWORD *)&v345[0] = *(_QWORD *)(v197 + 296);
                *(_QWORD *)v383 = 0;
                *(_QWORD *)&v383[8] = 0;
                *(_QWORD *)(re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v199 + 48, (uint64_t *)v345, v383)+ 8) = *v195;
                v193 = v356;
                v192 = v355;
              }
              if (v193 <= (int)v188 + 1)
                v200 = v188 + 1;
              else
                v200 = v193;
              while (1)
              {
                v191 = (v188 + 1);
                if (v200 - 1 == (_DWORD)v188)
                  break;
                LODWORD(v188) = v188 + 1;
                v201 = v191;
                if ((*(_DWORD *)(v192 + 48 * v191 + 8) & 0x80000000) != 0)
                  goto LABEL_270;
              }
              v201 = v200;
LABEL_270:
              LODWORD(v188) = v201;
            }
            while (v187 != v201);
          }
          (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v353 + 64))(v383, v353, v348, *((_QWORD *)v375 + 46));
          v202 = *(_DWORD *)&v383[32];
          if (*(_DWORD *)&v383[32])
          {
            v203 = 0;
            v204 = (int *)(*(_QWORD *)&v383[16] + 8);
            while (1)
            {
              v205 = *v204;
              v204 += 6;
              if (v205 < 0)
                break;
              if (*(unsigned int *)&v383[32] == ++v203)
              {
                LODWORD(v203) = *(_DWORD *)&v383[32];
                break;
              }
            }
          }
          else
          {
            LODWORD(v203) = 0;
          }
          if (*(_DWORD *)&v383[32] != (_DWORD)v203)
          {
            v206 = v203;
            v207 = *(_QWORD *)&v383[16];
            do
            {
              v208 = *(_QWORD *)(v207 + 24 * v206 + 16);
              (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v373 + 8))(&v380, v373, v208);
              if (v380.i8[0])
                v209 = v380.u64[1];
              else
                v209 = 0;
              if ((_QWORD)v369)
              {
                v210 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v209 ^ (v209 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v209 ^ (v209 >> 30))) >> 27));
                v211 = *(unsigned int *)(*((_QWORD *)&v369 + 1) + 4 * ((v210 ^ (v210 >> 31)) % DWORD2(v370)));
                if ((_DWORD)v211 != 0x7FFFFFFF)
                {
                  v212 = v370;
                  while (*(_QWORD *)(v370 + 224 * v211 + 16) != v209)
                  {
                    LODWORD(v211) = *(_DWORD *)(v370 + 224 * v211 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v211 == 0x7FFFFFFF)
                      goto LABEL_298;
                  }
                  if (*(_QWORD *)(v370 + 224 * v211 + 72))
                  {
                    v213 = *(_QWORD *)(v208 + 296);
                    v214 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * (v213 ^ (v213 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                             * (v213 ^ (v213 >> 30))) >> 27));
                    v215 = v370 + 224 * v211;
                    v216 = (v214 ^ (v214 >> 31)) % *(unsigned int *)(v215 + 96);
                    v217 = *(_QWORD *)(v215 + 80);
                    v218 = *(unsigned int *)(v217 + 4 * v216);
                    if ((_DWORD)v218 != 0x7FFFFFFF)
                    {
                      v219 = v370 + 224 * v211;
                      v222 = *(_QWORD *)(v219 + 88);
                      v220 = (uint64_t *)(v219 + 88);
                      v221 = v222;
                      if (*(_QWORD *)(v222 + 40 * v218 + 16) == v213)
                      {
                        *(_DWORD *)(v217 + 4 * v216) = *(_DWORD *)(v221 + 40 * v218 + 8) & 0x7FFFFFFF;
LABEL_295:
                        v224 = *v220;
                        v225 = *v220 + 40 * v218;
                        v228 = *(_DWORD *)(v225 + 8);
                        v227 = (int *)(v225 + 8);
                        v226 = v228;
                        if (v228 < 0)
                        {
                          *v227 = v226 & 0x7FFFFFFF;
                          v224 = *v220;
                          v226 = *(_DWORD *)(*v220 + 40 * v218 + 8);
                        }
                        v229 = (_DWORD *)(v212 + 224 * v211);
                        *(_DWORD *)(v224 + 40 * v218 + 8) = v229[27] | v226 & 0x80000000;
                        --v229[25];
                        v230 = v229[28] + 1;
                        v229[27] = v218;
                        v229[28] = v230;
                      }
                      else
                      {
                        while (1)
                        {
                          v223 = v218;
                          v218 = *(_DWORD *)(v221 + 40 * v218 + 8) & 0x7FFFFFFF;
                          if (v218 == 0x7FFFFFFF)
                            break;
                          if (*(_QWORD *)(v221 + 40 * v218 + 16) == v213)
                          {
                            *(_DWORD *)(v221 + 40 * v223 + 8) = *(_DWORD *)(v221 + 40 * v223 + 8) & 0x80000000 | *(_DWORD *)(v221 + 40 * v218 + 8) & 0x7FFFFFFF;
                            goto LABEL_295;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_298:
              v207 = *(_QWORD *)&v383[16];
              if (*(_DWORD *)&v383[32] <= (v203 + 1))
                v231 = v203 + 1;
              else
                v231 = *(_DWORD *)&v383[32];
              while (1)
              {
                v206 = (v203 + 1);
                if (v231 - 1 == (_DWORD)v203)
                  break;
                LODWORD(v203) = v203 + 1;
                v232 = v206;
                if ((*(_DWORD *)(*(_QWORD *)&v383[16] + 24 * v206 + 8) & 0x80000000) != 0)
                  goto LABEL_305;
              }
              v232 = v231;
LABEL_305:
              LODWORD(v203) = v232;
            }
            while (v202 != v232);
          }
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v383);
          v330 = v371;
          v233 = 0;
          if (v371)
          {
            v234 = (int *)(v370 + 8);
            while (1)
            {
              v235 = *v234;
              v234 += 56;
              if (v235 < 0)
                break;
              if (v371 == ++v233)
              {
                LODWORD(v233) = v371;
                break;
              }
            }
          }
          v236 = v371;
          if (v371 != (_DWORD)v233)
          {
            v237 = v233;
            v238 = v370;
            do
            {
              v333 = v238;
              re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v383);
              *(_DWORD *)v382 = 0;
              v380 = 0u;
              v381 = 0u;
              *(_QWORD *)&v382[4] = 0x7FFFFFFFLL;
              re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v380, (uint64_t)v383, 3);
              v240 = (float32x4_t **)&v328[v331];
              if (v331)
              {
                v241 = v333 + 224 * v237;
                v242 = (_QWORD *)(v241 + 72);
                v338 = (unsigned int *)(v241 + 96);
                v336 = (_QWORD *)(v241 + 80);
                v342 = (uint64_t *)(v241 + 88);
                for (k = (float32x4_t **)v328; k != v240; ++k)
                {
                  v244 = *k;
                  if ((*k)[1].i8[9] == 5)
                  {
                    v379 = *(_QWORD *)(v244[1].i64[0] + 296);
                    if (re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v242, (uint64_t *)&v379))
                    {
                      if (*v242)
                      {
                        v245 = 0x94D049BB133111EBLL
                             * ((0xBF58476D1CE4E5B9 * (v379 ^ (v379 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                 * (v379 ^ (v379 >> 30))) >> 27));
                        v246 = *(unsigned int *)(*v336 + 4 * ((v245 ^ (v245 >> 31)) % *v338));
                        v247 = *v342;
                        if ((_DWORD)v246 != 0x7FFFFFFF)
                        {
                          while (*(_QWORD *)(v247 + 40 * v246 + 16) != v379)
                          {
                            v246 = *(_DWORD *)(v247 + 40 * v246 + 8) & 0x7FFFFFFF;
                            if (v246 == 0x7FFFFFFF)
                              goto LABEL_323;
                          }
LABEL_324:
                          v248 = 0;
                          v249 = 0;
                          v239 = *(float32x4_t *)(v247 + 40 * v246 + 24);
                          v378 = v239;
                          while (2)
                          {
                            v250 = v248;
                            v251 = (re::ecs2::TransformComponent *)v378.i64[v249];
                            v377 = v251;
                            if (v251)
                            {
                              v252 = 0x94D049BB133111EBLL
                                   * ((0xBF58476D1CE4E5B9 * ((unint64_t)v251 ^ ((unint64_t)v251 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v251 ^ ((unint64_t)v251 >> 30))) >> 27));
                              v253 = v252 ^ (v252 >> 31);
                              memset(v345, 0, sizeof(v345));
                              if (!v380.i64[0])
                              {
                                LODWORD(v254) = 0;
                                goto LABEL_336;
                              }
                              v254 = v253 % v381.u32[2];
                              v255 = *(unsigned int *)(v380.i64[1] + 4 * v254);
                              if ((_DWORD)v255 == 0x7FFFFFFF)
                                goto LABEL_336;
                              v256 = v381.i64[0];
                              if (*(re::ecs2::TransformComponent **)(v381.i64[0] + (v255 << 6) + 16) != v251)
                              {
                                while (1)
                                {
                                  v255 = *(_DWORD *)(v381.i64[0] + (v255 << 6) + 8) & 0x7FFFFFFF;
                                  if ((_DWORD)v255 == 0x7FFFFFFF)
                                    break;
                                  if (*(re::ecs2::TransformComponent **)(v381.i64[0] + (v255 << 6) + 16) == v251)
                                    goto LABEL_331;
                                }
LABEL_336:
                                re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v380, v254, v253, &v377, (uint64_t)v345);
                                ++*(_DWORD *)&v382[8];
                                if (v380.i64[0])
                                {
LABEL_331:
                                  v256 = v381.i64[0];
                                  v255 = *(unsigned int *)(v380.i64[1] + 4 * (v253 % v381.u32[2]));
                                  if ((_DWORD)v255 == 0x7FFFFFFF)
                                    goto LABEL_338;
                                  while (*(re::ecs2::TransformComponent **)(v381.i64[0] + (v255 << 6) + 16) != v251)
                                  {
                                    v255 = *(_DWORD *)(v381.i64[0] + (v255 << 6) + 8) & 0x7FFFFFFF;
                                    if (v255 == 0x7FFFFFFF)
                                      goto LABEL_338;
                                  }
                                }
                                else
                                {
                                  v256 = v381.i64[0];
LABEL_338:
                                  v255 = 0x7FFFFFFFLL;
                                }
                              }
                              v257 = (float32x4_t *)(v256 + (v255 << 6));
                              v239 = vaddq_f32(v244[19], v257[3]);
                              v257[3] = v239;
                              ++v257[2].i64[0];
                            }
                            v248 = 1;
                            v249 = 1;
                            if ((v250 & 1) != 0)
                              goto LABEL_341;
                            continue;
                          }
                        }
                      }
                      else
                      {
                        v247 = *v342;
                      }
LABEL_323:
                      LODWORD(v246) = 0x7FFFFFFF;
                      goto LABEL_324;
                    }
LABEL_341:
                    v240 = (float32x4_t **)&v328[v331];
                  }
                }
              }
              v258 = v333 + 224 * v237;
              v261 = *(_DWORD *)(v258 + 200);
              v259 = (int *)(v258 + 200);
              v260 = v261;
              if (v261)
              {
                v262 = 0;
                v263 = (int *)(*(_QWORD *)(v333 + 224 * v237 + 184) + 8);
                while (1)
                {
                  v264 = *v263;
                  v263 += 44;
                  if (v264 < 0)
                    break;
                  if (v260 == ++v262)
                  {
                    LODWORD(v262) = v260;
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v262) = 0;
              }
              if ((_DWORD)v260 != (_DWORD)v262)
              {
                v265 = v262;
                v266 = v333 + 224 * v237;
                v269 = *(_QWORD *)(v266 + 184);
                v267 = (uint64_t *)(v266 + 184);
                v268 = v269;
                v270 = v380.i64[0];
                do
                {
                  v271 = (float32x4_t *)(v268 + 176 * v265);
                  if (!v270
                    || (v272 = v271[1].u64[0],
                        v273 = 0x94D049BB133111EBLL
                             * ((0xBF58476D1CE4E5B9 * (v272 ^ (v272 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                 * (v272 ^ (v272 >> 30))) >> 27)),
                        v274 = *(unsigned int *)(v380.i64[1] + 4 * ((v273 ^ (v273 >> 31)) % v381.u32[2])),
                        (_DWORD)v274 == 0x7FFFFFFF))
                  {
LABEL_355:
                    v239 = v271[2];
                    v275 = v271[3];
                    v276 = (uint32x4_t)vcgtq_f32(v239, v275);
                    v276.i32[3] = v276.i32[2];
                    if ((vmaxvq_u32(v276) & 0x80000000) != 0)
                    {
                      v280 = 0;
                      v279 = 0;
                    }
                    else
                    {
                      v277 = vaddq_f32(v239, v275);
                      v278.i64[0] = 0x3F0000003F000000;
                      v278.i64[1] = 0x3F0000003F000000;
                      v239 = vmulq_f32(v277, v278);
                      v279 = v239.i64[1];
                      v280 = v239.i64[0];
                    }
                    v281 = v268 + 176 * v265;
                    *(_QWORD *)(v281 + 80) = v280;
                    *(_QWORD *)(v281 + 88) = v279;
                  }
                  else
                  {
                    while (*(_QWORD *)(v381.i64[0] + (v274 << 6) + 16) != v272)
                    {
                      v274 = *(_DWORD *)(v381.i64[0] + (v274 << 6) + 8) & 0x7FFFFFFF;
                      if ((_DWORD)v274 == 0x7FFFFFFF)
                        goto LABEL_355;
                    }
                    v282 = (float32x4_t *)(v381.i64[0] + (v274 << 6));
                    v239.f32[0] = (float)v282[2].u64[0];
                    v239 = vdivq_f32(v282[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v239.f32, 0));
                    v283 = (float32x4_t *)(v268 + 176 * v265);
                    v283[5] = v239;
                    v283[6].i16[0] = v282[2].i64[0];
                  }
                  v268 = *v267;
                  if (*v259 <= (v262 + 1))
                    v284 = v262 + 1;
                  else
                    v284 = *v259;
                  while (1)
                  {
                    v265 = (v262 + 1);
                    if (v284 - 1 == (_DWORD)v262)
                      break;
                    LODWORD(v262) = v262 + 1;
                    v285 = v265;
                    if ((*(_DWORD *)(v268 + 176 * v265 + 8) & 0x80000000) != 0)
                      goto LABEL_367;
                  }
                  v285 = v284;
LABEL_367:
                  LODWORD(v262) = v285;
                }
                while ((_DWORD)v260 != v285);
              }
              re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v380);
              re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v383);
              v286 = &v328[v331];
              if (v331)
              {
                v287 = v333 + 224 * v237;
                v288 = (_QWORD *)(v287 + 72);
                v339 = v287 + 168;
                v289 = (unsigned int *)(v287 + 96);
                v290 = (_QWORD *)(v287 + 80);
                v343 = (uint64_t *)(v287 + 88);
                v291 = v328;
                do
                {
                  v292 = *v291;
                  if (*(_BYTE *)(*v291 + 416))
                  {
                    if (*v288)
                    {
                      v293 = *(_QWORD *)(*(_QWORD *)(v292 + 16) + 296);
                      v294 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v293 ^ (v293 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v293 ^ (v293 >> 30))) >> 27));
                      v295 = *(unsigned int *)(*v290 + 4 * ((v294 ^ (v294 >> 31)) % *v289));
                      if ((_DWORD)v295 != 0x7FFFFFFF)
                      {
                        v296 = *v343;
                        while (*(_QWORD *)(v296 + 40 * v295 + 16) != v293)
                        {
                          v297 = *(_DWORD *)(v296 + 40 * v295 + 8);
                          v295 = v297 & 0x7FFFFFFF;
                          if ((v297 & 0x7FFFFFFF) == 0x7FFFFFFF)
                            goto LABEL_385;
                        }
                        v298 = *(_QWORD *)(v296 + 40 * v295 + 24);
                        if (v298)
                        {
                          v299 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v339, v298);
                          v286 = &v328[v331];
                          if (v299)
                          {
                            if (!*(_BYTE *)(v299 + 80))
                            {
                              v301 = *(_OWORD *)(v292 + 448);
                              *(_OWORD *)&v383[15] = *(_OWORD *)(v292 + 432);
                              v300 = *(_OWORD *)&v383[15];
                              *(_OWORD *)&v383[31] = v301;
                              *(_BYTE *)(v299 + 80) = 1;
                              *(_OWORD *)(v299 + 96) = v300;
                              *(_OWORD *)(v299 + 112) = v301;
                              *(_QWORD *)(v299 + 128) = v293;
                            }
                          }
                        }
                        v302 = *(_QWORD *)(v296 + 40 * v295 + 32);
                        if (v302)
                        {
                          v303 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v339, v302);
                          v286 = &v328[v331];
                          if (v303)
                          {
                            if (!*(_BYTE *)(v303 + 80))
                            {
                              v304 = *(_QWORD *)(*(_QWORD *)(v292 + 16) + 296);
                              v306 = *(_OWORD *)(v292 + 448);
                              *(_OWORD *)&v383[15] = *(_OWORD *)(v292 + 432);
                              v305 = *(_OWORD *)&v383[15];
                              *(_OWORD *)&v383[31] = v306;
                              *(_BYTE *)(v303 + 80) = 1;
                              *(_OWORD *)(v303 + 96) = v305;
                              *(_OWORD *)(v303 + 112) = v306;
                              *(_QWORD *)(v303 + 128) = v304;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_385:
                  ++v291;
                }
                while (v291 != v286);
              }
              v236 = v371;
              v238 = v370;
              if (v371 <= (int)v233 + 1)
                v307 = v233 + 1;
              else
                v307 = v371;
              v2 = a1;
              while (1)
              {
                v237 = (v233 + 1);
                if (v307 - 1 == (_DWORD)v233)
                  break;
                LODWORD(v233) = v233 + 1;
                v308 = v237;
                if ((*(_DWORD *)(v370 + 224 * v237 + 8) & 0x80000000) != 0)
                  goto LABEL_394;
              }
              v308 = v307;
LABEL_394:
              LODWORD(v233) = v308;
            }
            while (v330 != v308);
          }
          v309 = 0;
          if (v236)
          {
            v310 = (int *)(v370 + 8);
            while (1)
            {
              v311 = *v310;
              v310 += 56;
              if (v311 < 0)
                break;
              if (v236 == ++v309)
              {
                LODWORD(v309) = v236;
                break;
              }
            }
          }
          if (v236 != (_DWORD)v309)
          {
            v312 = (re::RenderFrame *)((char *)v375 + 264);
            v313 = v309;
            v314 = v370;
            v315 = v236;
            do
            {
              v316 = v314 + 224 * v313;
              if (*(_DWORD *)(v316 + 148) || *(_DWORD *)(v314 + 224 * v313 + 196))
              {
                v317 = v316 + 24;
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v376, *(const re::ecs2::Scene **)(v316 + 16), (re::DynamicString **)v375, v383);
                v380.i64[0] = *(_QWORD *)v383 >> 1;
                v318 = re::RenderFrameData::stream(v312, (const re::WeakStringID *)&v380);
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v318 + 48) + 976))(*(_QWORD *)(v318 + 48), v317);
                re::StringID::destroyString((re::StringID *)v383);
                v315 = v371;
                v314 = v370;
              }
              if (v315 <= (int)v309 + 1)
                v319 = v309 + 1;
              else
                v319 = v315;
              while (1)
              {
                v313 = (v309 + 1);
                if (v319 - 1 == (_DWORD)v309)
                  break;
                LODWORD(v309) = v309 + 1;
                v320 = v313;
                if ((*(_DWORD *)(v314 + 224 * v313 + 8) & 0x80000000) != 0)
                  goto LABEL_412;
              }
              v320 = v319;
LABEL_412:
              LODWORD(v309) = v320;
            }
            while (v236 != v320);
          }
          re::StringID::destroyString((re::StringID *)v348);
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v350);
          v321 = _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)&v354);
          if (v357[0])
          {
            if (v360)
              (*(void (**)(double))(*(_QWORD *)v357[0] + 40))(v321);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v361);
          re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v364);
          re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v365);
          re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v369);
          v5 = v324;
          v6 = v322;
        }
        ++v5;
      }
      while (v5 != (re::ecs2::RenderingSubsystem **)v6);
    }
  }
}

BOOL re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 40 * v4 + 16) == v2)
    return 1;
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_QWORD *)(v6 + 40 * v4 + 16) != v2);
  return result;
}

uint64_t *re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = v3 << 6;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 64;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::ecs2::MeshSortingSystem::getQualifiedComponentForSorting(re::ecs2::MeshSortingSystem *this, const re::ecs2::EntityComponentCollection *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 18);
  if (!result)
  {
    result = re::ecs2::EntityComponentCollection::get(this, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!result)
    {
      result = re::ecs2::EntityComponentCollection::get(this, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (result)
        return *(_QWORD *)(result + 32);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>(uint64_t a1, uint64_t *a2, re::Allocator **a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v11 + 224 * v10 + 16) == v6)
      {
LABEL_6:
        v12 = v11 + 224 * v10;
        return v12 + 24;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 224 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 224 * v10 + 16) == v6)
          goto LABEL_6;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v13 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v13 == 0x7FFFFFFF)
  {
    v13 = *(unsigned int *)(a1 + 32);
    v14 = v13;
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v14 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v14 + 1;
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_DWORD *)(v15 + 224 * v13 + 8);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_DWORD *)(v15 + 224 * v13 + 8);
    *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v15 + 224 * v13 + 8) = v16 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v13 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v13) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v13 + 16) = v6;
  re::MeshSortingCollection::MeshSortingCollection((re::MeshSortingCollection *)(*(_QWORD *)(a1 + 16) + 224 * v13 + 24), *a3);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v13;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 224 * v13;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 40 * v10;
  return v12 + 24;
}

void re::ecs2::MeshSortingSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)const::$_0::operator()(uint64_t a1, unint64_t a2, unint64_t a3, char a4, char a5)
{
  const re::ecs2::Scene *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  re::Allocator *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _OWORD v40[2];
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v39 = a3;
  if (!*(_BYTE *)re::ecs2::RenderOptions::forEntity(*(re::ecs2::RenderOptions **)(a1 + 8), a2))
    return;
  (*(void (**)(_OWORD *__return_ptr, _QWORD, unint64_t))(***(_QWORD ***)(a1 + 56) + 8))(v40, **(_QWORD **)(a1 + 56), a2);
  v10 = LOBYTE(v40[0]) ? (const re::ecs2::Scene *)*((_QWORD *)&v40[0] + 1) : 0;
  v11 = **(_QWORD **)(a1 + 40);
  re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(**(re::ecs2::RenderingSubsystem ***)(a1 + 16), v10, **(re::DynamicString ****)(a1 + 24), v40);
  v12 = (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v11 + 48))(v11, v40, *(_QWORD *)(**(_QWORD **)(a1 + 24) + 368));
  re::StringID::destroyString((re::StringID *)v40);
  if (!v12)
    return;
  if (!*(_QWORD *)v12)
    return;
  v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  v14 = v13 ^ (v13 >> 31);
  v15 = *(unsigned int *)(*(_QWORD *)(v12 + 8) + 4 * (v14 % *(unsigned int *)(v12 + 24)));
  if ((_DWORD)v15 == 0x7FFFFFFF)
    return;
  v16 = *(_QWORD *)(v12 + 16);
  while (*(_QWORD *)(v16 + 80 * v15 + 16) != a3)
  {
    v17 = *(_DWORD *)(v16 + 80 * v15 + 8);
    v15 = v17 & 0x7FFFFFFF;
    if ((v17 & 0x7FFFFFFF) == 0x7FFFFFFF)
      return;
  }
  v18 = (_OWORD *)(v16 + 80 * v15 + 32);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = (0xBF58476D1CE4E5B9 * ((unint64_t)v10 ^ ((unint64_t)v10 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)v10 ^ ((unint64_t)v10 >> 30))) >> 27);
  v21 = (0x94D049BB133111EBLL * v20) ^ ((0x94D049BB133111EBLL * v20) >> 31);
  if (!*(_QWORD *)v19)
  {
    v37 = v16 + 80 * v15 + 32;
    v38 = v13 ^ (v13 >> 31);
    LODWORD(v22) = 0;
    goto LABEL_15;
  }
  v22 = v21 % *(unsigned int *)(v19 + 24);
  v23 = *(unsigned int *)(*(_QWORD *)(v19 + 8) + 4 * v22);
  if ((_DWORD)v23 == 0x7FFFFFFF)
  {
LABEL_13:
    v37 = v16 + 80 * v15 + 32;
    v38 = v13 ^ (v13 >> 31);
LABEL_15:
    v24 = *(unsigned int *)(v19 + 36);
    if ((_DWORD)v24 == 0x7FFFFFFF)
    {
      v24 = *(unsigned int *)(v19 + 32);
      v25 = v24;
      if ((_DWORD)v24 == *(_DWORD *)(v19 + 24))
      {
        v26 = v21;
        re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v19, 2 * *(_DWORD *)(v19 + 28));
        v21 = v26;
        LODWORD(v22) = v26 % *(unsigned int *)(v19 + 24);
        v25 = *(_DWORD *)(v19 + 32);
      }
      *(_DWORD *)(v19 + 32) = v25 + 1;
      v27 = *(_QWORD *)(v19 + 16);
      v28 = *(_DWORD *)(v27 + 224 * v24 + 8);
    }
    else
    {
      v27 = *(_QWORD *)(v19 + 16);
      v28 = *(_DWORD *)(v27 + 224 * v24 + 8);
      *(_DWORD *)(v19 + 36) = v28 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v27 + 224 * v24 + 8) = v28 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v19 + 16) + 224 * v24 + 8) = *(_DWORD *)(*(_QWORD *)(v19 + 16) + 224 * v24 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v22);
    *(_QWORD *)(*(_QWORD *)(v19 + 16) + 224 * v24) = v21;
    *(_QWORD *)(*(_QWORD *)(v19 + 16) + 224 * v24 + 16) = v10;
    v29 = *(re::Allocator **)(a1 + 32);
    v30 = v22;
    re::MeshSortingCollection::MeshSortingCollection((re::MeshSortingCollection *)(*(_QWORD *)(v19 + 16) + 224 * v24 + 24), v29);
    *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v30) = v24;
    ++*(_DWORD *)(v19 + 28);
    ++*(_DWORD *)(v19 + 40);
    v31 = *(_QWORD *)(v19 + 16) + 224 * v24 + 24;
    v18 = (_OWORD *)v37;
    v14 = v38;
    goto LABEL_25;
  }
  v32 = *(_QWORD *)(v19 + 16);
  while (*(const re::ecs2::Scene **)(v32 + 224 * v23 + 16) != v10)
  {
    LODWORD(v23) = *(_DWORD *)(v32 + 224 * v23 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v23 == 0x7FFFFFFF)
      goto LABEL_13;
  }
  v31 = v32 + 224 * v23 + 24;
LABEL_25:
  v33 = *(_QWORD *)(v31 + 144);
  v40[0] = *v18;
  v40[1] = v18[1];
  v41 = a4;
  v42 = a5;
  v43 = *(_BYTE *)(v16 + 80 * v15 + 64);
  v47 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v33)
  {
    v34 = v14 % *(unsigned int *)(v31 + 168);
    v35 = *(unsigned int *)(*(_QWORD *)(v31 + 152) + 4 * v34);
    if ((_DWORD)v35 != 0x7FFFFFFF)
    {
      v36 = *(_QWORD *)(v31 + 160);
      if (*(_QWORD *)(v36 + 176 * v35 + 16) == a3)
        return;
      while (1)
      {
        LODWORD(v35) = *(_DWORD *)(v36 + 176 * v35 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v35 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v36 + 176 * v35 + 16) == a3)
          return;
      }
    }
  }
  else
  {
    LODWORD(v34) = 0;
  }
  re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v31 + 144, v34, v14, &v39, (uint64_t)v40);
  ++*(_DWORD *)(v31 + 184);
}

uint64_t *re::internal::MeshSortGroupFixupTable::fixupMeshSortGroupsForEntity(re::internal::MeshSortGroupFixupTable *this, re::ecs2::Entity *a2)
{
  uint64_t *result;
  uint64_t v5;
  re::ecs2::Entity **v6;
  uint64_t v7;
  re::ecs2::Entity *v8;

  result = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
    result = re::internal::MeshSortGroupFixupTable::fixupMeshSortGroup((uint64_t *)this, (re::ecs2::MeshSortingComponent *)result);
  v5 = *((_QWORD *)a2 + 41);
  if (v5)
  {
    v6 = (re::ecs2::Entity **)*((_QWORD *)a2 + 43);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = (uint64_t *)re::internal::MeshSortGroupFixupTable::fixupMeshSortGroupsForEntity(this, v8, 0);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t *re::internal::MeshSortGroupFixupTable::fixupMeshSortGroup(uint64_t *this, re::ecs2::MeshSortingComponent *a2)
{
  unint64_t v2;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  __int128 v34;
  char v35;
  char v36;
  unint64_t v37;
  uuid_t out;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = (__n128 *)((char *)a2 + 176);
  v2 = *((_QWORD *)a2 + 22);
  v4 = (__n128 *)((char *)a2 + 32);
  v5 = 176;
  if (v2)
  {
    v6 = (char *)a2 + 176;
  }
  else
  {
    v5 = 32;
    v6 = (char *)a2 + 32;
  }
  v7 = *(_QWORD *)((char *)a2 + v5);
  v37 = v7;
  if (!v7)
    return this;
  v9 = (uint64_t)this;
  v10 = *this;
  v11 = v7 ^ (v7 >> 30);
  if (!*this
    || (v12 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27)),
        v13 = *(unsigned int *)(this[1] + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 6))),
        (_DWORD)v13 == 0x7FFFFFFF))
  {
LABEL_7:
    v14 = v6[8];
    v15 = v6[9];
    v16 = v6[16];
    if (v6[16])
      v39 = *((_OWORD *)v6 + 2);
    v33 = 0;
    v35 = 0;
    v36 = 0;
    uuid_generate_random(out);
    v30 = (*(_QWORD *)&out[8] + (*(_QWORD *)out << 6) + (*(_QWORD *)out >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)out;
    v31 = v14;
    v32 = v15;
    if (v16)
    {
      v33 = 1;
      v34 = v39;
    }
    v17 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27));
    v18 = v17 ^ (v17 >> 31);
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v19 = v18 % *(unsigned int *)(v9 + 24);
      v20 = *(unsigned int *)(*(_QWORD *)(v9 + 8) + 4 * v19);
      if ((_DWORD)v20 != 0x7FFFFFFF)
      {
        v21 = *(_QWORD *)(v9 + 16);
        if (*(_QWORD *)(v21 + 160 * v20 + 16) == v7)
        {
LABEL_23:
          v2 = v3->n128_u64[0];
          goto LABEL_24;
        }
        while (1)
        {
          LODWORD(v20) = *(_DWORD *)(v21 + 160 * v20 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v20 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v21 + 160 * v20 + 16) == v7)
            goto LABEL_23;
        }
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
    re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v9, v19, v18, &v37, (uint64_t)&v30);
    ++*(_DWORD *)(v9 + 40);
    v10 = *(_QWORD *)v9;
    goto LABEL_23;
  }
  v22 = this[2];
  while (*(_QWORD *)(v22 + 160 * v13 + 16) != v7)
  {
    LODWORD(v13) = *(_DWORD *)(v22 + 160 * v13 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v13 == 0x7FFFFFFF)
      goto LABEL_7;
  }
LABEL_24:
  if (v2)
  {
    v23 = 0x7FFFFFFF;
    if (v10)
    {
      v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27));
      v25 = *(unsigned int *)(*(_QWORD *)(v9 + 8) + 4 * ((v24 ^ (v24 >> 31)) % *(unsigned int *)(v9 + 24)));
      if ((_DWORD)v25 != 0x7FFFFFFF)
      {
        v26 = *(_QWORD *)(v9 + 16);
        if (*(_QWORD *)(v26 + 160 * v25 + 16) == v7)
        {
LABEL_30:
          v23 = v25;
        }
        else
        {
          while (1)
          {
            LODWORD(v25) = *(_DWORD *)(v26 + 160 * v25 + 8) & 0x7FFFFFFF;
            v23 = 0x7FFFFFFF;
            if ((_DWORD)v25 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v26 + 160 * v25 + 16) == v7)
              goto LABEL_30;
          }
        }
      }
    }
    v4 = v3;
  }
  else
  {
    v23 = 0x7FFFFFFF;
    if (v10)
    {
      v27 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27));
      v28 = *(unsigned int *)(*(_QWORD *)(v9 + 8) + 4 * ((v27 ^ (v27 >> 31)) % *(unsigned int *)(v9 + 24)));
      if ((_DWORD)v28 != 0x7FFFFFFF)
      {
        v29 = *(_QWORD *)(v9 + 16);
        if (*(_QWORD *)(v29 + 160 * v28 + 16) == v7)
        {
LABEL_39:
          v23 = v28;
        }
        else
        {
          while (1)
          {
            LODWORD(v28) = *(_DWORD *)(v29 + 160 * v28 + 8) & 0x7FFFFFFF;
            v23 = 0x7FFFFFFF;
            if ((_DWORD)v28 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v29 + 160 * v28 + 16) == v7)
              goto LABEL_39;
          }
        }
      }
    }
  }
  re::ecs2::MeshSortGroupToken::operator=(v4, (__n128 *)(*(_QWORD *)(v9 + 16) + 160 * v23 + 32));
  return re::ecs2::Component::markDirty(a2);
}

void re::ecs2::MeshSortingSystem::~MeshSortingSystem(re::ecs2::MeshSortingSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MeshSortingSystem::typeInfo(re::ecs2::MeshSortingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSortingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSortingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSortingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSortingSystem>, 0);
}

double re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = v3 << 7;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 128;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    v4 = (_QWORD *)(result + 80);
    v3 = *(_QWORD *)(result + 80);
    *((_DWORD *)v4 - 18) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if (*(_QWORD *)(v2 + 112))
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      *(_QWORD *)(v2 + 112) = 0;
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      ++*(_DWORD *)(v2 + 104);
    }
    result = *(_QWORD *)(v2 + 40);
    if (result)
    {
      if (*(_QWORD *)(v2 + 72))
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      *(_QWORD *)(v2 + 72) = 0;
      *(_QWORD *)(v2 + 48) = 0;
      *(_QWORD *)(v2 + 56) = 0;
      *(_QWORD *)(v2 + 40) = 0;
      ++*(_DWORD *)(v2 + 64);
    }
  }
  return result;
}

re::MeshSortingCollection *re::MeshSortingCollection::MeshSortingCollection(re::MeshSortingCollection *this, re::Allocator *a2)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 36) = 0x7FFFFFFFLL;
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)this, (uint64_t)a2, 3);
  *((_DWORD *)this + 20) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_QWORD *)((char *)this + 84) = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)this + 48, (uint64_t)a2, 3);
  *((_DWORD *)this + 32) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_QWORD *)((char *)this + 132) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)this + 96, (uint64_t)a2, 3);
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_QWORD *)((char *)this + 180) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)this + 144, (uint64_t)a2, 3);
  *((_WORD *)this + 96) = 0;
  return this;
}

void re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 7), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 176 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        v10 = 0;
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = 224 * v8;
        do
        {
          v14 = (_QWORD *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            v15 = v14 + 3;
            v16 = *v14;
            v17 = *(unsigned int *)(a1 + 24);
            v18 = *v14 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 224 * v19 + 8);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 224 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 224 * v19 + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v19 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v19 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v18);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v19) = v16;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v19 + 16) = v14[2];
            v23 = *(_QWORD *)(a1 + 16) + 224 * v19;
            *(_DWORD *)(v23 + 56) = 0;
            *(_OWORD *)(v23 + 40) = 0u;
            *(_OWORD *)(v23 + 24) = 0u;
            *(_QWORD *)(v23 + 60) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 24), v15);
            *(_DWORD *)(v23 + 104) = 0;
            *(_OWORD *)(v23 + 88) = 0u;
            *(_OWORD *)(v23 + 72) = 0u;
            *(_QWORD *)(v23 + 108) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 72), (uint64_t *)(v6 + v10 + 72));
            *(_DWORD *)(v23 + 152) = 0;
            *(_OWORD *)(v23 + 136) = 0u;
            *(_OWORD *)(v23 + 120) = 0u;
            *(_QWORD *)(v23 + 156) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 120), (uint64_t *)(v6 + v10 + 120));
            *(_OWORD *)(v23 + 168) = 0u;
            v23 += 168;
            *(_DWORD *)(v23 + 32) = 0;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_QWORD *)(v23 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v23, (uint64_t *)(v6 + v10 + 168));
            *(_WORD *)(v23 + 48) = *(_WORD *)(v6 + v10 + 216);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v18) = v19;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v10 += 224;
        }
        while (v13 != v10);
      }
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 224 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[44];

  v9 = *(_DWORD *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    v9 = *(_DWORD *)(a1 + 32);
    v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v34, 0, 36);
          *(_QWORD *)&v34[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v34, v13, v12);
          v15 = *(_OWORD *)v34;
          *(_OWORD *)v34 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v34[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v34[24];
          *(_OWORD *)&v34[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v34[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              ++v21;
              v22 += 176;
            }
            while (v21 < v20);
          }
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v34);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 176 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 176 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 176 * v9;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26 + 16) = *a4;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 + v26;
  LOWORD(v26) = *(_WORD *)(a5 + 64);
  v30 = *(_OWORD *)(a5 + 32);
  v29 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v28 + 64) = v30;
  *(_OWORD *)(v28 + 80) = v29;
  *(_WORD *)(v28 + 96) = v26;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)a5;
  LODWORD(v26) = *(unsigned __int8 *)(a5 + 80);
  *(_BYTE *)(v28 + 112) = v26;
  if ((_DWORD)v26)
  {
    v31 = (_OWORD *)(v27 + 176 * v9);
    v32 = *(_OWORD *)(a5 + 96);
    v33 = *(_OWORD *)(a5 + 128);
    v31[9] = *(_OWORD *)(a5 + 112);
    v31[10] = v33;
    v31[8] = v32;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

double re::make::shared::unsafelyInplace<re::ecs2::MeshSortingComponent>(ArcSharedObject *a1)
{
  _OWORD *v1;
  uint64_t v2;
  double result;

  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  v1 = (_OWORD *)((char *)a1 + 304);
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED45598;
  *(_QWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 160) = 0x7FFFFFFF00000000;
  *(_BYTE *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  *(_WORD *)(v2 + 184) = 0;
  *(_BYTE *)(v2 + 192) = 0;
  *(_BYTE *)(v2 + 224) = 0;
  *(_BYTE *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_BYTE *)(v2 + 400) = 0;
  *(_BYTE *)(v2 + 416) = 0;
  result = 0.0;
  *(_OWORD *)((char *)v1 + 28) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 384) = 0;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  return result;
}

id re::internal::defaultRetain<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

__n128 re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  __n128 result;
  __int128 v27;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 16);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  result = *(__n128 *)a5;
  v27 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(v25 + 48) = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  uint64_t v90;
  uint64_t v91;
  int v92;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 160) < *(_DWORD *)(*v8 + 160))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_DWORD *)(v43 + 160) < *(_DWORD *)(v44 + 160))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_DWORD *)(*v42 + 160);
          if (v47 < *(_DWORD *)(*v41 + 160))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(_DWORD *)(*v40 + 160))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(_DWORD *)(*v8 + 160))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_DWORD *)(v55 + 160);
                if (v57 < *(_DWORD *)(v56 + 160))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v56;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (v57 >= *(_DWORD *)(v56 + 160))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v91 = *v7;
              v90 = v7[1];
              v7 = v50;
              v92 = *(_DWORD *)(v90 + 160);
              if (v92 < *(_DWORD *)(v91 + 160))
              {
                do
                {
                  *v50 = v91;
                  v91 = *(v50 - 2);
                  --v50;
                }
                while (v92 < *(_DWORD *)(v91 + 160));
                *v50 = v90;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10)
                {
                  result = *(unsigned int *)(v66 + 160);
                  if ((int)result < *(_DWORD *)(v65[1] + 160))
                  {
                    v66 = v65[1];
                    ++v65;
                    v64 = 2 * v63 + 2;
                  }
                }
                v67 = &v8[v63];
                v68 = *v67;
                v69 = *(_DWORD *)(*v67 + 160);
                if (*(_DWORD *)(v66 + 160) >= v69)
                {
                  do
                  {
                    v70 = v65;
                    *v67 = v66;
                    if (v61 < v64)
                      break;
                    result = (2 * v64) | 1;
                    v65 = &v8[result];
                    v71 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v71 < (uint64_t)v10 && *(_DWORD *)(v66 + 160) < *(_DWORD *)(v65[1] + 160))
                    {
                      v66 = v65[1];
                      ++v65;
                      result = v71;
                    }
                    v67 = v70;
                    v64 = result;
                  }
                  while (*(_DWORD *)(v66 + 160) >= v69);
                  *v70 = v68;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v72 = (unint64_t)v9 >> 3;
            do
            {
              v73 = 0;
              v74 = *v8;
              v75 = v8;
              do
              {
                v76 = &v75[v73];
                v79 = v76[1];
                v77 = v76 + 1;
                v78 = v79;
                v80 = (2 * v73) | 1;
                v81 = 2 * v73 + 2;
                if (v81 < v72)
                {
                  result = *(unsigned int *)(v78 + 160);
                  if ((int)result < *(_DWORD *)(v77[1] + 160))
                  {
                    v78 = v77[1];
                    ++v77;
                    v80 = v81;
                  }
                }
                *v75 = v78;
                v75 = v77;
                v73 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if (v77 == --a2)
              {
                *v77 = v74;
              }
              else
              {
                *v77 = *a2;
                *a2 = v74;
                v82 = (char *)v77 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v8[v83];
                  v85 = *v84;
                  v86 = *v77;
                  v87 = *(_DWORD *)(*v77 + 160);
                  if (*(_DWORD *)(*v84 + 160) < v87)
                  {
                    do
                    {
                      v88 = v84;
                      *v77 = v85;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v8[v83];
                      v85 = *v84;
                      v77 = v88;
                    }
                    while (*(_DWORD *)(*v84 + 160) < v87);
                    *v88 = v86;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 160);
          if (*(_DWORD *)(*(v7 - 1) + 160) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 160))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_DWORD *)(*v8 + 160));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v29 + 160));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_DWORD *)(v32 + 160));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_DWORD *)(v35 + 160));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_DWORD *)(v36 + 160));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 160);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 160) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 160) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 160) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 160) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 160) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 160);
  v6 = *(_DWORD *)(*result + 160);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 160);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 160) < *(_DWORD *)(*result + 160))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 160) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 160) < *(_DWORD *)(*a1 + 160))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 160) < *(_DWORD *)(v22 + 160))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 160);
        if (v25 < *(_DWORD *)(*v19 + 160))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 160))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 160))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 160);
    if (v14 < *(_DWORD *)(*v8 + 160))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 160))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 160) < *(_DWORD *)(*a3 + 160))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 160) < *(_DWORD *)(*a2 + 160))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 160) < *(_DWORD *)(*a1 + 160))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

double re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)(v6 + 168));
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 120));
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)(v6 + 72));
          re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 224;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 24);
          v10 = (_QWORD *)(v7 + 24);
          v9 = v11;
          if (v11)
          {
            v12 = v6 + v4;
            if (*(_QWORD *)(v6 + v4 + 56))
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            *(_QWORD *)(v12 + 56) = 0;
            v10[1] = 0;
            v10[2] = 0;
            *v10 = 0;
            ++*(_DWORD *)(v12 + 48);
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v13 - 24) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 32);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 6) + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6)) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6) + 16) = *(_QWORD *)(v13 - 16);
            v21 = *(_QWORD *)(a1 + 16) + (v17 << 6);
            *(_QWORD *)(v21 + 56) = 0;
            *(_DWORD *)(v21 + 48) = 0;
            *(_QWORD *)(v21 + 32) = 0;
            *(_QWORD *)(v21 + 40) = 0;
            *(_QWORD *)(v21 + 24) = 0;
            *(_QWORD *)(v21 + 24) = *(_QWORD *)(v13 - 8);
            *(_QWORD *)(v13 - 8) = 0;
            *(_QWORD *)(v21 + 32) = *(_QWORD *)v13;
            *(_QWORD *)v13 = 0;
            v22 = *(_QWORD *)(v21 + 40);
            *(_QWORD *)(v21 + 40) = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = v22;
            v23 = *(_QWORD *)(v21 + 56);
            *(_QWORD *)(v21 + 56) = *(_QWORD *)(v13 + 24);
            *(_QWORD *)(v13 + 24) = v23;
            ++*(_DWORD *)(v13 + 16);
            ++*(_DWORD *)(v21 + 48);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 64;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

uint64_t re::DynamicArray<int>::DynamicArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    re::DynamicArray<int>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<float>::copy((_QWORD *)a1, 0, *(char **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    re::DynamicArray<int>::setCapacity((_QWORD *)a1, 0);
    ++*(_DWORD *)(a1 + 24);
  }
  return a1;
}

__n128 re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __n128 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  __n128 result;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v32, v13, v12);
          v15 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v32[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 120;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 120 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 120 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 120 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 120 * v9;
  result = *a5;
  *(__n128 *)(v26 + 24) = *a5;
  *(_QWORD *)(v26 + 72) = 0;
  *(_DWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 48) = 0;
  *(_QWORD *)(v26 + 56) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 40) = a5[1].n128_u64[0];
  a5[1].n128_u64[0] = 0;
  *(_QWORD *)(v26 + 48) = a5[1].n128_u64[1];
  a5[1].n128_u64[1] = 0;
  v28 = *(_QWORD *)(v26 + 56);
  *(_QWORD *)(v26 + 56) = a5[2].n128_u64[0];
  a5[2].n128_u64[0] = v28;
  v29 = *(_QWORD *)(v26 + 72);
  *(_QWORD *)(v26 + 72) = a5[3].n128_u64[0];
  a5[3].n128_u64[0] = v29;
  ++a5[2].n128_u32[2];
  ++*(_DWORD *)(v26 + 64);
  *(_QWORD *)(v26 + 112) = 0;
  *(_QWORD *)(v26 + 88) = 0;
  *(_QWORD *)(v26 + 96) = 0;
  *(_QWORD *)(v26 + 80) = 0;
  *(_DWORD *)(v26 + 104) = 0;
  *(_QWORD *)(v26 + 80) = a5[3].n128_u64[1];
  a5[3].n128_u64[1] = 0;
  *(_QWORD *)(v26 + 88) = a5[4].n128_u64[0];
  a5[4].n128_u64[0] = 0;
  v30 = *(_QWORD *)(v26 + 96);
  *(_QWORD *)(v26 + 96) = a5[4].n128_u64[1];
  a5[4].n128_u64[1] = v30;
  v31 = *(_QWORD *)(v26 + 112);
  *(_QWORD *)(v26 + 112) = a5[5].n128_u64[1];
  a5[5].n128_u64[1] = v31;
  ++a5[5].n128_u32[0];
  ++*(_DWORD *)(v26 + 104);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v32, v13, v12);
          v15 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v32[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              ++v21;
              v22 += 128;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + (v9 << 7) + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + (v9 << 7) + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + (v9 << 7) + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7) + 16) = *a4;
  v26 = (_OWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7));
  v28 = a5[4];
  v27 = a5[5];
  v29 = a5[3];
  v26[4] = a5[2];
  v26[5] = v29;
  v26[6] = v28;
  v26[7] = v27;
  v30 = a5[1];
  v26[2] = *a5;
  v26[3] = v30;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  _BYTE v27[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v13, v12);
          v15 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v27[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 40;
            }
            while (v21 < v20);
          }
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 40 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 40 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  __int128 v30;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v31, v13, v12);
          v15 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v31[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              ++v21;
              v22 += 160;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 160 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 160 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 160 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16);
  v27 = v26 + 160 * v9;
  *(_BYTE *)(v27 + 112) = 0;
  v28 = (_BYTE *)(v27 + 112);
  *((_QWORD *)v28 - 10) = 0;
  *(v28 - 64) = 0;
  *(v28 - 32) = 0;
  *((_WORD *)v28 - 36) = 0;
  *((_QWORD *)v28 - 10) = *(_QWORD *)a5;
  *((_WORD *)v28 - 36) = *(_WORD *)(a5 + 8);
  if (*(_BYTE *)(a5 + 16))
  {
    *(v28 - 64) = 1;
    *(_OWORD *)(v26 + 160 * v9 + 64) = *(_OWORD *)(a5 + 32);
  }
  if (*(_BYTE *)(a5 + 48))
  {
    *(v28 - 32) = 1;
    *(_OWORD *)(v26 + 160 * v9 + 96) = *(_OWORD *)(a5 + 64);
  }
  if (*(_BYTE *)(a5 + 80))
  {
    v29 = v26 + 160 * v9;
    *v28 = 1;
    v30 = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(v29 + 128) = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(v29 + 144) = v30;
  }
  *(_QWORD *)a5 = 0;
  *(_WORD *)(a5 + 8) = 0;
  if (*(_BYTE *)(a5 + 16))
    *(_BYTE *)(a5 + 16) = 0;
  if (*(_BYTE *)(a5 + 48))
    *(_BYTE *)(a5 + 48) = 0;
  if (*(_BYTE *)(a5 + 80))
    *(_BYTE *)(a5 + 80) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

re *re::ecs2::AssetMutateTrackingSystem::willAddSceneToECSService(re *this, re::EventBus **a2)
{
  re::EventBus *v2;
  re *v3;
  _anonymous_namespace_ *v4;
  re *v5;
  uint64_t v6;
  __int128 v7;
  re::ecs2::Scene *v8;
  _BYTE v9[24];
  uint64_t v10;
  re *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (v2)
  {
    v3 = this;
    v4 = (re *)((char *)this + 104);
    v10 = re::globalAllocators(this)[2];
    v5 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 32, 0);
    *(_QWORD *)v5 = &off_24ED6F940;
    *((_QWORD *)v5 + 1) = v3;
    *((_QWORD *)v5 + 2) = re::ecs2::AssetMutateTrackingSystem::sceneEntityWillRemoveHandler;
    *((_QWORD *)v5 + 3) = 0;
    v11 = v5;
    *(_QWORD *)&v7 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v2, (uint64_t)v9, 0, 0);
    *((_QWORD *)&v7 + 1) = v6;
    re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::addNew(v4, (uint64_t *)&v8, &v7);
    this = v11;
    if (v11)
    {
      this = (re *)(**(uint64_t (***)(re *))v11)(v11);
      if (v11 != (re *)v9)
        return (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
  }
  return this;
}

uint64_t re::ecs2::AssetMutateTrackingSystem::sceneEntityWillRemoveHandler(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = a1 + 21;
  v4 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1 + 21, a2);
  if (v4 != -1)
  {
    v5 = (int8x16_t *)(a1[21] + (v4 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v4 & 0xF] = v8;
    v9 = a1[23];
    v10 = *(_QWORD *)(a1[22] + 24 * v4);
    v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[26] ^= (v11 >> 31) ^ v11;
    v12 = a1[25];
    if (v7)
      ++v12;
    v13 = a1[24] - 1;
    a1[24] = v13;
    a1[25] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2)
      re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::resize(v3, 0);
  }
  return 0;
}

uint64_t re::ecs2::AssetMutateTrackingSystem::willRemoveSceneFromECSService(re::ecs2::AssetMutateTrackingSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  re::ecs2::Scene *v5;

  v5 = a2;
  v3 = (uint64_t *)((char *)this + 104);
  result = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 13, (uint64_t *)&v5);
  if (result != -1)
  {
    if (*((_QWORD *)v5 + 36))
      re::EventBus::unsubscribe(*((_QWORD *)v5 + 36), *(_QWORD *)(*((_QWORD *)this + 14) + 24 * result + 8), *(_QWORD *)(*((_QWORD *)this + 14) + 24 * result + 16));
    return re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::remove(v3, (uint64_t *)&v5);
  }
  return result;
}

void re::ecs2::AssetMutateTrackingSystem::update(uint64_t a1, uint64_t a2)
{
  re::ProfilerConfig *v4;
  re *isStatisticCollectionEnabled;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  _BYTE v36[16];

  v4 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36, 3119, a1);
  if (a2)
  {
    isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v4);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
      if (*(_QWORD *)(v6 + 152))
        v33 = mach_absolute_time();
    }
    else
    {
      v6 = 0;
    }
    v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v7 + 40);
        for (i = 8 * v8; i; i -= 8)
        {
          v11 = *(_QWORD **)v9;
          v12 = *(_QWORD *)(*(_QWORD *)v9 + 40);
          if (v12 && (v13 = atomic_load((unsigned int *)(v12 + 704)), v13 == 2))
          {
            v14 = v11[5];
            if (v14)
              v15 = *(_QWORD *)(v14 + 664);
            else
              v15 = 0;
            v18 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
            v16 = v15 ^ (v18 >> 31) ^ v18;
            v17 = *(unsigned int *)(v14 + 260);
          }
          else
          {
            v16 = 0;
            v17 = 0;
          }
          v35 = v11[2];
          v19 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 168), v35);
          if (v19 == -1)
          {
            if (v17)
            {
              v34 = 0uLL;
              v23 = re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::internalAdd((_anonymous_namespace_ *)(a1 + 168), &v35, &v34);
LABEL_23:
              *v23 = v16;
              v23[1] = v17;
              re::ecs2::Component::markDirty(v11);
            }
          }
          else
          {
            v20 = v19;
            v21 = *(_QWORD *)(a1 + 176);
            v22 = v21 + 24 * v19;
            v24 = *(_QWORD *)(v22 + 8);
            v23 = (_QWORD *)(v22 + 8);
            if (v16 != v24)
            {
              *v23 = v16;
              *(_QWORD *)(v21 + 24 * v20 + 16) = v17;
              goto LABEL_25;
            }
            v25 = v21 + 24 * v20;
            v27 = *(_QWORD *)(v25 + 16);
            v26 = (_QWORD *)(v25 + 16);
            if (v27 != v17)
            {
              if (v17)
                goto LABEL_23;
              *v26 = 0;
            }
          }
LABEL_25:
          v9 += 8;
        }
      }
    }
    if (v6)
    {
      if (*(_QWORD *)(v6 + 152))
      {
        v28 = mach_absolute_time();
        v29 = *(int64x2_t **)(v6 + 152);
        if (v29)
        {
          v30 = v29[480].u64[0];
          if (v30 >= v28 - v33)
            v30 = v28 - v33;
          v29[480].i64[0] = v30;
          v31 = v29[480].u64[1];
          if (v31 <= v28 - v33)
            v31 = v28 - v33;
          v29[480].i64[1] = v31;
          v32 = vdupq_n_s64(1uLL);
          v32.i64[0] = v28 - v33;
          v29[481] = vaddq_s64(v29[481], v32);
          *(_BYTE *)(v6 + 184) = 0;
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36);
}

uint64_t *re::ecs2::allocInfo_AssetMutateTrackingSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_335);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_335))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116168, 0);
    *(uint64_t *)((char *)&qword_254116178 + 6) = 0;
    qword_254116178 = 0;
    qword_254116188 = 0;
    qword_254116190 = 0xFFFFFFFFLL;
    qword_254116168 = (uint64_t)&off_24ED7DAA8;
    qword_254116198 = (uint64_t)"AssetMutateTrackingSystem";
    dword_2541161A0 = 0;
    unk_2541161A8 = 0u;
    unk_2541161B8 = 0u;
    unk_2541161C8 = 0u;
    qword_2541161D8 = 0;
    __cxa_guard_release(&_MergedGlobals_335);
  }
  return &qword_254116168;
}

void re::ecs2::initInfo_AssetMutateTrackingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE35F5F30290B8F38;
  v5[1] = "AssetMutateTrackingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AssetMutateTrackingSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AssetMutateTrackingSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AssetMutateTrackingSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AssetMutateTrackingSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AssetMutateTrackingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AssetMutateTrackingSystem *re::internal::defaultConstruct<re::ecs2::AssetMutateTrackingSystem>(int a1, int a2, re::ecs2::AssetMutateTrackingSystem *this)
{
  return re::ecs2::AssetMutateTrackingSystem::AssetMutateTrackingSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AssetMutateTrackingSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a3 + 21));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a3 + 13));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AssetMutateTrackingSystem>(_QWORD *a1)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 21));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 13));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AssetMutateTrackingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetMutateTrackingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AssetMutateTrackingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AssetMutateTrackingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AssetMutateTrackingSystem>, this);
}

void re::ecs2::AssetMutateTrackingSystem::~AssetMutateTrackingSystem(re::ecs2::AssetMutateTrackingSystem *this)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 168);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 104);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 168);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 104);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AssetMutateTrackingSystem::typeInfo(re::ecs2::AssetMutateTrackingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetMutateTrackingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AssetMutateTrackingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AssetMutateTrackingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AssetMutateTrackingSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6F940;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6F940;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

_QWORD *re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *result;
  unint64_t v22;
  unint64_t v23;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = *a3;
  v17 = 3 * (v13 + 16 * v11);
  v18 = *((_QWORD *)a1 + 1) + 8 * v17;
  *(_QWORD *)v18 = *a2;
  *(_OWORD *)(v18 + 8) = v16;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  v20 = (unint64_t *)(*((_QWORD *)a1 + 1) + 8 * v17);
  v22 = *v20;
  result = v20 + 1;
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  _BYTE v31[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v30 = 0u;
  *(_OWORD *)v31 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v31[16], 0, 32);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v30, v8, v9);
  v10 = a1[2];
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::internalAdd((_anonymous_namespace_ *)&v30, (_QWORD *)(a1[1] + 24 * v15), (__int128 *)(a1[1] + 24 * v15 + 8));
      v25 = v15 >> 4;
      v10 = a1[2];
      if (v15 >> 4 >= v10 >> 4)
        break;
      v26 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v26 >= 0x40)
      {
        v27 = 16 * v25;
        v28 = ~v25 + (v10 >> 4);
        while (v28)
        {
          v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v27 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v29 = __clz(__rbit64(v14));
          v27 += 16;
          --v28;
          if (v29 <= 0x3F)
          {
            v15 = v29 + v27;
            goto LABEL_25;
          }
        }
        break;
      }
      v15 = v26 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_25:
      ;
    }
  }
LABEL_12:
  v17 = *(_QWORD *)&v31[40];
  *(_QWORD *)&v31[40] = a1[7];
  result = *(_QWORD *)&v31[40];
  v18 = v30;
  v19 = *(_OWORD *)v31;
  *(_QWORD *)v31 = v10;
  v20 = *a1;
  v21 = a1[1];
  *(_QWORD *)&v30 = *a1;
  *((_QWORD *)&v30 + 1) = v21;
  v22 = *(_OWORD *)&v31[16];
  v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v31[32];
  a1[7] = v17;
  *(_OWORD *)&v31[24] = v23;
  v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)&v31[8] = v24;
  if (result)
  {
    if (v21)
      *((_QWORD *)&v30 + 1) = 0;
    if (v20)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::sortingLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::sortingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Sorting");
  }
  return &re::sortingLogObjects(void)::logObjects;
}

UInt8 *re::NetworkSystem::LocalPeer::growFn(re::NetworkSystem::LocalPeer *this, void *a2, unsigned __int8 *a3)
{
  CFIndex Length;
  uint64_t v6;
  UInt8 *MutableBytePtr;

  Length = CFDataGetLength(this);
  v6 = (3 * Length + 1) >> 1;
  if (v6 <= (uint64_t)a3)
    v6 = (uint64_t)a3;
  CFDataIncreaseLength(this, v6 - Length);
  MutableBytePtr = CFDataGetMutableBytePtr(this);
  CFDataGetLength(this);
  return MutableBytePtr;
}

void re::NetworkSystem::LocalPeer::~LocalPeer(re::NetworkSystem::LocalPeer *this)
{
  const void *v2;
  double v3;
  uint64_t v4;

  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 2) = 0;
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 19);
  v3 = re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 13);
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    if ((*((_BYTE *)this + 64) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 9), v3);
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
  }
}

void re::NetworkSystem::LocalPeer::enter(re::NetworkSystem::LocalPeer *this, re::ecs2::NetworkComponent *a2)
{
  char *v4;
  re::ecs2::NetworkComponent *v5;

  v5 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)a2 + 2) + 296);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 152, (uint64_t *)&v5);
  v5 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)a2 + 2) + 296);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 200, (uint64_t *)&v5);
  v5 = a2;
  v4 = (char *)a2 + 8;
  re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add((uint64_t)this + 104, (uint64_t *)&v5);
  if (v5)

}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

uint64_t re::NetworkSystem::LocalPeer::exit(re::NetworkSystem::LocalPeer *this, re::ecs2::NetworkComponent *a2)
{
  char *v4;
  char *v5;
  re::ecs2::NetworkComponent *v7;

  v4 = (char *)this + 104;
  v7 = a2;
  if (a2)
    v5 = (char *)a2 + 8;
  re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove((uint64_t)v4, (uint64_t *)&v7);
  if (v7)

  v7 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)a2 + 2) + 296);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 200, (uint64_t *)&v7);
  v7 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)a2 + 2) + 296);
  return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 152, (uint64_t *)&v7);
}

re::NetworkSystem *re::NetworkSystem::NetworkSystem(re::NetworkSystem *this)
{
  _anonymous_namespace_ *v2;

  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_DWORD *)this + 86) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_DWORD *)this + 82) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 94) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_DWORD *)this + 116) = 0;
  *((_QWORD *)this + 57) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_QWORD *)this + 64) = 0;
  *((_DWORD *)this + 130) = 0;
  *((_DWORD *)this + 126) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_DWORD *)this + 138) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_QWORD *)this + 75) = 0;
  *((_DWORD *)this + 152) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 160) = 0;
  *((_QWORD *)this + 79) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 86) = 0;
  *((_DWORD *)this + 174) = 0;
  *((_DWORD *)this + 170) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_DWORD *)this + 182) = 0;
  *((_QWORD *)this + 90) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((_QWORD *)this + 97) = 0;
  *((_DWORD *)this + 196) = 0;
  *((_DWORD *)this + 192) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_DWORD *)this + 204) = 0;
  *((_QWORD *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_QWORD *)this + 108) = 0;
  *((_DWORD *)this + 218) = 0;
  *((_DWORD *)this + 214) = 0;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_DWORD *)this + 226) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_QWORD *)this + 119) = 0;
  *((_DWORD *)this + 240) = 0;
  *((_DWORD *)this + 236) = 0;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_DWORD *)this + 248) = 0;
  *((_QWORD *)this + 123) = 0;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_QWORD *)this + 130) = 0;
  *((_DWORD *)this + 262) = 0;
  *((_DWORD *)this + 258) = 0;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *((_DWORD *)this + 270) = 0;
  *((_QWORD *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((_QWORD *)this + 141) = 0;
  *((_DWORD *)this + 284) = 0;
  *((_DWORD *)this + 280) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 292) = 0;
  *((_QWORD *)this + 145) = 0;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((_QWORD *)this + 152) = 0;
  *((_DWORD *)this + 306) = 0;
  *((_DWORD *)this + 302) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *((_DWORD *)this + 314) = 0;
  *((_QWORD *)this + 156) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_QWORD *)this + 163) = 0;
  *((_DWORD *)this + 328) = 0;
  *((_DWORD *)this + 324) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_DWORD *)this + 336) = 0;
  *((_QWORD *)this + 167) = 0;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *((_QWORD *)this + 174) = 0;
  *((_DWORD *)this + 350) = 0;
  *((_DWORD *)this + 346) = 0;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *((_DWORD *)this + 358) = 0;
  *((_QWORD *)this + 178) = 0;
  *((_OWORD *)this + 88) = 0u;
  *((_QWORD *)this + 185) = 0;
  *((_DWORD *)this + 372) = 0;
  *((_DWORD *)this + 368) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *((_DWORD *)this + 380) = 0;
  *((_QWORD *)this + 189) = 0;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_QWORD *)this + 196) = 0;
  *((_DWORD *)this + 394) = 0;
  *((_DWORD *)this + 390) = 0;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_DWORD *)this + 402) = 0;
  *((_QWORD *)this + 200) = 0;
  *((_OWORD *)this + 99) = 0u;
  *((_QWORD *)this + 207) = 0;
  *((_DWORD *)this + 416) = 0;
  *((_DWORD *)this + 412) = 0;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_DWORD *)this + 424) = 0;
  *((_QWORD *)this + 211) = 0;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *((_QWORD *)this + 218) = 0;
  *((_DWORD *)this + 438) = 0;
  *((_DWORD *)this + 434) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *((_DWORD *)this + 446) = 0;
  *((_QWORD *)this + 222) = 0;
  *((_OWORD *)this + 110) = 0u;
  *((_QWORD *)this + 229) = 0;
  *((_DWORD *)this + 460) = 0;
  *((_DWORD *)this + 456) = 0;
  *((_OWORD *)this + 113) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_DWORD *)this + 468) = 0;
  *((_QWORD *)this + 233) = 0;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *((_QWORD *)this + 240) = 0;
  *((_DWORD *)this + 482) = 0;
  *((_DWORD *)this + 478) = 0;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *((_DWORD *)this + 490) = 0;
  *((_QWORD *)this + 244) = 0;
  *((_OWORD *)this + 121) = 0u;
  *((_QWORD *)this + 251) = 0;
  *((_DWORD *)this + 504) = 0;
  *((_DWORD *)this + 500) = 0;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 123) = 0u;
  *((_DWORD *)this + 512) = 0;
  *((_QWORD *)this + 255) = 0;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *((_QWORD *)this + 262) = 0;
  *((_DWORD *)this + 526) = 0;
  *((_DWORD *)this + 522) = 0;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *((_DWORD *)this + 534) = 0;
  *((_QWORD *)this + 266) = 0;
  *((_OWORD *)this + 132) = 0u;
  *((_QWORD *)this + 273) = 0;
  *((_DWORD *)this + 548) = 0;
  *((_DWORD *)this + 544) = 0;
  *((_OWORD *)this + 135) = 0u;
  *((_OWORD *)this + 134) = 0u;
  *((_DWORD *)this + 558) = 0;
  *(_OWORD *)((char *)this + 2200) = 0u;
  *(_OWORD *)((char *)this + 2216) = 0u;
  *(_QWORD *)((char *)this + 2236) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 570) = 0;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *(_QWORD *)((char *)this + 2284) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 582) = 0;
  *(_OWORD *)((char *)this + 2296) = 0u;
  *(_OWORD *)((char *)this + 2312) = 0u;
  *(_QWORD *)((char *)this + 2332) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 594) = 0;
  *(_OWORD *)((char *)this + 2344) = 0u;
  *(_OWORD *)((char *)this + 2360) = 0u;
  *(_QWORD *)((char *)this + 2380) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 306) = 0;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *((_OWORD *)this + 150) = 0u;
  *((_QWORD *)this + 307) = &off_24ED6FA38;
  *((_QWORD *)this + 312) = 0;
  *((_QWORD *)this + 317) = 0;
  *((_QWORD *)this + 316) = 0;
  *((_QWORD *)this + 308) = this;
  *((_QWORD *)this + 317) = RESyncNetSessionObserverCreate();
  RESyncNetSessionObserverOnReceiveData();
  v2 = (_anonymous_namespace_ *)RESyncNetSessionObserverOnParticipantLeave();
  *((_WORD *)this + 1272) = 256;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *((_DWORD *)this + 654) = 0;
  *(_QWORD *)((char *)this + 2620) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *((_DWORD *)this + 666) = 0;
  *(_QWORD *)((char *)this + 2668) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 335, 0);
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *((_QWORD *)this + 343) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 688) = 0;
  *(_OWORD *)((char *)this + 2760) = 0u;
  *(_OWORD *)((char *)this + 2776) = 0u;
  *((_DWORD *)this + 698) = 0;
  *(_QWORD *)((char *)this + 2796) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 351) = 0;
  *((_QWORD *)this + 353) = 0;
  *((_QWORD *)this + 352) = 0;
  *((_DWORD *)this + 708) = 0;
  *(_OWORD *)((char *)this + 2840) = 0u;
  *(_OWORD *)((char *)this + 2856) = 0u;
  *(_OWORD *)((char *)this + 2868) = 0u;
  *(_QWORD *)((char *)this + 2884) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 732) = 0;
  *((_OWORD *)this + 182) = 0u;
  *((_OWORD *)this + 181) = 0u;
  *(_QWORD *)((char *)this + 2932) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 744) = 0;
  *((_OWORD *)this + 185) = 0u;
  *((_OWORD *)this + 184) = 0u;
  *(_QWORD *)((char *)this + 2980) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 374) = 0;
  return this;
}

void re::NetworkSystem::~NetworkSystem(re::NetworkSystem *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  re *v5;
  re::PeerVideoStreamingManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  StringID v47;
  StringID v48;
  uint64_t v49;
  _BYTE v50[16];

  if (*((_QWORD *)this + 302))
  {
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)this + 2712);
    re::Event<re::NetworkSystem>::raise((uint64_t)this + 1320, (uint64_t)this);
    if (*((_QWORD *)this + 303))
    {
      RESyncRelease();
      *((_QWORD *)this + 303) = 0;
    }
    if (*((_QWORD *)this + 304))
    {
      RESyncRelease();
      *((_QWORD *)this + 304) = 0;
    }
    if (*((_QWORD *)this + 305))
    {
      if (*((_QWORD *)this + 306))
        RESyncNetSessionRemoveObserver();
      RESyncRelease();
      *((_QWORD *)this + 305) = 0;
    }
    RESyncRelease();
    *((_QWORD *)this + 306) = 0;
    v2 = re::ServiceLocator::service<re::ServiceRegistry>(*((_QWORD *)this + 302));
    if (*((_QWORD *)this + 319))
    {
      RESyncMCServiceDestroy();
      *((_QWORD *)this + 319) = 0;
    }
    re::StringID::invalid((re::StringID *)&v47);
    v3 = atomic_load((unsigned __int8 *)&qword_2541161F0);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541161F0))
    {
      qword_2541161E8 = re::introspect_PeerVideoStreamingService(0);
      __cxa_guard_release(&qword_2541161F0);
    }
    v4 = qword_2541161E8;
    re::StringID::StringID((re::StringID *)&v48, &v47);
    v49 = v4;
    re::StringID::StringID((re::StringID *)v50, &v48);
    re::StringID::destroyString((re::StringID *)&v48);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v2 + 16, &v49);
    re::StringID::destroyString((re::StringID *)v50);
    re::StringID::destroyString((re::StringID *)&v47);
    v6 = (re::PeerVideoStreamingManager *)*((_QWORD *)this + 321);
    if (v6)
    {
      v7 = re::globalAllocators(v5)[2];
      re::PeerVideoStreamingManager::~PeerVideoStreamingManager(v6);
      (*(void (**)(uint64_t, re::PeerVideoStreamingManager *))(*(_QWORD *)v7 + 40))(v7, v6);
      *((_QWORD *)this + 321) = 0;
    }
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)this + 2584);
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)this + 2632);
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear((uint64_t)this + 2296);
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 2344);
    re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 368);
    RESyncRelease();
    RESyncServiceRemoveObserver();
    RESyncRelease();
    *((_QWORD *)this + 320) = 0;
    RESyncRelease();
    v8 = *((_QWORD *)this + 176);
    if (v8)
    {
      if (*((_QWORD *)this + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      *((_QWORD *)this + 180) = 0;
      *((_QWORD *)this + 177) = 0;
      *((_QWORD *)this + 178) = 0;
      *((_QWORD *)this + 176) = 0;
      ++*((_DWORD *)this + 358);
    }
    v9 = *((_QWORD *)this + 154);
    if (v9)
    {
      if (*((_QWORD *)this + 158))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      *((_QWORD *)this + 158) = 0;
      *((_QWORD *)this + 155) = 0;
      *((_QWORD *)this + 156) = 0;
      *((_QWORD *)this + 154) = 0;
      ++*((_DWORD *)this + 314);
    }
    v10 = *((_QWORD *)this + 231);
    if (v10)
    {
      if (*((_QWORD *)this + 235))
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      *((_QWORD *)this + 235) = 0;
      *((_QWORD *)this + 232) = 0;
      *((_QWORD *)this + 233) = 0;
      *((_QWORD *)this + 231) = 0;
      ++*((_DWORD *)this + 468);
    }
    if (*(_QWORD *)this)
    {
      if (*((_QWORD *)this + 4))
        (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = 0;
      ++*((_DWORD *)this + 6);
    }
    v11 = *((_QWORD *)this + 11);
    if (v11)
    {
      if (*((_QWORD *)this + 15))
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      *((_QWORD *)this + 15) = 0;
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 11) = 0;
      ++*((_DWORD *)this + 28);
    }
    v12 = *((_QWORD *)this + 22);
    if (v12)
    {
      if (*((_QWORD *)this + 26))
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      *((_QWORD *)this + 26) = 0;
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
      *((_QWORD *)this + 22) = 0;
      ++*((_DWORD *)this + 50);
    }
    v13 = *((_QWORD *)this + 33);
    if (v13)
    {
      if (*((_QWORD *)this + 37))
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      *((_QWORD *)this + 37) = 0;
      *((_QWORD *)this + 34) = 0;
      *((_QWORD *)this + 35) = 0;
      *((_QWORD *)this + 33) = 0;
      ++*((_DWORD *)this + 72);
    }
    v14 = *((_QWORD *)this + 44);
    if (v14)
    {
      if (*((_QWORD *)this + 48))
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
      *((_QWORD *)this + 48) = 0;
      *((_QWORD *)this + 45) = 0;
      *((_QWORD *)this + 46) = 0;
      *((_QWORD *)this + 44) = 0;
      ++*((_DWORD *)this + 94);
    }
    v15 = *((_QWORD *)this + 55);
    if (v15)
    {
      if (*((_QWORD *)this + 59))
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      *((_QWORD *)this + 59) = 0;
      *((_QWORD *)this + 56) = 0;
      *((_QWORD *)this + 57) = 0;
      *((_QWORD *)this + 55) = 0;
      ++*((_DWORD *)this + 116);
    }
    v16 = *((_QWORD *)this + 66);
    if (v16)
    {
      if (*((_QWORD *)this + 70))
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      *((_QWORD *)this + 70) = 0;
      *((_QWORD *)this + 67) = 0;
      *((_QWORD *)this + 68) = 0;
      *((_QWORD *)this + 66) = 0;
      ++*((_DWORD *)this + 138);
    }
    v17 = *((_QWORD *)this + 77);
    if (v17)
    {
      if (*((_QWORD *)this + 81))
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      *((_QWORD *)this + 81) = 0;
      *((_QWORD *)this + 78) = 0;
      *((_QWORD *)this + 79) = 0;
      *((_QWORD *)this + 77) = 0;
      ++*((_DWORD *)this + 160);
    }
    v18 = *((_QWORD *)this + 88);
    if (v18)
    {
      if (*((_QWORD *)this + 92))
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      *((_QWORD *)this + 92) = 0;
      *((_QWORD *)this + 89) = 0;
      *((_QWORD *)this + 90) = 0;
      *((_QWORD *)this + 88) = 0;
      ++*((_DWORD *)this + 182);
    }
    v19 = *((_QWORD *)this + 99);
    if (v19)
    {
      if (*((_QWORD *)this + 103))
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      *((_QWORD *)this + 103) = 0;
      *((_QWORD *)this + 100) = 0;
      *((_QWORD *)this + 101) = 0;
      *((_QWORD *)this + 99) = 0;
      ++*((_DWORD *)this + 204);
    }
    v20 = *((_QWORD *)this + 110);
    if (v20)
    {
      if (*((_QWORD *)this + 114))
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      *((_QWORD *)this + 114) = 0;
      *((_QWORD *)this + 111) = 0;
      *((_QWORD *)this + 112) = 0;
      *((_QWORD *)this + 110) = 0;
      ++*((_DWORD *)this + 226);
    }
    v21 = *((_QWORD *)this + 121);
    if (v21)
    {
      if (*((_QWORD *)this + 125))
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      *((_QWORD *)this + 125) = 0;
      *((_QWORD *)this + 122) = 0;
      *((_QWORD *)this + 123) = 0;
      *((_QWORD *)this + 121) = 0;
      ++*((_DWORD *)this + 248);
    }
    v22 = *((_QWORD *)this + 132);
    if (v22)
    {
      if (*((_QWORD *)this + 136))
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
      *((_QWORD *)this + 136) = 0;
      *((_QWORD *)this + 133) = 0;
      *((_QWORD *)this + 134) = 0;
      *((_QWORD *)this + 132) = 0;
      ++*((_DWORD *)this + 270);
    }
    v23 = *((_QWORD *)this + 143);
    if (v23)
    {
      if (*((_QWORD *)this + 147))
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
      *((_QWORD *)this + 147) = 0;
      *((_QWORD *)this + 144) = 0;
      *((_QWORD *)this + 145) = 0;
      *((_QWORD *)this + 143) = 0;
      ++*((_DWORD *)this + 292);
    }
    v24 = *((_QWORD *)this + 220);
    if (v24)
    {
      if (*((_QWORD *)this + 224))
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      *((_QWORD *)this + 224) = 0;
      *((_QWORD *)this + 221) = 0;
      *((_QWORD *)this + 222) = 0;
      *((_QWORD *)this + 220) = 0;
      ++*((_DWORD *)this + 446);
    }
    v25 = *((_QWORD *)this + 187);
    if (v25)
    {
      if (*((_QWORD *)this + 191))
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      *((_QWORD *)this + 191) = 0;
      *((_QWORD *)this + 188) = 0;
      *((_QWORD *)this + 189) = 0;
      *((_QWORD *)this + 187) = 0;
      ++*((_DWORD *)this + 380);
    }
    v26 = *((_QWORD *)this + 198);
    if (v26)
    {
      if (*((_QWORD *)this + 202))
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
      *((_QWORD *)this + 202) = 0;
      *((_QWORD *)this + 199) = 0;
      *((_QWORD *)this + 200) = 0;
      *((_QWORD *)this + 198) = 0;
      ++*((_DWORD *)this + 402);
    }
    v27 = *((_QWORD *)this + 253);
    if (v27)
    {
      if (*((_QWORD *)this + 257))
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
      *((_QWORD *)this + 257) = 0;
      *((_QWORD *)this + 254) = 0;
      *((_QWORD *)this + 255) = 0;
      *((_QWORD *)this + 253) = 0;
      ++*((_DWORD *)this + 512);
    }
    v28 = *((_QWORD *)this + 264);
    if (v28)
    {
      if (*((_QWORD *)this + 268))
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
      *((_QWORD *)this + 268) = 0;
      *((_QWORD *)this + 265) = 0;
      *((_QWORD *)this + 266) = 0;
      *((_QWORD *)this + 264) = 0;
      ++*((_DWORD *)this + 534);
    }
    v29 = *((_QWORD *)this + 209);
    if (v29)
    {
      if (*((_QWORD *)this + 213))
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
      *((_QWORD *)this + 213) = 0;
      *((_QWORD *)this + 210) = 0;
      *((_QWORD *)this + 211) = 0;
      *((_QWORD *)this + 209) = 0;
      ++*((_DWORD *)this + 424);
    }
  }
  re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 368);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 362);
  v30 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 356);
  v31 = *((_QWORD *)this + 351);
  if (v31)
  {
    if (*((_QWORD *)this + 355))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v31 + 40))(v31, v30);
    *((_QWORD *)this + 355) = 0;
    *((_QWORD *)this + 352) = 0;
    *((_QWORD *)this + 353) = 0;
    *((_QWORD *)this + 351) = 0;
    ++*((_DWORD *)this + 708);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 345);
  v32 = re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 339);
  v33 = *((_QWORD *)this + 335);
  if (v33)
  {
    if ((*((_BYTE *)this + 2688) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v33 + 40))(v33, *((_QWORD *)this + 337), v32);
    *(_OWORD *)((char *)this + 2680) = 0u;
    *(_OWORD *)((char *)this + 2696) = 0u;
  }
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 329);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 323);
  re::internal::NetworkSystemAssetMessaging::~NetworkSystemAssetMessaging((re::NetworkSystem *)((char *)this + 2456));
  v34 = *((_QWORD *)this + 301);
  if (v34)
    dispatch_release(v34);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 293);
  re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)this + 287);
  re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::deinit((uint64_t *)this + 281);
  re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 275);
  re::Event<re::Engine>::~Event((uint64_t *)this + 264);
  re::Event<re::Engine>::~Event((uint64_t *)this + 253);
  v35 = (uint64_t *)((char *)this + 1936);
  v36 = *((_QWORD *)this + 242);
  if (v36)
  {
    if (*((_QWORD *)this + 246))
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    *((_QWORD *)this + 246) = 0;
    *((_QWORD *)this + 243) = 0;
    *((_QWORD *)this + 244) = 0;
    *v35 = 0;
    ++*((_DWORD *)this + 490);
  }
  v37 = *((_QWORD *)this + 247);
  if (v37)
  {
    if (*((_QWORD *)this + 251))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
      v38 = *v35;
    }
    else
    {
      v38 = 0;
    }
    *((_QWORD *)this + 251) = 0;
    *((_QWORD *)this + 248) = 0;
    *((_QWORD *)this + 249) = 0;
    *((_QWORD *)this + 247) = 0;
    ++*((_DWORD *)this + 500);
    if (v38)
    {
      if (*((_QWORD *)this + 246))
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
      *((_QWORD *)this + 246) = 0;
      *((_QWORD *)this + 243) = 0;
      *((_QWORD *)this + 244) = 0;
      *v35 = 0;
      ++*((_DWORD *)this + 490);
    }
  }
  re::Event<re::Engine>::~Event((uint64_t *)this + 231);
  v39 = (uint64_t *)((char *)this + 1760);
  v40 = *((_QWORD *)this + 220);
  if (v40)
  {
    if (*((_QWORD *)this + 224))
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    *((_QWORD *)this + 224) = 0;
    *((_QWORD *)this + 221) = 0;
    *((_QWORD *)this + 222) = 0;
    *v39 = 0;
    ++*((_DWORD *)this + 446);
  }
  v41 = *((_QWORD *)this + 225);
  if (v41)
  {
    if (*((_QWORD *)this + 229))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
      v42 = *v39;
    }
    else
    {
      v42 = 0;
    }
    *((_QWORD *)this + 229) = 0;
    *((_QWORD *)this + 226) = 0;
    *((_QWORD *)this + 227) = 0;
    *((_QWORD *)this + 225) = 0;
    ++*((_DWORD *)this + 456);
    if (v42)
    {
      if (*((_QWORD *)this + 224))
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      *((_QWORD *)this + 224) = 0;
      *((_QWORD *)this + 221) = 0;
      *((_QWORD *)this + 222) = 0;
      *v39 = 0;
      ++*((_DWORD *)this + 446);
    }
  }
  re::Event<re::Engine>::~Event((uint64_t *)this + 209);
  re::Event<re::Engine>::~Event((uint64_t *)this + 198);
  re::Event<re::Engine>::~Event((uint64_t *)this + 187);
  v43 = (uint64_t *)((char *)this + 1408);
  v44 = *((_QWORD *)this + 176);
  if (v44)
  {
    if (*((_QWORD *)this + 180))
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    *((_QWORD *)this + 180) = 0;
    *((_QWORD *)this + 177) = 0;
    *((_QWORD *)this + 178) = 0;
    *v43 = 0;
    ++*((_DWORD *)this + 358);
  }
  v45 = *((_QWORD *)this + 181);
  if (v45)
  {
    if (*((_QWORD *)this + 185))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      v46 = *v43;
    }
    else
    {
      v46 = 0;
    }
    *((_QWORD *)this + 185) = 0;
    *((_QWORD *)this + 182) = 0;
    *((_QWORD *)this + 183) = 0;
    *((_QWORD *)this + 181) = 0;
    ++*((_DWORD *)this + 368);
    if (v46)
    {
      if (*((_QWORD *)this + 180))
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      *((_QWORD *)this + 180) = 0;
      *((_QWORD *)this + 177) = 0;
      *((_QWORD *)this + 178) = 0;
      *v43 = 0;
      ++*((_DWORD *)this + 358);
    }
  }
  re::Event<re::Engine>::~Event((uint64_t *)this + 165);
  re::Event<re::Engine>::~Event((uint64_t *)this + 154);
  re::Event<re::Engine>::~Event((uint64_t *)this + 143);
  re::Event<re::Engine>::~Event((uint64_t *)this + 132);
  re::Event<re::Engine>::~Event((uint64_t *)this + 121);
  re::Event<re::Engine>::~Event((uint64_t *)this + 110);
  re::Event<re::Engine>::~Event((uint64_t *)this + 99);
  re::Event<re::Engine>::~Event((uint64_t *)this + 88);
  re::Event<re::Engine>::~Event((uint64_t *)this + 77);
  re::Event<re::Engine>::~Event((uint64_t *)this + 66);
  re::Event<re::Engine>::~Event((uint64_t *)this + 55);
  re::Event<re::Engine>::~Event((uint64_t *)this + 44);
  re::Event<re::Engine>::~Event((uint64_t *)this + 33);
  re::Event<re::Engine>::~Event((uint64_t *)this + 22);
  re::Event<re::Engine>::~Event((uint64_t *)this + 11);
  re::Event<re::Engine>::~Event((uint64_t *)this);
}

void re::NetworkSystem::init(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t Size;
  uint64_t v34;
  uint64_t DefaultNoAlloc;
  int v36;
  unsigned __int8 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const re::IntrospectionBase *v43;
  _anonymous_namespace_ *v44;
  uint64_t v45;
  std::string::size_type v46;
  char *v47;
  unint64_t v48;
  std::vector<std::csub_match>::pointer value_high;
  std::sub_match<const char *> *begin;
  std::string::value_type v51;
  re *v52;
  std::string::size_type v53;
  std::string *v54;
  unint64_t v55;
  NSObject *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  double v60;
  re::ecs2::NetworkEntityState *v61;
  re *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unsigned __int8 v69;
  uint64_t v70;
  std::string::value_type *v71;
  std::string::value_type *v72;
  std::string::value_type v73;
  std::string::value_type *v74;
  unint64_t v75;
  int v76;
  void *v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  char v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  char v91;
  uint64_t v92;
  std::string::value_type **v93;
  std::string::value_type **v94;
  std::string::value_type *v95;
  std::string::value_type v96;
  uint64_t v97;
  _QWORD v98[2];
  uint64_t v99;
  uint64_t v100;
  std::string::value_type **v101;
  std::string::value_type **v102;
  std::string::value_type *v103;
  uint64_t *v104;
  char *v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t);
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t);
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t);
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t);
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t);
  void *v130;
  uint64_t v131;
  std::regex_traits<char> v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  std::string v136;
  _QWORD v137[2];
  __int128 v138;
  __int128 v139;
  uint64_t v140[4];
  int v141;
  uint64_t v142;
  _BYTE v143[48];
  _QWORD v144[4];
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  std::vector<std::csub_match> v153[2];
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  void **v162;
  uint64_t v163;
  unsigned __int8 v164;
  __int128 v165;
  std::regex_traits<char> *v166;
  unsigned int v167;
  _OWORD v168[3];
  std::string::value_type *v169;
  std::string::value_type *v170;
  char v171;
  std::string::value_type *v172;
  std::string::value_type *v173;
  char v174;
  char v175;
  uint64_t v176;
  uint64_t v177;

  v2 = a2;
  v177 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 2544) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 2416) = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    dispatch_retain(*(dispatch_object_t *)(a2 + 8));
  v5 = *(NSObject **)(a1 + 2408);
  *(_QWORD *)(a1 + 2408) = v4;
  if (v5)
    dispatch_release(v5);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 88), 0);
  ++*(_DWORD *)(a1 + 112);
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 176), 0);
  ++*(_DWORD *)(a1 + 200);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 264), 0);
  ++*(_DWORD *)(a1 + 288);
  v10 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 352), 0);
  ++*(_DWORD *)(a1 + 376);
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 440), 0);
  ++*(_DWORD *)(a1 + 464);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 528), 0);
  ++*(_DWORD *)(a1 + 552);
  v13 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 616), 0);
  ++*(_DWORD *)(a1 + 640);
  v14 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 704), 0);
  ++*(_DWORD *)(a1 + 728);
  v15 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 792), 0);
  ++*(_DWORD *)(a1 + 816);
  v16 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 880), 0);
  ++*(_DWORD *)(a1 + 904);
  v17 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 968), 0);
  ++*(_DWORD *)(a1 + 992);
  v18 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1056), 0);
  ++*(_DWORD *)(a1 + 1080);
  v19 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1144), 0);
  ++*(_DWORD *)(a1 + 1168);
  v20 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1320), 0);
  ++*(_DWORD *)(a1 + 1344);
  v21 = (_anonymous_namespace_ *)re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity((_QWORD *)(a1 + 1760));
  ++*(_DWORD *)(a1 + 1784);
  v22 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1848), 0);
  ++*(_DWORD *)(a1 + 1872);
  v23 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1232), 0);
  ++*(_DWORD *)(a1 + 1256);
  v24 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1408), 0);
  ++*(_DWORD *)(a1 + 1432);
  v25 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1496), 0);
  ++*(_DWORD *)(a1 + 1520);
  v26 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1584), 0);
  ++*(_DWORD *)(a1 + 1608);
  v27 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 2024), 0);
  ++*(_DWORD *)(a1 + 2048);
  v28 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 2112), 0);
  ++*(_DWORD *)(a1 + 2136);
  v29 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 1672), 0);
  ++*(_DWORD *)(a1 + 1696);
  v30 = RESyncNetSessionObserverCreate();
  v31 = MEMORY[0x24BDAC760];
  *(_QWORD *)(a1 + 2448) = v30;
  v127 = v31;
  v128 = 0x40000000;
  v129 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke;
  v130 = &__block_descriptor_tmp_21;
  v131 = a1;
  RESyncNetSessionObserverOnPeerDidPause();
  v122 = v31;
  v123 = 0x40000000;
  v124 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_2;
  v125 = &__block_descriptor_tmp_1;
  v126 = a1;
  RESyncNetSessionObserverOnPeerDidResume();
  v117 = v31;
  v118 = 0x40000000;
  v119 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_3;
  v120 = &__block_descriptor_tmp_3_0;
  v121 = a1;
  RESyncNetSessionObserverOnParticipantJoin();
  v112 = v31;
  v113 = 0x40000000;
  v114 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_4;
  v115 = &__block_descriptor_tmp_5_0;
  v116 = a1;
  RESyncNetSessionObserverOnParticipantLeave();
  v32 = re::ServiceLocator::service<re::ServiceRegistry>(*(_QWORD *)(a1 + 2416));
  Size = RESyncServiceConfigGetSize();
  MEMORY[0x24BDAC7A8](Size);
  bzero((char *)v98 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0), Size);
  DefaultNoAlloc = RESyncServiceConfigCreateDefaultNoAlloc();
  v36 = *(unsigned __int8 *)(a1 + 2544);
  v100 = v32;
  if (!v36)
    goto LABEL_62;
  v98[1] = DefaultNoAlloc;
  v99 = v2;
  if ((v37 & 1) == 0)
  {
    if ((_DWORD)DefaultNoAlloc)
    {
      re::introspect<re::PersistedSchema>(void)::info = re::introspect_PersistedSchema(0);
    }
  }
  v38 = re::introspect<re::PersistedSchema>(void)::info;
  v141 = 0;
  memset(v140, 0, sizeof(v140));
  v142 = 0x7FFFFFFFLL;
  v39 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)DefaultNoAlloc);
  if (*((_QWORD *)v39 + 3))
  {
    v40 = (uint64_t)v39;
    v41 = 0;
    do
    {
      v42 = re::ecs2::ComponentTypeRegistry::operator[](v40, v41);
      v43 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
      v39 = (char *)re::PersistedSchema::addIntrospectionGraph((re::PersistedSchema *)v140, v43);
      ++v41;
    }
    while (v41 < *(_QWORD *)(v40 + 24));
  }
  v138 = 0u;
  v139 = 0u;
  re::DynamicString::setCapacity(&v138, 0);
  v44 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v138, 0x10000uLL);
  v137[0] = &off_24ED7C990;
  v137[1] = &v138;
  {
    re::internal::assertLog((re::internal *)4, v45, "assertion failure: '%s' (%s:line %i) Failed to get the schema hash for all the components.", "!\"Unreachable code\"", "calculateComponentsSchemaHash", 505);
    _os_crash();
    __break(1u);
LABEL_108:
    v97 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke(v97);
    return;
  }
  memset(&v136, 0, sizeof(v136));
  if ((BYTE8(v138) & 1) != 0)
    v46 = *((_QWORD *)&v138 + 1) >> 1;
  else
    v46 = BYTE8(v138) >> 1;
  std::string::reserve(&v136, v46);
  std::regex_traits<char>::regex_traits(&v132);
  v135 = 0;
  v134 = 0u;
  v133 = 0u;
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)&v132, "\\w*\\\"Size\\\".*", "") != "")
    goto LABEL_108;
  if ((BYTE8(v138) & 1) != 0)
    v47 = (char *)v139;
  else
    v47 = (char *)((unint64_t)&v138 | 9);
  if ((BYTE8(v138) & 1) != 0)
    v48 = *((_QWORD *)&v138 + 1) >> 1;
  else
    v48 = BYTE8(v138) >> 1;
  *(_QWORD *)&v165 = v47;
  *((_QWORD *)&v165 + 1) = &v47[v48];
  v166 = &v132;
  v167 = 0;
  v170 = 0;
  v169 = 0;
  v171 = 0;
  v173 = 0;
  v172 = 0;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  memset(v168, 0, 41);
  std::string::__init_with_size[abi:nn180100]<char const*,char const*>(v153, v47, &v47[v48], v48);
  memset(v144, 0, 17);
  v145 = 0;
  v144[3] = 0;
  LOBYTE(v146) = 0;
  v147 = 0;
  v148 = 0;
  memset(v143, 0, 41);
  value_high = (std::vector<std::csub_match>::pointer)HIBYTE(v153[0].__end_cap_.__value_);
  if (SHIBYTE(v153[0].__end_cap_.__value_) >= 0)
    begin = (std::sub_match<const char *> *)v153;
  else
    begin = v153[0].__begin_;
  if (SHIBYTE(v153[0].__end_cap_.__value_) < 0)
    value_high = v153[0].__end_;
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v132, begin, (std::sub_match<const char *> *)((char *)value_high + (_QWORD)begin), (std::vector<std::csub_match> *)v143, 0);
  v106 = v168;
  std::match_results<char *>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v168, (uint64_t)v47, (uint64_t)&v47[v48], (uint64_t *)v143, 0);
  if (*(_QWORD *)v143)
    operator delete(*(void **)v143);
  if (SHIBYTE(v153[0].__end_cap_.__value_) < 0)
    operator delete(v153[0].__begin_);
  v146 = 0;
  v145 = 0;
  v147 = 0;
  v149 = 0;
  v148 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  *(_OWORD *)&v143[32] = 0u;
  memset(v144, 0, 25);
  memset(v143, 0, 28);
  if (!std::regex_iterator<char *,char,std::regex_traits<char>>::operator==((uint64_t)&v165, (uint64_t)v143))
  {
    if (std::regex_iterator<char *,char,std::regex_traits<char>>::operator==((uint64_t)&v165, (uint64_t)v143))
      goto LABEL_36;
    v101 = &v172;
    v102 = &v169;
    v104 = (uint64_t *)&v168[2];
    v105 = (char *)&v168[1] + 8;
    while (1)
    {
      v71 = v169;
      v72 = v170;
      while (v71 != v72)
      {
        v73 = *v71++;
        std::string::push_back(&v136, v73);
      }
      v103 = v173;
      v74 = v172;
      v75 = v167;
      v76 = v167 | 0x800;
      v167 |= 0x800u;
      v77 = *(void **)&v168[0];
      v78 = v105;
      if (*((_QWORD *)&v168[0] + 1) != *(_QWORD *)&v168[0])
        v78 = *(_QWORD **)&v168[0];
      v79 = (uint64_t *)(*(_QWORD *)&v168[0] + 8);
      if (*((_QWORD *)&v168[0] + 1) == *(_QWORD *)&v168[0])
        v79 = v104;
      v80 = *v79;
      v81 = (char *)*((_QWORD *)&v165 + 1);
      if (*v78 == *v79)
      {
        if (v80 == *((_QWORD *)&v165 + 1))
          goto LABEL_94;
        v86 = (uint64_t)v166;
        v87 = v75 | 0x860;
        v88 = (v75 >> 7) & 1;
        std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v162, (char *)(v80 - v88), *((char **)&v165 + 1), *((_QWORD *)&v165 + 1) - (v80 - v88));
        v154 = 0;
        v155 = 0;
        v156 = 0;
        v157 = 0;
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        memset(v153, 0, 41);
        v89 = v164;
        v90 = (void **)&v162;
        if ((v164 & 0x80u) != 0)
        {
          v90 = v162;
          v89 = v163;
        }
        v91 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v86, (std::sub_match<const char *> *)((char *)v90 + v88), (std::sub_match<const char *> *)((char *)v90 + v89), v153, v87);
        std::match_results<char *>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v106, v80, (uint64_t)v81, (uint64_t *)v153, 1);
        if (v153[0].__begin_)
          operator delete(v153[0].__begin_);
        if ((char)v164 < 0)
        {
          operator delete(v162);
          if ((v91 & 1) != 0)
            goto LABEL_97;
        }
        else if ((v91 & 1) != 0)
        {
          goto LABEL_97;
        }
        ++v80;
        v76 = v167;
        v81 = (char *)*((_QWORD *)&v165 + 1);
      }
      v167 = v76 | 0x80;
      v82 = (uint64_t)v166;
      std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v162, (char *)(v80 - 1), v81, (unint64_t)&v81[-v80 + 1]);
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v161 = 0;
      memset(v153, 0, 41);
      v83 = v164;
      v84 = (void **)&v162;
      if ((v164 & 0x80u) != 0)
      {
        v84 = v162;
        v83 = v163;
      }
      v85 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v82, (std::sub_match<const char *> *)((char *)v84 + 1), (std::sub_match<const char *> *)((char *)v84 + v83), v153, v76 | 0x80u);
      std::match_results<char *>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v106, v80, (uint64_t)v81, (uint64_t *)v153, (v76 & 0x800) != 0);
      if (v153[0].__begin_)
        operator delete(v153[0].__begin_);
      if ((char)v164 < 0)
      {
        operator delete(v162);
        if ((v85 & 1) == 0)
        {
LABEL_93:
          v77 = *(void **)&v168[0];
LABEL_94:
          if (v77)
            operator delete(v77);
          v175 = 0;
          v92 = (uint64_t)v106;
          *v106 = 0u;
          *(_OWORD *)(v92 + 16) = 0u;
          *(_OWORD *)(v92 + 25) = 0u;
          v93 = v102;
          *v102 = 0;
          v93[1] = 0;
          *((_BYTE *)v93 + 16) = 0;
          v94 = v101;
          *v101 = 0;
          v94[1] = 0;
          *((_BYTE *)v94 + 16) = 0;
          v176 = 0;
        }
      }
      else if ((v85 & 1) == 0)
      {
        goto LABEL_93;
      }
LABEL_97:
      if (std::regex_iterator<char *,char,std::regex_traits<char>>::operator==((uint64_t)&v165, (uint64_t)v143))
      {
        v95 = v103;
        while (v74 != v95)
        {
          v96 = *v74++;
          std::string::push_back(&v136, v96);
        }
        goto LABEL_36;
      }
    }
  }
  if (v48)
  {
    do
    {
      v51 = *v47++;
      std::string::push_back(&v136, v51);
      --v48;
    }
    while (v48);
LABEL_36:
    if (*(_QWORD *)&v143[32])
      operator delete(*(void **)&v143[32]);
  }
  v52 = *(re **)&v168[0];
  if (*(_QWORD *)&v168[0])
    operator delete(*(void **)&v168[0]);
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
  else
    v53 = v136.__r_.__value_.__l.__size_;
  v2 = v99;
  v31 = MEMORY[0x24BDAC760];
  if (v53)
  {
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v136;
    else
      v54 = (std::string *)v136.__r_.__value_.__r.__words[0];
    v52 = (re *)MurmurHash3_x64_128((uint64_t)v54, v53, 0, (unint64_t *)&v165);
    v55 = (*((_QWORD *)&v165 + 1) + ((_QWORD)v165 << 6) + ((unint64_t)v165 >> 2) - 0x61C8864680B583E9) ^ v165;
  }
  else
  {
    v55 = 0;
  }
  v56 = *re::ecsNetworkLogObjects(v52);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v165) = 134217984;
    *(_QWORD *)((char *)&v165 + 4) = v55;
    _os_log_debug_impl(&dword_224FE9000, v56, OS_LOG_TYPE_DEBUG, "ECS2 component schema hash: %016zX", (uint8_t *)&v165, 0xCu);
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  std::locale::~locale(&v132.__loc_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if ((_QWORD)v138 && (BYTE8(v138) & 1) != 0)
    v60 = (*(double (**)(void))(*(_QWORD *)v138 + 40))();
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v140, v60);
LABEL_62:
  RESyncServiceConfigSetSchemaHash();
  RESyncServiceConfigSetDispatchQueue();
  *(_QWORD *)(a1 + 2560) = RESyncCreateSyncService();
  *(_QWORD *)(a1 + 2576) = RESyncServiceObserverCreate();
  v107 = v31;
  v108 = 0x40000000;
  v109 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_5;
  v110 = &__block_descriptor_tmp_7_0;
  v111 = a1;
  RESyncServiceObserverOnDataArrive();
  RESyncServiceAddObserver();
  v61 = (re::ecs2::NetworkEntityState *)RESyncServiceConfigDestruct();
  re::ecs2::NetworkEntityState::makeSyncInfo(v61);
  RESyncServiceRegisterTypeInfo();
  RESyncRelease();
  v62 = (re *)RESyncCommitListCreate();
  *(_QWORD *)(a1 + 2392) = v62;
  v63 = re::globalAllocators(v62);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63[2] + 32))(v63[2], 312, 8);
  *(_OWORD *)(v64 + 24) = 0u;
  *(_OWORD *)(v64 + 40) = 0u;
  *(_OWORD *)(v64 + 56) = 0u;
  *(_OWORD *)(v64 + 72) = 0u;
  *(_OWORD *)(v64 + 88) = 0u;
  *(_OWORD *)(v64 + 104) = 0u;
  *(_OWORD *)(v64 + 120) = 0u;
  *(_OWORD *)(v64 + 136) = 0u;
  *(_OWORD *)(v64 + 152) = 0u;
  *(_OWORD *)(v64 + 168) = 0u;
  *(_OWORD *)(v64 + 184) = 0u;
  *(_OWORD *)(v64 + 200) = 0u;
  *(_OWORD *)(v64 + 216) = 0u;
  *(_OWORD *)(v64 + 232) = 0u;
  *(_OWORD *)(v64 + 248) = 0u;
  *(_OWORD *)(v64 + 8) = 0u;
  *(_OWORD *)(v64 + 264) = 0u;
  *(_OWORD *)(v64 + 280) = 0u;
  *(_OWORD *)(v64 + 296) = 0u;
  *(_QWORD *)v64 = &off_24ED5C6F0;
  v65 = MEMORY[0x24BDAC9B8];
  dispatch_retain(MEMORY[0x24BDAC9B8]);
  *(_QWORD *)(v64 + 8) = v65;
  *(_QWORD *)(v64 + 16) = 0;
  *(_BYTE *)(v64 + 32) = 0;
  *(_QWORD *)(v64 + 40) = 0;
  *(_WORD *)(v64 + 48) = 0;
  *(_QWORD *)(v64 + 112) = 0;
  *(_OWORD *)(v64 + 56) = 0u;
  *(_OWORD *)(v64 + 72) = 0u;
  *(_OWORD *)(v64 + 88) = 0u;
  *(_DWORD *)(v64 + 104) = 0;
  *(_DWORD *)(v64 + 120) = 1;
  *(_OWORD *)(v64 + 128) = 0u;
  *(_OWORD *)(v64 + 144) = 0u;
  *(_DWORD *)(v64 + 160) = 0;
  *(_QWORD *)(v64 + 164) = 0x7FFFFFFFLL;
  *(_OWORD *)(v64 + 176) = 0u;
  *(_OWORD *)(v64 + 192) = 0u;
  *(_DWORD *)(v64 + 208) = 0;
  *(_QWORD *)(v64 + 212) = 0x7FFFFFFFLL;
  *(_QWORD *)(v64 + 224) = 0;
  *(_QWORD *)(v64 + 232) = 0;
  *(_DWORD *)(v64 + 248) = 0;
  *(_QWORD *)(v64 + 240) = 0;
  *(_QWORD *)(v64 + 296) = 0;
  *(_DWORD *)(v64 + 304) = 0;
  *(_OWORD *)(v64 + 256) = 0u;
  *(_OWORD *)(v64 + 272) = 0u;
  *(_DWORD *)(v64 + 288) = 0;
  *(_QWORD *)(a1 + 2568) = v64;
  v66 = *(_QWORD *)(v2 + 8);
  if (v66)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 8));
    v64 = *(_QWORD *)(a1 + 2568);
  }
  v67 = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)v143 = v66;
  *(_QWORD *)&v143[8] = v67;
  *(_QWORD *)&v143[16] = *(_QWORD *)(a1 + 2560);
  re::PeerVideoStreamingManager::init(v64, (uint64_t)v143);
  v68 = *(void **)(a1 + 2568);
  re::StringID::invalid((re::StringID *)v153);
  v69 = atomic_load((unsigned __int8 *)&qword_2541161F0);
  if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_2541161F0))
  {
    qword_2541161E8 = re::introspect_PeerVideoStreamingService(0);
    __cxa_guard_release(&qword_2541161F0);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&v165, (const re::IntrospectionBase *)qword_2541161E8, (StringID *)v153, v68);
  v70 = v100;
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v100 + 16, (uint64_t *)&v165);
  re::StringID::destroyString((re::StringID *)((char *)&v165 + 8));
  re::StringID::destroyString((re::StringID *)v153);
  if (*(_QWORD *)v143)
    dispatch_release(*(dispatch_object_t *)v143);
  *(_QWORD *)(a1 + 2992) = re::ServiceLocator::serviceOrNull<re::FrameManager>(v70);
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke(uint64_t a1)
{
  re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(*(_QWORD *)(a1 + 32) + 2024, *(_QWORD *)(a1 + 32));
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_2(uint64_t a1)
{
  re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(*(_QWORD *)(a1 + 32) + 2112, *(_QWORD *)(a1 + 32));
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  re::NetworkSystemFeatureFlags *IsLocal;
  unint64_t PeerID;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char HasForceAuthorityCapability;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;

  v1 = *(_QWORD *)(a1 + 32);
  IsLocal = (re::NetworkSystemFeatureFlags *)RESyncNetSessionGetIsLocal();
  if (!(_DWORD)IsLocal || !re::NetworkSystemFeatureFlags::enableAltSharedApp(IsLocal))
    return;
  PeerID = RESyncParticipantGetPeerID();
  v4 = PeerID;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) ^ ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  if (*(_QWORD *)(v1 + 2944))
  {
    v7 = *(unsigned int *)(*(_QWORD *)(v1 + 2952) + 4 * (v6 % *(unsigned int *)(v1 + 2968)));
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(v1 + 2960);
      if (*(_QWORD *)(v12 + 272 * v7 + 16) == PeerID)
        return;
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v12 + 272 * v7 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v7 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v12 + 272 * v7 + 16) == PeerID)
          return;
      }
    }
  }
  HasForceAuthorityCapability = RESyncParticipantHasForceAuthorityCapability();
  if (!*(_QWORD *)(v1 + 2944))
  {
    LODWORD(v9) = 0;
    goto LABEL_16;
  }
  v9 = v6 % *(unsigned int *)(v1 + 2968);
  v10 = *(unsigned int *)(*(_QWORD *)(v1 + 2952) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_16:
    v13 = *(unsigned int *)(v1 + 2980);
    if ((_DWORD)v13 == 0x7FFFFFFF)
    {
      v13 = *(unsigned int *)(v1 + 2976);
      v14 = v13;
      if ((_DWORD)v13 == *(_DWORD *)(v1 + 2968))
      {
        re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v1 + 2944, 2 * *(_DWORD *)(v1 + 2972));
        LODWORD(v9) = v6 % *(unsigned int *)(v1 + 2968);
        v14 = *(_DWORD *)(v1 + 2976);
      }
      *(_DWORD *)(v1 + 2976) = v14 + 1;
      v15 = *(_QWORD *)(v1 + 2960);
      v16 = *(_DWORD *)(v15 + 272 * v13 + 8);
    }
    else
    {
      v15 = *(_QWORD *)(v1 + 2960);
      v16 = *(_DWORD *)(v15 + 272 * v13 + 8);
      *(_DWORD *)(v1 + 2980) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + 272 * v13 + 8) = v16 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v1 + 2960) + 272 * v13 + 8) = *(_DWORD *)(*(_QWORD *)(v1 + 2960) + 272 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v1 + 2952) + 4 * v9);
    *(_QWORD *)(*(_QWORD *)(v1 + 2960) + 272 * v13) = v6;
    *(_QWORD *)(*(_QWORD *)(v1 + 2960) + 272 * v13 + 16) = v4;
    v17 = *(_QWORD *)(v1 + 2960) + 272 * v13;
    v18 = v17;
    *(_QWORD *)(v17 + 24) = v4;
    *(_BYTE *)(v17 + 32) = HasForceAuthorityCapability;
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    *(_QWORD *)(v17 + 40) = Mutable;
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    *(_OWORD *)(v17 + 80) = 0u;
    v17 += 80;
    *(_QWORD *)(v17 - 32) = MutableBytePtr;
    *(_QWORD *)(v17 - 24) = 0;
    *(_QWORD *)(v17 - 16) = Mutable;
    *(_QWORD *)(v17 - 8) = re::NetworkSystem::LocalPeer::growFn;
    *(_OWORD *)(v17 + 16) = 0u;
    re::DynamicString::setCapacity((_QWORD *)v17, 0);
    *(_DWORD *)(v17 + 32) = 6;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 68) = 0u;
    *(_QWORD *)(v17 + 84) = 0x7FFFFFFFLL;
    *(_DWORD *)(v17 + 128) = 0;
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 112) = 0u;
    *(_QWORD *)(v17 + 132) = 0x7FFFFFFFLL;
    *(_OWORD *)(v17 + 144) = 0u;
    *(_OWORD *)(v17 + 160) = 0u;
    *(_DWORD *)(v17 + 176) = 0;
    *(_QWORD *)(v18 + 260) = 0x7FFFFFFFLL;
    *(_DWORD *)(*(_QWORD *)(v1 + 2952) + 4 * v9) = v13;
    ++*(_DWORD *)(v1 + 2972);
    ++*(_DWORD *)(v1 + 2984);
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v1 + 2960);
  while (*(_QWORD *)(v11 + 272 * v10 + 16) != v4)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 272 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_16;
  }
LABEL_22:
  v21 = re::ServiceLocator::service<re::ecs2::ECSService>(*(_QWORD *)(v1 + 2416));
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 104))(v21);
  v23 = *(_QWORD *)(v22 + 24);
  if (v23)
  {
    v24 = *(uint64_t **)(v22 + 40);
    v25 = &v24[v23];
    v26 = v1 + 2712;
    do
    {
      v27 = *v24;
      if (*v24)
        v28 = (id)(v27 + 8);
      v29 = *(_QWORD **)(v27 + 104);
      v30 = v29[25];
      if (v30)
      {
        v39 = v29[25];
        v31 = (id)(v30 + 8);
        re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v26, &v39);
        if (v39)

        v29 = *(_QWORD **)(v27 + 104);
      }
      v32 = v29[41];
      if (!v32)
        goto LABEL_39;
      v33 = (uint64_t *)v29[43];
      v34 = 8 * v32;
      do
      {
        v35 = *v33;
        if (*v33)
          v36 = (id)(v35 + 8);
        v37 = *(_QWORD *)(v35 + 200);
        if (v37)
        {
          v39 = *(_QWORD *)(v35 + 200);
          v38 = (id)(v37 + 8);
          re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v26, &v39);
          if (v39)

        }
        ++v33;
        v34 -= 8;
      }
      while (v34);
      if (v27)
LABEL_39:

      ++v24;
    }
    while (v24 != v25);
  }
}

uint64_t re::ServiceLocator::service<re::ecs2::ECSService>(uint64_t a1)
{
  uint64_t result;
  __objc2_class_ro *v2;
  __objc2_class_ro *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[16];
  _BYTE v7[9];
  _BYTE v8[23];

  result = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(a1);
  if (!result)
  {
    v2 = re::introspect<re::ecs2::ECSService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    v3 = re::introspect<re::ecs2::ECSService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if ((v7[8] & 1) != 0)
      v5 = *(_BYTE **)&v8[7];
    else
      v5 = v8;
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  re::NetworkSystemFeatureFlags *IsLocal;
  unint64_t PeerID;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 32);
  IsLocal = (re::NetworkSystemFeatureFlags *)RESyncNetSessionGetIsLocal();
  if ((_DWORD)IsLocal && re::NetworkSystemFeatureFlags::enableAltSharedApp(IsLocal))
  {
    PeerID = RESyncParticipantGetPeerID();
    if (*(_QWORD *)(v1 + 2944))
    {
      v4 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) ^ ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) >> 27));
      v5 = (v4 ^ (v4 >> 31)) % *(unsigned int *)(v1 + 2968);
      v6 = *(_QWORD *)(v1 + 2952);
      v7 = *(unsigned int *)(v6 + 4 * v5);
      if ((_DWORD)v7 != 0x7FFFFFFF)
      {
        v8 = *(_QWORD *)(v1 + 2960);
        if (*(_QWORD *)(v8 + 272 * v7 + 16) == PeerID)
        {
          *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 272 * v7 + 8) & 0x7FFFFFFF;
LABEL_10:
          v11 = *(_QWORD *)(v1 + 2960);
          v12 = v11 + 272 * v7;
          v15 = *(_DWORD *)(v12 + 8);
          v14 = (int *)(v12 + 8);
          v13 = v15;
          if (v15 < 0)
          {
            *v14 = v13 & 0x7FFFFFFF;
            re::NetworkSystem::LocalPeer::~LocalPeer((re::NetworkSystem::LocalPeer *)(v11 + 272 * v7 + 24));
            v11 = *(_QWORD *)(v1 + 2960);
            v13 = *(_DWORD *)(v11 + 272 * v7 + 8);
          }
          *(_DWORD *)(v11 + 272 * v7 + 8) = *(_DWORD *)(v1 + 2980) | v13 & 0x80000000;
          *(_DWORD *)(v1 + 2980) = v7;
          --*(_DWORD *)(v1 + 2972);
          ++*(_DWORD *)(v1 + 2984);
        }
        else
        {
          while (1)
          {
            v9 = v7;
            v10 = *(_DWORD *)(v8 + 272 * v7 + 8);
            v7 = v10 & 0x7FFFFFFF;
            if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v8 + 272 * v7 + 16) == PeerID)
            {
              *(_DWORD *)(v8 + 272 * v9 + 8) = *(_DWORD *)(v8 + 272 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 272 * v7 + 8) & 0x7FFFFFFF;
              goto LABEL_10;
            }
          }
        }
      }
    }
    v16 = re::ServiceLocator::service<re::ecs2::ECSService>(*(_QWORD *)(v1 + 2416));
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 104))(v16);
    v18 = *(_QWORD *)(v17 + 24);
    if (v18)
    {
      v19 = *(uint64_t **)(v17 + 40);
      v20 = &v19[v18];
      v21 = v1 + 2712;
      do
      {
        v22 = *v19;
        if (*v19)
          v23 = (id)(v22 + 8);
        v24 = *(_QWORD **)(v22 + 104);
        v25 = v24[25];
        if (v25)
        {
          v34 = v24[25];
          v26 = (id)(v25 + 8);
          re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v21, &v34);
          if (v34)

          v24 = *(_QWORD **)(v22 + 104);
        }
        v27 = v24[41];
        if (!v27)
          goto LABEL_30;
        v28 = (uint64_t *)v24[43];
        v29 = 8 * v27;
        do
        {
          v30 = *v28;
          if (*v28)
            v31 = (id)(v30 + 8);
          v32 = *(_QWORD *)(v30 + 200);
          if (v32)
          {
            v34 = *(_QWORD *)(v30 + 200);
            v33 = (id)(v32 + 8);
            re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v21, &v34);
            if (v34)

          }
          ++v28;
          v29 -= 8;
        }
        while (v29);
        if (v22)
LABEL_30:

        ++v19;
      }
      while (v19 != v20);
    }
  }
}

uint64_t re::ServiceLocator::service<re::ServiceRegistry>(uint64_t a1)
{
  uint64_t result;
  __objc2_class_ro *v2;
  __objc2_class_ro *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[16];
  _BYTE v7[9];
  _BYTE v8[23];

  result = re::ServiceLocator::serviceOrNull<re::ServiceRegistry>(a1);
  if (!result)
  {
    v2 = re::introspect<re::ServiceRegistry>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    v3 = re::introspect<re::ServiceRegistry>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if ((v7[8] & 1) != 0)
      v5 = *(_BYTE **)&v8[7];
    else
      v5 = v8;
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_5(uint64_t a1)
{
  re::Event<re::NetworkSystem>::raise(*(_QWORD *)(a1 + 32) + 1232, *(_QWORD *)(a1 + 32));
}

void re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_63, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          if (*(_QWORD *)(v6 + 16))
          {
            RESyncRelease();
            *(_QWORD *)(v6 + 16) = 0;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

double re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::NetworkSystem::LocalPeer::~LocalPeer((re::NetworkSystem::LocalPeer *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 272;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::NetworkSystem::initMCService(re::NetworkSystem *this)
{
  size_t Size;
  uint64_t v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  Size = RESyncMCServiceConfigGetSize();
  MEMORY[0x24BDAC7A8](Size);
  bzero((char *)v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), Size);
  RESyncMCServiceConfigCreateNoAlloc();
  RESyncMCServiceConfigSetDispatchQueue();
  RESyncMCServiceConfigSetSyncService();
  *((_QWORD *)this + 319) = RESyncMCServiceCreate();
  return RESyncMCServiceConfigDestroyNoDealloc();
}

void re::NetworkSystem::beforeFrameUpdate(re::NetworkSystem *this)
{
  uint64_t v2[2];
  _BYTE v3[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 6006, (uint64_t)this);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v2);
  re::NetworkSystem::prepareObjectStores(this);
  if (*((_QWORD *)this + 320))
  {
    RESyncServiceBeforeFrameUpdate();
    re::NetworkSystem::setAclCount = 0;
    re::NetworkSystem::resolveSelfViewCount = 0;
    re::NetworkSystem::viewFilterListCount = 0;
    re::NetworkSystem::resolveSelfViewTime = 0;
  }
  re::ProfilerTimeGuard<(re::ProfilerStatistic)16>::end((uint64_t)v2);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

uint64_t re::NetworkSystem::destroyObject(uint64_t a1)
{
  uint64_t Child;
  uint64_t v4;

  while (RESyncableGetChildCount())
  {
    Child = RESyncableGetChild();
    if (Child)
    {
      v4 = Child;
      RESyncRetain();
      re::NetworkSystem::destroyObject(a1, &v4);
      RESyncRelease();
    }
  }
  return RESyncServiceRemoveSyncable();
}

void re::NetworkSystem::afterFrameUpdate(re::NetworkSystem *this)
{
  uint64_t v2[2];
  _BYTE v3[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 6014, (uint64_t)this);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v2);
  if (*((_QWORD *)this + 320))
    RESyncServiceAfterFrameUpdate();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::ProfilerTimeGuard<(re::ProfilerStatistic)17>::end((uint64_t)v2);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

void re::NetworkSystem::prepareObjectStores(re::NetworkSystem *this)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const re::ecs2::ComponentTypeBase *v12;
  re::NetworkSystemFeatureFlags *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  BOOL v43;
  unint64_t *v44;
  unint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  int v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  unint64_t v56;
  __int16 v57;
  unint64_t v58;
  _OWORD v59[5];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v2 = re::ecs2::ComponentTypeRegistry::instance(this);
  v3 = *((_QWORD *)v2 + 3);
  if (v3 > *((_QWORD *)this + 300))
  {
    v4 = (uint64_t)v2;
    v5 = (char *)this + 2808;
    v6 = re::ecs2::ComponentTypeRegistry::operator[]((uint64_t)v2, v3 - 1);
    re::DynamicArray<double>::resize((uint64_t)this + 2808, *(unsigned __int16 *)(v6 + 16) + 1);
    v7 = *((_QWORD *)this + 300);
    if (v7 < v3)
    {
      v44 = (unint64_t *)((char *)this + 2896);
      v45 = (unint64_t *)((char *)this + 2848);
      v46 = (_QWORD *)((char *)this + 2760);
      do
      {
        v8 = (unsigned __int16 *)re::ecs2::ComponentTypeRegistry::operator[](v4, v7);
        v9 = *((_QWORD *)v8 + 3);
        v10 = v9 >> 1;
        v50[0] = v9 >> 1;
        v11 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v8 + 48))(v8);
        re::ecs2::IntrospectedNetworkTypeHelper::makeTypeInfo((const re::IntrospectionBase *)v8, v12, v11, &v47);
        if (!v47)
          goto LABEL_46;
        v13 = (re::NetworkSystemFeatureFlags *)RESyncServiceRegisterTypeInfo();
        v14 = v10 ^ (v9 >> 31);
        if (re::NetworkSystemFeatureFlags::enableAltSharedApp(v13))
        {
          if (v48)
          {
            v15 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
            v16 = v15 ^ (v15 >> 31);
            v17 = *v45;
            if (!*v45
              || (v17 = v16 % *((unsigned int *)this + 718),
                  v18 = *(unsigned int *)(*((_QWORD *)this + 357) + 4 * v17),
                  (_DWORD)v18 == 0x7FFFFFFF))
            {
LABEL_12:
              v20 = *((unsigned int *)this + 721);
              if ((_DWORD)v20 == 0x7FFFFFFF)
              {
                v20 = *((unsigned int *)this + 720);
                v21 = v20;
                if ((_DWORD)v20 == *((_DWORD *)this + 718))
                {
                  re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v45, 2 * *((_DWORD *)this + 719));
                  v17 = v16 % *((unsigned int *)this + 718);
                  v21 = *((_DWORD *)this + 720);
                }
                *((_DWORD *)this + 720) = v21 + 1;
                v22 = *((_QWORD *)this + 358);
                v23 = *(_DWORD *)(v22 + 32 * v20 + 8);
              }
              else
              {
                v22 = *((_QWORD *)this + 358);
                v23 = *(_DWORD *)(v22 + 32 * v20 + 8);
                *((_DWORD *)this + 721) = v23 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v22 + 32 * v20 + 8) = v23 | 0x80000000;
              *(_DWORD *)(*((_QWORD *)this + 358) + 32 * v20 + 8) = *(_DWORD *)(*((_QWORD *)this + 358) + 32 * v20 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 357) + 4 * v17);
              *(_QWORD *)(*((_QWORD *)this + 358) + 32 * v20) = v16;
              *(_QWORD *)(*((_QWORD *)this + 358) + 32 * v20 + 16) = v10;
              *(_QWORD *)(*((_QWORD *)this + 358) + 32 * v20 + 24) = v48;
              *(_DWORD *)(*((_QWORD *)this + 357) + 4 * v17) = v20;
              ++*((_DWORD *)this + 719);
              ++*((_DWORD *)this + 722);
              v5 = (char *)this + 2808;
            }
            else
            {
              v19 = *((_QWORD *)this + 358);
              while (*(_QWORD *)(v19 + 32 * v18 + 16) != v10)
              {
                v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v18 == 0x7FFFFFFF)
                  goto LABEL_12;
              }
            }
          }
          if (v49)
          {
            v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
            v25 = v24 ^ (v24 >> 31);
            v26 = *v44;
            if (!*v44
              || (v26 = v25 % *((unsigned int *)this + 730),
                  v27 = *(unsigned int *)(*((_QWORD *)this + 363) + 4 * v26),
                  (_DWORD)v27 == 0x7FFFFFFF))
            {
LABEL_24:
              v29 = *((unsigned int *)this + 733);
              if ((_DWORD)v29 == 0x7FFFFFFF)
              {
                v29 = *((unsigned int *)this + 732);
                v30 = v29;
                if ((_DWORD)v29 == *((_DWORD *)this + 730))
                {
                  re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v44, 2 * *((_DWORD *)this + 731));
                  v26 = v25 % *((unsigned int *)this + 730);
                  v30 = *((_DWORD *)this + 732);
                }
                *((_DWORD *)this + 732) = v30 + 1;
                v31 = *((_QWORD *)this + 364);
                v32 = *(_DWORD *)(v31 + 32 * v29 + 8);
              }
              else
              {
                v31 = *((_QWORD *)this + 364);
                v32 = *(_DWORD *)(v31 + 32 * v29 + 8);
                *((_DWORD *)this + 733) = v32 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v31 + 32 * v29 + 8) = v32 | 0x80000000;
              *(_DWORD *)(*((_QWORD *)this + 364) + 32 * v29 + 8) = *(_DWORD *)(*((_QWORD *)this + 364) + 32 * v29 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 363) + 4 * v26);
              *(_QWORD *)(*((_QWORD *)this + 364) + 32 * v29) = v25;
              *(_QWORD *)(*((_QWORD *)this + 364) + 32 * v29 + 16) = v10;
              *(_QWORD *)(*((_QWORD *)this + 364) + 32 * v29 + 24) = v49;
              *(_DWORD *)(*((_QWORD *)this + 363) + 4 * v26) = v29;
              ++*((_DWORD *)this + 731);
              ++*((_DWORD *)this + 734);
              v5 = (char *)this + 2808;
            }
            else
            {
              v28 = *((_QWORD *)this + 364);
              while (*(_QWORD *)(v28 + 32 * v27 + 16) != v10)
              {
                v27 = *(_DWORD *)(v28 + 32 * v27 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v27 == 0x7FFFFFFF)
                  goto LABEL_24;
              }
            }
          }
        }
        *(_QWORD *)&v59[0] = v8;
        v33 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
        v34 = v33 ^ (v33 >> 31);
        if (*v46)
        {
          v35 = v34 % *((unsigned int *)this + 696);
          v36 = *(unsigned int *)(*((_QWORD *)this + 346) + 4 * v35);
          if ((_DWORD)v36 != 0x7FFFFFFF)
          {
            v37 = *((_QWORD *)this + 347);
            while (*(_QWORD *)(v37 + 32 * v36 + 16) != v10)
            {
              v36 = *(_DWORD *)(v37 + 32 * v36 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v36 == 0x7FFFFFFF)
                goto LABEL_37;
            }
            goto LABEL_38;
          }
        }
        else
        {
          LODWORD(v35) = 0;
        }
LABEL_37:
        re::HashTable<unsigned long long,re::ecs2::ComponentTypeBase const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v46, v35, v34, v50, v59);
        ++*((_DWORD *)this + 700);
LABEL_38:
        re::DynamicArray<double>::resize((uint64_t)v5, v8[8] + 1);
        v39 = v8[8];
        v40 = *((_QWORD *)this + 353);
        if (v40 <= v39)
        {
          v50[1] = 0;
          memset(v59, 0, sizeof(v59));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v51 = 136315906;
          v52 = "operator[]";
          v53 = 1024;
          v54 = 789;
          v55 = 2048;
          v56 = v39;
          v57 = 2048;
          v58 = v40;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_50:
          re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) ", "(m_componentTypeByLocalId[componentType.localComponentTypeShortID()] == nullptr) || (m_componentTypeByLocalId[componentType.localComponentTypeShortID()] == &componentType)", "prepareObjectStores", 457);
          _os_crash();
          __break(1u);
        }
        v41 = *((_QWORD *)this + 355);
        v42 = *(unsigned __int16 **)(v41 + 8 * v39);
        if (v42)
          v43 = v42 == v8;
        else
          v43 = 1;
        if (!v43)
          goto LABEL_50;
        *(_QWORD *)(v41 + 8 * v39) = v8;
        if (v47)
          RESyncRelease();
LABEL_46:
        ++v7;
      }
      while (v7 != v3);
    }
    *((_QWORD *)this + 300) = v3;
  }
}

uint64_t re::NetworkSystem::entityAddedToScene(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::NetworkSystemFeatureFlags *v5;
  uint64_t result;
  uint64_t v7;

  v5 = (re::NetworkSystemFeatureFlags *)re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::remove(a1 + 2296, a3);
  result = re::NetworkSystemFeatureFlags::enableAltSharedApp(v5);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a2 + 296);
    return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 2344, &v7);
  }
  return result;
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % v2;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 4 * v6);
  if ((_DWORD)v8 == 0x7FFFFFFF)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v10 + 24 * v8 + 16) != v4)
  {
    while (1)
    {
      v11 = v8;
      v12 = *(_DWORD *)(v10 + 24 * v8 + 8);
      v8 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v10 + 24 * v8 + 16) == v4)
      {
        *(_DWORD *)(v10 + 24 * v11 + 8) = *(_DWORD *)(v10 + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
LABEL_9:
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 + 24 * v8;
  v17 = *(_DWORD *)(v14 + 8);
  v15 = (int *)(v14 + 8);
  v16 = v17;
  if (v17 < 0)
  {
    *v15 = v16 & 0x7FFFFFFF;
    v18 = v13 + 24 * v8;
    v20 = *(_QWORD *)(v18 + 16);
    v19 = (_QWORD *)(v18 + 16);
    if (v20)
    {
      RESyncRelease();
      *v19 = 0;
    }
  }
  v21 = *(_QWORD *)(a1 + 16) + 24 * v8;
  v22 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v22 + 1;
  return 1;
}

uint64_t re::NetworkSystem::entityRemovedFromScene(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::NetworkSystemFeatureFlags *v5;
  uint64_t result;
  uint64_t v7;

  v5 = (re::NetworkSystemFeatureFlags *)re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add(a1 + 2296, a3);
  result = re::NetworkSystemFeatureFlags::enableAltSharedApp(v5);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a2 + 296);
    return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 2344, &v7);
  }
  return result;
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

re::NetworkSystem::LocalPeer *re::NetworkSystem::exitingLocalPeerView(re::NetworkSystem::LocalPeer *this, re::ecs2::NetworkComponent *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)a2 + 80) & 1) != 0)
    v2 = (uint64_t *)((char *)a2 + 88);
  else
    v2 = (uint64_t *)*((_QWORD *)a2 + 12);
  v3 = *((_QWORD *)a2 + 9);
  if (v3)
  {
    v5 = (uint64_t)this + 2944;
    v6 = 8 * v3;
    do
    {
      v7 = *v2;
      this = (re::NetworkSystem::LocalPeer *)re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v5, &v7);
      if (this)
        this = (re::NetworkSystem::LocalPeer *)re::NetworkSystem::LocalPeer::exit(this, a2);
      ++v2;
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 272 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 272 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 272 * v4 + 16) == v2)
        return v6 + 272 * v4 + 24;
    }
    return 0;
  }
  return v6 + 272 * v4 + 24;
}

uint64_t re::NetworkSystem::clearRemoteDirty(re::NetworkSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if (*((_DWORD *)this + 581))
  {
    v2 = *((unsigned int *)this + 582);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = (int *)(*((_QWORD *)this + 289) + 8);
      while (1)
      {
        v5 = *v4;
        v4 += 6;
        if (v5 < 0)
          break;
        if (v2 == ++v3)
        {
          LODWORD(v3) = *((_DWORD *)this + 582);
          break;
        }
      }
    }
    else
    {
      LODWORD(v3) = 0;
    }
    while ((_DWORD)v2 != (_DWORD)v3)
    {
      re::NetworkSystem::destroyObject((uint64_t)this);
      if (*((_DWORD *)this + 582) <= (v3 + 1))
        v6 = v3 + 1;
      else
        v6 = *((_DWORD *)this + 582);
      v7 = v3;
      while (1)
      {
        v8 = v7 + 1;
        if (v6 - 1 == v7)
          break;
        ++v7;
        LODWORD(v3) = v8;
        if ((*(_DWORD *)(*((_QWORD *)this + 289) + 24 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v3) = v6;
LABEL_17:
      ;
    }
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear((uint64_t)this + 2296);
  }
  return RESyncCommitListClear();
}

re::DynamicString *re::NetworkSystem::peerIDStringForAssetSerialization@<X0>(re::NetworkSystem *this@<X0>, re::DynamicString *a2@<X8>)
{
  re::DynamicString *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t LocalPeerId;
  uint64_t v8;
  char v9;

  v3 = (re::NetworkSystem *)((char *)this + 2680);
  v4 = *((_QWORD *)this + 336);
  if ((v4 & 1) != 0)
    v5 = v4 >> 1;
  else
    v5 = v4 >> 1;
  if (!v5)
  {
    LocalPeerId = RESyncServiceGetLocalPeerId();
    if (LocalPeerId)
    {
      re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v8, LocalPeerId);
      re::DynamicString::operator=(v3, (re::DynamicString *)&v8);
      if (v8)
      {
        if ((v9 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      }
    }
  }
  return re::DynamicString::DynamicString(a2, v3);
}

uint64_t re::NetworkSystem::queueWaitForParentEntity(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  id v6;
  _QWORD *v7;
  _QWORD v9[3];
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v5 = *a3;
  v12 = v5;
  if (v5)
    v6 = (id)(v5 + 8);
  re::NetworkSystem::removeEntityFromParentWaitlist(a1, &v12);
  if (v12)
  {

    v12 = 0;
  }
  v11 = 0;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v7 = (_QWORD *)re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 2200, &v13, (uint64_t)v9);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v9);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v7, a3);
  return re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::add<unsigned long long &>(a1 + 2248, a3, &v13);
}

uint64_t *re::NetworkSystem::removeEntityFromParentWaitlist(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;

  v4 = a1 + 2248;
  result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 2248, a2);
  if (result)
  {
    v6 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 2200, result);
    re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>::remove(v6, a2);
    return (uint64_t *)re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v4, a2);
  }
  return result;
}

unint64_t re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + (v10 << 6) + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + (v10 << 6);
  return v12 + 24;
}

uint64_t re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::add<unsigned long long &>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addEmplace<unsigned long long &>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::NetworkSystem::clearWaitListForParent(re::NetworkSystem *this, uint64_t a2)
{
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v3 = (char *)this + 2200;
  result = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 2200, &v12);
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t **)(result + 32);
      v7 = (char *)this + 2248;
      v8 = 8 * v5;
      do
      {
        v9 = *v6;
        v11 = v9;
        if (v9)
          v10 = (id)(v9 + 8);
        re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove((uint64_t)v7, &v11);
        if (v11)

        ++v6;
        v8 -= 8;
      }
      while (v8);
    }
    return re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, &v12);
  }
  return result;
}

uint64_t re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 + 32 * v7;
  if (*(_QWORD *)(v10 + 16) != v3)
  {
    while (1)
    {
      v11 = v7;
      v12 = *(_DWORD *)(v9 + 32 * v7 + 8);
      v7 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      v13 = v9 + 32 * v7;
      if (*(_QWORD *)(v13 + 16) == v3)
      {
        *(_DWORD *)(v9 + 32 * v11 + 8) = *(_DWORD *)(v9 + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v10 + 8) & 0x7FFFFFFF;
LABEL_9:
  v14 = *(_QWORD *)(a1 + 16) + 32 * v7;
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 < 0)
  {
    *(_DWORD *)(v14 + 8) = v15 & 0x7FFFFFFF;
    v18 = *(_QWORD *)(v14 + 16);
    v17 = (_QWORD *)(v14 + 16);
    v16 = v18;
    if (v18)
    {

      *v17 = 0;
    }
  }
  v19 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v19 + 1;
  return 1;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int *v17;
  int v18;
  int v19;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 + (v7 << 6);
  if (*(_QWORD *)(v10 + 16) != v3)
  {
    while (1)
    {
      v11 = v7;
      v12 = *(_DWORD *)(v9 + (v7 << 6) + 8);
      v7 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      v13 = v9 + (v7 << 6);
      if (*(_QWORD *)(v13 + 16) == v3)
      {
        *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) = *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v10 + 8) & 0x7FFFFFFF;
LABEL_9:
  v14 = *(_QWORD *)(a1 + 16);
  v15 = v14 + (v7 << 6);
  v18 = *(_DWORD *)(v15 + 8);
  v17 = (int *)(v15 + 8);
  v16 = v18;
  if (v18 < 0)
  {
    *v17 = v16 & 0x7FFFFFFF;
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v14 + (v7 << 6) + 24);
    v14 = *(_QWORD *)(a1 + 16);
    v16 = *(_DWORD *)(v14 + (v7 << 6) + 8);
  }
  v19 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v14 + (v7 << 6) + 8) = *(_DWORD *)(a1 + 36) | v16 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v19 + 1;
  return 1;
}

BOOL re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>::remove(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 8 * v3;
    v5 = *(_QWORD **)(a1 + 32);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 32);
  }
  v6 = (uint64_t)v5 - v2;
  v7 = v6 >> 3;
  if (v6 >> 3 != v3)
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::removeAt(a1, v6 >> 3);
  return v7 != v3;
}

uint64_t re::NetworkSystem::registerLocalSessionForAssetSync(uint64_t a1, uint64_t a2)
{
  RESyncRetain();
  *(_QWORD *)(a1 + 2440) = a2;
  RESyncNetSessionAddObserver();
  RESyncNetSessionSetIsLocal();
  return RESyncNetSessionAddObserver();
}

uint64_t re::NetworkSystem::unRegisterLocalSessionForAssetSync(re::NetworkSystem *this)
{
  uint64_t result;

  RESyncNetSessionRemoveObserver();
  RESyncNetSessionRemoveObserver();
  result = RESyncRelease();
  *((_QWORD *)this + 305) = 0;
  return result;
}

uint64_t re::NetworkSystem::useOPACK(re::NetworkSystem *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;

  v2 = (unsigned __int8 *)&unk_255828000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255828000;
    if (v4)
    {
      re::NetworkSystem::useOPACK(void)::useOPACK = re::NetworkSystem::useOPACK(void)::$_0::operator()();
      v2 = (_BYTE *)&unk_255828000;
    }
  }
  return v2[2272];
}

re *re::NetworkSystem::useOPACK(void)::$_0::operator()()
{
  re *v0;
  NSObject *v1;
  const char *v2;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v0 = (re *)_os_feature_enabled_impl();
  v1 = *re::ecsNetworkLogObjects(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = "binary format";
    if ((_DWORD)v0)
      v2 = "OPACK format";
    v4 = 136446210;
    v5 = v2;
    _os_log_impl(&dword_224FE9000, v1, OS_LOG_TYPE_DEFAULT, "Using %{public}s for network serialization.", (uint8_t *)&v4, 0xCu);
  }
  return v0;
}

uint64_t re::NetworkSystem::encodeComponent(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  re *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  re *v25;
  uint64_t v26;
  char *v27;
  uint8_t v29[24];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = (re *)(*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3);
  if (!*(_QWORD *)(a1 + 2848)
    || (v7 = *((_QWORD *)v6 + 3),
        v8 = v7 >> 1,
        v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * ((v7 >> 1) ^ (v7 >> 31))) ^ ((0xBF58476D1CE4E5B9 * ((v7 >> 1) ^ (v7 >> 31))) >> 27)),
        v10 = *(unsigned int *)(*(_QWORD *)(a1 + 2856) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(a1 + 2872))),
        (_DWORD)v10 == 0x7FFFFFFF))
  {
LABEL_3:
    v11 = *re::ecsNetworkLogObjects(v6);
    v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3) + 32);
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)&v29[4] = v13;
      _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_INFO, "No encoder for %s, skipping", v29, 0xCu);
    }
    return v12;
  }
  v14 = *(_QWORD *)(a1 + 2864);
  while (*(_QWORD *)(v14 + 32 * v10 + 16) != v8)
  {
    v10 = *(_DWORD *)(v14 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_3;
  }
  v15 = v14 + 32 * v10;
  v16 = a2[2];
  *(_QWORD *)v29 = 0;
  re::snapshot::Encoder::writeRaw<true>(a2, v29, 8uLL);
  v17 = a2[2];
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)(v15 + 24) + 16))();
  v18 = a2[2];
  a2[2] = v16;
  *(_QWORD *)v29 = v18 - v17;
  re::snapshot::Encoder::writeRaw<true>(a2, v29, 8uLL);
  a2[2] = v18;
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3);
    re::packCharArrayToUInt64ForAriadne(*(re **)(v19 + 32), 0);
    kdebug_trace();
  }
  if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    v20 = a3[2];
    v21 = *(_QWORD *)(v20 + 200);
    if (v21)
    {
      v22 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v20 + 200));
      if (v22)
      {
        v23 = v22;
        v24 = *(_BYTE *)(v21 + 560) ? "Remote" : "Local";
        v25 = (re *)(*(_BYTE *)(v21 + 560) == 1 ? "Shared" : v24);
        re::packCharArrayToUInt64ForAriadne(v25, 0);
        if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
        {
          v26 = (*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3);
          re::packCharArrayToUInt64ForAriadne(*(re **)(v26 + 32), 0);
          if (v23 == 1)
            v27 = "Local";
          else
            v27 = "Remote";
          re::packCharArrayToUInt64ForAriadne((re *)v27, 0);
          kdebug_trace();
        }
      }
    }
  }
  return v12;
}

uint64_t re::NetworkSystem::decodeComponent(uint64_t a1, re::snapshot::Decoder *this, _QWORD *a3)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  re *v25;
  uint64_t v26;
  char *v27;

  v4 = (uint64_t *)*((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  if (v5 <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
    return 1;
  }
  else
  {
    v9 = *v4;
    v7 = v4 + 1;
    v8 = v9;
    *((_QWORD *)this + 2) = v7;
    if (!a3)
    {
      v16 = 0;
      goto LABEL_8;
    }
    v11 = (*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3);
    if (!*(_QWORD *)(a1 + 2896)
      || (v12 = *(_QWORD *)(v11 + 24),
          v13 = v12 >> 1,
          v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * ((v12 >> 1) ^ (v12 >> 31))) ^ ((0xBF58476D1CE4E5B9
                                                                       * ((v12 >> 1) ^ (v12 >> 31))) >> 27)),
          v15 = *(unsigned int *)(*(_QWORD *)(a1 + 2904) + 4 * ((v14 ^ (v14 >> 31)) % *(unsigned int *)(a1 + 2920))),
          (_DWORD)v15 == 0x7FFFFFFF))
    {
LABEL_5:
      v16 = 0;
      v7 = (_QWORD *)*((_QWORD *)this + 2);
LABEL_8:
      *((_QWORD *)this + 2) = (char *)v7 + v8;
      return v16;
    }
    v18 = *(_QWORD *)(a1 + 2912);
    while (*(_QWORD *)(v18 + 32 * v15 + 16) != v13)
    {
      v15 = *(_DWORD *)(v18 + 32 * v15 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v15 == 0x7FFFFFFF)
        goto LABEL_5;
    }
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)(v18 + 32 * v15 + 24) + 16))();
    *((_QWORD *)this + 2) += v8;
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    {
      v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3);
      re::packCharArrayToUInt64ForAriadne(*(re **)(v19 + 32), 0);
      kdebug_trace();
    }
    if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
    {
      v20 = a3[2];
      v21 = *(_QWORD *)(v20 + 200);
      if (v21)
      {
        v22 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v20 + 200));
        if (v22)
        {
          v23 = v22;
          v24 = *(_BYTE *)(v21 + 560) ? "Remote" : "Local";
          v25 = (re *)(*(_BYTE *)(v21 + 560) == 1 ? "Shared" : v24);
          re::packCharArrayToUInt64ForAriadne(v25, 0);
          if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
          {
            v26 = (*(uint64_t (**)(_QWORD *))(*a3 + 40))(a3);
            re::packCharArrayToUInt64ForAriadne(*(re **)(v26 + 32), 0);
            if (v23 == 1)
              v27 = "Local";
            else
              v27 = "Remote";
            re::packCharArrayToUInt64ForAriadne((re *)v27, 0);
            kdebug_trace();
          }
        }
      }
    }
  }
  return v16;
}

void re::NetworkSystem::resolveDeferedViews(re::NetworkSystem *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unsigned int v44;
  uint64_t v45;

  v2 = (char *)this + 2712;
  while (*((_DWORD *)this + 685))
  {
    v3 = *((unsigned int *)this + 686);
    v4 = *((_QWORD *)this + 341);
    v5 = 0;
    if ((_DWORD)v3)
    {
      v6 = (int *)(v4 + 8);
      while (1)
      {
        v7 = *v6;
        v6 += 6;
        if (v7 < 0)
          break;
        if (v3 == ++v5)
        {
          LODWORD(v5) = *((_DWORD *)this + 686);
          break;
        }
      }
    }
    v8 = v4 + 24 * v5;
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 16);
      do
      {
        v11 = *(_QWORD *)(v9 + 16);
        if (!v11)
          break;
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12 || (*(_BYTE *)(v12 + 288) & 0x80) != 0)
          break;
        v9 = *(_QWORD *)(v12 + 200);
        *(_QWORD *)&v42 = v9;
        if (v9)
          v13 = (id)(v9 + 8);
        v14 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v2, (uint64_t *)&v42);
        if ((_QWORD)v42)

        if (v14)
          v10 = v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }
    re::ecs2::NetworkComponent::resolveViews(v10, (uint64_t)v2);
  }
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)v2);
  v15 = *((unsigned int *)this + 744);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = (_DWORD *)(*((_QWORD *)this + 370) + 8);
    while ((*v17 & 0x80000000) == 0)
    {
      v17 += 68;
      if (v15 == ++v16)
      {
        LODWORD(v16) = *((_DWORD *)this + 744);
        break;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if ((_DWORD)v15 != (_DWORD)v16)
  {
    v18 = v16;
    do
    {
      v19 = *((_QWORD *)this + 370);
      v44 = 0;
      v42 = 0u;
      v43 = 0u;
      v45 = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)&v42);
      v20 = *((unsigned int *)this + 594);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = (int *)(*((_QWORD *)this + 295) + 8);
        while (1)
        {
          v23 = *v22;
          v22 += 6;
          if (v23 < 0)
            break;
          if (v20 == ++v21)
          {
            LODWORD(v21) = *((_DWORD *)this + 594);
            break;
          }
        }
      }
      else
      {
        LODWORD(v21) = 0;
      }
      v24 = v19 + 272 * v18 + 224;
      if ((_DWORD)v20 != (_DWORD)v21)
      {
        v25 = v21;
        v26 = *((_QWORD *)this + 295);
        do
        {
          if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v19 + 272 * v18 + 224, (uint64_t *)(v26 + 24 * v25 + 16)))
          {
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)&v42, (uint64_t *)(*((_QWORD *)this + 295) + 24 * v25 + 16));
          }
          v27 = *((_DWORD *)this + 594);
          v26 = *((_QWORD *)this + 295);
          if (v27 <= (int)v21 + 1)
            v28 = v21 + 1;
          else
            v28 = *((_DWORD *)this + 594);
          while (1)
          {
            v25 = (v21 + 1);
            if (v28 - 1 == (_DWORD)v21)
              break;
            LODWORD(v21) = v21 + 1;
            v29 = v25;
            if ((*(_DWORD *)(v26 + 24 * v25 + 8) & 0x80000000) != 0)
              goto LABEL_47;
          }
          v29 = v28;
LABEL_47:
          LODWORD(v21) = v29;
        }
        while (v27 != v29);
      }
      v30 = v44;
      if (v44)
      {
        v31 = 0;
        v32 = (int *)(v43 + 8);
        while (1)
        {
          v33 = *v32;
          v32 += 6;
          if (v33 < 0)
            break;
          if (v44 == ++v31)
          {
            LODWORD(v31) = v44;
            break;
          }
        }
      }
      else
      {
        LODWORD(v31) = 0;
      }
      if (v44 != (_DWORD)v31)
      {
        v34 = v31;
        v35 = v19 + 272 * v18 + 176;
        v36 = v43;
        do
        {
          v41 = 0;
          v41 = *(_QWORD *)(v36 + 24 * v34 + 16);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v35, &v41);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v24, &v41);
          v36 = v43;
          if (v44 <= (int)v31 + 1)
            v37 = v31 + 1;
          else
            v37 = v44;
          v38 = v31;
          while (1)
          {
            v34 = (v38 + 1);
            if (v37 - 1 == v38)
              break;
            ++v38;
            LODWORD(v31) = v34;
            if ((*(_DWORD *)(v43 + 24 * v34 + 8) & 0x80000000) != 0)
              goto LABEL_64;
          }
          LODWORD(v31) = v37;
LABEL_64:
          ;
        }
        while (v30 != (_DWORD)v31);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v42);
      v39 = *((_DWORD *)this + 744);
      if (v39 <= (int)v16 + 1)
        v39 = v16 + 1;
      while (1)
      {
        v18 = (v16 + 1);
        if (v39 - 1 == (_DWORD)v16)
          break;
        LODWORD(v16) = v16 + 1;
        v40 = v18;
        if ((*(_DWORD *)(*((_QWORD *)this + 370) + 272 * v18 + 8) & 0x80000000) != 0)
          goto LABEL_71;
      }
      v40 = v39;
LABEL_71:
      LODWORD(v16) = v40;
    }
    while ((_DWORD)v15 != v40);
  }
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 2344);
}

void ___ZN2re8internal27NetworkSystemAssetMessagingC2EPNS_13NetworkSystemE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[16];

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  if (v5)
  {
    v8 = a4;
    *(_QWORD *)buf = a3;
    v7 = a5;
    (*(void (**)(uint64_t, uint8_t *, uint64_t *, int *))(*(_QWORD *)v5 + 48))(v5, buf, &v8, &v7);
  }
  else
  {
    v6 = *re::ecsNetworkLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEBUG, "Missing receive message handler.", buf, 2u);
    }
  }
}

void ___ZN2re8internal27NetworkSystemAssetMessagingC2EPNS_13NetworkSystemE_block_invoke_2(re *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  re::internal::NetworkSystemAssetMessaging *v4;
  uint8_t v5[8];
  uint64_t PeerID;

  v1 = *((_QWORD *)a1 + 4);
  if (*(_QWORD *)(v1 + 72))
  {
    PeerID = RESyncParticipantGetPeerID();
    v2 = *(_QWORD *)(v1 + 72);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &PeerID);
    }
    else
    {
      v4 = (re::internal::NetworkSystemAssetMessaging *)std::__throw_bad_function_call[abi:nn180100]();
      re::internal::NetworkSystemAssetMessaging::~NetworkSystemAssetMessaging(v4);
    }
  }
  else
  {
    v3 = *re::ecsNetworkLogObjects(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v5 = 0;
      _os_log_debug_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEBUG, "Missing peer left handler.", v5, 2u);
    }
  }
}

void re::internal::NetworkSystemAssetMessaging::~NetworkSystemAssetMessaging(re::internal::NetworkSystemAssetMessaging *this)
{
  re::internal::NetworkSystemAssetMessaging *v2;
  uint64_t v3;
  re::internal::NetworkSystemAssetMessaging *v4;
  uint64_t v5;

  RESyncRelease();
  v2 = (re::internal::NetworkSystemAssetMessaging *)*((_QWORD *)this + 9);
  if (v2 == (re::internal::NetworkSystemAssetMessaging *)((char *)this + 48))
  {
    v3 = 4;
    v2 = (re::internal::NetworkSystemAssetMessaging *)((char *)this + 48);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (re::internal::NetworkSystemAssetMessaging *)*((_QWORD *)this + 5);
  if (v4 == (re::internal::NetworkSystemAssetMessaging *)((char *)this + 16))
  {
    v5 = 4;
    v4 = (re::internal::NetworkSystemAssetMessaging *)((char *)this + 16);
  }
  else
  {
    if (!v4)
      return;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
}

{
  re::internal::NetworkSystemAssetMessaging::~NetworkSystemAssetMessaging(this);
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::internal::NetworkSystemAssetMessaging::networkPeerString@<X0>(re::NetworkSystem **this@<X0>, re::DynamicString *a2@<X8>)
{
  return re::NetworkSystem::peerIDStringForAssetSerialization(this[1], a2);
}

uint64_t re::internal::NetworkSystemAssetMessaging::networkPeer(re::internal::NetworkSystemAssetMessaging *this)
{
  return RESyncServiceGetLocalPeerId();
}

BOOL re::internal::NetworkSystemAssetMessaging::sendMessage(re::internal::NetworkSystemAssetMessaging *this, unint64_t a2, const void *a3)
{
  re::internal::NetworkSystemAssetMessaging *v3;
  _QWORD *v4;
  _BOOL8 result;
  NSObject *v6;
  uint8_t v7[16];

  v3 = this;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4[303])
  {
    this = (re::internal::NetworkSystemAssetMessaging *)RESyncNetSessionIsActive();
    if ((this & 1) != 0)
      goto LABEL_9;
    v4 = (_QWORD *)*((_QWORD *)v3 + 1);
  }
  if (v4[304])
  {
    this = (re::internal::NetworkSystemAssetMessaging *)RESyncNetSessionIsActive();
    if ((this & 1) == 0)
    {
      v4 = (_QWORD *)*((_QWORD *)v3 + 1);
      goto LABEL_7;
    }
LABEL_9:
    RESyncNetSessionSendData();
    return 1;
  }
LABEL_7:
  if (v4[305])
  {
    this = (re::internal::NetworkSystemAssetMessaging *)RESyncNetSessionIsActive();
    if ((this & 1) != 0)
      goto LABEL_9;
  }
  v6 = *re::ecsNetworkLogObjects(this);
  result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_WORD *)v7 = 0;
    _os_log_debug_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEBUG, "Failed to send message (no session available)", v7, 2u);
    return 0;
  }
  return result;
}

_QWORD *re::internal::NetworkSystemAssetMessaging::setReceiveMessageHandler(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(a1 + 16);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != v3)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 40);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
        *(_QWORD *)(a1 + 40) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 16) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 40) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *re::internal::NetworkSystemAssetMessaging::setPeerLeftHandler(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(a1 + 48);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != v3)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 72);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
        *(_QWORD *)(a1 + 72) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 72);
      }
      *(_QWORD *)(a1 + 72) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 48) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
      *(_QWORD *)(a1 + 72) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t *re::allocInfo_NetworkSystem(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_336);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_336))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541161F8, 0);
    *(uint64_t *)((char *)&qword_254116208 + 6) = 0;
    qword_254116208 = 0;
    qword_254116218 = 0;
    qword_254116220 = 0xFFFFFFFFLL;
    qword_2541161F8 = (uint64_t)&off_24ED7DAA8;
    qword_254116228 = (uint64_t)"NetworkSystem";
    dword_254116230 = 0;
    unk_254116238 = 0u;
    unk_254116248 = 0u;
    unk_254116258 = 0u;
    qword_254116268 = 0;
    __cxa_guard_release(&_MergedGlobals_336);
  }
  return &qword_2541161F8;
}

void re::initInfo_NetworkSystem(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xF3320DE1EEEA1BBALL;
  v5[1] = "NetworkSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xBB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_NetworkSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::NetworkSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::NetworkSystem>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::NetworkSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::NetworkSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::NetworkSystem *re::internal::defaultConstruct<re::NetworkSystem>(int a1, int a2, re::NetworkSystem *this)
{
  return re::NetworkSystem::NetworkSystem(this);
}

void re::internal::defaultDestruct<re::NetworkSystem>(int a1, int a2, re::NetworkSystem *this)
{
  re::NetworkSystem::~NetworkSystem(this);
}

uint64_t re::introspect_NetworkSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkSystem", (uint64_t (*)(re::internal *))re::allocInfo_NetworkSystem, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkSystem>, this);
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  v12 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v12 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), v11, v11);
          v11 += 24;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_63, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result[1])
  {
    v1 = result;
    if (!result[2])
    {
      v2 = *result;
      if (*v1)
      {
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, v1[4]);
        v1[4] = 0;
        v1[1] = 0;
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity(v1);
        ++*((_DWORD *)v1 + 6);
      }
    }
  }
  return result;
}

void re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 272 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_63, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  signed int v27;
  _BYTE v28[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v28;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)v28 = v5;
      *(_QWORD *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        v10 = 0;
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = 272 * v8;
        do
        {
          v14 = (unint64_t *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            v15 = *v14;
            v16 = *(unsigned int *)(a1 + 24);
            v17 = *v14 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 272 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 272 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 272 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 272 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 272 * v18 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 272 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 272 * v18 + 16) = v14[2];
            v22 = *(_QWORD *)(a1 + 16) + 272 * v18;
            v23 = v22;
            *(_QWORD *)(v22 + 24) = v14[3];
            v24 = v6 + v10;
            *(_BYTE *)(v22 + 32) = *(_BYTE *)(v6 + v10 + 32);
            *(_QWORD *)(v22 + 40) = *(_QWORD *)(v6 + v10 + 40);
            re::snapshot::Encoder::Encoder(v22 + 48, v6 + v10 + 48);
            *(_DWORD *)(v22 + 160) = 0;
            *(_OWORD *)(v22 + 128) = 0u;
            *(_OWORD *)(v22 + 144) = 0u;
            *(_QWORD *)(v22 + 164) = 0x7FFFFFFFLL;
            *(_QWORD *)(v22 + 128) = *(_QWORD *)(v6 + v10 + 128);
            *(_QWORD *)(v24 + 128) = 0;
            v25 = *(_QWORD *)(v22 + 136);
            *(_QWORD *)(v22 + 136) = *(_QWORD *)(v6 + v10 + 136);
            *(_QWORD *)(v24 + 136) = v25;
            v26 = *(_QWORD *)(v22 + 144);
            *(_QWORD *)(v22 + 144) = *(_QWORD *)(v6 + v10 + 144);
            *(_QWORD *)(v24 + 144) = v26;
            LODWORD(v26) = *(_DWORD *)(v22 + 152);
            *(_DWORD *)(v22 + 152) = *(_DWORD *)(v6 + v10 + 152);
            *(_DWORD *)(v24 + 152) = v26;
            LODWORD(v26) = *(_DWORD *)(v22 + 156);
            *(_DWORD *)(v22 + 156) = *(_DWORD *)(v6 + v10 + 156);
            *(_DWORD *)(v24 + 156) = v26;
            LODWORD(v26) = *(_DWORD *)(v22 + 160);
            *(_DWORD *)(v22 + 160) = *(_DWORD *)(v6 + v10 + 160);
            *(_DWORD *)(v24 + 160) = v26;
            LODWORD(v26) = *(_DWORD *)(v22 + 164);
            *(_DWORD *)(v22 + 164) = *(_DWORD *)(v6 + v10 + 164);
            *(_DWORD *)(v24 + 164) = v26;
            *(_DWORD *)(v22 + 208) = 0;
            *(_OWORD *)(v22 + 192) = 0u;
            *(_OWORD *)(v22 + 176) = 0u;
            *(_QWORD *)(v22 + 212) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v22 + 176), (uint64_t *)(v6 + v10 + 176));
            *(_OWORD *)(v22 + 224) = 0u;
            v22 += 224;
            *(_DWORD *)(v22 + 32) = 0;
            *(_OWORD *)(v22 + 16) = 0u;
            *(_QWORD *)(v23 + 260) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v22, (uint64_t *)(v6 + v10 + 224));
            *(_QWORD *)(v24 + 40) = 0;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v17) = v18;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v10 += 272;
        }
        while (v13 != v10);
      }
      re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2)
      v27 = a2;
    else
      v27 = 3;
  }
}

__objc2_class_ro *re::introspect<re::ecs2::ECSService>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[299];
}

uint64_t re::ServiceLocator::serviceOrNull<re::ServiceRegistry>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ServiceRegistry>(void)::info = re::introspect_ServiceRegistry(0);
  }
  v3 = re::introspect<re::ServiceRegistry>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

__objc2_class_ro *re::introspect<re::ServiceRegistry>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::ServiceRegistry>(void)::info = re::introspect_ServiceRegistry(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[511];
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)16>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[68].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[68].i64[0] = v5;
      v6 = v3[68].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[68].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[69] = vaddq_s64(v3[69], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)17>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[72].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[72].i64[0] = v5;
      v6 = v3[72].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[72].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[73] = vaddq_s64(v3[73], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *v13;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_63, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::ecs2::ComponentTypeBase const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _BYTE v25[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v13, v12);
          v15 = *(_OWORD *)v25;
          *(_OWORD *)v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v25[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v25[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::ecs2::ComponentTypeBase const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x2276932D4]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x24BEDB4B0]);
  return this;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__owns_one_state<char> *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::__owns_one_state<char> *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24ED6FAF0;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24ED6FB48;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 <= 0x3F)
  {
    if (!v13)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    if (v13 == 16)
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_54;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
  }
  switch(v13)
  {
    case 0x40u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    case 0x80u:
      v17 = (char *)memchr(a2, 10, a3 - a2);
      if (v17)
        v18 = v17;
      else
        v18 = a3;
      if (v18 == a2)
      {
        v28 = (_QWORD *)operator new();
        v29 = *(_QWORD *)(a1 + 56);
        v30 = *(_QWORD *)(v29 + 8);
        v28[1] = v30;
        *(_QWORD *)(v29 + 8) = v28;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, v18);
      }
      if (v18 != a3)
        ++v18;
      while (v18 != a3)
      {
        v31 = (char *)memchr(v18, 10, a3 - v18);
        if (v31)
          v32 = v31;
        else
          v32 = a3;
        v33 = *(std::__owns_one_state<char> **)(a1 + 56);
        if (v32 == v18)
        {
          v34 = (_QWORD *)operator new();
          v35 = *(_QWORD *)(a1 + 56);
          v36 = *(_QWORD *)(v35 + 8);
          v34[1] = v36;
          *(_QWORD *)(v35 + 8) = v34;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v18, v32);
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v12, v33);
        if (v32 == a3)
          v18 = v32;
        else
          v18 = v32 + 1;
      }
      return a3;
    case 0x100u:
      v14 = (char *)memchr(a2, 10, a3 - a2);
      if (v14)
        v15 = v14;
      else
        v15 = a3;
      if (v15 == a2)
      {
        v19 = (_QWORD *)operator new();
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        v19[1] = v21;
        *(_QWORD *)(v20 + 8) = v19;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v15);
      }
      if (v15 != a3)
        ++v15;
      while (v15 != a3)
      {
        v22 = (char *)memchr(v15, 10, a3 - v15);
        if (v22)
          v23 = v22;
        else
          v23 = a3;
        v24 = *(std::__owns_one_state<char> **)(a1 + 56);
        if (v23 == v15)
        {
          v25 = (_QWORD *)operator new();
          v26 = *(_QWORD *)(a1 + 56);
          v27 = *(_QWORD *)(v26 + 8);
          v25[1] = v27;
          *(_QWORD *)(v26 + 8) = v25;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v15, v23);
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v12, v24);
        if (v23 == a3)
          v15 = v23;
        else
          v15 = v23 + 1;
      }
      return a3;
  }
LABEL_54:
  std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return (char *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
}

uint64_t std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>()
{
  std::__libcpp_verbose_abort("regex_error was thrown in -fno-exceptions mode");
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>();
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  char *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  char *v13;
  char *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != a3)
  {
    if (*v8 != 124)
      return v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_24ED6FC68;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 == v4)
    return (uint64_t)v4;
  do
  {
    v10 = v3;
    v3 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
  }
  while (v3 != v10);
  if (v10 == v4)
    return (uint64_t)v4;
  if (v10 + 1 == v4 && *v10 == 36)
  {
    v11 = operator new();
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v11 = &off_24ED6FCB0;
    *(_QWORD *)(v11 + 8) = v14;
    *(_BYTE *)(v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return (uint64_t)v4;
  }
  v16 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(v16);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  char *v7;
  char *v8;
  std::__owns_one_state<char> *v9;
  char *v10;

  v3 = a3;
  end = a1->__end_;
  std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == a2)
  {
LABEL_9:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    JUMPOUT(0x22582EA28);
  }
  v8 = v7;
  while (v8 != v3)
  {
    if (*v8 != 124)
      return v8;
    v9 = a1->__end_;
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x2276933B8);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x2276933B8);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_24ED70130;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_24ED70178;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::basic_regex<char> *marked_count;
  int v7;
  int v8;
  char *v9;
  BOOL v10;
  char *v11;
  int v13;
  char *v14;
  unsigned int v15;
  std::basic_regex<char> *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v22)();
  int v23;
  BOOL v24;
  std::__owns_one_state<char> *v25;
  unsigned int v26;
  int *p_open_count;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int locale_low;
  unsigned int v34;
  std::__node<char> *v35;
  std::__owns_one_state<char> *v36;
  std::__node<char> *v37;
  unsigned int v38;
  char *v39;
  size_t v40;
  size_t v41;
  uint64_t v42;
  void (__cdecl ***v43)(std::__owns_one_state<char> *__hidden);
  void (__cdecl ***v44)(std::__owns_one_state<char> *__hidden);
  std::__owns_one_state<char> *v45;
  int v46;
  std::basic_regex<char> *v47;
  BOOL v48;
  std::basic_regex<char> *v49;
  BOOL v50;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v52;
  std::basic_regex<char> *v53;
  BOOL v54;
  std::__bracket_expression<char, std::regex_traits<char>> *v55;
  std::basic_regex<char> *v56;
  std::basic_regex<char> v57;

  if (a2 == a3)
    return;
  v7 = *a2;
  v8 = *a2;
  if (v7 > 91)
  {
    if (v7 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_31;
      v23 = a2[1];
      if (v23 == 66)
      {
        v24 = 1;
      }
      else
      {
        if (v23 != 98)
          goto LABEL_31;
        v24 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v24);
      return;
    }
    if (v7 != 94)
      goto LABEL_31;
    v18 = operator new();
    v19 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v22 = &off_24ED6FC68;
LABEL_19:
    *(_QWORD *)v18 = v22;
    *(_QWORD *)(v18 + 8) = first;
    *(_BYTE *)(v18 + 16) = v19;
    end->__first_ = (std::__node<char> *)v18;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    return;
  }
  if (v7 == 36)
  {
    v18 = operator new();
    v19 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v22 = &off_24ED6FCB0;
    goto LABEL_19;
  }
  v10 = v7 == 40;
  v9 = a2 + 1;
  v10 = !v10 || v9 == a3;
  if (!v10)
  {
    v10 = *v9 == 63;
    v11 = a2 + 2;
    if (v10 && v11 != a3)
    {
      v13 = *v11;
      if (v13 == 33)
      {
        std::regex_traits<char>::regex_traits(&v57.__traits_);
        memset(&v57.__flags_, 0, 40);
        v57.__flags_ = a1->__flags_;
        v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v57, a2 + 3, a3);
        marked_count = (std::basic_regex<char> *)v57.__marked_count_;
        v15 = a1->__marked_count_;
        v16 = a1;
        v17 = 1;
      }
      else
      {
        if (v13 != 61)
          goto LABEL_31;
        std::regex_traits<char>::regex_traits(&v57.__traits_);
        memset(&v57.__flags_, 0, 40);
        v57.__flags_ = a1->__flags_;
        v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v57, a2 + 3, a3);
        marked_count = (std::basic_regex<char> *)v57.__marked_count_;
        v15 = a1->__marked_count_;
        v16 = a1;
        v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(v16, &v57, v17, v15);
      a1->__marked_count_ += marked_count;
      if (v14 == a3 || *v14 != 41)
        goto LABEL_97;
      std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&v57.__start_);
      std::locale::~locale(&v57.__traits_.__loc_);
      if (v14 + 1 != a2)
        return;
      v8 = *a2;
    }
  }
LABEL_31:
  v25 = a1->__end_;
  v26 = a1->__marked_count_;
  if ((char)v8 <= 91)
  {
    switch((char)v8)
    {
      case '$':
      case ')':
        return;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_58;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_97;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v28 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
          if (v28 == a3 || (v29 = v28, *v28 != 41))
          {
LABEL_97:
            std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
            goto LABEL_98;
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
          v38 = a1->__marked_count_;
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v39 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 1, a3);
          if (v39 == a3)
            goto LABEL_97;
          v29 = v39;
          if (*v39 != 41)
            goto LABEL_97;
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v38);
        }
        --*p_open_count;
        v32 = v29 + 1;
        goto LABEL_55;
      case '*':
      case '+':
        goto LABEL_63;
      case '.':
        v35 = (std::__node<char> *)operator new();
        v36 = a1->__end_;
        v37 = v36->__first_;
        v35->__vftable = (std::__node<char>_vtbl *)&off_24ED6FD88;
        v35[1].__vftable = (std::__node<char>_vtbl *)v37;
        v36->__first_ = v35;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_59;
      default:
        if ((char)v8 == 91)
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, a2, a3);
          v32 = v31;
          goto LABEL_55;
        }
        if ((char)v8 != 63)
          goto LABEL_58;
        goto LABEL_63;
    }
  }
  v30 = ((char)v8 - 92);
  if (v30 > 0x21)
    goto LABEL_58;
  if (((1 << (v8 - 92)) & 0x300000006) != 0)
    return;
  if ((char)v8 != 92)
  {
    if (v30 == 31)
    {
LABEL_63:
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
      goto LABEL_64;
    }
LABEL_58:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
LABEL_59:
    v32 = a2 + 1;
    goto LABEL_60;
  }
  if (v8 != 92)
    return;
  marked_count = (std::basic_regex<char> *)(a2 + 1);
  if (a2 + 1 == a3)
  {
LABEL_99:
    v42 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    goto LABEL_61;
  }
  locale_low = LOBYTE(marked_count->__traits_.__loc_.__locale_);
  v34 = locale_low - 48;
  if (locale_low == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v34);
LABEL_93:
    v32 = a2 + 2;
    goto LABEL_60;
  }
LABEL_64:
  if ((locale_low - 49) > 8)
    goto LABEL_76;
  v32 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v32 = a3;
  }
  else
  {
    while (1)
    {
      v46 = *v32;
      if ((v46 - 48) > 9)
        break;
      if (v34 >= 0x19999999)
        goto LABEL_98;
      ++v32;
      v34 = v46 + 10 * v34 - 48;
      if (v32 == a3)
      {
        v32 = a3;
        break;
      }
    }
    if (!v34)
      goto LABEL_98;
  }
  if (v34 > v26)
  {
LABEL_98:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    goto LABEL_99;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v34);
  if (v32 == (char *)marked_count)
  {
    LOBYTE(locale_low) = marked_count->__traits_.__loc_.__locale_;
LABEL_76:
    if ((char)locale_low > 99)
    {
      if ((char)locale_low == 119)
      {
        v47 = a1;
        v48 = 0;
        goto LABEL_89;
      }
      if ((char)locale_low == 115)
      {
        v53 = a1;
        v54 = 0;
LABEL_91:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v53, v54);
        v52 = started->__mask_ | 0x4000;
        goto LABEL_92;
      }
      if ((char)locale_low != 100)
      {
LABEL_94:
        std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, marked_count, (std::basic_regex<char> *)a3, 0);
        if (v56 == marked_count)
          v32 = a2;
        else
          v32 = (char *)v56;
        goto LABEL_55;
      }
      v49 = a1;
      v50 = 0;
    }
    else
    {
      if ((char)locale_low != 68)
      {
        if ((char)locale_low != 83)
        {
          if ((char)locale_low == 87)
          {
            v47 = a1;
            v48 = 1;
LABEL_89:
            v55 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v47, v48);
            v55->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100]((uint64_t)v55, 95);
            goto LABEL_93;
          }
          goto LABEL_94;
        }
        v53 = a1;
        v54 = 1;
        goto LABEL_91;
      }
      v49 = a1;
      v50 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
    v52 = started->__mask_ | 0x400;
LABEL_92:
    started->__mask_ = v52;
    goto LABEL_93;
  }
LABEL_55:
  if (v32 != a2)
  {
LABEL_60:
    v40 = v26 + 1;
    v41 = a1->__marked_count_ + 1;
    v42 = (uint64_t)a1;
    v43 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v32;
    v44 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3;
    v45 = v25;
LABEL_61:
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(v42, v43, v44, v45, v40, v41);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, void (__cdecl ***a2)(std::__owns_one_state<char> *__hidden this), void (__cdecl ***a3)(std::__owns_one_state<char> *__hidden this), std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  void (__cdecl ***v13)(std::__owns_one_state<char> *__hidden);
  size_t v14;
  void (__cdecl ***v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl ***v16)(std::__owns_one_state<char> *__hidden);
  int v17;
  void (__cdecl ***v18)(std::__owns_one_state<char> *__hidden);
  size_t v19;
  void (__cdecl ***v20)(std::__owns_one_state<char> *__hidden);
  BOOL v21;
  void (__cdecl ***v22)(std::__owns_one_state<char> *__hidden);
  BOOL v23;
  std::__owns_one_state<char> *v24;
  BOOL v25;
  void (__cdecl ***v26)(std::__owns_one_state<char> *__hidden);
  void (__cdecl ***v27)(std::__owns_one_state<char> *__hidden);
  void (__cdecl ***v28)(std::__owns_one_state<char> *__hidden);
  std::basic_regex<char> *v29;
  BOOL v30;
  int v31;
  size_t __max;

  if (a2 == a3)
    return;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *(char *)a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v22 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)a2 + 1);
      if (v11)
        v23 = 1;
      else
        v23 = v22 == a3;
      if (!v23 && *(_BYTE *)v22 == 63)
      {
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v19 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v19 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return;
    v15 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)a2 + 1);
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)a2 + 1), a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 == a3)
      {
LABEL_57:
        v29 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
        std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(v29, v30);
        return;
      }
      v17 = *(char *)v16;
      if (v17 == 44)
      {
        v26 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)v16 + 1);
        if ((void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)v16 + 1) != a3)
        {
          if (*(_BYTE *)v26 == 125)
          {
            v27 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)v16 + 2);
            if (!v11 && v27 != a3 && *(_BYTE *)v27 == 63)
            {
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              goto LABEL_26;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
LABEL_36:
            v19 = -1;
            goto LABEL_45;
          }
          v31 = -1;
          v28 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)v16 + 1), a3, &v31);
          if (v28 == v26 || v28 == a3 || *(_BYTE *)v28 != 125)
            goto LABEL_57;
          v19 = v31;
          v14 = (int)__max;
          if (v31 >= (int)__max)
          {
            v25 = 1;
            if (!v11 && (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)v28 + 1) != a3)
              v25 = *((_BYTE *)v28 + 1) != 63;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v24 = __s;
            goto LABEL_46;
          }
        }
      }
      else if (v17 == 125)
      {
        v18 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)v16 + 1);
        if (!v11 && v18 != a3 && *(_BYTE *)v18 == 63)
        {
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
          v19 = (int)__max;
LABEL_33:
          v24 = __s;
          v25 = 0;
LABEL_46:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v19, v24, a5, a6, v25);
          return;
        }
        v14 = (int)__max;
        a5 = v7;
        a6 = v6;
        a1 = v10;
        v19 = (int)__max;
LABEL_45:
        v24 = __s;
        v25 = 1;
        goto LABEL_46;
      }
    }
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    goto LABEL_57;
  }
  if (v12 == 42)
  {
    v20 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)a2 + 1);
    if (v11)
      v21 = 1;
    else
      v21 = v20 == a3;
    if (!v21 && *(_BYTE *)v20 == 63)
    {
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)a2 + 1);
    if (!v11 && v13 != a3 && *(_BYTE *)v13 == 63)
    {
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v19 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_24ED6FCF8;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_24ED6FD40;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FCF8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FCF8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED6FD40;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED6FD40;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2276933B8);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  int v10;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  std::sub_match<const char *> *v17;
  uint64_t v18;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  std::vector<std::csub_match>::value_type v24;
  char v25;
  uint64_t v26;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  memset(&v24, 0, 17);
  v25 = 0;
  v26 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = a1 + 16;
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v20.first = *(const char **)(a2 + 24);
  v20.second = v20.first;
  v20.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, &v20);
  v21 = v6;
  v22 = v6;
  v23 = 0;
  v24 = v20;
  v26 = v6;
  v25 = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(v4, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40, v9);
  if (*(unsigned __int8 *)(a1 + 84) == v10)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v12 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = *(_DWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = 1;
  do
  {
    v17 = &begin[v16];
    v18 = v15 + 24 * (v14 + v13);
    *(std::pair<const char *, const char *> *)v18 = v17->std::pair<const char *, const char *>;
    *(_BYTE *)(v18 + 16) = v17->matched;
    v16 = (v13 + 2);
    ++v13;
  }
  while (v12 > v16);
LABEL_14:
  operator delete(begin);
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v11;
  signed int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  std::vector<std::csub_match> *v32;
  std::vector<std::csub_match>::size_type v33;
  std::vector<std::csub_match>::const_reference v34;
  const char *v36;
  _BYTE v38[56];
  void *__p[2];
  _QWORD v40[4];
  std::vector<std::csub_match>::value_type __x;
  char *v42;
  char *v43;
  unint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v38 = 0;
    memset(&v38[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v40, 0, 21);
    v11 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v42, (uint64_t)v38);
    v43 = v11;
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v38[32])
      operator delete(*(void **)&v38[32]);
    *((_DWORD *)v11 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v11 - 40), *(unsigned int *)(a1 + 32));
    v36 = a3;
    v12 = (_DWORD)a3 - (_DWORD)a2;
    *((_QWORD *)v11 - 2) = v6;
    *((_DWORD *)v11 - 2) = a5;
    *(v11 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) != 0 || (int)(v13 >> 12) < v12)
      {
        v14 = *((_QWORD *)v11 - 2);
        v15 = v11 - 96;
        if (v14)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 16))(v14, v11 - 96);
        switch(*(_DWORD *)v15)
        {
          case 0xFFFFFC18:
            v16 = (const char *)*((_QWORD *)v11 - 10);
            if ((a5 & 0x20) != 0 && v16 == a2 || (a5 & 0x1000) != 0 && v16 != v36)
              goto LABEL_16;
            v23 = *a4;
            *(_QWORD *)v23 = a2;
            *(_QWORD *)(v23 + 8) = v16;
            *(_BYTE *)(v23 + 16) = 1;
            v24 = *((_QWORD *)v11 - 8);
            v25 = *((_QWORD *)v11 - 7) - v24;
            if (v25)
            {
              v26 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
              v27 = (_BYTE *)(v24 + 16);
              v28 = 1;
              do
              {
                v29 = v23 + 24 * v28;
                *(_OWORD *)v29 = *((_OWORD *)v27 - 1);
                v30 = *v27;
                v27 += 24;
                *(_BYTE *)(v29 + 16) = v30;
              }
              while (v26 > v28++);
            }
            goto LABEL_24;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            v17 = v43 - 96;
            std::allocator<std::__state<char>>::destroy[abi:nn180100]((_QWORD *)v43 - 12);
            v43 = v17;
            goto LABEL_23;
          case 0xFFFFFC20:
            v18 = *((_OWORD *)v11 - 5);
            *(_OWORD *)v38 = *(_OWORD *)v15;
            *(_OWORD *)&v38[16] = v18;
            memset(&v38[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:nn180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v38[32], *((__int128 **)v11 - 8), *((__int128 **)v11 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 - 7) - *((_QWORD *)v11 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v40[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:nn180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v11 - 5), *((__int128 **)v11 - 4), (uint64_t)(*((_QWORD *)v11 - 4) - *((_QWORD *)v11 - 5)) >> 4);
            v19 = *((_QWORD *)v11 - 2);
            *(_QWORD *)((char *)&v40[1] + 5) = *(_QWORD *)(v11 - 11);
            v40[1] = v19;
            (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v11 - 2) + 24))(*((_QWORD *)v11 - 2), 1, v11 - 96);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v40[1] + 24))(v40[1], 0, v38);
            v20 = v43;
            if ((unint64_t)v43 >= v44)
            {
              v43 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v42, (uint64_t)v38);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v21 = *(_OWORD *)&v38[16];
              *(_OWORD *)v43 = *(_OWORD *)v38;
              *((_OWORD *)v20 + 1) = v21;
              *((_QWORD *)v20 + 4) = 0;
              *((_QWORD *)v20 + 5) = 0;
              *((_QWORD *)v20 + 6) = 0;
              *((_QWORD *)v20 + 7) = 0;
              *((_OWORD *)v20 + 2) = *(_OWORD *)&v38[32];
              *((_QWORD *)v20 + 6) = *(_QWORD *)&v38[48];
              memset(&v38[32], 0, 24);
              *((_QWORD *)v20 + 8) = 0;
              *((_QWORD *)v20 + 9) = 0;
              *(_OWORD *)(v20 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v20 + 9) = v40[0];
              __p[0] = 0;
              __p[1] = 0;
              v40[0] = 0;
              v22 = v40[1];
              *(_QWORD *)(v20 + 85) = *(_QWORD *)((char *)&v40[1] + 5);
              *((_QWORD *)v20 + 10) = v22;
              v43 = v20 + 96;
            }
            if (*(_QWORD *)&v38[32])
            {
              *(_QWORD *)&v38[40] = *(_QWORD *)&v38[32];
              operator delete(*(void **)&v38[32]);
            }
LABEL_23:
            v11 = v43;
            ++v13;
            if (v42 == v43)
              goto LABEL_24;
            continue;
          default:
            goto LABEL_30;
        }
      }
      break;
    }
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_30:
    v32 = (std::vector<std::csub_match> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    std::vector<std::sub_match<char const*>>::assign(v32, v33, v34);
  }
  else
  {
LABEL_24:
    *(_QWORD *)v38 = &v42;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:nn180100]((void ***)v38);
  }
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:nn180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a1);
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        abort();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    abort();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:nn180100](v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::allocator<std::__state<char>>::destroy[abi:nn180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:nn180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:nn180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:nn180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:nn180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:nn180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t j;
  int v14;
  char *v15;
  char *v16;
  std::string::size_type size;
  unint64_t i;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _BOOL4 v23;
  std::__split_buffer<std::string>::pointer end_high;
  void *first;
  const char *v26;
  std::regex_traits<char>::char_class_type classname;
  int v28;
  char *v29;
  int v30;
  std::string *v31;
  _BYTE *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  std::__split_buffer<std::string>::pointer begin;
  void *v37;
  std::string::value_type *v38;
  std::string::value_type **v39;
  std::string::value_type *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  std::string *v56;
  std::string *v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  int64x2_t v63;
  std::string *v64;
  BOOL v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string *v68;
  std::string::value_type v69;
  std::string *v70;
  std::string::size_type v71;
  BOOL v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string *p_p;
  std::string::value_type v76;
  std::string *v77;
  std::string::size_type v78;
  std::string::size_type v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  std::__split_buffer<std::string>::pointer v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::value_type v87;
  std::string *v88;
  std::string *v89;
  std::string::value_type v90;
  std::string *v91;
  std::basic_regex<char> *v92;
  uint64_t v93;
  void **v94;
  char *v95;
  std::string __p;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string::value_type *__s[2];
  int64_t v101;
  __int128 v102;
  std::string *v103;
  std::__split_buffer<std::string> v104;
  int64_t v105;

  if (a2 == a3 || *a2 != 91)
    return;
  if (a2 + 1 == a3)
    goto LABEL_245;
  v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
  started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
  if ((char *)v5 == a3)
    goto LABEL_245;
  v7 = (uint64_t)started;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100]((uint64_t)started, 93);
    ++v5;
  }
  if ((char *)v5 == a3)
  {
LABEL_245:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_246:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_247:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_248:
    abort();
  }
  v94 = (void **)(v7 + 88);
  v93 = v7 + 16;
  v95 = a3 - 4;
  do
  {
    v8 = (char *)v5;
    v9 = a3;
    if ((char *)v5 == a3)
      goto LABEL_15;
    v10 = *(unsigned __int8 *)v5;
    v9 = (char *)v5;
    if (v10 == 93)
      goto LABEL_15;
    memset(&v99, 0, sizeof(v99));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      v11 = *(unsigned __int8 *)(v5 + 1);
      switch(v11)
      {
        case '.':
          v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)&v99);
          v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v99.__r_.__value_.__l.__size_;
          if (size)
            goto LABEL_65;
          goto LABEL_30;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_245;
          for (i = 0; *(_BYTE *)(v5 + i + 2) != 58 || *(_BYTE *)(v5 + i + 3) != 93; ++i)
          {
            if (&v95[-v5] == (char *)i)
              goto LABEL_245;
          }
          v22 = (char *)(v5 + i + 2);
          if (v22 == a3)
            goto LABEL_245;
          v23 = *(_DWORD *)(a1 + 24) & 1;
          std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v104, (char *)(v5 + 2), v22, i);
          end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v104.__end_);
          if (SHIBYTE(v104.__end_) >= 0)
            first = &v104;
          else
            first = v104.__first_;
          if (SHIBYTE(v104.__end_) < 0)
            end_high = v104.__begin_;
          (*(void (**)(_QWORD, void *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), first, (char *)end_high + (_QWORD)first);
          if (SHIBYTE(v104.__end_) >= 0)
            v26 = (const char *)&v104;
          else
            v26 = (const char *)v104.__first_;
          classname = std::__get_classname(v26, v23);
          if (SHIBYTE(v104.__end_) < 0)
            operator delete(v104.__first_);
          if (!classname)
            goto LABEL_247;
          v28 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          v29 = (char *)(v5 + i);
          goto LABEL_153;
        case '=':
          v12 = (char *)(v5 + 2);
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_245;
          for (j = 0; v8[j + 2] != 61 || v8[j + 3] != 93; ++j)
          {
            if (v95 - v8 == j)
              goto LABEL_245;
          }
          v19 = &v8[j + 2];
          if (v19 == a3)
            goto LABEL_245;
          std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v102, a1, v12, v19);
          if (SHIBYTE(v103) < 0)
          {
            v20 = *((_QWORD *)&v102 + 1);
            if (!*((_QWORD *)&v102 + 1))
              goto LABEL_246;
            v21 = (char *)v102;
          }
          else
          {
            v20 = HIBYTE(v103);
            if (!HIBYTE(v103))
              goto LABEL_246;
            v21 = (char *)&v102;
          }
          std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v104, v21, &v21[v20], v20);
          begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v104.__end_);
          if (SHIBYTE(v104.__end_) >= 0)
            v37 = &v104;
          else
            v37 = v104.__first_;
          if (SHIBYTE(v104.__end_) < 0)
            begin = v104.__begin_;
          (*(void (**)(std::string::value_type **__return_ptr, _QWORD, void *, char *))(**(_QWORD **)(a1 + 16)
                                                                                                 + 32))(__s, *(_QWORD *)(a1 + 16), v37, (char *)begin + (_QWORD)v37);
          v38 = (std::string::value_type *)HIBYTE(v101);
          if (v101 < 0)
            v38 = __s[1];
          if (v38 != (std::string::value_type *)1)
          {
            if (v38 == (std::string::value_type *)12)
            {
              v39 = __s;
              if (v101 < 0)
                v39 = (std::string::value_type **)__s[0];
              *((_BYTE *)v39 + 11) = *((_BYTE *)v39 + 3);
            }
            else if (SHIBYTE(v101) < 0)
            {
              *__s[0] = 0;
              __s[1] = 0;
            }
            else
            {
              LOBYTE(__s[0]) = 0;
              HIBYTE(v101) = 0;
            }
          }
          if (SHIBYTE(v104.__end_) < 0)
            operator delete(v104.__first_);
          v40 = (std::string::value_type *)HIBYTE(v101);
          v41 = HIBYTE(v101);
          if (v101 < 0)
            v40 = __s[1];
          if (v40)
          {
            v43 = *(_QWORD *)(v7 + 144);
            v42 = *(_QWORD *)(v7 + 152);
            if (v43 >= v42)
            {
              v47 = *(_QWORD *)(v7 + 136);
              v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v47) >> 3);
              v49 = v48 + 1;
              if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_248;
              v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v47) >> 3);
              if (2 * v50 > v49)
                v49 = 2 * v50;
              if (v50 >= 0x555555555555555)
                v51 = 0xAAAAAAAAAAAAAAALL;
              else
                v51 = v49;
              v104.__end_cap_.__value_ = (std::allocator<std::string> *)(v7 + 152);
              if (v51)
              {
                v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7 + 152, v51);
                v54 = v53;
                v41 = HIBYTE(v101);
              }
              else
              {
                v52 = 0;
                v54 = 0;
              }
              v57 = (std::string *)&v52[24 * v48];
              if (v41 < 0)
              {
                std::string::__init_copy_ctor_external(v57, __s[0], (std::string::size_type)__s[1]);
              }
              else
              {
                v58 = *(_OWORD *)__s;
                v57->__r_.__value_.__r.__words[2] = v101;
                *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
              }
              v60 = *(_QWORD *)(v7 + 136);
              v59 = *(_QWORD *)(v7 + 144);
              if (v59 == v60)
              {
                v63 = vdupq_n_s64(v59);
                v61 = v57;
              }
              else
              {
                v61 = v57;
                do
                {
                  v62 = *(_OWORD *)(v59 - 24);
                  v61[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 - 8);
                  *(_OWORD *)&v61[-1].__r_.__value_.__l.__data_ = v62;
                  --v61;
                  *(_QWORD *)(v59 - 16) = 0;
                  *(_QWORD *)(v59 - 8) = 0;
                  *(_QWORD *)(v59 - 24) = 0;
                  v59 -= 24;
                }
                while (v59 != v60);
                v63 = *(int64x2_t *)(v7 + 136);
              }
              v56 = v57 + 1;
              *(_QWORD *)(v7 + 136) = v61;
              *(_QWORD *)(v7 + 144) = v56;
              *(int64x2_t *)&v104.__begin_ = v63;
              v64 = *(std::string **)(v7 + 152);
              *(_QWORD *)(v7 + 152) = &v52[24 * v54];
              v104.__end_cap_.__value_ = v64;
              v104.__first_ = (std::__split_buffer<std::string>::pointer)v63.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v104);
            }
            else
            {
              if (SHIBYTE(v101) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s[0], (std::string::size_type)__s[1]);
              }
              else
              {
                v44 = *(_OWORD *)__s;
                *(_QWORD *)(v43 + 16) = v101;
                *(_OWORD *)v43 = v44;
              }
              v56 = (std::string *)(v43 + 24);
            }
            *(_QWORD *)(v7 + 144) = v56;
          }
          else
          {
            v45 = HIBYTE(v103);
            if (SHIBYTE(v103) < 0)
              v45 = *((_QWORD *)&v102 + 1);
            if (v45 == 2)
            {
              v55 = (char *)&v102;
              if (SHIBYTE(v103) < 0)
                v55 = (char *)v102;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v7, *v55, v55[1]);
            }
            else
            {
              if (v45 != 1)
                goto LABEL_246;
              v46 = (char *)&v102;
              if (SHIBYTE(v103) < 0)
                v46 = (char *)v102;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v7, *v46);
            }
          }
          if (SHIBYTE(v101) < 0)
            operator delete(__s[0]);
          if (SHIBYTE(v103) < 0)
            operator delete((void *)v102);
          v28 = 0;
          v29 = &v8[j];
LABEL_153:
          v5 = (uint64_t)(v29 + 4);
          v33 = v8;
          goto LABEL_154;
      }
    }
    v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    v9 = v8;
LABEL_30:
    if ((v5 | 0x40) != 0x40)
    {
      LOBYTE(v14) = *v9;
LABEL_35:
      std::string::operator=(&v99, v14);
      ++v9;
      goto LABEL_65;
    }
    v14 = *v9;
    if (v14 != 92)
      goto LABEL_35;
    v15 = v9 + 1;
    if ((_DWORD)v5)
      v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v15, a3, &v99);
    else
      std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v15, (std::basic_regex<char> *)a3, &v99, v7);
    v9 = v16;
LABEL_65:
    if (v9 == a3 || (v30 = *v9, v30 == 93) || (v32 = v9 + 1, v9 + 1 == a3) || v30 != 45 || *v32 == 93)
    {
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v99.__r_.__value_.__l.__size_)
        {
          operator delete(v99.__r_.__value_.__l.__data_);
LABEL_15:
          v5 = (uint64_t)v9;
          continue;
        }
        if (v99.__r_.__value_.__l.__size_ != 1)
        {
          v31 = (std::string *)v99.__r_.__value_.__r.__words[0];
LABEL_84:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v7, v31->__r_.__value_.__s.__data_[0], v31->__r_.__value_.__s.__data_[1]);
          goto LABEL_85;
        }
        v31 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((_BYTE *)&v99.__r_.__value_.__s + 23))
          goto LABEL_15;
        v31 = &v99;
        if (HIBYTE(v99.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_84;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v7, v31->__r_.__value_.__s.__data_[0]);
LABEL_85:
      v28 = 1;
      v33 = v9;
      goto LABEL_154;
    }
    memset(&v98, 0, sizeof(v98));
    v33 = v9 + 2;
    if (v9 + 2 != a3 && *v32 == 91 && *v33 == 46)
    {
      v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)&v98);
    }
    else
    {
      if ((v5 | 0x40) != 0x40)
      {
        LOBYTE(v32) = *v32;
LABEL_107:
        std::string::operator=(&v98, (std::string::value_type)v32);
        goto LABEL_161;
      }
      LODWORD(v32) = *v32;
      if ((_DWORD)v32 != 92)
        goto LABEL_107;
      v35 = v9 + 2;
      if ((_DWORD)v5)
        v34 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v35, a3, &v98);
      else
        std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v35, (std::basic_regex<char> *)a3, &v98, v7);
    }
    v33 = (char *)v34;
LABEL_161:
    v97 = v99;
    __p = v98;
    memset(&v98, 0, sizeof(v98));
    memset(&v99, 0, sizeof(v99));
    if (*(_BYTE *)(v7 + 170))
    {
      if (*(_BYTE *)(v7 + 169))
      {
        v65 = (v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        v66 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v66 = v97.__r_.__value_.__l.__size_;
        if (v66)
        {
          v67 = 0;
          do
          {
            if (v65)
              v68 = (std::string *)v97.__r_.__value_.__r.__words[0];
            else
              v68 = &v97;
            v69 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v68->__r_.__value_.__s.__data_[v67]);
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v70 = &v97;
            else
              v70 = (std::string *)v97.__r_.__value_.__r.__words[0];
            v70->__r_.__value_.__s.__data_[v67++] = v69;
            v65 = (v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            v71 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v71 = v97.__r_.__value_.__l.__size_;
          }
          while (v67 < v71);
        }
        v72 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v73 = __p.__r_.__value_.__l.__size_;
        if (v73)
        {
          v74 = 0;
          do
          {
            if (v72)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            else
              p_p = &__p;
            v76 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), p_p->__r_.__value_.__s.__data_[v74]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = &__p;
            else
              v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v77->__r_.__value_.__s.__data_[v74++] = v76;
            v72 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v78 = __p.__r_.__value_.__l.__size_;
          }
          while (v74 < v78);
        }
      }
      v79 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v97;
      else
        v80 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v79 = v97.__r_.__value_.__l.__size_;
      v5 = v7 + 16;
      std::regex_traits<char>::transform<char *>((uint64_t)&v102, v93, (char *)v80, (char *)v80 + v79);
      v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &__p;
      else
        v82 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v81 = __p.__r_.__value_.__l.__size_;
      std::regex_traits<char>::transform<char *>((uint64_t)__s, v93, (char *)v82, (char *)v82 + v81);
      *(_OWORD *)&v104.__first_ = v102;
      v104.__end_ = v103;
      v103 = 0;
      v102 = 0uLL;
      v104.__end_cap_ = *(std::__compressed_pair<std::string *> *)__s;
      v105 = v101;
      __s[0] = 0;
      __s[1] = 0;
      v101 = 0;
      std::vector<std::pair<std::string,std::string>>::push_back[abi:nn180100](v94, (__int128 *)&v104);
      if (SHIBYTE(v105) < 0)
        operator delete(v104.__end_cap_.__value_);
      if (SHIBYTE(v104.__end_) < 0)
        operator delete(v104.__first_);
      if (SHIBYTE(v101) < 0)
        operator delete(__s[0]);
      if ((SHIBYTE(v103) & 0x80000000) == 0)
        goto LABEL_232;
      v83 = (std::__split_buffer<std::string>::pointer)v102;
    }
    else
    {
      v84 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v84 = v97.__r_.__value_.__l.__size_;
      if (v84 != 1)
        goto LABEL_249;
      v85 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v85 = __p.__r_.__value_.__l.__size_;
      if (v85 != 1)
      {
LABEL_249:
        v92 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(v92);
        return;
      }
      if (*(_BYTE *)(v7 + 169))
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v97;
        else
          v86 = (std::string *)v97.__r_.__value_.__r.__words[0];
        v87 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v86->__r_.__value_.__s.__data_[0]);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = &v97;
        else
          v88 = (std::string *)v97.__r_.__value_.__r.__words[0];
        v88->__r_.__value_.__s.__data_[0] = v87;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = &__p;
        else
          v89 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v90 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v89->__r_.__value_.__s.__data_[0]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v91 = &__p;
        else
          v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v91->__r_.__value_.__s.__data_[0] = v90;
      }
      *(_OWORD *)&v104.__first_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
      v104.__end_ = (std::__split_buffer<std::string>::pointer)v97.__r_.__value_.__r.__words[2];
      memset(&v97, 0, sizeof(v97));
      v104.__end_cap_ = *(std::__compressed_pair<std::string *> *)&__p.__r_.__value_.__l.__data_;
      v105 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<std::string,std::string>>::push_back[abi:nn180100](v94, (__int128 *)&v104);
      if (SHIBYTE(v105) < 0)
        operator delete(v104.__end_cap_.__value_);
      if ((SHIBYTE(v104.__end_) & 0x80000000) == 0)
        goto LABEL_232;
      v83 = v104.__first_;
    }
    operator delete(v83);
LABEL_232:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    v28 = 1;
LABEL_154:
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v99.__r_.__value_.__l.__data_);
      v9 = v33;
      if ((v28 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v9 = v33;
      if (v28)
        goto LABEL_15;
    }
  }
  while ((char *)v5 != v8);
  if (v8 == a3)
    goto LABEL_245;
  if (*v8 == 45)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v7, 45);
    ++v8;
  }
  if (v8 == a3 || *v8 != 93)
    goto LABEL_245;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_24ED6FFC8;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_24ED70010;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  char v15;
  uint64_t v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char>::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_48;
          }
          locale = 10;
          goto LABEL_56;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_48;
          }
          locale = 13;
          goto LABEL_56;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_48;
          }
          locale = 9;
          goto LABEL_56;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_59;
          v8 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 && (v8 | 0x20u) - 97 >= 6)
            goto LABEL_59;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_59;
          v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_59;
          goto LABEL_23;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_48;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_59;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_59;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_59;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_59;
          v13 = -87;
LABEL_33:
          v14 = v12 + 16 * (v10 + v11) + v13;
          if (a4)
            goto LABEL_34;
          goto LABEL_49;
        default:
          goto LABEL_43;
      }
      goto LABEL_56;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_48;
      }
      locale = 0;
LABEL_56:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return;
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return;
        }
        locale = 12;
        goto LABEL_56;
      }
LABEL_43:
      v16 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v16 != 95 && ((v16 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v16] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_56;
      }
LABEL_59:
      v17 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
      std::basic_regex<char,std::regex_traits<char>>::__push_char(v17, v18);
      return;
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_59;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u)
      goto LABEL_59;
    v14 = v15 & 0x1F;
    if (a4)
LABEL_34:
      std::string::operator=(a4, v14);
    else
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_24ED6FDD0;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_24ED6FE18;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_24ED6FE60;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_24ED6FEA8;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_24ED6FEF0;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_24ED6FF38;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FDD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FDD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FE18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FE18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FEA8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FEA8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FEF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24ED6FEF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

std::__bracket_expression<char, std::regex_traits<char>> *std::__back_ref<char>::__exec(std::__bracket_expression<char, std::regex_traits<char>> *result, uint64_t a2)
{
  unint64_t locale_low;
  uint64_t v3;
  unsigned int v5;
  std::__bracket_expression<char, std::regex_traits<char>> *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  std::__node<char> *first;
  std::basic_regex<char> *v11;
  BOOL v12;

  locale_low = LODWORD(result->__traits_.__loc_.__locale_);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < locale_low)
  {
    v11 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    return std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v11, v12);
  }
  else
  {
    v5 = locale_low - 1;
    if (*(_BYTE *)(v3 + 24 * v5 + 16)
      && (v6 = result,
          v7 = v3 + 24 * v5,
          result = *(std::__bracket_expression<char, std::regex_traits<char>> **)v7,
          v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
          v9 = *(_QWORD *)(a2 + 16),
          *(_QWORD *)(a2 + 24) - v9 >= v8)
      && (result = (std::__bracket_expression<char, std::regex_traits<char>> *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 16) = v9 + v8;
      first = v6->__first_;
    }
    else
    {
      first = 0;
      *(_DWORD *)a2 = -993;
    }
    *(_QWORD *)(a2 + 80) = first;
  }
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  BOOL v9;
  std::locale v11;
  std::string v12;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v11, (const std::locale *)(v4 + 16));
  std::locale::name(&v12, &v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = v12.__r_.__value_.__l.__size_ != 1 || *v12.__r_.__value_.__l.__data_ != 67;
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = SHIBYTE(v12.__r_.__value_.__r.__words[2]) != 1 || v12.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v11);
  *(_BYTE *)(v4 + 171) = v9;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      abort();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x2276933B8](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::string::size_type size;
  int v9;
  uint64_t v10;
  _BOOL4 negate;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<std::string, std::string>>::pointer v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  size_t v37;
  char *v38;
  size_t v39;
  int v40;
  BOOL v41;
  char v42;
  std::string::size_type v43;
  unsigned __int8 v44;
  std::vector<char>::pointer v45;
  unint64_t v46;
  int v47;
  std::regex_traits<char>::char_class_type v48;
  char v49;
  int v50;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v52;
  char *v53;
  std::vector<std::pair<std::string, std::string>>::pointer v54;
  std::vector<std::pair<std::string, std::string>>::pointer v55;
  unsigned int v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  std::string::size_type v60;
  std::string *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  BOOL v64;
  int v65;
  size_t v66;
  char *v67;
  size_t v68;
  int v69;
  _BOOL4 v70;
  int v71;
  size_t v72;
  char *v73;
  size_t v74;
  int v75;
  BOOL v76;
  std::vector<std::string>::pointer v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  unint64_t v81;
  const void *v82;
  size_t v83;
  std::string::size_type v84;
  uint64_t v85;
  BOOL j;
  std::string *v87;
  std::string::size_type v88;
  int v89;
  std::string *v90;
  uint64_t v91;
  std::string *v92;
  const void *v93;
  size_t v94;
  std::vector<std::string>::pointer v95;
  uint64_t v96;
  int64_t v97;
  unint64_t v98;
  unint64_t v99;
  const void *v100;
  size_t v101;
  std::string::size_type v102;
  uint64_t v103;
  BOOL i;
  std::string *v105;
  std::string::size_type v106;
  int v107;
  std::string *v108;
  uint64_t v109;
  unint64_t v110;
  const void *v111;
  size_t v112;
  std::regex_traits<char>::char_class_type v113;
  int v114;
  std::__node<char> *first;
  int v116;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v119;
  std::regex_traits<char>::char_class_type neg_mask;
  int v121;
  char v122;
  BOOL v123;
  char v124;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v125;
  uint64_t v126;
  uint64_t v127;
  std::string *v128;
  int v129;
  std::string __p;
  __int16 v131;
  std::string v132;
  std::string __s;

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v10 = 0;
    negate = this->__negate_;
LABEL_222:
    v129 = negate;
    goto LABEL_223;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_66;
  v6 = *current;
  LOBYTE(v131) = *current;
  v7 = current[1];
  HIBYTE(v131) = v7;
  if (this->__icase_)
  {
    LOBYTE(v131) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v131) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v131;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v132, (const char *)&__s);
  __p = v132;
  size = HIBYTE(v132.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
  if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v132.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v132, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v9 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v132;
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v132.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v132.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_175;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_175:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_17;
LABEL_66:
    v129 = 0;
    v10 = 1;
    goto LABEL_67;
  }
  v43 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v43)
    goto LABEL_66;
LABEL_17:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    do
    {
      if (v131 == *(p_second - 1) && HIBYTE(v131) == *p_second)
        goto LABEL_250;
      p_second += 2;
      --v16;
    }
    while (v16);
  }
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    v129 = 0;
    goto LABEL_184;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v131, (char *)&v132);
  v20 = this->__ranges_.__begin_;
  v21 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v22 = (char *)this->__ranges_.__end_ - (char *)v20;
  if (v22)
  {
    v23 = 0;
    v24 = v22 / 48;
    v122 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v25 = __s.__r_.__value_.__l.__size_;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &__s;
    else
      v26 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v24 <= 1)
      v27 = 1;
    else
      v27 = v22 / 48;
    v28 = (unsigned __int8 *)&v20->second.__r_.__value_.__r.__words[2] + 7;
    v29 = 1;
    while (1)
    {
      v30 = (char)*(v28 - 24);
      if (v30 >= 0)
        v31 = *(v28 - 24);
      else
        v31 = *(_QWORD *)(v28 - 39);
      if (v30 >= 0)
        v32 = (char *)(v28 - 47);
      else
        v32 = *(char **)(v28 - 47);
      if (v31 >= v25)
        v33 = v25;
      else
        v33 = v31;
      v34 = memcmp(v26, v32, v33);
      v35 = v25 >= v31;
      if (v34)
        v35 = v34 >= 0;
      if (v35)
      {
        v36 = (char)*v28;
        if (v36 >= 0)
          v37 = *v28;
        else
          v37 = *(_QWORD *)(v28 - 15);
        if (v36 >= 0)
          v38 = (char *)(v28 - 23);
        else
          v38 = *(char **)(v28 - 23);
        if (v25 >= v37)
          v39 = v37;
        else
          v39 = v25;
        v40 = memcmp(v38, v26, v39);
        v41 = v37 >= v25;
        if (v40)
          v41 = v40 >= 0;
        if (v41)
          break;
      }
      v29 = ++v23 < v24;
      v28 += 48;
      if (v27 == v23)
      {
        v129 = 0;
        v42 = 1;
        goto LABEL_178;
      }
    }
    v42 = 0;
    v129 = 1;
LABEL_178:
    p_traits = &this->__traits_;
    v21 = v122;
  }
  else
  {
    v29 = 0;
    v129 = 0;
    v42 = 1;
  }
  if (v21 < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v29)
  {
LABEL_184:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
      goto LABEL_232;
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v131, (char *)&v132);
    v95 = this->__equivalences_.__begin_;
    v96 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v97 = (char *)this->__equivalences_.__end_ - (char *)v95;
    if (v97)
    {
      v98 = 0;
      v99 = v97 / 24;
      v101 = __s.__r_.__value_.__l.__size_;
      v100 = (const void *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v102 = __s.__r_.__value_.__l.__size_;
      if (v99 <= 1)
        v103 = 1;
      else
        v103 = v97 / 24;
      for (i = 1; ; i = v98 < v99)
      {
        v105 = &v95[v98];
        v106 = HIBYTE(v105->__r_.__value_.__r.__words[2]);
        v107 = (char)v106;
        if ((v106 & 0x80u) != 0)
          v106 = v105->__r_.__value_.__l.__size_;
        if (v102 != v106)
          goto LABEL_205;
        v108 = v107 >= 0 ? &v95[v98] : (std::string *)v105->__r_.__value_.__r.__words[0];
        if ((v96 & 0x80) == 0)
          break;
        v128 = v95;
        v110 = v99;
        v111 = v100;
        v112 = v101;
        if (!memcmp(v100, v108, v101))
        {
          operator delete(__s.__r_.__value_.__l.__data_);
LABEL_230:
          if (!i)
          {
            v129 = 1;
            goto LABEL_232;
          }
LABEL_250:
          v121 = 1;
LABEL_251:
          v129 = v121;
LABEL_252:
          v10 = 2;
          goto LABEL_223;
        }
        ++v98;
        v101 = v112;
        v100 = v111;
        v99 = v110;
        v95 = v128;
        if (v98 == v103)
          goto LABEL_211;
LABEL_209:
        ;
      }
      if (!(_DWORD)v96)
        goto LABEL_230;
      v109 = 0;
      while (__s.__r_.__value_.__s.__data_[v109] == v108->__r_.__value_.__s.__data_[v109])
      {
        if (v96 == ++v109)
          goto LABEL_230;
      }
LABEL_205:
      if (++v98 == v103)
        goto LABEL_210;
      goto LABEL_209;
    }
LABEL_210:
    if ((v96 & 0x80) != 0)
LABEL_211:
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_232:
    if ((char)v131 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v119 = tab[v131];
      if (((v119 & mask) != 0 || v131 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v131) & 0x80000000) == 0
        && ((tab[HIBYTE(v131)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v131) == 95))
      {
        goto LABEL_250;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v119) != 0 || v131 == 95 && (neg_mask & 0x80) != 0)
        goto LABEL_249;
    }
    if (SHIBYTE(v131) < 0)
      goto LABEL_250;
    if ((this->__traits_.__ct_->__tab_[HIBYTE(v131)] & neg_mask) == 0)
    {
      v121 = 1;
      if (HIBYTE(v131) != 95 || (neg_mask & 0x80) == 0)
        goto LABEL_251;
    }
LABEL_249:
    v121 = v129;
    goto LABEL_251;
  }
  if ((v42 & 1) == 0)
    goto LABEL_252;
  v10 = 2;
LABEL_67:
  v44 = *v2->__current_;
  v132.__r_.__value_.__s.__data_[0] = v44;
  if (this->__icase_)
  {
    v44 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v44);
    v132.__r_.__value_.__s.__data_[0] = v44;
  }
  v45 = this->__chars_.__begin_;
  v46 = this->__chars_.__end_ - v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    do
    {
      v47 = *v45++;
      if (v47 == v44)
        goto LABEL_221;
    }
    while (--v46);
  }
  v48 = this->__neg_mask_;
  if (v48 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v44 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v44] & v48) == 0)
    {
      v50 = (v48 >> 7) & 1;
      v49 = v44 == 95 ? v50 : 0;
    }
    else
    {
      v49 = 1;
    }
    end = this->__neg_chars_.__end_;
    v52 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v44, end - this->__neg_chars_.__begin_);
    v53 = v52 ? v52 : end;
    if ((v49 & 1) == 0 && v53 == end)
    {
LABEL_221:
      negate = 1;
      goto LABEL_222;
    }
  }
  v54 = this->__ranges_.__begin_;
  v55 = this->__ranges_.__end_;
  if (v54 != v55)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v132, &v132.__r_.__value_.__s.__data_[1]);
      v54 = this->__ranges_.__begin_;
      v55 = this->__ranges_.__end_;
      v56 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v56 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
    }
    v57 = (char *)v55 - (char *)v54;
    if (v57)
    {
      v126 = v10;
      v58 = 0;
      v59 = v57 / 48;
      v124 = v56;
      if ((v56 & 0x80u) == 0)
        v60 = v56;
      else
        v60 = __s.__r_.__value_.__l.__size_;
      if ((v56 & 0x80u) == 0)
        v61 = &__s;
      else
        v61 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v59 <= 1)
        v62 = 1;
      else
        v62 = v57 / 48;
      v63 = (unsigned __int8 *)&v54->second.__r_.__value_.__r.__words[2] + 7;
      v64 = 1;
      while (1)
      {
        v65 = (char)*(v63 - 24);
        if (v65 >= 0)
          v66 = *(v63 - 24);
        else
          v66 = *(_QWORD *)(v63 - 39);
        if (v65 >= 0)
          v67 = (char *)(v63 - 47);
        else
          v67 = *(char **)(v63 - 47);
        if (v66 >= v60)
          v68 = v60;
        else
          v68 = v66;
        v69 = memcmp(v61, v67, v68);
        v70 = v60 >= v66;
        if (v69)
          v70 = v69 >= 0;
        if (v70)
        {
          v71 = (char)*v63;
          if (v71 >= 0)
            v72 = *v63;
          else
            v72 = *(_QWORD *)(v63 - 15);
          if (v71 >= 0)
            v73 = (char *)(v63 - 23);
          else
            v73 = *(char **)(v63 - 23);
          if (v60 >= v72)
            v74 = v72;
          else
            v74 = v60;
          v75 = memcmp(v73, v61, v74);
          v76 = v72 >= v60;
          if (v75)
            v76 = v75 >= 0;
          if (v76)
            break;
        }
        v64 = ++v58 < v59;
        v63 += 48;
        if (v62 == v58)
          goto LABEL_140;
      }
      v129 = 1;
LABEL_140:
      v10 = v126;
      if ((v124 & 0x80) == 0)
        goto LABEL_142;
    }
    else
    {
      v64 = 0;
      if ((v56 & 0x80) == 0)
        goto LABEL_142;
    }
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_142:
    if (v64)
      goto LABEL_223;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_216;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v132, &v132.__r_.__value_.__s.__data_[1]);
  v77 = this->__equivalences_.__begin_;
  v78 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v79 = (char *)this->__equivalences_.__end_ - (char *)v77;
  if (!v79)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_216:
    if (v132.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_223;
    v113 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v132.__r_.__value_.__s.__data_[0]] & v113) == 0)
    {
      v114 = (v113 >> 7) & 1;
      if (v132.__r_.__value_.__s.__data_[0] != 95)
        v114 = 0;
      if (v114 != 1)
        goto LABEL_223;
    }
    goto LABEL_221;
  }
  v127 = v10;
  v80 = 0;
  v81 = v79 / 24;
  v83 = __s.__r_.__value_.__l.__size_;
  v82 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v84 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v84 = __s.__r_.__value_.__l.__size_;
  if (v81 <= 1)
    v85 = 1;
  else
    v85 = v79 / 24;
  for (j = 1; ; j = v80 < v81)
  {
    v87 = &v77[v80];
    v88 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
    v89 = (char)v88;
    if ((v88 & 0x80u) != 0)
      v88 = v87->__r_.__value_.__l.__size_;
    if (v84 == v88)
      break;
LABEL_164:
    if (++v80 == v85)
    {
      if ((v78 & 0x80) != 0)
LABEL_214:
        operator delete(__s.__r_.__value_.__l.__data_);
      v10 = v127;
      goto LABEL_216;
    }
LABEL_168:
    ;
  }
  if (v89 >= 0)
    v90 = &v77[v80];
  else
    v90 = (std::string *)v87->__r_.__value_.__r.__words[0];
  if ((v78 & 0x80) == 0)
  {
    if (!(_DWORD)v78)
    {
LABEL_169:
      v129 = 1;
      v10 = v127;
      if (!j)
        goto LABEL_216;
      goto LABEL_223;
    }
    v91 = 0;
    while (__s.__r_.__value_.__s.__data_[v91] == v90->__r_.__value_.__s.__data_[v91])
    {
      if (v78 == ++v91)
        goto LABEL_169;
    }
    goto LABEL_164;
  }
  v123 = j;
  v125 = v2;
  v92 = v77;
  v93 = v82;
  v94 = v83;
  if (memcmp(v82, v90, v83))
  {
    ++v80;
    v83 = v94;
    v82 = v93;
    v77 = v92;
    v2 = v125;
    if (v80 == v85)
      goto LABEL_214;
    goto LABEL_168;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  v129 = 1;
  v2 = v125;
  v10 = v127;
  if (!v123)
    goto LABEL_216;
LABEL_223:
  if (v129 == this->__negate_)
  {
    first = 0;
    v116 = -993;
  }
  else
  {
    v2->__current_ += v10;
    first = this->__first_;
    v116 = -995;
  }
  v2->__do_ = v116;
  v2->__node_ = first;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:nn180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:nn180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  int v10;
  std::basic_regex<char> *v11;
  int v12;
  std::string *v13;
  __int128 v14;
  unint64_t v15;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
  {
LABEL_15:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  }
  else
  {
    std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v14, a1, a2, &a2[i]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v14;
    v7 = v15;
    *(_QWORD *)(a4 + 16) = v15;
    v8 = HIBYTE(v7);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a4 + 8);
    if (v8 - 1 < 2)
      return (uint64_t)&a2[i + 2];
  }
  v10 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(v10, v11, v12, v13);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  char v9;
  char v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  std::string::value_type v14;
  std::string *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  char v42;
  _BYTE *v43;
  char v44;

  if (this == a3)
  {
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    goto LABEL_79;
  }
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low == 115)
      {
        v8 = *(_DWORD *)(a5 + 160) | 0x4000;
        goto LABEL_25;
      }
      if (locale_low == 119)
      {
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](a5, 95);
        return;
      }
    }
    else
    {
      if (locale_low == 98)
      {
        v15 = a4;
        v14 = 8;
        goto LABEL_21;
      }
      if (locale_low == 100)
      {
        v8 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_25:
        *(_DWORD *)(a5 + 160) = v8;
        return;
      }
    }
LABEL_26:
    std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    return;
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_23:
        *(_DWORD *)(a5 + 164) = v7;
        return;
      }
      goto LABEL_26;
    }
    v14 = 0;
    v15 = a4;
LABEL_21:
    std::string::operator=(v15, v14);
    return;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_23;
  }
  if (locale_low != 87)
    goto LABEL_26;
  *(_DWORD *)(a5 + 164) |= 0x500u;
  if (*(_BYTE *)(a5 + 169))
  {
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
    v10 = v9;
    v12 = *(_BYTE **)(a5 + 72);
    v11 = *(_QWORD *)(a5 + 80);
    if ((unint64_t)v12 < v11)
    {
      *v12 = v9;
      v13 = (uint64_t)(v12 + 1);
LABEL_55:
      *(_QWORD *)(a5 + 72) = v13;
      return;
    }
    v24 = *(_QWORD *)(a5 + 64);
    v25 = &v12[-v24];
    v26 = (uint64_t)&v12[-v24 + 1];
    if (v26 >= 0)
    {
      v27 = v11 - v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = operator new(v28);
      else
        v29 = 0;
      v31 = &v29[v28];
      v25[(_QWORD)v29] = v10;
      v13 = (uint64_t)&v25[(_QWORD)v29 + 1];
      if (v12 == (_BYTE *)v24)
      {
        v29 = &v25[(_QWORD)v29];
      }
      else
      {
        v32 = &v12[~v24];
        do
        {
          v33 = *--v12;
          (v32--)[(_QWORD)v29] = v33;
        }
        while (v12 != (_BYTE *)v24);
        v12 = *(_BYTE **)(a5 + 64);
      }
      *(_QWORD *)(a5 + 64) = v29;
      *(_QWORD *)(a5 + 72) = v13;
      *(_QWORD *)(a5 + 80) = v31;
      if (v12)
        operator delete(v12);
      goto LABEL_55;
    }
LABEL_79:
    abort();
  }
  v17 = *(_BYTE **)(a5 + 72);
  v16 = *(_QWORD *)(a5 + 80);
  if (*(_BYTE *)(a5 + 170))
  {
    if ((unint64_t)v17 >= v16)
    {
      v18 = *(_QWORD *)(a5 + 64);
      v19 = &v17[-v18];
      v20 = (uint64_t)&v17[-v18 + 1];
      if (v20 < 0)
        goto LABEL_79;
      v21 = v16 - v18;
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
        v23 = operator new(v22);
      else
        v23 = 0;
      v39 = &v19[(_QWORD)v23];
      v40 = (char *)v23 + v22;
      v19[(_QWORD)v23] = 95;
      v30 = (uint64_t)&v19[(_QWORD)v23 + 1];
      if (v17 != (_BYTE *)v18)
      {
        v41 = &v17[~v18];
        do
        {
          v42 = *--v17;
          (v41--)[(_QWORD)v23] = v42;
        }
        while (v17 != (_BYTE *)v18);
LABEL_73:
        v17 = *(_BYTE **)(a5 + 64);
        goto LABEL_75;
      }
      goto LABEL_74;
    }
  }
  else if ((unint64_t)v17 >= v16)
  {
    v34 = *(_QWORD *)(a5 + 64);
    v35 = &v17[-v34];
    v36 = (uint64_t)&v17[-v34 + 1];
    if (v36 < 0)
      goto LABEL_79;
    v37 = v16 - v34;
    if (2 * v37 > v36)
      v36 = 2 * v37;
    if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
      v38 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
      v23 = operator new(v38);
    else
      v23 = 0;
    v39 = &v35[(_QWORD)v23];
    v40 = (char *)v23 + v38;
    v35[(_QWORD)v23] = 95;
    v30 = (uint64_t)&v35[(_QWORD)v23 + 1];
    if (v17 != (_BYTE *)v34)
    {
      v43 = &v17[~v34];
      do
      {
        v44 = *--v17;
        (v43--)[(_QWORD)v23] = v44;
      }
      while (v17 != (_BYTE *)v34);
      goto LABEL_73;
    }
LABEL_74:
    v23 = v39;
LABEL_75:
    *(_QWORD *)(a5 + 64) = v23;
    *(_QWORD *)(a5 + 72) = v30;
    *(_QWORD *)(a5 + 80) = v40;
    if (v17)
      operator delete(v17);
    goto LABEL_77;
  }
  *v17 = 95;
  v30 = (uint64_t)(v17 + 1);
LABEL_77:
  *(_QWORD *)(a5 + 72) = v30;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;
  uint64_t v13;

  if (a2 == a3)
    goto LABEL_52;
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) == 0x30)
  {
    v7 = v5 - 48;
    v8 = a2 + 1;
    if (a2 + 1 != a3)
    {
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_39;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 != a3)
      {
        v9 = a2[2];
        v10 = v9 & 0xF8;
        v11 = v9 + 8 * v7 - 48;
        if (v10 == 48)
          v8 = a2 + 3;
        else
          v8 = a2 + 2;
        if (v10 == 48)
          v7 = v11;
        goto LABEL_39;
      }
    }
    v8 = a3;
LABEL_39:
    if (this)
      std::string::operator=(this, v7);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return v8;
  }
LABEL_52:
  v13 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return (char *)std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v13);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    abort();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:nn180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      v8 = v14 + 48;
      *a1 = v14;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
    }
    else
    {
      v18 = &v13[48 * v9];
      do
      {
        v19 = *((_OWORD *)v17 - 3);
        *((_QWORD *)v18 - 4) = *((_QWORD *)v17 - 4);
        *((_OWORD *)v18 - 3) = v19;
        *((_QWORD *)v17 - 5) = 0;
        *((_QWORD *)v17 - 4) = 0;
        *((_QWORD *)v17 - 6) = 0;
        v20 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *((_QWORD *)v17 - 2) = 0;
        *((_QWORD *)v17 - 1) = 0;
        *((_QWORD *)v17 - 3) = 0;
        v17 -= 48;
      }
      while (v17 != v16);
      v17 = (char *)*a1;
      v21 = (uint64_t)a1[1];
      v8 = v14 + 48;
      *a1 = v18;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
      while ((char *)v21 != v17)
      {
        v21 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v21);
      }
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v4 + 48;
  }
  a1[1] = v8;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(2 * a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_24ED70058;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_24ED700E8;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void (__cdecl ***std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(void (__cdecl ***result)(std::__owns_one_state<char> *__hidden this), void (__cdecl ***a2)(std::__owns_one_state<char> *__hidden this), int *a3))(std::__owns_one_state<char> *__hidden this)
{
  int v3;
  int v4;
  int v5;
  void (__cdecl ***v6)(std::__owns_one_state<char> *__hidden);

  if (result != a2)
  {
    v3 = *(unsigned __int8 *)result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      result = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)result + 1);
      if (result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *(unsigned __int8 *)result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
          {
            v6 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
            return std::__loop<char>::~__loop(v6);
          }
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          result = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)result + 1);
          if (result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED700B8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED700B8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2276933B8);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:nn180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:nn180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED700B8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED700B8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2276933B8);
}

unsigned int *std::__loop<char>::__init_repeat[abi:nn180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x2276933B8);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED700B8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24ED700B8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x2276933B8);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x2276933B8);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3))(std::__owns_one_state<char> *__hidden this)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int v17;
  std::__node<char> *v18;
  std::__owns_one_state<char> *v19;
  std::__node<char> *first;
  _BOOL4 v21;
  uint64_t v22;
  size_t v23;
  int v24;
  void (__cdecl ***v25)(std::__owns_one_state<char> *__hidden);
  char *v26;
  int v27;
  void (__cdecl ***v28)(std::__owns_one_state<char> *__hidden);
  size_t v29;
  size_t v30;
  std::basic_regex<char> *v31;
  void (__cdecl ***v33)(std::__owns_one_state<char> *__hidden);
  int v34;
  int v35;

  v3 = a2;
  if (a2 == a3)
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v9 = a2 + 1;
  v8 = *a2;
  if (a2 + 1 != a3 || v8 != 36)
  {
    if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_32;
    }
    if (v9 == a3 || v8 != 92)
    {
      if (v8 == 46)
      {
        v18 = (std::__node<char> *)operator new();
        v19 = a1->__end_;
        first = v19->__first_;
        v18->__vftable = (std::__node<char>_vtbl *)&off_24ED701C0;
        v18[1].__vftable = (std::__node<char>_vtbl *)first;
        v19->__first_ = v18;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_32;
      }
    }
    else
    {
      v17 = *v9;
      if ((v17 - 36) <= 0x3A && ((1 << (v17 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v9 = v3 + 2;
        goto LABEL_32;
      }
    }
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, a2, a3);
  v11 = v10;
  if (v10 == v3 && v10 != a3)
  {
    if (v9 == a3 || *v3 != 92)
      return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
    v12 = *v9;
    if (v12 == 40)
    {
      v13 = (uint64_t)(v3 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      v14 = a1->__marked_count_;
      do
      {
        v15 = (char *)v13;
        v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
      }
      while ((char *)v13 != v15);
      if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41)
        goto LABEL_59;
      v11 = v15 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
    }
    else
    {
      v21 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
      v22 = 2;
      if (!v21)
        v22 = 0;
      v11 = &v3[v22];
    }
  }
  v9 = v11;
  if (v11 == v3)
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
LABEL_32:
  if (v9 == a3)
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3;
  v23 = a1->__marked_count_ + 1;
  v24 = *v9;
  if (v24 == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))(v9 + 1);
  }
  if (v9 + 1 == a3 || v24 != 92 || v9[1] != 123)
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v9;
  v35 = 0;
  v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((void (__cdecl ***)(std::__owns_one_state<char> *__hidden))(v9 + 2), (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3, &v35);
  if (v25 == (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))(v9 + 2))
  {
LABEL_48:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v9;
  }
  if (v25 != (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3)
  {
    v26 = (char *)v25 + 1;
    v27 = *(unsigned __int8 *)v25;
    if (v27 == 44)
    {
      v34 = -1;
      v28 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((void (__cdecl ***)(std::__owns_one_state<char> *__hidden))((char *)v25 + 1), (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3, &v34);
      if (v28 != (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3
        && (char *)v28 + 1 != a3
        && *(_BYTE *)v28 == 92
        && *((_BYTE *)v28 + 1) == 125)
      {
        v30 = v34;
        v29 = v35;
        if (v34 == -1)
        {
          v30 = -1;
        }
        else if (v34 < v35)
        {
          goto LABEL_48;
        }
        v3 = (char *)v28 + 2 * (*((_BYTE *)v28 + 1) == 125);
        v31 = a1;
LABEL_56:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(v31, v29, v30, end, marked_count + 1, v23, 1);
        return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
      }
    }
    else if (v26 != a3 && v27 == 92 && *v26 == 125)
    {
      v3 = (char *)v25 + 2;
      v29 = v35;
      v31 = a1;
      v30 = v35;
      goto LABEL_56;
    }
  }
  std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_59:
  v33 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return std::__match_any<char>::~__match_any(v33);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  uint64_t v3;

  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
  {
    v3 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(v3);
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
    return 1;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == a2)
  {
    v8 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(v8, v9, v10);
  }
  else
  {
    do
    {
      v7 = v6;
      std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v6, a3);
    }
    while (v6 != v7);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  void (__cdecl ***v11)(std::__owns_one_state<char> *__hidden);
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = *a2;
  v10 = (v8 - 36);
  if (v10 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v9);
LABEL_33:
      v11 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))(a2 + 1);
      goto LABEL_38;
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v11 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))(a2 + 1);
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_24ED701C0;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_38;
    }
    goto LABEL_24;
  }
  v12 = *(char *)v11;
  v13 = *(_BYTE *)v11;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v11 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))(a2 + 2);
LABEL_38:
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v11, (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
    v9 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
  {
LABEL_37:
    v11 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v14;
    if (v14 != a2)
      goto LABEL_38;
    return;
  }
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_24ED6FCB0;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
      {
        v29 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
        std::regex_iterator<char *,char,std::regex_traits<char>>::operator==(v29);
        return;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = v28 + 1;
      goto LABEL_37;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_24ED6FC68;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_33;
  }
}

BOOL std::regex_iterator<char *,char,std::regex_traits<char>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v6 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v6 + 8);
  v9 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v8 == v7 && v5 == v4;
  if (v5 != v4 && v8 != v7)
    return *(_QWORD *)a1 == *(_QWORD *)a2
        && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
        && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && std::sub_match<char *>::compare[abi:nn180100](v4, v7) == 0;
  return v10;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  const std::vector<std::csub_match>::value_type *v15;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;
  int v19;
  const char *v20;
  int v21;
  int v22;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0);
  if (!v12)
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v19 = v9 | 0x80;
    v20 = (char *)&a2->first + 1;
    if (v20 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v20, (const char *)a3, (uint64_t *)this, v19, 0);
        begin = this->__begin_;
        end = this->__end_;
        if (v21)
          goto LABEL_8;
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v20 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v19, 0);
    if (!v22)
    {
LABEL_18:
      result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begin = this->__begin_;
  end = this->__end_;
LABEL_8:
  if (end == begin)
    v15 = v11;
  else
    v15 = begin;
  first = (std::sub_match<const char *> *)v15->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v15->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v15->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<char *>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  char v5;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = a5;
  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v13 = *(_QWORD **)a1;
  v12 = *(_QWORD **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *(_QWORD *)a1) >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    v22 = *(char **)(a1 + 8);
    if (v11 >= v14)
      goto LABEL_24;
    v22 = (char *)&v13[(a4[1] - *a4) >> 3];
    goto LABEL_20;
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
  {
    v22 = (char *)&v12[3 * v15];
    v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * (((uint64_t)v12 - *(_QWORD *)a1) >> 3);
    do
    {
      *v12 = 0;
      v12[1] = 0;
      *((_BYTE *)v12 + 16) = 0;
      v12 += 3;
      v27 -= 24;
    }
    while (v27);
LABEL_20:
    *(_QWORD *)(a1 + 8) = v22;
    goto LABEL_24;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
  v18 = 0x5555555555555556 * ((v16 - (uint64_t)v13) >> 3);
  if (v18 <= v11)
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  if (v17 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v18;
  if (v19 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v20 = (char *)operator new(24 * v19);
  v21 = &v20[24 * v14];
  v22 = &v20[24 * v11];
  v23 = v21;
  v24 = 24 * v11 - 24 * v14;
  do
  {
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  v25 = &v20[24 * v19];
  if (v12 == v13)
  {
    v5 = a5;
  }
  else
  {
    v5 = a5;
    do
    {
      v26 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v21 - 1) = *(v12 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v12 -= 3;
    }
    while (v12 != v13);
    v12 = v13;
  }
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = v25;
  if (v12)
  {
    operator delete(v12);
    v22 = *(char **)(a1 + 8);
  }
LABEL_24:
  v28 = &v22[-*(_QWORD *)a1];
  if (v22 != *(char **)a1)
  {
    v29 = 0;
    v30 = (uint64_t)v28 / 24;
    v31 = (uint64_t *)*a4;
    v32 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
    if (v30 <= 1)
      v30 = 1;
    v33 = (_BYTE *)(*(_QWORD *)a1 + 16);
    do
    {
      if (v32 <= v29)
        v34 = a4 + 3;
      else
        v34 = v31;
      v35 = a2 + v34[1] - v10;
      *((_QWORD *)v33 - 2) = a2 + *v34 - v10;
      *((_QWORD *)v33 - 1) = v35;
      *v33 = *((_BYTE *)v34 + 16);
      v33 += 24;
      ++v29;
      v31 += 3;
    }
    while (v30 != v29);
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  v36 = a2 + a4[6] - v10;
  v37 = a2 + a4[7] - v10;
  *(_QWORD *)(a1 + 48) = v36;
  *(_QWORD *)(a1 + 56) = v37;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  v38 = a4[9] - v10;
  v39 = a4[10] - v10;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = a2 + v38;
  *(_QWORD *)(a1 + 80) = a2 + v39;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((v5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v36;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  const char *v10;
  uint64_t v12;
  char *v13;
  char v14;
  unsigned int v15;
  int64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  __int128 *v28;
  __int128 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 *v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  __int128 v43;
  int64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 *v48;
  char *v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  char *v58;
  unint64_t v59;
  __int128 *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  __int128 v64;
  int64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  void *v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  const char *v98;
  const char *v99;
  int64_t v100;
  void **v101;
  _BYTE *v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 **v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  void *v126;
  char *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void **v149;
  void **v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  void *v154;
  char *v155;
  int64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char *v162;
  char *v163;
  const char *v164;
  _BYTE *v165;
  const char *v166;
  const char *v167;
  const char *v168;
  __int16 v169;
  int64_t v170;
  void *v171[2];
  __int128 v172;
  int64x2_t v173;
  _BYTE v174[56];
  void *__p[2];
  _QWORD v176[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
    return;
  }
  v170 = a3 - a2;
  v169 = a5;
  if (!*(_DWORD *)(a1 + 28))
  {
    v172 = 0u;
    v173 = 0u;
    *(_OWORD *)v171 = 0u;
    v77 = *(_QWORD *)(a1 + 40);
    if (v77)
    {
      *(_DWORD *)v174 = 0;
      memset(&v174[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v176, 0, 21);
      std::deque<std::__state<char>>::push_back(v171, (uint64_t)v174);
      if (__p[0])
        operator delete(__p[0]);
      v158 = a4;
      if (*(_QWORD *)&v174[32])
        operator delete(*(void **)&v174[32]);
      v78 = v171[1];
      v79 = v173.i64[1] + v173.i64[0] - 1;
      v80 = v79 / 0x2A;
      v81 = *((_QWORD *)v171[1] + v79 / 0x2A);
      v82 = 3 * (v79 % 0x2A);
      v83 = v81 + 32 * v82;
      *(_DWORD *)v83 = 0;
      *(_QWORD *)(v83 + 8) = v10;
      *(_QWORD *)(v78[v80] + 32 * v82 + 16) = v10;
      v167 = a3;
      *(_QWORD *)(v78[v80] + 32 * v82 + 24) = a3;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v78[v80] + 32 * v82 + 56), *(unsigned int *)(a1 + 32));
      v160 = 0;
      v84 = 0;
      v156 = 0;
      v85 = v173.i64[1];
      v86 = v171[1];
      v87 = v173.i64[1] + v173.i64[0] - 1;
      v88 = v87 / 0x2A;
      v89 = 3 * (v87 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v171[1] + v88) + 32 * v89 + 80) = v77;
      v90 = v86[v88] + 32 * v89;
      *(_DWORD *)(v90 + 88) = v7;
      *(_BYTE *)(v90 + 92) = a6;
      while (2)
      {
        if ((++v84 & 0xFFF) == 0 && (int)(v84 >> 12) >= (int)v170)
        {
LABEL_213:
          std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_214:
          std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_215:
          abort();
        }
        v92 = v85 + v173.i64[0] - 1;
        v93 = *((_QWORD *)v171[1] + v92 / 0x2A);
        v94 = v92 % 0x2A;
        v95 = v93 + 96 * (v92 % 0x2A);
        v97 = (_QWORD *)(v95 + 80);
        v96 = *(_QWORD *)(v95 + 80);
        if (v96)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v96 + 16))(v96, v93 + 96 * v94);
        switch(*(_DWORD *)v95)
        {
          case 0xFFFFFC18:
            v98 = *(const char **)(v93 + 96 * v94 + 16);
            if ((v7 & 0x20) != 0 && v98 == v10 || (v7 & 0x1000) != 0 && v98 != v167)
              goto LABEL_188;
            v99 = &v98[-*(_QWORD *)(v93 + 96 * v94 + 8)];
            v100 = v156;
            if ((v160 & (v156 >= (uint64_t)v99)) == 0)
              v100 = (int64_t)v99;
            if (v100 != v170)
            {
              v156 = v100;
              std::deque<std::__state<char>>::pop_back(v171);
              v160 = 1;
              goto LABEL_189;
            }
            v101 = (void **)v171[1];
            v102 = (_BYTE *)v172;
            if ((void *)v172 == v171[1])
            {
              v102 = v171[1];
            }
            else
            {
              v103 = (char *)v171[1] + 8 * (v173.i64[0] / 0x2AuLL);
              v104 = (_QWORD *)(*v103 + 96 * (v173.i64[0] % 0x2AuLL));
              v105 = *((_QWORD *)v171[1] + (v173.i64[1] + v173.i64[0]) / 0x2AuLL)
                   + 96 * ((v173.i64[1] + v173.i64[0]) % 0x2AuLL);
              if (v104 != (_QWORD *)v105)
              {
                do
                {
                  std::allocator<std::__state<char>>::destroy[abi:nn180100](v104);
                  v104 += 12;
                  if ((_QWORD *)((char *)v104 - *v103) == (_QWORD *)4032)
                  {
                    v106 = (_QWORD *)v103[1];
                    ++v103;
                    v104 = v106;
                  }
                }
                while (v104 != (_QWORD *)v105);
                v101 = (void **)v171[1];
                v102 = (_BYTE *)v172;
              }
            }
            v173.i64[1] = 0;
            v139 = v102 - (_BYTE *)v101;
            if (v139 >= 0x11)
            {
              do
              {
                operator delete(*v101);
                v101 = (void **)((char *)v171[1] + 8);
                v171[1] = v101;
                v139 = v172 - (_QWORD)v101;
              }
              while ((_QWORD)v172 - (_QWORD)v101 > 0x10uLL);
            }
            if (v139 >> 3 == 1)
            {
              v140 = 21;
            }
            else
            {
              if (v139 >> 3 != 2)
                goto LABEL_176;
              v140 = 42;
            }
            v173.i64[0] = v140;
LABEL_176:
            v160 = 1;
            v156 = v170;
LABEL_189:
            v85 = v173.i64[1];
            if (v173.i64[1])
              continue;
            if ((v160 & 1) != 0)
            {
              v148 = *v158;
              *(_QWORD *)v148 = v10;
              *(_QWORD *)(v148 + 8) = &v10[v156];
              *(_BYTE *)(v148 + 16) = 1;
            }
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_189;
          case 0xFFFFFC1D:
            v107 = v173.i64[0];
            v108 = (char *)v171[1];
            v109 = (char *)v172;
            if (!v173.i64[0])
            {
              v110 = (uint64_t)(v172 - (unint64_t)v171[1]) >> 3;
              v111 = 42 * v110 - 1;
              if ((void *)v172 == v171[1])
                v111 = 0;
              if ((unint64_t)(v111 - v173.i64[1]) < 0x2A)
              {
                if (v110 >= (uint64_t)(*((_QWORD *)&v172 + 1) - (unint64_t)v171[0]) >> 3)
                {
                  v168 = v10;
                  if (*((void **)&v172 + 1) == v171[0])
                    v115 = 1;
                  else
                    v115 = (uint64_t)(*((_QWORD *)&v172 + 1) - (unint64_t)v171[0]) >> 2;
                  *(_QWORD *)&v174[32] = (char *)&v172 + 8;
                  *(_QWORD *)v174 = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v115);
                  *(_QWORD *)&v174[8] = *(_QWORD *)v174;
                  *(_QWORD *)&v174[16] = *(_QWORD *)v174;
                  *(_QWORD *)&v174[24] = *(_QWORD *)v174 + 8 * v116;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<zip_entry_t *>::push_back(v174, &__x);
                  v118 = (uint64_t *)v171[1];
                  v117 = (uint64_t *)v172;
                  v119 = *(char **)&v174[16];
                  while (v118 != v117)
                  {
                    if (v119 == *(char **)&v174[24])
                    {
                      v120 = *(char **)&v174[8];
                      v121 = *(void **)v174;
                      if (*(_QWORD *)&v174[8] <= *(_QWORD *)v174)
                      {
                        if (v119 == *(char **)v174)
                          v128 = 1;
                        else
                          v128 = (uint64_t)&v119[-*(_QWORD *)v174] >> 2;
                        v129 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v128);
                        v132 = v119 - v120;
                        v131 = v119 == v120;
                        v119 = &v129[8 * (v128 >> 2)];
                        if (!v131)
                        {
                          v119 = &v129[8 * (v128 >> 2) + (v132 & 0xFFFFFFFFFFFFFFF8)];
                          v133 = 8 * (v132 >> 3);
                          v134 = &v129[8 * (v128 >> 2)];
                          do
                          {
                            v135 = *(_QWORD *)v120;
                            v120 += 8;
                            *(_QWORD *)v134 = v135;
                            v134 += 8;
                            v133 -= 8;
                          }
                          while (v133);
                        }
                        *(_QWORD *)v174 = v129;
                        *(_QWORD *)&v174[8] = &v129[8 * (v128 >> 2)];
                        *(_QWORD *)&v174[16] = v119;
                        *(_QWORD *)&v174[24] = &v129[8 * v130];
                        LOWORD(v7) = v169;
                        if (v121)
                          operator delete(v121);
                      }
                      else
                      {
                        v122 = (uint64_t)(*(_QWORD *)&v174[8] - *(_QWORD *)v174) >> 3;
                        if (v122 >= -1)
                          v123 = v122 + 1;
                        else
                          v123 = v122 + 2;
                        v124 = *(_QWORD *)&v174[8] - 8 * (v123 >> 1);
                        v125 = (size_t)&v119[-*(_QWORD *)&v174[8]];
                        if (v119 != *(char **)&v174[8])
                        {
                          v126 = (void *)(*(_QWORD *)&v174[8] - 8 * (v123 >> 1));
                          memmove(v126, *(const void **)&v174[8], v125);
                          v124 = (uint64_t)v126;
                          v119 = v120;
                        }
                        v127 = &v119[-8 * (v123 >> 1)];
                        v119 = (char *)(v124 + v125);
                        *(_QWORD *)&v174[8] = v127;
                        *(_QWORD *)&v174[16] = v124 + v125;
                        LOWORD(v7) = v169;
                      }
                    }
                    v136 = *v118++;
                    *(_QWORD *)v119 = v136;
                    v119 = (char *)(*(_QWORD *)&v174[16] + 8);
                    *(_QWORD *)&v174[16] += 8;
                    v117 = (uint64_t *)v172;
                  }
                  v137 = v171[0];
                  *(_OWORD *)v171 = *(_OWORD *)v174;
                  *(_QWORD *)&v172 = v119;
                  *((_QWORD *)&v172 + 1) = *(_QWORD *)&v174[24];
                  v138 = 21;
                  if (&v119[-*(_QWORD *)&v174[8]] != (char *)8)
                    v138 = v173.i64[0] + 42;
                  v173.i64[0] = v138;
                  if (v137)
                    operator delete(v137);
                  v10 = v168;
                }
                else
                {
                  if (v171[1] == v171[0])
                  {
                    *(_QWORD *)v174 = operator new(0xFC0uLL);
                    std::__split_buffer<zip_entry_t *>::push_back(v171, v174);
                    *(_QWORD *)v174 = *(_QWORD *)(v172 - 8);
                    *(_QWORD *)&v172 = v172 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v174 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<zip_entry_t *>::push_front((uint64_t)v171, v174);
                  v141 = 21;
                  if ((_QWORD)v172 - (unint64_t)v171[1] != 8)
                    v141 = v173.i64[0] + 42;
                  v173.i64[0] = v141;
                }
              }
              else
              {
                v173.i64[0] = 42;
                *(_QWORD *)v174 = *(_QWORD *)(v172 - 8);
                *(_QWORD *)&v172 = v172 - 8;
                std::__split_buffer<zip_entry_t *>::push_front((uint64_t)v171, v174);
              }
              v107 = v173.i64[0];
              v108 = (char *)v171[1];
              v109 = (char *)v172;
            }
            v142 = &v108[8 * (v107 / 0x2A)];
            v143 = *(_QWORD *)v142 + 96 * (v107 % 0x2A);
            if (v109 == v108)
              v144 = 0;
            else
              v144 = v143;
            if (v144 == *(_QWORD *)v142)
              v144 = *((_QWORD *)v142 - 1) + 4032;
            v145 = *(_OWORD *)(v95 + 16);
            *(_OWORD *)(v144 - 96) = *(_OWORD *)v95;
            *(_OWORD *)(v144 - 80) = v145;
            v146 = v93 + 96 * v94;
            *(_QWORD *)(v144 - 56) = 0;
            *(_QWORD *)(v144 - 48) = 0;
            *(_QWORD *)(v144 - 64) = 0;
            *(_OWORD *)(v144 - 64) = *(_OWORD *)(v146 + 32);
            *(_QWORD *)(v144 - 48) = *(_QWORD *)(v146 + 48);
            *(_QWORD *)(v146 + 32) = 0;
            *(_QWORD *)(v146 + 40) = 0;
            *(_QWORD *)(v146 + 48) = 0;
            *(_QWORD *)(v144 - 40) = 0;
            *(_QWORD *)(v144 - 32) = 0;
            *(_QWORD *)(v144 - 24) = 0;
            *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
            *(_QWORD *)(v144 - 24) = *(_QWORD *)(v146 + 72);
            *(_QWORD *)(v146 + 56) = 0;
            *(_QWORD *)(v146 + 64) = 0;
            *(_QWORD *)(v146 + 72) = 0;
            v147 = *v97;
            *(_QWORD *)(v144 - 11) = *(_QWORD *)(v95 + 85);
            *(_QWORD *)(v144 - 16) = v147;
            v173 = vaddq_s64(v173, (int64x2_t)xmmword_226130400);
            goto LABEL_188;
          case 0xFFFFFC1F:
LABEL_188:
            std::deque<std::__state<char>>::pop_back(v171);
            goto LABEL_189;
          case 0xFFFFFC20:
            v112 = *(_OWORD *)(v95 + 16);
            *(_OWORD *)v174 = *(_OWORD *)v95;
            *(_OWORD *)&v174[16] = v112;
            v113 = (__int128 **)(v93 + 96 * v94);
            memset(&v174[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:nn180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v174[32], v113[4], v113[5], 0xAAAAAAAAAAAAAAABLL * (((char *)v113[5] - (char *)v113[4]) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v176[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:nn180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, v113[7], v113[8], v113[8] - v113[7]);
            v114 = *v97;
            *(_QWORD *)((char *)&v176[1] + 5) = *(_QWORD *)(v95 + 85);
            v176[1] = v114;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v97 + 24))(*v97, 1, v95);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v176[1] + 24))(v176[1], 0, v174);
            std::deque<std::__state<char>>::push_back(v171, (uint64_t)v174);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v174[32])
            {
              *(_QWORD *)&v174[40] = *(_QWORD *)&v174[32];
              operator delete(*(void **)&v174[32]);
            }
            goto LABEL_189;
          default:
            goto LABEL_214;
        }
        break;
      }
    }
    v149 = (void **)v171[1];
    v150 = (void **)v172;
    v173.i64[1] = 0;
    v151 = v172 - (unint64_t)v171[1];
    if ((unint64_t)v172 - (unint64_t)v171[1] >= 0x11)
    {
      do
      {
        operator delete(*v149);
        v150 = (void **)v172;
        v149 = (void **)((char *)v171[1] + 8);
        v171[1] = v149;
        v151 = v172 - (_QWORD)v149;
      }
      while ((_QWORD)v172 - (_QWORD)v149 > 0x10uLL);
    }
    v152 = v151 >> 3;
    if (v152 == 1)
    {
      v153 = 21;
    }
    else
    {
      if (v152 != 2)
        goto LABEL_206;
      v153 = 42;
    }
    v173.i64[0] = v153;
LABEL_206:
    if (v149 != v150)
    {
      do
      {
        v154 = *v149++;
        operator delete(v154);
      }
      while (v149 != v150);
      if ((void *)v172 != v171[1])
        *(_QWORD *)&v172 = v172 + (((unint64_t)v171[1] - v172 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (v171[0])
      operator delete(v171[0]);
    return;
  }
  v171[0] = 0;
  v171[1] = 0;
  *(_QWORD *)&v172 = 0;
  v12 = *(_QWORD *)(a1 + 40);
  if (!v12)
    goto LABEL_203;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v174 = 0;
  memset(&v174[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v176, 0, 21);
  v13 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v171, (uint64_t)v174);
  v171[1] = v13;
  if (__p[0])
    operator delete(__p[0]);
  v157 = a4;
  if (*(_QWORD *)&v174[32])
    operator delete(*(void **)&v174[32]);
  *((_DWORD *)v13 - 24) = 0;
  *((_QWORD *)v13 - 11) = v10;
  *((_QWORD *)v13 - 10) = v10;
  v166 = a3;
  *((_QWORD *)v13 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), *(unsigned int *)(a1 + 32));
  v163 = 0;
  v165 = 0;
  v159 = 0;
  v161 = 0;
  v155 = 0;
  v162 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  *((_QWORD *)v13 - 2) = v12;
  *((_DWORD *)v13 - 2) = v7;
  *(v13 - 4) = a6;
  while (2)
  {
    v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v170;
    if (!v17)
      goto LABEL_213;
    v18 = *((_QWORD *)v13 - 2);
    v19 = v13 - 96;
    if (v18)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 16))(v18, v13 - 96);
    switch(*(_DWORD *)v19)
    {
      case 0xFFFFFC18:
        v20 = (const char *)*((_QWORD *)v13 - 10);
        if ((v169 & 0x20) != 0 && v20 == v10 || (v169 & 0x1000) != 0 && v20 != v166)
          goto LABEL_21;
        v27 = &v20[-*((_QWORD *)v13 - 11)];
        if ((v14 & (v16 >= (uint64_t)v27)) != 0)
          goto LABEL_88;
        v29 = (__int128 *)*((_QWORD *)v13 - 8);
        v28 = (__int128 *)*((_QWORD *)v13 - 7);
        v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v29) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v161 - (uint64_t)v162) >> 3) >= v30)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v165 - v162) >> 3) >= v30)
          {
            if (v29 == v28)
            {
              v45 = v162;
              v39 = v163;
              v46 = v162;
            }
            else
            {
              v45 = v162;
              v39 = v163;
              v46 = v162;
              v47 = v162;
              do
              {
                *(_OWORD *)v47 = *v29;
                v47[16] = *((_BYTE *)v29 + 16);
                v46 += 24;
                v29 = (__int128 *)((char *)v29 + 24);
                v47 += 24;
              }
              while (v29 != v28);
            }
            v44 = v46 - v45;
            v165 = v45;
          }
          else
          {
            v37 = (__int128 *)((char *)v29 + 8 * ((v165 - v162) >> 3));
            if (v165 != v162)
            {
              v38 = v162;
              do
              {
                *(_OWORD *)v38 = *v29;
                v38[16] = *((_BYTE *)v29 + 16);
                v29 = (__int128 *)((char *)v29 + 24);
                v38 += 24;
              }
              while (v29 != v37);
            }
            if (v37 == v28)
            {
              v39 = v163;
              v40 = v165;
              v41 = v165;
            }
            else
            {
              v39 = v163;
              v40 = v165;
              v41 = v165;
              v42 = v165;
              do
              {
                v43 = *v37;
                *((_QWORD *)v42 + 2) = *((_QWORD *)v37 + 2);
                *(_OWORD *)v42 = v43;
                v42 += 24;
                v37 = (__int128 *)((char *)v37 + 24);
                v41 += 24;
              }
              while (v37 != v28);
            }
            v44 = v41 - v40;
          }
        }
        else
        {
          if (v162)
          {
            operator delete(v162);
            v161 = 0;
          }
          if (v30 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_215;
          v31 = 0x5555555555555556 * (v161 >> 3);
          if (v31 <= v30)
            v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v29) >> 3);
          v32 = 0xAAAAAAAAAAAAAAABLL * (v161 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v31;
          if (v32 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_215;
          v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v32);
          v35 = v33;
          while (v29 != v28)
          {
            v36 = *v29;
            *((_QWORD *)v35 + 2) = *((_QWORD *)v29 + 2);
            *(_OWORD *)v35 = v36;
            v35 += 24;
            v29 = (__int128 *)((char *)v29 + 24);
          }
          v161 = (uint64_t)&v33[24 * v34];
          v44 = v35 - v33;
          v162 = v33;
          v165 = v33;
          v39 = v163;
        }
        v48 = (__int128 *)*((_QWORD *)v13 - 5);
        v49 = (char *)*((_QWORD *)v13 - 4);
        v50 = (v49 - (char *)v48) >> 4;
        if (v50 > (v159 - (uint64_t)v39) >> 4)
        {
          if (v39)
          {
            v164 = v27;
            v51 = v44;
            operator delete(v39);
            v44 = v51;
            v27 = v164;
            v159 = 0;
          }
          if (v49 - (char *)v48 < 0)
            goto LABEL_215;
          v52 = v159 >> 3;
          if (v159 >> 3 <= v50)
            v52 = (v49 - (char *)v48) >> 4;
          v53 = (unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v52;
          if (v53 >> 60)
            goto LABEL_215;
          v54 = v44;
          v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v53);
          v56 = v39;
          v44 = v54;
          while (v48 != (__int128 *)v49)
          {
            v57 = *v48++;
            *(_OWORD *)v56 = v57;
            v56 += 16;
          }
          v159 = (uint64_t)&v39[16 * v55];
          goto LABEL_86;
        }
        v58 = v155;
        v59 = (v155 - v39) >> 4;
        if (v59 >= v50)
        {
          v56 = v39;
          if (v48 != (__int128 *)v49)
          {
            v66 = v39;
            do
            {
              *v66 = *(_QWORD *)v48;
              v66[1] = *((_QWORD *)v48 + 1);
              v56 += 16;
              ++v48;
              v66 += 2;
            }
            while (v48 != (__int128 *)v49);
          }
LABEL_86:
          v65 = v56 - v39;
          v58 = v39;
          goto LABEL_87;
        }
        v60 = &v48[v59];
        if (v155 != v39)
        {
          v61 = v39;
          do
          {
            *v61 = *(_QWORD *)v48;
            v61[1] = *((_QWORD *)v48++ + 1);
            v61 += 2;
          }
          while (v48 != v60);
        }
        v62 = v155;
        if (v60 != (__int128 *)v49)
        {
          v63 = v155;
          do
          {
            v64 = *v60++;
            *(_OWORD *)v63 = v64;
            v63 += 16;
            v62 += 16;
          }
          while (v60 != (__int128 *)v49);
        }
        v65 = v62 - v155;
LABEL_87:
        v163 = v39;
        v165 += v44;
        v155 = &v58[v65];
        v16 = (int64_t)v27;
LABEL_88:
        v67 = v171[1];
        if (v16 == v170)
        {
          v68 = v171[0];
          while (v67 != v68)
          {
            v67 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:nn180100](v67);
          }
          v171[1] = v68;
          v14 = 1;
          v16 = v170;
        }
        else
        {
          v69 = (char *)v171[1] - 96;
          std::allocator<std::__state<char>>::destroy[abi:nn180100]((_QWORD *)v171[1] - 12);
          v171[1] = v69;
          v14 = 1;
        }
LABEL_28:
        v13 = (char *)v171[1];
        if (v171[0] != v171[1])
          continue;
        if ((v14 & 1) != 0)
        {
          v70 = *v157;
          *(_QWORD *)v70 = v10;
          *(_QWORD *)(v70 + 8) = &v10[v16];
          *(_BYTE *)(v70 + 16) = 1;
          v72 = v162;
          v71 = v163;
          if (v165 != v162)
          {
            v73 = v162 + 16;
            v74 = 1;
            do
            {
              v75 = v70 + 24 * v74;
              *(_OWORD *)v75 = *((_OWORD *)v73 - 1);
              v76 = *v73;
              v73 += 24;
              *(_BYTE *)(v75 + 16) = v76;
              v17 = 0xAAAAAAAAAAAAAAABLL * ((v165 - v162) >> 3) > v74++;
            }
            while (v17);
          }
        }
        else
        {
          v72 = v162;
          v71 = v163;
        }
        if (v71)
          operator delete(v71);
        if (v72)
          operator delete(v72);
LABEL_203:
        *(_QWORD *)v174 = v171;
        std::vector<std::__state<char>>::__destroy_vector::operator()[abi:nn180100]((void ***)v174);
        return;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_28;
      case 0xFFFFFC1F:
LABEL_21:
        v21 = (char *)v171[1] - 96;
        std::allocator<std::__state<char>>::destroy[abi:nn180100]((_QWORD *)v171[1] - 12);
        v171[1] = v21;
        goto LABEL_28;
      case 0xFFFFFC20:
        v22 = *((_OWORD *)v13 - 5);
        *(_OWORD *)v174 = *(_OWORD *)v19;
        *(_OWORD *)&v174[16] = v22;
        memset(&v174[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:nn180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v174[32], *((__int128 **)v13 - 8), *((__int128 **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v13 - 7) - *((_QWORD *)v13 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v176[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:nn180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v13 - 5), *((__int128 **)v13 - 4), (uint64_t)(*((_QWORD *)v13 - 4) - *((_QWORD *)v13 - 5)) >> 4);
        v23 = *((_QWORD *)v13 - 2);
        *(_QWORD *)((char *)&v176[1] + 5) = *(_QWORD *)(v13 - 11);
        v176[1] = v23;
        (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v176[1] + 24))(v176[1], 0, v174);
        v24 = (char *)v171[1];
        if (v171[1] >= (void *)v172)
        {
          v171[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v171, (uint64_t)v174);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v25 = *(_OWORD *)&v174[16];
          *(_OWORD *)v171[1] = *(_OWORD *)v174;
          *((_OWORD *)v24 + 1) = v25;
          *((_QWORD *)v24 + 4) = 0;
          *((_QWORD *)v24 + 5) = 0;
          *((_QWORD *)v24 + 6) = 0;
          *((_QWORD *)v24 + 7) = 0;
          *((_OWORD *)v24 + 2) = *(_OWORD *)&v174[32];
          *((_QWORD *)v24 + 6) = *(_QWORD *)&v174[48];
          memset(&v174[32], 0, 24);
          *((_QWORD *)v24 + 8) = 0;
          *((_QWORD *)v24 + 9) = 0;
          *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v24 + 9) = v176[0];
          __p[0] = 0;
          __p[1] = 0;
          v176[0] = 0;
          v26 = v176[1];
          *(_QWORD *)(v24 + 85) = *(_QWORD *)((char *)&v176[1] + 5);
          *((_QWORD *)v24 + 10) = v26;
          v171[1] = v24 + 96;
        }
        if (*(_QWORD *)&v174[32])
        {
          *(_QWORD *)&v174[40] = *(_QWORD *)&v174[32];
          operator delete(*(void **)&v174[32]);
        }
        goto LABEL_28;
      default:
        goto LABEL_214;
    }
  }
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  __int128 v62;
  __n128 result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  _QWORD *v85;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 42 * v6 - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v85 = a1 + 3;
        v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v25);
        v82 = &v81[8 * v6];
        v83 = v82;
        v84 = &v81[8 * v26];
        v80 = operator new(0xFC0uLL);
        std::__split_buffer<zip_entry_t *>::push_back(&v81, &v80);
        v27 = a1[2];
        v28 = v81;
        v29 = v82;
        v31 = v83;
        v30 = v84;
        if (v27 == a1[1])
        {
          v32 = v83;
        }
        else
        {
          do
          {
            if (v29 == v28)
            {
              if (v31 >= v30)
              {
                if (v30 == v28)
                  v35 = 1;
                else
                  v35 = (v30 - v28) >> 2;
                v36 = 2 * v35;
                v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v35);
                v39 = v37;
                v29 = &v37[(v36 + 6) & 0xFFFFFFFFFFFFFFF8];
                v32 = v29;
                v40 = v31 - v28;
                if (v31 != v28)
                {
                  v32 = &v29[v40 & 0xFFFFFFFFFFFFFFF8];
                  v41 = 8 * (v40 >> 3);
                  v42 = v29;
                  v43 = v28;
                  do
                  {
                    v44 = *(_QWORD *)v43;
                    v43 += 8;
                    *(_QWORD *)v42 = v44;
                    v42 += 8;
                    v41 -= 8;
                  }
                  while (v41);
                }
                v30 = &v37[8 * v38];
                if (v28)
                  operator delete(v28);
                v28 = v39;
              }
              else
              {
                v33 = (v30 - v31) >> 3;
                if (v33 >= -1)
                  v34 = v33 + 1;
                else
                  v34 = v33 + 2;
                v32 = &v31[8 * (v34 >> 1)];
                v29 = &v28[8 * (v34 >> 1)];
                if (v31 == v28)
                  v28 = v31;
                else
                  memmove(&v28[8 * (v34 >> 1)], v28, v31 - v28);
              }
            }
            else
            {
              v32 = v31;
            }
            v45 = *(_QWORD *)(v27 - 8);
            v27 -= 8;
            *((_QWORD *)v29 - 1) = v45;
            v29 -= 8;
            v31 = v32;
          }
          while (v27 != a1[1]);
        }
        v60 = (char *)*a1;
        *a1 = v28;
        a1[1] = v29;
        a1[2] = v32;
        a1[3] = v30;
        if (v60)
          operator delete(v60);
        goto LABEL_55;
      }
      if (v23 != v5)
      {
        v81 = (char *)operator new(0xFC0uLL);
        std::__split_buffer<zip_entry_t *>::push_back(a1, &v81);
LABEL_55:
        v4 = (char *)a1[1];
        v9 = a1[5] + a1[4];
        goto LABEL_56;
      }
      v81 = (char *)operator new(0xFC0uLL);
      std::__split_buffer<zip_entry_t *>::push_front((uint64_t)a1, &v81);
      v57 = (_QWORD *)a1[1];
      v5 = (char *)a1[2];
      v59 = *v57;
      v58 = (char *)(v57 + 1);
      v11 = v59;
      a1[1] = v58;
      if (v5 == (char *)a1[3])
      {
        v65 = (uint64_t)&v58[-*a1];
        if ((unint64_t)v58 > *a1)
        {
          v66 = v65 >> 3;
          v15 = v65 >> 3 < -1;
          v67 = (v65 >> 3) + 2;
          if (v15)
            v68 = v67;
          else
            v68 = v66 + 1;
          v69 = -(v68 >> 1);
          v70 = v68 >> 1;
          v71 = &v58[-8 * v70];
          v72 = v5 - v58;
          if (v5 != v58)
          {
            memmove(&v58[-8 * v70], v58, v5 - v58);
            v58 = (char *)a1[1];
          }
          v5 = &v71[v72];
          v22 = &v58[8 * v69];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1)
          v73 = 1;
        else
          v73 = (uint64_t)&v5[-*a1] >> 2;
        v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v73);
        v48 = &v47[8 * (v73 >> 2)];
        v50 = &v47[8 * v74];
        v75 = (uint64_t *)a1[1];
        v5 = v48;
        v76 = a1[2] - (_QWORD)v75;
        if (v76)
        {
          v5 = &v48[v76 & 0xFFFFFFFFFFFFFFF8];
          v77 = 8 * (v76 >> 3);
          v78 = &v47[8 * (v73 >> 2)];
          do
          {
            v79 = *v75++;
            *(_QWORD *)v78 = v79;
            v78 += 8;
            v77 -= 8;
          }
          while (v77);
        }
LABEL_48:
        v56 = (char *)*a1;
        *a1 = v47;
        a1[1] = v48;
        a1[2] = v5;
        a1[3] = v50;
        if (v56)
        {
          operator delete(v56);
          v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_51;
        }
        if (v5 == (char *)*a1)
          v46 = 1;
        else
          v46 = (uint64_t)&v5[-*a1] >> 2;
        v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v46);
        v48 = &v47[8 * (v46 >> 2)];
        v50 = &v47[8 * v49];
        v51 = (uint64_t *)a1[1];
        v5 = v48;
        v52 = a1[2] - (_QWORD)v51;
        if (v52)
        {
          v5 = &v48[v52 & 0xFFFFFFFFFFFFFFF8];
          v53 = 8 * (v52 >> 3);
          v54 = &v47[8 * (v46 >> 2)];
          do
          {
            v55 = *v51++;
            *(_QWORD *)v54 = v55;
            v54 += 8;
            v53 -= 8;
          }
          while (v53);
        }
        goto LABEL_48;
      }
    }
LABEL_51:
    *(_QWORD *)v5 = v11;
    a1[2] += 8;
    goto LABEL_55;
  }
LABEL_56:
  v61 = *(_QWORD *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  v62 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)(v61 + 16) = v62;
  *(_QWORD *)(v61 + 40) = 0;
  *(_QWORD *)(v61 + 48) = 0;
  *(_QWORD *)(v61 + 32) = 0;
  *(_OWORD *)(v61 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v61 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v61 + 56) = 0;
  *(_QWORD *)(v61 + 64) = 0;
  *(_QWORD *)(v61 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v61 + 56) = result;
  *(_QWORD *)(v61 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v64 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v61 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v61 + 80) = v64;
  ++a1[5];
  return result;
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:nn180100]((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  v3 = a1[2];
  v4 = v3 == a1[1];
  v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  v7 = a1[4];
  v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4)
    v5 = 0;
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::sub_match<char *>::compare[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  size_t v10;
  void **v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  void **v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  size_t v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v19, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v16, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v18);
    v5 = v16;
    v4 = v17;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  v6 = SHIBYTE(v21);
  v7 = v19;
  if (v21 >= 0)
    v8 = HIBYTE(v21);
  else
    v8 = v20;
  if (v21 >= 0)
    v9 = &v19;
  else
    v9 = (void **)v19;
  if ((v3 & 0x80u) == 0)
    v10 = v3;
  else
    v10 = v4;
  if ((v3 & 0x80u) == 0)
    v11 = (void **)&v16;
  else
    v11 = v5;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v7);
LABEL_24:
  v14 = v10 < v8;
  if (v8 < v10)
    v14 = -1;
  if (v13)
    return v13;
  else
    return v14;
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  int v10;
  signed int v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  signed int v23;
  uint64_t v24;
  _BYTE v26[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v10 = *(_DWORD *)(a1 + 28);
      v11 = 2 * v10;
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v11)
          v13 = (_DWORD)v8 == v11;
        else
          v13 = 1;
        if (!v13 && (v10 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::init((uint64_t)v26, v12, v11);
          v14 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v14;
          v15 = *(_QWORD *)&v26[16];
          v16 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v26[16] = v16;
          *(_QWORD *)(a1 + 16) = v15;
          v18 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          v17 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v18;
          v19 = v17;
          if (v17)
          {
            v20 = v16 + 16;
            do
            {
              if ((*(_DWORD *)(v20 - 8) & 0x80000000) != 0)
                re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, *(_QWORD *)(v20 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v20 - 16), v20, v20);
              v20 += 24;
              --v19;
            }
            while (v19);
          }
          re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v11)
          v23 = v11;
        else
          v23 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v21 + 24 * v8 + 8) = v22 | 0x80000000;
  v24 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v24 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v24 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_63, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addEmplace<unsigned long long &>(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = a2;
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  v15 = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  if (v15)
  {
    v16 = (id)(v15 + 8);
    v14 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v14 + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  id v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            v21 = *v13;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *v13;
            if (v21)
            {
              v22 = (id)(v21 + 8);
              v12 = *(_QWORD *)(a1 + 8);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  v12 = a2;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  v14 = *a5;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  if (v14)
  {
    v15 = (id)(v14 + 8);
    v13 = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(v13 + 4 * v12) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::ecs2::TransformHelper::computeWorldMatrixForRendering(re::ecs2::TransformHelper *this@<X0>, re::ecs2::TransformComponent **a2@<X1>, _OWORD *a3@<X8>)
{
  if (!this)
    goto LABEL_6;
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  if (re::ecs2::gIsBillboardEnabled)
    (*(void (**)(re::ecs2::TransformHelper *, re::ecs2::TransformComponent **))(*(_QWORD *)this + 56))(this, a2);
  else
LABEL_6:
    re::ecs2::TransformComponent::worldMatrix4x4F(a2, (const re::ecs2::Entity *)1, a3);
}

void re::ecs2::TransformHelper::computeWorldMatrixForRendering(re::ecs2::TransformComponent **this@<X1>, uint64_t a2@<X0>, _OWORD *a3@<X8>)
{
  re::ecs2::TransformHelper *v5;

  if (a2)
  {
    v5 = (re::ecs2::TransformHelper *)re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(a2);
    re::ecs2::TransformHelper::computeWorldMatrixForRendering(v5, this, a3);
  }
  else
  {
    re::ecs2::TransformComponent::worldMatrix4x4F(this, (const re::ecs2::Entity *)1, a3);
  }
}

re::ecs2::PhysicsConstraint *re::ecs2::PhysicsConstraint::PhysicsConstraint(re::ecs2::PhysicsConstraint *this)
{
  id *v2;
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];

  *(_DWORD *)this = 2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &str_110;
  *((_BYTE *)this + 24) = 0;
  v2 = (id *)((char *)this + 32);
  objc_initWeak((id *)this + 4, 0);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  re::ecs2::EntityHandle::reset(v2);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0x3F80000000000000;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = &str_110;
  objc_initWeak((id *)this + 14, 0);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  re::ecs2::EntityHandle::reset((id *)this + 14);
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0x3F80000000000000;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0x3F80000000000000;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0x3F80000000000000;
  *((_OWORD *)this + 15) = xmmword_226130410;
  *((_OWORD *)this + 16) = xmmword_226130420;
  *((_OWORD *)this + 17) = xmmword_226130430;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = &str_110;
  v7[0] = 0;
  v7[1] = &str_110;
  v5 = *((_QWORD *)this + 2);
  v8[0] = *((_QWORD *)this + 1) & 1;
  v8[1] = v5;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &str_110;
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)v7);
  return this;
}

uint64_t re::ecs2::PhysicsConstraint::PhysicsConstraint(uint64_t a1, int a2, uint64_t *a3, id *a4, _OWORD *a5, id *a6, _OWORD *a7, char a8)
{
  unint64_t *v11;
  id *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  __int128 v15;
  __int128 v16;

  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 16) = &str_110;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (unint64_t *)(a1 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  v12 = (id *)(a1 + 32);
  objc_initWeak((id *)(a1 + 32), 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset(v12);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = &str_110;
  objc_initWeak((id *)(a1 + 112), 0);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 112));
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 240) = xmmword_226130410;
  *(_OWORD *)(a1 + 256) = xmmword_226130420;
  *(_OWORD *)(a1 + 272) = xmmword_226130430;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = &str_110;
  *(_DWORD *)a1 = a2;
  re::StringID::operator=(v11, a3);
  re::ecs2::EntityHandle::operator=(v12, a4);
  v15 = a5[1];
  *(_OWORD *)(a1 + 64) = *a5;
  *(_OWORD *)(a1 + 80) = v15;
  re::ecs2::EntityHandle::operator=((id *)(a1 + 112), a6);
  v16 = a7[1];
  *(_OWORD *)(a1 + 144) = *a7;
  *(_OWORD *)(a1 + 160) = v16;
  *(_BYTE *)(a1 + 24) = a8;
  return a1;
}

re::Constraint *re::ecs2::PhysicsConstraint::makeJoint(re::ecs2::PhysicsConstraint *this, re::ecs2::Scene *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  re::Constraint *v8;
  BOOL v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  re::ecs2::PhysicsSimulationService *v27;
  re::ecs2::PhysicsSimulationData *v28;
  uint64_t v30;
  void *v31;
  _QWORD v32[2];

  v4 = re::ecs2::EntityHandle::resolve((id *)this + 4, (uint64_t)a2);
  v5 = *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 336);
  v6 = re::ecs2::EntityHandle::resolve((id *)this + 14, (uint64_t)a2);
  v7 = *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 336);
  v8 = 0;
  if (v5)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    switch(*(_DWORD *)this)
    {
      case 1:
        v8 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                                            + 56))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        break;
      case 2:
        v10 = *((float *)this + 69);
        v11 = *((float *)this + 71);
        v12 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                                    + 72))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        v8 = (re::Constraint *)v12;
        v13 = 3.1416;
        if (v10 <= 3.1416)
          v14 = v10;
        else
          v14 = 3.1416;
        if (v14 < -1.0)
          v14 = -1.0;
        if (v11 <= 3.1416)
          v13 = v11;
        if (v13 < -1.0)
          v13 = -1.0;
        v12[14] = v14;
        v12[15] = v13;
        goto LABEL_19;
      case 3:
        v8 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                                            + 48))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        LODWORD(v15) = *((_DWORD *)this + 70);
        re::HingeJoint::setAngularLimit((uint64_t)v8, v15, *((float *)this + 71));
        break;
      case 4:
        v12 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                                    + 64))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        v8 = (re::Constraint *)v12;
        *((_QWORD *)v12 + 7) = *((_QWORD *)this + 30);
LABEL_19:
        (*(void (**)(float *))(*(_QWORD *)v12 + 56))(v12);
        break;
      case 6:
        v8 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                                            + 88))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        v16 = *(_QWORD *)v8;
        v17 = *((_QWORD *)this + 31);
        v18 = *((_QWORD *)this + 32);
        v19 = *((_QWORD *)this + 33);
        v20 = *((_QWORD *)this + 34);
        v21 = *((_QWORD *)this + 35);
        *((_QWORD *)v8 + 7) = *((_QWORD *)this + 30);
        (*(void (**)(void))(v16 + 56))();
        *((_QWORD *)v8 + 8) = v17;
        (*(void (**)(re::Constraint *))(*(_QWORD *)v8 + 56))(v8);
        *((_QWORD *)v8 + 9) = v18;
        (*(void (**)(re::Constraint *))(*(_QWORD *)v8 + 56))(v8);
        *((_QWORD *)v8 + 10) = v19;
        (*(void (**)(re::Constraint *))(*(_QWORD *)v8 + 56))(v8);
        *((_QWORD *)v8 + 11) = v20;
        (*(void (**)(re::Constraint *))(*(_QWORD *)v8 + 56))(v8);
        *((_QWORD *)v8 + 12) = v21;
        (*(void (**)(re::Constraint *))(*(_QWORD *)v8 + 56))(v8);
        break;
      default:
        break;
    }
    re::StringID::StringID((re::StringID *)&v30, (const StringID *)((char *)this + 8));
    v22 = v30;
    v23 = v31;
    v30 = 0;
    v31 = &str_110;
    v24 = *((_QWORD *)v8 + 3);
    v25 = *((_QWORD *)v8 + 4);
    *((_QWORD *)v8 + 3) = v22;
    *((_QWORD *)v8 + 4) = v23;
    v32[0] = v22 & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
    v32[1] = v25;
    re::StringID::destroyString((re::StringID *)v32);
    re::StringID::destroyString((re::StringID *)&v30);
    v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 7) + 32))(*((_QWORD *)a2 + 7));
    v27 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v26);
    v28 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v27, (const re::ecs2::Entity *)v4);
    if (v28)
      re::PhysicsJointCollection::add((re::ecs2::PhysicsSimulationData *)((char *)v28 + 136), v8);
  }
  return v8;
}

void *re::IntrospectionInfo<float [2]>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  const re::IntrospectionBase *v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  std::__shared_mutex_base *v12;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  {
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [2]>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v4 = re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v4)
      return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
    if (re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized)
    {
LABEL_14:
      v12 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v12);
      return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized = 1;
  v8 = (const re::IntrospectionBase *)re::introspect_float((re *)1, a2);
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [2]>::get(BOOL)::info, v8, 2);
  re::IntrospectionRegistry::add(v9, v10);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<float [2]>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
  if ((BYTE8(v15) & 1) != 0)
    v11 = v16;
  else
    v11 = (char *)&v15 + 9;
  if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  v15 = *((_OWORD *)v8 + 2);
  xmmword_255802FA8 = v14;
  re::StringID::destroyString((re::StringID *)v17);
  if ((a1 & 1) == 0)
    goto LABEL_14;
  return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
}

uint64_t *re::ecs2::allocInfo_PhysicsConstraint(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254116278);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254116278))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116280, 0);
    *(uint64_t *)((char *)&qword_254116290 + 6) = 0;
    qword_254116290 = 0;
    qword_2541162A0 = 0;
    qword_2541162A8 = 0xFFFFFFFFLL;
    qword_254116280 = (uint64_t)&off_24ED7DAA8;
    qword_2541162B0 = (uint64_t)"PhysicsConstraint";
    dword_2541162B8 = 0;
    unk_2541162C0 = 0u;
    unk_2541162D0 = 0u;
    unk_2541162E0 = 0u;
    qword_2541162F0 = 0;
    __cxa_guard_release(&qword_254116278);
  }
  return &qword_254116280;
}

void re::ecs2::initInfo_PhysicsConstraint(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  const re::IntrospectionBase *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  const re::IntrospectionBase *v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  const re::IntrospectionBase *v61;
  void *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  _QWORD v71[2];
  __int128 v72;

  v71[0] = 0x12E83513C6A856C8;
  v71[1] = "PhysicsConstraint";
  re::StringID::destroyString((re::StringID *)v71);
  *((_OWORD *)this + 2) = v72;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_337);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_337);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_PhysicsJointType((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_type";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541162F8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::StringID>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_name";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254116300 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_entityHandleA";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254116308 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v19 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "m_localAnchorPoseA";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x4000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254116310 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::IntrospectionInfo<re::StringID>::get(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "m_pinNameA";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x6000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254116318 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "m_entityHandleB";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x7000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254116320 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v30 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "m_localAnchorPoseB";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x9000000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_254116328 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::IntrospectionInfo<re::StringID>::get(1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "m_pinNameB";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x12000000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254116330 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::introspect_BOOL((re *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "m_collisionEnabled";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x1800000009;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_254116338 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::IntrospectionInfo<float [2]>::get(1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "m_xLinearLimits";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xF00000000ALL;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_254116340 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::IntrospectionInfo<float [2]>::get(1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "m_yLinearLimits";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xF80000000BLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_254116348 = v47;
      v48 = re::introspectionAllocator((re *)v47);
      v50 = re::IntrospectionInfo<float [2]>::get(1, v49);
      v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = "m_zLinearLimits";
      *(_QWORD *)(v51 + 16) = v50;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0x1000000000CLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_254116350 = v51;
      v52 = re::introspectionAllocator((re *)v51);
      v54 = re::IntrospectionInfo<float [2]>::get(1, v53);
      v55 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = "m_xAngularLimits";
      *(_QWORD *)(v55 + 16) = v54;
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 32) = 0x1080000000DLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(_QWORD *)(v55 + 48) = 0;
      *(_QWORD *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_254116358 = v55;
      v56 = re::introspectionAllocator((re *)v55);
      v58 = re::IntrospectionInfo<float [2]>::get(1, v57);
      v59 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 72, 8);
      *(_DWORD *)v59 = 1;
      *(_QWORD *)(v59 + 8) = "m_yAngularLimits";
      *(_QWORD *)(v59 + 16) = v58;
      *(_QWORD *)(v59 + 24) = 0;
      *(_QWORD *)(v59 + 32) = 0x1100000000ELL;
      *(_DWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_254116360 = v59;
      v60 = re::introspectionAllocator((re *)v59);
      v62 = re::IntrospectionInfo<float [2]>::get(1, v61);
      v63 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 72, 8);
      *(_DWORD *)v63 = 1;
      *(_QWORD *)(v63 + 8) = "m_zAngularLimits";
      *(_QWORD *)(v63 + 16) = v62;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 32) = 0x1180000000FLL;
      *(_DWORD *)(v63 + 40) = 0;
      *(_QWORD *)(v63 + 48) = 0;
      *(_QWORD *)(v63 + 56) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_254116368 = v63;
      v64 = re::introspectionAllocator((re *)v63);
      v65 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 72, 8);
      *(_DWORD *)v66 = 1;
      *(_QWORD *)(v66 + 8) = "m_offsetPoseA";
      *(_QWORD *)(v66 + 16) = v65;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0xB000000010;
      *(_DWORD *)(v66 + 40) = 0;
      *(_QWORD *)(v66 + 48) = 0;
      *(_QWORD *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_254116370 = v66;
      v67 = re::introspectionAllocator((re *)v66);
      v68 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v69 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 72, 8);
      *(_DWORD *)v69 = 1;
      *(_QWORD *)(v69 + 8) = "m_offsetPoseB";
      *(_QWORD *)(v69 + 16) = v68;
      *(_QWORD *)(v69 + 24) = 0;
      *(_QWORD *)(v69 + 32) = 0xD000000011;
      *(_DWORD *)(v69 + 40) = 0;
      *(_QWORD *)(v69 + 48) = 0;
      *(_QWORD *)(v69 + 56) = 0;
      *(_DWORD *)(v69 + 64) = 0;
      qword_254116378 = v69;
      __cxa_guard_release(&_MergedGlobals_337);
    }
  }
  *((_QWORD *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 17;
  *((_QWORD *)this + 8) = &qword_2541162F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsConstraint>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsConstraint>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsConstraint>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsConstraint>;
  re::IntrospectionRegistry::add(this, v3);
  v70 = v72;
}

re::ecs2::PhysicsConstraint *re::internal::defaultConstruct<re::ecs2::PhysicsConstraint>(int a1, int a2, re::ecs2::PhysicsConstraint *this)
{
  return re::ecs2::PhysicsConstraint::PhysicsConstraint(this);
}

void re::internal::defaultDestruct<re::ecs2::PhysicsConstraint>(uint64_t a1, uint64_t a2, id *a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 36));
  re::ecs2::EntityHandle::reset(a3 + 14);
  objc_destroyWeak(a3 + 14);
  a3[14] = 0;
  re::StringID::destroyString((re::StringID *)(a3 + 12));
  re::ecs2::EntityHandle::reset(a3 + 4);
  objc_destroyWeak(a3 + 4);
  a3[4] = 0;
  re::StringID::destroyString((re::StringID *)(a3 + 1));
}

void re::internal::defaultDestructV2<re::ecs2::PhysicsConstraint>(id *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 36));
  re::ecs2::EntityHandle::reset(a1 + 14);
  objc_destroyWeak(a1 + 14);
  a1[14] = 0;
  re::StringID::destroyString((re::StringID *)(a1 + 12));
  re::ecs2::EntityHandle::reset(a1 + 4);
  objc_destroyWeak(a1 + 4);
  a1[4] = 0;
  re::StringID::destroyString((re::StringID *)(a1 + 1));
}

uint64_t re::ecs2::introspect_PhysicsConstraint(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsConstraint", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsConstraint, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsConstraint, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsConstraint>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxyScopeService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_338);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_338))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116388, 0);
    *(uint64_t *)((char *)&qword_254116398 + 6) = 0;
    qword_254116398 = 0;
    qword_2541163A8 = 0;
    qword_2541163B0 = 0xFFFFFFFFLL;
    qword_254116388 = (uint64_t)&off_24ED7DAA8;
    qword_2541163B8 = (uint64_t)"VisualProxyScopeService";
    dword_2541163C0 = 0;
    unk_2541163C8 = 0u;
    unk_2541163D8 = 0u;
    unk_2541163E8 = 0u;
    qword_2541163F8 = 0;
    __cxa_guard_release(&_MergedGlobals_338);
  }
  return &qword_254116388;
}

void re::ecs2::initInfo_VisualProxyScopeService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x532BCA60CD03F79ELL;
  v5[1] = "VisualProxyScopeService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VisualProxyScopeService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_VisualProxyScopeService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyScopeService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyScopeService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyScopeService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyScopeService>, this);
}

uint64_t *re::ecs2::allocInfo_PhysicsJointsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254116408);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254116408))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116420, 0);
    *(uint64_t *)((char *)&qword_254116430 + 6) = 0;
    qword_254116430 = 0;
    qword_254116440 = 0;
    qword_254116448 = 0xFFFFFFFFLL;
    qword_254116420 = (uint64_t)&off_24ED7DAA8;
    qword_254116450 = (uint64_t)"PhysicsJointsComponent";
    dword_254116458 = 0;
    unk_254116460 = 0u;
    unk_254116470 = 0u;
    unk_254116480 = 0u;
    qword_254116490 = 0;
    __cxa_guard_release(&qword_254116408);
  }
  return &qword_254116420;
}

void re::ecs2::initInfo_PhysicsJointsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x19C0EC21209AF15ALL;
  v13[1] = "PhysicsJointsComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_339);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_339);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254116410 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::ecs2::introspect_PhysicsJointDefinitionAndRuntimeCollection((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_joints";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254116418 = v11;
      __cxa_guard_release(&_MergedGlobals_339);
    }
  }
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254116410;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsJointsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsJointsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsJointsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsJointsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsJointsComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = &off_24ED70208;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &off_24ED68990;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsJointsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsJointsComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = &off_24ED70208;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &off_24ED68990;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsJointsComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsJointsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsJointsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsJointsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsJointsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsJointsComponent>, this);
}

void re::ecs2::PhysicsJointsComponent::~PhysicsJointsComponent(re::ecs2::PhysicsJointsComponent *this)
{
  *(_QWORD *)this = &off_24ED70208;
  *((_QWORD *)this + 4) = &off_24ED68990;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 80);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)this + 40);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED70208;
  *((_QWORD *)this + 4) = &off_24ED68990;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 80);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)this + 40);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::ecs2::PhysicsJointsComponent::addJoint(re::ecs2::PhysicsJointsComponent *this, const re::ecs2::PhysicsJointDefinition *a2)
{
  uint64_t v3;
  uint64_t v4;
  const re::ecs2::Scene *v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = *(_QWORD *)(v3 + 24);
    }
    while (v3);
    v5 = *(const re::ecs2::Scene **)(v4 + 16);
  }
  else
  {
    v5 = 0;
  }
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::addJoint((re::ecs2::PhysicsJointsComponent *)((char *)this + 32), a2, v5);
  return re::ecs2::Component::markDirty(this);
}

_QWORD *re::ecs2::PhysicsJointsComponent::setJoints(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v4 = a1[2];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    v6 = *(char **)(v5 + 16);
  }
  else
  {
    v6 = 0;
  }
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::setJoints((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)(a1 + 4), a2, a3, v6);
  return re::ecs2::Component::markDirty(a1);
}

_QWORD *re::ecs2::PhysicsJointsComponent::removeFromSimulation(re::ecs2::PhysicsJointsComponent *this)
{
  unint64_t v2;

  if (*((_QWORD *)this + 12))
  {
    v2 = 0;
    do
      re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint((re::ecs2::PhysicsJointsComponent *)((char *)this + 32), v2++, 0);
    while (*((_QWORD *)this + 12) > v2);
  }
  return re::ecs2::Component::markDirty(this);
}

uint64_t re::ecs2::PhysicsJointsComponentStateImpl::deleteDeferredDeletedJoints(uint64_t this, re::ecs2::PhysicsSimulationService *a2, const re::ecs2::Scene *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    this = (*(uint64_t (**)(uint64_t, re::ecs2::PhysicsSimulationService *, const re::ecs2::Scene *))(*(_QWORD *)this + 32))(this, a2, a3);
    if (this)
    {
      v3 = this;
      this = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v9, this, 0);
      v4 = v3 == v9 && (unsigned __int16)v10 == 0xFFFFLL;
      if (!v4 || (v10 & 0xFFFF0000) != 4294901760)
      {
        do
        {
          v6 = *(_QWORD *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v9)
                         + 8);
          if (v6)
            re::PhysicsJointCollection::deleteDeferredDeletedJoints((re::PhysicsJointCollection *)(v6 + 136));
          this = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v9);
        }
        while (v9 != v3 || (unsigned __int16)v10 != 0xFFFF || WORD1(v10) != 0xFFFF);
      }
    }
  }
  return this;
}

BOOL re::ecs2::PhysicsJointsComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const re::ecs2::Scene *v12;
  const re::ecs2::Scene *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  re::ecs2::Scene *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  re::ecs2::PhysicsSimulationData *v29;
  re::PhysicsSimulation *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE v39[16];
  uint64_t v40[2];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11)))
  {
    re::ecs2::PhysicsJointsComponentStateImpl::deleteDeferredDeletedJoints(v10, *(re::ecs2::PhysicsSimulationService **)(a3 + 8), v12);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v36, a5, 0);
    v15 = v36;
    v14 = v37;
    v36 = a4;
    v37 = v15;
    v38 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
        v17 = *(_QWORD *)v16;
        v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
        if (v18)
        {
          v19 = *(_QWORD *)(*(_QWORD *)v16 + 16);
          do
          {
            v20 = v19;
            v19 = *(_QWORD *)(v19 + 24);
          }
          while (v19);
          v21 = *(re::ecs2::Scene **)(v20 + 16);
          do
          {
            v22 = v18;
            v18 = *(_QWORD *)(v18 + 24);
          }
          while (v18);
          v23 = *(_QWORD *)(v22 + 16);
          if (v23)
          {
            v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 56) + 32))(*(_QWORD *)(v23 + 56));
            v25 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v24);
            if (v25)
            {
              v26 = v25;
              v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
              v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 40))(v26, v23);
              v40[0] = v27;
              v40[1] = v28;
              if (v28)
              {
                v29 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v40, *(_QWORD *)(v17 + 16));
                if (v29)
                {
                  v30 = (re::PhysicsSimulation *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v29);
                  v31 = 0;
                  if (v30 && v21)
                    v31 = *(_BYTE *)(*(_QWORD *)(v17 + 16) + 288) & 1;
                  goto LABEL_21;
                }
              }
            }
          }
          v30 = 0;
        }
        else
        {
          v30 = 0;
          v21 = 0;
        }
        v31 = 0;
LABEL_21:
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::auditAndSyncRuntimeJoints((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)(v17 + 32), v31, v30, v21);
        v32 = v36;
        v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v37);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v32, v33, *(_QWORD *)(a3 + 48));
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v37);
      }
      while (v37 != a5 || (unsigned __int16)v38 != 0xFFFF || WORD1(v38) != 0xFFFF);
    }
    re::ecs2::PhysicsJointsComponentStateImpl::deleteDeferredDeletedJoints(v10, *(re::ecs2::PhysicsSimulationService **)(a3 + 8), v13);
    v34 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v34 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
  return v34;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t *re::ecs2::allocInfo_TimebaseComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_340);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_340))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541164C0, 0);
    *(uint64_t *)((char *)&qword_2541164D0 + 6) = 0;
    qword_2541164D0 = 0;
    qword_2541164E0 = 0;
    qword_2541164E8 = 0xFFFFFFFFLL;
    qword_2541164C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541164F0 = (uint64_t)"TimebaseComponent";
    dword_2541164F8 = 0;
    unk_254116500 = 0u;
    unk_254116510 = 0u;
    unk_254116520 = 0u;
    qword_254116530 = 0;
    __cxa_guard_release(&_MergedGlobals_340);
  }
  return &qword_2541164C0;
}

void re::ecs2::initInfo_TimebaseComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x3115163BF759E6BELL;
  v13[1] = "TimebaseComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_2541164A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541164A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541164B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_TimebaseTree((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "tree";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2541164B8 = v11;
      __cxa_guard_release(&qword_2541164A0);
    }
  }
  *((_QWORD *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541164B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::TimebaseComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::TimebaseComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TimebaseComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TimebaseComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

__n128 re::internal::defaultConstruct<re::ecs2::TimebaseComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  __n128 *v4;
  __n128 result;
  unint64_t v6;

  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59E80;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 68) = 0x7FFFFFFFLL;
  v4 = (__n128 *)MEMORY[0x24BDC0D88];
  *(_QWORD *)(v3 + 80) = 0;
  result = *v4;
  *(__n128 *)(v3 + 88) = *v4;
  v6 = v4[1].n128_u64[0];
  *(_QWORD *)(v3 + 104) = v6;
  *(__n128 *)(v3 + 112) = result;
  *(_BYTE *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 128) = v6;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_BYTE *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::TimebaseComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

__n128 re::internal::defaultConstructV2<re::ecs2::TimebaseComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  __n128 *v2;
  __n128 result;
  unint64_t v4;

  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59E80;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 68) = 0x7FFFFFFFLL;
  v2 = (__n128 *)MEMORY[0x24BDC0D88];
  *(_QWORD *)(v1 + 80) = 0;
  result = *v2;
  *(__n128 *)(v1 + 88) = *v2;
  v4 = v2[1].n128_u64[0];
  *(_QWORD *)(v1 + 104) = v4;
  *(__n128 *)(v1 + 112) = result;
  *(_BYTE *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 128) = v4;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TimebaseComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_TimebaseComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TimebaseComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TimebaseComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TimebaseComponent>, this);
}

uint64_t *re::ecs2::allocInfo_TimebaseSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541164A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541164A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116538, 0);
    *(uint64_t *)((char *)&qword_254116548 + 6) = 0;
    qword_254116548 = 0;
    qword_254116558 = 0;
    qword_254116560 = 0xFFFFFFFFLL;
    qword_254116538 = (uint64_t)&off_24ED7DAA8;
    qword_254116568 = (uint64_t)"TimebaseSystem";
    dword_254116570 = 0;
    xmmword_254116578 = 0u;
    unk_254116588 = 0u;
    xmmword_254116598 = 0u;
    qword_2541165A8 = 0;
    __cxa_guard_release(&qword_2541164A8);
  }
  return &qword_254116538;
}

void re::ecs2::initInfo_TimebaseSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xA77DDFB789D60E1ALL;
  v5[1] = "TimebaseSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_TimebaseSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::TimebaseSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::TimebaseSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TimebaseSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TimebaseSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::TimebaseSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED70310;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::TimebaseSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::TimebaseSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED70310;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::TimebaseSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_TimebaseSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TimebaseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TimebaseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TimebaseSystem>, this);
}

uint64_t re::ecs2::TimebaseComponent::getTimebaseService(re::ecs2::TimebaseComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  do
  {
    v2 = v1;
    v1 = *(_QWORD *)(v1 + 24);
  }
  while (v1);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 56);
  if (!v4)
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  return re::ServiceLocator::serviceOrNull<re::TimebaseService>(v5);
}

uint64_t re::ecs2::TimebaseSystem::willAddSystemToECSService(re::ecs2::TimebaseSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v2);
  *((_QWORD *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::TimebaseSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

double re::ecs2::TimebaseSystem::willAddSceneToECSService(re::ecs2::TimebaseSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  double result;
  re::ecs2::TimebaseSystem *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v5 = this;
    v6 = re::ecs2::TimebaseSystem::willRemoveComponents;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)&v5);
    v5 = this;
    v6 = re::ecs2::TimebaseSystem::didAddComponents;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 128), (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::TimebaseSystem::willRemoveSceneFromECSService(re::ecs2::TimebaseSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v4 = this;
    *((_QWORD *)&v4 + 1) = re::ecs2::TimebaseSystem::willRemoveComponents;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v4);
    *(_QWORD *)&v4 = this;
    *((_QWORD *)&v4 + 1) = re::ecs2::TimebaseSystem::didAddComponents;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 128, &v4);
  }
}

uint64_t re::ecs2::TimebaseSystem::willRemoveComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 104))
      v5 = a4 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 104) + 56))(*(_QWORD *)(a1 + 104), v8 + 32, 0);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 88))(*(_QWORD *)(a1 + 104), v8 + 32);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return 0;
}

uint64_t re::ecs2::TimebaseSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 104))
      v5 = a4 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v7 = 8 * a4;
      v8 = MEMORY[0x24BDAC760];
      do
      {
        v9 = *a3++;
        v10 = *(_QWORD *)(a1 + 104);
        v12[0] = v8;
        v12[1] = 3221225472;
        v12[2] = ___ZN2re4ecs214TimebaseSystem16didAddComponentsEPNS0_24SceneComponentCollectionINS0_17TimebaseComponentEEENS_5SliceIPS3_EE_block_invoke;
        v12[3] = &__block_descriptor_40_e9_v16__0_v8l;
        v12[4] = v9;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 56))(v10, v9 + 32, v12);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return 0;
}

void ___ZN2re4ecs214TimebaseSystem16didAddComponentsEPNS0_24SceneComponentCollectionINS0_17TimebaseComponentEEENS_5SliceIPS3_EE_block_invoke(uint64_t a1)
{
  const re::ecs2::Component *v1;
  uint64_t v2;
  re::ecs2::NetworkComponent *v3;

  v1 = *(const re::ecs2::Component **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 2);
  if (v2)
  {
    v3 = *(re::ecs2::NetworkComponent **)(v2 + 200);
    if (v3)
      re::ecs2::NetworkComponent::markDirty(v3, v1);
  }
}

uint64_t re::ecs2::TimebaseSystem::update(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  re *isStatisticCollectionEnabled;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  re::ecs2::SceneComponentTable *v13;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  re::ecs2::NetworkComponent *v20;
  uint64_t OwnerPeerID;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33[2];
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 40))
  {
    v2 = result;
    if (*(_QWORD *)(result + 104))
    {
      v4 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v33);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v4);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
        v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v8 = v7 ? *(_QWORD *)(v7 + 24) : 0;
        v9 = *(int64x2_t **)(v6 + 152);
        if (v9)
        {
          v10 = v9[592].u64[0];
          if (v10 >= v8)
            v10 = v8;
          v9[592].i64[0] = v10;
          v11 = v9[592].u64[1];
          if (v11 <= v8)
            v11 = v8;
          v9[592].i64[1] = v11;
          v12 = vdupq_n_s64(1uLL);
          v12.i64[0] = v8;
          v9[593] = vaddq_s64(v9[593], v12);
          *(_BYTE *)(v6 + 184) = 0;
        }
      }
      v13 = (re::ecs2::SceneComponentTable *)(a2 + 200);
      re::ecs2::SceneComponentTable::get(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v32, 3119, v2);
      v14 = (re *)re::ecs2::SceneComponentTable::get(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v15 = *((_QWORD *)v14 + 3);
      if (v15)
      {
        v16 = (uint64_t *)*((_QWORD *)v14 + 5);
        for (i = 8 * v15; i; i -= 8)
        {
          v18 = *v16;
          v19 = *(_QWORD *)(*v16 + 16);
          if (v19)
          {
            v20 = *(re::ecs2::NetworkComponent **)(v19 + 200);
            if (v20)
            {
              if (*((_QWORD *)v20 + 4))
                OwnerPeerID = RESyncableGetOwnerPeerID();
              else
                OwnerPeerID = 0;
              v14 = (re *)re::ecs2::NetworkComponent::owningProcessType(v20);
              LOBYTE(v20) = (_BYTE)v14;
            }
            else
            {
              OwnerPeerID = 0;
            }
          }
          else
          {
            OwnerPeerID = 0;
            LOBYTE(v20) = 0;
          }
          if (*(_QWORD *)(v18 + 168) != *(_QWORD *)(v18 + 80) && *(_BYTE *)(v18 + 160))
          {
            re::TimebaseLog(v14);
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              v23 = *(_QWORD *)(v18 + 168);
              v24 = *(_QWORD *)(v18 + 80);
              *(_DWORD *)buf = 134218752;
              v35 = v18;
              v36 = 2048;
              v37 = OwnerPeerID;
              v38 = 2048;
              v39 = v23;
              v40 = 2048;
              v41 = v24;
              _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "removing timebase component %p (owner %llu) with registered parent ID %llu and desired parent ID %llu", buf, 0x2Au);
            }

            v14 = (re *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 104) + 88))(*(_QWORD *)(v2 + 104), v18 + 32);
            *(_BYTE *)(v18 + 160) = 0;
            *(_QWORD *)(v18 + 168) = 0;
          }
          if (!OwnerPeerID && !*(_QWORD *)(v18 + 80))
          {
LABEL_40:
            if (*(_BYTE *)(v18 + 160))
            {
              re::TimebaseLog(v14);
              v30 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                v31 = *(_QWORD *)(v18 + 168);
                *(_DWORD *)buf = 134218240;
                v35 = v18;
                v36 = 2048;
                v37 = v31;
                _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "removing locally-owned timebase component %p with registered parent ID %llu", buf, 0x16u);
              }

              v14 = (re *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 104) + 88))(*(_QWORD *)(v2 + 104), v18 + 32);
              *(_BYTE *)(v18 + 160) = 0;
              *(_QWORD *)(v18 + 168) = 0;
            }
            goto LABEL_44;
          }
          if (*(_BYTE *)(v18 + 160))
          {
            if (OwnerPeerID)
              goto LABEL_44;
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 104) + 88))(*(_QWORD *)(v2 + 104), v18 + 32);
            v25 = (re *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 104) + 80))(*(_QWORD *)(v2 + 104), v18 + 32);
            *(_BYTE *)(v18 + 160) = (_BYTE)v25;
            if ((_DWORD)v25)
              v26 = *(_QWORD *)(v18 + 80);
            else
              v26 = 0;
            *(_QWORD *)(v18 + 168) = v26;
            re::TimebaseLog(v25);
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              v28 = *(_QWORD *)(v18 + 168);
              v29 = *(_QWORD *)(v18 + 80);
              *(_DWORD *)buf = 134218752;
              v35 = v18;
              v36 = 2048;
              v37 = OwnerPeerID;
              v38 = 2048;
              v39 = v28;
              v40 = 2048;
              v41 = v29;
              _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_DEFAULT, "removed and re-added timebase component %p (owner %llu) with new registered parent ID %llu and desired parent ID %llu", buf, 0x2Au);
            }

            if (OwnerPeerID)
              goto LABEL_44;
          }
          if (!*(_QWORD *)(v18 + 80))
            goto LABEL_40;
LABEL_44:
          *(_BYTE *)(v18 + 152) = (_BYTE)v20;
          ++v16;
        }
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v32);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v33);
    }
  }
  return result;
}

void re::ecs2::TimebaseSystem::~TimebaseSystem(re::ecs2::TimebaseSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::TimebaseSystem::typeInfo(re::ecs2::TimebaseSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TimebaseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TimebaseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TimebaseSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::introspect_RenderPassGroupActiveState(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541165B8);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541165B8);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Always";
      qword_2541165F8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Never";
      qword_254116600 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "DuringFade";
      qword_254116608 = v32;
      __cxa_guard_release(&qword_2541165B8);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541165C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541165C0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254116628, "RenderPassGroupActiveState", 1, 1, 1, 1);
    qword_254116628 = (uint64_t)&off_24ED7D9E8;
    qword_254116668 = (uint64_t)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    dword_254116638 = 9;
    __cxa_guard_release(&qword_2541165C0);
  }
  if ((_MergedGlobals_341 & 1) == 0)
  {
    _MergedGlobals_341 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254116628, a2);
    v34 = 0xB4A8E64523292C66;
    v35 = "RenderPassGroupActiveState";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_254116668;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_254116648 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderPassGroupActiveState", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

re::ecs2::RenderPassGroupComponent *re::ecs2::RenderPassGroupComponent::RenderPassGroupComponent(re::ecs2::RenderPassGroupComponent *this)
{
  uint64_t v2;
  _QWORD v4[2];

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED70398;
  *(_WORD *)(v2 + 25) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  re::ecs2::EntityFactory::instance((re::ecs2::EntityFactory *)v2);
  uuid_generate_random((unsigned __int8 *)v4);
  *((_QWORD *)this + 4) = (v4[1] + (v4[0] << 6) + (v4[0] >> 2) - 0x61C8864680B583E9) ^ v4[0];
  return this;
}

uint64_t *re::ecs2::allocInfo_RenderPassGroupComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541165C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541165C8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116670, 0);
    *(uint64_t *)((char *)&qword_254116680 + 6) = 0;
    qword_254116680 = 0;
    qword_254116690 = 0;
    qword_254116698 = 0xFFFFFFFFLL;
    qword_254116670 = (uint64_t)&off_24ED7DAA8;
    qword_2541166A0 = (uint64_t)"RenderPassGroupComponent";
    dword_2541166A8 = 0;
    unk_2541166B0 = 0u;
    unk_2541166C0 = 0u;
    xmmword_2541166D0 = 0u;
    qword_2541166E0 = 0;
    __cxa_guard_release(&qword_2541165C8);
  }
  return &qword_254116670;
}

void re::ecs2::initInfo_RenderPassGroupComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x58E548ED432D180ALL;
  v17[1] = "RenderPassGroupComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_2541165D0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541165D0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254116610 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspect_RenderPassGroupActiveState((re *)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "activeState";
      *(_QWORD *)(v11 + 16) = &qword_254116628;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254116618 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_BOOL((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "renderOnTop";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254116620 = v15;
      __cxa_guard_release(&qword_2541165D0);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254116610;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderPassGroupComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderPassGroupComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderPassGroupComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderPassGroupComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

re::ecs2::RenderPassGroupComponent *re::internal::defaultConstruct<re::ecs2::RenderPassGroupComponent>(int a1, int a2, re::ecs2::RenderPassGroupComponent *this)
{
  return re::ecs2::RenderPassGroupComponent::RenderPassGroupComponent(this);
}

void *re::internal::defaultDestruct<re::ecs2::RenderPassGroupComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::RenderPassGroupComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RenderPassGroupComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderPassGroupComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderPassGroupComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderPassGroupComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderPassGroupComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RenderPassGroupReferenceComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541165D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541165D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541166E8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541166F8 = 0;
    qword_254116708 = 0;
    qword_254116710 = 0xFFFFFFFFLL;
    qword_2541166E8 = (uint64_t)&off_24ED7DAA8;
    qword_254116718 = (uint64_t)"RenderPassGroupReferenceComponent";
    dword_254116720 = 0;
    xmmword_254116728 = 0u;
    unk_254116738 = 0u;
    xmmword_254116748 = 0u;
    qword_254116758 = 0;
    __cxa_guard_release(&qword_2541165D8);
  }
  return &qword_2541166E8;
}

void re::ecs2::initInfo_RenderPassGroupReferenceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x60306C480623F7D4;
  v14[1] = "RenderPassGroupReferenceComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_2541165E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541165E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541165E8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "owner";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541165F0 = v12;
      __cxa_guard_release(&qword_2541165E0);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541165E8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderPassGroupReferenceComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderPassGroupReferenceComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderPassGroupReferenceComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderPassGroupReferenceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::RenderPassGroupReferenceComponent>(int a1, int a2, ArcSharedObject *this)
{
  id *v4;

  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v4 = (id *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = &off_24ED59F00;
  objc_initWeak(v4, 0);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  re::ecs2::EntityHandle::reset(v4);
}

void *re::internal::defaultDestruct<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;

  v4 = (id *)(a3 + 32);
  re::ecs2::EntityHandle::reset((id *)(a3 + 32));
  objc_destroyWeak(v4);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void re::internal::defaultConstructV2<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59F00;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset(v2);
}

void *re::internal::defaultDestructV2<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1)
{
  id *v2;

  v2 = (id *)(a1 + 32);
  re::ecs2::EntityHandle::reset((id *)(a1 + 32));
  objc_destroyWeak(v2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_RenderPassGroupReferenceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderPassGroupReferenceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderPassGroupReferenceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderPassGroupReferenceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderPassGroupReferenceComponent>, this);
}

void re::ecs2::RenderPassGroupComponent::~RenderPassGroupComponent(re::ecs2::RenderPassGroupComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::MaterialParameterVariant::alloc(re::ecs2::MaterialParameterVariant *this)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  v1 = *(unsigned __int8 *)this;
  if (v1 == 50)
    v2 = 16;
  else
    v2 = 0;
  if (v1 == 49)
    v3 = 9;
  else
    v3 = v2;
  if (v1 == 48)
    v4 = 4;
  else
    v4 = 0;
  if (v1 == 34)
    v5 = 4;
  else
    v5 = v4;
  if (*(unsigned __int8 *)this <= 0x30u)
    v3 = v5;
  if (v1 == 33)
    v6 = 3;
  else
    v6 = 0;
  if (v1 == 32)
    v7 = 2;
  else
    v7 = v6;
  if (v1 == 1)
    v8 = 1;
  else
    v8 = v7;
  if (*(unsigned __int8 *)this <= 0x21u)
    return v8;
  else
    return v3;
}

void re::internal::defaultConstruct<re::ecs2::MaterialParameterVariant>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = 0;
}

void re::internal::defaultDestruct<re::ecs2::MaterialParameterVariant>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
}

uint64_t re::internal::defaultConstructV2<re::ecs2::MaterialParameterVariant>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::MaterialParameterVariant>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
}

uint64_t re::ecs2::MaterialOverride::MaterialOverride(uint64_t a1, const re::AssetHandle *a2)
{
  uint64_t v4[3];

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v4, a2);
  re::ecs2::MaterialOverride::setMaterialOrDefinition((uint64_t *)a1, v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return a1;
}

void re::ecs2::MaterialOverride::setMaterialOrDefinition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  re::AssetHandle *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v2 = a2[1];
  if (a1[7] != v2 && a1[10] != v2)
  {
    v5 = (re::AssetHandle *)(a1 + 6);
    v6 = a1 + 9;
    if (v2)
    {
      v7 = *(uint64_t **)(v2 + 264);
      v8 = re::MaterialAsset::assetType((re::MaterialAsset *)a1);
      if (v7 == v8)
      {
        re::AssetHandle::operator=(a1 + 6, a2);
        if (*v6)
        {

          *v6 = 0;
        }
        a1[10] = 0;
        v9 = a1[7];
        if (!v9)
          goto LABEL_24;
        v10 = atomic_load((unsigned int *)(v9 + 704));
        goto LABEL_20;
      }
    }
    else
    {
      v8 = re::MaterialAsset::assetType((re::MaterialAsset *)a1);
    }
    v11 = a2[1];
    if (!v11)
    {
      re::MaterialDefinitionAsset::assetType((re::MaterialDefinitionAsset *)v8);
      return;
    }
    v12 = *(uint64_t **)(v11 + 264);
    if (v12 == re::MaterialDefinitionAsset::assetType((re::MaterialDefinitionAsset *)v8) && a1[10] != a2[1])
    {
      v13 = a1[7];
      if (v13)
      {
        v14 = atomic_load((unsigned int *)(v13 + 704));
        if (v14 == 2)
        {
          if (*(_QWORD *)v5)
          {

            *(_QWORD *)v5 = 0;
          }
          a1[7] = 0;
        }
      }
      re::AssetHandle::operator=(a1 + 9, a2);
      v15 = a1[10];
      if (!v15)
      {
        v5 = (re::AssetHandle *)(a1 + 9);
        goto LABEL_24;
      }
      v10 = atomic_load((unsigned int *)(v15 + 704));
      v5 = (re::AssetHandle *)(a1 + 9);
LABEL_20:
      if (v10 == 2)
        return;
LABEL_24:
      re::AssetHandle::loadAsync(v5);
    }
  }
}

void re::ecs2::MaterialOverride::setFloat(re::ecs2::MaterialOverride *this, const char *a2, float a3)
{
  int v5;
  _BYTE v6[4];
  int v7;
  _QWORD v8[3];
  StringID v9;
  float __src;

  __src = a3;
  *(_QWORD *)&v9.var0 = 0;
  v9.var1 = (char *)&str_110;
  memset(v8, 0, sizeof(v8));
  v6[0] = 1;
  v5 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v6);
  if (v5)
    memcpy(&v7, &__src, (4 * v5));
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)this, &v9, (uint64_t)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::StringID::destroyString((re::StringID *)&v9);
}

uint64_t re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 120 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 120 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 120 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = v10 + 120 * v9;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a3;
  v15 = *(_OWORD *)(a3 + 16);
  v16 = *(_OWORD *)(a3 + 32);
  v17 = *(_OWORD *)(a3 + 48);
  *(_DWORD *)(v14 + 88) = *(_DWORD *)(a3 + 64);
  *(_OWORD *)(v14 + 72) = v17;
  *(_OWORD *)(v14 + 56) = v16;
  *(_OWORD *)(v14 + 40) = v15;
  re::AssetHandle::operator=((uint64_t *)(v14 + 96), (uint64_t *)(a3 + 72));
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 120 * v9;
  return v12 + 24;
}

void re::ecs2::MaterialOverride::floatValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  re::MaterialParameterBlock *v14;
  uint64_t v15;
  char v16;
  const char *v17;
  int v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char v24;

  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v22 = 2 * v6;
  v23 = a2;
  v10 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v22);
  re::StringID::destroyString((re::StringID *)&v22);
  if (v10 && (v11 = *v10, v11 == 1))
  {
    v12 = *((_DWORD *)v10 + 1);
  }
  else
  {
    v13 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (!v13)
      goto LABEL_23;
    v14 = *(re::MaterialParameterBlock **)(v13 + 1672);
    if (a2)
    {
      v15 = *a2;
      if (*a2)
      {
        v16 = a2[1];
        if (v16)
        {
          v17 = a2 + 2;
          do
          {
            v15 = 31 * v15 + v16;
            v18 = *(unsigned __int8 *)v17++;
            v16 = v18;
          }
          while (v18);
        }
      }
    }
    else
    {
      v15 = 0;
    }
    v20[0] = 2 * v15;
    v20[1] = a2;
    v21 = v15 & 0x7FFFFFFFFFFFFFFFLL;
    re::MaterialParameterBlock::handle(v14, &v21, (uint64_t)&v22);
    v21 = 0;
    re::StringID::destroyString((re::StringID *)v20);
    if ((BYTE4(v23) & 7) != 1 || v24 != 1)
    {
LABEL_23:
      *(_BYTE *)a3 = 0;
      return;
    }
    v12 = *(_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v14, (uint64_t)&v22);
    LOBYTE(v11) = 1;
  }
  *(_BYTE *)a3 = v11;
  *(_DWORD *)(a3 + 4) = v12;
}

uint64_t re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 120 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 120 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 120 * v4 + 24;
}

void re::ecs2::MaterialOverride::setVector2F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  int v5;
  _BYTE v6[4];
  int v7;
  _QWORD v8[3];
  StringID v9;
  uint64_t __src;

  *(_QWORD *)&v9.var0 = 0;
  v9.var1 = (char *)&str_110;
  __src = a3;
  memset(v8, 0, sizeof(v8));
  v6[0] = 32;
  v5 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v6);
  if (v5)
    memcpy(&v7, &__src, (4 * v5));
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v9, (uint64_t)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::StringID::destroyString((re::StringID *)&v9);
}

void re::ecs2::MaterialOverride::vector2FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::MaterialParameterBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char v18;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = &str_110;
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v16 = 2 * v6;
  v17 = a2;
  v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v16);
  re::StringID::destroyString((re::StringID *)&v16);
  if (v10 && *(_BYTE *)v10 == 32)
  {
    v11 = *(_QWORD *)(v10 + 4);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v11;
  }
  else
  {
    v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v12
      && (v13 = *(re::MaterialParameterBlock **)(v12 + 1672),
          v15 = v19[0] >> 1,
          re::MaterialParameterBlock::handle(v13, &v15, (uint64_t)&v16),
          v15 = 0,
          (BYTE4(v17) & 7) == 1)
      && v18 == 32)
    {
      v14 = *(_QWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)&v16);
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v14;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v19);
}

void re::ecs2::MaterialOverride::setVector3F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  _BYTE v7[4];
  int v8;
  _QWORD v9[3];
  StringID v10;
  _QWORD __src[2];

  __src[0] = a3;
  __src[1] = a4;
  *(_QWORD *)&v10.var0 = 0;
  v10.var1 = (char *)&str_110;
  memset(v9, 0, sizeof(v9));
  v7[0] = 33;
  v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6)
    memcpy(&v8, __src, (4 * v6));
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::vector3FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  re::MaterialParameterBlock *v13;
  uint64_t *Constant;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = &str_110;
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v18 = 2 * v6;
  v19 = a2;
  v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v18);
  re::StringID::destroyString((re::StringID *)&v18);
  if (v10 && *(_BYTE *)v10 == 33)
  {
    *(_QWORD *)&v11 = *(_QWORD *)(v10 + 4);
    DWORD2(v11) = *(_DWORD *)(v10 + 12);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v12
      && (v13 = *(re::MaterialParameterBlock **)(v12 + 1672),
          v17 = v21[0] >> 1,
          re::MaterialParameterBlock::handle(v13, &v17, (uint64_t)&v18),
          v17 = 0,
          (BYTE4(v19) & 7) == 1)
      && v20 == 33)
    {
      Constant = (uint64_t *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)&v18);
      v15 = *Constant;
      v16 = Constant[1];
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 16) = v15;
      *(_QWORD *)(a3 + 24) = v16;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v21);
}

void re::ecs2::MaterialOverride::setVector4F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  _BYTE v7[4];
  int v8;
  _QWORD v9[3];
  StringID v10;
  _QWORD __src[2];

  __src[0] = a3;
  __src[1] = a4;
  *(_QWORD *)&v10.var0 = 0;
  v10.var1 = (char *)&str_110;
  memset(v9, 0, sizeof(v9));
  v7[0] = 34;
  v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6)
    memcpy(&v8, __src, (4 * v6));
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::vector4FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  re::MaterialParameterBlock *v13;
  uint64_t *Constant;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char v20;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = &str_110;
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v18 = 2 * v6;
  v19 = a2;
  v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v18);
  re::StringID::destroyString((re::StringID *)&v18);
  if (v10 && *(_BYTE *)v10 == 34)
  {
    v11 = *(_OWORD *)(v10 + 4);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v12
      && (v13 = *(re::MaterialParameterBlock **)(v12 + 1672),
          v17 = v21[0] >> 1,
          re::MaterialParameterBlock::handle(v13, &v17, (uint64_t)&v18),
          v17 = 0,
          (BYTE4(v19) & 7) == 1)
      && (v20 == 48 || v20 == 34))
    {
      Constant = (uint64_t *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)&v18);
      v15 = *Constant;
      v16 = Constant[1];
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 16) = v15;
      *(_QWORD *)(a3 + 24) = v16;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v21);
}

void re::ecs2::MaterialOverride::setMatrix2x2F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  _BYTE v7[4];
  int v8;
  _QWORD v9[3];
  StringID v10;
  _QWORD __src[3];

  __src[2] = *MEMORY[0x24BDAC8D0];
  __src[0] = a3;
  __src[1] = a4;
  *(_QWORD *)&v10.var0 = 0;
  v10.var1 = (char *)&str_110;
  memset(v9, 0, sizeof(v9));
  v7[0] = 48;
  v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6)
    memcpy(&v8, __src, (4 * v6));
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::matrix2x2FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::MaterialParameterBlock *v14;
  _OWORD *Constant;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char v19;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = &str_110;
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v17 = 2 * v6;
  v18 = a2;
  v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v17);
  re::StringID::destroyString((re::StringID *)&v17);
  if (v10 && *(_BYTE *)v10 == 48)
  {
    v11 = *(_QWORD *)(v10 + 4);
    v12 = *(_QWORD *)(v10 + 12);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v11;
    *(_QWORD *)(a3 + 16) = v12;
  }
  else
  {
    v13 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v13
      && (v14 = *(re::MaterialParameterBlock **)(v13 + 1672),
          v16 = v20[0] >> 1,
          re::MaterialParameterBlock::handle(v14, &v16, (uint64_t)&v17),
          v16 = 0,
          (BYTE4(v18) & 7) == 1)
      && (v19 == 48 || v19 == 34))
    {
      Constant = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v14, (uint64_t)&v17);
      *(_BYTE *)a3 = 1;
      *(_OWORD *)(a3 + 8) = *Constant;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v20);
}

void re::ecs2::MaterialOverride::setMatrix3x3F(_anonymous_namespace_ *a1, const char *a2, const void *a3)
{
  int v6;
  _BYTE v7[4];
  int v8;
  _QWORD v9[3];
  StringID v10;

  *(_QWORD *)&v10.var0 = 0;
  v10.var1 = (char *)&str_110;
  memset(v9, 0, sizeof(v9));
  v7[0] = 49;
  v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6)
    memcpy(&v8, a3, (4 * v6));
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::matrix3x3FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  re::MaterialParameterBlock *v15;
  _OWORD *Constant;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char v21;
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = &str_110;
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v19 = 2 * v6;
  v20 = a2;
  v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v19);
  re::StringID::destroyString((re::StringID *)&v19);
  if (v10 && *(_BYTE *)v10 == 49)
  {
    *(_QWORD *)&v11 = *(_QWORD *)(v10 + 4);
    *(_QWORD *)&v12 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)&v13 = *(_QWORD *)(v10 + 28);
    DWORD2(v11) = *(_DWORD *)(v10 + 12);
    DWORD2(v12) = *(_DWORD *)(v10 + 24);
    DWORD2(v13) = *(_DWORD *)(v10 + 36);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a3 + 48) = v13;
  }
  else
  {
    v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v14
      && (v15 = *(re::MaterialParameterBlock **)(v14 + 1672),
          v18 = v22[0] >> 1,
          re::MaterialParameterBlock::handle(v15, &v18, (uint64_t)&v19),
          v18 = 0,
          (BYTE4(v20) & 7) == 1)
      && v21 == 49)
    {
      Constant = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v15, (uint64_t)&v19);
      v17 = Constant[1];
      *(_OWORD *)(a3 + 16) = *Constant;
      *(_OWORD *)(a3 + 32) = v17;
      *(_OWORD *)(a3 + 48) = Constant[2];
      *(_BYTE *)a3 = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v22);
}

void re::ecs2::MaterialOverride::setMatrix4x4F(_anonymous_namespace_ *a1, const char *a2, const void *a3)
{
  int v6;
  _BYTE v7[4];
  int v8;
  _QWORD v9[3];
  StringID v10;

  *(_QWORD *)&v10.var0 = 0;
  v10.var1 = (char *)&str_110;
  memset(v9, 0, sizeof(v9));
  v7[0] = 50;
  v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6)
    memcpy(&v8, a3, (4 * v6));
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::matrix4x4FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  re::MaterialParameterBlock *v16;
  _OWORD *Constant;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char v23;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = &str_110;
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v21 = 2 * v6;
  v22 = a2;
  v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v21);
  re::StringID::destroyString((re::StringID *)&v21);
  if (v10 && *(_BYTE *)v10 == 50)
  {
    v11 = *(_OWORD *)(v10 + 4);
    v12 = *(_OWORD *)(v10 + 20);
    v13 = *(_OWORD *)(v10 + 36);
    v14 = *(_OWORD *)(v10 + 52);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a3 + 48) = v13;
    *(_OWORD *)(a3 + 64) = v14;
  }
  else
  {
    v15 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v15
      && (v16 = *(re::MaterialParameterBlock **)(v15 + 1672),
          v20 = v24[0] >> 1,
          re::MaterialParameterBlock::handle(v16, &v20, (uint64_t)&v21),
          v20 = 0,
          (BYTE4(v22) & 7) == 1)
      && v23 == 50)
    {
      Constant = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v16, (uint64_t)&v21);
      v18 = Constant[1];
      *(_OWORD *)(a3 + 16) = *Constant;
      *(_OWORD *)(a3 + 32) = v18;
      v19 = Constant[3];
      *(_OWORD *)(a3 + 48) = Constant[2];
      *(_OWORD *)(a3 + 64) = v19;
      *(_BYTE *)a3 = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v24);
}

void re::ecs2::MaterialOverride::setTexture(_anonymous_namespace_ *a1, const char *a2, const re::AssetHandle *a3)
{
  uint64_t v6[3];
  char v7[72];
  uint64_t v8[3];
  StringID v9;

  *(_QWORD *)&v9.var0 = 0;
  v9.var1 = (char *)&str_110;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a3);
  memset(v8, 0, sizeof(v8));
  v7[0] = 64;
  re::AssetHandle::operator=(v8, v6);
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v9, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  re::StringID::destroyString((re::StringID *)&v9);
}

void re::ecs2::MaterialOverride::clearMarkedMaterial(re::ecs2::MaterialOverride *this)
{
  uint64_t v1;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 13);
  if (v1)
  {
    v3 = (char *)this + 96;
    v4 = atomic_load((unsigned int *)(v1 + 704));
    if (v4 == 2)
    {
      v5 = *((_QWORD *)this + 13);
      if (v5)
      {
        v6 = atomic_load((unsigned int *)(v5 + 704));
        if (v6 == 2)
        {
          ++*(_DWORD *)(*((_QWORD *)this + 13) + 260);
          v7 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 96));
          if (v7)
            *(_BYTE *)(v7 + 1656) = 0;
        }
      }
    }
    if (*(_QWORD *)v3)
    {

      *(_QWORD *)v3 = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
}

double re::internal::defaultConstruct<re::ecs2::MaterialOverride>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_QWORD *)(a3 + 112) = 0;
  return result;
}

double re::internal::defaultDestruct<re::ecs2::MaterialOverride>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 12));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 6));
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::MaterialOverride>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::ecs2::MaterialOverride>(uint64_t *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 12));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 6));
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t *re::ecs2::allocInfo_MaterialOverrideComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254116798);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254116798))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116980, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254116990 = 0;
    qword_2541169A0 = 0;
    qword_2541169A8 = 0xFFFFFFFFLL;
    qword_254116980 = (uint64_t)&off_24ED7DAA8;
    qword_2541169B0 = (uint64_t)"MaterialOverrideComponent";
    dword_2541169B8 = 0;
    xmmword_2541169C0 = 0u;
    unk_2541169D0 = 0u;
    xmmword_2541169E0 = 0u;
    qword_2541169F0 = 0;
    __cxa_guard_release(&qword_254116798);
  }
  return &qword_254116980;
}

void re::ecs2::initInfo_MaterialOverrideComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xBB3DCAB0B6EBE814;
  v12[1] = "MaterialOverrideComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2541167A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541167A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "ecs2::Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541167C0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::MaterialOverride>>::get();
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "materialOverrides";
      *(_QWORD *)(v10 + 16) = &qword_254116800;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541167C8 = v10;
      __cxa_guard_release(&qword_2541167A0);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541167C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialOverrideComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialOverrideComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialOverrideComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialOverrideComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::MaterialOverride>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  _OWORD *v17;
  uint64_t *v18;
  unsigned __int8 v19;
  const re::IntrospectionBase *v20;
  unsigned __int8 v21;
  int v22;
  re::IntrospectionRegistry *v23;
  const re::IntrospectionBase *v24;
  const char *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  char **v29;
  char *v30;
  void *v31;
  uint64_t v32;
  _anonymous_namespace_ *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  re *v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  const char *v66;
  StringID v67;
  __int128 v68;
  __int128 v69;
  uint64_t *v70;

  v0 = atomic_load((unsigned __int8 *)&qword_2541167B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541167B8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254116800);
    qword_254116800 = (uint64_t)&off_24ED70540;
    __cxa_guard_release(&qword_2541167B8);
  }
  if ((byte_254116761 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254116790;
    if (qword_254116790)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254116788);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254116788))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116908, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254116918 = 0;
      *(_QWORD *)&xmmword_254116928 = 0;
      *((_QWORD *)&xmmword_254116928 + 1) = 0xFFFFFFFFLL;
      qword_254116908 = (uint64_t)&off_24ED7DAA8;
      qword_254116938 = (uint64_t)"MaterialOverride";
      dword_254116940 = 0;
      xmmword_254116948 = 0u;
      *(_OWORD *)&qword_254116958 = 0u;
      xmmword_254116968 = 0u;
      qword_254116978 = 0;
      __cxa_guard_release(&qword_254116788);
    }
    qword_254116790 = (uint64_t)&qword_254116908;
    *(_QWORD *)&v65 = 0x4BDA5D82C822466;
    *((_QWORD *)&v65 + 1) = "MaterialOverride";
    re::StringID::destroyString((re::StringID *)&v65);
    xmmword_254116928 = v58;
    v4 = atomic_load((unsigned __int8 *)&qword_254116780);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254116780);
      if ((_DWORD)v13)
      {
        v15 = re::introspectionAllocator(v13);
        v16 = atomic_load((unsigned __int8 *)&qword_2541167B0);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_2541167B0))
        {
          re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254116840);
          qword_254116840 = (uint64_t)&off_24ED704A0;
          __cxa_guard_release(&qword_2541167B0);
        }
        if ((_MergedGlobals_342 & 1) == 0)
        {
          v17 = re::IntrospectionInfo<re::StringID>::get(1, v14);
          v18 = (uint64_t *)qword_254116778;
          if (!qword_254116778)
          {
            v19 = atomic_load((unsigned __int8 *)&qword_254116770);
            if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254116770))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116890, 0);
              *(_QWORD *)(v44 + 22) = 0;
              qword_2541168A0 = 0;
              *(_QWORD *)&xmmword_2541168B0 = 0;
              *((_QWORD *)&xmmword_2541168B0 + 1) = 0xFFFFFFFFLL;
              qword_254116890 = (uint64_t)&off_24ED7DAA8;
              qword_2541168C0 = (uint64_t)"MaterialParameterVariant";
              dword_2541168C8 = 0;
              xmmword_2541168D0 = 0u;
              *(_OWORD *)&qword_2541168E0 = 0u;
              xmmword_2541168F0 = 0u;
              qword_254116900 = 0;
              __cxa_guard_release(&qword_254116770);
            }
            qword_254116778 = (uint64_t)&qword_254116890;
            *(_QWORD *)&v69 = 0x54BED66A81F5A806;
            *((_QWORD *)&v69 + 1) = "MaterialParameterVariant";
            re::StringID::destroyString((re::StringID *)&v69);
            xmmword_2541168B0 = v65;
            v21 = atomic_load((unsigned __int8 *)&qword_254116768);
            if ((v21 & 1) == 0)
            {
              v45 = (re *)__cxa_guard_acquire(&qword_254116768);
              if ((_DWORD)v45)
              {
                v46 = re::introspectionAllocator(v45);
                v48 = re::introspect_MaterialParameterType((re *)1, v47);
                v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
                *(_DWORD *)v49 = 1;
                *(_QWORD *)(v49 + 8) = "ValueType";
                *(_QWORD *)(v49 + 16) = v48;
                *(_QWORD *)(v49 + 24) = 0;
                *(_QWORD *)(v49 + 32) = 1;
                *(_DWORD *)(v49 + 40) = 0;
                *(_QWORD *)(v49 + 48) = 0;
                *(_QWORD *)(v49 + 56) = 0;
                *(_DWORD *)(v49 + 64) = 0;
                qword_2541167D0 = v49;
                v50 = re::introspectionAllocator((re *)v49);
                v52 = re::IntrospectionInfo<float [16]>::get(1, v51);
                v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
                *(_DWORD *)v53 = 1;
                *(_QWORD *)(v53 + 8) = "m_floatValues";
                *(_QWORD *)(v53 + 16) = v52;
                *(_QWORD *)(v53 + 24) = 0;
                *(_QWORD *)(v53 + 32) = 0x400000002;
                *(_DWORD *)(v53 + 40) = 0;
                *(_QWORD *)(v53 + 48) = 0;
                *(_QWORD *)(v53 + 56) = 0;
                *(_DWORD *)(v53 + 64) = 0;
                qword_2541167D8 = v53;
                v54 = re::introspectionAllocator((re *)v53);
                v56 = re::introspect_AssetHandle((re *)1, v55);
                v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
                *(_DWORD *)v57 = 1;
                *(_QWORD *)(v57 + 8) = "m_assetHandleValue";
                *(_QWORD *)(v57 + 16) = v56;
                *(_QWORD *)(v57 + 24) = 0;
                *(_QWORD *)(v57 + 32) = 0x4800000003;
                *(_DWORD *)(v57 + 40) = 0;
                *(_QWORD *)(v57 + 48) = 0;
                *(_QWORD *)(v57 + 56) = 0;
                *(_DWORD *)(v57 + 64) = 0;
                qword_2541167E0 = v57;
                __cxa_guard_release(&qword_254116768);
              }
            }
            qword_2541168A0 = 0x6000000008;
            v18 = &qword_254116890;
            dword_2541168A8 = 8;
            word_2541168AC = 0;
            dword_2541168C8 = 3;
            *(_QWORD *)&xmmword_2541168D0 = &qword_2541167D0;
            *((_QWORD *)&xmmword_2541168D0 + 1) = re::internal::defaultConstruct<re::ecs2::MaterialParameterVariant>;
            qword_2541168E0 = (uint64_t)re::internal::defaultDestruct<re::ecs2::MaterialParameterVariant>;
            unk_2541168E8 = 0;
            *(_QWORD *)&xmmword_2541168F0 = 0;
            *((_QWORD *)&xmmword_2541168F0 + 1) = re::internal::defaultConstructV2<re::ecs2::MaterialParameterVariant>;
            qword_254116900 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::MaterialParameterVariant>;
            re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254116890, v20);
            v69 = v65;
          }
          if ((_MergedGlobals_342 & 1) == 0)
          {
            _MergedGlobals_342 = 1;
            v22 = *((_DWORD *)v18 + 6);
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116840, 0);
            qword_254116850 = 0x3000000007;
            dword_254116858 = v22;
            word_25411685C = 0;
            *(_QWORD *)&xmmword_254116860 = 0;
            *((_QWORD *)&xmmword_254116860 + 1) = 0xFFFFFFFFLL;
            qword_254116870 = (uint64_t)v17;
            unk_254116878 = 0;
            qword_254116880 = (uint64_t)v18;
            unk_254116888 = 0;
            qword_254116840 = (uint64_t)&off_24ED704A0;
            re::IntrospectionRegistry::add(v23, v24);
            re::getPrettyTypeName((re *)&qword_254116840, (const re::IntrospectionBase *)&v65);
            if ((BYTE8(v65) & 1) != 0)
              v25 = v66;
            else
              v25 = (char *)&v65 + 9;
            if ((_QWORD)v65 && (BYTE8(v65) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v65 + 40))();
            v26 = v17[2];
            v60 = *((_OWORD *)v18 + 2);
            v61 = v26;
            v27 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v62);
            if (v27)
            {
              v28 = *v27;
              *((_QWORD *)&v59 + 1) = v28;
            }
            else
            {
              *(_QWORD *)&v65 = 0x449AD97C4B77BED4;
              *((_QWORD *)&v65 + 1) = "_CompareFunc";
              v29 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v65);
              if (v29)
              {
                v30 = *v29;
                re::StringID::destroyString((re::StringID *)&v65);
              }
              else
              {
                re::StringID::destroyString((re::StringID *)&v65);
                *(_QWORD *)&v69 = 0x449AD97C4B77BED4;
                *((_QWORD *)&v69 + 1) = "_CompareFunc";
                v30 = (char *)*((_QWORD *)&v65 + 1);
                v31 = (void *)v65;
                re::StringID::destroyString((re::StringID *)&v69);
              }
              re::TypeInfo::TypeInfo((uint64_t)&v69, (uint64_t)&v65 + 8);
              if (!v31
                || (v32 = *v70,
                    *(_QWORD *)&v65 = v30,
                    *((_QWORD *)&v65 + 1) = v32,
                    LODWORD(v66) = -1,
                    (v33 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v69 + 768, (uint64_t *)&v65)) == 0)|| !*(_QWORD *)v33)
              {
                v68 = v61;
                *(_QWORD *)&v67.var0 = v31;
                v67.var1 = v30;
              }
              v63 = v60;
              v64 = v61;
              re::TypeBuilder::beginDictionaryType((uint64_t)&v65, v62, 1, 0x30uLL, 8uLL, &v64, &v63);
              re::TypeBuilder::setConstructor((uint64_t)&v65, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
              re::TypeBuilder::setDestructor((uint64_t)&v65, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
              re::TypeBuilder::setDictionaryAccessors((uint64_t)&v65, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
              re::TypeBuilder::setDictionaryIterator((uint64_t)&v65, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v65, v34);
            }
            xmmword_254116860 = v59;
            re::StringID::destroyString((re::StringID *)v62);
          }
        }
        v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
        *(_DWORD *)v35 = 1;
        *(_QWORD *)(v35 + 8) = "parameters";
        *(_QWORD *)(v35 + 16) = &qword_254116840;
        *(_QWORD *)(v35 + 24) = 0;
        *(_QWORD *)(v35 + 32) = 1;
        *(_DWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 48) = 0;
        *(_QWORD *)(v35 + 56) = 0;
        *(_DWORD *)(v35 + 64) = 0;
        qword_2541167E8 = v35;
        v36 = re::introspectionAllocator((re *)v35);
        v38 = re::introspect_AssetHandle((re *)1, v37);
        v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
        *(_DWORD *)v39 = 1;
        *(_QWORD *)(v39 + 8) = "m_material";
        *(_QWORD *)(v39 + 16) = v38;
        *(_QWORD *)(v39 + 24) = 0;
        *(_QWORD *)(v39 + 32) = 0x3000000002;
        *(_DWORD *)(v39 + 40) = 0;
        *(_QWORD *)(v39 + 48) = 0;
        *(_QWORD *)(v39 + 56) = 0;
        *(_DWORD *)(v39 + 64) = 0;
        qword_2541167F0 = v39;
        v40 = re::introspectionAllocator((re *)v39);
        v42 = re::introspect_AssetHandle((re *)1, v41);
        v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
        *(_DWORD *)v43 = 1;
        *(_QWORD *)(v43 + 8) = "m_materialDefinition";
        *(_QWORD *)(v43 + 16) = v42;
        *(_QWORD *)(v43 + 24) = 0;
        *(_QWORD *)(v43 + 32) = 0x4800000003;
        *(_DWORD *)(v43 + 40) = 0;
        *(_QWORD *)(v43 + 48) = 0;
        *(_QWORD *)(v43 + 56) = 0;
        *(_DWORD *)(v43 + 64) = 0;
        qword_2541167F8 = v43;
        __cxa_guard_release(&qword_254116780);
      }
    }
    qword_254116918 = 0x7800000008;
    v1 = &qword_254116908;
    dword_254116920 = 8;
    word_254116924 = 0;
    dword_254116940 = 3;
    *(_QWORD *)&xmmword_254116948 = &qword_2541167E8;
    *((_QWORD *)&xmmword_254116948 + 1) = re::internal::defaultConstruct<re::ecs2::MaterialOverride>;
    *(_QWORD *)&xmmword_254116968 = 0;
    qword_254116958 = (uint64_t)re::internal::defaultDestruct<re::ecs2::MaterialOverride>;
    unk_254116960 = 0;
    *((_QWORD *)&xmmword_254116968 + 1) = re::internal::defaultConstructV2<re::ecs2::MaterialOverride>;
    qword_254116978 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::MaterialOverride>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254116908, v3);
    v65 = v58;
    if ((byte_254116761 & 1) == 0)
    {
LABEL_7:
      byte_254116761 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116800, 0);
      *(_QWORD *)&algn_254116808[8] = 0x2800000003;
      *(_DWORD *)&algn_254116808[16] = v5;
      *(_WORD *)&algn_254116808[20] = 0;
      *(_QWORD *)&xmmword_254116820 = 0;
      *((_QWORD *)&xmmword_254116820 + 1) = 0xFFFFFFFFLL;
      *(_QWORD *)algn_254116830 = v1;
      *(_QWORD *)&algn_254116830[8] = 0;
      qword_254116800 = (uint64_t)&off_24ED70540;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254116800, (const re::IntrospectionBase *)&v65);
      if ((BYTE8(v65) & 1) != 0)
        v8 = v66;
      else
        v8 = (char *)&v65 + 9;
      if ((_QWORD)v65 && (BYTE8(v65) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v65 + 40))();
      v67 = (StringID)*((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v68);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v64 + 1) = v10;
      }
      else
      {
        v69 = (__int128)v67;
        re::TypeBuilder::beginListType((uint64_t)&v65, (uint64_t *)&v68, 1, 0x28uLL, 8uLL, &v69);
        re::TypeBuilder::setConstructor((uint64_t)&v65, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v65, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v65, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v65, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v65, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v65, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v65, v11);
      }
      xmmword_254116820 = v64;
      re::StringID::destroyString((re::StringID *)&v68);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::MaterialOverrideComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59F80;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MaterialOverrideComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialOverrideComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59F80;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MaterialOverrideComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MaterialOverrideComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialOverrideComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialOverrideComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialOverrideComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialOverrideComponent>, this);
}

uint64_t re::ecs2::MaterialOverrideSystem::willRemoveComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::MaterialOverride *v7;
  uint64_t v8;

  if (a4)
  {
    v4 = a3;
    v5 = a3 + 8 * a4;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 48);
      if (v6)
      {
        v7 = *(re::ecs2::MaterialOverride **)(*(_QWORD *)v4 + 64);
        v8 = 120 * v6;
        do
        {
          re::ecs2::MaterialOverride::clearMarkedMaterial(v7);
          v7 = (re::ecs2::MaterialOverride *)((char *)v7 + 120);
          v8 -= 120;
        }
        while (v8);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t re::ecs2::MaterialOverrideSystem::willAddSystemToECSService(re::ecs2::MaterialOverrideSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  *((_QWORD *)this + 15) = result;
  return result;
}

_QWORD *re::ecs2::MaterialOverrideSystem::willRemoveSystemFromECSService(_QWORD *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

double re::ecs2::MaterialOverrideSystem::willAddSceneToECSService(re::ecs2::MaterialOverrideSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5[0] = this;
  v5[1] = re::ecs2::MaterialOverrideSystem::willRemoveComponent;
  v5[2] = 0;
  v5[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::createSubscription<re::ecs2::MaterialOverrideSystem>(re::ecs2::MaterialOverrideSystem *,REEventHandlerResult (re::ecs2::MaterialOverrideSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Slice<re::ecs2::MaterialOverrideComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialOverrideComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)v5);
}

void re::ecs2::MaterialOverrideSystem::willRemoveSceneFromECSService(re::ecs2::MaterialOverrideSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v4 = this;
  *((_QWORD *)&v4 + 1) = re::ecs2::MaterialOverrideSystem::willRemoveComponent;
  v5 = 0;
  v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::createSubscription<re::ecs2::MaterialOverrideSystem>(re::ecs2::MaterialOverrideSystem *,REEventHandlerResult (re::ecs2::MaterialOverrideSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Slice<re::ecs2::MaterialOverrideComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialOverrideComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v4);
}

uint64_t re::ecs2::MaterialOverrideSystem::update(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  re::ecs2::SceneComponentTable *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderManager *v10;
  uint64_t v11;
  re::ecs2::MaterialOverride *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  re::MaterialParameterBlock *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  re::AssetHandle *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t *v75;
  int v76;
  int v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  os_unfair_lock_s *v82[2];
  uint64_t v83[4];
  _OWORD v84[4];
  uint64_t v85[4];
  _OWORD v86[3];
  uint64_t v87[4];
  uint64_t v88[4];
  uint64_t v89[4];
  uint64_t v90[4];
  uint64_t v91[4];
  uint64_t v92[4];
  _BYTE v93[24];
  _BYTE v94[16];
  uint64_t v95[2];
  _BYTE __s2[18];
  __int16 v97;
  unint64_t v98;
  __int16 v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    if (*(_QWORD *)(result + 120))
    {
      v5 = *(_QWORD *)(result + 104);
      if (v5)
        v6 = (*(unsigned __int8 *)(v5 + 424) >> 4) & 1;
      else
        v6 = 1;
      v73 = v6;
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v95);
      v7 = (re::ecs2::SceneComponentTable *)(a2 + 200);
      re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v72 = v3;
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v94, 3027, v3);
      v8 = re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v2 = *(_QWORD *)(v8 + 40);
          v10 = (re::RenderManager *)(v2 + 8 * v9);
          do
          {
            v11 = *(_QWORD *)(*(_QWORD *)v2 + 48);
            if (v11)
            {
              v12 = *(re::ecs2::MaterialOverride **)(*(_QWORD *)v2 + 64);
              v13 = 120 * v11;
              do
              {
                re::ecs2::MaterialOverride::clearMarkedMaterial(v12);
                v12 = (re::ecs2::MaterialOverride *)((char *)v12 + 120);
                v13 -= 120;
              }
              while (v13);
            }
            v2 += 8;
          }
          while ((re::RenderManager *)v2 != v10);
        }
      }
      v14 = re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v14)
        goto LABEL_87;
      v15 = *(_QWORD *)(v14 + 24);
      if (!v15)
        goto LABEL_87;
      v16 = *(uint64_t **)(v14 + 40);
      v70 = &v16[v15];
      while (1)
      {
        v17 = *v16;
        v18 = *(_QWORD *)(*v16 + 48);
        v19 = *(_QWORD **)(*(_QWORD *)(*v16 + 16) + 176);
        if (v19 && v19[9] < v18)
        {
          v71 = v16;
          re::DynamicArray<re::AssetHandle>::resize((uint64_t)(v19 + 7), v18);
          v20 = 1;
        }
        else
        {
          if (!v18)
            goto LABEL_86;
          v71 = v16;
          v20 = 0;
        }
        v21 = 0;
        v79 = v17;
        v80 = v19;
        v74 = v18;
        do
        {
          v22 = *(_QWORD *)(v17 + 48);
          if (v22 <= v21)
          {
            v82[0] = 0;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v101 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)__s2 = 136315906;
            *(_QWORD *)&__s2[4] = "operator[]";
            *(_WORD *)&__s2[12] = 1024;
            *(_DWORD *)&__s2[14] = 789;
            v97 = 2048;
            v98 = v21;
            v99 = 2048;
            v100 = v22;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_90:
            v82[0] = 0;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v101 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)__s2 = 136315906;
            *(_QWORD *)&__s2[4] = "operator[]";
            *(_WORD *)&__s2[12] = 1024;
            *(_DWORD *)&__s2[14] = 789;
            v97 = 2048;
            v98 = v21;
            v99 = 2048;
            v100 = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_91:
            re::internal::assertLog((re::internal *)4, v52, "assertion failure: '%s' (%s:line %i) Unsupported m_material parameter type", "!\"Unreachable code\"", "update", 686);
            _os_crash();
            __break(1u);
LABEL_92:
            std::__throw_bad_variant_access[abi:nn180100]();
          }
          v23 = *(_QWORD *)(v17 + 64);
          v24 = v23 + 120 * v21;
          v25 = *(_QWORD *)(v24 + 80);
          if (v25)
          {
            v26 = atomic_load((unsigned int *)(v25 + 704));
            if (v26 == 2)
            {
              v27 = v23 + 120 * v21;
              v29 = *(_QWORD *)(v27 + 56);
              v28 = (uint64_t *)(v27 + 56);
              v30 = v73;
              if (v29)
                v30 = 0;
              if (v30 == 1)
              {
                v2 = *(_QWORD *)(v72 + 112);
                if (v2)
                {
                  v76 = v20;
                  v31 = v28 - 1;
                  v32 = *(_QWORD *)(v72 + 120);
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v93, (const re::AssetHandle *)(v24 + 72));
                  re::AssetHelper::makeMutableMaterialMemoryAsset(v32, (re::RenderManager *)v2, (re::AssetHandle *)v93, 2);
                  v33 = *v28;
                  *v28 = *((_QWORD *)&v101 + 1);
                  *((_QWORD *)&v101 + 1) = v33;
                  v34 = *(v28 - 1);
                  *v31 = 0;
                  *v31 = v101;
                  v20 = v76;
                  *(_QWORD *)&v101 = v34;
                  v35 = v23 + 120 * v21;
                  v36 = *(_QWORD *)(v35 + 64);
                  *(_QWORD *)(v35 + 64) = v102;
                  *(_QWORD *)&v102 = v36;
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v101);
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v93);
                }
              }
            }
            else
            {
              re::AssetHandle::loadAsync((re::AssetHandle *)(v24 + 72));
            }
          }
          if (v19)
          {
            v2 = v19[9];
            if (v2 <= v21)
              goto LABEL_90;
            v37 = v19[11];
            if (*(_QWORD *)(v37 + 24 * v21 + 8) != *(_QWORD *)(v23 + 120 * v21 + 56))
            {
              re::AssetHandle::operator=((uint64_t *)(v37 + 24 * v21), (uint64_t *)(v23 + 120 * v21 + 48));
              v20 = 1;
            }
          }
          v81 = v23;
          v38 = v23 + 120 * v21;
          v41 = *(_QWORD *)(v38 + 56);
          v39 = v38 + 56;
          v40 = v41;
          if (!v41)
            goto LABEL_83;
          v42 = atomic_load((unsigned int *)(v40 + 704));
          if (v42 != 2)
            goto LABEL_83;
          v2 = v39 - 8;
          ++*(_DWORD *)(*(_QWORD *)v39 + 260);
          v43 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v39 - 8));
          v44 = *(unsigned int *)(v24 + 32);
          if ((_DWORD)v44)
          {
            v45 = 0;
            v46 = *(int **)(v24 + 16);
            do
            {
              v47 = *v46;
              v46 += 30;
              if (v47 < 0)
                goto LABEL_43;
              ++v45;
            }
            while (v44 != v45);
            LODWORD(v45) = *(_DWORD *)(v24 + 32);
          }
          else
          {
            LODWORD(v45) = 0;
          }
LABEL_43:
          if ((_DWORD)v44 == (_DWORD)v45)
            goto LABEL_83;
          v75 = (uint64_t *)v2;
          v77 = v20;
          v78 = 0;
          v2 = v45;
          do
          {
            v48 = *(_QWORD *)(v24 + 16);
            v49 = v48 + 120 * v2;
            v50 = (unsigned __int8 *)(v49 + 24);
            v51 = *(re::MaterialParameterBlock **)(v43 + 1672);
            re::MaterialParameterBlock::handle(v51, *(const char **)(v49 + 16), (uint64_t)&v101);
            v56 = BYTE12(v101) & 7;
            if ((v56 - 2) < 3 || v56 == 1 && BYTE8(v102))
            {
              v57 = *v50;
              if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v101, v57))
                goto LABEL_47;
            }
            else
            {
              v57 = *v50;
            }
            if (v57 > 47)
            {
              if (v57 > 49)
              {
                if (v57 == 50)
                {
                  v66 = v48 + 120 * v2;
                  v67 = *(_OWORD *)(v66 + 44);
                  v68 = *(_OWORD *)(v66 + 60);
                  v69 = *(_OWORD *)(v66 + 76);
                  v84[0] = *(_OWORD *)(v66 + 28);
                  v84[1] = v67;
                  v84[2] = v68;
                  v84[3] = v69;
                  re::MaterialParameterBlock::setConstant(0x40uLL, v84, v51, (uint64_t *)&v101, 50, (uint64_t)v85);
                  v85[0] = 0;
                }
                else
                {
                  if (v57 != 64)
                    goto LABEL_91;
                  v61 = re::AssetHandle::AssetHandle((re::AssetHandle *)__s2, (const re::AssetHandle *)(v48 + 120 * v2 + 96));
                  if (*(_QWORD *)&__s2[8]
                    && (v62 = atomic_load((unsigned int *)(*(_QWORD *)&__s2[8] + 704)), v62 == 2))
                  {
                    v63 = re::AssetHandle::asset<re::TextureAsset>(v61);
                    if (*(_DWORD *)(v63 + 240))
                      goto LABEL_92;
                    re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*((_QWORD *)v51 + 121) + 64), (void **)(v63 + 160), v82);
                    re::MaterialParameterBlock::setTextureHandle(v51, (uint64_t)&v101, (re::TextureHandle *)v82, (uint64_t)v83);
                    v83[0] = 0;
                    re::TextureHandle::invalidate((re::TextureHandle *)v82);
                  }
                  else
                  {
                    re::AssetHandle::loadAsync(v61);
                    v78 = 1;
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)__s2);
                }
              }
              else
              {
                v60 = v48 + 120 * v2;
                if (v57 == 48)
                {
                  v64 = *(_QWORD *)(v60 + 36);
                  *(_QWORD *)__s2 = *(_QWORD *)(v60 + 28);
                  *(_QWORD *)&__s2[8] = v64;
                  re::MaterialParameterBlock::setConstant(0x10uLL, __s2, v51, (uint64_t *)&v101, 48, (uint64_t)v88);
                  v88[0] = 0;
                }
                else
                {
                  *(_QWORD *)&v53 = *(_QWORD *)(v60 + 28);
                  *(_QWORD *)&v54 = *(_QWORD *)(v60 + 40);
                  *(_QWORD *)&v55 = *(_QWORD *)(v60 + 52);
                  DWORD2(v53) = *(_DWORD *)(v60 + 36);
                  DWORD2(v54) = *(_DWORD *)(v60 + 48);
                  DWORD2(v55) = *(_DWORD *)(v60 + 60);
                  v86[0] = v53;
                  v86[1] = v54;
                  v86[2] = v55;
                  re::MaterialParameterBlock::setConstant(0x30uLL, v86, v51, (uint64_t *)&v101, 49, (uint64_t)v87);
                  v87[0] = 0;
                }
              }
            }
            else if (v57 > 32)
            {
              if (v57 == 33)
              {
                v65 = v48 + 120 * v2;
                *(_QWORD *)&v53 = *(_QWORD *)(v65 + 28);
                DWORD2(v53) = *(_DWORD *)(v65 + 36);
                *(_OWORD *)__s2 = v53;
                re::MaterialParameterBlock::setConstant(0x10uLL, __s2, v51, (uint64_t *)&v101, 33, (uint64_t)v90);
                v90[0] = 0;
              }
              else
              {
                if (v57 != 34)
                  goto LABEL_91;
                *(_OWORD *)__s2 = *(_OWORD *)(v48 + 120 * v2 + 28);
                re::MaterialParameterBlock::setConstant(0x10uLL, __s2, v51, (uint64_t *)&v101, 34, (uint64_t)v89);
                v89[0] = 0;
              }
            }
            else if (v57 == 1)
            {
              *(_DWORD *)__s2 = *(_DWORD *)(v48 + 120 * v2 + 28);
              re::MaterialParameterBlock::setConstant(4uLL, __s2, v51, (uint64_t *)&v101, 1, (uint64_t)v92);
              v92[0] = 0;
            }
            else
            {
              if (v57 != 32)
                goto LABEL_91;
              *(_QWORD *)__s2 = *(_QWORD *)(v48 + 120 * v2 + 28);
              re::MaterialParameterBlock::setConstant(8uLL, __s2, v51, (uint64_t *)&v101, 32, (uint64_t)v91);
              v91[0] = 0;
            }
LABEL_47:
            v58 = *(_DWORD *)(v24 + 32);
            if (v58 <= (int)v45 + 1)
              v58 = v45 + 1;
            while (1)
            {
              v2 = (v45 + 1);
              if (v58 - 1 == (_DWORD)v45)
                break;
              LODWORD(v45) = v45 + 1;
              v59 = v2;
              if ((*(_DWORD *)(*(_QWORD *)(v24 + 16) + 120 * v2) & 0x80000000) != 0)
                goto LABEL_53;
            }
            v59 = v58;
LABEL_53:
            LODWORD(v45) = v59;
          }
          while ((_DWORD)v44 != v59);
          v18 = v74;
          v20 = v77;
          if ((v78 & 1) != 0)
          {
            *(_BYTE *)(v43 + 1656) = 1;
            re::AssetHandle::operator=((uint64_t *)(v81 + 120 * v21 + 96), v75);
          }
LABEL_83:
          ++v21;
          v17 = v79;
          v19 = v80;
        }
        while (v21 != v18);
        v16 = v71;
        if ((v20 & 1) != 0)
          re::ecs2::Component::markDirty(v80);
LABEL_86:
        if (++v16 == v70)
        {
LABEL_87:
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v94);
          return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v95);
        }
      }
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_MaterialOverrideSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541167A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541167A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541169F8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254116A08 = 0;
    qword_254116A18 = 0;
    qword_254116A20 = 0xFFFFFFFFLL;
    qword_2541169F8 = (uint64_t)&off_24ED7DAA8;
    qword_254116A28 = (uint64_t)"MaterialOverrideSystem";
    dword_254116A30 = 0;
    xmmword_254116A38 = 0u;
    unk_254116A48 = 0u;
    xmmword_254116A58 = 0u;
    qword_254116A68 = 0;
    __cxa_guard_release(&qword_2541167A8);
  }
  return &qword_2541169F8;
}

void re::ecs2::initInfo_MaterialOverrideSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD2A25A77E0157C84;
  v5[1] = "MaterialOverrideSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MaterialOverrideSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialOverrideSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialOverrideSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialOverrideSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialOverrideSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::MaterialOverrideSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *v3;

  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1);
  *v3 = &off_24ED70418;
  v3[14] = 0;
  v3[15] = 0;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::MaterialOverrideSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialOverrideSystem>(_OWORD *a1)
{
  _QWORD *v1;

  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1);
  *v1 = &off_24ED70418;
  v1[14] = 0;
  v1[15] = 0;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::MaterialOverrideSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MaterialOverrideSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialOverrideSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialOverrideSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialOverrideSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialOverrideSystem>, this);
}

void re::ecs2::MaterialOverrideSystem::~MaterialOverrideSystem(re::ecs2::MaterialOverrideSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MaterialOverrideSystem::typeInfo(re::ecs2::MaterialOverrideSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialOverrideSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialOverrideSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialOverrideSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialOverrideSystem>, 0);
}

uint64_t re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 120 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 120 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 120 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 120 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + 120 * v9;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a5;
  v16 = *(_OWORD *)(a5 + 16);
  v17 = *(_OWORD *)(a5 + 32);
  v18 = *(_OWORD *)(a5 + 48);
  *(_DWORD *)(v15 + 88) = *(_DWORD *)(a5 + 64);
  *(_OWORD *)(v15 + 72) = v18;
  *(_OWORD *)(v15 + 56) = v17;
  *(_OWORD *)(v15 + 40) = v16;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v15 + 96), (const re::AssetHandle *)(a5 + 72));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  signed int v15;
  _BYTE v16[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(_QWORD *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v16, v4, a2);
      v5 = *(_OWORD *)v16;
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v16[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v16[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v12 - 16) >> 31) ^ (*(_QWORD *)(v12 - 16) >> 1));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 120;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2)
      v15 = a2;
    else
      v15 = 3;
  }
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  _OWORD v10[6];

  memset(v10, 0, sizeof(v10));
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, (uint64_t)v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v10[4] + 8));
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 30;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 120 * v10 + 8, *(_QWORD *)(a2 + 16) + 120 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 120 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 120;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 120 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 30;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 120 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 120 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::MaterialOverride>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::MaterialOverride>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::MaterialOverride>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _OWORD v10[2];
  __int128 v11;
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;

  memset(v10, 0, sizeof(v10));
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  DWORD1(v11) = 0x7FFFFFFF;
  v13 = 0u;
  v14 = 0;
  re::DynamicArray<re::ecs2::MaterialOverride>::add(this, (uint64_t *)v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v12[1] + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 120 * *((_QWORD *)this + 2) - 120);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 120 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 120 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x78uLL))
        {
          v2 = 120 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[15 * v9];
        v11 = v7;
        do
        {
          *((_DWORD *)v11 + 8) = 0;
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          *(_QWORD *)((char *)v11 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11, v8);
          v11[6] = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[7] = v8[7];
          v8[7] = 0;
          v12 = v11[6];
          v11[6] = 0;
          v11[6] = v8[6];
          v8[6] = v12;
          v13 = v11[8];
          v11[8] = v8[8];
          v8[8] = v13;
          v11[9] = 0;
          v11[10] = 0;
          v11[11] = 0;
          v11[10] = v8[10];
          v8[10] = 0;
          v14 = v11[9];
          v11[9] = 0;
          v11[9] = v8[9];
          v8[9] = v14;
          v15 = v11[11];
          v11[11] = v8[11];
          v8[11] = v15;
          v11[12] = 0;
          v11[13] = 0;
          v11[14] = 0;
          v11[13] = v8[13];
          v8[13] = 0;
          v16 = v11[12];
          v11[12] = 0;
          v11[12] = v8[12];
          v8[12] = v16;
          v17 = v11[14];
          v11[14] = v8[14];
          v8[14] = v17;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + 12));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + 9));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + 6));
          re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v8);
          v8 += 15;
          v11 += 15;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::MaterialOverride>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 120 * a2;
    v9 = a2;
    do
    {
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 32) + v8);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 12));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 9));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 6));
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10);
      ++v9;
      v8 += 120;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 120 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)(v7 + 112) = 0;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_DWORD *)(v7 + 36) = 0x7FFFFFFF;
        v6 += 120;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t *re::DynamicArray<re::ecs2::MaterialOverride>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 120 * v4;
  *(_DWORD *)(v5 + 32) = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, a2);
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 56) = a2[7];
  a2[7] = 0;
  v7 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 48) = a2[6];
  a2[6] = v7;
  v8 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = a2[8];
  a2[8] = v8;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 80) = a2[10];
  a2[10] = 0;
  v9 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 72) = a2[9];
  a2[9] = v9;
  v10 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = a2[11];
  a2[11] = v10;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 104) = a2[13];
  a2[13] = 0;
  v11 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 96) = a2[12];
  a2[12] = v11;
  v12 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 112) = a2[14];
  a2[14] = v12;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::MaterialOverride>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::MaterialOverride>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 120 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 120;
        v11 -= 120;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::MaterialOverride>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 32);
    v4 = 120 * v2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 12));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 9));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 6));
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v3);
      v3 += 15;
      v4 -= 120;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 120 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 120 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::createSubscription<re::ecs2::MaterialOverrideSystem>(re::ecs2::MaterialOverrideSystem *,REEventHandlerResult (re::ecs2::MaterialOverrideSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Slice<re::ecs2::MaterialOverrideComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialOverrideComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

id re::internal::defaultRetain<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

re *re::ecs2::ECSStateCommand::commandEntity(re::ecs2::ECSStateCommand *this, const re::BindPoint *a2)
{
  re *v4;
  re *v5;
  _BYTE *v6;
  size_t v7;
  unsigned __int8 v8;
  uint64_t isAlive;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  re *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  NSObject *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _OWORD buf[3];
  re::BindNode *v29[5];

  v29[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 6)
    || !re::BindPoint::isAlive((re::ecs2::ECSStateCommand *)((char *)this + 24))
    || (v4 = (re *)re::BindPoint::valueUntyped((re::ecs2::ECSStateCommand *)((char *)this + 24))) == 0)
  {
    if (*((_QWORD *)a2 + 3) && re::BindPoint::isAlive(a2))
    {
      v5 = (re *)re::BindPoint::valueUntyped(a2);
      v4 = v5;
      if (*((_QWORD *)this + 1) <= 1uLL)
      {
        v6 = (_BYTE *)*((_QWORD *)this + 2);
        if (v6)
        {
          if (!*v6)
          {
            *((_QWORD *)this + 3) = *(_QWORD *)a2;
            re::DynamicArray<re::BindPoint::BindPointData>::operator=((uint64_t)this + 32, (uint64_t *)a2 + 1);
            return v4;
          }
        }
      }
      re::makeBindNode(v5, (uint64_t)v29);
      v7 = strlen(*((const char **)this + 2));
      *(_QWORD *)&buf[0] = *((_QWORD *)this + 2);
      *((_QWORD *)&buf[0] + 1) = v7;
      if ((v8 & 1) == 0
      {
        re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
      }
      re::BindNode::bindPoint(v29, re::introspect<re::ecs2::Entity>(void)::info, (uint64_t *)buf, (uint64_t)&v26);
      if (!v27[2]
        || (isAlive = re::BindPoint::isAlive((re::BindPoint *)&v26), !(_DWORD)isAlive)
        || (isAlive = re::BindPoint::valueUntyped((re::BindPoint *)&v26), (v10 = isAlive) == 0))
      {
        if (!v4)
          goto LABEL_49;
        v11 = *((_QWORD *)v4 + 41);
        if (!v11)
          goto LABEL_49;
        v12 = (uint64_t *)*((_QWORD *)v4 + 43);
        v13 = 8 * v11;
        while (1)
        {
          v10 = *v12;
          isAlive = re::StringID::operator==((_QWORD *)(*v12 + 272), (_QWORD *)this + 1);
          if ((isAlive & 1) != 0)
            break;
          ++v12;
          v13 -= 8;
          if (!v13)
            goto LABEL_21;
        }
        if (!v10)
        {
LABEL_49:
          do
          {
LABEL_21:
            v14 = v4;
            v4 = (re *)*((_QWORD *)v4 + 3);
          }
          while (v4);
          v15 = *((_QWORD *)v14 + 2);
          v16 = *(_QWORD *)(v15 + 128);
          if (!v16)
            goto LABEL_37;
          v17 = *(uint64_t **)(v15 + 144);
          v18 = &v17[v16];
          while (1)
          {
            v10 = *v17;
            isAlive = re::StringID::operator==((_QWORD *)(*v17 + 272), (_QWORD *)this + 1);
            if ((isAlive & 1) != 0)
              break;
            if ((*(_BYTE *)(v10 + 288) & 0x20) != 0)
            {
              v19 = *(_QWORD *)(v10 + 328);
              if (v19)
              {
                v20 = *(uint64_t **)(v10 + 344);
                v21 = 8 * v19;
                while (1)
                {
                  v10 = *v20;
                  isAlive = re::StringID::operator==((_QWORD *)(*v20 + 272), (_QWORD *)this + 1);
                  if ((isAlive & 1) != 0)
                    break;
                  ++v20;
                  v21 -= 8;
                  if (!v21)
                    goto LABEL_32;
                }
                if (v10)
                  goto LABEL_35;
              }
            }
LABEL_32:
            if (++v17 == v18)
              goto LABEL_37;
          }
          if (!v10)
          {
LABEL_37:
            v23 = *re::foundationCoreLogObjects((re *)isAlive);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v25 = *((_QWORD *)this + 2);
              LODWORD(buf[0]) = 136315138;
              *(_QWORD *)((char *)buf + 4) = v25;
              _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "Cannot create targetEntityBindPoint from %s.", (uint8_t *)buf, 0xCu);
            }
            v10 = 0;
LABEL_40:
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v27);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v27);
            re::BindNode::deinit((re::BindNode *)v29);
            return (re *)v10;
          }
        }
      }
LABEL_35:
      if ((v22 & 1) == 0
      {
        re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
      }
      re::makeBindPoint((re *)re::introspect<re::ecs2::Entity>(void)::info, (const re::IntrospectionBase *)v10, (uint64_t)buf);
      *((_QWORD *)this + 3) = *(_QWORD *)&buf[0];
      re::DynamicArray<re::RigDataValue>::operator=((uint64_t)this + 32, (uint64_t)buf + 8);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)buf + 8);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)buf + 8);
      goto LABEL_40;
    }
    return 0;
  }
  return v4;
}

unint64_t *re::ecs2::AnimationPlayCommand::setParameter(unint64_t *this, const re::StringID *a2, const re::StringID *a3)
{
  uint64_t v4;
  char *v5;

  if (*(_QWORD *)a2 >> 1 == 0x6E8A02F1A8ADD80FLL)
  {
    v4 = (uint64_t)this;
    v5 = (char *)*((_QWORD *)a2 + 1);
    if (v5 == "AnimationName")
      return re::StringID::operator=((unint64_t *)(v4 + 80), (uint64_t *)a3);
    this = (unint64_t *)strcmp(v5, "AnimationName");
    if (!(_DWORD)this)
      return re::StringID::operator=((unint64_t *)(v4 + 80), (uint64_t *)a3);
  }
  return this;
}

char *re::ecs2::AnimationPlayCommand::setParameter(char *this, const re::StringID *a2, char a3)
{
  char *v4;

  if (*(_QWORD *)a2 >> 1 == 0x1A4DFD60A1B7848DLL)
  {
    v4 = this;
    this = (char *)*((_QWORD *)a2 + 1);
    if (this == "SetExitTimeFromAnimation" || (this = (char *)strcmp(this, "SetExitTimeFromAnimation"), !(_DWORD)this))
      v4[96] = a3;
  }
  return this;
}

unint64_t *re::ecs2::AnimationPlayCommand::getParameter(unint64_t *this, const re::StringID *a2, re::StringID *a3)
{
  uint64_t v4;
  char *v5;

  if (*(_QWORD *)a2 >> 1 == 0x6E8A02F1A8ADD80FLL)
  {
    v4 = (uint64_t)this;
    v5 = (char *)*((_QWORD *)a2 + 1);
    if (v5 == "AnimationName")
      return re::StringID::operator=((unint64_t *)a3, (uint64_t *)(v4 + 80));
    this = (unint64_t *)strcmp(v5, "AnimationName");
    if (!(_DWORD)this)
      return re::StringID::operator=((unint64_t *)a3, (uint64_t *)(v4 + 80));
  }
  return this;
}

char *re::ecs2::AnimationPlayCommand::getParameter(char *this, const re::StringID *a2, BOOL *a3)
{
  char *v4;

  if (*(_QWORD *)a2 >> 1 == 0x1A4DFD60A1B7848DLL)
  {
    v4 = this;
    this = (char *)*((_QWORD *)a2 + 1);
    if (this == "SetExitTimeFromAnimation" || (this = (char *)strcmp(this, "SetExitTimeFromAnimation"), !(_DWORD)this))
      *a3 = v4[96];
  }
  return this;
}

void re::ecs2::AnimationPlayCommand::executeCommand(uint64_t a1, uint64_t a2, uint64_t a3, int a4, re::BindPoint *a5)
{
  re *v8;
  re::ecs2::EntityComponentCollection *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  re::AssetHandle *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  re::TimelineAsset *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  float v37;
  re::TimelineAsset *v38;
  re::TimelineAsset *v39;
  re::TimelineAsset *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  const void **v54;
  uint64_t v55;
  const void **v56;
  _QWORD *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  const void **v61;
  uint64_t v62[3];
  __int128 v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v8 = re::ecs2::ECSStateCommand::commandEntity((re::ecs2::ECSStateCommand *)a1, a5);
  if (v8)
  {
    v9 = (re *)((char *)v8 + 32);
    v10 = (_QWORD *)re::ecs2::EntityComponentCollection::getOrAdd((re *)((char *)v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v11 = re::ecs2::EntityComponentCollection::get(v9, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v11)
    {
      v12 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(v11 + 32));
      if (v12)
      {
        v13 = (_QWORD *)v12;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v14 = *(_QWORD *)(v12 + 136);
        if (!v14)
          goto LABEL_18;
        v15 = *(re::AssetHandle **)(v12 + 152);
        v16 = 24 * v14;
        while (1)
        {
          v17 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
          v18 = (uint64_t *)*((_QWORD *)v15 + 1);
          if (v18)
            v18 = (uint64_t *)v18[33];
          if (v17 == v18)
          {
            v23 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(v15);
            if (!v23)
              goto LABEL_17;
            v24 = re::AssetHandle::asset<re::TimelineAsset>(v23);
            if (!v24)
              goto LABEL_17;
            v22 = *(_QWORD *)(v24 + 16);
            if (!v22)
              goto LABEL_17;
          }
          else
          {
            v19 = re::TimelineAsset::assetType((re::TimelineAsset *)v17);
            v20 = *((_QWORD *)v15 + 1);
            if (!v20)
              goto LABEL_17;
            if (v19 != *(uint64_t **)(v20 + 264))
              goto LABEL_17;
            v21 = re::AssetHandle::asset<re::TimelineAsset>(v15);
            if (!v21)
              goto LABEL_17;
            v22 = *(_QWORD *)(v21 + 8);
          }
          if (re::StringID::operator==((_QWORD *)(v22 + 24), (_QWORD *)(a1 + 80)))
          {
            re::AssetHandle::operator=(&v65, (uint64_t *)v15);
            if (v66)
              goto LABEL_38;
LABEL_18:
            v25 = v13[12];
            if (!v25)
              goto LABEL_24;
            v26 = (_QWORD *)v13[14];
            v27 = 40 * v25;
            while (!re::StringID::operator==((_QWORD *)(a1 + 80), v26))
            {
              v26 += 5;
              v27 -= 40;
              if (!v27)
                goto LABEL_24;
            }
            re::AssetHandle::operator=(&v65, v26 + 2);
            if (!v66)
            {
LABEL_24:
              v28 = v13[7];
              if (!v28)
                goto LABEL_30;
              v29 = (_QWORD *)v13[9];
              v30 = 40 * v28;
              while (!re::StringID::operator==((_QWORD *)(a1 + 80), v29))
              {
                v29 += 5;
                v30 -= 40;
                if (!v30)
                  goto LABEL_30;
              }
              re::AssetHandle::operator=(&v65, v29 + 2);
              if (!v66)
              {
LABEL_30:
                v31 = v13[2];
                if (!v31)
                  goto LABEL_73;
                v32 = (uint64_t *)(v13[4] + 72);
                v33 = 120 * v31;
                while (!re::StringID::operator==((_QWORD *)(a1 + 80), v32 - 2))
                {
                  v32 += 15;
                  v33 -= 120;
                  if (!v33)
                    goto LABEL_73;
                }
                re::AssetHandle::operator=(&v65, v32);
                if (!v66)
                {
LABEL_73:
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v65);
                  return;
                }
              }
            }
LABEL_38:
            if (*(_BYTE *)(a1 + 96))
            {
              v34 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
              v35 = (uint64_t *)v66;
              if (v66)
                v35 = *(uint64_t **)(v66 + 264);
              if (v34 == v35)
              {
                v39 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v65);
                v37 = 0.0;
                if (v39)
                {
                  v40 = v39;
                  v41 = re::TimelineAsset::assetType(v39);
                  v42 = *((_QWORD *)v40 + 1);
                  if (v42)
                  {
                    if (v41 == *(uint64_t **)(v42 + 264))
                    {
                      v38 = v40;
LABEL_49:
                      v43 = re::AssetHandle::asset<re::TimelineAsset>(v38);
                      if (v43)
                      {
                        v44 = *(_QWORD *)(v43 + 16);
                        if (v44)
                          v37 = (*(double (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
                      }
                    }
                  }
                }
              }
              else
              {
                v36 = re::TimelineAsset::assetType((re::TimelineAsset *)v34);
                v37 = 0.0;
                if (v66 && v36 == *(uint64_t **)(v66 + 264))
                {
                  v38 = (re::TimelineAsset *)&v65;
                  goto LABEL_49;
                }
              }
              v45 = re::StateMachine::currentState((unint64_t *)a2, a3);
              v46 = *(_QWORD *)(v45 + 24);
              v47 = 0.0;
              v48 = 0.0;
              if (v46)
              {
                v49 = *(uint64_t **)(v45 + 40);
                v50 = 8 * v46;
                do
                {
                  v51 = *v49++;
                  v52 = *(float *)(v51 + 72);
                  if (v48 < v52)
                    v48 = v52;
                  v50 -= 8;
                }
                while (v50);
              }
              if (v37 > v48)
                v47 = v37 - v48;
              if (v47 >= 0.0)
                *(float *)(v45 + 104) = v47;
            }
            BYTE8(v63) = 0;
            HIDWORD(v63) = 0x80000000;
            v64 = "";
            LODWORD(v63) = 0;
            DWORD1(v63) = *(_DWORD *)(a2 + 40);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v62, (const re::AssetHandle *)&v65);
            *(_QWORD *)(a1 + 72) = re::ecs2::AnimationComponent::play((uint64_t)v10, v62, &v63, 0, 0);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v62);
            re::ecs2::Component::markDirty(v10);
            v53 = re::StateMachine::previousState(a2, a3);
            if (v53)
            {
              re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)&v59, (uint64_t *)(v53 + 48));
              v54 = v61;
              if (v60)
              {
                v55 = 8 * v60;
                v56 = v61;
                do
                {
                  if (*v56)
                  {
                    if (v57)
                      v57[9] = 0;
                  }
                  ++v56;
                  v55 -= 8;
                }
                while (v55);
              }
              if (v59)
                v58 = v54 == 0;
              else
                v58 = 1;
              if (!v58)
                (*(void (**)(void))(*(_QWORD *)v59 + 40))();
            }
            goto LABEL_73;
          }
LABEL_17:
          v15 = (re::AssetHandle *)((char *)v15 + 24);
          v16 -= 24;
          if (!v16)
            goto LABEL_18;
        }
      }
    }
  }
}

uint64_t re::AssetHandle::asset<re::AnimationLibraryAsset>(re::AnimationLibraryAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::AnimationLibraryAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(re::AssetHandle *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

_QWORD *re::ecs2::AnimationStopCommand::executeCommand(re::ecs2::ECSStateCommand *a1, uint64_t a2, uint64_t a3, int a4, re::BindPoint *a5)
{
  _QWORD *result;
  _QWORD *v8;
  const void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;

  result = re::ecs2::ECSStateCommand::commandEntity(a1, a5);
  if (result)
  {
    result = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v8 = result;
      result = (_QWORD *)re::StateMachine::previousState(a2, a3);
      if (result)
      {
        re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)&v14, result + 6);
        if (v15)
        {
          v9 = v16;
          v10 = 8 * v15;
          do
          {
            if (*v9)
            {
              if (v11)
              {
                v12 = v11;
                v13 = v11[9];
                if (v13)
                {
                  re::ecs2::AnimationComponent::stop((uint64_t)v8, v13, 0.0);
                  re::ecs2::Component::markDirty(v8);
                  v12[9] = 0;
                }
              }
            }
            ++v9;
            v10 -= 8;
          }
          while (v10);
        }
        result = (_QWORD *)v14;
        if (v14)
        {
          if (v16)
            return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
        }
      }
    }
  }
  return result;
}

re *re::ecs2::AnimationStopAllCommand::executeCommand(re::ecs2::ECSStateCommand *a1, int a2, int a3, int a4, re::BindPoint *a5)
{
  re *result;
  double v6;
  re *v7;

  result = re::ecs2::ECSStateCommand::commandEntity(a1, a5);
  if (result)
  {
    result = (re *)re::ecs2::EntityComponentCollection::get((re *)((char *)result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v7 = result;
      re::ecs2::AnimationComponent::stopAll(result, v6);
      return (re *)re::ecs2::Component::markDirty(v7);
    }
  }
  return result;
}

char *re::ecs2::AnimationSetPlaybackTimeCommand::setParameter(char *this, const re::StringID *a2, double a3)
{
  char *v4;

  if (*(_QWORD *)a2 >> 1 == 0x1D797F455A966BA8)
  {
    v4 = this;
    this = (char *)*((_QWORD *)a2 + 1);
    if (this == "PlaybackTime" || (this = (char *)strcmp(this, "PlaybackTime"), !(_DWORD)this))
      *((double *)v4 + 10) = a3;
  }
  return this;
}

double re::ecs2::AnimationSetPlaybackTimeCommand::getParameter(re::ecs2::AnimationSetPlaybackTimeCommand *this, const re::StringID *a2, double *a3)
{
  char *v5;
  double result;

  if (*(_QWORD *)a2 >> 1 == 0x1D797F455A966BA8)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if (v5 == "PlaybackTime" || !strcmp(v5, "PlaybackTime"))
    {
      result = *((double *)this + 10);
      *a3 = result;
    }
  }
  return result;
}

uint64_t *re::ecs2::AnimationSetPlaybackTimeCommand::executeCommand(uint64_t a1, uint64_t a2, uint64_t a3, int a4, re::BindPoint *a5)
{
  uint64_t *result;
  re::ecs2::AnimationComponent *v9;
  const void **v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;

  result = (uint64_t *)re::ecs2::ECSStateCommand::commandEntity((re::ecs2::ECSStateCommand *)a1, a5);
  if (result)
  {
    result = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::AnimationComponent *)result;
      result = (uint64_t *)re::StateMachine::previousState(a2, a3);
      if (result)
      {
        re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)&v15, result + 6);
        if (v16)
        {
          v10 = v17;
          v11 = 8 * v16;
          do
          {
            if (*v10)
            {
              if (v12)
              {
                v13 = v12[9];
                if (v13)
                {
                  re::ecs2::AnimationComponent::setAnimationPlaybackTime(v9, v13, *(double *)(a1 + 80));
                  re::ecs2::Component::markDirty(v9);
                }
              }
            }
            ++v10;
            v11 -= 8;
          }
          while (v11);
        }
        result = (uint64_t *)v15;
        if (v15 && v17)
          result = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
      }
      v14 = *(_QWORD *)(a1 + 72);
      if (v14)
      {
        re::ecs2::AnimationComponent::setAnimationPlaybackTime(v9, v14, *(double *)(a1 + 80));
        return re::ecs2::Component::markDirty(v9);
      }
    }
  }
  return result;
}

void re::ecs2::AnimationPlayCommand::~AnimationPlayCommand(re::ecs2::AnimationPlayCommand *this)
{
  re::StringID *v2;

  *(_QWORD *)this = &off_24ED705F0;
  v2 = (re::ecs2::AnimationPlayCommand *)((char *)this + 8);
  re::StringID::destroyString((re::ecs2::AnimationPlayCommand *)((char *)this + 80));
  *(_QWORD *)this = &off_24ED64818;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::StringID::destroyString(v2);
}

{
  re::StringID *v2;

  *(_QWORD *)this = &off_24ED705F0;
  v2 = (re::ecs2::AnimationPlayCommand *)((char *)this + 8);
  re::StringID::destroyString((re::ecs2::AnimationPlayCommand *)((char *)this + 80));
  *(_QWORD *)this = &off_24ED64818;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::StringID::destroyString(v2);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnimationPlayCommand::commandID(re::ecs2::AnimationPlayCommand *this)
{
  return 1;
}

uint64_t re::ecs2::AnimationPlayCommand::getRequiredParameterCount(re::ecs2::AnimationPlayCommand *this)
{
  return 2;
}

void *re::ecs2::AnimationPlayCommand::getParameterNames(re::ecs2::AnimationPlayCommand *this)
{
  return &re::ecs2::AnimationPlayCommand::m_parameterNames;
}

void *re::ecs2::AnimationPlayCommand::getParameterDescriptions(re::ecs2::AnimationPlayCommand *this)
{
  return &re::ecs2::AnimationPlayCommand::m_parameterDescriptions;
}

void *re::ecs2::AnimationPlayCommand::getParameterTypes(re::ecs2::AnimationPlayCommand *this)
{
  return &re::ecs2::AnimationPlayCommand::m_parameterTypes;
}

void re::ecs2::AnimationStopCommand::~AnimationStopCommand(re::ecs2::AnimationStopCommand *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopCommand *)((char *)this + 8));
}

{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopCommand *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnimationStopCommand::commandID(re::ecs2::AnimationStopCommand *this)
{
  return 2;
}

void re::ecs2::AnimationStopAllCommand::~AnimationStopAllCommand(re::ecs2::AnimationStopAllCommand *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopAllCommand *)((char *)this + 8));
}

{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopAllCommand *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnimationStopAllCommand::commandID(re::ecs2::AnimationStopAllCommand *this)
{
  return 3;
}

void re::ecs2::AnimationSetPlaybackTimeCommand::~AnimationSetPlaybackTimeCommand(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationSetPlaybackTimeCommand *)((char *)this + 8));
}

{
  char *v2;

  *(_QWORD *)this = &off_24ED64818;
  v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationSetPlaybackTimeCommand *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnimationSetPlaybackTimeCommand::commandID(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return 4;
}

uint64_t re::ecs2::AnimationSetPlaybackTimeCommand::getRequiredParameterCount(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return 1;
}

void *re::ecs2::AnimationSetPlaybackTimeCommand::getParameterNames(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return &re::ecs2::AnimationSetPlaybackTimeCommand::m_parameterNames;
}

void *re::ecs2::AnimationSetPlaybackTimeCommand::getParameterDescriptions(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return &re::ecs2::AnimationSetPlaybackTimeCommand::m_parameterDescriptions;
}

void *re::ecs2::AnimationSetPlaybackTimeCommand::getParameterTypes(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return &re::ecs2::AnimationSetPlaybackTimeCommand::m_parameterTypes;
}

void re::ecs2::VideoPlayerComponent::~VideoPlayerComponent(re::ecs2::VideoPlayerComponent *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED708D0;
  v3 = (_OWORD *)((char *)this + 112);
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    if ((*((_BYTE *)this + 120) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 16));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VideoPlayerComponent *)((char *)this + 40));
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {

    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::VideoPlayerComponent::~VideoPlayerComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::VideoPlayerComponent::setVideoAsset(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  __int16 v7[8];

  if (a1[6] != a2[1])
  {
    v4 = *re::videoLogObjects((re *)a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 0;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Resetting VideoAsset load request.", (uint8_t *)v7, 2u);
    }
    v5 = a1[4];
    if (v5)
    {

      a1[4] = 0;
    }
  }
  return re::AssetHandle::operator=(a1 + 5, a2);
}

void re::ecs2::VideoPlayerComponent::preloadVideoAsset(re::ecs2::VideoPlayerComponent *this, re::AssetManager *a2)
{
  uint64_t v4;
  dispatch_once_t *v5;
  uint64_t v6;
  _QWORD v7[6];

  if (*((_QWORD *)this + 6))
  {
    v4 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::ecs2::VideoPlayerComponent *)((char *)this + 40));
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 112);
      v5 = (dispatch_once_t *)(v4 + 112);
      v7[0] = MEMORY[0x24BDAC760];
      v7[1] = 3221225472;
      v7[2] = ___ZN2re4ecs220VideoPlayerComponent17preloadVideoAssetEPNS_12AssetManagerE_block_invoke;
      v7[3] = &__block_descriptor_48_e5_v8__0l;
      v7[4] = this;
      v7[5] = a2;
      if (v6 != -1)
        dispatch_once(v5, v7);
    }
  }
}

void ___ZN2re4ecs220VideoPlayerComponent17preloadVideoAssetEPNS_12AssetManagerE_block_invoke_2(re *a1, int a2)
{
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  v3 = *re::videoLogObjects(a1);
  if (a2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "[REAssetManagerPreloadVideoAsset] Completed preloading video asset load request", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "[REAssetManagerPreloadVideoAsset] Failed to create an asset load request", v4, 2u);
  }
}

uint64_t *re::ecs2::allocInfo_VideoPlayerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254116A78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254116A78))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116AD0, 0);
    *(uint64_t *)((char *)&qword_254116AE0 + 6) = 0;
    qword_254116AE0 = 0;
    qword_254116AF0 = 0;
    qword_254116AF8 = 0xFFFFFFFFLL;
    qword_254116AD0 = (uint64_t)&off_24ED7DAA8;
    qword_254116B00 = (uint64_t)"VideoPlayerComponent";
    dword_254116B08 = 0;
    *(_OWORD *)&algn_254116B0C[4] = 0u;
    *(_OWORD *)&algn_254116B0C[20] = 0u;
    *(_OWORD *)&algn_254116B0C[36] = 0u;
    qword_254116B40 = 0;
    __cxa_guard_release(&qword_254116A78);
  }
  return &qword_254116AD0;
}

void re::ecs2::initInfo_VideoPlayerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[2];
  __int128 v46;

  v45[0] = 0xE22DC2D7425E8282;
  v45[1] = "VideoPlayerComponent";
  re::StringID::destroyString((re::StringID *)v45);
  *((_OWORD *)this + 2) = v46;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_343);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_343);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254116A80 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "m_videoAsset";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254116A88 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "m_enableReflections";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x4800000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254116A90 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "m_screenRoundedCornerEnabled";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x4900000008;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254116A98 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "m_screenAspectRatioAnimationEnabled";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x4A00000009;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254116AA0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_uint64_t((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "m_guid";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x400000000DLL;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254116AA8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "m_screenDeferAspectRatioTransitionToApp";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x4B0000000FLL;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254116AB0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v34 = re::ecs2::introspect_HDRDumpInfo((re::IntrospectionBase **)1);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "m_dumpInfo";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x5000000010;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254116AB8 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "m_desiredViewingMode";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x9000000011;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_254116AC0 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_BOOL((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "m_lowLatencyEnabled";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x9800000018;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_254116AC8 = v43;
      __cxa_guard_release(&_MergedGlobals_343);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &qword_254116A80;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoPlayerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoPlayerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoPlayerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v44 = v46;
}

uint64_t re::internal::defaultConstruct<re::ecs2::VideoPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::VideoPlayerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoPlayerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoPlayerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoPlayerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoPlayerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoPlayerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoPlayerComponent>, this);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &unk_24ED70990;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::target_type()
{
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::VideoPlayerComponent>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v2 = (_QWORD *)(a1 + 112);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED708D0;
  *(_BYTE *)(v3 + 80) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 60) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_QWORD *)(v3 + 136) = 0;
  re::DynamicString::setCapacity(v2, 0);
  *(_BYTE *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 148) = 1055286886;
  *(_BYTE *)(a1 + 152) = 0;
  return a1;
}

void re::ecs2::ThrottleManager::update(re::ecs2::ThrottleManager *this, float a2)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = *((float *)this + 29);
  if (v3 <= 0.0)
  {
    *((_DWORD *)this + 30) = 0;
    *((_QWORD *)this + 16) = 0;
  }
  else
  {
    v4 = *((float *)this + 30) - a2;
    *((float *)this + 30) = v4;
    if (v4 <= 0.0)
    {
      ++*((_QWORD *)this + 16);
      *((float *)this + 30) = v3 + fmodf(v4, v3);
    }
  }
  if (*((_BYTE *)this + 112))
  {
    v5 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*((_QWORD *)this + 3));
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v6 + 40);
        v9 = v8 + 8 * v7;
        do
        {
          v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 24);
            if (v11)
            {
              v12 = *(_QWORD ***)(v10 + 40);
              v13 = 8 * v11;
              do
              {
                v14 = *v12++;
                re::ecs2::Component::markDirty(v14);
                v13 -= 8;
              }
              while (v13);
            }
          }
          v8 += 8;
        }
        while (v8 != v9);
      }
    }
    *((_BYTE *)this + 112) = 0;
  }
}

void re::ecs2::ThrottleManager::init(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 24) = a2;
  v3 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v3 + 8))(&v6, v3, "engine:throttleGhosted.rematerial");
  v4 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 88) = v6;
  v6 = v4;
  v5 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v7;
  v7 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

uint64_t re::ecs2::ThrottleManager::setEngineThrottle(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 80) = *a2;
  return result;
}

uint64_t re::ecs2::ThrottleManager::engineThrottle(re::ecs2::ThrottleManager *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t re::ecs2::ThrottleManager::setThrottleForPeer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;

  v23 = a2;
  v7 = *(_QWORD *)(a1 + 32);
  v6 = a1 + 32;
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v9 = v8 ^ (v8 >> 31);
  if (v7)
  {
    v10 = v9 % *(unsigned int *)(a1 + 56);
    v11 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v10);
    if ((_DWORD)v11 != 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(v12 + 32 * v11 + 16) == a2)
      {
LABEL_6:
        *(_QWORD *)(v12 + 32 * v11 + 24) = *(_QWORD *)a3;
        goto LABEL_9;
      }
      while (1)
      {
        v11 = *(_DWORD *)(v12 + 32 * v11 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v11 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v12 + 32 * v11 + 16) == a2)
          goto LABEL_6;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>(v6, v10, v9, &v23, (_QWORD *)a3);
LABEL_9:
  ++*(_DWORD *)(a1 + 72);
  v13 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*(_QWORD *)(a1 + 24));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
  v15 = *(_QWORD *)(result + 24);
  if (v15)
  {
    v16 = *(_QWORD *)(result + 40);
    v17 = v16 + 8 * v15;
    while (1)
    {
      result = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)v16 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (result)
      {
        v18 = *(_QWORD *)(result + 24);
        if (v18)
          break;
      }
LABEL_26:
      v16 += 8;
      if (v16 == v17)
        return result;
    }
    v19 = *(_QWORD *)(result + 40);
    v20 = 8 * v18;
    while (1)
    {
      result = *(_QWORD *)(*(_QWORD *)v19 + 32);
      if (result)
        result = RESyncableGetOwnerPeerID();
      if (result != a2)
        goto LABEL_25;
      v21 = *(_QWORD *)(*(_QWORD *)v19 + 16);
      v22 = *(_DWORD *)(v21 + 288);
      if (*(_DWORD *)a3 == 2)
        break;
      if ((v22 & 0x40) != 0)
        goto LABEL_21;
LABEL_22:
      result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (*(_DWORD *)(result + 28) != *(_DWORD *)a3 || *(_DWORD *)(result + 32) != *(_DWORD *)(a3 + 4))
      {
        *(_QWORD *)(result + 28) = *(_QWORD *)a3;
        result = (uint64_t)re::ecs2::Component::markDirty((_QWORD *)result);
      }
LABEL_25:
      v19 += 8;
      v20 -= 8;
      if (!v20)
        goto LABEL_26;
    }
    if ((v22 & 0x40) != 0)
      goto LABEL_22;
LABEL_21:
    re::ecs2::Entity::setGhosted(*(re::ecs2::Entity **)(*(_QWORD *)v19 + 16), *(_DWORD *)a3 == 2);
    goto LABEL_22;
  }
  return result;
}

uint64_t re::ecs2::ThrottleManager::throttleForPeer(re::ecs2::ThrottleManager *this, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v13 = a2;
  v5 = *((_QWORD *)this + 4);
  v3 = (char *)this + 32;
  LODWORD(v4) = v5;
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v7 = v6 ^ (v6 >> 31);
  if (!v5)
    goto LABEL_4;
  v8 = *(unsigned int *)(*((_QWORD *)this + 5) + 4 * (v7 % *((unsigned int *)this + 14)));
  if ((_DWORD)v8 != 0x7FFFFFFF)
  {
    v11 = *((_QWORD *)this + 6);
    if (*(_QWORD *)(v11 + 32 * v8 + 16) == a2)
      return *(_QWORD *)(v11 + 32 * v8 + 24);
    while (1)
    {
      v8 = *(_DWORD *)(v11 + 32 * v8 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v8 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v11 + 32 * v8 + 16) == a2)
        return *(_QWORD *)(v11 + 32 * v8 + 24);
    }
  }
  v4 = v7 % *((unsigned int *)this + 14);
  v9 = *(unsigned int *)(*((_QWORD *)this + 5) + 4 * v4);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_4:
    result = 0;
    ++*((_DWORD *)this + 18);
    return result;
  }
  v12 = *((_QWORD *)this + 6);
  if (*(_QWORD *)(v12 + 32 * v9 + 16) != a2)
  {
    while (1)
    {
      v9 = *(_DWORD *)(v12 + 32 * v9 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v9 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v12 + 32 * v9 + 16) == a2)
        return 0;
    }
    goto LABEL_4;
  }
  return 0;
}

uint64_t re::ecs2::ThrottleManager::resetThrottleForPeer(uint64_t this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;

  if (*(_QWORD *)(this + 32))
  {
    v2 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v3 = (v2 ^ (v2 >> 31)) % *(unsigned int *)(this + 56);
    v4 = *(_QWORD *)(this + 40);
    v5 = *(unsigned int *)(v4 + 4 * v3);
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(this + 48);
      v7 = v6 + 32 * v5;
      if (*(_QWORD *)(v7 + 16) == a2)
      {
        *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
LABEL_9:
        v10 = *(_QWORD *)(this + 48);
        v11 = v10 + 32 * v5;
        v14 = *(_DWORD *)(v11 + 8);
        v13 = (int *)(v11 + 8);
        v12 = v14;
        if (v14 < 0)
        {
          *v13 = v12 & 0x7FFFFFFF;
          v10 = *(_QWORD *)(this + 48);
          v12 = *(_DWORD *)(v10 + 32 * v5 + 8);
        }
        v15 = *(_DWORD *)(this + 72);
        *(_DWORD *)(v10 + 32 * v5 + 8) = *(_DWORD *)(this + 68) | v12 & 0x80000000;
        --*(_DWORD *)(this + 60);
        *(_DWORD *)(this + 68) = v5;
        *(_DWORD *)(this + 72) = v15 + 1;
      }
      else
      {
        while (1)
        {
          v8 = v5;
          v5 = *(_DWORD *)(v6 + 32 * v5 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v5 == 0x7FFFFFFF)
            break;
          v9 = v6 + 32 * v5;
          if (*(_QWORD *)(v9 + 16) == a2)
          {
            *(_DWORD *)(v6 + 32 * v8 + 8) = *(_DWORD *)(v6 + 32 * v8 + 8) & 0x80000000 | *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
            goto LABEL_9;
          }
        }
      }
    }
  }
  return this;
}

void re::ecs2::ThrottleManager::~ThrottleManager(re::ecs2::ThrottleManager *this)
{
  re::AssetHandle::~AssetHandle((re::ecs2::ThrottleManager *)((char *)this + 88));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::ThrottleManager *)((char *)this + 88));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ThrottleManager::ghostMaterialHandle(re::ecs2::ThrottleManager *this)
{
  return (uint64_t)this + 88;
}

float re::ecs2::ThrottleManager::deformationThrottleInterval(re::ecs2::ThrottleManager *this)
{
  return *((float *)this + 29);
}

uint64_t re::ecs2::ThrottleManager::setDeformationThrottleInterval(uint64_t this, float a2)
{
  *(float *)(this + 116) = a2;
  return this;
}

uint64_t re::ecs2::ThrottleManager::deformationThrottleCounter(re::ecs2::ThrottleManager *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t re::ecs2::ThrottleManager::setThrottleForceSkinnedNormals(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 113) != a2)
  {
    *(_BYTE *)(this + 113) = a2;
    *(_BYTE *)(this + 112) = 1;
  }
  return this;
}

uint64_t re::ecs2::ThrottleManager::isThrottledUsingForceSkinnedNormals(re::ecs2::ThrottleManager *this)
{
  return *((unsigned __int8 *)this + 113);
}

uint64_t *re::ecs2::allocInfo_AllowsCASeparatedProxyComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_344);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_344))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116B68, 0);
    *(uint64_t *)((char *)&qword_254116B78 + 6) = 0;
    qword_254116B78 = 0;
    qword_254116B88 = 0;
    qword_254116B90 = 0xFFFFFFFFLL;
    qword_254116B68 = (uint64_t)&off_24ED7DAA8;
    qword_254116B98 = (uint64_t)"AllowsCASeparatedProxyComponent";
    dword_254116BA0 = 0;
    xmmword_254116BA8 = 0u;
    unk_254116BB8 = 0u;
    xmmword_254116BC8 = 0u;
    qword_254116BD8 = 0;
    __cxa_guard_release(&_MergedGlobals_344);
  }
  return &qword_254116B68;
}

void re::ecs2::initInfo_AllowsCASeparatedProxyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xEC25AF0849649990;
  v14[1] = "AllowsCASeparatedProxyComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254116B50);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254116B50);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254116B58 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "validId";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254116B60 = v12;
      __cxa_guard_release(&qword_254116B50);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254116B58;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AllowsCASeparatedProxyComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AllowsCASeparatedProxyComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AllowsCASeparatedProxyComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AllowsCASeparatedProxyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::AllowsCASeparatedProxyComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A000;
}

void *re::internal::defaultDestruct<re::ecs2::AllowsCASeparatedProxyComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AllowsCASeparatedProxyComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A000;
}

void *re::internal::defaultDestructV2<re::ecs2::AllowsCASeparatedProxyComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AllowsCASeparatedProxyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AllowsCASeparatedProxyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AllowsCASeparatedProxyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AllowsCASeparatedProxyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AllowsCASeparatedProxyComponent>, this);
}

BOOL re::ecs2::DeferredActivationComponentStateImpl::processDirtyComponents(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::ComponentHelper *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  re::ecs2::Entity *v17;
  unint64_t v18;
  re::ecs2::Entity **v19;
  uint64_t v20;
  re::ecs2::Entity *v21;
  re::ecs2::NetworkComponent *v22;
  _BOOL8 v23;
  NSObject *v24;
  re::ecs2::ComponentHelper *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[8];
  unint64_t v31;
  unint64_t v32;
  int v33;
  re::ecs2::Entity **v34;

  if (*((_QWORD *)a1 + 1))
  {
    v34 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    re::DynamicArray<float *>::setCapacity(buf, 0);
    ++v33;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
    v9 = v27;
    v8 = v28;
    v27 = a4;
    v28 = v9;
    v29 = v8;
    if (v9 != a5 || (unsigned __int16)v8 != 0xFFFFLL || (v8 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
        v11 = *(_QWORD *)v10;
        v12 = *(_QWORD *)(*(_QWORD *)v10 + 32);
        if (!v12)
        {
          (*(void (**)(re::ecs2::ComponentHelper **__return_ptr))(**((_QWORD **)a1 + 1) + 208))(&v26);
          v13 = *(_QWORD *)(v11 + 32);
          v14 = v26;
          *(_QWORD *)(v11 + 32) = v26;
          v26 = (re::ecs2::ComponentHelper *)v13;
          if (v13)
          {

            v14 = *(re::ecs2::ComponentHelper **)(v11 + 32);
          }
          re::ecs2::ComponentHelper::addToLoadRequest(v14, *(re::AssetLoadRequest **)(v11 + 16), (re::ecs2::Entity *)1);
          v12 = *(_QWORD *)(v11 + 32);
        }
        v15 = *(os_unfair_lock_s **)(v12 + 24);
        v16 = v15 + 48;
        os_unfair_lock_lock(v15 + 48);
        LODWORD(v15) = v15[84];
        os_unfair_lock_unlock(v16);
        if ((_DWORD)v15)
        {
          v17 = *(re::ecs2::Entity **)(v11 + 16);
          v18 = v32;
          if (v32 >= v31)
          {
            re::DynamicArray<float *>::growCapacity(buf, v32 + 1);
            v18 = v32;
          }
          v34[v18] = v17;
          v32 = v18 + 1;
          ++v33;
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
      }
      while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
    }
    if (v32)
    {
      v19 = v34;
      v20 = 8 * v32;
      do
      {
        v21 = *v19;
        re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)*v19 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        re::ecs2::Entity::setSelfEnabled(v21, 1);
        v22 = (re::ecs2::NetworkComponent *)*((_QWORD *)v21 + 25);
        if (v22)
          re::ecs2::NetworkComponent::markEntityDirty(v22, (re::ecs2::NetworkComponent *)0xFF);
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
    v23 = *(_DWORD *)(a5 + 40) != 0;
    if (*(_QWORD *)buf && v34)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
  }
  else
  {
    v24 = *re::ecsComponentsLogObjects(a1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "AssetService not found.", buf, 2u);
    }
    return 0;
  }
  return v23;
}

uint64_t re::ecs2::DeferredActivationSystem::willAddSystemToECSService(re::ecs2::DeferredActivationSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  if (v3)
    v4 = (*(unsigned __int8 *)(v3 + 424) >> 4) & 1;
  else
    LOBYTE(v4) = 1;
  *((_BYTE *)this + 104) = v4;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AssetService>(v5);
  *((_QWORD *)this + 15) = result;
  return result;
}

uint64_t re::ecs2::DeferredActivationSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 120) = 0;
  return this;
}

void re::ecs2::DeferredActivationSystem::willAddSceneToECSService(re::ecs2::DeferredActivationSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 128;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::DeferredActivationSystem *)((char *)this + 248);
  v6 = *((_QWORD *)this + 32);
  v7 = *((_DWORD *)this + 66);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 272);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 35);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 272);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 35);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 248, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::DeferredActivationSystem *)((char *)this + 184), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 296;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 21);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 17);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 16, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 17);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 144) & 1) != 0)
    v19 = (char *)this + 152;
  else
    v19 = (char *)*((_QWORD *)this + 20);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 21);
  ++*((_DWORD *)this + 44);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 21);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 21) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::DeferredActivationSystem *)((char *)this + 184), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 21);
  v29 = *((_QWORD *)this + 36);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 36) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 36) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 264) & 1) != 0)
      v33 = (char *)this + 272;
    else
      v33 = (char *)*((_QWORD *)this + 35);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 32) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 21);
  v35 = *((_QWORD *)this + 42);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 42) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::DeferredActivationSystem *)((char *)this + 296), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 42) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 312) & 1) != 0)
      v39 = (char *)this + 320;
    else
      v39 = (char *)*((_QWORD *)this + 41);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 38) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 296;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 360))
    return;
  v40 = *((_QWORD *)this + 38);
  v41 = *((_DWORD *)this + 78);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 320);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 41);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 43);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 320);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 41);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::DeferredActivationSystem::willRemoveSceneFromECSService(re::ecs2::DeferredActivationSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 184);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 23, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 24) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 296, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 128, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::DeferredActivationSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  _QWORD v25[2];
  uint64_t v26;

  v25[0] = a3;
  v25[1] = a4;
  if (!*(_BYTE *)(a1 + 104))
    return;
  v5 = a1 + 128;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 192)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 184), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 296, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, v25, v7, v9, v10, 0);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v25, v7, v12, v13, 0);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (!*(_DWORD *)(v15 + 40))
  {
    if (!v11)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (((v11 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, v25, v7, v14, v15, 0)) & 1) != 0)LABEL_9:re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 296, v6);
LABEL_10:
  if (!*(_BYTE *)(a1 + 360))
    return;
  v16 = *(_QWORD *)(a1 + 304);
  v17 = *(_DWORD *)(a1 + 312);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 320);
    else
      v18 = *(_QWORD **)(a1 + 328);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_28:
    v24 = *(re::ecs2::System **)(a1 + 344);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 320);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 328);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_28;
}

uint64_t *re::ecs2::allocInfo_DeferredActivationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_345);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_345))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116BE8, 0);
    *(uint64_t *)((char *)&qword_254116BF8 + 6) = 0;
    qword_254116BF8 = 0;
    qword_254116C08 = 0;
    qword_254116C10 = 0xFFFFFFFFLL;
    qword_254116BE8 = (uint64_t)&off_24ED7DAA8;
    qword_254116C18 = (uint64_t)"DeferredActivationSystem";
    dword_254116C20 = 0;
    unk_254116C28 = 0u;
    unk_254116C38 = 0u;
    unk_254116C48 = 0u;
    qword_254116C58 = 0;
    __cxa_guard_release(&_MergedGlobals_345);
  }
  return &qword_254116BE8;
}

void re::ecs2::initInfo_DeferredActivationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE1E98252F161208;
  v5[1] = "DeferredActivationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_DeferredActivationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DeferredActivationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DeferredActivationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DeferredActivationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DeferredActivationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::DeferredActivationSystem *re::internal::defaultConstruct<re::ecs2::DeferredActivationSystem>(int a1, int a2, re::ecs2::DeferredActivationSystem *this)
{
  return re::ecs2::DeferredActivationSystem::DeferredActivationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::DeferredActivationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 16);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::DeferredActivationSystem>(_QWORD *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 16);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DeferredActivationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeferredActivationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DeferredActivationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DeferredActivationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DeferredActivationSystem>, this);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::DeferredActivationSystem::~DeferredActivationSystem(re::ecs2::DeferredActivationSystem *this)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 16);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 16);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::DeferredActivationSystem::typeInfo(re::ecs2::DeferredActivationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeferredActivationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DeferredActivationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DeferredActivationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DeferredActivationSystem>, 0);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED70B10;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED70B68;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED70BC0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED70C18;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED70B10;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED70B68;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED70BC0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED70C18;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70B10;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70B10;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70B68;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70B68;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70BC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70BC0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70C18;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70C18;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t checkFromNetworkComponent(re::ecs2::Entity *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t OwnerPeerID;
  uint64_t result;
  uint64_t v9;
  re::ecs2::Entity **v10;
  int v11;
  uint64_t v12;
  re::ecs2::Entity *v13;
  uint64_t v14;

  v6 = *((_QWORD *)a1 + 25);
  if (v6)
  {
    OwnerPeerID = *(_QWORD *)(v6 + 32);
    if (OwnerPeerID)
      OwnerPeerID = RESyncableGetOwnerPeerID();
    if (OwnerPeerID == a2)
      return 1;
  }
  if (a3 > 4)
    return 0;
  v9 = *((_QWORD *)a1 + 41);
  if (!v9)
    return 0;
  v10 = (re::ecs2::Entity **)*((_QWORD *)a1 + 43);
  v11 = a3 + 1;
  v12 = 8 * v9 - 8;
  do
  {
    v13 = *v10++;
    result = checkFromNetworkComponent(v13, a2, v11);
    if ((result & 1) != 0)
      break;
    v14 = v12;
    v12 -= 8;
  }
  while (v14);
  return result;
}

uint64_t enableCaptureDaemonEntities(void)
{
  unsigned __int8 v0;
  unsigned __int8 *v1;
  uint64_t v3;
  const char *v4;

  v1 = (unsigned __int8 *)&unk_255828000;
  if ((v0 & 1) == 0)
  {
    v1 = (_BYTE *)&unk_255828000;
    if ((_DWORD)v3)
    {
      enableCaptureDaemonEntities(void)::enable = enableCaptureDaemonEntities(void)::$_0::operator()(v3, v4);
      v1 = (_BYTE *)&unk_255828000;
    }
  }
  return v1[2320];
}

BOOL enableCaptureDaemonEntities(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  re *v2;
  unsigned __int8 v3;
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"trace.captureDaemonEntities", a2, (char *)v6);
  if (LOBYTE(v6[0]))
    v3 = BYTE1(v6[0]);
  else
    v3 = 1;
  v4 = *re::ecsComponentsLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "[StateRecorderSystem] CaptureDaemonEntities enabled: %d", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t isAppTLE(uint64_t result, const re::DynamicString *a2, unint64_t a3)
{
  const char **v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[2];
  _BYTE v14[16];
  _QWORD v15[2];

  if (result)
  {
    v5 = (const char **)result;
    result = 0;
    v6 = *((_QWORD *)a2 + 1);
    v7 = (v6 & 1) != 0 ? v6 >> 1 : v6 >> 1;
    if (a3 && v7)
    {
      v8 = strlen(v5[35]);
      v15[0] = v5[35];
      v15[1] = v8;
      if (!enableCaptureDaemonEntities())
        return checkFromNetworkComponent((re::ecs2::Entity *)v5, a3, 0);
      v9 = *((_QWORD *)a2 + 1);
      v10 = (char *)*((_QWORD *)a2 + 2);
      if ((v9 & 1) == 0)
        v10 = (char *)a2 + 9;
      v11 = v9 >> 1;
      v12 = v9 >> 1;
      if ((*((_QWORD *)a2 + 1) & 1) != 0)
        v12 = v11;
      v13[0] = v10;
      v13[1] = v12;
      re::StringSlice::findFirstOf(v15, (uint64_t)v13, 0, (uint64_t)v14);
      if (v14[0])
        return 1;
      else
        return checkFromNetworkComponent((re::ecs2::Entity *)v5, a3, 0);
    }
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::isAppTLE(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  const re::DynamicString *v7;
  unint64_t v8;
  uint64_t result;

  if (!a2)
    return 0;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 104))(*((_QWORD *)this + 23));
  if (!v4)
    return 0;
  v5 = (unint64_t *)v3;
  v6 = (unint64_t *)(v3 + 40 * v4);
  do
  {
    v7 = (const re::DynamicString *)(v5 + 1);
    v8 = *v5;
    v5 += 5;
    result = isAppTLE((uint64_t)a2, v7, v8);
  }
  while ((result & 1) == 0 && v5 != v6);
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v2;
  uint64_t v4;
  uint64_t v6;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 3);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 288) & 0x80) != 0)
      goto LABEL_11;
    v6 = *(_QWORD *)(v4 + 296);
    if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 224, &v6))
    {
      return 1;
    }
    v4 = *((_QWORD *)v2 + 3);
    if (v4)
    {
LABEL_11:
      do
      {
        if ((*(_BYTE *)(v4 + 288) & 0x80) != 0)
          break;
        v2 = (re::ecs2::Entity *)v4;
        v4 = *(_QWORD *)(v4 + 24);
      }
      while (v4);
    }
  }
  return re::ecs2::StateRecorderSystem::isAppTLE(this, v2);
}

_QWORD *re::ecs2::StateRecorderSystem::processDeferredEntries(re::ecs2::StateRecorderSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    v3 = *((_QWORD *)this + 38);
    v4 = v2 << 6;
    do
    {
      if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 224, (uint64_t *)v3))
      {
        v5 = *(unsigned __int8 *)(v3 + 16);
        if (v5 == 3)
        {
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 224, (uint64_t *)v3);
        }
        else if (v5 == 1)
        {
          re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(*((_QWORD *)this + 21) + 16), (__int128 *)v3);
        }
      }
      v3 += 64;
      v4 -= 64;
    }
    while (v4);
  }
  return re::DynamicArray<re::TraceEntry>::clear((_QWORD *)this + 34);
}

void re::ecs2::introspect_RayCastType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254116C68);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254116C68);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "None";
      qword_254116C88 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Once";
      qword_254116C90 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Continuous";
      qword_254116C98 = v32;
      __cxa_guard_release(&qword_254116C68);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254116C70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254116C70))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254116CC0, "RayCastType", 4, 4, 1, 1);
    qword_254116CC0 = (uint64_t)&off_24ED7D9E8;
    qword_254116D00 = (uint64_t)&re::ecs2::introspect_RayCastType(BOOL)::enumTable;
    dword_254116CD0 = 9;
    __cxa_guard_release(&qword_254116C70);
  }
  if ((_MergedGlobals_346 & 1) == 0)
  {
    _MergedGlobals_346 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254116CC0, a2);
    v34 = 0x1F085B2B6C18286;
    v35 = "RayCastType";
    v38[0] = 0x607DD0F01DCLL;
    v38[1] = "uint32_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_254116D00;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_254116CE0 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RayCastType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_RayCastComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254116C78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254116C78))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116D08, 0);
    *(uint64_t *)((char *)&qword_254116D18 + 6) = 0;
    qword_254116D18 = 0;
    qword_254116D28 = 0;
    qword_254116D30 = 0xFFFFFFFFLL;
    qword_254116D08 = (uint64_t)&off_24ED7DAA8;
    qword_254116D38 = (uint64_t)"RayCastComponent";
    dword_254116D40 = 0;
    xmmword_254116D48 = 0u;
    unk_254116D58 = 0u;
    xmmword_254116D68 = 0u;
    qword_254116D78 = 0;
    __cxa_guard_release(&qword_254116C78);
  }
  return &qword_254116D08;
}

void re::ecs2::initInfo_RayCastComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xD990FAE43A9F9128;
  v19[1] = "RayCastComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254116C80);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254116C80);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254116CA0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_RayF((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "ray";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254116CA8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::ecs2::introspect_RayCastType((re::ecs2 *)v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "cast";
      *(_QWORD *)(v14 + 16) = &qword_254116CC0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x5000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254116CB0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v16 = re::introspect_CollisionCastConfiguration((re::IntrospectionBase **)1);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "castConfiguration";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x6000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254116CB8 = v17;
      __cxa_guard_release(&qword_254116C80);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254116CA0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayCastComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RayCastComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayCastComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayCastComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

double re::internal::defaultConstruct<re::ecs2::RayCastComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A080;
  result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 2;
  *(_DWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 100) = -1;
  *(_QWORD *)(v3 + 116) = 0;
  *(_QWORD *)(v3 + 108) = 0;
  *(_DWORD *)(v3 + 124) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RayCastComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::RayCastComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A080;
  result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 80) = 2;
  *(_DWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 100) = -1;
  *(_QWORD *)(v1 + 116) = 0;
  *(_QWORD *)(v1 + 108) = 0;
  *(_DWORD *)(v1 + 124) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RayCastComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RayCastComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastComponent>, this);
}

void re::ecs2::deepCopyMaterialParameterBlock(re::MaterialParameterBlock *a1, re::MaterialParameterBlock *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  const re::MaterialParameterBlock *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int v22;
  _DWORD *Constant;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  _DWORD *v28;
  uint64_t v29;
  _OWORD *v30;
  os_unfair_lock_s *v31;
  _QWORD *v32;
  os_unfair_lock_s *v33;
  _OWORD *v34;
  os_unfair_lock_s *v35;
  _OWORD *v36;
  os_unfair_lock_s *v37;
  _OWORD *v38;
  os_unfair_lock_s *v39;
  _OWORD *v40;
  os_unfair_lock_s *v41;
  _OWORD *v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  _BOOL8 isParameterType;
  NSObject *v48;
  char *v49;
  _QWORD *v50;
  os_unfair_lock_s *v51;
  _DWORD *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  os_unfair_lock_s *v59;
  _QWORD *v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int16 v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  id v79;
  uint64_t TextureCompressionType;
  id v81;
  uint64_t v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int16 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  int v102;
  id v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  os_unfair_lock_s *v108;
  id v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  _QWORD v113[4];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[4];
  os_unfair_lock_s *v118[2];
  uint64_t v119;
  _QWORD v120[4];
  uint64_t v121;
  _QWORD v122[4];
  os_unfair_lock_s *v123[2];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[4];
  __int128 v128;
  int v129;
  uint64_t v130;
  _QWORD v131[4];
  _QWORD v132[4];
  _QWORD v133[4];
  _QWORD v134[4];
  _QWORD v135[4];
  _QWORD v136[4];
  _QWORD v137[4];
  _QWORD v138[4];
  _QWORD v139[4];
  _QWORD v140[4];
  _QWORD v141[4];
  _QWORD v142[4];
  _QWORD v143[4];
  _QWORD v144[4];
  _QWORD v145[4];
  _OWORD v146[3];
  _QWORD v147[4];
  _OWORD v148[4];
  _QWORD v149[4];
  uint64_t v150;
  uint64_t v151;
  char v152;
  unsigned __int8 v153;
  uint64_t v154;
  _BYTE v155[12];
  char v156;
  unsigned __int8 v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  const re::MaterialParameterBlock *v161;
  void *v162;
  uint64_t v163;
  id v164;
  unint64_t v165;
  id v166;
  void *v167;
  uint8_t buf[24];
  uint64_t v169;

  v4 = a4;
  v169 = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v8);
  re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(a2, &v161);
  v10 = v161;
  if (!v161)
    return;
  v158 = (char *)v161 + 200;
  v11 = *((_QWORD *)v161 + 27);
  if (v11 < 0x10)
    goto LABEL_97;
  v12 = 0;
  v13 = *((_QWORD *)v161 + 25);
  v14 = v11 >> 4;
  do
  {
    v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
    v159 = (unsigned __int16)~v15;
    if (v15 != 0xFFFF)
    {
      v16 = __clz(__rbit64((unsigned __int16)~v15)) + v12;
      v160 = v16;
      if (v16 == -1)
        break;
      v17 = v4;
      v18 = a3;
      v19 = v9;
      while (1)
      {
        v20 = (uint64_t *)(*((_QWORD *)v158 + 1) + 16 * v16);
        v154 = *v20;
        re::MaterialParameterBlock::handle(a1, &v154, (uint64_t)v155);
        v154 = 0;
        v150 = *v20;
        re::MaterialParameterBlock::handle(a2, &v150, (uint64_t)&v151);
        v150 = 0;
        v21 = v152 & 7;
        if ((v152 & 7) == 0)
          goto LABEL_95;
        v22 = v21 - 1;
        if (v21 != 1)
          goto LABEL_58;
        if (v153 <= 0x1Fu)
        {
          switch(v153)
          {
            case 1u:
              if ((v156 & 7) == 1 && v157 == 1)
                goto LABEL_58;
              Constant = (_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v24 = *v20;
              LODWORD(v123[0]) = *Constant;
              *(_QWORD *)buf = v24;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 4uLL, v123, 1, (uint64_t)v141);
              v141[0] = 0;
              break;
            case 3u:
              if ((v156 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v155, 3))
                goto LABEL_58;
              v28 = (_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v29 = *v20;
              LODWORD(v123[0]) = *v28;
              *(_QWORD *)buf = v29;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 4uLL, v123, 3, (uint64_t)v137);
              v137[0] = 0;
              break;
            case 4u:
              if ((v156 & 7) == 1 && v157 == 4)
                goto LABEL_58;
              v32 = (_QWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v33 = (os_unfair_lock_s *)*v20;
              *(_QWORD *)buf = *v32;
              v123[0] = v33;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 8uLL, buf, 4, (uint64_t)v138);
              v138[0] = 0;
              break;
            case 5u:
              if ((v156 & 7) == 1 && v157 == 5)
                goto LABEL_58;
              v34 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v35 = (os_unfair_lock_s *)*v20;
              *(_OWORD *)buf = *v34;
              v123[0] = v35;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 0x10uLL, buf, 5, (uint64_t)v139);
              v139[0] = 0;
              break;
            case 6u:
              if ((v156 & 7) == 1 && v157 == 6)
                goto LABEL_58;
              v36 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v37 = (os_unfair_lock_s *)*v20;
              *(_OWORD *)buf = *v36;
              v123[0] = v37;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 0x10uLL, buf, 6, (uint64_t)v140);
              v140[0] = 0;
              break;
            case 9u:
              if ((v156 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v155, 9))
                goto LABEL_58;
              v38 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v39 = (os_unfair_lock_s *)*v20;
              *(_OWORD *)buf = *v38;
              v123[0] = v39;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 0x10uLL, buf, 9, (uint64_t)v135);
              v135[0] = 0;
              break;
            case 0xAu:
              if ((v156 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v155, 10))
                goto LABEL_58;
              v40 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v41 = (os_unfair_lock_s *)*v20;
              *(_OWORD *)buf = *v40;
              v123[0] = v41;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 0x10uLL, buf, 10, (uint64_t)v136);
              v136[0] = 0;
              break;
            default:
              goto LABEL_58;
          }
          goto LABEL_95;
        }
        if (v153 > 0x2Fu)
        {
          if (v153 == 48)
            goto LABEL_27;
          if (v153 == 49)
          {
            if ((v156 & 7) == 1 && v157 == 49)
            {
LABEL_58:
              if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v151, 8)
                || (v156 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v155, 8))
              {
                if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v151, 7)
                  || (v156 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v155, 7))
                {
                  if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v151, 2)
                    || (v156 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v155, 2))
                  {
                    if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v151, 21)
                      || (v156 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v155, 21))
                    {
                      isParameterType = re::MaterialParameterHandle::isParameterType((uint64_t)&v151, 20);
                      if (!isParameterType
                        || (v156 & 7) != 0
                        && (isParameterType = re::MaterialParameterHandle::isParameterType((uint64_t)v155, 20)))
                      {
                        v48 = *re::graphicsLogObjects((re *)isParameterType);
                        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                        {
                          if (v151 == 0x7FFFFFFFFFFFFFFFLL)
                          {
                            v49 = 0;
                          }
                          else if (v151)
                          {
                            snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v151);
                            v49 = re::WeakStringID::debugStr(void)const::msg;
                          }
                          else
                          {
                            v49 = (char *)&str_110;
                          }
                          v63 = 64;
                          switch(v22)
                          {
                            case 0:
                              v63 = v153;
                              break;
                            case 1:
                              break;
                            case 2:
                              v63 = 128;
                              break;
                            case 3:
                              v63 = 192;
                              break;
                            default:
                              v63 = 0;
                              break;
                          }
                          *(_DWORD *)buf = 136315394;
                          *(_QWORD *)&buf[4] = v49;
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v63;
                          _os_log_error_impl(&dword_224FE9000, v48, OS_LOG_TYPE_ERROR, "deepCopyMaterialParameterBlock - parameter handle with name %s, parameterType %hhu not supported.", buf, 0x12u);
                        }
                      }
                      else
                      {
                        v56 = re::MaterialParameterBlock::colorGamut3FValue((uint64_t)a2, (uint64_t)&v151);
                        v126 = *v20;
                        re::MaterialParameterBlock::setColorGamut3F(a1, &v126, v56, v57, (uint64_t)v127);
                        v126 = 0;
                        v127[0] = 0;
                      }
                    }
                    else
                    {
                      re::MaterialParameterBlock::colorGamut4FValue((uint64_t)a2, (uint64_t)&v151, (uint64_t)buf);
                      v130 = *v20;
                      v128 = *(_OWORD *)buf;
                      v129 = *(_DWORD *)&buf[16];
                      re::MaterialParameterBlock::setColorGamut4F(a1, &v130, (uint64_t)&v128, (uint64_t)v131);
                      v130 = 0;
                      v131[0] = 0;
                    }
                  }
                  else
                  {
                    v54 = (_BYTE *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
                    v55 = *v20;
                    LOBYTE(v123[0]) = *v54;
                    *(_QWORD *)buf = v55;
                    re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 1uLL, v123, 2, (uint64_t)v132);
                    v132[0] = 0;
                  }
                }
                else
                {
                  v52 = (_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
                  v53 = *v20;
                  LODWORD(v123[0]) = *v52;
                  *(_QWORD *)buf = v53;
                  re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 4uLL, v123, 7, (uint64_t)v133);
                  v133[0] = 0;
                }
              }
              else
              {
                v50 = (_QWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
                v51 = (os_unfair_lock_s *)*v20;
                *(_QWORD *)buf = *v50;
                v123[0] = v51;
                re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 8uLL, buf, 8, (uint64_t)v134);
                v134[0] = 0;
              }
              goto LABEL_95;
            }
            v42 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
            v43 = v42[1];
            v146[0] = *v42;
            v146[1] = v43;
            v146[2] = v42[2];
            *(_QWORD *)buf = *v20;
            re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 0x30uLL, v146, 49, (uint64_t)v147);
            v147[0] = 0;
          }
          else
          {
            if (v153 != 50 || (v156 & 7) == 1 && v157 == 50)
              goto LABEL_58;
            v25 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
            v26 = v25[1];
            v148[0] = *v25;
            v148[1] = v26;
            v27 = v25[3];
            v148[2] = v25[2];
            v148[3] = v27;
            *(_QWORD *)buf = *v20;
            re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 0x40uLL, v148, 50, (uint64_t)v149);
            v149[0] = 0;
          }
        }
        else
        {
          switch(v153)
          {
            case ' ':
              if ((v156 & 7) == 1 && v157 == 32)
                goto LABEL_58;
              v58 = (_QWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v59 = (os_unfair_lock_s *)*v20;
              *(_QWORD *)buf = *v58;
              v123[0] = v59;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 8uLL, buf, 32, (uint64_t)v142);
              v142[0] = 0;
              break;
            case '!':
              if ((v156 & 7) == 1 && v157 == 33)
                goto LABEL_58;
              v44 = (_QWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
              v45 = v44[1];
              v46 = (os_unfair_lock_s *)*v20;
              *(_QWORD *)buf = *v44;
              *(_QWORD *)&buf[8] = v45;
              v123[0] = v46;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 0x10uLL, buf, 33, (uint64_t)v143);
              v143[0] = 0;
              break;
            case '"':
LABEL_27:
              if ((v156 & 7) == 1 && (v157 == 34 || v157 == 48))
              {
                if ((v156 & 7) == 1 && (v157 == 34 || v157 == 48))
                  goto LABEL_58;
                v60 = (_QWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
                v61 = v60[1];
                v62 = (os_unfair_lock_s *)*v20;
                *(_QWORD *)buf = *v60;
                *(_QWORD *)&buf[8] = v61;
                v123[0] = v62;
                re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 0x10uLL, buf, 34, (uint64_t)v144);
                v144[0] = 0;
              }
              else
              {
                v30 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v151);
                v31 = (os_unfair_lock_s *)*v20;
                *(_OWORD *)buf = *v30;
                v123[0] = v31;
                re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v123, 0x10uLL, buf, 48, (uint64_t)v145);
                v145[0] = 0;
              }
              break;
            default:
              goto LABEL_58;
          }
        }
LABEL_95:
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v158);
        v16 = v160;
        if (v160 == -1)
        {
          v10 = v161;
          v9 = v19;
          a3 = v18;
          v4 = v17;
          goto LABEL_97;
        }
      }
    }
    v12 += 16;
    --v14;
  }
  while (v14);
LABEL_97:
  v158 = (char *)v10 + 688;
  v64 = *((_QWORD *)v10 + 88);
  if (v64 >= 0x10)
  {
    v65 = 0;
    v66 = *((_QWORD *)v10 + 86);
    v67 = v64 >> 4;
    while (1)
    {
      v68 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v66 + v65)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v159 = (unsigned __int16)~v68;
      if (v68 != 0xFFFF)
        break;
      v65 += 16;
      if (!--v67)
        goto LABEL_145;
    }
    v69 = __clz(__rbit64((unsigned __int16)~v68)) + v65;
    v160 = v69;
    if (v69 != -1)
    {
      v107 = v9;
      do
      {
        v70 = (uint64_t *)(*((_QWORD *)v158 + 1) + 16 * v69);
        v125 = *v70;
        re::MaterialParameterBlock::handle(a1, &v125, (uint64_t)v155);
        v125 = 0;
        v71 = v156 & 7;
        if ((v156 & 7) == 0 || v71 != 2 && (v71 != 1 || v157 != 64))
        {
          v124 = *v70;
          re::MaterialParameterBlock::handle(a2, &v124, (uint64_t)&v151);
          v124 = 0;
          v72 = v152 & 7;
          if ((v152 & 7) != 0 && (v72 == 2 || v72 == 1 && v153 == 64))
          {
            re::MaterialParameterBlock::textureHandleValue((uint64_t)a2, (uint64_t)&v151, (re::TextureHandle *)v123);
            v121 = *v70;
            re::MaterialParameterBlock::setTextureHandle(a1, &v121, (re::TextureHandle *)v123, (uint64_t)v122);
            v121 = 0;
            v122[0] = 0;
            if (re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains(a3, v70))
            {
              v119 = *v70;
              re::MaterialParameterBlock::setTextureHandle(a1, &v119, (re::TextureHandle *)v123, (uint64_t)v120);
              v119 = 0;
              v120[0] = 0;
            }
            else
            {
              v73 = a3;
              v74 = v4;
              v75 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 56));
              v76 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v75);
              v108 = *(os_unfair_lock_s **)(v76 + 64);
              re::TextureHandle::metalTexture(v123, &v167);
              v166 = *(id *)(v76 + 184);
              v77 = v167;
              v78 = (unint64_t)objc_msgSend(v167, sel_usage) | 4;
              v165 = v78;
              v79 = objc_msgSend(v77, sel_pixelFormat);
              v163 = 0;
              v164 = v79;
              TextureCompressionType = re::mtl::getTextureCompressionType(&v166, &v163, &v164, &v165);
              v81 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
              if (((unint64_t)objc_msgSend(v77, sel_sampleCount) & 0xFFFFFFFE) != 0)
                v82 = 4;
              else
                v82 = 2;
              objc_msgSend(v81, sel_setTextureType_, v82);
              objc_msgSend(v81, sel_setWidth_, objc_msgSend(v77, sel_width));
              objc_msgSend(v81, sel_setHeight_, objc_msgSend(v77, sel_height));
              objc_msgSend(v81, sel_setMipmapLevelCount_, 1);
              objc_msgSend(v81, sel_setUsage_, v78);
              objc_msgSend(v81, sel_setStorageMode_, 0);
              objc_msgSend(v81, sel_setPixelFormat_, v79);
              if ((objc_msgSend(v81, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
                || objc_msgSend(v81, sel_methodSignatureForSelector_, sel_setCompressionType_))
              {
                objc_msgSend(v81, sel_setCompressionType_, TextureCompressionType);
              }
              objc_msgSend(v81, sel_setSampleCount_, objc_msgSend(v77, sel_sampleCount));
              objc_msgSend(v81, sel_setProtectionOptions_, objc_msgSend(v77, sel_protectionOptions));
              re::mtl::Device::makeTexture(v81, &v166, &v162);
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = 0;
              NS::SharedPtr<MTL::Texture>::operator=((void **)buf, &v167);
              v83 = NS::SharedPtr<MTL::Texture>::operator=((void **)&buf[8], &v162);
              v4 = v74;
              v84 = *(_QWORD *)(v74 + 24);
              v85 = *(_QWORD *)(v84 + 8);
              v86 = *(_QWORD *)(v84 + 16);
              a3 = v73;
              if (v86 >= v85)
              {
                v87 = v86 + 1;
                if (v85 < v86 + 1)
                {
                  if (*(_QWORD *)v84)
                  {
                    v88 = 2 * v85;
                    v89 = v85 == 0;
                    v90 = 8;
                    if (!v89)
                      v90 = v88;
                    if (v90 <= v87)
                      v91 = v87;
                    else
                      v91 = v90;
                    re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity(*(_QWORD **)(v74 + 24), v91);
                  }
                  else
                  {
                    re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity((_QWORD *)v84, v87);
                    ++*(_DWORD *)(v84 + 24);
                  }
                }
                v86 = *(_QWORD *)(v84 + 16);
              }
              v92 = (_QWORD *)(*(_QWORD *)(v84 + 32) + 16 * v86);
              *v92 = *(id *)buf;
              v92[1] = *(id *)&buf[8];
              ++*(_QWORD *)(v84 + 16);
              ++*(_DWORD *)(v84 + 24);
              re::TextureManager::registerTexture(v108, &v162, v118);
              if (*(_QWORD *)&buf[8])
              {

                *(_QWORD *)&buf[8] = 0;
              }
              if (*(_QWORD *)buf)

              if (v162)
              if (v81)

              if (v167)
              v116 = *v70;
              re::MaterialParameterBlock::setTextureHandle(a1, &v116, (re::TextureHandle *)v118, (uint64_t)v117);
              v116 = 0;
              v117[0] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)v118);
            }
            re::TextureHandle::invalidate((re::TextureHandle *)v123);
          }
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v158);
        v69 = v160;
      }
      while (v160 != -1);
      v10 = v161;
      v9 = v107;
    }
  }
LABEL_145:
  v158 = (char *)v10 + 264;
  v93 = *((_QWORD *)v10 + 35);
  if (v93 >= 0x10)
  {
    v94 = 0;
    v95 = *((_QWORD *)v10 + 33);
    v96 = v93 >> 4;
    while (1)
    {
      v97 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v95 + v94)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v159 = (unsigned __int16)~v97;
      if (v97 != 0xFFFF)
        break;
      v94 += 16;
      if (!--v96)
        goto LABEL_168;
    }
    v98 = __clz(__rbit64((unsigned __int16)~v97)) + v94;
    v160 = v98;
    if (v98 != -1)
    {
      v99 = v9;
      do
      {
        v100 = (uint64_t *)(*((_QWORD *)v158 + 1) + 16 * v98);
        v115 = *v100;
        re::MaterialParameterBlock::handle(a1, &v115, (uint64_t)v155);
        v115 = 0;
        v101 = v156 & 7;
        if ((v156 & 7) == 0 || v101 != 3 && (v101 != 1 || v157 != 128))
        {
          v114 = *v100;
          re::MaterialParameterBlock::handle(a2, &v114, (uint64_t)&v151);
          v114 = 0;
          v102 = v152 & 7;
          if ((v152 & 7) != 0 && (v102 == 3 || v102 == 1 && v153 == 128))
          {
            v103 = *(id *)re::MaterialParameterBlock::bufferValue((uint64_t)a2, (uint64_t)&v151);
            v104 = *(id *)(v99 + 184);
            v105 = objc_msgSend(v104, sel_newBufferWithLength_options_, objc_msgSend(v103, sel_length), 0);
            memcpy(objc_msgSend(v105, sel_contents), objc_msgSend(v103, sel_contents), (size_t)objc_msgSend(v103, sel_length));
            objc_msgSend(v103, sel_length);
            v112 = *v100;
            v106 = v105;
            v109 = v106;
            v110 = 0;
            v111 = objc_msgSend(v105, sel_length);
            re::MaterialParameterBlock::setBuffer(a1, &v112, (uint64_t)&v109, (uint64_t)v113);
            v113[0] = 0;
            if (v106)
            {

              v109 = 0;
            }
            v112 = 0;
            if (v105)

            if (v103)
          }
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v158);
        v98 = v160;
      }
      while (v160 != -1);
      v10 = v161;
    }
  }
LABEL_168:
  if (v10)

}

unint64_t re::ecs2::ensureParametersBlockIndexExists(re::ecs2 *this, unint64_t a2, re::RenderManager *a3, re::RenderManager *a4)
{
  unint64_t v7;
  uint64_t *v8;
  re::MaterialParameterBlock *v9;
  re::MaterialParameterBlock *v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *((_QWORD *)this + 11);
  if (v7 <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)this + 72, a2 + 1);
    v7 = *((_QWORD *)this + 11);
  }
  if (v7 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  if (!*(_QWORD *)(*((_QWORD *)this + 13) + 8 * a2))
  {
    v8 = re::globalAllocators(this);
    v9 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 1008, 8);
    v10 = re::MaterialParameterBlock::MaterialParameterBlock(v9, a3);
    v7 = *((_QWORD *)this + 11);
    if (v7 <= a2)
      goto LABEL_12;
    v11 = *((_QWORD *)this + 13);
    v12 = *(_QWORD *)(v11 + 8 * a2);
    *(_QWORD *)(v11 + 8 * a2) = v10;
    if (v12)
    {

      v7 = *((_QWORD *)this + 11);
    }
  }
  if (v7 <= a2)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 13) + 8 * a2;
}

uint64_t re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(re::ecs2 *this, re::ecs2::Entity *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 24);
  if (!v3)
    v3 = re::ecs2::EntityComponentCollection::add((re::ecs2 *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (*(_QWORD *)(v3 + 88) < (unint64_t)a2)
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize(v3 + 72, (unint64_t)a2);
  return v3;
}

void re::ecs2::deepCopyMaterialParameter(uint64_t a1, re::RenderManager *a2)
{
  uint64_t v4;
  re::ecs2 *v5;
  uint64_t v6;
  re::ecs2 *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  re::RenderManager *v12;
  uint64_t v13;
  re::MaterialParameterBlock *v14;
  re::MaterialParameterBlock **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  re *v26;
  unsigned int v27;
  NSObject *v28;
  _QWORD *v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  re::MaterialParameterBlock **v33;
  re::RenderManager **v34;
  re::MaterialParameterBlock *v35;
  re::RenderManager *v36;
  re::MaterialParameterBlock *v37;
  uint64_t v38;
  unint64_t i;
  __int128 v40;
  re::ecs2 *v41;
  uint64_t v42;
  uint64_t v43;
  re::ecs2::Entity *v44;
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[3];
  _BYTE buf[12];
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v5 = *(re::ecs2 **)(a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  if (v6)
  {
    v44 = *(re::ecs2::Entity **)(v6 + 72);
    if (v44)
    {
      v7 = 0;
      v8 = 0;
      v9 = *(_QWORD **)(v4 + 192);
      v41 = *(re::ecs2 **)(a1 + 8);
      v42 = *(_QWORD *)a1;
      v43 = *(_QWORD *)(*(_QWORD *)a1 + 176);
      do
      {
        v10 = *(_QWORD *)(v6 + 72);
        if (v10 <= v8)
        {
          *(_QWORD *)buf = 0;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v55 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v47[0]) = 136315906;
          *(_QWORD *)((char *)v47 + 4) = "operator[]";
          WORD6(v47[0]) = 1024;
          *(_DWORD *)((char *)v47 + 14) = 789;
          WORD1(v47[1]) = 2048;
          *(_QWORD *)((char *)&v47[1] + 4) = v8;
          WORD6(v47[1]) = 2048;
          *(_QWORD *)((char *)&v47[1] + 14) = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_60:
          v46 = 0;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v55 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "operator[]";
          v49 = 1024;
          v50 = 789;
          v51 = 2048;
          v52 = v8;
          v53 = 2048;
          v54 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_61:
          v46 = 0;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v55 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "operator[]";
          v49 = 1024;
          v50 = 789;
          v51 = 2048;
          v52 = v8;
          v53 = 2048;
          v54 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v11 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)(v6 + 88) + 24 * v8));
        memset(v47, 0, sizeof(v47));
        DWORD1(v47[2]) = 0x7FFFFFFF;
        if (v11)
        {
          v13 = v11;
          v14 = *(re::MaterialParameterBlock **)(v11 + 1672);
          if (v14)
          {
            if (!re::MaterialParameterBlock::isEmpty(v14))
            {
              if (!v7)
                v7 = (re::ecs2 *)re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(v5, v44);
              v15 = (re::MaterialParameterBlock **)re::ecs2::ensureParametersBlockIndexExists(v7, v8, a2, v12);
              re::ecs2::deepCopyMaterialParameterBlock(*v15, *(re::MaterialParameterBlock **)(v13 + 1672), (uint64_t)v47, a1);
            }
          }
        }
        if (v9 && v8 < v9[11] && *(_QWORD *)(v9[13] + 8 * v8))
        {
          if (!v7)
            v7 = (re::ecs2 *)re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(v5, v44);
          v10 = v9[6];
          if (v10 <= v8)
            goto LABEL_60;
          v16 = v9[8];
          v17 = *(_QWORD *)(v16 + 24 * v8);
          if (!v17)
            v17 = *(_QWORD *)(v16 + 24 * v8 + 8);
          v18 = *(unsigned int *)(v17 + 336);
          if ((_DWORD)v18)
          {
            v19 = 0;
            v20 = *(_DWORD **)(v17 + 320);
            while ((*v20 & 0x80000000) == 0)
            {
              v20 += 80;
              if (v18 == ++v19)
              {
                LODWORD(v19) = *(_DWORD *)(v17 + 336);
                break;
              }
            }
          }
          else
          {
            LODWORD(v19) = 0;
          }
          if ((_DWORD)v18 != (_DWORD)v19)
          {
            v21 = v19;
            v22 = *(_DWORD *)(v17 + 336);
            do
            {
              v23 = *(_QWORD *)(v17 + 320) + 320 * v21;
              v25 = *(unsigned __int8 *)(v23 + 32);
              v24 = v23 + 32;
              if (v25 == 64)
              {
                v26 = re::AssetHandle::AssetHandle((re::AssetHandle *)&v55, (const re::AssetHandle *)(v24 + 80));
                if (*((_QWORD *)&v55 + 1)
                  && (v27 = atomic_load((unsigned int *)(*((_QWORD *)&v55 + 1) + 704)), v27 == 2))
                {
                  if (*(_BYTE *)(*((_QWORD *)&v55 + 1) + 312))
                  {
                    *(_QWORD *)buf = *(_QWORD *)(v24 - 24) >> 1;
                    re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)v47, (uint64_t *)buf);
                  }
                }
                else
                {
                  v28 = *re::ecsComponentsLogObjects(v26);
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                  {
                    v29 = re::AssetHandle::assetInfo((re::AssetHandle *)&v55);
                    if ((v29[17] & 1) != 0)
                      v30 = (char *)v29[18];
                    else
                      v30 = (char *)v29 + 137;
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v30;
                    _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "Texture asset handle %s is not loaded and can't be cached", buf, 0xCu);
                  }
                }
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v55);
                v22 = *(_DWORD *)(v17 + 336);
              }
              if (v22 <= (int)v19 + 1)
                v31 = v19 + 1;
              else
                v31 = v22;
              while (1)
              {
                v21 = (v19 + 1);
                if (v31 - 1 == (_DWORD)v19)
                  break;
                LODWORD(v19) = v19 + 1;
                v32 = v21;
                if ((*(_DWORD *)(*(_QWORD *)(v17 + 320) + 320 * v21) & 0x80000000) != 0)
                  goto LABEL_45;
              }
              v32 = v31;
LABEL_45:
              LODWORD(v19) = v32;
            }
            while ((_DWORD)v18 != v32);
          }
          v33 = (re::MaterialParameterBlock **)re::ecs2::ensureParametersBlockIndexExists(v7, v8, a2, v12);
          v10 = v9[11];
          if (v10 <= v8)
            goto LABEL_61;
          re::ecs2::deepCopyMaterialParameterBlock(*v33, *(re::MaterialParameterBlock **)(v9[13] + 8 * v8), (uint64_t)v47, a1);
          v5 = v41;
          v4 = v42;
        }
        v34 = (re::RenderManager **)*((_QWORD *)a2 + 3);
        *(_QWORD *)&v55 = *(_QWORD *)(v4 + 296);
        if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v34 + 129), (uint64_t *)&v55))
        {
          if (!v7)
            v7 = (re::ecs2 *)re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(v5, v44);
          v35 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v34, *(_QWORD *)(v4 + 296));
          v37 = *(re::MaterialParameterBlock **)re::ecs2::ensureParametersBlockIndexExists(v7, v8, a2, v36);
          v56 = 0u;
          v57 = 0u;
          v55 = 0u;
          DWORD1(v57) = 0x7FFFFFFF;
          re::ecs2::deepCopyMaterialParameterBlock(v37, v35, (uint64_t)&v55, a1);
          re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v55);
        }
        re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v47);
        ++v8;
        v6 = v43;
      }
      while ((re::ecs2::Entity *)v8 != v44);
      if (v7)
        re::ecs2::Component::markDirty(v7);
    }
  }
  v38 = *((_QWORD *)v5 + 41);
  if (v38)
  {
    for (i = 0; i != v38; ++i)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v5 + 304, i);
      *(_QWORD *)a1 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[](v4 + 304, i);
      v40 = *(_OWORD *)(a1 + 16);
      v45[0] = *(_OWORD *)a1;
      v45[1] = v40;
      re::ecs2::deepCopyMaterialParameter(v45, a2);
    }
  }
}

double re::ecs2::VisualCopyHelper::makeVisualCopyEntity@<D0>(re::ecs2::ECSHelper *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, re::RenderManager *a4@<X3>, uint64_t a5@<X4>, re::ecs2::Entity **a6@<X8>)
{
  re::ecs2::Entity *v11;
  _QWORD v13[4];
  _OWORD v14[2];
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a5;
  re::ecs2::ECSHelper::deepCopyEntity(a1, (const re::ecs2::Entity *)1, (BOOL (*)(void *, void *))&v17, 0, (uint64_t (*)(uint64_t, uint64_t))re::ecs2::isComponentTypeExcludedForVisualCopy, a6);
  v11 = *a6;
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v16 = 0x7FFFFFFFLL;
  re::internal::MeshSortGroupFixupTable::fixupMeshSortGroupsForEntity((re::internal::MeshSortGroupFixupTable *)v14, v11);
  v13[0] = a1;
  v13[1] = v11;
  v13[2] = a3;
  v13[3] = a2;
  re::ecs2::deepCopyMaterialParameter((uint64_t)v13, a4);
  return re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
}

BOOL re::ecs2::isComponentTypeExcludedForVisualCopy(re::ecs2 *this, uint64_t *a2, void *a3)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2 *v11;
  BOOL v12;
  int v13;
  int v14;

  v3 = 0;
  if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this)
  {
    v4 = *a2;
    v5 = *(unsigned int *)(*a2 + 32);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (int *)(*(_QWORD *)(v4 + 16) + 8);
      while (1)
      {
        v8 = *v7;
        v7 += 6;
        if (v8 < 0)
          break;
        if (v5 == ++v6)
        {
          LODWORD(v6) = *(_DWORD *)(*a2 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if ((_DWORD)v5 == (_DWORD)v6)
    {
      return 1;
    }
    else
    {
      v9 = v6;
      v10 = *(_QWORD *)(v4 + 16);
      do
      {
        v11 = *(re::ecs2 **)(v10 + 24 * v9 + 16);
        v12 = v11 == this;
        v3 = v11 != this;
        if (v12)
          break;
        v13 = v5 <= (int)v6 + 1 ? v6 + 1 : *(_DWORD *)(*a2 + 32);
        while (1)
        {
          v9 = (v6 + 1);
          if (v13 - 1 == (_DWORD)v6)
            break;
          LODWORD(v6) = v6 + 1;
          v14 = v9;
          if ((*(_DWORD *)(v10 + 24 * v9 + 8) & 0x80000000) != 0)
            goto LABEL_32;
        }
        v14 = v13;
LABEL_32:
        LODWORD(v6) = v14;
      }
      while ((_DWORD)v5 != v14);
    }
  }
  return v3;
}

_QWORD *re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 16 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          v11[1] = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (*(_QWORD *)v8)
          {

            *(_QWORD *)v8 = 0;
          }
          v8 += 16;
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

re::ecs2::ClippingParameterDataStateTracking *re::ecs2::ClippingParameterDataStateTracking::ClippingParameterDataStateTracking(re::ecs2::ClippingParameterDataStateTracking *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  void **v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[11];

  v14[10] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24ED70E58;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *(_QWORD *)((char *)this + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  v2 = (char *)this + 56;
  *(_QWORD *)((char *)this + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  v3 = (char *)this + 104;
  *(_QWORD *)((char *)this + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  v4 = (char *)this + 152;
  *(_QWORD *)((char *)this + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  v5 = (char *)this + 200;
  *(_QWORD *)((char *)this + 236) = 0x7FFFFFFFLL;
  *(_QWORD *)this = &off_24ED70D20;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 86) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_QWORD *)((char *)this + 348) = 0x1FFFFFFFFLL;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 0;
  *(_QWORD *)((char *)this + 652) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_QWORD *)((char *)this + 700) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 174) = 0;
  re::ecs2::ClippingParametersRegistry::ClippingParametersRegistry((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 712));
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  v14[0] = re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[1] = re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v14[2] = re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v14[3] = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[4] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v14[5] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[6] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[7] = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[8] = re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[9] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = (void **)v14;
  v12 = 10;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 248), (uint64_t)&v11);
  v11 = &v13;
  v12 = 1;
  v13 = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 272), (uint64_t)&v11);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)this + 37, 0);
  ++*((_DWORD *)this + 80);
  *((_DWORD *)this + 85) = 8;
  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::allocBlock((_QWORD *)this + 37);
  return this;
}

uint64_t re::ecs2::ClippingParameterDataStateTracking::invalidateTransformEventHandler<REBillboardTransformChangedEvent>(re::ecs2::ClippingParameterDataStateTracking *a1, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v4;

  v4 = a2;
  if (a2)
  {
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)a1 + 104, (uint64_t *)&v4);
    re::ecs2::ClippingParameterDataStateTracking::clearEntityHierarchyStateData(a1, v4);
  }
  return 0;
}

uint64_t re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 208 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

void re::ecs2::ClippingParameterDataStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  simd_float4 v31;
  uint64_t v32;
  simd_float4 v33;
  simd_float4x4 v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  re::ecs2::TransformComponent **v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  re::ecs2::TransformComponent **v45;
  float32x4_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  _OWORD *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  re::ecs2::TransformComponent *v65;
  float32x4_t v73;
  int v75;
  int16x4_t v78;
  float32x4_t v79;
  _BYTE *v80;
  _BOOL4 v81;
  uint64_t v82;
  float32x4_t v85;
  int v86;
  char v87;
  char v88;
  re *v89;
  uint64_t v90;
  float32x4_t v91;
  simd_float4 v92;
  simd_float4 v93;
  simd_float4x4 v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  unsigned __int8 v104;
  NSObject *v105;
  _BOOL4 v106;
  re::ecs2::TransformComponent *v107;
  uint32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  uint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  __int32 v115;
  __int32 v116;
  re *v117;
  unsigned __int8 v118;
  NSObject *v119;
  re::ecs2::TransformComponent *v120;
  _BYTE *v121;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  float32x4_t v127;
  simd_float4 v128;
  simd_float4 v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  re::ecs2::TransformComponent **v138;
  re::ecs2::TransformComponent *v139;
  re::ecs2::TransformComponent *v140;
  re::ecs2::TransformComponent *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  simd_float4 v145;
  unint64_t v146;
  uint64_t *v147;
  int v148;
  uint64_t v149;
  uint64_t *v150;
  int v151;
  int v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  int *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int *v191;
  int v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  int *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  float32x4_t v208;
  simd_float4 v209;
  simd_float4 v210;
  simd_float4 v211;
  float32x4_t v212;
  float32x4_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  __int128 v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  simd_float4 v237;
  simd_float4 v238;
  simd_float4 v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int v243;
  unint64_t v244;
  uint64_t v245;
  int *v246;
  _anonymous_namespace_ *v247;
  unint64_t v248;
  uint64_t v249;
  int *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  _QWORD *v273;
  unint64_t v274;
  unint64_t v275;
  __int32 v276;
  __int32 v277;
  float32x4_t v278;
  float32x4_t v279;
  simd_float4 v280;
  int v281;
  uint64_t v283;
  uint64_t v284;
  _anonymous_namespace_ *v285;
  _anonymous_namespace_ *v286;
  _anonymous_namespace_ *v287;
  float32x4_t v288;
  simd_float4 v289;
  float32x4_t v290;
  simd_float4 v291;
  simd_float4 v292;
  __int128 v293;
  simd_float4 v294;
  simd_float4 v295;
  float32x4_t v296;
  simd_float4 v297;
  simd_float4 v298;
  uint64_t v299;
  simd_float4 v300;
  _QWORD *v301;
  uint64_t v302;
  int32x4_t v303;
  simd_float4 v304;
  simd_float4 v305;
  BOOL v306;
  re::ecs2::RenderOptions *v307;
  simd_float4 v308;
  simd_float4 v309;
  uint64_t v310;
  uint64_t v311;
  simd_float4 v312;
  unsigned __int16 v313;
  uint64_t v314;
  _QWORD *v316;
  uint64_t *v317;
  int32x4_t v318;
  __int32 v319;
  char v320[2];
  __int16 v321;
  float32x4_t v322;
  float32x4_t v323;
  uint64_t v324[2];
  char v325;
  float32x4_t v326;
  float32x4_t v327;
  simd_float4 v328;
  simd_float4 v329;
  unint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t *v334;
  unint64_t v335;
  int v336;
  uint64_t v337[2];
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  simd_float4x4 v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t buf;
  float32x4_t v354;
  simd_float4x4 v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  _QWORD v360[2];
  char v361;
  int v362;
  __int16 v363;
  char v364;
  _DWORD v365[2];
  float32x4_t v366;
  simd_float4x4 v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE v377[7];
  __int128 v378;
  re::ecs2::TransformComponent **v379;
  uint64_t v380[2];
  char v381;
  uint64_t v382;
  simd_float4 v383;
  simd_float4 v384;
  unint64_t v385[4];
  uint8_t v386[32];
  float32x4_t v387;
  float32x4_t v388;
  __int128 v389;
  simd_float4x4 v390;
  uint64_t v391;
  simd_float4x4 v392;
  simd_float4x4 v393;
  simd_float4x4 v394;
  simd_float4x4 v395;

  v2 = a2;
  v3 = a1;
  v391 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 16);
    v316 = (_QWORD *)(a1 + 56);
    v10 = (unint64_t)&v354.u64[1];
    v302 = a1 + 712;
    v284 = a1 + 616;
    v286 = (_anonymous_namespace_ *)(a1 + 552);
    v283 = a1 + 664;
    v318 = vdupq_n_s32(0x7F800000u);
    v281 = *(_DWORD *)(a2 + 32);
    do
    {
      v11 = *(_QWORD *)(v9 + 24 * v8 + 16);
      v12 = *(_QWORD *)(v11 + 24);
      if (v12 && (*(_BYTE *)(v12 + 288) & 0x80) == 0)
      {
        buf.i64[0] = *(_QWORD *)(v11 + 24);
        if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(v2, (uint64_t *)&buf))
        {
          goto LABEL_208;
        }
        while (1)
        {
          v13 = *(_QWORD *)(buf.i64[0] + 24);
          if (!v13 || (*(_BYTE *)(v13 + 288) & 0x80) != 0)
            break;
          buf.i64[0] = *(_QWORD *)(buf.i64[0] + 24);
          if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(v2, (uint64_t *)&buf))
          {
            goto LABEL_208;
          }
        }
      }
      v14 = *(_QWORD *)(v3 + 840);
      v307 = *(re::ecs2::RenderOptions **)(v3 + 848);
      if (!re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)v316, v11))
      {
        (*(void (**)(float32x4_t *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)v14 + 8))(&buf, *(_QWORD *)v14, v11);
        if (buf.i8[0])
          v15 = buf.i64[1];
        else
          v15 = 0;
        v16 = *(_QWORD *)(v11 + 24);
        v311 = v15;
        if (!v16)
          goto LABEL_43;
        if ((*(_BYTE *)(v16 + 288) & 0x80) != 0)
        {
          v19 = v11;
        }
        else
        {
          while (!re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v316, v16))
          {
            (*(void (**)(float32x4_t *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)v14 + 8))(&buf, *(_QWORD *)v14, v16);
            v17 = buf.i8[0] ? buf.i64[1] : 0;
            if (v15 != v17)
              break;
            v18 = *(_QWORD *)(v16 + 144);
            if (v18)
            {
              v19 = v16;
              if (!*(_BYTE *)(v18 + 100))
              {
                if (*(_QWORD *)(v16 + 176))
                  v19 = v16;
                else
                  v19 = v11;
              }
            }
            else
            {
              v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v20)
              {
                v19 = v16;
                v15 = v311;
                if (!*(_BYTE *)(v20 + 68))
                {
                  v19 = v11;
                  if (*(_QWORD *)(v16 + 176))
                    v19 = v16;
                }
              }
              else
              {
                if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
                {
                  v19 = v16;
                }
                else
                {
                  v19 = v11;
                }
                v15 = v311;
              }
            }
            v16 = *(_QWORD *)(v16 + 24);
            if (v16)
            {
              v11 = v19;
              if ((*(_BYTE *)(v16 + 288) & 0x80) == 0)
                continue;
            }
            goto LABEL_45;
          }
LABEL_43:
          v19 = v11;
        }
LABEL_45:
        v344 = 0;
        v345 = 0;
        v346 = 1;
        v347 = 0;
        v348 = 0;
        v390.columns[0] = (simd_float4)xmmword_2260E5F10;
        v390.columns[1] = (simd_float4)xmmword_2260E5F20;
        v390.columns[2] = (simd_float4)xmmword_2260E5F40;
        v390.columns[3] = (simd_float4)xmmword_2260E5D70;
        (*(void (**)(float32x4_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)v14 + 8))(&buf, *(_QWORD *)v14, v19);
        if (buf.i8[0])
          v21 = buf.i64[1];
        else
          v21 = 0;
        (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)v14 + 8))(&buf);
        if (buf.i8[0])
          v22 = buf.i64[1];
        else
          v22 = 0;
        if (v21 != v22)
          goto LABEL_78;
        v23 = *(_QWORD *)(v19 + 24);
        if (v23)
        {
          if ((*(_DWORD *)(v23 + 288) & 0x80) != 0)
            v24 = 0;
          else
            v24 = *(_QWORD *)(v19 + 24);
          v25 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v316, v24);
          if (v25)
            goto LABEL_57;
LABEL_78:
          v33.i64[0] = 0x7F0000007FLL;
          v33.i64[1] = 0x7F0000007FLL;
          v308 = v33;
          v304 = (simd_float4)v318;
          v34 = v390;
        }
        else
        {
          v25 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v316, 0);
          v24 = 0;
          if (!v25)
            goto LABEL_78;
LABEL_57:
          v26 = v25;
          while (!*(_BYTE *)(v26 + 190))
          {
            (*(void (**)(float32x4_t *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)v14 + 8))(&buf, *(_QWORD *)v14, v24);
            v27 = buf.i8[0] ? buf.i64[1] : 0;
            (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)v14 + 8))(&buf);
            v28 = buf.i8[0] ? buf.i64[1] : 0;
            if (v27 != v28)
              break;
            v29 = *(_QWORD *)(v24 + 24);
            if (v29)
            {
              if ((*(_BYTE *)(v29 + 288) & 0x80) != 0)
                v30 = 0;
              else
                v30 = *(_QWORD *)(v24 + 24);
            }
            else
            {
              v30 = 0;
            }
            v26 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v316, v30);
            if (!v26)
            {
              v31.i64[0] = 0x7F0000007FLL;
              v31.i64[1] = 0x7F0000007FLL;
              v308 = v31;
              v304 = (simd_float4)v318;
              goto LABEL_84;
            }
          }
          if (&v344 != (uint64_t *)(v26 + 144))
          {
            v32 = *(_QWORD *)(v26 + 144);
            if (v344)
            {
              if (v32)
                re::DynamicOverflowArray<unsigned short,8ul>::copy((uint64_t)&v344, v26 + 144);
              else
                v345 = 0;
              v346 += 2;
            }
            else if (v32)
            {
              v35 = *(_QWORD *)(v26 + 152);
              v344 = *(_QWORD *)(v26 + 144);
              re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(&v344, v35);
              v346 += 2;
              re::DynamicOverflowArray<unsigned short,8ul>::copy((uint64_t)&v344, v26 + 144);
            }
          }
          v308 = *(simd_float4 *)(v26 + 80);
          v304 = *(simd_float4 *)(v26 + 96);
LABEL_84:
          v34 = __invert_f4(*(simd_float4x4 *)(v25 + 16));
          v390 = v34;
        }
        v343 = __invert_f4(v34);
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v366);
        v337[0] = 0;
        v337[1] = 0;
        v338 = 1;
        v340 = 0;
        v341 = 0;
        v339 = 0;
        v342 = 0;
        re::BucketArray<re::Matrix4x4<float>,8ul>::init((uint64_t)v337, (uint64_t)&v366, 1uLL);
        v330 = 0;
        v331 = 0;
        v332 = 1;
        v334 = 0;
        v335 = 0;
        v333 = 0;
        v336 = 0;
        re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::init((uint64_t)&v330, (uint64_t)&v366, 1uLL);
        buf.i64[0] = (uint64_t)&v390;
        buf.i64[1] = (uint64_t)&v343;
        v354.i64[0] = v19;
        re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)&v354.i64[1], &v344);
        v355.columns[2] = v308;
        v355.columns[3] = v304;
        v356.i64[0] = v311;
        v36 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::add((uint64_t)&v330, (__int128 *)&buf);
        v37 = v354.i64[1];
        if (v354.i64[1] && (v355.columns[0].i8[8] & 1) == 0)
        {
          v38 = v355.columns[1].i64[1];
LABEL_88:
          (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v37 + 40))(v37, v38, v36);
        }
        while (2)
        {
          if (!v335)
          {
            v146 = v330;
            if (v331)
            {
              v147 = v334;
              v148 = v332;
              v149 = v331 - 1;
              do
              {
                if ((v148 & 1) != 0)
                  v150 = &v333;
                else
                  v150 = v147;
                (*(void (**)(unint64_t, uint64_t, __n128))(*(_QWORD *)v146 + 40))(v146, v150[v149], v36);
                v148 += 2;
                v332 = v148;
                --v149;
              }
              while (v149 != -1);
              if ((v148 & 1) != 0)
              {
LABEL_202:
                re::BucketArray<re::Matrix4x4<float>,8ul>::deinit((uint64_t)v337);
                if (v337[0] && (v338 & 1) == 0)
                  (*(void (**)(void))(*(_QWORD *)v337[0] + 40))();
                re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v366);
                v3 = a1;
                LODWORD(v4) = v281;
                v2 = a2;
                if (v344 && (v346 & 1) == 0)
                  (*(void (**)(void))(*(_QWORD *)v344 + 40))();
                goto LABEL_208;
              }
            }
            else if (!v330 || (v332 & 1) != 0)
            {
              goto LABEL_202;
            }
            (*(void (**)(unint64_t, uint64_t *))(*(_QWORD *)v146 + 40))(v146, v334);
            goto LABEL_202;
          }
          v39 = v335 - 1;
          v40 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::operator[]((uint64_t)&v330, v335 - 1);
          v41 = *(re::ecs2::TransformComponent ***)(v40 + 16);
          v378 = *(_OWORD *)v40;
          v379 = v41;
          re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v380, (uint64_t *)(v40 + 24));
          v42 = *(float32x4_t *)(v40 + 64);
          v43 = *(float32x4_t *)(v40 + 80);
          v385[0] = *(_QWORD *)(v40 + 96);
          v383 = (simd_float4)v42;
          v384 = (simd_float4)v43;
          v44 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::operator[]((uint64_t)&v330, v39);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v44 + 24);
          v335 = v39;
          ++v336;
          v45 = v379;
          if (((_BYTE)v379[36] & 1) == 0
            || re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)v316, (unint64_t)v379))
          {
            goto LABEL_188;
          }
          v47 = *((_QWORD *)&v378 + 1);
          v46 = (float32x4_t *)v378;
          if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v45 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
          {
            v293 = *(_OWORD *)(v47 + 16);
            v296 = *(float32x4_t *)v47;
            v288 = *(float32x4_t *)(v47 + 48);
            v290 = *(float32x4_t *)(v47 + 32);
            re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(a1 + 864), v379, &v349);
            v48 = re::BucketArray<re::Matrix4x4<float>,8ul>::addUninitialized((uint64_t)v337);
            v50 = v352;
            v52 = v349;
            v51 = v350;
            *(float32x4_t *)(v48 + 32) = v351;
            *(float32x4_t *)(v48 + 48) = v50;
            *(float32x4_t *)v48 = v52;
            *(float32x4_t *)(v48 + 16) = v51;
            if (!v341)
            {
              re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
              _os_crash();
              __break(1u);
LABEL_370:
              re::internal::assertLog((re::internal *)4, v54, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
              _os_crash();
              __break(1u);
LABEL_371:
              v343.columns[0].i64[0] = 0;
              v388 = 0u;
              v389 = 0u;
              v387 = 0u;
              memset(v386, 0, sizeof(v386));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v390.columns[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v390.columns[0].i64 + 4) = (uint64_t)"operator[]";
              v390.columns[0].i16[6] = 1024;
              *(__int32 *)((char *)&v390.columns[0].i32[3] + 2) = 789;
              v390.columns[1].i16[1] = 2048;
              *(uint64_t *)((char *)v390.columns[1].i64 + 4) = v10;
              v390.columns[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v390.columns[1].i64[1] + 6) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_372:
              v343.columns[0].i64[0] = 0;
              v388 = 0u;
              v389 = 0u;
              v387 = 0u;
              memset(v386, 0, sizeof(v386));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v390.columns[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v390.columns[0].i64 + 4) = (uint64_t)"operator[]";
              v390.columns[0].i16[6] = 1024;
              *(__int32 *)((char *)&v390.columns[0].i32[3] + 2) = 789;
              v390.columns[1].i16[1] = 2048;
              *(uint64_t *)((char *)v390.columns[1].i64 + 4) = v10;
              v390.columns[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v390.columns[1].i64[1] + 6) = (uint64_t)v45;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_373:
              re::internal::assertLog((re::internal *)5, v230, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v14);
              _os_crash();
              __break(1u);
LABEL_374:
              re::internal::assertLog((re::internal *)4, v90, "assertion failure: '%s' (%s:line %i) The row index is out of range. Allowed values are 0 to 3.", "!\"Unreachable code\"", "row", 587);
              _os_crash();
              __break(1u);
            }
            v47 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)v337, v341 - 1);
            v392.columns[0] = (simd_float4)v349;
            v392.columns[1] = (simd_float4)v350;
            v392.columns[2] = (simd_float4)v351;
            v392.columns[3] = (simd_float4)v352;
            v393 = __invert_f4(v392);
            v309 = v393.columns[1];
            v312 = v393.columns[0];
            v305 = v393.columns[2];
            v300 = v393.columns[3];
            v53 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,8ul>::addUninitialized((uint64_t)v337);
            *v53 = v312;
            v53[1] = v309;
            v53[2] = v305;
            v53[3] = v300;
            if (!v341)
              goto LABEL_370;
            v55 = (float32x4_t *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)v337, v341 - 1);
            v46 = v55;
            v56.i64[0] = 0x7F0000007FLL;
            v56.i64[1] = 0x7F0000007FLL;
            v57 = (uint32x4_t)vceqq_f32((float32x4_t)v383, v56);
            v57.i32[3] = v57.i32[2];
            if ((vminvq_u32(v57) & 0x80000000) == 0
              || (v58 = (uint32x4_t)vceqq_f32((float32x4_t)v384, (float32x4_t)vdupq_n_s32(0x7F800000u)),
                  v58.i32[3] = v58.i32[2],
                  (vminvq_u32(v58) & 0x80000000) == 0))
            {
              v59 = 0;
              v60 = *v55;
              v61 = v55[1];
              v62 = v55[2];
              v63 = v55[3];
              *(float32x4_t *)v386 = v296;
              *(_OWORD *)&v386[16] = v293;
              v387 = v290;
              v388 = v288;
              do
              {
                *(float32x4_t *)((char *)&buf + v59) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, COERCE_FLOAT(*(_OWORD *)&v386[v59])), v61, *(float32x2_t *)&v386[v59], 1), v62, *(float32x4_t *)&v386[v59], 2), v63, *(float32x4_t *)&v386[v59], 3);
                v59 += 16;
              }
              while (v59 != 64);
              re::AABB::transform((float32x4_t *)&v383, &buf, (uint64_t)v386);
              v383 = *(simd_float4 *)v386;
              v384 = *(simd_float4 *)&v386[16];
            }
          }
          v328 = (simd_float4)v318;
          v64.i64[0] = 0x7F0000007FLL;
          v64.i64[1] = 0x7F0000007FLL;
          v329 = (simd_float4)v64;
          v65 = v379[18];
          if (v65)
          {
            _S1 = *((_DWORD *)v65 + 16);
            _S2 = *((_DWORD *)v65 + 17);
            __asm
            {
              FCVT            H11, S1
              FCVT            H10, S2
            }
            v73 = (float32x4_t)vdupq_lane_s64(*((_QWORD *)v65 + 10), 0);
            v73.i32[0] = *((_DWORD *)v65 + 18);
            v73.i32[1] = *((_DWORD *)v65 + 24);
            _S0 = *((_QWORD *)v65 + 11);
            __asm { FCVT            H0, S0 }
            v310 = (uint64_t)vcvt_f16_f32(v73);
            v313 = _S0;
            if (re::s_debugSettingsManager)
            {
              *(_DWORD *)v386 = 0;
              buf.i64[0] = 0x417EAC0DEDDBE5AELL;
              buf.i64[1] = (uint64_t)"clipping:featherOverride";
              v75 = re::DebugSettingsManager::getWithErrorCode<float>(re::s_debugSettingsManager, &buf, v386);
              re::StringID::destroyString((re::StringID *)&buf);
              if (!v75)
              {
                _S0 = *(_DWORD *)v386;
                __asm { FCVT            H1, S0 }
                v78 = vdup_lane_s16((int16x4_t)_H1, 0);
                v78.i16[1] = 0;
                v310 = (uint64_t)v78;
                v313 = _H1;
                _H10 = _H1;
                _H11 = _H1;
              }
            }
            v79 = *((float32x4_t *)v65 + 2);
            v354 = *((float32x4_t *)v65 + 3);
            v328 = (simd_float4)v79;
            v329 = (simd_float4)v354;
            v80 = (char *)v65 + 100;
            v81 = *((_BYTE *)v65 + 101) != 0;
            goto LABEL_107;
          }
          v82 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v379 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v82)
          {
            _S0 = *(_DWORD *)(v82 + 64);
            __asm { FCVT            H2, S0 }
            v85 = *(float32x4_t *)(v82 + 32);
            v354 = *(float32x4_t *)(v82 + 48);
            v328 = (simd_float4)v85;
            v329 = (simd_float4)v354;
            *(int16x4_t *)v85.f32 = vdup_lane_s16((int16x4_t)_H2, 0);
            v80 = (_BYTE *)(v82 + 68);
            v85.i16[1] = 0;
            v310 = v85.i64[0];
            v313 = _H2;
            v81 = 1;
            _H10 = _H2;
            _H11 = _H2;
LABEL_107:
            v86 = *v80;
            v306 = *v80 != 0;
            v326 = (float32x4_t)v383;
            v327 = (float32x4_t)v384;
            re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v324, v380);
            v87 = !v81;
            if (!v379[22])
              v87 = 1;
            if (v86 || (v87 & 1) == 0)
            {
              re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(a1 + 864), v379, &v349);
              v394.columns[2] = (simd_float4)v351;
              v394.columns[3] = (simd_float4)v352;
              v394.columns[0] = (simd_float4)v349;
              v394.columns[1] = (simd_float4)v350;
              v94 = __invert_f4(v394);
              v92 = v94.columns[0];
              v93 = v94.columns[1];
              v94.columns[0] = (simd_float4)vsubq_f32((float32x4_t)v329, (float32x4_t)v328);
              v94.columns[0].i32[3] = 0;
              v323 = vmaxnmq_f32((float32x4_t)v94.columns[0], (float32x4_t)0);
              if (vmulq_laneq_f32(vmulq_lane_f32(v323, *(float32x2_t *)v323.f32, 1), v323, 2).f32[0] <= 0.00001
                || (v91.i32[1] = v326.i32[1],
                    v95 = vsubq_f32(v327, v326),
                    v95.i32[3] = 0,
                    v96 = vmaxnmq_f32(v95, (float32x4_t)0),
                    vmulq_laneq_f32(vmulq_lane_f32(v96, *(float32x2_t *)v96.f32, 1), v96, 2).f32[0] <= 0.00001))
              {
                do
                  v104 = __ldaxr((unsigned __int8 *)&_MergedGlobals_347);
                while (__stlxr(1u, (unsigned __int8 *)&_MergedGlobals_347));
                if ((v104 & 1) == 0)
                {
                  v295 = v94.columns[1];
                  v298 = v92;
                  v292 = v94.columns[2];
                  v105 = *re::ecsComponentsLogObjects(v89);
                  v106 = os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT);
                  v94.columns[2] = v292;
                  v93 = v295;
                  v92 = v298;
                  if (v106)
                  {
                    v107 = v379[35];
                    buf.i32[0] = 136315138;
                    *(uint64_t *)((char *)buf.i64 + 4) = (uint64_t)v107;
                    _os_log_impl(&dword_224FE9000, v105, OS_LOG_TYPE_DEFAULT, "Warning entity '%s'will be culled as the bounding clip volume is zero", (uint8_t *)&buf, 0xCu);
                    v94.columns[2] = v292;
                    v93 = v295;
                    v92 = v298;
                  }
                }
                v326 = 0u;
                v327 = 0u;
                v94.columns[3] = v328;
                v94.columns[1] = v329;
              }
              else
              {
                v278 = v326;
                v279 = v327;
                v280 = v328;
                v289 = v329;
                v291 = v94.columns[2];
                v294 = v94.columns[1];
                v297 = v92;
                v97 = 0;
                v98 = *v46;
                v99 = v46[1];
                v100 = v46[2];
                v101 = v46[3];
                *(float32x4_t *)v386 = v349;
                *(float32x4_t *)&v386[16] = v350;
                v387 = v351;
                v388 = v352;
                do
                {
                  *(float32x4_t *)((char *)&buf + v97) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, COERCE_FLOAT(*(_OWORD *)&v386[v97])), v99, *(float32x2_t *)&v386[v97], 1), v100, *(float32x4_t *)&v386[v97], 2), v101, *(float32x4_t *)&v386[v97], 3);
                  v97 += 16;
                }
                while (v97 != 64);
                re::AABB::transform((float32x4_t *)&v328, &buf, (uint64_t)v386);
                v103 = v278;
                v102 = v279;
                v103.i32[3] = 0;
                v94.columns[0] = *(simd_float4 *)v386;
                v94.columns[1] = *(simd_float4 *)&v386[16];
                v94.columns[0].i32[3] = 0;
                v94.columns[2].i32[3] = 0;
                v94.columns[1].i32[3] = 0;
                v326 = vmaxnmq_f32(v103, (float32x4_t)v94.columns[0]);
                v327 = vminnmq_f32((float32x4_t)v94.columns[2], (float32x4_t)v94.columns[1]);
                v93 = v294;
                v92 = v297;
                v94.columns[1] = v289;
                v94.columns[2] = v291;
                v94.columns[3] = v280;
              }
              v108 = (uint32x4_t)vcgtq_f32((float32x4_t)v94.columns[3], (float32x4_t)v94.columns[1]);
              v108.i32[3] = v108.i32[2];
              if ((vmaxvq_u32(v108) & 0x80000000) != 0)
              {
                v111 = 0uLL;
              }
              else
              {
                v109 = vaddq_f32((float32x4_t)v94.columns[1], (float32x4_t)v94.columns[3]);
                v110.i64[0] = 0x3F0000003F000000;
                v110.i64[1] = 0x3F0000003F000000;
                v111 = vmulq_f32(v109, v110);
              }
              v112 = 0;
              v113 = vaddq_f32(v352, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v349, v111.f32[0]), v350, *(float32x2_t *)v111.f32, 1), v351, v111, 2));
              v322 = vdivq_f32(v113, (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3));
              v354 = 0u;
              v355.columns[0] = 0u;
              buf = 0u;
              v355.columns[1].i16[0] = _H11;
              v355.columns[1].i16[1] = _H10;
              *(uint64_t *)((char *)v355.columns[1].i64 + 4) = v310;
              v355.columns[1].i32[3] = v313;
              do
              {
                v91.i32[0] = v323.i32[v112];
                v114 = 0uLL;
                if (v91.f32[0] != 0.0)
                {
                  v114.i32[0] = v92.i32[0];
                  v115 = v93.i32[0];
                  v116 = v94.columns[2].i32[0];
                  if ((_DWORD)v112)
                  {
                    v114.i32[0] = v92.i32[2];
                    v115 = v93.i32[2];
                    v116 = v94.columns[2].i32[2];
                    if ((_DWORD)v112 != 2)
                    {
                      v114.i32[0] = v92.i32[1];
                      v115 = v93.i32[1];
                      v116 = v94.columns[2].i32[1];
                      if ((_DWORD)v112 != 1)
                        goto LABEL_374;
                    }
                  }
                  v114.i32[1] = v115;
                  v114.i32[2] = v116;
                  v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 0);
                  v114 = vdivq_f32(v114, v91);
                }
                v114.i32[3] = v322.i32[v112];
                *(&buf + v112++) = v114;
              }
              while (v112 != 3);
              re::ecs2::ClippingParametersRegistry::add(v302, (__int128 *)&buf, (uint64_t)v320);
              if (v320[0])
              {
                if (v81)
                  re::DynamicOverflowArray<unsigned short,8ul>::add(v324, &v321);
                if (v86)
                {
                  re::DynamicOverflowArray<unsigned short,8ul>::add(v380, &v321);
                  v383 = (simd_float4)v326;
                  v384 = (simd_float4)v327;
                }
              }
              else
              {
                do
                  v118 = __ldaxr(byte_254116D81);
                while (__stlxr(1u, byte_254116D81));
                if ((v118 & 1) == 0)
                {
                  v119 = *re::ecsComponentsLogObjects(v117);
                  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                  {
                    v120 = v379[35];
                    *(_DWORD *)v386 = 134218242;
                    *(_QWORD *)&v386[4] = 1024;
                    *(_WORD *)&v386[12] = 2080;
                    *(_QWORD *)&v386[14] = v120;
                    _os_log_impl(&dword_224FE9000, v119, OS_LOG_TYPE_DEFAULT, "Current frame has more than %zu unique clip primitives. Unable to add clip primitive for entity '%s'.", v386, 0x16u);
                  }
                }
              }
              v88 = v306;
            }
            else
            {
              v88 = 0;
            }
          }
          else
          {
            v326 = (float32x4_t)v383;
            v327 = (float32x4_t)v384;
            re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v324, v380);
            v88 = 1;
          }
          v121 = re::ecs2::RenderOptions::forEntity(v307, (unint64_t)v379);
          if (v121[18])
            _ZF = v121[19] == 0;
          else
            _ZF = 1;
          if (_ZF)
          {
            if (v324[1])
              goto LABEL_157;
            goto LABEL_170;
          }
          v123 = v385[0];
          v124 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v286, v385[0]);
          if (v124 == -1)
          {
            v354 = 0u;
            v355.columns[0] = 0u;
            buf = 0u;
            v355.columns[0].i32[1] = 0x7FFFFFFF;
            v126 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v286, v123);
            if (v126 == -1)
              v125 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(v286, (uint64_t *)v385, (uint64_t)&buf);
            else
              v125 = (_QWORD *)(*(_QWORD *)(a1 + 560) + 56 * v126 + 8);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf);
          }
          else
          {
            v125 = (_QWORD *)(*(_QWORD *)(a1 + 560) + 56 * v124 + 8);
          }
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v125, (uint64_t *)&v379);
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v284, (uint64_t *)&v379);
LABEL_157:
          buf.i64[0] = v385[0];
          v127 = *(float32x4_t *)v47;
          v128 = *(simd_float4 *)(v47 + 16);
          v129 = *(simd_float4 *)(v47 + 48);
          v355.columns[1] = *(simd_float4 *)(v47 + 32);
          v355.columns[2] = v129;
          v354 = v127;
          v355.columns[0] = v128;
          v355.columns[3] = (simd_float4)v326;
          v356 = v327;
          re::AABB::transform(&v326, (float32x4_t *)v47, (uint64_t)&v357);
          re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)&v359, v324);
          v362 = 0;
          v363 = 0;
          v364 = v88;
          v130 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * ((unint64_t)v379 ^ ((unint64_t)v379 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v379 ^ ((unint64_t)v379 >> 30))) >> 27));
          v131 = v130 ^ (v130 >> 31);
          if (*v316)
          {
            v132 = v131 % *(unsigned int *)(a1 + 80);
            v133 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v132);
            if ((_DWORD)v133 != 0x7FFFFFFF)
            {
              v134 = *(_QWORD *)(a1 + 72);
              while (*(re::ecs2::TransformComponent ***)(v134 + 224 * v133 + 16) != v379)
              {
                LODWORD(v133) = *(_DWORD *)(v134 + 224 * v133 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v133 == 0x7FFFFFFF)
                  goto LABEL_164;
              }
              v136 = v134 + 224 * v133;
LABEL_166:
              v137 = v136 + 32;
              if (v359.i64[0] && (v360[0] & 1) == 0)
                (*(void (**)(void))(*(_QWORD *)v359.i64[0] + 40))();
              re::ecs2::ClippingParametersRegistry::registerClippingParameterDataRefs(v302, v137);
LABEL_170:
              v138 = v379;
              v139 = v379[26];
              *(_QWORD *)v386 = v139;
              if (v139 && *((_BYTE *)v139 + 131))
              {
                re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add(v283, (uint64_t *)v386);
                v138 = v379;
              }
              v140 = v138[41];
              if (v140)
              {
                v141 = v138[43];
                v142 = 8 * (_QWORD)v140;
                do
                {
                  v143 = *(_QWORD *)v141;
                  (*(void (**)(float32x4_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)v14 + 8))(&buf, *(_QWORD *)v14, *(_QWORD *)v141);
                  if (buf.i8[0])
                    v144 = buf.i64[1];
                  else
                    v144 = 0;
                  buf.i64[0] = (uint64_t)v46;
                  buf.i64[1] = v47;
                  v354.i64[0] = v143;
                  if (v385[0] == v144)
                  {
                    re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)&v354.i64[1], v380);
                    v355.columns[2] = v383;
                    v355.columns[3] = v384;
                    v144 = v385[0];
                  }
                  else
                  {
                    v354.i64[1] = 0;
                    v355.columns[0].i64[0] = 0;
                    v355.columns[0].i32[2] = 1;
                    v355.columns[1] = 0uLL;
                    v145.i64[0] = 0x7F0000007FLL;
                    v145.i64[1] = 0x7F0000007FLL;
                    v355.columns[2] = v145;
                    v355.columns[3] = (simd_float4)v318;
                  }
                  v356.i64[0] = v144;
                  v36 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::add((uint64_t)&v330, (__int128 *)&buf);
                  if (v354.i64[1] && (v355.columns[0].i8[8] & 1) == 0)
                    (*(void (**)(__n128))(*(_QWORD *)v354.i64[1] + 40))(v36);
                  v141 = (re::ecs2::TransformComponent *)((char *)v141 + 8);
                  v142 -= 8;
                }
                while (v142);
              }
              if (v324[0] && (v325 & 1) == 0)
                (*(void (**)(void))(*(_QWORD *)v324[0] + 40))();
LABEL_188:
              v37 = v380[0];
              if (v380[0] && (v381 & 1) == 0)
              {
                v38 = v382;
                goto LABEL_88;
              }
              continue;
            }
          }
          else
          {
            LODWORD(v132) = 0;
          }
          break;
        }
LABEL_164:
        v135 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove((uint64_t)v316, v132, v131, &v379, (uint64_t)&buf);
        ++*(_DWORD *)(a1 + 96);
        v136 = *(_QWORD *)(a1 + 72) + 224 * v135;
        goto LABEL_166;
      }
LABEL_208:
      v9 = *(_QWORD *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1))
        v151 = v5 + 1;
      else
        v151 = *(_DWORD *)(v2 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v151 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v152 = v8;
        if ((*(_DWORD *)(v9 + 24 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_215;
      }
      v152 = v151;
LABEL_215:
      LODWORD(v5) = v152;
    }
    while ((_DWORD)v4 != v152);
  }
  v153 = *(_QWORD **)(v3 + 840);
  v154 = *(_QWORD *)(v3 + 856);
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v378);
  v351.i32[0] = 0;
  v349 = 0u;
  v350 = 0u;
  *(uint64_t *)((char *)v351.i64 + 4) = 0x7FFFFFFFLL;
  re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::init((uint64_t)&v349, (uint64_t)&v378, 3);
  v155 = *(unsigned int *)(v3 + 648);
  if ((_DWORD)v155)
  {
    v156 = 0;
    v157 = (int *)(*(_QWORD *)(v3 + 632) + 8);
    while (1)
    {
      v158 = *v157;
      v157 += 6;
      if (v158 < 0)
        break;
      if (v155 == ++v156)
      {
        LODWORD(v156) = *(_DWORD *)(v3 + 648);
        break;
      }
    }
  }
  else
  {
    LODWORD(v156) = 0;
  }
  if ((_DWORD)v155 != (_DWORD)v156)
  {
    v159 = v156;
    v160 = *(_QWORD *)(a1 + 632);
    do
    {
      v161 = *(_QWORD *)(v160 + 24 * v159 + 16);
      (*(void (**)(float32x4_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v153 + 8))(&buf, *v153, v161);
      if (buf.i8[0])
        v162 = buf.i64[1];
      else
        v162 = 0;
      v163 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v153 + 32))(*v153, v162);
      v164 = v163;
      v165 = *(unsigned int *)(v163 + 32);
      if ((_DWORD)v165)
      {
        v166 = 0;
        v167 = (int *)(*(_QWORD *)(v163 + 16) + 8);
        while (1)
        {
          v168 = *v167;
          v167 += 6;
          if (v168 < 0)
            break;
          if (v165 == ++v166)
          {
            LODWORD(v166) = *(_DWORD *)(v163 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v166) = 0;
      }
      if ((_DWORD)v165 != (_DWORD)v166)
      {
        v169 = v166;
        v170 = *(_QWORD *)(v163 + 16);
        v171 = *(_DWORD *)(v163 + 32);
        do
        {
          v172 = *(_QWORD *)(v170 + 24 * v169 + 16);
          if (*(_BYTE *)(v172 + 131))
          {
            buf.i64[0] = v161;
            buf.i64[1] = v172;
            re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::add((uint64_t)&v349, (uint64_t *)&buf);
            v171 = *(_DWORD *)(v164 + 32);
            v170 = *(_QWORD *)(v164 + 16);
          }
          if (v171 <= (int)v166 + 1)
            v173 = v166 + 1;
          else
            v173 = v171;
          while (1)
          {
            v169 = (v166 + 1);
            if (v173 - 1 == (_DWORD)v166)
              break;
            LODWORD(v166) = v166 + 1;
            v174 = v169;
            if ((*(_DWORD *)(v170 + 24 * v169 + 8) & 0x80000000) != 0)
              goto LABEL_244;
          }
          v174 = v173;
LABEL_244:
          LODWORD(v166) = v174;
        }
        while ((_DWORD)v165 != v174);
      }
      v160 = *(_QWORD *)(a1 + 632);
      if (*(_DWORD *)(a1 + 648) <= (v156 + 1))
        v175 = v156 + 1;
      else
        v175 = *(_DWORD *)(a1 + 648);
      while (1)
      {
        v159 = (v156 + 1);
        if (v175 - 1 == (_DWORD)v156)
          break;
        LODWORD(v156) = v156 + 1;
        v176 = v159;
        if ((*(_DWORD *)(v160 + 24 * v159 + 8) & 0x80000000) != 0)
          goto LABEL_252;
      }
      v176 = v175;
LABEL_252:
      LODWORD(v156) = v176;
    }
    while ((_DWORD)v155 != v176);
  }
  v177 = (_QWORD *)a1;
  v178 = *(unsigned int *)(a1 + 696);
  if ((_DWORD)v178)
  {
    v179 = 0;
    v180 = (int *)(*(_QWORD *)(a1 + 680) + 8);
    while (1)
    {
      v181 = *v180;
      v180 += 6;
      if (v181 < 0)
        break;
      if (v178 == ++v179)
      {
        LODWORD(v179) = *(_DWORD *)(a1 + 696);
        break;
      }
    }
  }
  else
  {
    LODWORD(v179) = 0;
  }
  if ((_DWORD)v178 != (_DWORD)v179)
  {
    v182 = v179;
    v183 = *(_QWORD *)(a1 + 680);
    do
    {
      v184 = *(_QWORD *)(v183 + 24 * v182 + 16);
      v185 = re::ecs2::PortalComponent::targetWorldRootToken(v184, v154);
      v186 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 552), (unint64_t)v185);
      if (v186 != -1)
      {
        v187 = *(_QWORD *)(a1 + 560) + 56 * v186;
        v188 = v187 + 8;
        v189 = *(unsigned int *)(v187 + 40);
        if ((_DWORD)v189)
        {
          v190 = 0;
          v191 = (int *)(*(_QWORD *)(v187 + 24) + 8);
          while (1)
          {
            v192 = *v191;
            v191 += 6;
            if (v192 < 0)
              break;
            if (v189 == ++v190)
            {
              LODWORD(v190) = v189;
              break;
            }
          }
        }
        else
        {
          LODWORD(v190) = 0;
        }
        if ((_DWORD)v189 != (_DWORD)v190)
        {
          v193 = v190;
          do
          {
            buf.i64[0] = *(_QWORD *)(*(_QWORD *)(v188 + 16) + 24 * v193 + 16);
            buf.i64[1] = v184;
            re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::add((uint64_t)&v349, (uint64_t *)&buf);
            if (*(_DWORD *)(v188 + 32) <= (v190 + 1))
              v194 = v190 + 1;
            else
              v194 = *(_DWORD *)(v188 + 32);
            v195 = v190;
            while (1)
            {
              v193 = (v195 + 1);
              if (v194 - 1 == v195)
                break;
              ++v195;
              LODWORD(v190) = v193;
              if ((*(_DWORD *)(*(_QWORD *)(v188 + 16) + 24 * v193 + 8) & 0x80000000) != 0)
                goto LABEL_278;
            }
            LODWORD(v190) = v194;
LABEL_278:
            ;
          }
          while ((_DWORD)v189 != (_DWORD)v190);
        }
      }
      v177 = (_QWORD *)a1;
      v183 = *(_QWORD *)(a1 + 680);
      if (*(_DWORD *)(a1 + 696) <= (v179 + 1))
        v196 = v179 + 1;
      else
        v196 = *(_DWORD *)(a1 + 696);
      while (1)
      {
        v182 = (v179 + 1);
        if (v196 - 1 == (_DWORD)v179)
          break;
        LODWORD(v179) = v179 + 1;
        v197 = v182;
        if ((*(_DWORD *)(v183 + 24 * v182 + 8) & 0x80000000) != 0)
          goto LABEL_286;
      }
      v197 = v196;
LABEL_286:
      LODWORD(v179) = v197;
    }
    while ((_DWORD)v178 != v197);
  }
  v319 = v351.i32[0];
  v198 = 0;
  if (v351.i32[0])
  {
    v199 = (int *)(v350.i64[0] + 8);
    while (1)
    {
      v200 = *v199;
      v199 += 8;
      if (v200 < 0)
        break;
      if (v351.u32[0] == ++v198)
      {
        LODWORD(v198) = v351.i32[0];
        break;
      }
    }
  }
  if (v351.i32[0] == (_DWORD)v198)
  {
LABEL_293:
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v349);
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v378);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)(v177 + 77));
    re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::clear((uint64_t)(v177 + 83));
    return;
  }
  v201 = v198;
  v314 = (uint64_t)(v177 + 7);
  v299 = (uint64_t)(v177 + 89);
  v301 = v177 + 37;
  v317 = v177 + 61;
  v202 = v350.i64[0];
  v303 = vdupq_n_s32(0x7F800000u);
  v285 = (_anonymous_namespace_ *)(v177 + 53);
  v287 = (_anonymous_namespace_ *)(v177 + 45);
  while (1)
  {
    v203 = v202 + 32 * v201;
    v337[0] = *(_QWORD *)(v203 + 16);
    v204 = v337[0];
    v330 = *(_QWORD *)(v203 + 24);
    v205 = v330;
    v206 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v314, v337[0]);
    v207 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v314, *(_QWORD *)(v205 + 16));
    v45 = (re::ecs2::TransformComponent **)v207;
    v367.columns[0] = (simd_float4)xmmword_2260E5F10;
    v367.columns[1] = (simd_float4)xmmword_2260E5F20;
    v367.columns[2] = (simd_float4)xmmword_2260E5F40;
    v367.columns[3] = (simd_float4)xmmword_2260E5D70;
    v208.i64[0] = 0x7F0000007FLL;
    v208.i64[1] = 0x7F0000007FLL;
    v368 = v208;
    v369 = (float32x4_t)v303;
    v370 = v208;
    v371 = (float32x4_t)v303;
    v372 = 0;
    v373 = 0;
    v374 = 1;
    v375 = 0;
    v376 = 0;
    *(_DWORD *)v377 = 0;
    v377[6] = 1;
    if (v206)
    {
      v366.i64[0] = *(_QWORD *)v206;
      v209 = *(simd_float4 *)(v206 + 16);
      v210 = *(simd_float4 *)(v206 + 32);
      v211 = *(simd_float4 *)(v206 + 64);
      v367.columns[2] = *(simd_float4 *)(v206 + 48);
      v367.columns[3] = v211;
      v367.columns[0] = v209;
      v367.columns[1] = v210;
      v212 = *(float32x4_t *)(v206 + 96);
      v368 = *(float32x4_t *)(v206 + 80);
      v369 = v212;
      v213 = *(float32x4_t *)(v206 + 128);
      v370 = *(float32x4_t *)(v206 + 112);
      v371 = v213;
      v377[6] = *(_BYTE *)(v206 + 190);
      v214 = *(_QWORD *)(v206 + 152);
      if (v207)
        goto LABEL_297;
    }
    else
    {
      v214 = 0;
      if (v207)
      {
LABEL_297:
        v215 = *(_QWORD *)(v207 + 152);
        re::DynamicOverflowArray<unsigned short,8ul>::resize((_anonymous_namespace_ *)&v372, v215 + v214);
        v395 = __invert_f4(v367);
        v216 = 0;
        v217 = *((_OWORD *)v45 + 2);
        v218 = *((float32x4_t *)v45 + 3);
        v219 = *((float32x4_t *)v45 + 4);
        *(_OWORD *)v386 = *((_OWORD *)v45 + 1);
        *(_OWORD *)&v386[16] = v217;
        v387 = v218;
        v388 = v219;
        do
        {
          *(float32x4_t *)((char *)&buf + v216) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v395.columns[0], COERCE_FLOAT(*(_OWORD *)&v386[v216])), (float32x4_t)v395.columns[1], *(float32x2_t *)&v386[v216], 1), (float32x4_t)v395.columns[2], *(float32x4_t *)&v386[v216], 2), (float32x4_t)v395.columns[3], *(float32x4_t *)&v386[v216], 3);
          v216 += 16;
        }
        while (v216 != 64);
        re::AABB::transform((float32x4_t *)v45 + 5, &buf, (uint64_t)v386);
        v220 = v368;
        v221 = v369;
        v220.i32[3] = 0;
        v222 = *(float32x4_t *)v386;
        v223 = *(float32x4_t *)&v386[16];
        v222.i32[3] = 0;
        v221.i32[3] = 0;
        v223.i32[3] = 0;
        v368 = vmaxnmq_f32(v220, v222);
        v369 = vminnmq_f32(v221, v223);
        v224 = v370;
        v225 = v371;
        v224.i32[3] = 0;
        v226 = *((float32x4_t *)v45 + 7);
        v227 = *((float32x4_t *)v45 + 8);
        v226.i32[3] = 0;
        v225.i32[3] = 0;
        v227.i32[3] = 0;
        v370 = vmaxnmq_f32(v224, v226);
        v371 = vminnmq_f32(v225, v227);
        if (((_BYTE)v45[20] & 1) != 0)
          v228 = (char *)(v45 + 21);
        else
          v228 = (char *)v45[22];
        re::DynamicOverflowArray<unsigned short,8ul>::copy((char *)&v372, 0, v228, v215);
        if (!v206)
          goto LABEL_310;
        goto LABEL_306;
      }
    }
    re::DynamicOverflowArray<unsigned short,8ul>::resize((_anonymous_namespace_ *)&v372, v214);
    v215 = 0;
    if (!v206)
      goto LABEL_310;
LABEL_306:
    v229 = (*(_BYTE *)(v206 + 160) & 1) != 0 ? (char *)(v206 + 168) : *(char **)(v206 + 176);
    re::DynamicOverflowArray<unsigned short,8ul>::copy((char *)&v372, v215, v229, v214);
LABEL_310:
    v177 = (_QWORD *)a1;
    if (v373)
      break;
LABEL_350:
    if (v372 && (v374 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v372 + 40))();
    v202 = v350.i64[0];
    if (v351.i32[0] <= (v198 + 1))
      v276 = v198 + 1;
    else
      v276 = v351.i32[0];
    while (1)
    {
      v201 = (v198 + 1);
      if (v276 - 1 == (_DWORD)v198)
        break;
      LODWORD(v198) = v198 + 1;
      v277 = v201;
      if ((*(_DWORD *)(v350.i64[0] + 32 * v201 + 8) & 0x80000000) != 0)
        goto LABEL_360;
    }
    v277 = v276;
LABEL_360:
    LODWORD(v198) = v277;
    if (v319 == v277)
      goto LABEL_293;
  }
  re::ecs2::ClippingParametersRegistry::registerClippingParameterDataRefs(v299, (uint64_t)&v366);
  buf.i64[0] = v205;
  buf.i64[1] = v204;
  v357 = v369;
  v358 = v370;
  v359 = v371;
  v355 = v367;
  v356 = v368;
  v354 = v366;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v360, (uint64_t)&v372);
  v365[0] = *(_DWORD *)v377;
  *(_DWORD *)((char *)v365 + 3) = *(_DWORD *)&v377[3];
  v231 = *(_DWORD *)(a1 + 352);
  if ((v231 + 1) >> 24)
    v232 = 1;
  else
    v232 = v231 + 1;
  *(_DWORD *)(a1 + 352) = v232;
  v14 = *(unsigned __int16 *)(a1 + 348);
  v10 = *(unsigned __int16 *)(a1 + 350);
  if (v14 == 0xFFFF && (_DWORD)v10 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 344) >= *(_DWORD *)(a1 + 340))
      re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::allocBlock(v301);
    v233 = *(_QWORD *)(a1 + 312);
    v10 = (unsigned __int16)(v233 - 1);
    if (!v233)
      goto LABEL_371;
    v14 = *(unsigned int *)(a1 + 344);
    if (v14 >= 0x10000)
      goto LABEL_373;
    v234 = (_QWORD *)(*(_QWORD *)(a1 + 328) + 16 * v10);
    *(_DWORD *)(a1 + 344) = v14 + 1;
    *(_DWORD *)(v234[1] + 4 * v14) = *(_DWORD *)(a1 + 352);
    v235 = *v234 + 208 * v14;
  }
  else
  {
    v45 = *(re::ecs2::TransformComponent ***)(a1 + 312);
    if ((unint64_t)v45 <= v10)
      goto LABEL_372;
    v236 = (_QWORD *)(*(_QWORD *)(a1 + 328) + 16 * v10);
    *(_DWORD *)(v236[1] + 4 * v14) = v232;
    v235 = *v236 + 208 * v14;
    *(_DWORD *)(a1 + 348) = *(_DWORD *)v235;
  }
  ++*(_DWORD *)(a1 + 336);
  *(float32x4_t *)v235 = buf;
  v237 = v355.columns[3];
  v239 = v355.columns[0];
  v238 = v355.columns[1];
  *(simd_float4 *)(v235 + 64) = v355.columns[2];
  *(simd_float4 *)(v235 + 80) = v237;
  *(simd_float4 *)(v235 + 32) = v239;
  *(simd_float4 *)(v235 + 48) = v238;
  v240 = v359;
  v242 = v356;
  v241 = v357;
  *(float32x4_t *)(v235 + 128) = v358;
  *(float32x4_t *)(v235 + 144) = v240;
  *(float32x4_t *)(v235 + 96) = v242;
  *(float32x4_t *)(v235 + 112) = v241;
  *(float32x4_t *)(v235 + 16) = v354;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(v235 + 160, (uint64_t)v360);
  v243 = v365[0];
  *(_DWORD *)(v235 + 203) = *(_DWORD *)((char *)v365 + 3);
  *(_DWORD *)(v235 + 200) = v243;
  *(_QWORD *)v386 = (v10 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 352) & 0xFFFFFF) << 32) | v14;
  if (v360[0] && (v361 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v360[0] + 40))();
  v244 = v337[0];
  v245 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v287, v337[0]);
  if (v245 != -1
    || (buf = 0uLL,
        v354.i32[0] = 1,
        v354.i64[1] = 0,
        v355.columns[0].i64[0] = 0,
        v245 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v287, v244), v245 != -1))
  {
    v246 = (int *)(*(_QWORD *)(a1 + 368) + 96 * v245 + 8);
    goto LABEL_329;
  }
  v246 = (int *)re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(v287, v337, (uint64_t)&buf);
  if (buf.i64[0])
  {
    v247 = v285;
    if ((v354.i8[0] & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)buf.i64[0] + 40))();
  }
  else
  {
LABEL_329:
    v247 = v285;
  }
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::add(v246, v386);
  v248 = v330;
  v249 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v247, v330);
  if (v249 == -1
    && (buf = 0uLL,
        v354.i32[0] = 1,
        v354.i64[1] = 0,
        v355.columns[0].i64[0] = 0,
        v249 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v247, v248), v249 == -1))
  {
    v250 = (int *)re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::internalAdd(v247, (uint64_t *)&v330, (uint64_t)&buf);
    if (buf.i64[0] && (v354.i8[0] & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)buf.i64[0] + 40))();
  }
  else
  {
    v250 = (int *)(*(_QWORD *)(a1 + 432) + 96 * v249 + 8);
  }
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::add(v250, v386);
  v251 = v337[0];
  v252 = v330;
  v253 = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(v317, v337[0], v330);
  if (v253 != -1)
  {
    v254 = *(_QWORD *)(*(_QWORD *)(a1 + 496) + 24 * v253 + 16);
    if (re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet((uint64_t)v301, v254))
      re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy((uint64_t)v301, v254);
  }
  v255 = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(v317, v251, v252);
  if (v255 != -1)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 496) + 24 * v255 + 16) = *(_QWORD *)v386;
    goto LABEL_350;
  }
  if (!*(_QWORD *)(a1 + 544))
  {
  }
  v257 = *(_QWORD *)(a1 + 520);
  if (!v257 || (v258 = *(_QWORD *)(a1 + 504), v258 > 8 * v257))
  {
    re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(v317, 1u);
    v258 = *(_QWORD *)(a1 + 504);
  }
  v259 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v251 ^ (v251 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v251 ^ (v251 >> 30))) >> 27));
  v260 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v252 ^ (v252 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v252 ^ (v252 >> 30))) >> 27));
  v261 = ((v260 ^ (v260 >> 31)) - 0x61C8864680B583E9 + ((v259 ^ (v259 >> 31)) << 6) + ((v259 ^ (v259 >> 31)) >> 2)) ^ v259 ^ (v259 >> 31);
  v262 = v258 >> 4;
  v263 = v261 % (v258 >> 4);
  v264 = *v317;
  v265 = v263;
  do
  {
    v266 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v264 + 16 * v265)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v266 < 0x40)
    {
      v267 = v264 + 16 * v265;
      v268 = *(unsigned __int8 *)(v267 + v266);
      *(_BYTE *)(v267 + v266) = v261 & 0x7F;
      v269 = v268 == 255;
      v270 = *(_QWORD *)v386;
      v271 = 3 * (v266 + 16 * v265);
      v272 = (unint64_t *)(*(_QWORD *)(a1 + 496) + 8 * v271);
      *v272 = v251;
      v272[1] = v252;
      v272[2] = v270;
      ++*(_QWORD *)(a1 + 512);
      *(_QWORD *)(a1 + 520) -= v269;
      v273 = (_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v271);
      v274 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (*v273 ^ (*v273 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v273 ^ (*v273 >> 30))) >> 27));
      v275 = 0xBF58476D1CE4E5B9 * (v273[1] ^ (v273[1] >> 30));
      *(_QWORD *)(a1 + 528) ^= v274 ^ (v274 >> 31) ^ (((0x94D049BB133111EBLL * (v275 ^ (v275 >> 27))) ^ ((0x94D049BB133111EBLL * (v275 ^ (v275 >> 27))) >> 31))
                                                    - 0x61C8864680B583E9
                                                    + ((v274 ^ (v274 >> 31)) << 6)
                                                    + ((v274 ^ (v274 >> 31)) >> 2));
      goto LABEL_350;
    }
    if (v265 + 1 == v262)
      v265 = 0;
    else
      ++v265;
  }
  while (v265 != v263);
  re::internal::assertLog((re::internal *)4, v256, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
  _os_crash();
  __break(1u);
}

void re::ecs2::ClippingParameterDataStateTracking::clearEntityHierarchyStateData(re::ecs2::ClippingParameterDataStateTracking *this, const re::ecs2::Entity *a2)
{
  re::ecs2::ClippingParameterDataStateTracking *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t v15;
  int8x8_t v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  re::ecs2::ClippingParameterDataStateTracking *v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  __int128 *v83;
  __int128 *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD v87[2];
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _BYTE v93[120];
  uint64_t v94;
  int v95;
  const char *v96;
  __int16 v97;
  int v98;
  __int16 v99;
  unint64_t v100;
  __int16 v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 21))
  {
    v3 = this;
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v93);
    v87[0] = 0;
    v87[1] = 0;
    v88 = 1;
    v90 = 0;
    v91 = 0;
    v89 = 0;
    v92 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v87, (uint64_t)v93, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v87) = a2;
    v4 = v91;
    if (v91)
    {
      v5 = (uint64_t)v3 + 712;
      v83 = (__int128 *)((char *)v3 + 360);
      v6 = (uint64_t)v3 + 296;
      v84 = (__int128 *)((char *)v3 + 424);
      v7 = (uint64_t *)((char *)v3 + 488);
      v74 = (uint64_t)v3 + 616;
      v75 = (uint64_t)v3 + 56;
      v72 = (uint64_t)v3 + 664;
      v73 = (__int128 *)((char *)v3 + 552);
      v78 = (char *)v3 + 712;
      v79 = v3;
      v80 = (uint64_t *)((char *)v3 + 488);
      do
      {
        v86 = 0;
        v86 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v87, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v87, --v91);
        ++v92;
        v8 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v75, v86);
        if (v8)
        {
          v9 = (unint64_t *)v8;
          re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(v5, v8);
          re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v75, v86);
          v10 = *v9;
          v11 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v73, v10);
          if (v11 != -1)
          {
            v12 = *((_QWORD *)v3 + 70) + 56 * v11;
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v12 + 8, (uint64_t *)&v86);
            if (!*(_DWORD *)(v12 + 36))
            {
              v13 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v73, v10);
              if (v13 != -1)
              {
                v14 = (int8x16_t *)(*((_QWORD *)v3 + 69) + (v13 & 0xFFFFFFFFFFFFFFF0));
                v15.i64[0] = -1;
                v15.i64[1] = -1;
                v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v14, v15), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
                if (v16)
                  v17 = -1;
                else
                  v17 = 0x80;
                v14->i8[v13 & 0xF] = v17;
                v18 = (_QWORD *)(*((_QWORD *)v3 + 70) + 56 * v13);
                v19 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (*v18 ^ (*v18 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v18 ^ (*v18 >> 30))) >> 27));
                *((_QWORD *)v3 + 74) ^= (v19 >> 31) ^ v19;
                re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v18 + 1);
                v20 = *((_QWORD *)v3 + 73);
                if (v16)
                  ++v20;
                v21 = *((_QWORD *)v3 + 72) - 1;
                *((_QWORD *)v3 + 72) = v21;
                *((_QWORD *)v3 + 73) = v20;
                v22 = *((_QWORD *)v3 + 71);
                if (v22 >= 0x11 && v21 < v22 >> 2)
                  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v73, 0);
              }
            }
          }
        }
        v23 = v86;
        v24 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v83, v86);
        if (v24 != -1)
        {
          v25 = *((_QWORD *)v3 + 46);
          if ((*(_BYTE *)(v25 + 96 * v24 + 24) & 1) != 0)
            v26 = (uint64_t *)(v25 + 96 * v24 + 32);
          else
            v26 = *(uint64_t **)(v25 + 96 * v24 + 40);
          v27 = *(_QWORD *)(v25 + 96 * v24 + 16);
          v28 = &v26[v27];
          v76 = v28;
          if (v27)
          {
            do
            {
              v29 = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *v26);
              if (v29)
              {
                v30 = (unint64_t *)v29;
                re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(v5, v29 + 16);
                re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy(v6, *v26);
                v31 = *v30;
                v32 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v84, v31);
                if (v32 != -1)
                {
                  v33 = *((_QWORD *)v3 + 54);
                  v34 = v33 + 96 * v32;
                  v37 = *(_QWORD *)(v34 + 16);
                  v36 = (unint64_t *)(v34 + 16);
                  v35 = v37;
                  if ((int)v37 >= 1)
                  {
                    v81 = v31;
                    v38 = v33 + 96 * v32;
                    v39 = (_BYTE *)(v38 + 24);
                    v40 = v38 + 32;
                    v41 = (uint64_t *)(v38 + 40);
                    v42 = v35 + 1;
                    do
                    {
                      v43 = (v42 - 2);
                      v44 = *v36;
                      if (*v36 <= v43)
                      {
                        v94 = 0;
                        v106 = 0u;
                        v107 = 0u;
                        v104 = 0u;
                        v105 = 0u;
                        v103 = 0u;
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        v95 = 136315906;
                        v96 = "operator[]";
                        v97 = 1024;
                        v98 = 858;
                        v99 = 2048;
                        v100 = (v42 - 2);
                        v101 = 2048;
                        v102 = v44;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_72:
                        v94 = 0;
                        v106 = 0u;
                        v107 = 0u;
                        v104 = 0u;
                        v105 = 0u;
                        v103 = 0u;
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        v95 = 136315906;
                        v96 = "operator[]";
                        v97 = 1024;
                        v98 = 858;
                        v99 = 2048;
                        v100 = v43;
                        v101 = 2048;
                        v102 = v44;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
                      }
                      v45 = v40;
                      if ((*v39 & 1) == 0)
                        v45 = *v41;
                      if (!re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *(_QWORD *)(v45 + 8 * v43)))re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::removeAt((uint64_t)(v36 - 1), (v42 - 2));
                      --v42;
                    }
                    while (v42 > 1);
                    v35 = *v36;
                    v5 = (uint64_t)v78;
                    v3 = v79;
                    v7 = v80;
                    v31 = v81;
                    v28 = v76;
                  }
                  if (!v35)
                    re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::remove(v84, v31);
                }
                re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::remove(v7, v86, v31);
              }
              ++v26;
            }
            while (v26 != v28);
            v23 = v86;
          }
          re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::remove(v83, v23);
        }
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v74, (uint64_t *)&v86);
        v46 = v86;
        v47 = *(_QWORD *)(v86 + 208);
        v85 = v47;
        if (v47)
        {
          v48 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v84, v47);
          if (v48 != -1)
          {
            v49 = *((_QWORD *)v3 + 54);
            if ((*(_BYTE *)(v49 + 96 * v48 + 24) & 1) != 0)
              v50 = (uint64_t *)(v49 + 96 * v48 + 32);
            else
              v50 = *(uint64_t **)(v49 + 96 * v48 + 40);
            v51 = *(_QWORD *)(v49 + 96 * v48 + 16);
            v52 = &v50[v51];
            v77 = v52;
            if (v51)
            {
              do
              {
                v53 = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *v50);
                if (v53)
                {
                  v54 = v53;
                  re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(v5, v53 + 16);
                  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy(v6, *v50);
                  v55 = *(_QWORD *)(v54 + 8);
                  v56 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v83, v55);
                  if (v56 != -1)
                  {
                    v57 = *((_QWORD *)v3 + 46);
                    v58 = v57 + 96 * v56;
                    v61 = *(_QWORD *)(v58 + 16);
                    v60 = (unint64_t *)(v58 + 16);
                    v59 = v61;
                    if ((int)v61 >= 1)
                    {
                      v82 = v55;
                      v62 = v57 + 96 * v56;
                      v63 = (_BYTE *)(v62 + 24);
                      v64 = v62 + 32;
                      v65 = (uint64_t *)(v62 + 40);
                      v66 = v59 + 1;
                      do
                      {
                        v43 = (v66 - 2);
                        v44 = *v60;
                        if (*v60 <= v43)
                          goto LABEL_72;
                        v67 = v64;
                        if ((*v63 & 1) == 0)
                          v67 = *v65;
                        if (!re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *(_QWORD *)(v67 + 8 * v43)))re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::removeAt((uint64_t)(v60 - 1), (v66 - 2));
                        --v66;
                      }
                      while (v66 > 1);
                      v59 = *v60;
                      v5 = (uint64_t)v78;
                      v3 = v79;
                      v7 = v80;
                      v55 = v82;
                      v52 = v77;
                    }
                    if (!v59)
                      re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::remove(v83, v55);
                  }
                  re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::remove(v7, v55, v85);
                }
                ++v50;
              }
              while (v50 != v52);
              v47 = v85;
            }
            re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::remove(v84, v47);
          }
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v72, (uint64_t *)&v85);
          v46 = v86;
        }
        v68 = *(_QWORD *)(v46 + 328);
        if (v68)
        {
          v69 = *(uint64_t **)(v46 + 344);
          v70 = 8 * v68;
          do
          {
            v71 = *v69++;
            *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v87) = v71;
            v70 -= 8;
          }
          while (v70);
        }
        v4 = v91;
        v7 = v80;
      }
      while (v91);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v87);
    if (v87[0])
    {
      if ((v88 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v87[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v93);
  }
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 224 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 224 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 224 * v3 + 16) == a2)
        return v5 + 224 * v3 + 32;
    }
    return 0;
  }
  return v5 + 224 * v3 + 32;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;

  if (*(_QWORD *)result)
  {
    v2 = result;
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(result + 24);
    v5 = *(_QWORD *)(result + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v7 + 224 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 224 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        v10 = *(_QWORD *)(result + 16);
        v11 = v10 + 224 * v6;
        v14 = *(_DWORD *)(v11 + 8);
        v13 = (int *)(v11 + 8);
        v12 = v14;
        if (v14 < 0)
        {
          *v13 = v12 & 0x7FFFFFFF;
          result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v10 + 224 * v6 + 176);
          v10 = *(_QWORD *)(v2 + 16);
          v12 = *(_DWORD *)(v10 + 224 * v6 + 8);
        }
        v15 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)(v10 + 224 * v6 + 8) = *(_DWORD *)(v2 + 36) | v12 & 0x80000000;
        --*(_DWORD *)(v2 + 28);
        *(_DWORD *)(v2 + 36) = v6;
        *(_DWORD *)(v2 + 40) = v15 + 1;
      }
      else
      {
        while (1)
        {
          v8 = v6;
          v9 = *(_DWORD *)(v7 + 224 * v6 + 8);
          v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 224 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 224 * v8 + 8) = *(_DWORD *)(v7 + 224 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 224 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t result;
  _DWORD *v6;

  v2 = a2;
  v4 = a2 >> 16;
  result = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    v6 = (_DWORD *)result;
    result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(result + 160);
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::removeAt(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(result + 8);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = v2 - 1;
  if (v2 - 1 > a2)
  {
    if ((*(_BYTE *)(result + 16) & 1) != 0)
      v4 = result + 24;
    else
      v4 = *(_QWORD *)(result + 32);
    *(_QWORD *)(v4 + 8 * a2) = *(_QWORD *)(v4 + 8 * v2 - 8);
    v3 = *(_QWORD *)(result + 8) - 1;
  }
  v5 = *(_DWORD *)(result + 16);
  *(_QWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 16) = v5 + 2;
  return result;
}

void re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::remove(__int128 *a1, unint64_t a2)
{
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x8_t v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    v4 = (int8x16_t *)(*(_QWORD *)a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v6)
      v7 = -1;
    else
      v7 = 0x80;
    v4->i8[v3 & 0xF] = v7;
    v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 96 * v3);
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) >> 27));
    *((_QWORD *)a1 + 5) ^= (v9 >> 31) ^ v9;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v8 + 1));
    if (v6)
      v10 = *((_QWORD *)a1 + 4) + 1;
    else
      v10 = *((_QWORD *)a1 + 4);
    v11 = *((_QWORD *)a1 + 2);
    v12 = *((_QWORD *)a1 + 3) - 1;
    *((_QWORD *)a1 + 3) = v12;
    *((_QWORD *)a1 + 4) = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2)
      re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::resize(a1, 0);
  }
}

uint64_t re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::remove(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  result = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(a1, a2, a3);
  if (result != -1)
  {
    v5 = (int8x16_t *)(*a1 + (result & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[result & 0xF] = v8;
    v9 = a1[2];
    v10 = (unint64_t *)(a1[1] + 24 * result);
    v11 = *v10;
    v12 = 0xBF58476D1CE4E5B9 * (v10[1] ^ (v10[1] >> 30));
    v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
    a1[5] ^= v13 ^ (v13 >> 31) ^ (((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v12 ^ (v12 >> 27))) >> 31))
                                + ((v13 ^ (v13 >> 31)) << 6)
                                + ((v13 ^ (v13 >> 31)) >> 2)
                                - 0x61C8864680B583E9);
    v14 = a1[4];
    if (v7)
      ++v14;
    v15 = a1[3] - 1;
    a1[3] = v15;
    a1[4] = v14;
    if (v9 >= 0x11 && v15 < v9 >> 2)
      return re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(a1, 0);
  }
  return result;
}

void re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::remove(__int128 *a1, unint64_t a2)
{
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x8_t v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    v4 = (int8x16_t *)(*(_QWORD *)a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v6)
      v7 = -1;
    else
      v7 = 0x80;
    v4->i8[v3 & 0xF] = v7;
    v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 96 * v3);
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) >> 27));
    *((_QWORD *)a1 + 5) ^= (v9 >> 31) ^ v9;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v8 + 1));
    if (v6)
      v10 = *((_QWORD *)a1 + 4) + 1;
    else
      v10 = *((_QWORD *)a1 + 4);
    v11 = *((_QWORD *)a1 + 2);
    v12 = *((_QWORD *)a1 + 3) - 1;
    *((_QWORD *)a1 + 3) = v12;
    *((_QWORD *)a1 + 4) = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2)
      re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(a1, 0);
  }
}

BOOL re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 224 * v3 + 16) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 224 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 224 * v3 + 16) != a2);
  return result;
}

__n128 re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::add(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::setBucketsCapacity((_QWORD *)a1, (v4 + 32) >> 5);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v8 = v7 + 112 * (v4 & 0x1F);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(v8 + 24, (uint64_t)a2 + 24);
  result = (__n128)a2[4];
  v11 = a2[5];
  *(_QWORD *)(v8 + 96) = *((_QWORD *)a2 + 12);
  *(__n128 *)(v8 + 64) = result;
  *(_OWORD *)(v8 + 80) = v11;
  return result;
}

_QWORD *re::DynamicOverflowArray<unsigned short,8ul>::add(_QWORD *result, _WORD *a2)
{
  _DWORD *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;

  v3 = result;
  if (*result)
  {
    v4 = result[1];
    v5 = *((_DWORD *)result + 4);
    if ((v5 & 1) != 0)
      v6 = 8;
    else
      v6 = result[3];
    if (v4 >= v6)
    {
      result = re::DynamicOverflowArray<unsigned short,8ul>::growCapacity((_anonymous_namespace_ *)result, v4 + 1);
      v5 = v3[4];
    }
  }
  else
  {
    v7 = *((_QWORD *)v3 + 1) + 1;
    result = re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, v7);
    v5 = v3[4] + 2;
    v3[4] = v5;
  }
  if ((v5 & 1) != 0)
    v8 = (char *)(v3 + 6);
  else
    v8 = (char *)*((_QWORD *)v3 + 4);
  v9 = *((_QWORD *)v3 + 1);
  *(_WORD *)&v8[2 * v9] = *a2;
  *((_QWORD *)v3 + 1) = v9 + 1;
  v3[4] += 2;
  return result;
}

uint64_t re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = *a2;
  v5 = a2[1];
  v6 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
  v9 = ((v8 ^ (v8 >> 31)) + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
  v10 = *(unsigned int *)(result + 24);
  if (!(_DWORD)v10)
  {
    LODWORD(v11) = 0;
    goto LABEL_15;
  }
  v11 = v9 % v10;
  v12 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * (v9 % v10));
  if ((_DWORD)v12 == 0x7FFFFFFF)
  {
LABEL_15:
    result = re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::addAsMove(result, v11, v9, a2);
    ++*(_DWORD *)(v3 + 40);
    return result;
  }
  v13 = *(_QWORD *)(result + 16);
  v14 = v13 + 32 * v12;
  v16 = *(_QWORD *)(v14 + 16);
  v15 = *(_QWORD *)(v14 + 24);
  if (v16 != v4 || v15 != v5)
  {
    while (1)
    {
      v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v12 == 0x7FFFFFFF)
        break;
      v18 = v13 + 32 * v12;
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 == v4 && v19 == v5)
        return result;
    }
    goto LABEL_15;
  }
  return result;
}

int *re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::add(int *result, _QWORD *a2)
{
  int *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v3 = result;
  if (!*(_QWORD *)result)
  {
    v10 = *((_QWORD *)v3 + 1) + 1;
    result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, v10);
    v5 = v3[4] + 2;
    v3[4] = v5;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)result + 1);
  v5 = result[4];
  if ((v5 & 1) != 0)
  {
    if (v4 - 8 >= 0xFFFFFFFFFFFFFFF7)
      goto LABEL_15;
    v7 = v4 + 1;
    v9 = 16;
    goto LABEL_11;
  }
  v6 = *((_QWORD *)result + 3);
  v8 = v4 >= v6;
  v7 = v4 + 1;
  v8 = !v8 || v6 >= v7;
  if (!v8)
  {
    v9 = 2 * v6;
LABEL_11:
    if (v9 <= v7)
      v11 = v7;
    else
      v11 = v9;
    result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(result, v11);
    v5 = v3[4];
  }
LABEL_15:
  if ((v5 & 1) != 0)
    v12 = v3 + 6;
  else
    v12 = (_QWORD *)*((_QWORD *)v3 + 4);
  v12[(*((_QWORD *)v3 + 1))++] = *a2;
  v3[4] += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned short,8ul>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (v4 < a2)
  {
    if (*(_QWORD *)result)
    {
      if ((*((_DWORD *)result + 4) & 1) == 0)
      {
LABEL_4:
        v5 = *((_QWORD *)v3 + 3);
LABEL_9:
        if (v5 < a2)
          result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, a2);
        v7 = *((_QWORD *)v3 + 1);
        if (v7 < a2)
        {
          do
          {
            v8 = (_QWORD *)((char *)v3 + 24);
            if ((*((_BYTE *)v3 + 16) & 1) == 0)
              v8 = (_QWORD *)*((_QWORD *)v3 + 4);
            *((_WORD *)v8 + v7++) = 0;
          }
          while (a2 != v7);
        }
        goto LABEL_15;
      }
    }
    else
    {
      result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, a2);
      v6 = *((_DWORD *)v3 + 4) + 2;
      *((_DWORD *)v3 + 4) = v6;
      if ((v6 & 1) == 0)
        goto LABEL_4;
    }
    v5 = 8;
    goto LABEL_9;
  }
  if (v4 > a2)
  {
LABEL_15:
    *((_QWORD *)v3 + 1) = a2;
    *((_DWORD *)v3 + 4) += 2;
  }
  return result;
}

char *re::DynamicOverflowArray<unsigned short,8ul>::copy(char *result, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;

  if (!a4)
    return result;
  v6 = result;
  v7 = *((_QWORD *)result + 1);
  if (v7 + 1 <= a2)
  {
    v17 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v18) = 136315906;
    *(_QWORD *)((char *)&v18 + 4) = "copy";
    WORD6(v18) = 1024;
    HIWORD(v18) = 678;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 682, v7, a2, v4, v17, v18);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_21;
  if (v7 >= v8)
  {
    if ((result[16] & 1) != 0)
      v14 = result + 24;
    else
      v14 = (char *)*((_QWORD *)result + 4);
    result = (char *)memmove(&v14[2 * a2], __src, 2 * a4);
  }
  else
  {
    re::DynamicOverflowArray<unsigned short,8ul>::growCapacity((_anonymous_namespace_ *)result, a2 + a4);
    v10 = v6[1];
    v11 = v10 - a2;
    v12 = *((_DWORD *)v6 + 4);
    if ((v12 & 1) != 0)
      v13 = (char *)(v6 + 3);
    else
      v13 = (char *)v6[4];
    v15 = &__src[2 * v11];
    if (v10 != a2)
    {
      memmove(&v13[2 * a2], __src, 2 * v11);
      v12 = *((_DWORD *)v6 + 4);
    }
    if ((v12 & 1) != 0)
      v16 = (char *)(v6 + 3);
    else
      v16 = (char *)v6[4];
    result = (char *)memcpy(&v16[2 * v6[1]], v15, &__src[2 * v4] - v15);
    v6[1] = v8;
  }
  *((_DWORD *)v6 + 4) += 2;
  return result;
}

uint64_t re::ecs2::ClippingManager::updateClippingParameterData(uint64_t a1, re::RenderManager *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  _QWORD v32[2];
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[18];
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  unint64_t v41;
  _OWORD v42[5];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v9 = a1 + 8;
  v8 = *(_QWORD *)(a1 + 8);
  v10 = (_OWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = a3;
  *(_QWORD *)(a1 + 856) = a4;
  v11 = (_OWORD *)(a1 + 864);
  *(_QWORD *)(a1 + 864) = a5;
  *(_QWORD *)(a1 + 872) = a6;
  v12 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v12);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v9 + 200);
  *v11 = 0u;
  *v10 = 0u;
  v35 = 0;
  v32[1] = 0;
  v33 = 0;
  v34 = 0;
  v32[0] = re::RenderManager::perFrameAllocator(a2);
  re::DynamicArray<unsigned short>::setCapacity(v32, 0);
  ++v34;
  re::DynamicArray<unsigned short>::setCapacity(v32, *(_QWORD *)(v9 + 872));
  v13 = *(unsigned int *)(v9 + 88);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = (int *)(*(_QWORD *)(a1 + 80) + 8);
    while (1)
    {
      v16 = *v15;
      v15 += 56;
      if (v16 < 0)
        break;
      if (v13 == ++v14)
      {
        LODWORD(v14) = v13;
        break;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((_DWORD)v13 != (_DWORD)v14)
  {
    v17 = v14;
    do
    {
      re::ecs2::ClippingManager::updateClippingParameterDataInternal((re *)a1, *(_QWORD *)(a1 + 80) + 224 * v17 + 32, (_anonymous_namespace_ *)v32, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 224 * v17 + 16));
      v18 = *(_DWORD *)(a1 + 96);
      if (v18 <= (int)v14 + 1)
        v19 = v14 + 1;
      else
        v19 = *(_DWORD *)(a1 + 96);
      v20 = v14;
      while (1)
      {
        v17 = (v20 + 1);
        if (v19 - 1 == v20)
          break;
        ++v20;
        LODWORD(v14) = v17;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 80) + 224 * v17 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v14) = v19;
LABEL_17:
      ;
    }
    while (v18 != (_DWORD)v14);
  }
  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::DataArrayIterator<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData,re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData&>::DataArrayIterator((uint64_t)v42, a1 + 304);
  v21 = *(_QWORD *)&v42[0];
  v31 = v42[0];
  v22 = WORD4(v42[0]);
  if (a1 + 304 != *(_QWORD *)&v42[0] || WORD4(v42[0]) != 0xFFFFLL || (DWORD2(v42[0]) & 0xFFFF0000) != 0xFFFF0000)
  {
    v23 = WORD5(v42[0]);
    do
    {
      v24 = *(_QWORD *)(v21 + 16);
      if (v24 <= v23)
      {
        v36 = 0;
        memset(v42, 0, sizeof(v42));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v37 = 136315906;
        *(_QWORD *)&v37[4] = "operator[]";
        *(_WORD *)&v37[12] = 1024;
        *(_DWORD *)&v37[14] = 797;
        v38 = 2048;
        v39 = v23;
        v40 = 2048;
        v41 = v24;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 16 * v23) + 208 * v22;
      re::ecs2::ClippingManager::updateClippingParameterDataInternal((re *)a1, v25 + 16, (_anonymous_namespace_ *)v32, *(_QWORD *)(v25 + 8));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v31);
      v21 = v31;
      v22 = WORD4(v31);
      v23 = WORD5(v31);
    }
    while ((_QWORD)v31 != a1 + 304 || WORD4(v31) != 0xFFFFLL || WORD5(v31) != 0xFFFFLL);
  }
  *(_QWORD *)(a1 + 880) = v33;
  v28 = re::RenderFrameBox::get(*((_QWORD *)a2 + 13) + 344, 0xFFFFFFFFFFFFFFFuLL);
  *(_QWORD *)&v42[0] = re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries((_anonymous_namespace_ *)(a1 + 720), *(_QWORD *)(v28 + 376));
  *((_QWORD *)&v42[0] + 1) = v29;
  if (v29)
  {
    (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v28 + 320) + 80))(*(_QWORD *)(v28 + 320), v42);
    *(_QWORD *)v37 = v35;
    *(_QWORD *)&v37[8] = v33;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v28 + 320) + 112))(*(_QWORD *)(v28 + 320), v37);
  }
  result = v32[0];
  if (v32[0])
  {
    if (v35)
      return (*(uint64_t (**)(void))(*(_QWORD *)v32[0] + 40))();
  }
  return result;
}

void re::ecs2::ClippingManager::updateClippingParameterDataInternal(re *a1, uint64_t a2, _anonymous_namespace_ *this, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD buf[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  if (v4 == 0x4000)
  {
    do
      v6 = __ldaxr(re::ecs2::ClippingManager::updateClippingParameterDataInternal(re::ecs2::ClippingParameterData &,re::DynamicArray<unsigned short> &,re::ecs2::Entity const*)::__FILE____LINE___logged);
    while (__stlxr(1u, re::ecs2::ClippingManager::updateClippingParameterDataInternal(re::ecs2::ClippingParameterData &,re::DynamicArray<unsigned short> &,re::ecs2::Entity const*)::__FILE____LINE___logged));
    if ((v6 & 1) == 0)
    {
      v7 = *re::ecsComponentsLogObjects(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a4 + 280);
        LODWORD(buf[0]) = 134218242;
        *(_QWORD *)((char *)buf + 4) = 0x4000;
        WORD6(buf[0]) = 2080;
        *(_QWORD *)((char *)buf + 14) = v8;
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "Current frame has more than %zu unique clipping indices in the indirection buffer. Unable to add clipping indices for entity '%s'.", (uint8_t *)buf, 0x16u);
      }
    }
  }
  else
  {
    v11 = a2 + 168;
    if ((*(_BYTE *)(a2 + 160) & 1) != 0)
      v12 = (unsigned __int16 *)(a2 + 168);
    else
      v12 = *(unsigned __int16 **)(a2 + 176);
    v13 = *(_QWORD *)(a2 + 152);
    if (v13)
    {
      v14 = *((_QWORD *)a1 + 94);
      v15 = *((_QWORD *)a1 + 92);
      v16 = &v12[v13];
LABEL_11:
      v17 = v12;
      while (1)
      {
        v18 = *v17;
        if (v15 <= v18)
          goto LABEL_39;
        v19 = v14 + (v18 << 6);
        if (!(*(_DWORD *)(v19 + 56) | *(unsigned __int16 *)(v19 + 60))
          && !(*(_DWORD *)(v19 + 48) | *(unsigned __int16 *)(v19 + 52)))
        {
          break;
        }
        if (++v17 == v16)
        {
          LODWORD(v12) = (_DWORD)v16;
          goto LABEL_24;
        }
      }
      v20 = v16 - 1;
      while (v20 != v17)
      {
        v16 = v20;
        v21 = *v20;
        if (v15 <= v21)
          goto LABEL_40;
        v22 = v14 + (v21 << 6);
        if (!(*(_DWORD *)(v22 + 56) | *(unsigned __int16 *)(v22 + 60)))
        {
          v23 = *(_DWORD *)(v22 + 48);
          v24 = *(unsigned __int16 *)(v22 + 52);
          v20 = v16 - 1;
          if (!(v23 | v24))
            continue;
        }
        *v17 = v21;
        v12 = v17 + 1;
        *v16 = v18;
        if (v16 == v17 + 1)
        {
          LODWORD(v12) = (_DWORD)v17 + 2;
          goto LABEL_24;
        }
        goto LABEL_11;
      }
      LODWORD(v12) = (_DWORD)v17;
    }
LABEL_24:
    if ((*(_DWORD *)(a2 + 160) & 1) != 0)
      v25 = a2 + 168;
    else
      v25 = *(_DWORD *)(a2 + 176);
    *(_WORD *)(a2 + 188) = ((_DWORD)v12 - v25) >> 1;
    *(_WORD *)(a2 + 184) = v4;
    v26 = 0x4000 - v4;
    if (v13 < v26)
      LOWORD(v26) = v13;
    *(_WORD *)(a2 + 186) = v26;
    if ((_WORD)v26)
    {
      v27 = 0;
      v28 = 0;
      while (*(_QWORD *)(a2 + 152) > v28)
      {
        if ((*(_DWORD *)(a2 + 160) & 1) != 0)
          v29 = v11;
        else
          v29 = *(_QWORD *)(a2 + 176);
        re::DynamicArray<unsigned short>::add(this, (_WORD *)(v29 + v27));
        ++v28;
        v27 += 2;
        if (v28 >= *(unsigned __int16 *)(a2 + 186))
          return;
      }
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v15);
      _os_crash();
      __break(1u);
LABEL_40:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v21, v15);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::ecs2::ClippingManager::clippingParameters(re::ecs2::ClippingManager *this)
{
  return *((_QWORD *)this + 94);
}

re *re::ecs2::ClippingManager::registerScene(re::ecs2::ClippingManager *this, unint64_t a2)
{
  re::EventBus *v2;
  re *v3;
  re *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  re *v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  re *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  re *result;
  re::EventBus *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v50;
  _QWORD v51[2];
  int v52;
  uint64_t v53;
  re *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[24];
  uint64_t v58;
  re *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v50 = a2;
  v2 = *(re::EventBus **)(a2 + 288);
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  v3 = (re::ecs2::ClippingManager *)((char *)this + 8);
  v51[0] = 0;
  v51[1] = 0;
  v52 = 1;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v56 = 0;
  v4 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 16))(v3);
  if (v5)
  {
    v6 = (uint64_t *)v4;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      v58 = re::globalAllocators(v4)[2];
      v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 32, 0);
      *(_QWORD *)v9 = &off_24ED70E98;
      *((_QWORD *)v9 + 1) = v3;
      *((_QWORD *)v9 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      *((_QWORD *)v9 + 3) = 0;
      v59 = v9;
      v10 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v57, v8, 0);
      v12 = v11;
      v13 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
      *v13 = v10;
      v13[1] = v12;
      if (v59)
      {
        (**(void (***)(re *))v59)(v59);
        if (v59 != (re *)v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
      }
      re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v51, v8);
      v4 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v51, v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v14 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 24))(v3);
  if (v15)
  {
    v16 = (uint64_t *)v14;
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v51, v18);
      v14 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v51, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v58 = re::globalAllocators(v14)[2];
  v19 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 32, 0);
  *(_QWORD *)v19 = &off_24ED70FA0;
  *((_QWORD *)v19 + 1) = v3;
  *((_QWORD *)v19 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  *((_QWORD *)v19 + 3) = 0;
  v59 = v19;
  v20 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v57, 0, 0);
  v22 = v21;
  v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
  *v23 = v20;
  v23[1] = v22;
  v24 = v59;
  if (v59)
  {
    v24 = (re *)(**(uint64_t (***)(re *))v59)(v59);
    if (v59 != (re *)v57)
      v24 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
  }
  v58 = re::globalAllocators(v24)[2];
  v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 32, 0);
  *(_QWORD *)v25 = &off_24ED70FF8;
  *((_QWORD *)v25 + 1) = v3;
  *((_QWORD *)v25 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  *((_QWORD *)v25 + 3) = 0;
  v59 = v25;
  v26 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v57, 0, 0);
  v28 = v27;
  v29 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
  *v29 = v26;
  v29[1] = v28;
  v30 = v59;
  if (v59)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v59)(v59);
    if (v59 != (re *)v57)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
  }
  v58 = re::globalAllocators(v30)[2];
  v31 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 32, 0);
  *(_QWORD *)v31 = &off_24ED71050;
  *((_QWORD *)v31 + 1) = v3;
  *((_QWORD *)v31 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  *((_QWORD *)v31 + 3) = 0;
  v59 = v31;
  v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v57, 0, 0);
  v34 = v33;
  v35 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
  *v35 = v32;
  v35[1] = v34;
  if (v59)
  {
    (**(void (***)(re *))v59)(v59);
    if (v59 != (re *)v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
  }
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v50, (uint64_t)v51);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v50);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v51);
  result = (re *)v51[0];
  if (v51[0] && (v52 & 1) == 0)
    result = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v51[0] + 40))();
  v37 = *(re::EventBus **)(a2 + 288);
  if (v37)
  {
    LODWORD(v38) = 0x7FFFFFFF;
    if (*((_QWORD *)this + 20))
    {
      v39 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v40 = *(unsigned int *)(*((_QWORD *)this + 21) + 4 * ((v39 ^ (v39 >> 31)) % *((unsigned int *)this + 46)));
      if ((_DWORD)v40 != 0x7FFFFFFF)
      {
        v41 = *((_QWORD *)this + 22);
        if (*(_QWORD *)(v41 + 80 * v40 + 16) == a2)
        {
          LODWORD(v38) = v40;
        }
        else
        {
          v38 = v40;
          while (1)
          {
            LODWORD(v38) = *(_DWORD *)(v41 + 80 * v38 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v38 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v41 + 80 * v38 + 16) == a2)
              goto LABEL_33;
          }
          LODWORD(v38) = 0x7FFFFFFF;
        }
      }
    }
LABEL_33:
    v42 = *((_QWORD *)this + 22) + 80 * v38 + 24;
    v53 = re::globalAllocators(result)[2];
    v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 32, 0);
    *(_QWORD *)v43 = &off_24ED70E00;
    *((_QWORD *)v43 + 1) = v3;
    *((_QWORD *)v43 + 2) = re::ecs2::ClippingParameterDataStateTracking::invalidateTransformEventHandler<REBillboardTransformChangedEvent>;
    *((_QWORD *)v43 + 3) = 0;
    v54 = v43;
    v44 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(v37, (uint64_t)v51, 0, 0);
    v46 = v45;
    v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v42);
    *v47 = v44;
    v47[1] = v46;
    result = v54;
    if (v54)
    {
      result = (re *)(**(uint64_t (***)(re *))v54)(v54);
      if (v54 != (re *)v51)
        return (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
    }
  }
  return result;
}

uint64_t re::ecs2::ClippingManager::unregisterScene(re::ecs2::ClippingManager *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  re::ecs2::Scene *v14;

  v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  v3 = *((_QWORD *)v14 + 13);
  v4 = *(_QWORD *)(v3 + 328);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 344);
    v6 = 8 * v4;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v5 + 288) & 1) != 0)
        (*(void (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8);
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = (char *)this + 160;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    v9 = *((_QWORD *)v14 + 36);
    if (v9)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 40);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

void re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking(re::ecs2::ClippingParameterDataStateTracking *this)
{
  re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking(this);
  JUMPOUT(0x2276933B8);
}

{
  unint64_t v1;
  re::ecs2::ClippingParameterDataStateTracking *v2;
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v2 = this;
  v32 = *MEMORY[0x24BDAC8D0];
  re::ecs2::ClippingParametersRegistry::~ClippingParametersRegistry((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 712));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 83);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 77);
  v3.n128_f64[0] = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v2 + 552);
  v4 = *((_QWORD *)v2 + 68);
  if (v4)
  {
    if (*((_QWORD *)v2 + 62))
      *((_QWORD *)v2 + 62) = 0;
    if (*((_QWORD *)v2 + 61))
    {
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v4 + 40))(v4, v3);
      *((_QWORD *)v2 + 61) = 0;
    }
    *(_OWORD *)((char *)v2 + 520) = 0u;
    *(_OWORD *)((char *)v2 + 536) = 0u;
    *(_OWORD *)((char *)v2 + 504) = 0u;
  }
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)v2 + 424);
  v5.n128_f64[0] = re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)v2 + 360);
  v6 = (_QWORD *)((char *)v2 + 296);
  if (!*((_DWORD *)v2 + 85))
  {
LABEL_25:
    if (*v6)
    {
      if (*((_QWORD *)v2 + 41))
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)*v6 + 40))(*v6, v5);
      *((_QWORD *)v2 + 41) = 0;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      ++*((_DWORD *)v2 + 80);
    }
    goto LABEL_35;
  }
  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::DataArrayIterator<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData,re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData&>::DataArrayIterator((uint64_t)&v27, (uint64_t)v2 + 296);
  v7 = v27;
  v17 = v27;
  v8 = WORD4(v27);
  if (v6 != (_QWORD *)v27 || WORD4(v27) != 0xFFFFLL || (DWORD2(v27) & 0xFFFF0000) != 0xFFFF0000)
  {
    v9 = WORD5(v27);
    while (1)
    {
      v10 = *(_QWORD *)(v7 + 16);
      if (v10 <= v9)
        break;
      re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy((uint64_t)v2 + 296, ((unint64_t)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 16 * v9 + 8) + 4 * v8) & 0xFFFFFF) << 32) | (v9 << 16) | v8);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v17);
      v7 = v17;
      v8 = WORD4(v17);
      v9 = WORD5(v17);
      if ((_QWORD *)v17 == v6 && WORD4(v17) == 0xFFFFLL && WORD5(v17) == 0xFFFFLL)
        goto LABEL_16;
    }
LABEL_46:
    v18 = 0;
    v31 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v19 = 136315906;
    v20 = "operator[]";
    v21 = 1024;
    v22 = 797;
    v23 = 2048;
    v24 = v9;
    v25 = 2048;
    v26 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_16:
  v11 = *((_QWORD *)v2 + 39);
  v9 = v11 - 1;
  if (v11 == 1)
  {
    *((_QWORD *)v2 + 43) = 0xFFFFFFFF00000000;
    goto LABEL_30;
  }
  v10 = 16 * v11 - 16;
  do
  {
    if (v11 <= v9)
    {
      *(_QWORD *)&v17 = 0;
      v31 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v19 = 136315906;
      v20 = "operator[]";
      v21 = 1024;
      v22 = 789;
      v23 = 2048;
      v24 = v9;
      v25 = 2048;
      v26 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      *(_QWORD *)&v17 = 0;
      v31 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v19 = 136315906;
      v20 = "removeAt";
      v21 = 1024;
      v22 = 931;
      v23 = 2048;
      v24 = v9;
      v25 = 2048;
      v26 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_46;
    }
    v12 = (_QWORD *)(*((_QWORD *)v2 + 41) + v10);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 37) + 40))(*((_QWORD *)v2 + 37), *v12);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 37) + 40))(*((_QWORD *)v2 + 37), v12[1]);
    v1 = *((_QWORD *)v2 + 39);
    if (v1 <= v9)
      goto LABEL_45;
    v11 = v1 - 1;
    if (v1 - 1 > v9)
    {
      *(_OWORD *)(*((_QWORD *)v2 + 41) + v10) = *(_OWORD *)(*((_QWORD *)v2 + 41) + 16 * v1 - 16);
      v11 = *((_QWORD *)v2 + 39) - 1;
    }
    *((_QWORD *)v2 + 39) = v11;
    ++*((_DWORD *)v2 + 80);
    v10 -= 16;
    --v9;
  }
  while (v9);
  *((_QWORD *)v2 + 43) = 0xFFFFFFFF00000000;
  if (!v11)
  {
    *(_QWORD *)&v17 = 0;
    v31 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v2 = (re::ecs2::ClippingParameterDataStateTracking *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v19 = 136315906;
    v20 = "operator[]";
    v21 = 1024;
    v22 = 789;
    v23 = 2048;
    v24 = 0;
    v25 = 2048;
    v26 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
LABEL_30:
  v13 = (_QWORD *)*((_QWORD *)v2 + 41);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 37) + 40))(*((_QWORD *)v2 + 37), *v13);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 37) + 40))(*((_QWORD *)v2 + 37), v13[1]);
  v14 = *((_QWORD *)v2 + 37);
  if (v14)
  {
    if (*((_QWORD *)v2 + 41))
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    *((_QWORD *)v2 + 41) = 0;
    *((_QWORD *)v2 + 38) = 0;
    *((_QWORD *)v2 + 39) = 0;
    *v6 = 0;
    ++*((_DWORD *)v2 + 80);
  }
  *((_DWORD *)v2 + 85) = 0;
LABEL_35:
  v15 = *((_QWORD *)v2 + 34);
  if (v15)
  {
    if (*((_QWORD *)v2 + 35))
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v15 + 40))(v15, *((_QWORD *)v2 + 36), v5);
      *((_QWORD *)v2 + 35) = 0;
      *((_QWORD *)v2 + 36) = 0;
    }
    *((_QWORD *)v2 + 34) = 0;
  }
  v16 = *((_QWORD *)v2 + 31);
  if (v16)
  {
    if (*((_QWORD *)v2 + 32))
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v16 + 40))(v16, *((_QWORD *)v2 + 33), v5);
      *((_QWORD *)v2 + 32) = 0;
      *((_QWORD *)v2 + 33) = 0;
    }
    *((_QWORD *)v2 + 31) = 0;
  }
  *(_QWORD *)v2 = off_24ED70E58;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v2 + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 13);
  re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v2 + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 1);
}

uint64_t re::ecs2::ClippingParameterDataStateTracking::trackedComponents(re::ecs2::ClippingParameterDataStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t re::ecs2::ClippingParameterDataStateTracking::trackedActivationComponents(re::ecs2::ClippingParameterDataStateTracking *this)
{
  return *((_QWORD *)this + 36);
}

void re::ecs2::ClippingManager::~ClippingManager(re::ecs2::ClippingManager *this)
{
  re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking((re::ecs2::ClippingManager *)((char *)this + 8));
}

{
  re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking((re::ecs2::ClippingManager *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ClippingManager::clippingDataPerEntity(re::ecs2::ClippingManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::ClippingManager::clippingDataForPortalCrossingPair(re::ecs2::ClippingManager *this, const re::ecs2::Entity *a2, const re::ecs2::PortalComponent *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find((uint64_t *)this + 62, (unint64_t)a2, (unint64_t)a3);
  if (v4 == -1)
    return 0;
  v5 = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet((uint64_t)this + 304, *(_QWORD *)(*((_QWORD *)this + 63) + 24 * v4 + 16));
  if (v5)
    return v5 + 16;
  else
    return 0;
}

void re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70E00;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70E00;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::size()
{
  return 32;
}

void re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    *(_DWORD *)(a1 + 16) = 3;
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v6;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFFE | *(_DWORD *)(a1 + 16) & 1;
    *(_DWORD *)(a1 + 16) &= ~1u;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v7;
LABEL_18:
    v14 = 2;
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    goto LABEL_18;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  re::DynamicOverflowArray<unsigned short,8ul>::setCapacity((_QWORD *)a1, v8);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v9 = (const void *)(a2 + 24);
  else
    v9 = *(const void **)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = v4;
  if ((v11 & 1) == 0)
    v12 = *(void **)(a1 + 32);
  if (v10)
  {
    memmove(v12, v9, 2 * v10);
    v11 = *(_DWORD *)(a1 + 16);
  }
  if ((v11 & 1) == 0)
    v4 = *(char **)(a1 + 32);
  if ((*(_DWORD *)(a2 + 16) & 1) != 0)
    v13 = a2 + 24;
  else
    v13 = *(_QWORD *)(a2 + 32);
  memcpy(&v4[2 * *(_QWORD *)(a1 + 8)], (const void *)(v13 + 2 * *(_QWORD *)(a1 + 8)), 2 * v8 - 2 * *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = 4;
LABEL_19:
  *(_DWORD *)(a2 + 16) = ((*(_DWORD *)(a2 + 16) & 0xFFFFFFFE) + v14) | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(a1 + 16) += 2;
  return a1;
}

_QWORD *re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 8;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 2 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if ((a2 & 0x8000000000000000) != 0)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 2, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 2 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 2 * a2, 2);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 2 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

double re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 96 * v3;
        v5 = v2 + 8;
        do
        {
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v5);
          v5 += 96;
          v4 -= 96;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::trackedActivationComponents()
{
  return 0;
}

void re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[120];

  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 1;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v16 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = a2;
    v4 = v15;
    if (v15)
    {
      v5 = a1 + 56;
      do
      {
        v6 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v5, v6);
        v7 = *(_QWORD *)(v6 + 328);
        if (v7)
        {
          v8 = *(uint64_t **)(v6 + 344);
          v9 = 8 * v7;
          do
          {
            v10 = *v8++;
            *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = v10;
            v9 -= 8;
          }
          while (v9);
        }
        v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

double re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 + 176);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 224;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_anonymous_namespace_ *re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 208 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED70EF0;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED70F48;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70E98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70E98;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70EF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70EF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70F48;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70F48;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70FA0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70FA0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (!*(_BYTE *)(a2 + 371))
  {
    v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED70FF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED70FF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED71050;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED71050;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  int8x16_t v26;
  int8x16_t v27;

  if (!a1[7])
    return -1;
  v4 = a1[2];
  if (v4 < 0x10 || !a1[3])
    return -1;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  v9 = ((v8 ^ (v8 >> 31)) + ((v7 ^ (v7 >> 31)) << 6) + ((v7 ^ (v7 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v7 ^ (v7 >> 31);
  v10 = v4 >> 4;
  v11 = v9 % (v4 >> 4);
  v12 = *a1;
  v13 = vdupq_n_s8(v9 & 0x7F);
  v14 = (int8x16_t)xmmword_2260EE390;
  v15.i64[0] = -1;
  for (v15.i64[1] = -1; ; v15.i64[1] = -1)
  {
    v16 = *(int8x16_t *)(v12 + 16 * v11);
    v17 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v16), v14)))), (int8x8_t)0x3830282018100800);
    v18 = __clz(__rbit64(v17));
    if (v18 <= 0x3F)
      break;
LABEL_13:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v16, v15), v14)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    v26 = v14;
    v27 = v13;
    if (++v11 == v10)
      v11 = 0;
    v25 = re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>::operator()(a2, a3) % v10;
    result = -1;
    v14 = v26;
    v13 = v27;
    v15.i64[0] = -1;
    if (v11 == v25)
      return result;
  }
  v19 = 16 * v11;
  while (1)
  {
    result = v18 + v19;
    v21 = (uint64_t *)(a1[1] + 24 * (v18 + v19));
    v23 = *v21;
    v22 = v21[1];
    if (v23 == a2 && v22 == a3)
      return result;
    if (v18 <= 0x3E)
    {
      v18 = __clz(__rbit64((-2 << v18) & v17));
      if (v18 < 0x40)
        continue;
    }
    goto LABEL_13;
  }
}

uint64_t re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>::operator()(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  return ((v3 ^ (v3 >> 31)) + ((v2 ^ (v2 >> 31)) << 6) + ((v2 ^ (v2 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v2 ^ (v2 >> 31);
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(__int128 *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3) + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = *((_QWORD *)a1 + 7);
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v27, v8, v9);
  v10 = *((_QWORD *)a1 + 2);
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *((_QWORD *)a1 + 1) + 56 * v15, *((_QWORD *)a1 + 1) + 56 * v15 + 8);
      v22 = v15 >> 4;
      v10 = *((_QWORD *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4)
        break;
      v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        v24 = 16 * v22;
        v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v24 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  v16 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = *((_QWORD *)a1 + 7);
  v17 = v27;
  v18 = *(_OWORD *)v28;
  v27 = *a1;
  *(_QWORD *)v28 = v10;
  v19 = *(_OWORD *)&v28[16];
  v20 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v28[32];
  *((_QWORD *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  v21 = *(__int128 *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

_QWORD *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  _QWORD *result;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((__int128 *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v18 = *(_QWORD *)a3;
  v19 = *(_QWORD *)(a3 + 8);
  v36 = *a2;
  v17 = v36;
  v37 = v18;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v20 = *(_QWORD *)(a3 + 16);
  v38 = v19;
  v39 = v20;
  *(_QWORD *)(a3 + 16) = 0;
  v22 = *(_DWORD *)(a3 + 24);
  v21 = *(_DWORD *)(a3 + 28);
  v40 = v22;
  v41 = v21;
  v24 = *(_DWORD *)(a3 + 32);
  v23 = *(_DWORD *)(a3 + 36);
  v42 = v24;
  v43 = v23;
  v44 = 0;
  *(_OWORD *)(a3 + 24) = xmmword_2260F5A80;
  v25 = (uint64_t *)(*((_QWORD *)a1 + 1) + 56 * v16);
  v28 = v25 == &v36;
  *v25 = v17;
  v26 = (uint64_t)(v25 + 1);
  if (!v28)
  {
    v27 = *(_QWORD *)v26;
    if (*(_QWORD *)v26)
      v28 = v27 == v18;
    else
      v28 = 1;
    if (v28)
    {
      *(_QWORD *)v26 = v18;
      v37 = v27;
      v29 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)(v26 + 8) = v19;
      v38 = v29;
      v30 = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v26 + 16) = v20;
      v39 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 24);
      *(_DWORD *)(v26 + 24) = v22;
      v40 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 28);
      *(_DWORD *)(v26 + 28) = v21;
      v41 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 32);
      *(_DWORD *)(v26 + 32) = v24;
      v42 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 36);
      *(_DWORD *)(v26 + 36) = v23;
      v43 = v30;
    }
    else if (v18)
    {
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::copy(v26, (uint64_t)&v37);
      ++*(_DWORD *)(v26 + 40);
    }
    else
    {
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v26);
    }
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&v37);
  v31 = *((_QWORD *)a1 + 4) - (v15 == 255);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v31;
  v32 = (unint64_t *)(*((_QWORD *)a1 + 1) + 56 * v16);
  v34 = *v32;
  result = v32 + 1;
  v35 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v35 >> 31) ^ v35;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v5 = v4 ^ (v4 >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*(_QWORD *)(a1[1] + 96 * (v12 + v13)) == a2)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

void re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::resize(__int128 *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3) + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = *((_QWORD *)a1 + 7);
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v28[16], 0, 32);
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::init(&v27, v8, v9);
  v10 = *((_QWORD *)a1 + 2);
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::internalAdd(&v27, *((_QWORD *)a1 + 1) + 96 * v15, *((_QWORD *)a1 + 1) + 96 * v15 + 8);
      v22 = v15 >> 4;
      v10 = *((_QWORD *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4)
        break;
      v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        v24 = 16 * v22;
        v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v24 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  v16 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = *((_QWORD *)a1 + 7);
  v17 = v27;
  v18 = *(_OWORD *)v28;
  v27 = *a1;
  *(_QWORD *)v28 = v10;
  v19 = *(_OWORD *)&v28[16];
  v20 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v28[32];
  *((_QWORD *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  v21 = *(__int128 *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)&v27);
}

_QWORD *re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  _QWORD *result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::resize((__int128 *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v23 = *a2;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::DynamicOverflowArray((uint64_t)v24, a3);
  v17 = (_QWORD *)(*((_QWORD *)a1 + 1) + 96 * v16);
  *v17 = v23;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::operator=((uint64_t)(v17 + 1), (uint64_t)v24);
  if (v24[0] && (v25 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v24[0] + 40))();
  v18 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18 - (v15 == 255);
  v19 = (unint64_t *)(*((_QWORD *)a1 + 1) + 96 * v16);
  v21 = *v19;
  result = v19 + 1;
  v22 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

_QWORD *re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 97 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v3[1] + v9;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 1;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        ++v10;
        v12 = v3[2];
        v9 += 96;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

uint64_t re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::move(a1, a2);
    }
    else
    {
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 16) += 2;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
  }
  return a1;
}

void *re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::move(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  void *result;
  const void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((_QWORD *)a1, v4);
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v7 = (const void *)(a2 + 24);
    else
      v7 = *(const void **)(a2 + 32);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if ((v9 & 1) != 0)
          v11 = a1 + 24;
        else
          v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = (void *)(v11 + 8 * v12);
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v14 = a2 + 24;
        else
          v14 = *(_QWORD *)(a2 + 32);
        result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      if (!v8)
        goto LABEL_18;
    }
    memmove(v10, v7, 8 * v8);
    v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = (const void *)(a2 + 24);
  else
    v5 = *(const void **)(a2 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    result = *(void **)(a1 + 32);
    if (!v4)
      goto LABEL_25;
    goto LABEL_15;
  }
  result = (void *)(a1 + 24);
  if (v4)
LABEL_15:
    result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) += 4;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

uint64_t re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)a2 && *(_QWORD *)a1 != *(_QWORD *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

uint64_t re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  __int128 v52;
  _BYTE v53[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v53[16], 0, 32);
  v10 = (_anonymous_namespace_ *)re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::init(&v52, v8, v9);
  v11 = a1[2];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = v11 >> 4;
    v14 = (int8x16_t)xmmword_2260EE390;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v13)
        goto LABEL_12;
    }
    v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      v27 = a1[1];
      if (!*(_QWORD *)&v53[40])
      {
        v51 = v14;
        v14 = v51;
      }
      if (!*(_QWORD *)&v53[16]
        || (v28 = *(_QWORD *)v53, *(_QWORD *)v53 > (unint64_t)(8 * *(_QWORD *)&v53[16])))
      {
        v50 = v14;
        v10 = (_anonymous_namespace_ *)re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(&v52, 1);
        v14 = v50;
        v28 = *(_QWORD *)v53;
      }
      v29 = (_QWORD *)(v27 + 24 * v17);
      v30 = 0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30));
      v31 = (0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31);
      v32 = 0xBF58476D1CE4E5B9 * (v29[1] ^ (v29[1] >> 30));
      v33 = (((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) ^ ((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v31 << 6)
           + (v31 >> 2)) ^ v31;
      v34 = v28 >> 4;
      v35 = v33 % (v28 >> 4);
      v36 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v52 + 16 * v35)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v36 >= 0x40)
      {
        do
        {
          if (v35 + 1 == v34)
            v35 = 0;
          else
            ++v35;
          v36 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v52 + 16 * v35)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v36 > 0x3F);
      }
      v37 = v52 + 16 * v35;
      v38 = *(unsigned __int8 *)(v37 + v36);
      *(_BYTE *)(v37 + v36) = v33 & 0x7F;
      v39 = v29[2];
      v40 = *(_OWORD *)v29;
      v41 = *(_QWORD *)&v53[8];
      v42 = *((_QWORD *)&v52 + 1) + 24 * (v36 + 16 * v35);
      *(_OWORD *)v42 = v40;
      *(_QWORD *)(v42 + 16) = v39;
      *(_QWORD *)&v53[8] = v41 + 1;
      *(_QWORD *)&v53[16] -= v38 == 255;
      v43 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v42 ^ (*(_QWORD *)v42 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                  * (*(_QWORD *)v42 ^ (*(_QWORD *)v42 >> 30))) >> 27));
      v44 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v42 + 8) ^ (*(_QWORD *)(v42 + 8) >> 30));
      *(_QWORD *)&v53[24] ^= v43 ^ (v43 >> 31) ^ (((0x94D049BB133111EBLL * (v44 ^ (v44 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                                  * (v44 ^ (v44 >> 27))) >> 31))
                                                - 0x61C8864680B583E9
                                                + ((v43 ^ (v43 >> 31)) << 6)
                                                + ((v43 ^ (v43 >> 31)) >> 2));
      v45 = v17 >> 4;
      v11 = a1[2];
      if (v17 >> 4 >= v11 >> 4)
        break;
      v46 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v46 >= 0x40)
      {
        v47 = 16 * v45;
        v48 = ~v45 + (v11 >> 4);
        while (v48)
        {
          v16 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v47 + 16)), v14)))), (int8x8_t)0x3830282018100800);
          v49 = __clz(__rbit64(v16));
          v47 += 16;
          --v48;
          if (v49 <= 0x3F)
          {
            v17 = v49 + v47;
            goto LABEL_30;
          }
        }
        break;
      }
      v17 = v46 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_30:
      ;
    }
  }
LABEL_12:
  v19 = *(_QWORD *)&v53[40];
  *(_QWORD *)&v53[40] = a1[7];
  result = *(_QWORD *)&v53[40];
  v20 = v52;
  v21 = *(_OWORD *)v53;
  *(_QWORD *)v53 = v11;
  v22 = *a1;
  v23 = a1[1];
  *(_QWORD *)&v52 = *a1;
  *((_QWORD *)&v52 + 1) = v23;
  v24 = *(_OWORD *)&v53[16];
  v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v53[32];
  a1[7] = v19;
  *(_OWORD *)&v53[24] = v25;
  v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v53[8] = v26;
  if (result)
  {
    if (v23)
      *((_QWORD *)&v52 + 1) = 0;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 25 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (_QWORD *)(v3[1] + v9);
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0xFFFFFFFFLL;
        ++v10;
        v12 = v3[2];
        v9 += 24;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

void re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(__int128 *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3) + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = *((_QWORD *)a1 + 7);
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v28[16], 0, 32);
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::init(&v27, v8, v9);
  v10 = *((_QWORD *)a1 + 2);
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(&v27, *((_QWORD *)a1 + 1) + 96 * v15, *((_QWORD *)a1 + 1) + 96 * v15 + 8);
      v22 = v15 >> 4;
      v10 = *((_QWORD *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4)
        break;
      v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        v24 = 16 * v22;
        v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v24 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  v16 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = *((_QWORD *)a1 + 7);
  v17 = v27;
  v18 = *(_OWORD *)v28;
  v27 = *a1;
  *(_QWORD *)v28 = v10;
  v19 = *(_OWORD *)&v28[16];
  v20 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v28[32];
  *((_QWORD *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  v21 = *(__int128 *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)&v27);
}

_QWORD *re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  _QWORD *result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize((__int128 *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v23 = *a2;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::DynamicOverflowArray((uint64_t)v24, a3);
  v17 = (_QWORD *)(*((_QWORD *)a1 + 1) + 96 * v16);
  *v17 = v23;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::operator=((uint64_t)(v17 + 1), (uint64_t)v24);
  if (v24[0] && (v25 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v24[0] + 40))();
  v18 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18 - (v15 == 255);
  v19 = (unint64_t *)(*((_QWORD *)a1 + 1) + 96 * v16);
  v21 = *v19;
  result = v19 + 1;
  v22 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

void *re::DynamicOverflowArray<unsigned short,8ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  void *result;
  const void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicOverflowArray<unsigned short,8ul>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 8));
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v7 = (const void *)(a2 + 24);
    else
      v7 = *(const void **)(a2 + 32);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if ((v9 & 1) != 0)
          v11 = a1 + 24;
        else
          v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = (void *)(v11 + 2 * v12);
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v14 = a2 + 24;
        else
          v14 = *(_QWORD *)(a2 + 32);
        result = memcpy(v13, (const void *)(v14 + 2 * v12), 2 * v4 - 2 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      if (!v8)
        goto LABEL_18;
    }
    memmove(v10, v7, 2 * v8);
    v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = (const void *)(a2 + 24);
  else
    v5 = *(const void **)(a2 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    result = *(void **)(a1 + 32);
    if (!v4)
      goto LABEL_25;
    goto LABEL_15;
  }
  result = (void *)(a1 + 24);
  if (v4)
LABEL_15:
    result = memmove(result, v5, 2 * v4);
LABEL_25:
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 3584, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 112 * (a2 & 0x1F);
}

uint64_t re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[1];
    *(_QWORD *)a1 = v3;
    re::DynamicOverflowArray<unsigned short,8ul>::setCapacity((_QWORD *)a1, v5);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<unsigned short,8ul>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DebugSettingsManager::getWithErrorCode<float>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (!*(_BYTE *)(a1 + 112))
    return 3;
  if (!a3)
    return 4;
  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = re::DebugSettingsManager::contains<float>(a1, a2);
  if (!(_DWORD)v7)
  {
    v8 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a1)
    {
      v9 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if ((_DWORD)v10 != 0x7FFFFFFF)
      {
        v11 = *(_QWORD *)(a1 + 16);
        v8 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((_QWORD *)(v11 + 40 * v10 + 8), a2))
        {
          v10 = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        v8 = v10;
      }
    }
LABEL_13:
    v12 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v12 + 40 * v8 + 24))
    {
      v13 = v12 + 40 * v8;
      v14 = *(_DWORD *)(v13 + 32);
      if (v14 == 1)
        *a3 = *(_DWORD *)(v13 + 28);
      v7 = v14 != 1;
    }
    else
    {
      v7 = 5;
    }
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::DebugSettingsManager::contains<float>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 112))
    return 3;
  v2 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1, a2);
  if (!v2)
    return 1;
  if (*(_BYTE *)v2 && *(_DWORD *)(v2 + 8) != 1)
    return 2;
  return 0;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned short,8ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    if (a2 <= 8)
      return result;
    v5 = 16;
  }
  else
  {
    v4 = *((_QWORD *)result + 3);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(result, a2);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  _BYTE v35[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(_QWORD *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v35, v14, v13);
          v16 = *(_OWORD *)v35;
          *(_OWORD *)v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v35[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v35[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              v22 += 224;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v35);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 224 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 224 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 224 * v10 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v10 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 224 * v10;
  *(_OWORD *)(v26 + 32) = *(_OWORD *)a5;
  v27 = *(_OWORD *)(a5 + 16);
  v28 = *(_OWORD *)(a5 + 32);
  v29 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v26 + 80) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v26 + 96) = v29;
  *(_OWORD *)(v26 + 48) = v27;
  *(_OWORD *)(v26 + 64) = v28;
  v30 = *(_OWORD *)(a5 + 80);
  v31 = *(_OWORD *)(a5 + 96);
  v32 = *(_OWORD *)(a5 + 128);
  *(_OWORD *)(v26 + 144) = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(v26 + 160) = v32;
  *(_OWORD *)(v26 + 112) = v30;
  *(_OWORD *)(v26 + 128) = v31;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(v26 + 176, a5 + 144);
  v33 = *(_DWORD *)(a5 + 184);
  *(_DWORD *)(v26 + 219) = *(_DWORD *)(a5 + 187);
  *(_DWORD *)(v26 + 216) = v33;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  signed int v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v24[44];

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      v9 = *(_DWORD *)(a1 + 28);
      v10 = 2 * v9;
      v11 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v10)
          v12 = (_DWORD)v7 == v10;
        else
          v12 = 1;
        if (!v12 && (v9 & 0x80000000) == 0)
        {
          memset(v24, 0, 36);
          *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::init((uint64_t)v24, v11, v10);
          v13 = *(_OWORD *)v24;
          *(_OWORD *)v24 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v13;
          v14 = *(_QWORD *)&v24[16];
          v15 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v24[16] = v15;
          *(_QWORD *)(a1 + 16) = v14;
          v17 = *(_OWORD *)&v24[24];
          *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
          v16 = *(_DWORD *)&v24[32];
          *(_OWORD *)(a1 + 24) = v17;
          v18 = v16;
          if (v16)
          {
            v19 = v15 + 16;
            do
            {
              if ((*(_DWORD *)(v19 - 8) & 0x80000000) != 0)
                re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::addAsMove(a1, *(_QWORD *)(v19 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v19 - 16), v19);
              v19 += 32;
              --v18;
            }
            while (v18);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
        }
      }
      else
      {
        if (v10)
          v22 = v10;
        else
          v22 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_DWORD *)(v20 + 32 * v7 + 8);
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_DWORD *)(v20 + 32 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v20 + 32 * v7 + 8) = v21 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v7) = a3;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 32 * v7 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

uint64_t re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::DataArrayIterator<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData,re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData&>::DataArrayIterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  if (*(_DWORD *)(a2 + 40))
  {
    *(_DWORD *)(a1 + 8) = 0;
    if (!*(_QWORD *)(a2 + 16))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (!**(_DWORD **)(*(_QWORD *)(a2 + 32) + 8))
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)a1);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderEntry>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;

  v3 = a3;
  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v3 += 24;
  result = re::DynamicString::setCapacity((_QWORD *)v3, 0);
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderEntry>(int a1, int a2, re::AssetHandle *this)
{
  uint64_t v4;
  _OWORD *v5;

  v5 = (_OWORD *)((char *)this + 24);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 5));
    *v5 = 0u;
    v5[1] = 0u;
  }
  re::AssetHandle::~AssetHandle(this);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderEntry>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;

  v1 = a1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v1 += 24;
  result = re::DynamicString::setCapacity((_QWORD *)v1, 0);
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderEntry>(re::AssetHandle *this)
{
  uint64_t v2;
  _OWORD *v3;

  v3 = (_OWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle(this);
}

uint64_t *re::ecs2::allocInfo_RenderGraphFileProviderArrayComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254116DB0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254116DB0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116EC8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254116ED8 = 0;
    qword_254116EE8 = 0;
    qword_254116EF0 = 0xFFFFFFFFLL;
    qword_254116EC8 = (uint64_t)&off_24ED7DAA8;
    qword_254116EF8 = (uint64_t)"RenderGraphFileProviderArrayComponent";
    dword_254116F00 = 0;
    xmmword_254116F08 = 0u;
    unk_254116F18 = 0u;
    xmmword_254116F28 = 0u;
    qword_254116F38 = 0;
    __cxa_guard_release(&qword_254116DB0);
  }
  return &qword_254116EC8;
}

void re::ecs2::initInfo_RenderGraphFileProviderArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  unsigned __int8 v12;
  const re::IntrospectionBase *v13;
  unsigned __int8 v14;
  int v15;
  re::IntrospectionRegistry *v16;
  const re::IntrospectionBase *v17;
  const char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  re *v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  void *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  __int128 v57;
  const char *v58;
  __int128 v59;

  *(_QWORD *)&v57 = 0x5223CBB28538BDD2;
  *((_QWORD *)&v57 + 1) = "RenderGraphFileProviderArrayComponent";
  re::StringID::destroyString((re::StringID *)&v57);
  *((_OWORD *)this + 2) = v53;
  v4 = atomic_load((unsigned __int8 *)&qword_254116DA8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254116DA8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254116DC8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = atomic_load((unsigned __int8 *)&qword_254116DC0);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254116DC0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116E10, 0);
        *(uint64_t *)((char *)&qword_254116E20 + 6) = 0;
        qword_254116E20 = 0;
        *(_QWORD *)&xmmword_254116E30 = 0;
        *((_QWORD *)&xmmword_254116E30 + 1) = 0xFFFFFFFFLL;
        qword_254116E10 = (uint64_t)&off_24ED1FA08;
        qword_254116E48 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254116E40);
        qword_254116E10 = (uint64_t)&off_24ED71138;
        __cxa_guard_release(&qword_254116DC0);
      }
      if ((_MergedGlobals_348 & 1) == 0)
      {
        v11 = (uint64_t *)qword_254116DA0;
        if (qword_254116DA0)
          goto LABEL_10;
        v12 = atomic_load((unsigned __int8 *)&qword_254116D90);
        if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254116D90))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116E50, 0);
          *(uint64_t *)((char *)&qword_254116E60 + 6) = 0;
          qword_254116E60 = 0;
          *(_QWORD *)&xmmword_254116E70 = 0;
          *((_QWORD *)&xmmword_254116E70 + 1) = 0xFFFFFFFFLL;
          qword_254116E50 = (uint64_t)&off_24ED7DAA8;
          qword_254116E80 = (uint64_t)"RenderGraphFileProviderEntry";
          dword_254116E88 = 0;
          xmmword_254116E90 = 0u;
          *(_OWORD *)&qword_254116EA0 = 0u;
          xmmword_254116EB0 = 0u;
          qword_254116EC0 = 0;
          __cxa_guard_release(&qword_254116D90);
        }
        qword_254116DA0 = (uint64_t)&qword_254116E50;
        *(_QWORD *)&v59 = 0xB11ACD09D60D6D1ALL;
        *((_QWORD *)&v59 + 1) = "RenderGraphFileProviderEntry";
        re::StringID::destroyString((re::StringID *)&v59);
        xmmword_254116E70 = v57;
        v14 = atomic_load((unsigned __int8 *)&qword_254116D98);
        if ((v14 & 1) == 0)
        {
          v31 = (re *)__cxa_guard_acquire(&qword_254116D98);
          if ((_DWORD)v31)
          {
            v32 = re::introspectionAllocator(v31);
            v34 = re::introspect_AssetHandle((re *)1, v33);
            v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
            *(_DWORD *)v35 = 1;
            *(_QWORD *)(v35 + 8) = "renderGraph";
            *(_QWORD *)(v35 + 16) = v34;
            *(_QWORD *)(v35 + 24) = 0;
            *(_QWORD *)(v35 + 32) = 1;
            *(_DWORD *)(v35 + 40) = 0;
            *(_QWORD *)(v35 + 48) = 0;
            *(_QWORD *)(v35 + 56) = 0;
            *(_DWORD *)(v35 + 64) = 0;
            qword_254116DE8 = v35;
            v36 = re::introspectionAllocator((re *)v35);
            v38 = re::IntrospectionInfo<re::DynamicString>::get(1, v37);
            v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
            *(_DWORD *)v39 = 1;
            *(_QWORD *)(v39 + 8) = "typeScope";
            *(_QWORD *)(v39 + 16) = v38;
            *(_QWORD *)(v39 + 24) = 0;
            *(_QWORD *)(v39 + 32) = 0x1800000002;
            *(_DWORD *)(v39 + 40) = 0;
            *(_QWORD *)(v39 + 48) = 0;
            *(_QWORD *)(v39 + 56) = 0;
            *(_DWORD *)(v39 + 64) = 0;
            qword_254116DF0 = v39;
            v40 = re::introspectionAllocator((re *)v39);
            v42 = re::introspect_int((re *)1, v41);
            v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
            *(_DWORD *)v43 = 1;
            *(_QWORD *)(v43 + 8) = "order";
            *(_QWORD *)(v43 + 16) = v42;
            *(_QWORD *)(v43 + 24) = 0;
            *(_QWORD *)(v43 + 32) = 0x3800000003;
            *(_DWORD *)(v43 + 40) = 0;
            *(_QWORD *)(v43 + 48) = 0;
            *(_QWORD *)(v43 + 56) = 0;
            *(_DWORD *)(v43 + 64) = 0;
            qword_254116DF8 = v43;
            v44 = re::introspectionAllocator((re *)v43);
            v46 = re::introspect_uint64_t((re *)1, v45);
            v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
            *(_DWORD *)v47 = 1;
            *(_QWORD *)(v47 + 8) = "token";
            *(_QWORD *)(v47 + 16) = v46;
            *(_QWORD *)(v47 + 24) = 0;
            *(_QWORD *)(v47 + 32) = 0x4000000004;
            *(_DWORD *)(v47 + 40) = 0;
            *(_QWORD *)(v47 + 48) = 0;
            *(_QWORD *)(v47 + 56) = 0;
            *(_DWORD *)(v47 + 64) = 0;
            qword_254116E00 = v47;
            v48 = re::introspectionAllocator((re *)v47);
            v50 = re::introspect_BOOL((re *)1, v49);
            v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
            *(_DWORD *)v51 = 1;
            *(_QWORD *)(v51 + 8) = "removed";
            *(_QWORD *)(v51 + 16) = v50;
            *(_QWORD *)(v51 + 24) = 0;
            *(_QWORD *)(v51 + 32) = 0x4800000005;
            *(_DWORD *)(v51 + 40) = 0;
            *(_QWORD *)(v51 + 48) = 0;
            *(_QWORD *)(v51 + 56) = 0;
            *(_DWORD *)(v51 + 64) = 0;
            qword_254116E08 = v51;
            __cxa_guard_release(&qword_254116D98);
          }
        }
        qword_254116E60 = 0x5000000008;
        v11 = &qword_254116E50;
        dword_254116E68 = 8;
        word_254116E6C = 0;
        dword_254116E88 = 5;
        *(_QWORD *)&xmmword_254116E90 = &qword_254116DE8;
        *((_QWORD *)&xmmword_254116E90 + 1) = re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderEntry>;
        qword_254116EA0 = (uint64_t)re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderEntry>;
        unk_254116EA8 = 0;
        *(_QWORD *)&xmmword_254116EB0 = 0;
        *((_QWORD *)&xmmword_254116EB0 + 1) = re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderEntry>;
        qword_254116EC0 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderEntry>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254116E50, v13);
        v59 = v57;
        if ((_MergedGlobals_348 & 1) == 0)
        {
LABEL_10:
          _MergedGlobals_348 = 1;
          v15 = *((_DWORD *)v11 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116E10, 0);
          qword_254116E20 = 0x2800000003;
          dword_254116E28 = v15;
          word_254116E2C = 0;
          *(_QWORD *)&xmmword_254116E30 = 0;
          *((_QWORD *)&xmmword_254116E30 + 1) = 0xFFFFFFFFLL;
          qword_254116E40 = (uint64_t)v11;
          qword_254116E48 = 0;
          qword_254116E10 = (uint64_t)&off_24ED71138;
          re::IntrospectionRegistry::add(v16, v17);
          re::getPrettyTypeName((re *)&qword_254116E10, (const re::IntrospectionBase *)&v57);
          if ((BYTE8(v57) & 1) != 0)
            v18 = v58;
          else
            v18 = (char *)&v57 + 9;
          if ((_QWORD)v57 && (BYTE8(v57) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v57 + 40))();
          v55 = *((_OWORD *)v11 + 2);
          v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v56);
          if (v19)
          {
            v20 = *v19;
            *((_QWORD *)&v54 + 1) = v20;
          }
          else
          {
            v59 = v55;
            re::TypeBuilder::beginListType((uint64_t)&v57, v56, 1, 0x28uLL, 8uLL, &v59);
            re::TypeBuilder::setConstructor((uint64_t)&v57, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v57, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v57, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v57, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v57, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v57, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v57, v21);
          }
          xmmword_254116E30 = v54;
          re::StringID::destroyString((re::StringID *)v56);
        }
      }
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "m_entries";
      *(_QWORD *)(v22 + 16) = &qword_254116E10;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x2800000001;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254116DD0 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_uint64_t((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "m_currentProviderToken";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x2000000002;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254116DD8 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_BOOL((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "m_useForScene";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5000000003;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254116DE0 = v30;
      __cxa_guard_release(&qword_254116DA8);
    }
  }
  *((_QWORD *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254116DC8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArrayComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArrayComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArrayComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v52 = v53;
}

void re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A100;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 32) = 1000;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 80) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArrayComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A100;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 32) = 1000;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 80) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArrayComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RenderGraphFileProviderArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFileProviderArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderGraphFileProviderArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderGraphFileProviderArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderGraphFileProviderArrayComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RenderGraphFileProviderArraySystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254116DB8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254116DB8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116F40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254116F50 = 0;
    qword_254116F60 = 0;
    qword_254116F68 = 0xFFFFFFFFLL;
    qword_254116F40 = (uint64_t)&off_24ED7DAA8;
    qword_254116F70 = (uint64_t)"RenderGraphFileProviderArraySystem";
    dword_254116F78 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254116FB0 = 0;
    __cxa_guard_release(&qword_254116DB8);
  }
  return &qword_254116F40;
}

void re::ecs2::initInfo_RenderGraphFileProviderArraySystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x5B49CEE5C618AF86;
  v5[1] = "RenderGraphFileProviderArraySystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RenderGraphFileProviderArraySystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArraySystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArraySystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArraySystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArraySystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArraySystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED710A8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArraySystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArraySystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED710A8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArraySystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RenderGraphFileProviderArraySystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFileProviderArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderGraphFileProviderArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderGraphFileProviderArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderGraphFileProviderArraySystem>, this);
}

uint64_t re::ecs2::RenderGraphFileProviderArrayComponent::add(uint64_t a1, uint64_t *a2, const char *a3, int a4)
{
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[4];
  int v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];

  *(_BYTE *)(a1 + 25) = 2;
  v15 = 0;
  memset(&v16[1], 0, 24);
  v14 = 0u;
  re::DynamicString::setCapacity(v16, 0);
  v18 = 0;
  v19 = 0;
  re::AssetHandle::operator=((uint64_t *)&v14, a2);
  v8 = strlen(a3);
  v20[0] = a3;
  v20[1] = v8;
  re::DynamicString::operator=((re::DynamicString *)v16, (uint64_t)v20);
  v17 = a4;
  v9 = *(_QWORD *)(a1 + 32) + 1;
  do
  {
    v10 = v9;
    v9 = 1;
  }
  while (!v10);
  *(_QWORD *)(a1 + 32) = v10;
  v18 = v10;
  v11 = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::add((_anonymous_namespace_ *)(a1 + 40), (re::AssetHandle *)&v14);
  v12 = v18;
  if (v16[0])
  {
    if ((v16[1] & 1) != 0)
      (*(void (**)(__n128))(*(_QWORD *)v16[0] + 40))(v11);
    memset(v16, 0, sizeof(v16));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return v12;
}

__n128 re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::add(_anonymous_namespace_ *this, re::AssetHandle *a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 80 * v4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, a2);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 24), (re::AssetHandle *)((char *)a2 + 24));
  result = *(__n128 *)((char *)a2 + 56);
  *(_BYTE *)(v5 + 72) = *((_BYTE *)a2 + 72);
  *(__n128 *)(v5 + 56) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

unint64_t re::ecs2::RenderGraphFileProviderArrayComponent::entry(re::ecs2::RenderGraphFileProviderArrayComponent *this, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  _BYTE v6[8];
  unint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!v6[0])
    return 0;
  v3 = v7;
  v4 = *((_QWORD *)this + 7);
  if (v4 <= v7)
  {
    v8 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v9 = 136315906;
    v10 = "operator[]";
    v11 = 1024;
    v12 = 797;
    v13 = 2048;
    v14 = v3;
    v15 = 2048;
    v16 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 9) + 80 * v7;
}

uint64_t `anonymous namespace'::providerTokenIndex<re::ecs2::RenderGraphFileProviderEntry>(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_12;
  v4 = a3 + 80 * a2;
  v5 = a3;
  do
  {
    v6 = v5 + 80 * (a2 >> 1);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = v6 + 80;
    if (v7 >= a4)
      a2 >>= 1;
    else
      a2 += ~(a2 >> 1);
    if (v7 < a4)
      v5 = v8;
  }
  while (a2);
  if (v5 != v4 && *(_QWORD *)(v5 + 64) == a4)
  {
    *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v5 - a3) >> 4);
  }
  else
  {
LABEL_12:
    *(_BYTE *)result = 0;
  }
  return result;
}

uint64_t *re::ecs2::RenderGraphFileProviderArrayComponent::setRenderGraph(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *result;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[8];
  unint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (v8[0])
  {
    v6 = v9;
    v7 = *(_QWORD *)(a1 + 56);
    if (v7 <= v9)
    {
      v10 = 0;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v11 = 136315906;
      v12 = "operator[]";
      v13 = 1024;
      v14 = 789;
      v15 = 2048;
      v16 = v6;
      v17 = 2048;
      v18 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)(a1 + 72) + 80 * v9), a3);
  }
  return result;
}

re::DynamicString *re::ecs2::RenderGraphFileProviderArrayComponent::setTypeScope(re::ecs2::RenderGraphFileProviderArrayComponent *this, unint64_t a2, const char *a3)
{
  re::DynamicString *result;
  unint64_t v6;
  unint64_t v7;
  re::DynamicString *v8;
  size_t v9;
  _BYTE v10[8];
  unint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  _OWORD v21[5];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (v10[0])
  {
    v6 = v11;
    v7 = *((_QWORD *)this + 7);
    if (v7 <= v11)
    {
      v12 = 0;
      memset(v21, 0, sizeof(v21));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v13 = 136315906;
      v14 = "operator[]";
      v15 = 1024;
      v16 = 789;
      v17 = 2048;
      v18 = v6;
      v19 = 2048;
      v20 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = (re::DynamicString *)(*((_QWORD *)this + 9) + 80 * v11 + 24);
    v9 = strlen(a3);
    *(_QWORD *)&v21[0] = a3;
    *((_QWORD *)&v21[0] + 1) = v9;
    return re::DynamicString::operator=(v8, (uint64_t)v21);
  }
  return result;
}

uint64_t re::ecs2::RenderGraphFileProviderArrayComponent::setOrder(re::ecs2::RenderGraphFileProviderArrayComponent *this, unint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[8];
  unint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (v8[0])
  {
    v6 = v9;
    v7 = *((_QWORD *)this + 7);
    if (v7 <= v9)
    {
      v10 = 0;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v11 = 136315906;
      v12 = "operator[]";
      v13 = 1024;
      v14 = 789;
      v15 = 2048;
      v16 = v6;
      v17 = 2048;
      v18 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*((_QWORD *)this + 9) + 80 * v9 + 56) = a3;
  }
  return result;
}

uint64_t re::ecs2::RenderGraphFileProviderArraySystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::RenderingSubsystem **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::Allocator *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  int v36;
  uint64_t v37;
  int *v38;
  int v39;
  const re::ecs2::Scene **v40;
  const re::ecs2::Scene **v41;
  _BOOL4 v42;
  const re::ecs2::Scene **v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  re::ecs2::RenderingSubsystem **v50;
  re::Allocator *v51;
  re::ecs2::RenderingSubsystem *v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[4];
  _QWORD v63[3];
  int v64;
  int v65;
  _BYTE v66[12];
  __int16 v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  uint64_t v73;

  v4 = result;
  v73 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(result + 104);
  if (v5 && (*(_BYTE *)(v5 + 424) & 0x10) == 0)
    return result;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    return result;
  v7 = *(re::ecs2::RenderingSubsystem ***)a2;
  v49 = *(_QWORD *)a2 + 8 * v6;
  v48 = result;
  do
  {
    v52 = *v7;
    if (!*v7)
      goto LABEL_88;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v58);
    v9 = *(_QWORD *)(v4 + 112);
    if (!v9)
      goto LABEL_91;
    v10 = *(_QWORD *)(v9 + 104);
    v50 = v7;
    if (v10)
      v11 = re::RenderFrameBox::get(v10 + 344, 0xFFFFFFFFFFFFFFFuLL);
    else
      v11 = 0;
    v12 = *(re::Allocator **)(v11 + 376);
    v54[1] = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v51 = v12;
    v54[0] = v12;
    re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(v54, 0);
    ++v56;
    v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 136) + 24))(*(_QWORD *)(v4 + 136));
    v13 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v52 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!v13)
      goto LABEL_61;
    v14 = *(_QWORD *)(v13 + 24);
    if (!v14)
      goto LABEL_61;
    v15 = *(uint64_t **)(v13 + 40);
    v16 = &v15[v14];
    do
    {
      v2 = *v15;
      v17 = *(_QWORD *)(*v15 + 16);
      if (!v17 || (~*(_DWORD *)(v17 + 288) & 0x2008) != 0)
        goto LABEL_60;
      v18 = *(unsigned __int8 *)(v2 + 25);
      if (!*(_BYTE *)(v2 + 25))
      {
        v19 = *(_QWORD *)(v17 + 200);
        if (v19 && *(_QWORD *)(v19 + 32) && RESyncableGetOwnerPeerID())
          v18 = 1;
        else
          v18 = 2;
        *(_BYTE *)(v2 + 25) = v18;
      }
      v20 = *(_QWORD *)(v2 + 56);
      if (v18 != 2)
      {
        if (v20)
          v29 = 3;
        else
          v29 = 1;
        goto LABEL_45;
      }
      if (!v20)
        goto LABEL_44;
      v3 = 0;
      do
      {
        v21 = *(_QWORD *)(v2 + 72);
        if (*(_BYTE *)(v21 + 80 * v3 + 72))
        {
          if (v20 <= v3)
          {
            v59 = 0;
            memset(v62, 0, 48);
            v60 = 0u;
            v61 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v66 = 136315906;
            *(_QWORD *)&v66[4] = "removeStableAt";
            v67 = 1024;
            v68 = 969;
            v69 = 2048;
            v70 = v3;
            v71 = 2048;
            v72 = v20;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_91:
            re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 193);
            _os_crash();
            __break(1u);
          }
          if (v20 - 1 > v3 && v21 + 80 * v3 + 80 != v21 + 80 * v20)
          {
            v22 = 80 * v3;
            v23 = 80 * v20 - 80;
            do
            {
              v24 = v21 + v22;
              v25 = *(_OWORD *)(v21 + 80 * v3);
              *(_OWORD *)v24 = *(_OWORD *)(v21 + v22 + 80);
              *(_OWORD *)(v24 + 80) = v25;
              v26 = *(_QWORD *)(v21 + v22 + 16);
              *(_QWORD *)(v24 + 16) = *(_QWORD *)(v21 + v22 + 96);
              *(_QWORD *)(v24 + 96) = v26;
              re::DynamicString::operator=((re::DynamicString *)(v21 + v22 + 24), (re::DynamicString *)(v21 + v22 + 104));
              *(_OWORD *)(v24 + 56) = *(_OWORD *)(v24 + 136);
              *(_BYTE *)(v24 + 72) = *(_BYTE *)(v24 + 152);
              v21 += 80;
              v23 -= 80;
            }
            while (v22 != v23);
            v20 = *(_QWORD *)(v2 + 56);
            v21 = *(_QWORD *)(v2 + 72);
          }
          v27 = v21 + 80 * v20;
          v28 = *(_QWORD *)(v27 - 56);
          if (v28)
          {
            if ((*(_BYTE *)(v27 - 48) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 40))(v28, *(_QWORD *)(v27 - 40));
            *(_OWORD *)(v27 - 56) = 0u;
            *(_OWORD *)(v27 - 40) = 0u;
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v27 - 80));
          v20 = *(_QWORD *)(v2 + 56) - 1;
          *(_QWORD *)(v2 + 56) = v20;
          ++*(_DWORD *)(v2 + 64);
        }
        else
        {
          ++v3;
        }
      }
      while (v3 < v20);
      if (v20)
      {
        v29 = 2;
        goto LABEL_45;
      }
LABEL_44:
      v29 = 1;
LABEL_45:
      *(_BYTE *)(v2 + 25) = v29;
      if (*(_BYTE *)(v2 + 80) && v20)
      {
        v3 = 0;
        v30 = *(_QWORD *)(v2 + 72);
        v31 = 80 * v20;
        do
        {
          v2 = v30 + v3;
          if (!*(_BYTE *)(v30 + v3 + 72))
          {
            v32 = *(_QWORD *)(v2 + 8);
            if (v32 && (v33 = atomic_load((unsigned int *)(v32 + 704)), v33 == 2))
            {
              v34 = v30 + v3;
              if ((*(_BYTE *)(v30 + v3 + 32) & 1) != 0)
                v35 = *(const char **)(v34 + 40);
              else
                v35 = (const char *)(v34 + 33);
              *(_QWORD *)&v60 = 0;
              re::DynamicString::DynamicString((re::DynamicString *)((char *)&v60 + 8), v35, v51);
              *(_QWORD *)&v60 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)(v30 + v3)) + 8;
              DWORD2(v62[0]) = *(_DWORD *)(v30 + v3 + 56);
              re::DynamicArray<re::RenderGraphFileProvider>::add((_anonymous_namespace_ *)v54, (uint64_t)&v60);
              if (*((_QWORD *)&v60 + 1) && (v61 & 1) != 0)
                (*(void (**)(void))(**((_QWORD **)&v60 + 1) + 40))();
            }
            else
            {
              re::AssetHandle::loadAsync((re::AssetHandle *)(v30 + v3));
            }
          }
          v3 += 80;
        }
        while (v31 != v3);
      }
LABEL_60:
      ++v15;
    }
    while (v15 != v16);
LABEL_61:
    if (v55)
    {
      re::ecs2::WorldRootProvider::worldIds((re::ecs2::WorldRootProvider *)&v53, (uint64_t)&v60);
      v36 = v64;
      if (v64)
      {
        LODWORD(v2) = v65;
        if (v65)
        {
          v37 = 0;
          v38 = (int *)v63[2];
          while (1)
          {
            v39 = *v38;
            v38 += 4;
            if (v39 < 0)
              break;
            if (v65 == ++v37)
            {
              LODWORD(v37) = v65;
              break;
            }
          }
          LODWORD(v3) = v37;
        }
        else
        {
          LODWORD(v3) = 0;
        }
        v41 = (const re::ecs2::Scene **)v63;
        v40 = (const re::ecs2::Scene **)v63;
      }
      else
      {
        v40 = (const re::ecs2::Scene **)v62;
        v41 = (const re::ecs2::Scene **)v62 + v61;
      }
      v42 = v40 != v41;
      if (v64)
        v42 = v2 != v3;
      if (v42)
      {
        do
        {
          v43 = v40;
          if (v36)
            v43 = (const re::ecs2::Scene **)((char *)v40[2] + 16 * v3 + 8);
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v52, *v43, (re::DynamicString **)v11, v66);
          v59 = *(_QWORD *)v66 >> 1;
          v44 = re::RenderFrameData::stream((re::RenderFrameData *)(v11 + 264), (const re::WeakStringID *)&v59);
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v44 + 48) + 808))(*(_QWORD *)(v44 + 48), v54);
          re::StringID::destroyString((re::StringID *)v66);
          if (v36)
          {
            v45 = v3 + 1;
            do
            {
              LODWORD(v3) = v45;
              if (v45 >= *((_DWORD *)v40 + 8))
                break;
              v46 = *((_DWORD *)v40[2] + 4 * v45++);
            }
            while ((v46 & 0x80000000) == 0);
          }
          else
          {
            ++v40;
          }
          v47 = v40 != v41;
          if (v36)
            v47 = (_DWORD)v2 != (_DWORD)v3;
        }
        while (v47);
      }
      re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)&v60);
    }
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v54);
    result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v58);
    v4 = v48;
    v7 = v50;
LABEL_88:
    ++v7;
  }
  while (v7 != (re::ecs2::RenderingSubsystem **)v49);
  return result;
}

void re::ecs2::RenderGraphFileProviderArraySystem::~RenderGraphFileProviderArraySystem(re::ecs2::RenderGraphFileProviderArraySystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::RenderGraphFileProviderArraySystem::typeInfo(re::ecs2::RenderGraphFileProviderArraySystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFileProviderArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderGraphFileProviderArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderGraphFileProviderArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderGraphFileProviderArraySystem>, 0);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  char v10;
  re::IntrospectionBase *v11;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  _OWORD v17[2];

  memset(v17, 0, sizeof(v17));
  v14 = 0;
  v16 = 0u;
  v13 = 0u;
  re::DynamicString::setCapacity(&v15, 0);
  *(_QWORD *)&v17[1] = 0;
  BYTE8(v17[1]) = 0;
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  v9 = *(_QWORD *)(a4 + 32) + 80 * v8;
  *(_QWORD *)(v9 + 8) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)v9 = v13;
  *(_QWORD *)&v13 = 0;
  *(_QWORD *)(v9 + 16) = v14;
  v14 = 0;
  *(_QWORD *)(v9 + 24) = v15;
  v15 = 0;
  *(_QWORD *)(v9 + 40) = *((_QWORD *)&v16 + 1);
  *((_QWORD *)&v16 + 1) = 0;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)&v17[0];
  *(_QWORD *)&v17[0] = 0;
  *(_QWORD *)(v9 + 32) = v16;
  *(_QWORD *)&v16 = 0;
  v10 = BYTE8(v17[1]);
  *(_OWORD *)(v9 + 56) = *(_OWORD *)((char *)v17 + 8);
  *(_BYTE *)(v9 + 72) = v10;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  v11 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 80 * *(_QWORD *)(a4 + 16) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

void re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  re::AssetHandle *v11;
  _OWORD *v12;

  v3 = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 80 * a2;
    v9 = a2;
    do
    {
      v10 = *((_QWORD *)v3 + 4);
      v11 = (re::AssetHandle *)(v10 + v8);
      v12 = (_OWORD *)(v10 + v8 + 24);
      if (*(_QWORD *)v12)
      {
        if ((*((_BYTE *)v11 + 32) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v12 + 40))(*(_QWORD *)v12, *(_QWORD *)(v10 + v8 + 40));
        *v12 = 0u;
        v12[1] = 0u;
      }
      re::AssetHandle::~AssetHandle(v11);
      ++v9;
      v8 += 80;
    }
    while (v9 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(a1, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 80 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_QWORD *)(v7 + 48) = 0;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
        v7 += 24;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_DWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        v6 += 80;
        *(_BYTE *)(v7 + 48) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

_QWORD *re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 80 * v8;
      do
      {
        v11 = *(_QWORD *)(v9 + 24);
        if (v11)
        {
          if ((*(_BYTE *)(v9 + 32) & 1) != 0)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v9 + 40));
          *(_OWORD *)(v9 + 24) = 0u;
          *(_OWORD *)(v9 + 40) = 0u;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
        v9 += 80;
        v10 -= 80;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 80 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 80;
        v15 -= 80;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 80 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

id re::internal::defaultRetain<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_ImageBasedLightService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_349);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_349))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254116FC0, 0);
    *(uint64_t *)((char *)&qword_254116FD0 + 6) = 0;
    qword_254116FD0 = 0;
    qword_254116FE0 = 0;
    qword_254116FE8 = 0xFFFFFFFFLL;
    qword_254116FC0 = (uint64_t)&off_24ED7DAA8;
    qword_254116FF0 = (uint64_t)"ImageBasedLightService";
    dword_254116FF8 = 0;
    unk_254117000 = 0u;
    unk_254117010 = 0u;
    unk_254117020 = 0u;
    qword_254117030 = 0;
    __cxa_guard_release(&_MergedGlobals_349);
  }
  return &qword_254116FC0;
}

void re::ecs2::initInfo_ImageBasedLightService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x16BB2D00FED2B82ELL;
  v5[1] = "ImageBasedLightService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ImageBasedLightService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_ImageBasedLightService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightService>, this);
}

uint64_t *re::ecs2::allocInfo_PbrMaterialParametersComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_350);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_350))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117060, 0);
    *(uint64_t *)((char *)&qword_254117070 + 6) = 0;
    qword_254117070 = 0;
    qword_254117080 = 0;
    qword_254117088 = 0xFFFFFFFFLL;
    qword_254117060 = (uint64_t)&off_24ED7DAA8;
    qword_254117090 = (uint64_t)"PbrMaterialParametersComponent";
    dword_254117098 = 0;
    unk_2541170A0 = 0u;
    unk_2541170B0 = 0u;
    unk_2541170C0 = 0u;
    qword_2541170D0 = 0;
    __cxa_guard_release(&_MergedGlobals_350);
  }
  return &qword_254117060;
}

void re::ecs2::initInfo_PbrMaterialParametersComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x3ABE975A155C7198;
  v17[1] = "PbrMaterialParametersComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_254117040);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117040);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254117048 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_PbrMaterialParameters((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "params";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254117050 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_AssetHandle((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "materialAsset";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x21000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254117058 = v15;
      __cxa_guard_release(&qword_254117040);
    }
  }
  *((_QWORD *)this + 2) = 0x23000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254117048;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PbrMaterialParametersComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PbrMaterialParametersComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PbrMaterialParametersComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PbrMaterialParametersComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

double re::internal::defaultConstruct<re::ecs2::PbrMaterialParametersComponent>(int a1, int a2, char *a3)
{
  double result;

  bzero(a3, 0x230uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a3, 0);
  *((_QWORD *)a3 + 2) = 0;
  a3[24] = 0;
  *(_QWORD *)a3 = &off_24ED5A180;
  re::PbrMaterialParameters::PbrMaterialParameters((re::PbrMaterialParameters *)(a3 + 32));
  *((_QWORD *)a3 + 68) = 0;
  result = 0.0;
  *((_OWORD *)a3 + 33) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PbrMaterialParametersComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PbrMaterialParametersComponent>(_QWORD *a1)
{
  double result;

  bzero(a1, 0x230uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED5A180;
  re::PbrMaterialParameters::PbrMaterialParameters((re::PbrMaterialParameters *)(a1 + 4));
  a1[68] = 0;
  result = 0.0;
  *((_OWORD *)a1 + 33) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PbrMaterialParametersComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PbrMaterialParametersComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PbrMaterialParametersComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PbrMaterialParametersComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PbrMaterialParametersComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PbrMaterialParametersComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VFXEmitterSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_351);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_351))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541170E0, 0);
    *(uint64_t *)((char *)&qword_2541170F0 + 6) = 0;
    qword_2541170F0 = 0;
    qword_254117100 = 0;
    qword_254117108 = 0xFFFFFFFFLL;
    qword_2541170E0 = (uint64_t)&off_24ED7DAA8;
    qword_254117110 = (uint64_t)"VFXEmitterSystem";
    dword_254117118 = 0;
    unk_254117120 = 0u;
    unk_254117130 = 0u;
    unk_254117140 = 0u;
    qword_254117150 = 0;
    __cxa_guard_release(&_MergedGlobals_351);
  }
  return &qword_2541170E0;
}

void re::ecs2::initInfo_VFXEmitterSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x49E29E8B3C4CC8EALL;
  v5[1] = "VFXEmitterSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VFXEmitterSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXEmitterSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXEmitterSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXEmitterSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXEmitterSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::VFXEmitterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = off_24ED711D0;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_QWORD *)(v3 + 224) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::VFXEmitterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void **v6;

  v4 = *(_QWORD *)(a3 + 224);
  if (v4)
  {

    *(_QWORD *)(a3 + 224) = 0;
  }
  v6 = (void **)(a3 + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 176));
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

double re::internal::defaultConstructV2<re::ecs2::VFXEmitterSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = off_24ED711D0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_QWORD *)(v1 + 224) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::VFXEmitterSystem>(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 224);
  if (v2)
  {

    *(_QWORD *)(a1 + 224) = 0;
  }
  v4 = (void **)(a1 + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 176));
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VFXEmitterSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXEmitterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXEmitterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXEmitterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXEmitterSystem>, this);
}

void re::ecs2::VFXEmitterSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::SceneComponentTable *v10;
  re *v11;
  uint64_t v12;
  re::ecs2::VFXEmitterComponent **v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  re::ecs2::VFXEmitterComponent *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  re::ecs2::VFXEmitterComponent *v22;
  uint64_t v23;
  re::AssetHandle *v24;
  _BYTE v25[24];
  __int128 v26;
  uint64_t v27;
  void **v28;

  v4 = *(_QWORD *)(a1 + 104);
  if ((!v4 || (*(_BYTE *)(v4 + 424) & 0x10) != 0)
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 168))(*(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
      goto LABEL_32;
    v6 = 0;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)a2 + 8 * v5;
    v24 = (re::AssetHandle *)(a1 + 176);
    do
    {
      while (1)
      {
        v9 = *v7;
        v10 = (re::ecs2::SceneComponentTable *)(*v7 + 200);
        v11 = (re *)re::ecs2::SceneComponentTable::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (!v11)
          break;
        v12 = *((_QWORD *)v11 + 3);
        if (!v12)
          break;
        v13 = (re::ecs2::VFXEmitterComponent **)*((_QWORD *)v11 + 5);
        if ((v6 & 1) == 0)
        {
          if (*(_QWORD *)(a1 + 120) && !*(_QWORD *)(a1 + 184))
          {
            re::loadVFXAssetsFramework(v11);
            (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**(_QWORD **)(a1 + 120) + 8))(&v26, *(_QWORD *)(a1 + 120), "framework:com.apple.VFXAssets/com.apple.realitykit.vfx.general.vfx");
            v14 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 176) = v26;
            v26 = v14;
            v15 = *(_QWORD *)(a1 + 192);
            *(_QWORD *)(a1 + 192) = v27;
            v27 = v15;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
            re::AssetHandle::loadAsync(v24);
          }
          if (!*(_QWORD *)(a1 + 224))
          {
            v18 = *(_QWORD *)(a1 + 184);
            if (v18)
            {
              v19 = atomic_load((unsigned int *)(v18 + 704));
              if (v19 == 2)
              {
                re::ecs2::VFXSceneComponent::createDetachedSceneComponent(&v26);
                v20 = *(_QWORD *)(a1 + 224);
                v21 = v26;
                *(_QWORD *)(a1 + 224) = v26;
                if (v20)
                {

                  v21 = *(_QWORD *)(a1 + 224);
                }
                re::AssetHandle::AssetHandle((re::AssetHandle *)v25, v24);
                re::ecs2::VFXSceneComponent::setVFXFromParticleEmitter(v21, (const re::AssetHandle *)v25);
                re::AssetHandle::~AssetHandle((re::AssetHandle *)v25);
                re::ecs2::VFXSceneComponent::initializeBindings(*(re::ecs2::VFXSceneComponent **)(a1 + 224));
                re::ecs2::VFXSceneComponent::updateBindingStatesInitialValues(*(re::ecs2::VFXSceneComponent **)(a1 + 224));
                v22 = *(re::ecs2::VFXEmitterComponent **)(a1 + 224);
                *((_BYTE *)v22 + 213) = 1;
                re::ecs2::VFXEmitterComponent::loadBindingValues(v22, &v26);
                std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__vdeallocate((void **)(a1 + 200));
                *(_OWORD *)(a1 + 200) = v26;
                *(_QWORD *)(a1 + 216) = v27;
                v27 = 0;
                v26 = 0uLL;
                v28 = (void **)&v26;
                std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v28);
              }
            }
          }
        }
        if (v9)
        {
          re::ecs2::SceneComponentTable::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v26, 3142, a1);
          v16 = 8 * v12;
          do
          {
            v17 = *v13++;
            re::ecs2::VFXEmitterComponent::loadAssetsIfNeeded((uint64_t)v17, *(AssetService **)(a1 + 120), *(_QWORD *)(a1 + 224), (uint64_t *)(a1 + 200));
            re::ecs2::VFXEmitterComponent::update(v17);
            v16 -= 8;
          }
          while (v16);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v26);
        }
        ++v7;
        v6 = 1;
        if (v7 == (_QWORD *)v8)
          return;
      }
      ++v7;
    }
    while (v7 != (_QWORD *)v8);
    if ((v6 & 1) == 0)
    {
LABEL_32:
      if (*(_QWORD *)(a1 + 224))
      {
        std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__base_destruct_at_end[abi:nn180100]((_QWORD *)(a1 + 200), *(_QWORD **)(a1 + 200));
        v23 = *(_QWORD *)(a1 + 224);
        if (v23)
        {

          *(_QWORD *)(a1 + 224) = 0;
        }
      }
    }
  }
}

uint64_t emitterComponentDidChangeHandler(uint64_t a1, _QWORD *a2)
{
  const re::ecs2::ComponentTypeBase *v3;
  re::ecs2::VFXEmitterComponent *v4;

  v3 = (const re::ecs2::ComponentTypeBase *)a2[1];
  if (v3 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    v4 = (re::ecs2::VFXEmitterComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*a2 + 32), v3);
    if (v4)
      re::ecs2::VFXEmitterComponent::update(v4);
  }
  return 0;
}

re::EventBus *re::ecs2::VFXEmitterSystem::willAddSceneToECSService(re::ecs2::VFXEmitterSystem *this, re::ecs2::Scene *a2)
{
  re::EventBus *result;
  uint64_t v4;

  result = (re::EventBus *)*((_QWORD *)a2 + 36);
  if (result)
  {
    result = (re::EventBus *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(result, 0, (uint64_t)emitterComponentDidChangeHandler, 0, 0);
    *((_QWORD *)this + 20) = result;
    *((_QWORD *)this + 21) = v4;
  }
  return result;
}

uint64_t re::ecs2::VFXEmitterSystem::willRemoveSceneFromECSService(re::ecs2::VFXEmitterSystem *this, re::ecs2::Scene *a2)
{
  uint64_t result;

  result = *((_QWORD *)a2 + 36);
  if (result)
    return re::EventBus::unsubscribe(result, *((_QWORD *)this + 20), *((_QWORD *)this + 21));
  return result;
}

void re::ecs2::VFXEmitterSystem::~VFXEmitterSystem(re::ecs2::VFXEmitterSystem *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 28);
  if (v2)
  {

    *((_QWORD *)this + 28) = 0;
  }
  v3 = (void **)((char *)this + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v3);
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterSystem *)((char *)this + 176));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 28);
  if (v2)
  {

    *((_QWORD *)this + 28) = 0;
  }
  v3 = (void **)((char *)this + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v3);
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterSystem *)((char *)this + 176));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  MEMORY[0x2276933B8](this, 0x10E1C4015C99197);
}

uint64_t re::ecs2::VFXEmitterSystem::typeInfo(re::ecs2::VFXEmitterSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXEmitterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXEmitterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXEmitterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXEmitterSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__base_destruct_at_end[abi:nn180100](a1, *a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL re::CollisionEventDelegate::hasCollisionEventSubscriptions(_BOOL8 this, const re::EventBus *a2)
{
  uint64_t v2;
  re::EventBus::EventInfo *Event;
  uint64_t v4;
  re::EventBus::EventInfo *v5;
  char *v6;
  re::EventBus::EventInfo *v7;
  char *v8;
  re::EventBus::EventInfo *v9;
  char *v10;
  re::EventBus::EventInfo *v11;
  char *v12;
  re::EventBus::EventInfo *v13;
  char *v14;
  re::EventBus::EventInfo *v15;
  char *v16;
  re::EventBus::EventInfo *v17;

  if (this)
  {
    v2 = this;
    Event = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidStartEvent>(this);
    if (Event)
      v4 = re::EventBus::EventInfo::subscriptionCount(Event);
    else
      v4 = 0;
    v5 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidStartEventEx>(v2);
    if (v5)
      v5 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v5);
    v6 = (char *)v5 + v4;
    v7 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidStopEvent>(v2);
    if (v7)
      v7 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v7);
    v8 = (char *)v7 + (_QWORD)v6;
    v9 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidUpdateEvent>(v2);
    if (v9)
      v9 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v9);
    v10 = (char *)v9 + (_QWORD)v8;
    v11 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>(v2);
    if (v11)
      v11 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v11);
    v12 = (char *)v11 + (_QWORD)v10;
    v13 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionStartEvent>(v2);
    if (v13)
      v13 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v13);
    v14 = (char *)v13 + (_QWORD)v12;
    v15 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionStopEvent>(v2);
    if (v15)
      v15 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v15);
    v16 = (char *)v15 + (_QWORD)v14;
    v17 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionUpdateEvent>(v2);
    if (v17)
      v17 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v17);
    return (re::EventBus::EventInfo *)((char *)v17 + (_QWORD)v16) != 0;
  }
  return this;
}

void re::EngineCollisionEventDelegate::startCollision(re::EngineCollisionEventDelegate *this, const re::CollisionObject *a2, const re::CollisionObject *a3, float32x4_t *a4)
{
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::EventBus *v16;
  uint64_t started;
  uint64_t Event;
  uint64_t v19;
  uint64_t Type;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  re::EventBus *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  const re::CollisionObject *v54;
  const re::CollisionObject *v55;
  float32x4_t v56;
  float v57;

  v8 = *((_QWORD *)a2 + 5);
  if (v8)
    v9 = (id)(v8 + 8);
  v10 = *((_QWORD *)a3 + 5);
  if (v10)
    v11 = (id)(v10 + 8);
  if (v8)
  {
    v12 = v8;
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 24);
    }
    while (v12);
    if (!*(_QWORD *)(v13 + 16))
      goto LABEL_12;
    v14 = v8;
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 24);
    }
    while (v14);
    v16 = *(re::EventBus **)(*(_QWORD *)(v15 + 16) + 288);
    if (!v16)
LABEL_12:
      v16 = (re::EventBus *)*((_QWORD *)this + 1);
    started = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEventEx>((uint64_t)v16, v8);
    Event = re::EventBus::getEventInfo<RECollisionDidStartEventEx>((uint64_t)v16);
    if (Event)
      v19 = *(_QWORD *)(Event + 208);
    else
      v19 = 0;
    if (v19 + started)
    {
      v54 = a2;
      v55 = a3;
      v56.i64[0] = (uint64_t)a4;
      Type = re::EventBus::getTypeId<RECollisionDidStartEventEx>();
      re::EventBus::publish(v16, v8, Type, (uint64_t)&v54, 0x18uLL, 0);
    }
    v21 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEvent>((uint64_t)v16, v8);
    v22 = re::EventBus::getEventInfo<RECollisionDidStartEvent>((uint64_t)v16);
    if (v22)
      v23 = *(_QWORD *)(v22 + 208);
    else
      v23 = 0;
    if (v23 + v21)
    {
      v54 = a2;
      v55 = a3;
      v24 = a4[5];
      v56 = a4[4];
      v25 = vmulq_f32(v24, v24);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
      v26 = re::EventBus::getTypeId<RECollisionDidStartEvent>();
      re::EventBus::publish(v16, v8, v26, (uint64_t)&v54, 0x30uLL, 0);
    }
    v27 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStartEvent>((uint64_t)v16, v8);
    v28 = re::EventBus::getEventInfo<RECollisionStartEvent>((uint64_t)v16);
    if (v28)
      v29 = *(_QWORD *)(v28 + 208);
    else
      v29 = 0;
    if (v29 + v27)
    {
      v54 = a2;
      v55 = a3;
      v30 = a4[5];
      v56 = a4[4];
      v31 = vmulq_f32(v30, v30);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
      v32 = re::EventBus::getTypeId<RECollisionStartEvent>();
      re::EventBus::publish(v16, v8, v32, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v10)
  {
    v33 = v10;
    do
    {
      v34 = v33;
      v33 = *(_QWORD *)(v33 + 24);
    }
    while (v33);
    if (!*(_QWORD *)(v34 + 16))
      goto LABEL_35;
    v35 = v10;
    do
    {
      v36 = v35;
      v35 = *(_QWORD *)(v35 + 24);
    }
    while (v35);
    v37 = *(re::EventBus **)(*(_QWORD *)(v36 + 16) + 288);
    if (!v37)
LABEL_35:
      v37 = (re::EventBus *)*((_QWORD *)this + 1);
    v38 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEventEx>((uint64_t)v37, v10);
    v39 = re::EventBus::getEventInfo<RECollisionDidStartEventEx>((uint64_t)v37);
    if (v39)
      v40 = *(_QWORD *)(v39 + 208);
    else
      v40 = 0;
    if (v40 + v38)
    {
      v54 = a3;
      v55 = a2;
      v56.i64[0] = (uint64_t)a4;
      v41 = re::EventBus::getTypeId<RECollisionDidStartEventEx>();
      re::EventBus::publish(v37, v10, v41, (uint64_t)&v54, 0x18uLL, 0);
    }
    v42 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEvent>((uint64_t)v37, v10);
    v43 = re::EventBus::getEventInfo<RECollisionDidStartEvent>((uint64_t)v37);
    if (v43)
      v44 = *(_QWORD *)(v43 + 208);
    else
      v44 = 0;
    if (v44 + v42)
    {
      v54 = a3;
      v55 = a2;
      v45 = a4[5];
      v56 = a4[4];
      v46 = vmulq_f32(v45, v45);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
      v47 = re::EventBus::getTypeId<RECollisionDidStartEvent>();
      re::EventBus::publish(v37, v10, v47, (uint64_t)&v54, 0x30uLL, 0);
    }
    v48 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStartEvent>((uint64_t)v37, v10);
    v49 = re::EventBus::getEventInfo<RECollisionStartEvent>((uint64_t)v37);
    if (v49)
      v50 = *(_QWORD *)(v49 + 208);
    else
      v50 = 0;
    if (v50 + v48)
    {
      v54 = a3;
      v55 = a2;
      v51 = a4[5];
      v56 = a4[4];
      v52 = vmulq_f32(v51, v51);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
      v53 = re::EventBus::getTypeId<RECollisionStartEvent>();
      re::EventBus::publish(v37, v10, v53, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v8 && objc_msgSend((id)(v8 + 8), "retainCount") == 1)
    *((_QWORD *)a2 + 5) = 0;
  if (v10)
  {
    if (objc_msgSend((id)(v10 + 8), "retainCount") == 1)
      *((_QWORD *)a3 + 5) = 0;

  }
  if (v8)

}

void re::EngineCollisionEventDelegate::updateCollision(re::EngineCollisionEventDelegate *this, const re::CollisionObject *a2, const re::CollisionObject *a3, float32x4_t *a4)
{
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::EventBus *v16;
  uint64_t updated;
  uint64_t Event;
  uint64_t v19;
  uint64_t Type;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  re::EventBus *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  const re::CollisionObject *v54;
  const re::CollisionObject *v55;
  float32x4_t v56;
  float v57;

  v8 = *((_QWORD *)a2 + 5);
  if (v8)
    v9 = (id)(v8 + 8);
  v10 = *((_QWORD *)a3 + 5);
  if (v10)
    v11 = (id)(v10 + 8);
  if (v8)
  {
    v12 = v8;
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 24);
    }
    while (v12);
    if (!*(_QWORD *)(v13 + 16))
      goto LABEL_12;
    v14 = v8;
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 24);
    }
    while (v14);
    v16 = *(re::EventBus **)(*(_QWORD *)(v15 + 16) + 288);
    if (!v16)
LABEL_12:
      v16 = (re::EventBus *)*((_QWORD *)this + 1);
    updated = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEventEx>((uint64_t)v16, v8);
    Event = re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>((uint64_t)v16);
    if (Event)
      v19 = *(_QWORD *)(Event + 208);
    else
      v19 = 0;
    if (v19 + updated)
    {
      v54 = a2;
      v55 = a3;
      v56.i64[0] = (uint64_t)a4;
      Type = re::EventBus::getTypeId<RECollisionDidUpdateEventEx>();
      re::EventBus::publish(v16, v8, Type, (uint64_t)&v54, 0x18uLL, 0);
    }
    v21 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEvent>((uint64_t)v16, v8);
    v22 = re::EventBus::getEventInfo<RECollisionDidUpdateEvent>((uint64_t)v16);
    if (v22)
      v23 = *(_QWORD *)(v22 + 208);
    else
      v23 = 0;
    if (v23 + v21)
    {
      v54 = a2;
      v55 = a3;
      v24 = a4[5];
      v56 = a4[4];
      v25 = vmulq_f32(v24, v24);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
      v26 = re::EventBus::getTypeId<RECollisionDidUpdateEvent>();
      re::EventBus::publish(v16, v8, v26, (uint64_t)&v54, 0x30uLL, 0);
    }
    v27 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionUpdateEvent>((uint64_t)v16, v8);
    v28 = re::EventBus::getEventInfo<RECollisionUpdateEvent>((uint64_t)v16);
    if (v28)
      v29 = *(_QWORD *)(v28 + 208);
    else
      v29 = 0;
    if (v29 + v27)
    {
      v54 = a2;
      v55 = a3;
      v30 = a4[5];
      v56 = a4[4];
      v31 = vmulq_f32(v30, v30);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
      v32 = re::EventBus::getTypeId<RECollisionUpdateEvent>();
      re::EventBus::publish(v16, v8, v32, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v10)
  {
    v33 = v10;
    do
    {
      v34 = v33;
      v33 = *(_QWORD *)(v33 + 24);
    }
    while (v33);
    if (!*(_QWORD *)(v34 + 16))
      goto LABEL_35;
    v35 = v10;
    do
    {
      v36 = v35;
      v35 = *(_QWORD *)(v35 + 24);
    }
    while (v35);
    v37 = *(re::EventBus **)(*(_QWORD *)(v36 + 16) + 288);
    if (!v37)
LABEL_35:
      v37 = (re::EventBus *)*((_QWORD *)this + 1);
    v38 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEventEx>((uint64_t)v37, v10);
    v39 = re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>((uint64_t)v37);
    if (v39)
      v40 = *(_QWORD *)(v39 + 208);
    else
      v40 = 0;
    if (v40 + v38)
    {
      v54 = a3;
      v55 = a2;
      v56.i64[0] = (uint64_t)a4;
      v41 = re::EventBus::getTypeId<RECollisionDidUpdateEventEx>();
      re::EventBus::publish(v37, v10, v41, (uint64_t)&v54, 0x18uLL, 0);
    }
    v42 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEvent>((uint64_t)v37, v10);
    v43 = re::EventBus::getEventInfo<RECollisionDidUpdateEvent>((uint64_t)v37);
    if (v43)
      v44 = *(_QWORD *)(v43 + 208);
    else
      v44 = 0;
    if (v44 + v42)
    {
      v54 = a3;
      v55 = a2;
      v45 = a4[5];
      v56 = a4[4];
      v46 = vmulq_f32(v45, v45);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
      v47 = re::EventBus::getTypeId<RECollisionDidUpdateEvent>();
      re::EventBus::publish(v37, v10, v47, (uint64_t)&v54, 0x30uLL, 0);
    }
    v48 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionUpdateEvent>((uint64_t)v37, v10);
    v49 = re::EventBus::getEventInfo<RECollisionUpdateEvent>((uint64_t)v37);
    if (v49)
      v50 = *(_QWORD *)(v49 + 208);
    else
      v50 = 0;
    if (v50 + v48)
    {
      v54 = a3;
      v55 = a2;
      v51 = a4[5];
      v56 = a4[4];
      v52 = vmulq_f32(v51, v51);
      v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
      v53 = re::EventBus::getTypeId<RECollisionUpdateEvent>();
      re::EventBus::publish(v37, v10, v53, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v8 && objc_msgSend((id)(v8 + 8), "retainCount") == 1)
    *((_QWORD *)a2 + 5) = 0;
  if (v10)
  {
    if (objc_msgSend((id)(v10 + 8), "retainCount") == 1)
      *((_QWORD *)a3 + 5) = 0;

  }
  if (v8)

}

void re::EngineCollisionEventDelegate::stopCollision(re::EngineCollisionEventDelegate *this, const re::CollisionObject *a2, const re::CollisionObject *a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::EventBus *v14;
  uint64_t v15;
  uint64_t Event;
  uint64_t v17;
  uint64_t Type;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  re::EventBus *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const re::CollisionObject *v36;
  const re::CollisionObject *v37;

  v6 = *((_QWORD *)a2 + 5);
  if (v6)
    v7 = (id)(v6 + 8);
  v8 = *((_QWORD *)a3 + 5);
  if (v8)
    v9 = (id)(v8 + 8);
  if (v6)
  {
    v10 = v6;
    do
    {
      v11 = v10;
      v10 = *(_QWORD *)(v10 + 24);
    }
    while (v10);
    if (!*(_QWORD *)(v11 + 16))
      goto LABEL_12;
    v12 = v6;
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 24);
    }
    while (v12);
    v14 = *(re::EventBus **)(*(_QWORD *)(v13 + 16) + 288);
    if (!v14)
LABEL_12:
      v14 = (re::EventBus *)*((_QWORD *)this + 1);
    v15 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStopEvent>((uint64_t)v14, v6);
    Event = re::EventBus::getEventInfo<RECollisionDidStopEvent>((uint64_t)v14);
    if (Event)
      v17 = *(_QWORD *)(Event + 208);
    else
      v17 = 0;
    if (v17 + v15)
    {
      v36 = a2;
      v37 = a3;
      Type = re::EventBus::getTypeId<RECollisionDidStopEvent>();
      re::EventBus::publish(v14, v6, Type, (uint64_t)&v36, 0x10uLL, 0);
    }
    v19 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStopEvent>((uint64_t)v14, v6);
    v20 = re::EventBus::getEventInfo<RECollisionStopEvent>((uint64_t)v14);
    if (v20)
      v21 = *(_QWORD *)(v20 + 208);
    else
      v21 = 0;
    if (v21 + v19)
    {
      v36 = a2;
      v37 = a3;
      v22 = re::EventBus::getTypeId<RECollisionStopEvent>();
      re::EventBus::publish(v14, v6, v22, (uint64_t)&v36, 0x10uLL, 0);
    }
  }
  if (v8)
  {
    v23 = v8;
    do
    {
      v24 = v23;
      v23 = *(_QWORD *)(v23 + 24);
    }
    while (v23);
    if (!*(_QWORD *)(v24 + 16))
      goto LABEL_30;
    v25 = v8;
    do
    {
      v26 = v25;
      v25 = *(_QWORD *)(v25 + 24);
    }
    while (v25);
    v27 = *(re::EventBus **)(*(_QWORD *)(v26 + 16) + 288);
    if (!v27)
LABEL_30:
      v27 = (re::EventBus *)*((_QWORD *)this + 1);
    v28 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStopEvent>((uint64_t)v27, v8);
    v29 = re::EventBus::getEventInfo<RECollisionDidStopEvent>((uint64_t)v27);
    if (v29)
      v30 = *(_QWORD *)(v29 + 208);
    else
      v30 = 0;
    if (v30 + v28)
    {
      v36 = a3;
      v37 = a2;
      v31 = re::EventBus::getTypeId<RECollisionDidStopEvent>();
      re::EventBus::publish(v27, v8, v31, (uint64_t)&v36, 0x10uLL, 0);
    }
    v32 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStopEvent>((uint64_t)v27, v8);
    v33 = re::EventBus::getEventInfo<RECollisionStopEvent>((uint64_t)v27);
    if (v33)
      v34 = *(_QWORD *)(v33 + 208);
    else
      v34 = 0;
    if (v34 + v32)
    {
      v36 = a3;
      v37 = a2;
      v35 = re::EventBus::getTypeId<RECollisionStopEvent>();
      re::EventBus::publish(v27, v8, v35, (uint64_t)&v36, 0x10uLL, 0);
    }
  }
  if (v6 && objc_msgSend((id)(v6 + 8), "retainCount") == 1)
    *((_QWORD *)a2 + 5) = 0;
  if (v8)
  {
    if (objc_msgSend((id)(v8 + 8), "retainCount") == 1)
      *((_QWORD *)a3 + 5) = 0;

  }
  if (v6)

}

void re::EngineCollisionEventDelegate::~EngineCollisionEventDelegate(re::EngineCollisionEventDelegate *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::EventBus::getEventInfo<RECollisionDidStartEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionDidStartEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::EventInfo::subscriptionCount(re::EventBus::EventInfo *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t i;

  v1 = *((_QWORD *)this + 26);
  v9[0] = (char *)this + 216;
  v2 = *((_QWORD *)this + 29);
  if (v2 >= 0x10)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 27);
    v5 = v2 >> 4;
    while (1)
    {
      v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v4 + v3)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v9[1] = (unsigned __int16)~v6;
      if (v6 != 0xFFFF)
        break;
      v3 += 16;
      if (!--v5)
        return v1;
    }
    v7 = __clz(__rbit64((unsigned __int16)~v6)) + v3;
    for (i = v7; i != -1; v7 = i)
    {
      v1 += *(_QWORD *)(*(_QWORD *)(v9[0] + 8) + 144 * v7 + 136);
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v9);
    }
  }
  return v1;
}

uint64_t re::EventBus::getTypeId<RECollisionDidStartEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionDidStartEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24RECollisionDidStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[31];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidStartEventEx>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionDidStartEventEx>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getTypeId<RECollisionDidStartEventEx>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionDidStartEventEx>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26RECollisionDidStartEventEx" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[33];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidStopEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionDidStopEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getTypeId<RECollisionDidStopEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionDidStopEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"23RECollisionDidStopEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[35];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidUpdateEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionDidUpdateEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getTypeId<RECollisionDidUpdateEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionDidUpdateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25RECollisionDidUpdateEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[37];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionDidUpdateEventEx>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getTypeId<RECollisionDidUpdateEventEx>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionDidUpdateEventEx>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"27RECollisionDidUpdateEventEx" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[39];
}

uint64_t re::EventBus::getEventInfo<RECollisionStartEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionStartEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getTypeId<RECollisionStartEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionStartEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"21RECollisionStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[41];
}

uint64_t re::EventBus::getEventInfo<RECollisionStopEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionStopEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getTypeId<RECollisionStopEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionStopEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"20RECollisionStopEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[43];
}

uint64_t re::EventBus::getEventInfo<RECollisionUpdateEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RECollisionUpdateEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getTypeId<RECollisionUpdateEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RECollisionUpdateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"22RECollisionUpdateEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[45];
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEventEx>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionDidStartEventEx>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionDidStartEvent>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStartEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionStartEvent>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEventEx>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionDidUpdateEvent>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionUpdateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionUpdateEvent>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStopEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionDidStopEvent>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStopEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = re::EventBus::getEventInfo<RECollisionStopEvent>(a1);
  if (result)
  {
    v4 = result;
    if (!a2)
    {
      v6 = result + 88;
      return *(_QWORD *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v4 + 224) + 144 * v5 + 16;
      return *(_QWORD *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_ThrottleComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_352);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_352))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117170, 0);
    *(uint64_t *)((char *)&qword_254117180 + 6) = 0;
    qword_254117180 = 0;
    qword_254117190 = 0;
    qword_254117198 = 0xFFFFFFFFLL;
    qword_254117170 = (uint64_t)&off_24ED7DAA8;
    qword_2541171A0 = (uint64_t)"ThrottleComponent";
    dword_2541171A8 = 0;
    unk_2541171B0 = 0u;
    unk_2541171C0 = 0u;
    unk_2541171D0 = 0u;
    qword_2541171E0 = 0;
    __cxa_guard_release(&_MergedGlobals_352);
  }
  return &qword_254117170;
}

void re::ecs2::initInfo_ThrottleComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x7C4A073DE665C1A6;
  v10[1] = "ThrottleComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254117168);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117168);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254117160 = v8;
      __cxa_guard_release(&qword_254117168);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254117160;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ThrottleComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ThrottleComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ThrottleComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ThrottleComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ThrottleComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A200;
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ThrottleComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ThrottleComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A200;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ThrottleComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ThrottleComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ThrottleComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ThrottleComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ThrottleComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ThrottleComponent>, this);
}

BOOL re::SRTNetworkSyncHelper::readSnapshot()
{
  unsigned int v0;

  v0 = RESyncBitReaderBytesLeft();
  if (v0 >= 0x30)
    RESyncBitReaderReadData();
  return v0 > 0x2F;
}

uint64_t re::SRTNetworkSyncHelper::read(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];

  v4[0] = 0x3F8000003F800000;
  v4[1] = 1065353216;
  v4[2] = 0;
  v4[3] = 0x3F80000000000000;
  v4[4] = 0;
  v4[5] = 0;
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  return MEMORY[0x227691F24](a2, v4, 48);
}

uint64_t re::SRTNetworkSyncHelper::readDelta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _OWORD v5[3];
  char v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)&v9 = 0x3F8000003F800000;
  *((_QWORD *)&v9 + 1) = 1065353216;
  *(_QWORD *)&v10 = 0;
  *((_QWORD *)&v10 + 1) = 0x3F80000000000000;
  v11 = 0uLL;
  result = re::SRTNetworkSyncHelper::readSnapshot();
  if ((_DWORD)result)
  {
    v8 = 0;
    RESyncBitReaderReadBool();
    v7 = 0;
    RESyncBitReaderReadBool();
    v6 = 0;
    RESyncBitReaderReadBool();
    v5[0] = v9;
    v5[1] = v10;
    v5[2] = v11;
    return MEMORY[0x227691F24](a3, v5, 48);
  }
  return result;
}

BOOL re::SRTNetworkSyncHelper::write(uint64_t a1, uint64_t a2)
{
  _BOOL8 Snapshot;
  uint64_t *v4;
  float v5;
  float v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = 0x3F8000003F800000;
  v9 = 1065353216;
  v10 = 0;
  v11 = 0x3F80000000000000;
  v12 = 0;
  v13 = 0;
  Snapshot = re::SRTNetworkSyncHelper::readSnapshot();
  if (Snapshot)
  {
    if ((*(float *)&v8 == 1.0
       || fabsf(*(float *)&v8 + -1.0) < (float)((float)((float)(fabsf(*(float *)&v8) + 1.0) + 1.0) * 0.00001))
      && (*((float *)&v8 + 1) == 1.0
       || fabsf(*((float *)&v8 + 1) + -1.0) < (float)((float)((float)(fabsf(*((float *)&v8 + 1)) + 1.0) + 1.0) * 0.00001)))
    {
      if (*(float *)&v9 == 1.0)
      {
        RESyncBitWriterWriteBool();
LABEL_19:
        MEMORY[0x227691F24](a2, &v10, 4);
        MEMORY[0x227691F24](a2, (char *)&v10 + 4, 4);
        MEMORY[0x227691F24](a2, &v11, 4);
        MEMORY[0x227691F24](a2, (char *)&v11 + 4, 4);
        MEMORY[0x227691F24](a2, &v12, 4);
        MEMORY[0x227691F24](a2, (char *)&v12 + 4, 4);
        MEMORY[0x227691F24](a2, &v13, 4);
        return Snapshot;
      }
      RESyncBitWriterWriteBool();
      if (fabsf(*(float *)&v9 + -1.0) < (float)((float)((float)(fabsf(*(float *)&v9) + 1.0) + 1.0) * 0.00001))
        goto LABEL_19;
    }
    else
    {
      RESyncBitWriterWriteBool();
    }
    if (*(float *)&v8 == *((float *)&v8 + 1)
      || vabds_f32(*(float *)&v8, *((float *)&v8 + 1)) < (float)((float)((float)(fabsf(*(float *)&v8)
                                                                               + fabsf(*((float *)&v8 + 1)))
                                                                       + 1.0)
                                                               * 0.00001))
    {
      if (*(float *)&v8 == *(float *)&v9)
      {
        RESyncBitWriterWriteBool();
        v4 = &v8;
LABEL_18:
        MEMORY[0x227691F24](a2, v4, 4);
        goto LABEL_19;
      }
      v5 = (float)((float)(fabsf(*(float *)&v8) + fabsf(*(float *)&v9)) + 1.0) * 0.00001;
      v6 = vabds_f32(*(float *)&v8, *(float *)&v9);
      RESyncBitWriterWriteBool();
      MEMORY[0x227691F24](a2, &v8, 4);
      if (v6 < v5)
        goto LABEL_19;
    }
    else
    {
      RESyncBitWriterWriteBool();
      MEMORY[0x227691F24](a2, &v8, 4);
    }
    MEMORY[0x227691F24](a2, (char *)&v8 + 4, 4);
    v4 = &v9;
    goto LABEL_18;
  }
  return Snapshot;
}

BOOL re::SRTNetworkSyncHelper::writeDelta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 Snapshot;
  uint32x4_t v5;
  unsigned int v6;
  unsigned int v7;
  uint32x4_t v8;
  unsigned int v9;
  float32x4_t *v11;
  float v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;

  v17.i64[0] = 0x3F8000003F800000;
  v17.i64[1] = 1065353216;
  v18.i64[0] = 0;
  v18.i64[1] = 0x3F80000000000000;
  v19 = 0uLL;
  if (!re::SRTNetworkSyncHelper::readSnapshot())
    return 0;
  v14.i64[0] = 0x3F8000003F800000;
  v14.i64[1] = 1065353216;
  v15.i64[0] = 0;
  v15.i64[1] = 0x3F80000000000000;
  v16 = 0uLL;
  Snapshot = re::SRTNetworkSyncHelper::readSnapshot();
  if (Snapshot)
  {
    v5 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v14, v17));
    v5.i32[3] = v5.i32[2];
    v6 = vmaxvq_u32(v5);
    RESyncBitWriterWriteBool();
    v7 = vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v15, v18)));
    RESyncBitWriterWriteBool();
    v8 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v16, v19));
    v8.i32[3] = v8.i32[2];
    v9 = vmaxvq_u32(v8);
    RESyncBitWriterWriteBool();
    if ((v6 & 0x80000000) == 0)
      goto LABEL_4;
    if ((v14.f32[0] == 1.0
       || fabsf(v14.f32[0] + -1.0) < (float)((float)((float)(fabsf(v14.f32[0]) + 1.0) + 1.0) * 0.00001))
      && (v14.f32[1] == 1.0
       || fabsf(v14.f32[1] + -1.0) < (float)((float)((float)(fabsf(v14.f32[1]) + 1.0) + 1.0) * 0.00001)))
    {
      if (v14.f32[2] == 1.0)
      {
        RESyncBitWriterWriteBool();
        goto LABEL_4;
      }
      RESyncBitWriterWriteBool();
      if (fabsf(v14.f32[2] + -1.0) < (float)((float)((float)(fabsf(v14.f32[2]) + 1.0) + 1.0) * 0.00001))
      {
LABEL_4:
        if ((v7 & 0x80000000) != 0)
        {
          MEMORY[0x227691F24](a3, &v15, 4);
          MEMORY[0x227691F24](a3, &v15.i32[1], 4);
          MEMORY[0x227691F24](a3, &v15.u32[2], 4);
          MEMORY[0x227691F24](a3, (char *)&v15.u64[1] + 4, 4);
          if ((v9 & 0x80000000) != 0)
          {
LABEL_16:
            MEMORY[0x227691F24](a3, &v16, 4);
            MEMORY[0x227691F24](a3, &v16.i32[1], 4);
            MEMORY[0x227691F24](a3, &v16.u32[2], 4);
            return Snapshot;
          }
        }
        else if ((v9 & 0x80000000) != 0)
        {
          goto LABEL_16;
        }
        return Snapshot;
      }
    }
    else
    {
      RESyncBitWriterWriteBool();
    }
    if (v14.f32[0] == v14.f32[1]
      || vabds_f32(v14.f32[0], v14.f32[1]) < (float)((float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[1])) + 1.0)
                                                   * 0.00001))
    {
      if (v14.f32[0] == v14.f32[2])
      {
        RESyncBitWriterWriteBool();
        v11 = &v14;
LABEL_27:
        MEMORY[0x227691F24](a3, v11, 4);
        goto LABEL_4;
      }
      v12 = (float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[2])) + 1.0) * 0.00001;
      v13 = vabds_f32(v14.f32[0], v14.f32[2]);
      RESyncBitWriterWriteBool();
      MEMORY[0x227691F24](a3, &v14, 4);
      if (v13 < v12)
        goto LABEL_4;
    }
    else
    {
      RESyncBitWriterWriteBool();
      MEMORY[0x227691F24](a3, &v14, 4);
    }
    MEMORY[0x227691F24](a3, &v14.i32[1], 4);
    v11 = (float32x4_t *)&v14.u32[2];
    goto LABEL_27;
  }
  return Snapshot;
}

uint64_t re::ecs2::System::setDefaultTaskOptions(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *(_BYTE *)(result + 60) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(result + 52) = v2;
  if (!*(_BYTE *)(result + 68))
  {
    v3 = result;
    if (*(_QWORD *)(result + 96) != -1)
    {
      result = *(_QWORD *)(result + 40);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
        if (result)
          return re::Scheduler::setTaskOptions((re::Scheduler *)result, *(_QWORD *)(v3 + 96), (float *)a2);
      }
    }
  }
  return result;
}

_QWORD *re::ecs2::System::setTaskOptions(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = result;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v4 = result + 9;
  if (*((_BYTE *)result + 68))
  {
    v5 = *a2;
    *((_BYTE *)result + 80) = *((_BYTE *)a2 + 8);
    *v4 = v5;
  }
  else
  {
    *((_BYTE *)result + 68) = 1;
    *v4 = v6;
    *((_DWORD *)result + 20) = v7;
  }
  if (result[12] != -1)
  {
    result = (_QWORD *)result[5];
    if (result)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
      if (result)
        return (_QWORD *)re::Scheduler::setTaskOptions((re::Scheduler *)result, v3[12], (float *)a2);
    }
  }
  return result;
}

float *re::ecs2::System::resetTaskOptions(float *this)
{
  float *v1;

  v1 = this;
  if (*((_BYTE *)this + 68))
    *((_BYTE *)this + 68) = 0;
  if (*((_QWORD *)this + 12) != -1)
  {
    this = (float *)*((_QWORD *)this + 5);
    if (this)
    {
      this = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)this + 80))(this);
      if (this)
        return (float *)re::Scheduler::setTaskOptions((re::Scheduler *)this, *((_QWORD *)v1 + 12), v1 + 13);
    }
  }
  return this;
}

void re::ecs2::System::queueToRun(re::ecs2::System *this, float a2)
{
  uint64_t v3;
  re::Scheduler *v5;
  unint64_t v6;

  *((_BYTE *)this + 86) = 1;
  *((float *)this + 22) = a2;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v5 = (re::Scheduler *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
    if (v5)
    {
      v6 = *((_QWORD *)this + 12);
      if (*((_QWORD *)v5 + 5) > v6)
        re::Scheduler::enqueueTaskWithDeadline(v5, v6, a2);
    }
  }
}

void re::ecs2::System::setTaskEnabled(re::ecs2::System *this, int a2)
{
  uint64_t v4;
  re::Scheduler *v5;

  if (*((unsigned __int8 *)this + 64) != a2)
  {
    *((_BYTE *)this + 64) = a2;
    if (*((_QWORD *)this + 12) != -1)
    {
      v4 = *((_QWORD *)this + 5);
      if (v4)
      {
        v5 = (re::Scheduler *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
        if (v5)
          re::Scheduler::setEnabled(v5, *((_QWORD *)this + 12), a2);
      }
    }
  }
}

void re::ecs2::System::update(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id WeakRetained;
  void *v11;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1[5] + 120))(a1[5]);
  if (v7)
  {
    v8 = (id *)v6;
    v9 = 8 * v7;
    do
    {
      WeakRetained = objc_loadWeakRetained(v8);
      if (WeakRetained)
      {
        v11 = WeakRetained;
        ((void (*)(_QWORD **, uint64_t, uint64_t, uint64_t))(*a1)[11])(a1, (uint64_t)WeakRetained - 8, a2, a3);

      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
}

uint64_t *re::ecs2::allocInfo_ECSService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_353);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_353))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541171F0, 0);
    *(uint64_t *)((char *)&qword_254117200 + 6) = 0;
    qword_254117200 = 0;
    qword_254117210 = 0;
    qword_254117218 = 0xFFFFFFFFLL;
    qword_2541171F0 = (uint64_t)&off_24ED7DAA8;
    qword_254117220 = (uint64_t)"ECSService";
    dword_254117228 = 0;
    unk_254117230 = 0u;
    unk_254117240 = 0u;
    unk_254117250 = 0u;
    qword_254117260 = 0;
    __cxa_guard_release(&_MergedGlobals_353);
  }
  return &qword_2541171F0;
}

void re::ecs2::initInfo_ECSService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD62AE5A64EB00;
  v5[1] = "ECSService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ECSService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_ECSService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ECSService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ECSService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ECSService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ECSService>, this);
}

id re::internal::defaultRetain<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::ecs2::SceneComponentCollectionBase::remove(re::ecs2::SceneComponentCollectionBase *this, re::ecs2::Component *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  re::ecs2::Component *v11;

  v11 = a2;
  v3 = (_QWORD *)((char *)this + 56);
  v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 7, &v11);
  if (v4 == -1)
    return 0;
  if (*(_QWORD *)(*((_QWORD *)this + 8) + 16 * v4 + 8) >= *((_QWORD *)this + 3))
    return 0;
  (*(void (**)(re::ecs2::SceneComponentCollectionBase *))(*(_QWORD *)this + 32))(this);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v3, &v11);
  if (v5 == -1)
    return 0;
  v6 = *((_QWORD *)this + 8) + 16 * v5;
  v9 = *(_QWORD *)(v6 + 8);
  v8 = (_QWORD *)(v6 + 8);
  v7 = v9;
  if (v9 >= *((_QWORD *)this + 3))
    return 0;
  re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt((uint64_t)this + 8, v7);
  (*(void (**)(re::ecs2::SceneComponentCollectionBase *, _QWORD, re::ecs2::Component **))(*(_QWORD *)this + 56))(this, *v8, &v11);
  return 1;
}

uint64_t re::ecs2::SceneComponentCollectionBase::add(re::ecs2::SceneComponentCollectionBase *this, re::ecs2::Component *a2)
{
  uint64_t result;
  unint64_t v4;
  re::ecs2::Component *v5;

  v5 = a2;
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 7, &v5);
  if (result == -1)
  {
    v4 = *((_QWORD *)this + 3);
    goto LABEL_5;
  }
  v4 = *((_QWORD *)this + 3);
  if (*(_QWORD *)(*((_QWORD *)this + 8) + 16 * result + 8) >= v4)
  {
LABEL_5:
    (*(void (**)(re::ecs2::SceneComponentCollectionBase *, unint64_t, re::ecs2::Component **))(*(_QWORD *)this + 24))(this, v4, &v5);
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)this + 1, &v5);
    return (*(uint64_t (**)(re::ecs2::SceneComponentCollectionBase *, unint64_t, re::ecs2::Component **))(*(_QWORD *)this + 48))(this, v4, &v5);
  }
  return result;
}

uint64_t re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24ED71400;
  re::ReadOnlyCollection<re::ecs2::Component *,true>::deinit(a1);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t re::ecs2::SceneComponentCollectionBase::setScene(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  return result;
}

uint64_t *re::ecs2::SceneComponentCollectionBase::willClear(uint64_t *this)
{
  uint64_t *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;

  if (*(_QWORD *)(this[15] + 56))
  {
    v1 = this;
    v2 = this + 1;
    v3 = this[3];
    v9 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v8 = 0;
    re::DynamicArray<float *>::setCapacity(v7, v3);
    ++v8;
    v4 = v1[3];
    if (v4)
    {
      v5 = (_QWORD *)v1[5];
      v6 = 8 * v4;
      do
      {
        re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove(v1 + 7, v5);
        if ((*(_BYTE *)(*(_QWORD *)(*v5 + 16) + 288) & 1) != 0)
          re::DynamicArray<re::TransitionCondition *>::add(v7, v5);
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    (*(void (**)(uint64_t *, _QWORD *))(*v1 + 88))(v1, v7);
    (*(void (**)(uint64_t *, _QWORD *))(*v1 + 96))(v1, v2);
    this = (uint64_t *)v7[0];
    if (v7[0])
    {
      if (v9)
        return (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v7[0] + 40))();
    }
  }
  return this;
}

uint64_t re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  int8x16_t *v4;
  int8x16_t v5;
  int8x8_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result != -1)
  {
    v4 = (int8x16_t *)(*a1 + (result & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v6)
      v7 = -1;
    else
      v7 = 0x80;
    v4->i8[result & 0xF] = v7;
    v8 = a1[2];
    v9 = *(_QWORD *)(a1[1] + 16 * result);
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    a1[5] ^= (v10 >> 31) ^ v10;
    v11 = a1[4];
    if (v6)
      ++v11;
    v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v11;
    if (v8 >= 0x11 && v12 < v8 >> 2)
      return re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(a1, 0);
  }
  return result;
}

uint64_t *re::ecs2::SceneComponentCollectionBase::didInsert(uint64_t *this, unint64_t a2, re::ecs2::Component **a3)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8[5];

  v4 = this;
  v8[0] = a2;
  if (this[3] > a2)
  {
    v5 = a2;
    do
    {
      v6 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v4, v5);
      this = (uint64_t *)re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace(v4 + 7, v6, v8);
      v8[0] = ++v5;
    }
    while (v5 < v4[3]);
  }
  if (*(_QWORD *)(v4[15] + 56))
  {
    re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)v8, a3);
    (*(void (**)(uint64_t *, uint64_t *))(*v4 + 72))(v4, v8);
    v7 = *((_QWORD *)*a3 + 2);
    if ((*(_BYTE *)(v7 + 288) & 1) != 0 && !*(_BYTE *)(v7 + 370))
      (*(void (**)(uint64_t *, uint64_t *))(*v4 + 80))(v4, v8);
    this = (uint64_t *)v8[0];
    if (v8[0])
    {
      if (v8[4])
        return (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v8[0] + 40))();
    }
  }
  return this;
}

uint64_t re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
  {
    if (!a1[7])
    {
    }
    v8 = a1[4];
    if (!v8 || (v9 = a1[2], v9 > 8 * v8))
    {
      result = re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(a1, 1u);
      v9 = a1[2];
    }
    v10 = 0xBF58476D1CE4E5B9;
    v11 = 0x94D049BB133111EBLL;
    v12 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
    v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    v14 = v9 >> 4;
    v15 = *a1;
    v16 = v13 % v14;
    while (1)
    {
      v17 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
      if (v17 < 0x40)
        break;
      if (v16 + 1 == v14)
        v16 = 0;
      else
        ++v16;
      if (v16 == v13 % v14)
      {
        re::internal::assertLog((re::internal *)4, v7, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
        result = _os_crash();
        __break(1u);
        break;
      }
    }
    v18 = v15 + 16 * v16;
    v19 = *(unsigned __int8 *)(v18 + v17) == 255;
    *(_BYTE *)(v18 + v17) = v13 & 0x7F;
    v20 = v17 + 16 * v16;
    v21 = *a3;
    v22 = 16 * v20;
    v23 = (_QWORD *)(a1[1] + 16 * v20);
    *v23 = *a2;
    v23[1] = v21;
    v24 = a1[4] - v19;
    ++a1[3];
    a1[4] = v24;
    v25 = *(_QWORD *)(a1[1] + v22) ^ (*(_QWORD *)(a1[1] + v22) >> 30);
    v26 = ((v25 * v10) ^ ((v25 * v10) >> 27)) * v11;
    a1[5] ^= (v26 >> 31) ^ v26;
  }
  else
  {
    *(_QWORD *)(a1[1] + 16 * result + 8) = *a3;
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionBase::didRemoveAt(re::ecs2::SceneComponentCollectionBase *this, unint64_t a2, re::ecs2::Component **a3)
{
  uint64_t *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v5 = (uint64_t *)((char *)this + 56);
  result = re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove((uint64_t *)this + 7, a3);
  if (*((_QWORD *)this + 3) > a2)
  {
    v7 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, a2);
    result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v5, v7);
    v8 = *((_QWORD *)this + 8) + 16 * result;
    v10 = *(_QWORD *)(v8 + 8);
    v9 = (unint64_t *)(v8 + 8);
    v11 = *((_QWORD *)this + 3);
    if (v10 == v11)
    {
      *v9 = a2;
    }
    else
    {
      v13 = a2;
      if (v11 > a2)
      {
        do
        {
          v12 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, a2);
          result = re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace(v5, v12, (uint64_t *)&v13);
          v13 = ++a2;
        }
        while (a2 < *((_QWORD *)this + 3));
      }
    }
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionBase::didSet(re::ecs2::SceneComponentCollectionBase *this, uint64_t a2, re::ecs2::Component **a3, re::ecs2::Component **a4)
{
  uint64_t *v5;
  uint64_t v7;

  v7 = a2;
  v5 = (uint64_t *)((char *)this + 56);
  re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace((uint64_t *)this + 7, a4, &v7);
  return re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove(v5, a3);
}

uint64_t re::ecs2::SceneComponentCollectionBase::willRemoveAt(uint64_t this, unint64_t a2, re::ecs2::Component **a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(*(_QWORD *)(this + 120) + 56))
  {
    v4 = this;
    re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)v6, a3);
    v5 = *((_QWORD *)*a3 + 2);
    if ((*(_BYTE *)(v5 + 288) & 1) != 0 && !*(_BYTE *)(v5 + 370))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 88))(v4, v6);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 96))(v4, v6);
    this = v6[0];
    if (v6[0])
    {
      if (v6[4])
        return (*(uint64_t (**)(void))(*(_QWORD *)v6[0] + 40))();
    }
  }
  return this;
}

void re::ecs2::SceneComponentCollectionBase::willSet(re::ecs2::SceneComponentCollectionBase *this, uint64_t a2, re::ecs2::Component **a3)
{
  re::internal::assertLog((re::internal *)4, a2, a3, "assertion failure: '%s' (%s:line %i) Not supported.", "!\"Unreachable code\"", "willSet", 161);
  _os_crash();
  __break(1u);
}

void re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(uint64_t a1)
{
  re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ReadOnlyCollection<re::ecs2::Component *,true>::deinit(uint64_t a1)
{
  uint64_t result;
  int v3;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v3;
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v3 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 32) = v3 + 1;
  }
  return result;
}

uint64_t re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 v50;
  unint64_t v51;
  _QWORD *v52;
  int8x16_t v53;
  int8x16_t v54;
  __int128 v55;
  _BYTE v56[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v55 = 0u;
  *(_OWORD *)v56 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v56[16], 0, 32);
  v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v55, v8, v9);
  v11 = a1[2];
  if (v11 < 0x10)
    goto LABEL_12;
  v12 = 0;
  v13 = v11 >> 4;
  v14 = (int8x16_t)xmmword_2260EE390;
  while (1)
  {
    v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
    v16 = (unsigned __int16)~v15;
    if (v15 != 0xFFFF)
      break;
    v12 += 16;
    if (!--v13)
      goto LABEL_12;
  }
  v17 = __clz(__rbit64(v16)) + v12;
  if (v17 == -1)
    goto LABEL_12;
  while (1)
  {
    v27 = a1[1];
    if (*(_QWORD *)&v56[40])
    {
      v28 = *(_QWORD *)&v56[16];
      if (*(_QWORD *)&v56[16])
        goto LABEL_20;
    }
    else
    {
      v53 = v14;
      *(_QWORD *)v56 = 16;
      *(_QWORD *)&v50 = -1;
      *((_QWORD *)&v50 + 1) = -1;
      *(_QWORD *)&v55 = v49;
      *v49 = v50;
      v10 = (_anonymous_namespace_ *)(v49 + 1);
      *((_QWORD *)&v55 + 1) = v10;
      v28 = *(_QWORD *)v56;
      if (*(_QWORD *)v56)
      {
        v51 = 0;
        v52 = (_QWORD *)*((_QWORD *)&v55 + 1);
        v28 = *(_QWORD *)v56;
        do
        {
          *v52 = 0;
          v52[1] = 0;
          v52 += 2;
          ++v51;
        }
        while (v51 < v28);
      }
      v14 = v53;
      *(_QWORD *)&v56[32] = 0;
      *(_QWORD *)&v56[8] = 0;
      *(_OWORD *)&v56[16] = v28;
      if (v28)
      {
LABEL_20:
        v29 = *(_QWORD *)v56;
        if (*(_QWORD *)v56 <= 8 * v28)
          goto LABEL_21;
      }
    }
    v54 = v14;
    v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(&v55, 1);
    v14 = v54;
    v29 = *(_QWORD *)v56;
LABEL_21:
    v30 = (unint64_t *)(v27 + 16 * v17);
    v31 = 0xBF58476D1CE4E5B9 * (*v30 ^ (*v30 >> 30));
    v32 = (0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) ^ ((0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) >> 31);
    v33 = v29 >> 4;
    v34 = v32 % (v29 >> 4);
    v35 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v55 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
    if (v35 >= 0x40)
    {
      do
      {
        if (v34 + 1 == v33)
          v34 = 0;
        else
          ++v34;
        v35 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v55 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
      }
      while (v35 > 0x3F);
    }
    v36 = (uint64_t *)(v30 + 1);
    v37 = v55 + 16 * v34;
    v38 = *(unsigned __int8 *)(v37 + v35) == 255;
    *(_BYTE *)(v37 + v35) = v32 & 0x7F;
    v39 = *v30;
    v40 = *v36;
    v41 = *(_QWORD *)&v56[8];
    v42 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 16 * (v35 + 16 * v34));
    *v42 = v39;
    v42[1] = v40;
    *(_QWORD *)&v56[8] = v41 + 1;
    *(_QWORD *)&v56[16] -= v38;
    v43 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) >> 27));
    *(_QWORD *)&v56[24] ^= (v43 >> 31) ^ v43;
    v44 = v17 >> 4;
    v11 = a1[2];
    if (v17 >> 4 >= v11 >> 4)
      goto LABEL_12;
    v45 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
    if (v45 >= 0x40)
      break;
    v17 = v45 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_29:
    if (v17 == -1)
      goto LABEL_12;
  }
  v46 = 16 * v44;
  v47 = ~v44 + (v11 >> 4);
  while (v47)
  {
    v16 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v46 + 16)), v14)))), (int8x8_t)0x3830282018100800);
    v48 = __clz(__rbit64(v16));
    v46 += 16;
    --v47;
    if (v48 <= 0x3F)
    {
      v17 = v48 + v46;
      goto LABEL_29;
    }
  }
LABEL_12:
  v19 = *(_QWORD *)&v56[40];
  *(_QWORD *)&v56[40] = a1[7];
  result = *(_QWORD *)&v56[40];
  v20 = v55;
  v21 = *(_OWORD *)v56;
  *(_QWORD *)v56 = v11;
  v22 = *a1;
  v23 = a1[1];
  *(_QWORD *)&v55 = *a1;
  *((_QWORD *)&v55 + 1) = v23;
  v24 = *(_OWORD *)&v56[16];
  v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v56[32];
  a1[7] = v19;
  *(_OWORD *)&v56[24] = v25;
  v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v56[8] = v26;
  if (result)
  {
    if (v23)
      *((_QWORD *)&v55 + 1) = 0;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  re::DynamicArray<float *>::setCapacity((_QWORD *)a1, 1uLL);
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, a2);
  return a1;
}

void *re::ecs2::introspect_AnchoringOrientation(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 1;
      *((_QWORD *)v13 + 2) = "Right";
      re::ecs2::introspect_AnchoringOrientation(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 2;
      *((_QWORD *)v15 + 2) = "Left";
      qword_255828928 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 2;
      *((_QWORD *)v17 + 1) = 1;
      *((_QWORD *)v17 + 2) = "Orientation0";
      qword_255828930 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 2;
      *((_QWORD *)v19 + 1) = 2;
      *((_QWORD *)v19 + 2) = "Orientation1";
      qword_255828938 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 255;
      *(_QWORD *)(v21 + 16) = "Any";
      qword_255828940 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_AnchoringOrientation(BOOL)::info, "AnchoringOrientation", 1, 1, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::ecs2::introspect_AnchoringOrientation(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized & 1) != 0)
      return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
    }
  }
  re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_AnchoringOrientation(BOOL)::info, a2);
  v23[0] = 0x9F95A6D022127546;
  v23[1] = (uint64_t)"AnchoringOrientation";
  xmmword_255828970 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
}

double re::internal::defaultConstruct<re::ecs2::AnchoringDescriptor>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  double result;

  v3 = a3;
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + 16) = xmmword_2260E5F10;
  *(_OWORD *)(a3 + 32) = xmmword_2260E5F20;
  *(_OWORD *)(a3 + 48) = xmmword_2260E5F40;
  *(_OWORD *)(a3 + 64) = xmmword_2260E5D70;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = -1;
  *(_OWORD *)(a3 + 104) = xmmword_2260FF4D0;
  *(_BYTE *)(a3 + 120) = -1;
  *(_OWORD *)(a3 + 124) = 0u;
  *(_OWORD *)(a3 + 140) = 0u;
  *(_DWORD *)(a3 + 156) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v3 + 128), 0);
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  v3 += 160;
  re::DynamicString::setCapacity((_QWORD *)v3, 0);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v3 + 48) = 0x100000001;
  return result;
}

double re::internal::defaultDestruct<re::ecs2::AnchoringDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;
  uint64_t v7;

  v5 = (_OWORD *)(a3 + 160);
  v4 = *(_QWORD *)(a3 + 160);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 176));
    result = 0.0;
    *v5 = 0u;
    v5[1] = 0u;
  }
  v7 = *(_QWORD *)(a3 + 128);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 144));
    result = 0.0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::AnchoringDescriptor>(uint64_t a1)
{
  uint64_t v1;
  _anonymous_namespace_ *v2;
  double result;

  v1 = a1;
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 16) = xmmword_2260E5F10;
  *(_OWORD *)(a1 + 32) = xmmword_2260E5F20;
  *(_OWORD *)(a1 + 48) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 64) = xmmword_2260E5D70;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = -1;
  *(_OWORD *)(a1 + 104) = xmmword_2260FF4D0;
  *(_BYTE *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_DWORD *)(a1 + 156) = 0;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v1 + 128), 0);
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  v1 += 160;
  re::DynamicString::setCapacity((_QWORD *)v1, 0);
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v1 + 48) = 0x100000001;
  return result;
}

double re::internal::defaultDestructV2<re::ecs2::AnchoringDescriptor>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;
  uint64_t v5;

  v3 = (_OWORD *)(a1 + 160);
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 176));
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  v5 = *(_QWORD *)(a1 + 128);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 144));
    result = 0.0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_AnchoringComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255834B58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255834B58))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834F98, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_255834FA8 = 0;
    qword_255834FB8 = 0;
    qword_255834FC0 = 0xFFFFFFFFLL;
    qword_255834F98 = (uint64_t)&off_24ED7DAA8;
    qword_255834FC8 = (uint64_t)"AnchoringComponent";
    dword_255834FD0 = 0;
    xmmword_255834FD8 = 0u;
    xmmword_255834FE8 = 0u;
    xmmword_255834FF8 = 0u;
    qword_255835008 = 0;
    __cxa_guard_release(&qword_255834B58);
  }
  return &qword_255834F98;
}

void re::ecs2::initInfo_AnchoringComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t v12;
  const re::IntrospectionBase *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  re::IntrospectionRegistry *v21;
  const re::IntrospectionBase *v22;
  const char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  const re::IntrospectionBase *v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  _anonymous_namespace_ *v42;
  unint64_t v43;
  unint64_t i3;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t v51;
  unint64_t i4;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  re *v62;
  uint64_t *v63;
  re *v64;
  uint64_t *v65;
  re *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  re *v71;
  const re::IntrospectionBase *v72;
  uint64_t *v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  uint64_t *v76;
  uint64_t v77;
  unsigned int *v78;
  _anonymous_namespace_ *v79;
  unint64_t v80;
  unint64_t i;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char v85;
  unsigned __int8 *v86;
  int v87;
  uint64_t v88;
  unint64_t j;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char v93;
  unsigned __int8 *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  const re::IntrospectionBase *v103;
  void *v104;
  uint64_t v105;
  const re::IntrospectionBase *v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  uint64_t *v109;
  uint64_t v110;
  unsigned int *v111;
  _anonymous_namespace_ *v112;
  unint64_t v113;
  unint64_t k;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char v118;
  unsigned __int8 *v119;
  int v120;
  uint64_t v121;
  unint64_t m;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const re::IntrospectionBase *v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  uint64_t *v135;
  uint64_t v136;
  unsigned int *v137;
  _anonymous_namespace_ *v138;
  unint64_t v139;
  unint64_t n;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char v144;
  unsigned __int8 *v145;
  int v146;
  uint64_t v147;
  unint64_t ii;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char v152;
  unsigned __int8 *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  const re::IntrospectionBase *v162;
  uint64_t v163;
  const re::IntrospectionBase *v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  uint64_t *v167;
  uint64_t v168;
  unsigned int *v169;
  _anonymous_namespace_ *v170;
  unint64_t v171;
  unint64_t jj;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char v176;
  unsigned __int8 *v177;
  int v178;
  uint64_t v179;
  unint64_t kk;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char v184;
  unsigned __int8 *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  const re::IntrospectionBase *v191;
  void *v192;
  uint64_t v193;
  uint64_t *v194;
  const re::IntrospectionBase *v195;
  void *v196;
  uint64_t v197;
  const re::IntrospectionBase *v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  uint64_t *v201;
  uint64_t v202;
  unsigned int *v203;
  _anonymous_namespace_ *v204;
  unint64_t v205;
  unint64_t mm;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char v210;
  unsigned __int8 *v211;
  int v212;
  uint64_t v213;
  unint64_t nn;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char v218;
  unsigned __int8 *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const re::IntrospectionBase *v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  uint64_t *v227;
  uint64_t v228;
  unsigned int *v229;
  _anonymous_namespace_ *v230;
  unint64_t v231;
  unint64_t i1;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char v236;
  unsigned __int8 *v237;
  int v238;
  uint64_t v239;
  unint64_t i2;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char v244;
  unsigned __int8 *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  re *v250;
  uint64_t *v251;
  re *v252;
  uint64_t *v253;
  re *v254;
  uint64_t *v255;
  re *v256;
  uint64_t *v257;
  re *v258;
  uint64_t *v259;
  re *v260;
  uint64_t *v261;
  re *v262;
  uint64_t *v263;
  re *v264;
  uint64_t *v265;
  re *v266;
  uint64_t *v267;
  re *v268;
  uint64_t *v269;
  re *v270;
  uint64_t *v271;
  re *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  re *v276;
  uint64_t *v277;
  re *v278;
  uint64_t *v279;
  re *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  re *v284;
  uint64_t *v285;
  re *v286;
  uint64_t *v287;
  re *v288;
  uint64_t *v289;
  re *v290;
  uint64_t *v291;
  re *v292;
  uint64_t *v293;
  re *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  re *v298;
  uint64_t *v299;
  re *v300;
  uint64_t *v301;
  re *v302;
  uint64_t *v303;
  re *v304;
  uint64_t *v305;
  re *v306;
  uint64_t *v307;
  re *v308;
  uint64_t *v309;
  re *v310;
  uint64_t *v311;
  re *v312;
  uint64_t *v313;
  re *v314;
  uint64_t *v315;
  re *v316;
  uint64_t *v317;
  re *v318;
  uint64_t *v319;
  re *v320;
  uint64_t *v321;
  re *v322;
  uint64_t *v323;
  re *v324;
  uint64_t *v325;
  re *v326;
  uint64_t *v327;
  re *v328;
  uint64_t *v329;
  re *v330;
  uint64_t *v331;
  re *v332;
  uint64_t *v333;
  re *v334;
  uint64_t *v335;
  re *v336;
  uint64_t *v337;
  re *v338;
  uint64_t *v339;
  re *v340;
  uint64_t *v341;
  re *v342;
  uint64_t *v343;
  re *v344;
  uint64_t *v345;
  re *v346;
  uint64_t *v347;
  re *v348;
  uint64_t *v349;
  re *v350;
  uint64_t *v351;
  re *v352;
  uint64_t *v353;
  re *v354;
  uint64_t *v355;
  re *v356;
  uint64_t *v357;
  re *v358;
  uint64_t *v359;
  re *v360;
  uint64_t *v361;
  re *v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  re *v366;
  uint64_t *v367;
  re *v368;
  uint64_t *v369;
  re *v370;
  uint64_t *v371;
  re *v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  re *v376;
  uint64_t *v377;
  re *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  StringID v386;
  __int128 v387;
  __int128 v388;
  const char *v389;

  *(_QWORD *)&v388 = 0x21BB1670078CF520;
  *((_QWORD *)&v388 + 1) = "AnchoringComponent";
  re::StringID::destroyString((re::StringID *)&v388);
  *((_OWORD *)this + 2) = v383;
  v4 = atomic_load((unsigned __int8 *)&qword_255834B50);
  if ((v4 & 1) != 0 || (v5 = (re *)__cxa_guard_acquire(&qword_255834B50), !(_DWORD)v5))
  {
LABEL_2:
    *((_QWORD *)this + 2) = 0x22000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 6;
    *((_QWORD *)this + 8) = &qword_255834BF8;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchoringComponent>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchoringComponent>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchoringComponent>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnchoringComponent>;
    re::IntrospectionRegistry::add(this, v3);
    v382 = v383;
    return;
  }
  v6 = re::introspectionAllocator(v5);
  v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = "Component";
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 40) = 3;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_255834BF8 = v8;
  v9 = re::introspectionAllocator((re *)v8);
  v10 = (uint64_t *)qword_255834B48;
  if (qword_255834B48)
    goto LABEL_8;
  v11 = atomic_load((unsigned __int8 *)&qword_255834B38);
  v12 = (uint64_t)"AnchoringDescriptor";
  if ((v11 & 1) == 0)
    goto LABEL_58;
  while (1)
  {
    qword_255834B48 = (uint64_t)&qword_255834F20;
    *(_QWORD *)&v388 = 0x15A7D86CC6325078;
    *((_QWORD *)&v388 + 1) = v12;
    re::StringID::destroyString((re::StringID *)&v388);
    xmmword_255834F40 = v384;
    v14 = atomic_load((unsigned __int8 *)&qword_255834B40);
    if ((v14 & 1) != 0)
      goto LABEL_7;
    v71 = (re *)__cxa_guard_acquire(&qword_255834B40);
    if (!(_DWORD)v71)
      goto LABEL_7;
    v73 = re::introspectionAllocator(v71);
    v74 = atomic_load((unsigned __int8 *)&qword_255834AE8);
    if ((v74 & 1) == 0)
    {
      v250 = (re *)__cxa_guard_acquire(&qword_255834AE8);
      if ((_DWORD)v250)
      {
        v251 = re::introspectionAllocator(v250);
        v252 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v251 + 32))(v251, 24, 8);
        *(_DWORD *)v252 = 1;
        *((_QWORD *)v252 + 1) = 0;
        *((_QWORD *)v252 + 2) = "Camera";
        qword_255834E60 = (uint64_t)v252;
        v253 = re::introspectionAllocator(v252);
        v254 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v253 + 32))(v253, 24, 8);
        *(_DWORD *)v254 = 1;
        *((_QWORD *)v254 + 1) = 1;
        *((_QWORD *)v254 + 2) = "World";
        qword_255834E68 = (uint64_t)v254;
        v255 = re::introspectionAllocator(v254);
        v256 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v255 + 32))(v255, 24, 8);
        *(_DWORD *)v256 = 1;
        *((_QWORD *)v256 + 1) = 2;
        *((_QWORD *)v256 + 2) = "Anchor";
        qword_255834E70 = (uint64_t)v256;
        v257 = re::introspectionAllocator(v256);
        v258 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v257 + 32))(v257, 24, 8);
        *(_DWORD *)v258 = 1;
        *((_QWORD *)v258 + 1) = 3;
        *((_QWORD *)v258 + 2) = "Plane";
        qword_255834E78 = (uint64_t)v258;
        v259 = re::introspectionAllocator(v258);
        v260 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v259 + 32))(v259, 24, 8);
        *(_DWORD *)v260 = 1;
        *((_QWORD *)v260 + 1) = 4;
        *((_QWORD *)v260 + 2) = "Image";
        qword_255834E80 = (uint64_t)v260;
        v261 = re::introspectionAllocator(v260);
        v262 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v261 + 32))(v261, 24, 8);
        *(_DWORD *)v262 = 1;
        *((_QWORD *)v262 + 1) = 5;
        *((_QWORD *)v262 + 2) = "Object";
        qword_255834E88 = (uint64_t)v262;
        v263 = re::introspectionAllocator(v262);
        v264 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v263 + 32))(v263, 24, 8);
        *(_DWORD *)v264 = 1;
        *((_QWORD *)v264 + 1) = 6;
        *((_QWORD *)v264 + 2) = "Face";
        qword_255834E90 = (uint64_t)v264;
        v265 = re::introspectionAllocator(v264);
        v266 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v265 + 32))(v265, 24, 8);
        *(_DWORD *)v266 = 1;
        *((_QWORD *)v266 + 1) = 7;
        *((_QWORD *)v266 + 2) = "Body";
        qword_255834E98 = (uint64_t)v266;
        v267 = re::introspectionAllocator(v266);
        v268 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v267 + 32))(v267, 24, 8);
        *(_DWORD *)v268 = 1;
        *((_QWORD *)v268 + 1) = 8;
        *((_QWORD *)v268 + 2) = "Hand";
        qword_255834EA0 = (uint64_t)v268;
        v269 = re::introspectionAllocator(v268);
        v270 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v269 + 32))(v269, 24, 8);
        *(_DWORD *)v270 = 1;
        *((_QWORD *)v270 + 1) = 9;
        *((_QWORD *)v270 + 2) = "Reserved1";
        qword_255834EA8 = (uint64_t)v270;
        v271 = re::introspectionAllocator(v270);
        v272 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v271 + 32))(v271, 24, 8);
        *(_DWORD *)v272 = 1;
        *((_QWORD *)v272 + 1) = 10;
        *((_QWORD *)v272 + 2) = "Head";
        qword_255834EB0 = (uint64_t)v272;
        v273 = re::introspectionAllocator(v272);
        v274 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v273 + 32))(v273, 24, 8);
        *(_DWORD *)v274 = 2;
        *(_QWORD *)(v274 + 8) = 8;
        *(_QWORD *)(v274 + 16) = "Reserved0";
        qword_255834EB8 = v274;
        __cxa_guard_release(&qword_255834AE8);
      }
    }
    v75 = atomic_load((unsigned __int8 *)&qword_255834AF0);
    if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_255834AF0))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834CF8, "AnchoringDescriptorType", 4, 4, 1, 1);
      qword_255834CF8 = (uint64_t)&off_24ED7D9E8;
      qword_255834D38 = (uint64_t)&unk_2540F7CC0;
      dword_255834D08 = 9;
      __cxa_guard_release(&qword_255834AF0);
    }
    if ((byte_255834AC2 & 1) != 0)
      goto LABEL_90;
    byte_255834AC2 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834CF8, v72);
    *(_QWORD *)&v385 = 0xD3F8AB5ECB755B2CLL;
    *((_QWORD *)&v385 + 1) = "AnchoringDescriptorType";
    *(_QWORD *)&v388 = 208862;
    *((_QWORD *)&v388 + 1) = "int";
    v76 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v388);
    if (v76)
    {
      v77 = *v76;
      re::StringID::destroyString((re::StringID *)&v388);
      v78 = (unsigned int *)qword_255834D38;
      *((_QWORD *)&v387 + 1) = v77;
      re::TypeBuilder::beginEnumType((uint64_t)&v388, (uint64_t *)&v385, 1, 1, (uint64_t)&v387);
      v80 = *v78;
      if ((_DWORD)v80)
      {
        for (i = 0; i < v80; ++i)
        {
          v82 = *(_QWORD *)(*((_QWORD *)v78 + 1) + 8 * i);
          if (*(_DWORD *)v82 == 1)
          {
            v83 = *(char **)(v82 + 16);
            if (v83)
            {
              v84 = *v83;
              if (*v83)
              {
                v85 = v83[1];
                if (v85)
                {
                  v86 = (unsigned __int8 *)(v83 + 2);
                  do
                  {
                    v84 = 31 * v84 + v85;
                    v87 = *v86++;
                    v85 = v87;
                  }
                  while (v87);
                }
              }
            }
            else
            {
              v84 = 0;
            }
            v88 = *(_QWORD *)(v82 + 8);
            *(_QWORD *)&v386.var0 = 2 * v84;
            v386.var1 = v83;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v388, v88, &v386);
            re::StringID::destroyString((re::StringID *)&v386);
            v80 = *v78;
          }
        }
        if (v80)
        {
          for (j = 0; j < v80; ++j)
          {
            v90 = *(_QWORD *)(*((_QWORD *)v78 + 1) + 8 * j);
            if (*(_DWORD *)v90 == 2)
            {
              v91 = *(char **)(v90 + 16);
              if (v91)
              {
                v92 = *v91;
                if (*v91)
                {
                  v93 = v91[1];
                  if (v93)
                  {
                    v94 = (unsigned __int8 *)(v91 + 2);
                    do
                    {
                      v92 = 31 * v92 + v93;
                      v95 = *v94++;
                      v93 = v95;
                    }
                    while (v95);
                  }
                }
              }
              else
              {
                v92 = 0;
              }
              v96 = *(_QWORD *)(v90 + 8);
              *(_QWORD *)&v386.var0 = 2 * v92;
              v386.var1 = v91;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v388, v96, &v386);
              re::StringID::destroyString((re::StringID *)&v386);
              v80 = *v78;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v97);
      xmmword_255834D18 = (__int128)v386;
      re::StringID::destroyString((re::StringID *)&v385);
LABEL_90:
      v98 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
      *(_DWORD *)v98 = 1;
      *(_QWORD *)(v98 + 8) = "type";
      *(_QWORD *)(v98 + 16) = &qword_255834CF8;
      *(_QWORD *)(v98 + 24) = 0;
      *(_QWORD *)(v98 + 32) = 1;
      *(_DWORD *)(v98 + 40) = 0;
      *(_QWORD *)(v98 + 48) = 0;
      *(_QWORD *)(v98 + 56) = 0;
      *(_DWORD *)(v98 + 64) = 0;
      qword_255834EC0 = v98;
      v99 = re::introspectionAllocator((re *)v98);
      v100 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      v101 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v99 + 32))(v99, 72, 8);
      *(_DWORD *)v101 = 1;
      *(_QWORD *)(v101 + 8) = "transform";
      *(_QWORD *)(v101 + 16) = v100;
      *(_QWORD *)(v101 + 24) = 0;
      *(_QWORD *)(v101 + 32) = 0x1000000002;
      *(_DWORD *)(v101 + 40) = 0;
      *(_QWORD *)(v101 + 48) = 0;
      *(_QWORD *)(v101 + 56) = 0;
      *(_DWORD *)(v101 + 64) = 0;
      qword_255834EC8 = v101;
      v102 = re::introspectionAllocator((re *)v101);
      v104 = re::IntrospectionInfo<unsigned char [16]>::get(1, v103);
      v105 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v102 + 32))(v102, 72, 8);
      *(_DWORD *)v105 = 1;
      *(_QWORD *)(v105 + 8) = "anchorIdentifier";
      *(_QWORD *)(v105 + 16) = v104;
      *(_QWORD *)(v105 + 24) = 0;
      *(_QWORD *)(v105 + 32) = 0x5000000003;
      *(_DWORD *)(v105 + 40) = 0;
      *(_QWORD *)(v105 + 48) = 0;
      *(_QWORD *)(v105 + 56) = 0;
      *(_DWORD *)(v105 + 64) = 0;
      qword_255834ED0 = v105;
      v73 = re::introspectionAllocator((re *)v105);
      v107 = atomic_load((unsigned __int8 *)&qword_255834AC8);
      if ((v107 & 1) != 0)
        goto LABEL_91;
      goto LABEL_241;
    }
    re::StringID::destroyString((re::StringID *)&v388);
    re::internal::assertLog((re::internal *)5, v275, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringDescriptorType");
    _os_crash();
    __break(1u);
LABEL_241:
    v276 = (re *)__cxa_guard_acquire(&qword_255834AC8);
    if ((_DWORD)v276)
    {
      v277 = re::introspectionAllocator(v276);
      v278 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v277 + 32))(v277, 24, 8);
      *(_DWORD *)v278 = 1;
      *((_QWORD *)v278 + 1) = 1;
      *((_QWORD *)v278 + 2) = "Horizontal";
      qword_255834B78 = (uint64_t)v278;
      v279 = re::introspectionAllocator(v278);
      v280 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v279 + 32))(v279, 24, 8);
      *(_DWORD *)v280 = 1;
      *((_QWORD *)v280 + 1) = 2;
      *((_QWORD *)v280 + 2) = "Vertical";
      qword_255834B80 = (uint64_t)v280;
      v281 = re::introspectionAllocator(v280);
      v282 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v281 + 32))(v281, 24, 8);
      *(_DWORD *)v282 = 1;
      *(_QWORD *)(v282 + 8) = 255;
      *(_QWORD *)(v282 + 16) = "Any";
      qword_255834B88 = v282;
      __cxa_guard_release(&qword_255834AC8);
    }
LABEL_91:
    v108 = atomic_load((unsigned __int8 *)&qword_255834AD0);
    if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_255834AD0))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834C68, "AnchoringAlignment", 1, 1, 1, 1);
      qword_255834C68 = (uint64_t)&off_24ED7D9E8;
      qword_255834CA8 = (uint64_t)&_MergedGlobals_12;
      dword_255834C78 = 9;
      __cxa_guard_release(&qword_255834AD0);
    }
    if ((_MergedGlobals_154 & 1) != 0)
      goto LABEL_119;
    _MergedGlobals_154 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834C68, v106);
    *(_QWORD *)&v385 = 0x21BB132D812DFEECLL;
    *((_QWORD *)&v385 + 1) = "AnchoringAlignment";
    *(_QWORD *)&v388 = 0x31CD534126;
    *((_QWORD *)&v388 + 1) = "uint8_t";
    v109 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v388);
    if (v109)
    {
      v110 = *v109;
      re::StringID::destroyString((re::StringID *)&v388);
      v111 = (unsigned int *)qword_255834CA8;
      *((_QWORD *)&v387 + 1) = v110;
      re::TypeBuilder::beginEnumType((uint64_t)&v388, (uint64_t *)&v385, 1, 1, (uint64_t)&v387);
      v113 = *v111;
      if ((_DWORD)v113)
      {
        for (k = 0; k < v113; ++k)
        {
          v115 = *(_QWORD *)(*((_QWORD *)v111 + 1) + 8 * k);
          if (*(_DWORD *)v115 == 1)
          {
            v116 = *(char **)(v115 + 16);
            if (v116)
            {
              v117 = *v116;
              if (*v116)
              {
                v118 = v116[1];
                if (v118)
                {
                  v119 = (unsigned __int8 *)(v116 + 2);
                  do
                  {
                    v117 = 31 * v117 + v118;
                    v120 = *v119++;
                    v118 = v120;
                  }
                  while (v120);
                }
              }
            }
            else
            {
              v117 = 0;
            }
            v121 = *(_QWORD *)(v115 + 8);
            *(_QWORD *)&v386.var0 = 2 * v117;
            v386.var1 = v116;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v388, v121, &v386);
            re::StringID::destroyString((re::StringID *)&v386);
            v113 = *v111;
          }
        }
        if (v113)
        {
          for (m = 0; m < v113; ++m)
          {
            v123 = *(_QWORD *)(*((_QWORD *)v111 + 1) + 8 * m);
            if (*(_DWORD *)v123 == 2)
            {
              v124 = *(char **)(v123 + 16);
              if (v124)
              {
                v125 = *v124;
                if (*v124)
                {
                  v126 = v124[1];
                  if (v126)
                  {
                    v127 = (unsigned __int8 *)(v124 + 2);
                    do
                    {
                      v125 = 31 * v125 + v126;
                      v128 = *v127++;
                      v126 = v128;
                    }
                    while (v128);
                  }
                }
              }
              else
              {
                v125 = 0;
              }
              v129 = *(_QWORD *)(v123 + 8);
              *(_QWORD *)&v386.var0 = 2 * v125;
              v386.var1 = v124;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v388, v129, &v386);
              re::StringID::destroyString((re::StringID *)&v386);
              v113 = *v111;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v130);
      xmmword_255834C88 = (__int128)v386;
      re::StringID::destroyString((re::StringID *)&v385);
LABEL_119:
      v131 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
      *(_DWORD *)v131 = 1;
      *(_QWORD *)(v131 + 8) = "alignment";
      *(_QWORD *)(v131 + 16) = &qword_255834C68;
      *(_QWORD *)(v131 + 24) = 0;
      *(_QWORD *)(v131 + 32) = 0x6000000004;
      *(_DWORD *)(v131 + 40) = 0;
      *(_QWORD *)(v131 + 48) = 0;
      *(_QWORD *)(v131 + 56) = 0;
      *(_DWORD *)(v131 + 64) = 0;
      qword_255834ED8 = v131;
      v73 = re::introspectionAllocator((re *)v131);
      v133 = atomic_load((unsigned __int8 *)&qword_255834AD8);
      if ((v133 & 1) != 0)
        goto LABEL_120;
      goto LABEL_246;
    }
    re::StringID::destroyString((re::StringID *)&v388);
    re::internal::assertLog((re::internal *)5, v283, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringAlignment");
    _os_crash();
    __break(1u);
LABEL_246:
    v284 = (re *)__cxa_guard_acquire(&qword_255834AD8);
    if ((_DWORD)v284)
    {
      v285 = re::introspectionAllocator(v284);
      v286 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v285 + 32))(v285, 24, 8);
      *(_DWORD *)v286 = 1;
      *((_QWORD *)v286 + 1) = 1;
      *((_QWORD *)v286 + 2) = "Wall";
      qword_255834BC8 = (uint64_t)v286;
      v287 = re::introspectionAllocator(v286);
      v288 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v287 + 32))(v287, 24, 8);
      *(_DWORD *)v288 = 1;
      *((_QWORD *)v288 + 1) = 2;
      *((_QWORD *)v288 + 2) = "Floor";
      qword_255834BD0 = (uint64_t)v288;
      v289 = re::introspectionAllocator(v288);
      v290 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v289 + 32))(v289, 24, 8);
      *(_DWORD *)v290 = 1;
      *((_QWORD *)v290 + 1) = 4;
      *((_QWORD *)v290 + 2) = "Ceiling";
      qword_255834BD8 = (uint64_t)v290;
      v291 = re::introspectionAllocator(v290);
      v292 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v291 + 32))(v291, 24, 8);
      *(_DWORD *)v292 = 1;
      *((_QWORD *)v292 + 1) = 8;
      *((_QWORD *)v292 + 2) = "Table";
      qword_255834BE0 = (uint64_t)v292;
      v293 = re::introspectionAllocator(v292);
      v294 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v293 + 32))(v293, 24, 8);
      *(_DWORD *)v294 = 1;
      *((_QWORD *)v294 + 1) = 16;
      *((_QWORD *)v294 + 2) = "Seat";
      qword_255834BE8 = (uint64_t)v294;
      v295 = re::introspectionAllocator(v294);
      v296 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v295 + 32))(v295, 24, 8);
      *(_DWORD *)v296 = 1;
      *(_QWORD *)(v296 + 8) = -1;
      *(_QWORD *)(v296 + 16) = "Any";
      qword_255834BF0 = v296;
      __cxa_guard_release(&qword_255834AD8);
    }
LABEL_120:
    v134 = atomic_load((unsigned __int8 *)&qword_255834AE0);
    if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_255834AE0))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834CB0, "AnchoringClassification", 8, 8, 1, 1);
      qword_255834CB0 = (uint64_t)&off_24ED7D9E8;
      qword_255834CF0 = (uint64_t)&unk_2540F7CB0;
      dword_255834CC0 = 9;
      __cxa_guard_release(&qword_255834AE0);
    }
    if ((byte_255834AC1 & 1) != 0)
      goto LABEL_148;
    byte_255834AC1 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834CB0, v132);
    *(_QWORD *)&v385 = 0xBAF40396AEFAB466;
    *((_QWORD *)&v385 + 1) = "AnchoringClassification";
    *(_QWORD *)&v388 = 0x607DD11CB1ALL;
    *((_QWORD *)&v388 + 1) = "uint64_t";
    v135 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v388);
    if (v135)
    {
      v136 = *v135;
      re::StringID::destroyString((re::StringID *)&v388);
      v137 = (unsigned int *)qword_255834CF0;
      *((_QWORD *)&v387 + 1) = v136;
      re::TypeBuilder::beginEnumType((uint64_t)&v388, (uint64_t *)&v385, 1, 1, (uint64_t)&v387);
      v139 = *v137;
      if ((_DWORD)v139)
      {
        for (n = 0; n < v139; ++n)
        {
          v141 = *(_QWORD *)(*((_QWORD *)v137 + 1) + 8 * n);
          if (*(_DWORD *)v141 == 1)
          {
            v142 = *(char **)(v141 + 16);
            if (v142)
            {
              v143 = *v142;
              if (*v142)
              {
                v144 = v142[1];
                if (v144)
                {
                  v145 = (unsigned __int8 *)(v142 + 2);
                  do
                  {
                    v143 = 31 * v143 + v144;
                    v146 = *v145++;
                    v144 = v146;
                  }
                  while (v146);
                }
              }
            }
            else
            {
              v143 = 0;
            }
            v147 = *(_QWORD *)(v141 + 8);
            *(_QWORD *)&v386.var0 = 2 * v143;
            v386.var1 = v142;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v388, v147, &v386);
            re::StringID::destroyString((re::StringID *)&v386);
            v139 = *v137;
          }
        }
        if (v139)
        {
          for (ii = 0; ii < v139; ++ii)
          {
            v149 = *(_QWORD *)(*((_QWORD *)v137 + 1) + 8 * ii);
            if (*(_DWORD *)v149 == 2)
            {
              v150 = *(char **)(v149 + 16);
              if (v150)
              {
                v151 = *v150;
                if (*v150)
                {
                  v152 = v150[1];
                  if (v152)
                  {
                    v153 = (unsigned __int8 *)(v150 + 2);
                    do
                    {
                      v151 = 31 * v151 + v152;
                      v154 = *v153++;
                      v152 = v154;
                    }
                    while (v154);
                  }
                }
              }
              else
              {
                v151 = 0;
              }
              v155 = *(_QWORD *)(v149 + 8);
              *(_QWORD *)&v386.var0 = 2 * v151;
              v386.var1 = v150;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v388, v155, &v386);
              re::StringID::destroyString((re::StringID *)&v386);
              v139 = *v137;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v156);
      xmmword_255834CD0 = (__int128)v386;
      re::StringID::destroyString((re::StringID *)&v385);
LABEL_148:
      v157 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
      *(_DWORD *)v157 = 1;
      *(_QWORD *)(v157 + 8) = "classification";
      *(_QWORD *)(v157 + 16) = &qword_255834CB0;
      *(_QWORD *)(v157 + 24) = 0;
      *(_QWORD *)(v157 + 32) = 0x6800000005;
      *(_DWORD *)(v157 + 40) = 0;
      *(_QWORD *)(v157 + 48) = 0;
      *(_QWORD *)(v157 + 56) = 0;
      *(_DWORD *)(v157 + 64) = 0;
      qword_255834EE0 = v157;
      v158 = re::introspectionAllocator((re *)v157);
      v159 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v160 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v158 + 32))(v158, 72, 8);
      *(_DWORD *)v160 = 1;
      *(_QWORD *)(v160 + 8) = "bounds";
      *(_QWORD *)(v160 + 16) = v159;
      *(_QWORD *)(v160 + 24) = 0;
      *(_QWORD *)(v160 + 32) = 0x7000000006;
      *(_DWORD *)(v160 + 40) = 0;
      *(_QWORD *)(v160 + 48) = 0;
      *(_QWORD *)(v160 + 56) = 0;
      *(_DWORD *)(v160 + 64) = 0;
      qword_255834EE8 = v160;
      v161 = re::introspectionAllocator((re *)v160);
      re::ecs2::introspect_AnchoringOrientation((re::ecs2 *)1, v162);
      v163 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v161 + 32))(v161, 72, 8);
      *(_DWORD *)v163 = 1;
      *(_QWORD *)(v163 + 8) = "orientation";
      *(_QWORD *)(v163 + 16) = &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
      *(_QWORD *)(v163 + 24) = 0;
      *(_QWORD *)(v163 + 32) = 0x7800000007;
      *(_DWORD *)(v163 + 40) = 0;
      *(_QWORD *)(v163 + 48) = 0;
      *(_QWORD *)(v163 + 56) = 0;
      *(_DWORD *)(v163 + 64) = 0;
      qword_255834EF0 = v163;
      v73 = re::introspectionAllocator((re *)v163);
      v165 = atomic_load((unsigned __int8 *)&qword_255834AF8);
      if ((v165 & 1) != 0)
        goto LABEL_149;
      goto LABEL_251;
    }
    re::StringID::destroyString((re::StringID *)&v388);
    re::internal::assertLog((re::internal *)5, v297, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringClassification");
    _os_crash();
    __break(1u);
LABEL_251:
    v298 = (re *)__cxa_guard_acquire(&qword_255834AF8);
    if ((_DWORD)v298)
    {
      v299 = re::introspectionAllocator(v298);
      v300 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v299 + 32))(v299, 24, 8);
      *(_DWORD *)v300 = 1;
      *((_QWORD *)v300 + 1) = 0;
      *((_QWORD *)v300 + 2) = "Origin";
      qword_255835010 = (uint64_t)v300;
      v301 = re::introspectionAllocator(v300);
      v302 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v301 + 32))(v301, 24, 8);
      *(_DWORD *)v302 = 1;
      *((_QWORD *)v302 + 1) = 1;
      *((_QWORD *)v302 + 2) = "Palm";
      qword_255835018 = (uint64_t)v302;
      v303 = re::introspectionAllocator(v302);
      v304 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v303 + 32))(v303, 24, 8);
      *(_DWORD *)v304 = 1;
      *((_QWORD *)v304 + 1) = 2;
      *((_QWORD *)v304 + 2) = "IndexFingerTip";
      qword_255835020 = (uint64_t)v304;
      v305 = re::introspectionAllocator(v304);
      v306 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v305 + 32))(v305, 24, 8);
      *(_DWORD *)v306 = 1;
      *((_QWORD *)v306 + 1) = 3;
      *((_QWORD *)v306 + 2) = "ThumbTip";
      qword_255835028 = (uint64_t)v306;
      v307 = re::introspectionAllocator(v306);
      v308 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v307 + 32))(v307, 24, 8);
      *(_DWORD *)v308 = 1;
      *((_QWORD *)v308 + 1) = 4;
      *((_QWORD *)v308 + 2) = "AboveHand";
      qword_255835030 = (uint64_t)v308;
      v309 = re::introspectionAllocator(v308);
      v310 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v309 + 32))(v309, 24, 8);
      *(_DWORD *)v310 = 1;
      *((_QWORD *)v310 + 1) = 5;
      *((_QWORD *)v310 + 2) = "ThumbKnuckle";
      qword_255835038 = (uint64_t)v310;
      v311 = re::introspectionAllocator(v310);
      v312 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v311 + 32))(v311, 24, 8);
      *(_DWORD *)v312 = 1;
      *((_QWORD *)v312 + 1) = 6;
      *((_QWORD *)v312 + 2) = "ThumbIntermediateBase";
      qword_255835040 = (uint64_t)v312;
      v313 = re::introspectionAllocator(v312);
      v314 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v313 + 32))(v313, 24, 8);
      *(_DWORD *)v314 = 1;
      *((_QWORD *)v314 + 1) = 7;
      *((_QWORD *)v314 + 2) = "ThumbIntermediateTip";
      qword_255835048 = (uint64_t)v314;
      v315 = re::introspectionAllocator(v314);
      v316 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v315 + 32))(v315, 24, 8);
      *(_DWORD *)v316 = 1;
      *((_QWORD *)v316 + 1) = 8;
      *((_QWORD *)v316 + 2) = "IndexFingerMetacarpal";
      qword_255835050 = (uint64_t)v316;
      v317 = re::introspectionAllocator(v316);
      v318 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v317 + 32))(v317, 24, 8);
      *(_DWORD *)v318 = 1;
      *((_QWORD *)v318 + 1) = 9;
      *((_QWORD *)v318 + 2) = "IndexFingerKnuckle";
      qword_255835058 = (uint64_t)v318;
      v319 = re::introspectionAllocator(v318);
      v320 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v319 + 32))(v319, 24, 8);
      *(_DWORD *)v320 = 1;
      *((_QWORD *)v320 + 1) = 10;
      *((_QWORD *)v320 + 2) = "IndexFingerIntermediateBase";
      qword_255835060 = (uint64_t)v320;
      v321 = re::introspectionAllocator(v320);
      v322 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v321 + 32))(v321, 24, 8);
      *(_DWORD *)v322 = 1;
      *((_QWORD *)v322 + 1) = 11;
      *((_QWORD *)v322 + 2) = "IndexFingerIntermediateTip";
      qword_255835068 = (uint64_t)v322;
      v323 = re::introspectionAllocator(v322);
      v324 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v323 + 32))(v323, 24, 8);
      *(_DWORD *)v324 = 1;
      *((_QWORD *)v324 + 1) = 12;
      *((_QWORD *)v324 + 2) = "MiddleFingerMetacarpal";
      qword_255835070 = (uint64_t)v324;
      v325 = re::introspectionAllocator(v324);
      v326 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v325 + 32))(v325, 24, 8);
      *(_DWORD *)v326 = 1;
      *((_QWORD *)v326 + 1) = 13;
      *((_QWORD *)v326 + 2) = "MiddleFingerKnuckle";
      qword_255835078 = (uint64_t)v326;
      v327 = re::introspectionAllocator(v326);
      v328 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v327 + 32))(v327, 24, 8);
      *(_DWORD *)v328 = 1;
      *((_QWORD *)v328 + 1) = 14;
      *((_QWORD *)v328 + 2) = "MiddleFingerIntermediateBase";
      qword_255835080 = (uint64_t)v328;
      v329 = re::introspectionAllocator(v328);
      v330 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v329 + 32))(v329, 24, 8);
      *(_DWORD *)v330 = 1;
      *((_QWORD *)v330 + 1) = 15;
      *((_QWORD *)v330 + 2) = "MiddleFingerIntermediateTip";
      qword_255835088 = (uint64_t)v330;
      v331 = re::introspectionAllocator(v330);
      v332 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v331 + 32))(v331, 24, 8);
      *(_DWORD *)v332 = 1;
      *((_QWORD *)v332 + 1) = 16;
      *((_QWORD *)v332 + 2) = "MiddleFingerTip";
      qword_255835090 = (uint64_t)v332;
      v333 = re::introspectionAllocator(v332);
      v334 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v333 + 32))(v333, 24, 8);
      *(_DWORD *)v334 = 1;
      *((_QWORD *)v334 + 1) = 17;
      *((_QWORD *)v334 + 2) = "RingFingerMetacarpal";
      qword_255835098 = (uint64_t)v334;
      v335 = re::introspectionAllocator(v334);
      v336 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v335 + 32))(v335, 24, 8);
      *(_DWORD *)v336 = 1;
      *((_QWORD *)v336 + 1) = 18;
      *((_QWORD *)v336 + 2) = "RingFingerKnuckle";
      qword_2558350A0 = (uint64_t)v336;
      v337 = re::introspectionAllocator(v336);
      v338 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v337 + 32))(v337, 24, 8);
      *(_DWORD *)v338 = 1;
      *((_QWORD *)v338 + 1) = 19;
      *((_QWORD *)v338 + 2) = "RingFingerIntermediateBase";
      qword_2558350A8 = (uint64_t)v338;
      v339 = re::introspectionAllocator(v338);
      v340 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v339 + 32))(v339, 24, 8);
      *(_DWORD *)v340 = 1;
      *((_QWORD *)v340 + 1) = 20;
      *((_QWORD *)v340 + 2) = "RingFingerIntermediateTip";
      qword_2558350B0 = (uint64_t)v340;
      v341 = re::introspectionAllocator(v340);
      v342 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v341 + 32))(v341, 24, 8);
      *(_DWORD *)v342 = 1;
      *((_QWORD *)v342 + 1) = 21;
      *((_QWORD *)v342 + 2) = "RingFingerTip";
      qword_2558350B8 = (uint64_t)v342;
      v343 = re::introspectionAllocator(v342);
      v344 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v343 + 32))(v343, 24, 8);
      *(_DWORD *)v344 = 1;
      *((_QWORD *)v344 + 1) = 22;
      *((_QWORD *)v344 + 2) = "LittleFingerMetacarpal";
      qword_2558350C0 = (uint64_t)v344;
      v345 = re::introspectionAllocator(v344);
      v346 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v345 + 32))(v345, 24, 8);
      *(_DWORD *)v346 = 1;
      *((_QWORD *)v346 + 1) = 23;
      *((_QWORD *)v346 + 2) = "LittleFingerKnuckle";
      qword_2558350C8 = (uint64_t)v346;
      v347 = re::introspectionAllocator(v346);
      v348 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v347 + 32))(v347, 24, 8);
      *(_DWORD *)v348 = 1;
      *((_QWORD *)v348 + 1) = 24;
      *((_QWORD *)v348 + 2) = "LittleFingerIntermediateBase";
      qword_2558350D0 = (uint64_t)v348;
      v349 = re::introspectionAllocator(v348);
      v350 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v349 + 32))(v349, 24, 8);
      *(_DWORD *)v350 = 1;
      *((_QWORD *)v350 + 1) = 25;
      *((_QWORD *)v350 + 2) = "LittleFingerIntermediateTip";
      qword_2558350D8 = (uint64_t)v350;
      v351 = re::introspectionAllocator(v350);
      v352 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v351 + 32))(v351, 24, 8);
      *(_DWORD *)v352 = 1;
      *((_QWORD *)v352 + 1) = 26;
      *((_QWORD *)v352 + 2) = "LittleFingerTip";
      qword_2558350E0 = (uint64_t)v352;
      v353 = re::introspectionAllocator(v352);
      v354 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v353 + 32))(v353, 24, 8);
      *(_DWORD *)v354 = 1;
      *((_QWORD *)v354 + 1) = 27;
      *((_QWORD *)v354 + 2) = "ForearmWrist";
      qword_2558350E8 = (uint64_t)v354;
      v355 = re::introspectionAllocator(v354);
      v356 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v355 + 32))(v355, 24, 8);
      *(_DWORD *)v356 = 1;
      *((_QWORD *)v356 + 1) = 28;
      *((_QWORD *)v356 + 2) = "ForearmArm";
      qword_2558350F0 = (uint64_t)v356;
      v357 = re::introspectionAllocator(v356);
      v358 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v357 + 32))(v357, 24, 8);
      *(_DWORD *)v358 = 2;
      *((_QWORD *)v358 + 1) = 1;
      *((_QWORD *)v358 + 2) = "ReservedLocation0";
      qword_2558350F8 = (uint64_t)v358;
      v359 = re::introspectionAllocator(v358);
      v360 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v359 + 32))(v359, 24, 8);
      *(_DWORD *)v360 = 2;
      *((_QWORD *)v360 + 1) = 2;
      *((_QWORD *)v360 + 2) = "ReservedLocation1";
      qword_255835100 = (uint64_t)v360;
      v361 = re::introspectionAllocator(v360);
      v362 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v361 + 32))(v361, 24, 8);
      *(_DWORD *)v362 = 2;
      *((_QWORD *)v362 + 1) = 3;
      *((_QWORD *)v362 + 2) = "ReservedLocation2";
      qword_255835108 = (uint64_t)v362;
      v363 = re::introspectionAllocator(v362);
      v364 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v363 + 32))(v363, 24, 8);
      *(_DWORD *)v364 = 2;
      *(_QWORD *)(v364 + 8) = 4;
      *(_QWORD *)(v364 + 16) = "ReservedLocation3";
      qword_255835110 = v364;
      __cxa_guard_release(&qword_255834AF8);
    }
LABEL_149:
    v166 = atomic_load((unsigned __int8 *)&qword_255834B00);
    if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_255834B00))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834D40, "AnchoringLocation", 4, 4, 1, 1);
      qword_255834D40 = (uint64_t)&off_24ED7D9E8;
      qword_255834D80 = (uint64_t)&unk_2540F7CD0;
      dword_255834D50 = 9;
      __cxa_guard_release(&qword_255834B00);
    }
    if ((byte_255834AC3 & 1) != 0)
      goto LABEL_177;
    byte_255834AC3 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834D40, v164);
    *(_QWORD *)&v385 = 0x119AAE97CF798784;
    *((_QWORD *)&v385 + 1) = "AnchoringLocation";
    *(_QWORD *)&v388 = 208862;
    *((_QWORD *)&v388 + 1) = "int";
    v167 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v388);
    if (v167)
    {
      v168 = *v167;
      re::StringID::destroyString((re::StringID *)&v388);
      v169 = (unsigned int *)qword_255834D80;
      *((_QWORD *)&v387 + 1) = v168;
      re::TypeBuilder::beginEnumType((uint64_t)&v388, (uint64_t *)&v385, 1, 1, (uint64_t)&v387);
      v171 = *v169;
      if ((_DWORD)v171)
      {
        for (jj = 0; jj < v171; ++jj)
        {
          v173 = *(_QWORD *)(*((_QWORD *)v169 + 1) + 8 * jj);
          if (*(_DWORD *)v173 == 1)
          {
            v174 = *(char **)(v173 + 16);
            if (v174)
            {
              v175 = *v174;
              if (*v174)
              {
                v176 = v174[1];
                if (v176)
                {
                  v177 = (unsigned __int8 *)(v174 + 2);
                  do
                  {
                    v175 = 31 * v175 + v176;
                    v178 = *v177++;
                    v176 = v178;
                  }
                  while (v178);
                }
              }
            }
            else
            {
              v175 = 0;
            }
            v179 = *(_QWORD *)(v173 + 8);
            *(_QWORD *)&v386.var0 = 2 * v175;
            v386.var1 = v174;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v388, v179, &v386);
            re::StringID::destroyString((re::StringID *)&v386);
            v171 = *v169;
          }
        }
        if (v171)
        {
          for (kk = 0; kk < v171; ++kk)
          {
            v181 = *(_QWORD *)(*((_QWORD *)v169 + 1) + 8 * kk);
            if (*(_DWORD *)v181 == 2)
            {
              v182 = *(char **)(v181 + 16);
              if (v182)
              {
                v183 = *v182;
                if (*v182)
                {
                  v184 = v182[1];
                  if (v184)
                  {
                    v185 = (unsigned __int8 *)(v182 + 2);
                    do
                    {
                      v183 = 31 * v183 + v184;
                      v186 = *v185++;
                      v184 = v186;
                    }
                    while (v186);
                  }
                }
              }
              else
              {
                v183 = 0;
              }
              v187 = *(_QWORD *)(v181 + 8);
              *(_QWORD *)&v386.var0 = 2 * v183;
              v386.var1 = v182;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v388, v187, &v386);
              re::StringID::destroyString((re::StringID *)&v386);
              v171 = *v169;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v188);
      xmmword_255834D60 = (__int128)v386;
      re::StringID::destroyString((re::StringID *)&v385);
LABEL_177:
      v189 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
      *(_DWORD *)v189 = 1;
      *(_QWORD *)(v189 + 8) = "location";
      *(_QWORD *)(v189 + 16) = &qword_255834D40;
      *(_QWORD *)(v189 + 24) = 0;
      *(_QWORD *)(v189 + 32) = 0x7C00000008;
      *(_DWORD *)(v189 + 40) = 0;
      *(_QWORD *)(v189 + 48) = 0;
      *(_QWORD *)(v189 + 56) = 0;
      *(_DWORD *)(v189 + 64) = 0;
      qword_255834EF8 = v189;
      v190 = re::introspectionAllocator((re *)v189);
      v192 = re::IntrospectionInfo<re::DynamicString>::get(1, v191);
      v193 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v190 + 32))(v190, 72, 8);
      *(_DWORD *)v193 = 1;
      *(_QWORD *)(v193 + 8) = "resourceGroup";
      *(_QWORD *)(v193 + 16) = v192;
      *(_QWORD *)(v193 + 24) = 0;
      *(_QWORD *)(v193 + 32) = 0x8000000009;
      *(_DWORD *)(v193 + 40) = 0;
      *(_QWORD *)(v193 + 48) = 0;
      *(_QWORD *)(v193 + 56) = 0;
      *(_DWORD *)(v193 + 64) = 0;
      qword_255834F00 = v193;
      v194 = re::introspectionAllocator((re *)v193);
      v196 = re::IntrospectionInfo<re::DynamicString>::get(1, v195);
      v197 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v194 + 32))(v194, 72, 8);
      *(_DWORD *)v197 = 1;
      *(_QWORD *)(v197 + 8) = "resourceName";
      *(_QWORD *)(v197 + 16) = v196;
      *(_QWORD *)(v197 + 24) = 0;
      *(_QWORD *)(v197 + 32) = 0xA00000000ALL;
      *(_DWORD *)(v197 + 40) = 0;
      *(_QWORD *)(v197 + 48) = 0;
      *(_QWORD *)(v197 + 56) = 0;
      *(_DWORD *)(v197 + 64) = 0;
      qword_255834F08 = v197;
      v73 = re::introspectionAllocator((re *)v197);
      v199 = atomic_load((unsigned __int8 *)&qword_255834B18);
      if ((v199 & 1) != 0)
        goto LABEL_178;
      goto LABEL_256;
    }
    re::StringID::destroyString((re::StringID *)&v388);
    re::internal::assertLog((re::internal *)5, v365, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringLocation");
    _os_crash();
    __break(1u);
LABEL_256:
    v366 = (re *)__cxa_guard_acquire(&qword_255834B18);
    if ((_DWORD)v366)
    {
      v367 = re::introspectionAllocator(v366);
      v368 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v367 + 32))(v367, 24, 8);
      *(_DWORD *)v368 = 1;
      *((_QWORD *)v368 + 1) = 0;
      *((_QWORD *)v368 + 2) = "None";
      qword_255834BA8 = (uint64_t)v368;
      v369 = re::introspectionAllocator(v368);
      v370 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v369 + 32))(v369, 24, 8);
      *(_DWORD *)v370 = 1;
      *((_QWORD *)v370 + 1) = 1;
      *((_QWORD *)v370 + 2) = "GroupName";
      qword_255834BB0 = (uint64_t)v370;
      v371 = re::introspectionAllocator(v370);
      v372 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v371 + 32))(v371, 24, 8);
      *(_DWORD *)v372 = 1;
      *((_QWORD *)v372 + 1) = 2;
      *((_QWORD *)v372 + 2) = "BundleName";
      qword_255834BB8 = (uint64_t)v372;
      v373 = re::introspectionAllocator(v372);
      v374 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v373 + 32))(v373, 24, 8);
      *(_DWORD *)v374 = 1;
      *(_QWORD *)(v374 + 8) = 3;
      *(_QWORD *)(v374 + 16) = "URL";
      qword_255834BC0 = v374;
      __cxa_guard_release(&qword_255834B18);
    }
LABEL_178:
    v200 = atomic_load((unsigned __int8 *)&qword_255834B20);
    if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_255834B20))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834DD0, "AnchoringResourceStyle", 4, 4, 1, 1);
      qword_255834DD0 = (uint64_t)&off_24ED7D9E8;
      qword_255834E10 = (uint64_t)&unk_2540F7CF0;
      dword_255834DE0 = 9;
      __cxa_guard_release(&qword_255834B20);
    }
    if ((byte_255834AC5 & 1) != 0)
      goto LABEL_206;
    byte_255834AC5 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834DD0, v198);
    *(_QWORD *)&v385 = 0x496E67FA88263CACLL;
    *((_QWORD *)&v385 + 1) = "AnchoringResourceStyle";
    *(_QWORD *)&v388 = 0x607DD0F01DCLL;
    *((_QWORD *)&v388 + 1) = "uint32_t";
    v201 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v388);
    if (v201)
    {
      v202 = *v201;
      re::StringID::destroyString((re::StringID *)&v388);
      v203 = (unsigned int *)qword_255834E10;
      *((_QWORD *)&v387 + 1) = v202;
      re::TypeBuilder::beginEnumType((uint64_t)&v388, (uint64_t *)&v385, 1, 1, (uint64_t)&v387);
      v205 = *v203;
      if ((_DWORD)v205)
      {
        for (mm = 0; mm < v205; ++mm)
        {
          v207 = *(_QWORD *)(*((_QWORD *)v203 + 1) + 8 * mm);
          if (*(_DWORD *)v207 == 1)
          {
            v208 = *(char **)(v207 + 16);
            if (v208)
            {
              v209 = *v208;
              if (*v208)
              {
                v210 = v208[1];
                if (v210)
                {
                  v211 = (unsigned __int8 *)(v208 + 2);
                  do
                  {
                    v209 = 31 * v209 + v210;
                    v212 = *v211++;
                    v210 = v212;
                  }
                  while (v212);
                }
              }
            }
            else
            {
              v209 = 0;
            }
            v213 = *(_QWORD *)(v207 + 8);
            *(_QWORD *)&v386.var0 = 2 * v209;
            v386.var1 = v208;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v388, v213, &v386);
            re::StringID::destroyString((re::StringID *)&v386);
            v205 = *v203;
          }
        }
        if (v205)
        {
          for (nn = 0; nn < v205; ++nn)
          {
            v215 = *(_QWORD *)(*((_QWORD *)v203 + 1) + 8 * nn);
            if (*(_DWORD *)v215 == 2)
            {
              v216 = *(char **)(v215 + 16);
              if (v216)
              {
                v217 = *v216;
                if (*v216)
                {
                  v218 = v216[1];
                  if (v218)
                  {
                    v219 = (unsigned __int8 *)(v216 + 2);
                    do
                    {
                      v217 = 31 * v217 + v218;
                      v220 = *v219++;
                      v218 = v220;
                    }
                    while (v220);
                  }
                }
              }
              else
              {
                v217 = 0;
              }
              v221 = *(_QWORD *)(v215 + 8);
              *(_QWORD *)&v386.var0 = 2 * v217;
              v386.var1 = v216;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v388, v221, &v386);
              re::StringID::destroyString((re::StringID *)&v386);
              v205 = *v203;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v222);
      xmmword_255834DF0 = (__int128)v386;
      re::StringID::destroyString((re::StringID *)&v385);
LABEL_206:
      v223 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
      *(_DWORD *)v223 = 1;
      *(_QWORD *)(v223 + 8) = "resourceType";
      *(_QWORD *)(v223 + 16) = &qword_255834DD0;
      *(_QWORD *)(v223 + 24) = 0;
      *(_QWORD *)(v223 + 32) = 0xD00000000DLL;
      *(_DWORD *)(v223 + 40) = 0;
      *(_QWORD *)(v223 + 48) = 0;
      *(_QWORD *)(v223 + 56) = 0;
      *(_DWORD *)(v223 + 64) = 0;
      qword_255834F10 = v223;
      v73 = re::introspectionAllocator((re *)v223);
      v225 = atomic_load((unsigned __int8 *)&qword_255834B28);
      if ((v225 & 1) != 0)
        goto LABEL_207;
      goto LABEL_261;
    }
    re::StringID::destroyString((re::StringID *)&v388);
    re::internal::assertLog((re::internal *)5, v375, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringResourceStyle");
    _os_crash();
    __break(1u);
LABEL_261:
    v376 = (re *)__cxa_guard_acquire(&qword_255834B28);
    if ((_DWORD)v376)
    {
      v377 = re::introspectionAllocator(v376);
      v378 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v377 + 32))(v377, 24, 8);
      *(_DWORD *)v378 = 1;
      *((_QWORD *)v378 + 1) = 0;
      *((_QWORD *)v378 + 2) = "None";
      qword_255834B68 = (uint64_t)v378;
      v379 = re::introspectionAllocator(v378);
      v380 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v379 + 32))(v379, 24, 8);
      *(_DWORD *)v380 = 1;
      *(_QWORD *)(v380 + 8) = 1;
      *(_QWORD *)(v380 + 16) = "Isolated";
      qword_255834B70 = v380;
      __cxa_guard_release(&qword_255834B28);
    }
LABEL_207:
    v226 = atomic_load((unsigned __int8 *)&qword_255834B30);
    if ((v226 & 1) == 0 && __cxa_guard_acquire(&qword_255834B30))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834E18, "AnchoringPhysicsSimulation", 4, 4, 1, 1);
      qword_255834E18 = (uint64_t)&off_24ED7D9E8;
      qword_255834E58 = (uint64_t)&unk_2540F7D00;
      dword_255834E28 = 9;
      __cxa_guard_release(&qword_255834B30);
    }
    if ((byte_255834AC6 & 1) != 0)
      goto LABEL_235;
    byte_255834AC6 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834E18, v224);
    *(_QWORD *)&v385 = 0x1F203909CD802C82;
    *((_QWORD *)&v385 + 1) = "AnchoringPhysicsSimulation";
    *(_QWORD *)&v388 = 208862;
    *((_QWORD *)&v388 + 1) = "int";
    v227 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v388);
    if (!v227)
      break;
    v228 = *v227;
    re::StringID::destroyString((re::StringID *)&v388);
    v229 = (unsigned int *)qword_255834E58;
    *((_QWORD *)&v387 + 1) = v228;
    re::TypeBuilder::beginEnumType((uint64_t)&v388, (uint64_t *)&v385, 1, 1, (uint64_t)&v387);
    v231 = *v229;
    if ((_DWORD)v231)
    {
      for (i1 = 0; i1 < v231; ++i1)
      {
        v233 = *(_QWORD *)(*((_QWORD *)v229 + 1) + 8 * i1);
        if (*(_DWORD *)v233 == 1)
        {
          v234 = *(char **)(v233 + 16);
          if (v234)
          {
            v235 = *v234;
            if (*v234)
            {
              v236 = v234[1];
              if (v236)
              {
                v237 = (unsigned __int8 *)(v234 + 2);
                do
                {
                  v235 = 31 * v235 + v236;
                  v238 = *v237++;
                  v236 = v238;
                }
                while (v238);
              }
            }
          }
          else
          {
            v235 = 0;
          }
          v239 = *(_QWORD *)(v233 + 8);
          *(_QWORD *)&v386.var0 = 2 * v235;
          v386.var1 = v234;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v388, v239, &v386);
          re::StringID::destroyString((re::StringID *)&v386);
          v231 = *v229;
        }
      }
      if (v231)
      {
        for (i2 = 0; i2 < v231; ++i2)
        {
          v241 = *(_QWORD *)(*((_QWORD *)v229 + 1) + 8 * i2);
          if (*(_DWORD *)v241 == 2)
          {
            v242 = *(char **)(v241 + 16);
            if (v242)
            {
              v243 = *v242;
              if (*v242)
              {
                v244 = v242[1];
                if (v244)
                {
                  v245 = (unsigned __int8 *)(v242 + 2);
                  do
                  {
                    v243 = 31 * v243 + v244;
                    v246 = *v245++;
                    v244 = v246;
                  }
                  while (v246);
                }
              }
            }
            else
            {
              v243 = 0;
            }
            v247 = *(_QWORD *)(v241 + 8);
            *(_QWORD *)&v386.var0 = 2 * v243;
            v386.var1 = v242;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v388, v247, &v386);
            re::StringID::destroyString((re::StringID *)&v386);
            v231 = *v229;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v248);
    xmmword_255834E38 = (__int128)v386;
    re::StringID::destroyString((re::StringID *)&v385);
LABEL_235:
    v249 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
    *(_DWORD *)v249 = 1;
    *(_QWORD *)(v249 + 8) = "physicsSimulation";
    *(_QWORD *)(v249 + 16) = &qword_255834E18;
    *(_QWORD *)(v249 + 24) = 0;
    *(_QWORD *)(v249 + 32) = 0xD40000000ELL;
    *(_DWORD *)(v249 + 40) = 0;
    *(_QWORD *)(v249 + 48) = 0;
    *(_QWORD *)(v249 + 56) = 0;
    *(_DWORD *)(v249 + 64) = 0;
    qword_255834F18 = v249;
    __cxa_guard_release(&qword_255834B40);
LABEL_7:
    qword_255834F30 = 0xE000000008;
    v10 = &qword_255834F20;
    dword_255834F38 = 16;
    word_255834F3C = 0;
    dword_255834F58 = 12;
    *(_QWORD *)&xmmword_255834F60 = &qword_255834EC0;
    *((_QWORD *)&xmmword_255834F60 + 1) = re::internal::defaultConstruct<re::ecs2::AnchoringDescriptor>;
    *(_QWORD *)&xmmword_255834F70 = re::internal::defaultDestruct<re::ecs2::AnchoringDescriptor>;
    *((_QWORD *)&xmmword_255834F70 + 1) = 0;
    *(_QWORD *)&xmmword_255834F80 = 0;
    *((_QWORD *)&xmmword_255834F80 + 1) = re::internal::defaultConstructV2<re::ecs2::AnchoringDescriptor>;
    qword_255834F90 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::AnchoringDescriptor>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834F20, v13);
    v388 = v384;
LABEL_8:
    v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = "descriptor";
    *(_QWORD *)(v15 + 16) = v10;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = 0x2000000001;
    *(_DWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0;
    *(_DWORD *)(v15 + 64) = 0;
    qword_255834C00 = v15;
    v16 = re::introspectionAllocator((re *)v15);
    v17 = atomic_load((unsigned __int8 *)&qword_255834B60);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255834B60))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834C28, 0);
      *(uint64_t *)((char *)&qword_255834C38 + 6) = 0;
      qword_255834C38 = 0;
      *(_QWORD *)&xmmword_255834C48 = 0;
      *((_QWORD *)&xmmword_255834C48 + 1) = 0xFFFFFFFFLL;
      qword_255834C28 = (uint64_t)&off_24ED2DDF8;
      qword_255834C60 = 0;
      re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_255834C58);
      qword_255834C28 = (uint64_t)&off_24ED71458;
      __cxa_guard_release(&qword_255834B60);
    }
    if ((byte_255834AC7 & 1) == 0)
    {
      v18 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      if ((byte_255834AC7 & 1) == 0)
      {
        v19 = v18;
        byte_255834AC7 = 1;
        v20 = *(_DWORD *)(v18 + 24);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834C28, 0);
        qword_255834C38 = 0x500000000DLL;
        dword_255834C40 = v20;
        word_255834C44 = 0;
        *(_QWORD *)&xmmword_255834C48 = 0;
        *((_QWORD *)&xmmword_255834C48 + 1) = 0xFFFFFFFFLL;
        qword_255834C58 = v19;
        qword_255834C60 = 0;
        qword_255834C28 = (uint64_t)&off_24ED71458;
        re::IntrospectionRegistry::add(v21, v22);
        re::getPrettyTypeName((re *)&qword_255834C28, (const re::IntrospectionBase *)&v388);
        if ((BYTE8(v388) & 1) != 0)
          v23 = v389;
        else
          v23 = (char *)&v388 + 9;
        if ((_QWORD)v388 && (BYTE8(v388) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v388 + 40))();
        v385 = *(_OWORD *)(v19 + 32);
        v24 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v386);
        if (v24)
        {
          v25 = *v24;
          *((_QWORD *)&v384 + 1) = v25;
        }
        else
        {
          v387 = v385;
          re::TypeBuilder::beginOptionalType((uint64_t)&v388, (uint64_t *)&v386, 0x50uLL, 0x10uLL, &v387);
          re::TypeBuilder::setOptionalAccessors((uint64_t)&v388, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v26);
        }
        xmmword_255834C48 = v384;
        re::StringID::destroyString((re::StringID *)&v386);
      }
    }
    v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
    *(_DWORD *)v27 = 1;
    v12 = (uint64_t)&qword_255834B08;
    *(_QWORD *)(v27 + 8) = "previousWorldTransform";
    *(_QWORD *)(v27 + 16) = &qword_255834C28;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 32) = 0x11000000002;
    *(_DWORD *)(v27 + 40) = 0;
    *(_QWORD *)(v27 + 48) = 0;
    *(_QWORD *)(v27 + 56) = 0;
    *(_DWORD *)(v27 + 64) = 0;
    qword_255834C08 = v27;
    v28 = re::introspectionAllocator((re *)v27);
    v30 = re::introspect_BOOL((re *)1, v29);
    v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = "isRequired";
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 32) = 0x16000000003;
    *(_DWORD *)(v31 + 40) = 0;
    *(_QWORD *)(v31 + 48) = 0;
    *(_QWORD *)(v31 + 56) = 0;
    *(_DWORD *)(v31 + 64) = 0;
    qword_255834C10 = v31;
    v32 = re::introspectionAllocator((re *)v31);
    v34 = re::introspect_float((re *)1, v33);
    v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = "scaleFactor";
    *(_QWORD *)(v35 + 16) = v34;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = 0x16400000004;
    *(_DWORD *)(v35 + 40) = 0;
    *(_QWORD *)(v35 + 48) = 0;
    *(_QWORD *)(v35 + 56) = 0;
    *(_DWORD *)(v35 + 64) = 0;
    qword_255834C18 = v35;
    v9 = re::introspectionAllocator((re *)v35);
    v37 = atomic_load((unsigned __int8 *)&qword_255834B08);
    if ((v37 & 1) == 0)
    {
      v62 = (re *)__cxa_guard_acquire(&qword_255834B08);
      if ((_DWORD)v62)
      {
        v63 = re::introspectionAllocator(v62);
        v64 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v63 + 32))(v63, 24, 8);
        v12 = 1;
        *(_DWORD *)v64 = 1;
        *((_QWORD *)v64 + 1) = 0;
        *((_QWORD *)v64 + 2) = "Once";
        qword_255834B90 = (uint64_t)v64;
        v65 = re::introspectionAllocator(v64);
        v66 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v65 + 32))(v65, 24, 8);
        *(_DWORD *)v66 = 1;
        *((_QWORD *)v66 + 1) = 1;
        *((_QWORD *)v66 + 2) = "Continuous";
        qword_255834B98 = (uint64_t)v66;
        v67 = re::introspectionAllocator(v66);
        v68 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 24, 8);
        *(_DWORD *)v68 = 1;
        *(_QWORD *)(v68 + 8) = 2;
        *(_QWORD *)(v68 + 16) = "Predicted";
        qword_255834BA0 = v68;
        __cxa_guard_release(&qword_255834B08);
      }
    }
    v38 = atomic_load((unsigned __int8 *)&qword_255834B10);
    if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_255834B10))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255834D88, "AnchoringMode", 4, 4, 1, 1);
      qword_255834D88 = (uint64_t)&off_24ED7D9E8;
      qword_255834DC8 = (uint64_t)&unk_2540F7CE0;
      dword_255834D98 = 9;
      __cxa_guard_release(&qword_255834B10);
    }
    if ((byte_255834AC4 & 1) != 0)
      goto LABEL_50;
    byte_255834AC4 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255834D88, v36);
    *(_QWORD *)&v385 = 0xDCF039AB5F8CD860;
    *((_QWORD *)&v385 + 1) = "AnchoringMode";
    *(_QWORD *)&v388 = 208862;
    *((_QWORD *)&v388 + 1) = "int";
    v39 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v388);
    if (v39)
    {
      v40 = *v39;
      re::StringID::destroyString((re::StringID *)&v388);
      v41 = (unsigned int *)qword_255834DC8;
      *((_QWORD *)&v387 + 1) = v40;
      re::TypeBuilder::beginEnumType((uint64_t)&v388, (uint64_t *)&v385, 1, 1, (uint64_t)&v387);
      v43 = *v41;
      if ((_DWORD)v43)
      {
        for (i3 = 0; i3 < v43; ++i3)
        {
          v45 = *(_QWORD *)(*((_QWORD *)v41 + 1) + 8 * i3);
          if (*(_DWORD *)v45 == 1)
          {
            v46 = *(char **)(v45 + 16);
            if (v46)
            {
              v47 = *v46;
              if (*v46)
              {
                v48 = v46[1];
                if (v48)
                {
                  v49 = (unsigned __int8 *)(v46 + 2);
                  do
                  {
                    v47 = 31 * v47 + v48;
                    v50 = *v49++;
                    v48 = v50;
                  }
                  while (v50);
                }
              }
            }
            else
            {
              v47 = 0;
            }
            v51 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)&v386.var0 = 2 * v47;
            v386.var1 = v46;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v388, v51, &v386);
            re::StringID::destroyString((re::StringID *)&v386);
            v43 = *v41;
          }
        }
        if (v43)
        {
          for (i4 = 0; i4 < v43; ++i4)
          {
            v53 = *(_QWORD *)(*((_QWORD *)v41 + 1) + 8 * i4);
            if (*(_DWORD *)v53 == 2)
            {
              v54 = *(char **)(v53 + 16);
              if (v54)
              {
                v55 = *v54;
                if (*v54)
                {
                  v56 = v54[1];
                  if (v56)
                  {
                    v57 = (unsigned __int8 *)(v54 + 2);
                    do
                    {
                      v55 = 31 * v55 + v56;
                      v58 = *v57++;
                      v56 = v58;
                    }
                    while (v58);
                  }
                }
              }
              else
              {
                v55 = 0;
              }
              v59 = *(_QWORD *)(v53 + 8);
              *(_QWORD *)&v386.var0 = 2 * v55;
              v386.var1 = v54;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v388, v59, &v386);
              re::StringID::destroyString((re::StringID *)&v386);
              v43 = *v41;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v388, v60);
      xmmword_255834DA8 = (__int128)v386;
      re::StringID::destroyString((re::StringID *)&v385);
LABEL_50:
      v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v61 = 1;
      *(_QWORD *)(v61 + 8) = "mode";
      *(_QWORD *)(v61 + 16) = &qword_255834D88;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0x10000000005;
      *(_DWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_255834C20 = v61;
      __cxa_guard_release(&qword_255834B50);
      goto LABEL_2;
    }
    re::StringID::destroyString((re::StringID *)&v388);
    re::internal::assertLog((re::internal *)5, v69, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringMode");
    _os_crash();
    __break(1u);
LABEL_58:
    if (__cxa_guard_acquire(&qword_255834B38))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255834F20, 0);
      *(_QWORD *)(v70 + 22) = 0;
      qword_255834F30 = 0;
      *(_QWORD *)&xmmword_255834F40 = 0;
      *((_QWORD *)&xmmword_255834F40 + 1) = 0xFFFFFFFFLL;
      qword_255834F20 = (uint64_t)&off_24ED7DAA8;
      qword_255834F50 = v12;
      dword_255834F58 = 0;
      xmmword_255834F60 = 0u;
      xmmword_255834F70 = 0u;
      xmmword_255834F80 = 0u;
      qword_255834F90 = 0;
      __cxa_guard_release(&qword_255834B38);
    }
  }
  re::StringID::destroyString((re::StringID *)&v388);
  re::internal::assertLog((re::internal *)5, v381, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringPhysicsSimulation");
  _os_crash();
  __break(1u);
}

_QWORD *re::internal::defaultConstruct<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AnchoringComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  v5 = (_OWORD *)(a3 + 192);
  v4 = *(_QWORD *)(a3 + 192);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 200) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 208));
    *v5 = 0u;
    v5[1] = 0u;
  }
  v6 = *(_QWORD *)(a3 + 160);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 176));
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::AnchoringComponent>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)(a1 + 192);
  v2 = *(_QWORD *)(a1 + 192);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 200) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 208));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *(_QWORD *)(a1 + 160);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 176));
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_AnchoringComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchoringComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchoringComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchoringComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchoringComponent>, this);
}

_QWORD *re::IntrospectionOptional<re::Matrix4x4<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Matrix4x4<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::Matrix4x4<float>>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Matrix4x4<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Matrix4x4<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Matrix4x4<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 16;
  if (!v2)
    return 0;
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, __int128 *a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a2)
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = a2[3];
    v2 = (_OWORD *)(a1 + 16);
    if (*(_BYTE *)a1)
    {
      v3 = *a2;
      v4 = a2[1];
      v5 = a2[3];
      *(_OWORD *)(a1 + 48) = a2[2];
      *(_OWORD *)(a1 + 64) = v5;
      *v2 = v3;
      *(_OWORD *)(a1 + 32) = v4;
    }
    else
    {
      *(_BYTE *)a1 = 1;
      *v2 = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(_QWORD *)&v3 = v9;
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 64) = v10;
    }
  }
  else if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
  }
  return *(double *)&v3;
}

_QWORD *re::make::shared::unsafelyInplace<re::ecs2::AnchoringComponent>(_QWORD *a1)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;

  bzero(a1, 0x220uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = off_24ED5AA58;
  *((_DWORD *)a1 + 8) = 1;
  *((_OWORD *)a1 + 3) = xmmword_2260E5F10;
  *((_OWORD *)a1 + 4) = xmmword_2260E5F20;
  *((_OWORD *)a1 + 5) = xmmword_2260E5F40;
  *((_OWORD *)a1 + 6) = xmmword_2260E5D70;
  a1[14] = 0;
  a1[15] = 0;
  *((_BYTE *)a1 + 128) = -1;
  *(_OWORD *)(a1 + 17) = xmmword_2260FF4D0;
  *((_BYTE *)a1 + 152) = -1;
  *(_OWORD *)((char *)a1 + 156) = 0u;
  *(_OWORD *)((char *)a1 + 172) = 0u;
  *((_DWORD *)a1 + 47) = 0;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 20, 0);
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  re::DynamicString::setCapacity(a1 + 24, 0);
  a1[28] = 0;
  a1[29] = 0;
  a1[30] = 0x100000001;
  *((_DWORD *)a1 + 64) = 1;
  *((_BYTE *)a1 + 272) = 0;
  *((_BYTE *)a1 + 352) = 1;
  *((_DWORD *)a1 + 89) = 1065353216;
  *((_BYTE *)a1 + 368) = 0;
  *((_BYTE *)a1 + 448) = 0;
  *((_BYTE *)a1 + 528) = 0;
  return a1;
}

void re::ecs2::ComponentTypeRegistry::init(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  unsigned __int8 v3;
  _UNKNOWN **v4;
  _QWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;

  v2 = this + 29;
  os_unfair_lock_lock(this + 29);
  if (!LOBYTE(this->_os_unfair_lock_opaque))
  {
    v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if ((v3 & 1) == 0)
    {
      v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      if (v11)
      {
        re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
        v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      }
    }
    v5 = v4[64];
    v6 = (_QWORD *)v5[8];
    v7 = (_DWORD *)*v6;
    if (*(_DWORD *)*v6 != 2)
    {
      v8 = (_DWORD **)(v6 + 1);
      v9 = *((unsigned int *)v5 + 14) - 1;
      do
      {
        v10 = *v8++;
        v7 = v10;
        --v9;
      }
      while (*v10 != 2);
    }
    *(_QWORD *)&this[26]._os_unfair_lock_opaque = v7;
    *((_QWORD *)v7 + 1) = this + 22;
    LOBYTE(this->_os_unfair_lock_opaque) = 1;
  }
  os_unfair_lock_unlock(v2);
}

void re::ecs2::ComponentTypeRegistry::deinit(re::ecs2::ComponentTypeRegistry *this)
{
  os_unfair_lock_s *v2;
  re *v3;
  std::__shared_mutex_base *v4;
  unint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t i;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  unint64_t *v14;
  __n128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 *v20;
  _BYTE v21[16];
  uint64_t v22;

  v2 = (os_unfair_lock_s *)((char *)this + 116);
  os_unfair_lock_lock((os_unfair_lock_t)this + 29);
  if (*(_BYTE *)this)
  {
    re::CustomPolymorphicTable::clear((_QWORD *)this + 6);
    v3 = (re *)re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)this + 48);
    v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
    *(_QWORD *)&v13 = 0x6DAE480279BALL;
    *((_QWORD *)&v13 + 1) = "Component";
    re::TypeInfo::TypeInfo((uint64_t)v21, (uint64_t)&v17);
    re::StringID::destroyString((re::StringID *)&v13);
    v5 = (*(_DWORD *)(v22 + 80) - 1);
    v20 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(&v16, v5);
    ++v19;
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        re::TypeInfo::derivedClass((re::TypeInfo *)v21, i, (uint64_t)&v13);
        v8 = *v14;
        v15.n128_u64[0] = v13;
        v15.n128_u64[1] = v8;
        re::DynamicArray<re::TypeID>::add((_anonymous_namespace_ *)&v16, &v15);
      }
    }
    if (v18)
    {
      v9 = v20;
      v10 = 16 * v18;
      do
      {
        v11 = *v9++;
        v13 = v11;
        v10 -= 16;
      }
      while (v10);
    }
    if (v16 && v20)
      (*(void (**)(void))(*v16 + 40))();
    std::__shared_mutex_base::unlock(v4);
    v12 = *((_QWORD *)this + 1);
    if (v12)
    {
      if (*((_QWORD *)this + 5))
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 1) = 0;
      ++*((_DWORD *)this + 8);
    }
    atomic_store(1u, (unsigned __int16 *)this + 56);
    *(_BYTE *)this = 0;
  }
  os_unfair_lock_unlock(v2);
}

uint64_t re::DynamicArray<re::IntrospectionPolymorphicType>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        v6 = (_QWORD *)(v3 + 8);
        do
        {
          re::SerializedReference<re::IntrospectionBase const*>::reset(v6);
          v6 += 5;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

__n128 re::DynamicArray<re::TypeID>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TypeID>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

char *re::ecs2::ComponentTypeRegistry::instance(re::ecs2::ComponentTypeRegistry *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    re::ecs2::ComponentTypeRegistry::instance(void)::s_instance = 0;
    qword_2558289B8 = 0;
    unk_2558289C0 = 0;
    qword_2558289B0 = 0;
    dword_2558289C8 = 0;
    qword_2558289F8 = 0;
    dword_255828A00 = 0;
    qword_255828A08 = 0;
    unk_255828A10 = 0;
    unk_2558289D0 = 0u;
    unk_2558289E0 = 0u;
    dword_2558289F0 = 0;
    word_255828A18 = 1;
    dword_255828A1C = 0;
    re::ecs2::ComponentTypeRegistry::init((os_unfair_lock_s *)&re::ecs2::ComponentTypeRegistry::instance(void)::s_instance);
  }
  return &re::ecs2::ComponentTypeRegistry::instance(void)::s_instance;
}

uint64_t re::ecs2::ComponentTypeRegistry::add(os_unfair_lock_s *this, re::ecs2::ComponentTypeBase *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  const char *v15;
  uint64_t v16;
  const re::IntrospectionBase *v17;
  re *v18;
  std::__shared_mutex_base *v19;
  uint64_t *v20;
  const StringID *v21;
  re *v23[2];
  re::ecs2::ComponentTypeBase *v24;
  StringID buf[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  v5 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  if (!v5)
    goto LABEL_9;
  v6 = *(uint64_t **)&this[10]._os_unfair_lock_opaque;
  v7 = 8 * v5;
  while (1)
  {
    v8 = *v6;
    v9 = re::StringID::operator==((_QWORD *)(*v6 + 24), (_QWORD *)a2 + 3);
    if (v9)
      break;
    ++v6;
    v7 -= 8;
    if (!v7)
      goto LABEL_9;
  }
  if (v8)
  {
    v10 = *re::ecsCoreLogObjects((re *)v9);
    v11 = 0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *((_QWORD *)a2 + 4);
      buf[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315138;
      *(_QWORD *)(&buf[0].var0 + 1) = v12;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Cannot register component type '%s'. A different component type with the same name is already registered.", (uint8_t *)buf, 0xCu);
      v11 = 0;
    }
  }
  else
  {
LABEL_9:
    v13 = (unsigned __int16 *)&this[28];
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *((_WORD *)v24 + 8) = v14;
    re::DynamicArray<re::TransitionCondition *>::add(&this[2]._os_unfair_lock_opaque, &v24);
    v15 = (const char *)*((_QWORD *)v24 + 4);
    v16 = *((_QWORD *)v24 + 3) >> 1;
    v17 = (const re::IntrospectionBase *)(*(uint64_t (**)(re::ecs2::ComponentTypeBase *))(*(_QWORD *)v24 + 48))(v24);
    v18 = (re *)re::CustomPolymorphicTable::addType((re::CustomPolymorphicTable *)&this[12], v15, v17, v16, 0);
    v19 = re::introspectionSharedMutex(v18);
    std::__shared_mutex_base::lock(v19);
    (*(void (**)(re **__return_ptr))(*(_QWORD *)v24 + 56))(v23);
    v20 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)&buf[0].var1);
    v21 = (const StringID *)((char *)v24 + 24);
    if (!re::StringID::operator==(v20, (_QWORD *)v24 + 3))
    {
      re::StringID::destroyString((re::StringID *)buf);
    }
    std::__shared_mutex_base::unlock(v19);
    v11 = 1;
  }
  os_unfair_lock_unlock(v4);
  return v11;
}

uint64_t re::ecs2::ComponentTypeRegistry::remove(os_unfair_lock_s *this, const re::ecs2::ComponentTypeBase *a2)
{
  os_unfair_lock_s *v4;
  _BOOL8 v5;
  unint64_t v6;
  const re::ecs2::ComponentTypeBase **v7;
  uint64_t v8;
  uint64_t v9;
  const re::ecs2::ComponentTypeBase **v10;
  const re::ecs2::ComponentTypeBase *v11;
  const void *v12;
  size_t v13;
  const re::ecs2::ComponentTypeBase **v14;
  unint64_t v15;
  uint64_t v16;
  const re::ecs2::ComponentTypeBase **v17;
  const re::IntrospectionBase *v18;
  re *v19;
  std::__shared_mutex_base *v20;
  NSObject *v21;
  uint64_t v22;
  char *v24;
  uint8_t buf[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  v6 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  if (!v6)
    goto LABEL_18;
  v7 = *(const re::ecs2::ComponentTypeBase ***)&this[10]._os_unfair_lock_opaque;
  v24 = (char *)&v7[v6];
  v8 = 8 * v6;
  v9 = 8 * v6;
  v10 = v7;
  while (1)
  {
    v11 = *v10;
    v5 = re::StringID::operator==((_QWORD *)*v10 + 3, (_QWORD *)a2 + 3);
    if (v5)
      break;
    ++v10;
    v9 -= 8;
    if (!v9)
      goto LABEL_18;
  }
  if (v11)
  {
    v14 = v7;
    while (*v14 != a2)
    {
      ++v14;
      v8 -= 8;
      if (!v8)
      {
        v14 = &v7[v6];
        break;
      }
    }
    v15 = v14 - v7;
    if (v15 != v6)
    {
      if (v6 <= v15)
      {
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v16 = v6 - 1;
      if (v6 - 1 > v15)
      {
        v17 = &v7[v15];
        v12 = v17 + 1;
        v13 = v24 - (char *)(v17 + 1);
        if (v24 != (char *)(v17 + 1))
        {
          memmove(v17, v12, v13);
          v16 = *(_QWORD *)&this[6]._os_unfair_lock_opaque - 1;
        }
      }
      *(_QWORD *)&this[6]._os_unfair_lock_opaque = v16;
      ++this[8]._os_unfair_lock_opaque;
    }
    v18 = (const re::IntrospectionBase *)(*(uint64_t (**)(const re::ecs2::ComponentTypeBase *, const void *, size_t))(*(_QWORD *)a2 + 48))(a2, v12, v13);
    v19 = re::CustomPolymorphicTable::removeType((re *)&this[12], v18);
    v20 = re::introspectionSharedMutex(v19);
    std::__shared_mutex_base::lock(v20);
    (*(void (**)(uint8_t *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(_QWORD *)a2 + 56))(buf, a2);
    std::__shared_mutex_base::unlock(v20);
  }
  else
  {
LABEL_18:
    v21 = *re::ecsCoreLogObjects((re *)v5);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *((_QWORD *)a2 + 4);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "Cannot unregister component type '%s'. The component type is not registered.", buf, 0xCu);
    }
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t re::ecs2::ComponentTypeRegistry::componentTypeWithHash(os_unfair_lock_s *this, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  v5 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  if (v5)
  {
    v6 = *(uint64_t **)&this[10]._os_unfair_lock_opaque;
    v7 = 8 * v5;
    while (1)
    {
      v8 = *v6;
      if (a2 == *(_QWORD *)(*v6 + 24) >> 1)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v8;
}

uint64_t re::ecs2::ComponentTypeRegistry::componentTypeWithName(os_unfair_lock_s *this, const re::StringID *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  v5 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  if (v5)
  {
    v6 = *(uint64_t **)&this[10]._os_unfair_lock_opaque;
    v7 = 8 * v5;
    while (1)
    {
      v8 = *v6;
      if (re::StringID::operator==((_QWORD *)(*v6 + 24), a2))
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v8;
}

uint64_t re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo(os_unfair_lock_s *this, const re::IntrospectionBase *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  v5 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  if (v5)
  {
    v6 = *(_QWORD **)&this[10]._os_unfair_lock_opaque;
    v7 = 8 * v5;
    while (1)
    {
      v8 = *v6;
      if ((const re::IntrospectionBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 48))(*v6) == a2)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v8;
}

_QWORD *re::DynamicArray<re::TypeID>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::ecs2::EntityHandle::reset(id *this)
{
  _QWORD *v2;
  uint64_t v3;

  objc_destroyWeak(this);
  *this = 0;
  this[1] = 0;
  v2 = this[2];
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      if ((v2[1] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v3 + 40))(*v2, v2[2]);
      *(_OWORD *)v2 = 0u;
      *((_OWORD *)v2 + 1) = 0u;
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
    this[2] = 0;
  }
}

uint64_t re::ecs2::EntityHandle::EntityHandle(uint64_t a1, uint64_t a2)
{
  objc_initWeak((id *)a1, 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  re::ecs2::EntityHandle::reset((id *)a1);
  objc_storeWeak((id *)a1, (id)(a2 + 8));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 296);
  return a1;
}

{
  uint64_t v4;
  id to;

  objc_initWeak((id *)a1, 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  to = 0;
  objc_moveWeak(&to, (id *)a1);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a1, (id *)a2);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2, &to);
  objc_destroyWeak(&to);
  return a1;
}

id *re::ecs2::EntityHandle::EntityHandle(id *this, const re::ecs2::EntityHandle *a2)
{
  uint64_t v4;
  const char *v5;
  char *WeakRetained;
  char *v7;
  char *v8;
  void *v10;

  objc_initWeak(this, 0);
  this[1] = 0;
  this[2] = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 8) & 1) != 0)
      v5 = *(const char **)(v4 + 16);
    else
      v5 = (const char *)(v4 + 9);
    re::ecs2::EntityHandle::setString(this, v5, *(re::Allocator **)v4);
  }
  else if (*(_QWORD *)a2)
  {
    WeakRetained = (char *)objc_loadWeakRetained((id *)a2);
    v7 = WeakRetained;
    if (WeakRetained)
      v8 = WeakRetained - 8;
    else
      v8 = 0;
    re::ecs2::EntityHandle::reset(this);
    objc_storeWeak(this, v8 + 8);
    this[1] = (id)*((_QWORD *)v8 + 37);
    if (v7)

  }
  else
  {
    v10 = (void *)*((_QWORD *)a2 + 1);
    re::ecs2::EntityHandle::reset(this);
    this[1] = v10;
  }
  return this;
}

re::DynamicString *re::ecs2::EntityHandle::setString(id *this, const char *a2, re::Allocator *a3)
{
  _QWORD *v6;
  _QWORD v8[2];

  re::ecs2::EntityHandle::reset(this);
  v6 = (_QWORD *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 32, 8);
  v6[2] = 0;
  v6[3] = 0;
  *v6 = a3;
  v6[1] = 0;
  re::DynamicString::setCapacity(v6, 0);
  this[2] = v6;
  v8[0] = a2;
  v8[1] = strlen(a2);
  return re::DynamicString::operator=((re::DynamicString *)v6, (uint64_t)v8);
}

id *re::ecs2::EntityHandle::operator=(id *this, id *location)
{
  char *v3;
  const char *v4;
  char *WeakRetained;
  char *v6;
  char *v7;
  id v9;

  v3 = (char *)location[2];
  if (v3)
  {
    if ((v3[8] & 1) != 0)
      v4 = (const char *)*((_QWORD *)v3 + 2);
    else
      v4 = v3 + 9;
    re::ecs2::EntityHandle::setString(this, v4, *(re::Allocator **)v3);
  }
  else if (*location)
  {
    WeakRetained = (char *)objc_loadWeakRetained(location);
    v6 = WeakRetained;
    if (WeakRetained)
      v7 = WeakRetained - 8;
    else
      v7 = 0;
    re::ecs2::EntityHandle::reset(this);
    objc_storeWeak(this, v7 + 8);
    this[1] = (id)*((_QWORD *)v7 + 37);
    if (v6)

  }
  else
  {
    v9 = location[1];
    re::ecs2::EntityHandle::reset(this);
    this[1] = v9;
  }
  return this;
}

uint64_t re::ecs2::EntityHandle::operator=(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::reset((id *)a1);
  if (a2)
  {
    objc_storeWeak((id *)a1, (id)(a2 + 8));
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 296);
  }
  else
  {
    objc_destroyWeak((id *)a1);
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

id *re::ecs2::EntityHandle::operator=(id *from, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;
  id to;

  v5 = from[1];
  v4 = from[2];
  v6 = *(void **)(a2 + 16);
  from[1] = *(id *)(a2 + 8);
  from[2] = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  to = 0;
  objc_moveWeak(&to, from);
  re::ArcWeakPtr<re::VideoHistogram>::operator=(from, (id *)a2);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2, &to);
  objc_destroyWeak(&to);
  return from;
}

BOOL re::ecs2::EntityHandle::isNull(id *this)
{
  id WeakRetained;
  char *v4;
  unsigned __int8 *v5;

  WeakRetained = objc_loadWeakRetained(this);
  if (WeakRetained)
  {

    return 0;
  }
  if (this[1])
    return 0;
  v4 = (char *)this[2];
  if (!v4)
    return 1;
  if ((v4[8] & 1) != 0)
    v5 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
  else
    v5 = (unsigned __int8 *)(v4 + 9);
  return *v5 == 0;
}

char *re::ecs2::EntityHandle::resolve(id *location, uint64_t a2)
{
  char *WeakRetained;
  char *v3;

  if (!*location)
    return (char *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)a2 + 128))(a2, location);
  WeakRetained = (char *)objc_loadWeakRetained(location);
  if (!WeakRetained)
    return 0;
  v3 = WeakRetained - 8;

  return v3;
}

{
  uint64_t v3;
  uint64_t v4;
  char *WeakRetained;
  char *v6;

  if (!*location)
  {
    v3 = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)a2 + 128))(a2, location);
    if (!v3)
      return 0;
    v4 = v3;
    re::ecs2::EntityHandle::reset(location);
    objc_storeWeak(location, (id)(v4 + 8));
    location[1] = *(id *)(v4 + 296);
  }
  WeakRetained = (char *)objc_loadWeakRetained(location);
  if (!WeakRetained)
    return 0;
  v6 = WeakRetained - 8;

  return v6;
}

{
  char *WeakRetained;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  id v9;

  if (!*location)
  {
    if (!a2)
      return 0;
    v9 = location[1];
    v6 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 152, (uint64_t *)&v9);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (!v7)
        return 0;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 104);
      if (*(id *)(v7 + 296) != v9)
        return 0;
    }
    re::ecs2::EntityHandle::reset(location);
    objc_storeWeak(location, (id)(v7 + 8));
    location[1] = *(id *)(v7 + 296);
  }
  WeakRetained = (char *)objc_loadWeakRetained(location);
  if (!WeakRetained)
    return 0;
  v4 = WeakRetained - 8;

  return v4;
}

char *re::ecs2::EntityHandle::resolve(uint64_t a1, char *a2)
{
  char *WeakRetained;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  if (*(_QWORD *)a1)
  {
    WeakRetained = (char *)objc_loadWeakRetained((id *)a1);
    if (WeakRetained)
    {
      v3 = WeakRetained - 8;

    }
    else
    {
      return 0;
    }
  }
  else
  {
    v3 = a2;
    if (a2)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v4 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(a2 + 152), &v6);
      if (v4)
      {
        return *(char **)(v4 + 8);
      }
      else if (*(_QWORD *)(*((_QWORD *)v3 + 13) + 296) == v6)
      {
        return (char *)*((_QWORD *)v3 + 13);
      }
      else
      {
        return 0;
      }
    }
  }
  return v3;
}

char *re::ecs2::EntityHandle::resolve(id *a1, uint64_t a2)
{
  char *WeakRetained;
  char *v3;
  uint64_t v4;

  if (*a1)
  {
    WeakRetained = (char *)objc_loadWeakRetained(a1);
    if (WeakRetained)
    {
      v3 = WeakRetained - 8;

      return v3;
    }
    return 0;
  }
  if (!a2)
    return 0;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  return re::ecs2::EntityHandle::resolve((uint64_t)a1, *(char **)(v4 + 16));
}

{
  char *WeakRetained;
  char *v3;
  uint64_t v4;

  if (*a1)
  {
    WeakRetained = (char *)objc_loadWeakRetained(a1);
    if (WeakRetained)
    {
      v3 = WeakRetained - 8;

      return v3;
    }
    return 0;
  }
  if (!a2)
    return 0;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  return re::ecs2::EntityHandle::resolve(a1, *(_QWORD *)(v4 + 16));
}

void *re::ecs2::introspect_EntityHandle(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  char v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  re::IntrospectionBasic *v10;
  _QWORD v11[2];
  __int128 v12;

  v2 = (int)this;
  {
    v10 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_EntityHandle(BOOL)::info, "EntityHandle", 24, 8, 0, 0);
    *(_QWORD *)v10 = &off_24ED7DA28;
    *((_QWORD *)v10 + 8) = re::internal::defaultConstruct<re::ecs2::EntityHandle>;
    *((_QWORD *)v10 + 9) = re::internal::entityHandleSerialize;
    *((_QWORD *)v10 + 10) = re::internal::entityHandleDeserialize;
    *((_QWORD *)v10 + 11) = re::internal::entityHandleDeepCopy;
    *((_QWORD *)v10 + 12) = 0;
    *((_QWORD *)v10 + 13) = 0;
    *((_DWORD *)v10 + 4) = 11;
  }
  if (v2)
  {
    if ((re::ecs2::introspect_EntityHandle(BOOL)::isInitialized & 1) != 0)
      return &re::ecs2::introspect_EntityHandle(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    v4 = re::ecs2::introspect_EntityHandle(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    if ((v4 & 1) != 0)
      return &re::ecs2::introspect_EntityHandle(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
    if ((re::ecs2::introspect_EntityHandle(BOOL)::isInitialized & 1) != 0)
    {
LABEL_8:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
      return &re::ecs2::introspect_EntityHandle(BOOL)::info;
    }
  }
  re::ecs2::introspect_EntityHandle(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_EntityHandle(BOOL)::info, a2);
  v11[0] = 0x334032F84381B816;
  v11[1] = "EntityHandle";
  xmmword_255828A48 = v12;
  re::StringID::destroyString((re::StringID *)v11);
  if ((v2 & 1) == 0)
    goto LABEL_8;
  return &re::ecs2::introspect_EntityHandle(BOOL)::info;
}

void re::internal::defaultConstruct<re::ecs2::EntityHandle>(int a1, int a2, id *location)
{
  objc_initWeak(location, 0);
  location[1] = 0;
  location[2] = 0;
  re::ecs2::EntityHandle::reset(location);
}

void re::internal::defaultConstructV2<re::ecs2::EntityHandle>(uint64_t a1)
{
  objc_initWeak((id *)a1, 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  re::ecs2::EntityHandle::reset((id *)a1);
}

void re::internal::defaultDestructV2<re::ecs2::EntityHandle>(id *a1)
{
  re::ecs2::EntityHandle::reset(a1);
  objc_destroyWeak(a1);
  *a1 = 0;
}

uint64_t *re::ecsCoreLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::ecsCoreLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "ECS.Core");
  }
  return &re::ecsCoreLogObjects(void)::logObjects;
}

re::ecs2::HandleTable *re::ecs2::HandleTable::HandleTable(re::ecs2::HandleTable *this)
{
  _QWORD v3[2];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_QWORD *)((char *)this + 116) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 16) = 0;
  v3[0] = 0;
  v3[1] = -1;
  re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(this, v3);
  if (v3[0])

  return this;
}

_QWORD *re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (_QWORD *)(v3[4] + 16 * v4);
  v6 = a2[1];
  *v5 = *a2;
  *a2 = 0;
  v5[1] = v6;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

unint64_t re::ecs2::HandleTable::getSlot(re::ecs2::HandleTable *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 4) + 16 * a2;
}

unint64_t re::ecs2::HandleTable::handleIndexAndGeneration(re::ecs2::HandleTable *this, re::ecs2::Component *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  re::ecs2::Component **v11;
  re::ecs2::Component *v12;
  char *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 10))
  {
    v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    v5 = *(unsigned int *)(*((_QWORD *)this + 11) + 4 * ((v4 ^ (v4 >> 31)) % *((unsigned int *)this + 26)));
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v9 = *((_QWORD *)this + 12);
      if (*(re::ecs2::Component **)(v9 + 32 * v5 + 16) == a2)
      {
LABEL_8:
        v8 = *(_QWORD *)(v9 + 32 * v5 + 24);
        goto LABEL_11;
      }
      while (1)
      {
        v5 = *(_DWORD *)(v9 + 32 * v5 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v5 == 0x7FFFFFFF)
          break;
        if (*(re::ecs2::Component **)(v9 + 32 * v5 + 16) == a2)
          goto LABEL_8;
      }
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v7);
    *((_QWORD *)this + 7) = v7;
    ++*((_DWORD *)this + 16);
  }
  else
  {
    v8 = *((_QWORD *)this + 2);
    v15 = 0uLL;
    re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(this, &v15);
    if ((_QWORD)v15)

  }
LABEL_11:
  v10 = *((_QWORD *)this + 2);
  if (v10 <= v8)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  v11 = (re::ecs2::Component **)(*((_QWORD *)this + 4) + 16 * v8);
  v12 = *v11;
  if (*v11 != a2)
  {
    if (a2)
    {
      v13 = (char *)a2 + 8;
      v12 = *v11;
    }
    if (v12)

    *v11 = a2;
    v10 = *((_QWORD *)this + 2);
  }
  if (v10 <= v8)
  {
LABEL_21:
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v8;
}

_QWORD *re::ecs2::HandleTable::garbageCollectIncremental(_QWORD *this)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[5];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = this[16];
  if (this[2] <= v1)
  {
    memset(v22, 0, sizeof(v22));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = this;
  v3 = this[4];
  v4 = (unint64_t *)(v3 + 16 * v1);
  if (*v4)
  {
    this = (_QWORD *)objc_isUniquelyReferenced();
    if ((_DWORD)this)
    {
      v5 = *v4;
      if (v2[10])
      {
        v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        v7 = (v6 ^ (v6 >> 31)) % *((unsigned int *)v2 + 26);
        v8 = v2[11];
        v9 = *(unsigned int *)(v8 + 4 * v7);
        if ((_DWORD)v9 != 0x7FFFFFFF)
        {
          v10 = v2[12];
          v11 = v10 + 32 * v9;
          if (*(_QWORD *)(v11 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
LABEL_11:
            v14 = v2[12];
            v15 = v14 + 32 * v9;
            v18 = *(_DWORD *)(v15 + 8);
            v17 = (int *)(v15 + 8);
            v16 = v18;
            if (v18 < 0)
            {
              *v17 = v16 & 0x7FFFFFFF;
              v14 = v2[12];
              v16 = *(_DWORD *)(v14 + 32 * v9 + 8);
            }
            *(_DWORD *)(v14 + 32 * v9 + 8) = *((_DWORD *)v2 + 29) | v16 & 0x80000000;
            --*((_DWORD *)v2 + 27);
            v19 = *((_DWORD *)v2 + 30) + 1;
            *((_DWORD *)v2 + 29) = v9;
            *((_DWORD *)v2 + 30) = v19;
          }
          else
          {
            while (1)
            {
              v12 = v9;
              v9 = *(_DWORD *)(v10 + 32 * v9 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v9 == 0x7FFFFFFF)
                break;
              v13 = v10 + 32 * v9;
              if (*(_QWORD *)(v13 + 16) == v5)
              {
                *(_DWORD *)(v10 + 32 * v12 + 8) = *(_DWORD *)(v10 + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
                goto LABEL_11;
              }
            }
          }
        }
      }
      ++*(_QWORD *)(v3 + 16 * v1 + 8);
      if (v5)
      {

        *v4 = 0;
      }
      *(_QWORD *)&v22[0] = v2[16];
      this = re::DynamicArray<re::TransitionCondition *>::add(v2 + 5, v22);
    }
  }
  v20 = v2[16];
  if ((unint64_t)(v20 + 1) < v2[2])
    v21 = v20 + 1;
  else
    v21 = 0;
  v2[16] = v21;
  return this;
}

re::ecs2::HandleTable *re::ecs2::HandleTable::init(re::ecs2::HandleTable *this)
{
  uint64_t *v1;
  re::ecs2::HandleTable *v2;
  re::ecs2::HandleTable *result;

  v1 = re::globalAllocators(this);
  v2 = (re::ecs2::HandleTable *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 136, 8);
  result = re::ecs2::HandleTable::HandleTable(v2);
  re::ecs2::HandleTable::m_instance = (uint64_t)result;
  return result;
}

re *re::internal::destroyPersistent<re::ecs2::HandleTable>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    v5 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a3 + 80));
    v6 = *(_QWORD *)(a3 + 40);
    if (v6)
    {
      if (*(_QWORD *)(a3 + 72))
        (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 40))(v6, v5);
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      ++*(_DWORD *)(a3 + 64);
    }
    re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_15;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 16 * v9);
        v11 = v7;
        v12 = (_QWORD *)v5[4];
        do
        {
          v13 = v12[1];
          *v11 = *v12;
          *v12 = 0;
          v12 += 2;
          v11[1] = v13;
          v11 += 2;
        }
        while (v12 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 16 * v4;
        do
        {
          if (*(_QWORD *)v3)
          {

            *(_QWORD *)v3 = 0;
          }
          v3 += 16;
          v5 -= 16;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::ecs2::ComponentBucketsBase::init(re::ecs2::ComponentBucketsBase *this, re::Allocator *a2)
{
  char *v4;

  *(_QWORD *)this = a2;
  v4 = (char *)this + 120;
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::init((uint64_t)this + 8, (uint64_t)a2, 1uLL);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::init((uint64_t)this + 64, (uint64_t)a2, 1uLL);
  return re::BucketArray<unsigned long,8ul>::init((uint64_t)v4, (uint64_t)a2, 1uLL);
}

uint64_t *re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::ecs2::ComponentBucketsBase::deinit(re::ecs2::ComponentBucketsBase *this)
{
  uint64_t result;

  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)this + 120);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit((uint64_t)this + 64);
  result = re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit((uint64_t)this + 8);
  *(_QWORD *)this = 0;
  return result;
}

unint64_t re::ecs2::ComponentBucketsBase::componentHandle(re::ecs2::ComponentBucketsBase *this, unint64_t a2, re::ecs2::Component *a3)
{
  unint64_t v3;
  uint64_t v4;
  re::ecs2::Component *v6;

  v3 = a2;
  v6 = a3;
  v4 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, a2);
  if (!re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v4, (uint64_t *)&v6))return -1;
  return v3;
}

uint64_t re::ecs2::ComponentBucketsBase::addBucket(re::ecs2::ComponentBucketsBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    v3 = *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 120, v2 - 1);
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 120, *((_QWORD *)this + 20) - 1);
    --*((_QWORD *)this + 20);
    ++*((_DWORD *)this + 42);
    return v3;
  }
  v4 = re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::addUninitialized((uint64_t)this + 8);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 52) = 0x1FFFFFFFFLL;
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)this + 8, v6 - 1);
    *(_QWORD *)v7 = *(_QWORD *)this;
    re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::setCapacity((_QWORD *)v7, 0);
    ++*(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 44) = 32;
    re::DataArray<re::ecs2::Component *>::allocBlock((unsigned int *)v7);
    v8 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::addUninitialized((uint64_t)this + 64);
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)v8 = 0u;
    *(_DWORD *)(v8 + 36) = 0x7FFFFFFF;
    v10 = *((_QWORD *)this + 13);
    if (v10)
    {
      v11 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, v10 - 1);
      re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::init(v11, *(_QWORD *)this, 3);
      return *((_QWORD *)this + 6) - 1;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_18, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::ecs2::ComponentBucketsBase::removeBucket(re::ecs2::ComponentBucketsBase *this, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)this + 8, a2);
  re::DataArray<re::ecs2::Component *>::clear(v4);
  v5 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, a2);
  re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::clear(v5);
  result = (_QWORD *)re::BucketArray<unsigned long,8ul>::addUninitialized((uint64_t)this + 120);
  *result = a2;
  return result;
}

void re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_40, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 32 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

unint64_t re::ecs2::ComponentBucketsBase::addComponent(re::ecs2::ComponentBucketsBase *this, unint64_t a2, re::ecs2::Component *a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  re::ecs2::Component *v10;
  unint64_t v11;
  unint64_t v12;

  v3 = a2;
  v10 = a3;
  v5 = (char *)this + 64;
  v6 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, a2);
  if (!re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v6, (uint64_t *)&v10))
  {
    v11 = v3;
    v7 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)this + 8, v3);
    v12 = re::DataArray<re::ecs2::Component *>::create<re::ecs2::Component *&>(v7, &v10);
    v8 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)v5, v3);
    re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addNew<re::DataArrayHandle<re::ecs2::Component *>&>(v8, (uint64_t *)&v10, &v12);
    return v11;
  }
  return v3;
}

unint64_t re::DataArray<re::ecs2::Component *>::create<re::ecs2::Component *&>(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  __int128 v15;

  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24)
    v5 = 1;
  else
    v5 = v4 + 1;
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(unsigned __int16 *)(a1 + 52);
  v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 == 0xFFFF && (_DWORD)v7 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::ecs2::Component *>::allocBlock((unsigned int *)a1);
    v11 = *(_QWORD *)(a1 + 16);
    v7 = (unsigned __int16)(v11 - 1);
    if (v11)
    {
      v6 = *(unsigned int *)(a1 + 48);
      if (v6 < 0x10000)
      {
        v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
        *(_DWORD *)(a1 + 48) = v6 + 1;
        *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
        v10 = (_DWORD *)(*v12 + 8 * v6);
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6, v14, v15);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v14 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v15) = 136315906;
    *(_QWORD *)((char *)&v15 + 4) = "operator[]";
    WORD6(v15) = 1024;
    HIWORD(v15) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(v9[1] + 4 * v6) = v5;
  v10 = (_DWORD *)(*v9 + 8 * v6);
  *(_DWORD *)(a1 + 52) = *v10;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  *(_QWORD *)v10 = *a2;
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

uint64_t re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addNew<re::DataArrayHandle<re::ecs2::Component *>&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addEmplace<re::DataArrayHandle<re::ecs2::Component *>&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::ComponentBucketsBase::removeComponent(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = 0;
  if (a2 != -1 && (a3 & 0xFFFFFF00000000) != 0)
  {
    v7 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1 + 8, a2);
    result = re::DataArray<re::ecs2::Component *>::tryGet(v7, a3);
    if (result)
    {
      v10 = *(_QWORD *)result;
      v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1 + 8, a2);
      re::DataArray<re::ecs2::Component *>::destroy(v8, a3);
      v9 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[](a1 + 64, a2);
      re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v9, &v10);
      return 1;
    }
  }
  return result;
}

unint64_t re::ecs2::ComponentBucketsBase::moveComponent(re::ecs2::ComponentBucketsBase *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  re::ecs2::Component **v9;
  re::ecs2::Component *v10;

  v5 = a2;
  if (a2 != -1 && a2 != a4 && (a3 & 0xFFFFFF00000000) != 0)
  {
    v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)a1 + 8, a2);
    v9 = (re::ecs2::Component **)re::DataArray<re::ecs2::Component *>::tryGet(v8, a3);
    if (v9)
    {
      v10 = *v9;
      re::ecs2::ComponentBucketsBase::removeComponent((uint64_t)a1, v5, a3);
      return re::ecs2::ComponentBucketsBase::addComponent(a1, a4, v10);
    }
    else
    {
      return -1;
    }
  }
  return v5;
}

re::ecs2::ComponentBucketsBase *re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(re::ecs2::ComponentBucketsBase *this, re::ecs2::Component *a2)
{
  uint64_t v2;
  re::ecs2::ComponentBucketsBase *v4;
  unint64_t i;
  unint64_t v6;
  unint64_t v7;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v4 = this;
    for (i = 0; i != v2; ++i)
    {
      v6 = re::ecs2::ComponentBucketsBase::componentHandle(v4, i, a2);
      this = (re::ecs2::ComponentBucketsBase *)re::ecs2::ComponentBucketsBase::removeComponent((uint64_t)v4, v6, v7);
    }
  }
  return this;
}

uint64_t *re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
        result = (uint64_t *)re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::add(uint64_t a1, _QWORD *a2)
{
  _anonymous_namespace_ *result;
  uint64_t v5;
  uint64_t v6;

  result = re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v5 = a1 + 24;
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *a2;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result;
  if (!*(_QWORD *)result)
  {
    v7 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::setCapacity(v1, v7);
    *((_DWORD *)v1 + 4) += 2;
    return result;
  }
  v2 = *((_QWORD *)result + 1);
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    v4 = v2 + 1;
    if (v4 < 3)
      return result;
    v6 = 4;
    goto LABEL_12;
  }
  v3 = *((_QWORD *)result + 3);
  v5 = v2 >= v3;
  v4 = v2 + 1;
  v5 = !v5 || v3 >= v4;
  if (!v5)
  {
    v6 = 2 * v3;
LABEL_12:
    if (v6 <= v4)
      v8 = v4;
    else
      v8 = v6;
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::setCapacity(result, v8);
  }
  return result;
}

uint64_t *re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 384, 0);
        result = (uint64_t *)re::DynamicOverflowArray<re::DataArray<re::ecs2::Component *> *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + ((v2 & 7) << 6);
}

void re::DataArray<re::ecs2::Component *>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 8 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

_QWORD *re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DataArray<re::ecs2::Component *>::ElementBlock>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 48 * (v2 & 7);
}

uint64_t re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addEmplace<re::DataArrayHandle<re::ecs2::Component *>&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = v7;
        v14 = DWORD1(v9);
        do
        {
          v15 = (unint64_t *)(*(_QWORD *)&v24[16] + v11);
          if ((*(_DWORD *)(*(_QWORD *)&v24[16] + v11 + 8) & 0x80000000) != 0)
          {
            v16 = *v15;
            v17 = *(unsigned int *)(a1 + 24);
            v18 = *v15 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::setCapacity(a1, (2 * v14));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 32 * v19 + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19) = v16;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 16) = v15[2];
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 24) = v15[3];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            v10 = *(_DWORD *)&v24[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

_QWORD *re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED71558;
  v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(a1 + 1));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  return a1;
}

void re::ecs2::EntityChildCollection::~EntityChildCollection(re::ecs2::EntityChildCollection *this)
{
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(this);
  JUMPOUT(0x2276933B8);
}

BOOL re::ecs2::EntityChildCollection::remove(re *a1, uint64_t *a2)
{
  uint64_t v2;
  _BOOL8 v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *a2;
  if (*(_QWORD *)(*a2 + 376) == -1 || *(_QWORD *)(v2 + 24) != *((_QWORD *)a1 + 6))
    return 0;
  v10 = *a2;
  v6 = (id)(v2 + 8);
  re::ecs2::EntityChildCollection::willRemoveAt(a1, v7, &v10);
  v8 = v10;
  v9 = *(_QWORD *)(v10 + 376);
  v4 = v9 != -1;
  if (v9 == -1
    || (re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::removeAt((uint64_t)a1 + 8, *(_QWORD *)(v10 + 376)),
        re::ecs2::EntityChildCollection::didRemoveAt(a1, v9, (uint64_t)&v10),
        (v8 = v10) != 0))
  {

  }
  return v4;
}

void re::ecs2::EntityChildCollection::willRemoveAt(re *a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*a3 + 371))
  {
    v5 = *re::ecsCoreLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a3;
      v7 = *(_QWORD *)(*a3 + 280);
      v11 = 136315394;
      v12 = v7;
      v13 = 2048;
      v14 = v6;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Unparenting '%s' (%p) a second time during an unparent operation", (uint8_t *)&v11, 0x16u);
    }
  }
  v8 = *((_QWORD *)a1 + 6);
  do
  {
    v9 = v8;
    v8 = *(_QWORD *)(v8 + 24);
  }
  while (v8);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray((uint64_t)&v11, a3);
    re::ecs2::Scene::removeFromAllEntities(v10, (uint64_t)&v11);
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v11);
  }
  if (*(_QWORD *)(*a3 + 24))
    re::ecs2::EntityChildCollection::setEntityParentDirectly((uint64_t)a1, (re::ecs2::Entity **)a3, 0);
}

_QWORD *re::ecs2::EntityChildCollection::didRemoveAt(_QWORD *result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)(*(_QWORD *)a3 + 376) = -1;
  if (result[3] > a2)
  {
    v3 = a2;
    v4 = (uint64_t)result;
    result = (_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)result, a2);
    v5 = *(_QWORD *)(v4 + 24);
    if (*(_QWORD *)(*result + 376) == v5)
    {
      result = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v4, v3);
      *(_QWORD *)(*result + 376) = v3;
    }
    else if (v5 > v3)
    {
      do
      {
        result = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v4, v3);
        *(_QWORD *)(*result + 376) = v3++;
      }
      while (v3 < *(_QWORD *)(v4 + 24));
    }
  }
  return result;
}

re::ecs2::Entity *re::ecs2::EntityChildCollection::add(re::ecs2::EntityChildCollection *this)
{
  uint64_t *v2;
  re::ecs2::Entity *v3;
  re::ecs2::Entity *v5;

  v2 = re::ecs2::EntityFactory::instance(this);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v2, 4uLL, &v5);
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(this, (uint64_t *)&v5);
  v3 = v5;
  if (v5)

  return v3;
}

re::ecs2::Entity *re::ecs2::EntityChildCollection::getOrAdd(re::ecs2::EntityChildCollection *this, const re::StringID *a2)
{
  uint64_t v4;
  re::ecs2::Entity **v5;
  uint64_t v6;
  re::ecs2::Entity *v7;

  v4 = *((_QWORD *)this + 3);
  if (!v4)
    goto LABEL_7;
  v5 = (re::ecs2::Entity **)*((_QWORD *)this + 5);
  v6 = 8 * v4;
  while (1)
  {
    v7 = *v5;
    if (re::StringID::operator==((_QWORD *)*v5 + 34, a2))
      break;
    ++v5;
    v6 -= 8;
    if (!v6)
      goto LABEL_7;
  }
  if (!v7)
  {
LABEL_7:
    v7 = re::ecs2::EntityChildCollection::add(this);
    re::StringID::operator=((unint64_t *)v7 + 34, (uint64_t *)a2);
  }
  return v7;
}

void re::ecs2::EntityChildCollection::willClear(re::ecs2::EntityChildCollection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  re::ecs2::Entity **v6;

  v2 = *((_QWORD *)this + 6);
  do
  {
    v3 = v2;
    v2 = *(_QWORD *)(v2 + 24);
  }
  while (v2);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
    re::ecs2::Scene::removeFromAllEntities(v4, (uint64_t)this + 8);
  if (*((_QWORD *)this + 3))
  {
    v5 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, v5) + 376) = -1;
      v6 = (re::ecs2::Entity **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, v5);
      re::ecs2::EntityChildCollection::setEntityParentDirectly((uint64_t)this, v6, 0);
      ++v5;
    }
    while (v5 < *((_QWORD *)this + 3));
  }
}

void re::ecs2::EntityChildCollection::setEntityParentDirectly(uint64_t a1, re::ecs2::Entity **a2, uint64_t a3)
{
  re::ecs2::Entity *v3;
  uint64_t v4;
  uint64_t v7;
  re::ecs2::Entity *v8;
  re::ecs2::Entity *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  re::ecs2::Entity *v15;
  re::ecs2::Entity *v16;
  uint64_t v17;
  _BOOL4 v18;

  v3 = *a2;
  v4 = *((_QWORD *)*a2 + 3);
  if (v4 != a3)
  {
    *((_QWORD *)v3 + 3) = a3;
    v7 = *(_QWORD *)(a1 + 48);
    if ((*(_BYTE *)(v7 + 288) & 0x80) != 0)
    {
      if (a3)
      {
        do
        {
          v12 = v7;
          v7 = *(_QWORD *)(v7 + 24);
        }
        while (v7);
        v13 = *(_QWORD *)(v12 + 16);
        if (*((_QWORD *)v3 + 2))
          v14 = 1;
        else
          v14 = v13 == 0;
        if (!v14)
        {
          re::ecs2::Entity::updateIsSelfAnchored_Subtree((uint64_t)v3);
          re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)v3);
          v3 = *a2;
        }
      }
      else
      {
        v13 = 0;
      }
      *((_QWORD *)v3 + 2) = v13;
      v15 = v3;
      do
      {
        v16 = v15;
        v15 = (re::ecs2::Entity *)*((_QWORD *)v15 + 3);
      }
      while (v15);
      v17 = *((_QWORD *)v16 + 2);
      if (v17)
        v18 = *(unsigned __int8 *)(v17 + 48) != 0;
      else
        v18 = 0;
      re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree((uint64_t)v3, v18);
    }
    else
    {
      v8 = v3;
      do
      {
        v9 = v8;
        v8 = (re::ecs2::Entity *)*((_QWORD *)v8 + 3);
      }
      while (v8);
      v10 = *((_QWORD *)v9 + 2);
      if (v10)
        v11 = *(unsigned __int8 *)(v10 + 48) != 0;
      else
        v11 = 0;
      re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree((uint64_t)v3, v11);
      re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree((uint64_t)v3);
      re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)v3);
    }
    re::ecs2::Entity::updateIsActive_Subtree(v3);
    if ((a3 != 0) == (v4 == 0))
      re::ecs2::Entity::updateSwiftObjectOwnership(*a2);
  }
}

void re::ecs2::EntityChildCollection::willInsert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  void *v15;
  id v16;
  uint64_t v17[5];

  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5;
  do
  {
    v7 = v6;
    v6 = *(_QWORD *)(v6 + 24);
  }
  while (v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (*(_BYTE *)(v5 + 371))
    goto LABEL_4;
  if ((*(_BYTE *)(v5 + 288) & 0x80) == 0)
  {
    if (v8)
    {
      v17[0] = *(_QWORD *)(v5 + 296);
      if (!re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v8 + 152, v17))
      {
        v5 = *(_QWORD *)(a1 + 48);
LABEL_4:
        __CALLER_IS_PARENTING_AN_ENTITY_TO_AN_ENTITY_BEING_REMOVED__((unsigned __int8 *)v5, *a3);
      }
    }
  }
  v9 = *a3;
  v10 = *a3;
  do
  {
    v11 = v10;
    v10 = *(_QWORD *)(v10 + 24);
  }
  while (v10);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
    v13 = v12 == v8;
  else
    v13 = 0;
  if (v13)
  {
    *(_BYTE *)(v8 + 304) = 1;
    *(_QWORD *)(v8 + 312) = *(_QWORD *)(v9 + 24);
    v14 = *(_DWORD *)(v9 + 288);
    *(_BYTE *)(v8 + 320) = v14 & 1;
    if ((v14 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 288) & 0x81) == 0)
    {
      re::ecs2::Entity::sendDeactivateEvents((re::ecs2::Entity *)v9, (re::ecs2::Scene *)v8);
      v9 = *a3;
    }
  }
  v15 = (void *)(v9 + 8);
  v16 = (id)(v9 + 8);
  if (*(_QWORD *)(*a3 + 24))
    re::ecs2::Entity::setParentInternal((re::ecs2::Entity *)*a3, 0, 0xFFFFFFFFFFFFFFFFLL);
  re::ecs2::EntityChildCollection::setEntityParentDirectly(a1, (re::ecs2::Entity **)a3, *(_QWORD *)(a1 + 48));
  if (v8)
  {
    re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray((uint64_t)v17, a3);
    if (!*(_BYTE *)(v8 + 304))
      re::ecs2::Scene::addToAllEntitiesRecursively(v8, (uint64_t)v17);
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v17);
  }

}

void re::ecs2::EntityChildCollection::willSet(re *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(*a3 + 24) == *((_QWORD *)a1 + 6))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Entity is already part of this collection.", "child->parentIncludingSceneEntity() != m_parent", "willSet", 216);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = (uint64_t *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)a1, a2);
    re::ecs2::EntityChildCollection::willRemoveAt(a1, v6, v5);
    re::ecs2::EntityChildCollection::willInsert((uint64_t)a1, v7, a3);
  }
}

void re::ecs2::EntityChildCollection::didInsert(uint64_t a1, unint64_t a2, re **a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::EventBus *v11;
  re *v12;
  __objc2_class_ro *Type;
  _QWORD v14[5];

  *(_QWORD *)(*(_QWORD *)re::ecs2::EntityComponentCollection::operator[](a1, a2) + 376) = a2;
  v6 = a2 + 1;
  if (v6 < *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(*(_QWORD *)re::ecs2::EntityComponentCollection::operator[](a1, v6) + 376) != v6)
  {
    while (v6 < *(_QWORD *)(a1 + 24))
    {
      *(_QWORD *)(*(_QWORD *)re::ecs2::EntityComponentCollection::operator[](a1, v6) + 376) = v6;
      ++v6;
    }
  }
  v7 = *(_QWORD *)(a1 + 48);
  do
  {
    v8 = v7;
    v7 = *(_QWORD *)(v7 + 24);
  }
  while (v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 304))
    {
      *(_BYTE *)(v9 + 304) = 0;
      v10 = *(_QWORD *)(v9 + 312);
      if (*(_BYTE *)(v9 + 320) != (*((_DWORD *)*a3 + 72) & 1))
      {
        re::ecs2::Entity::onActivationChanged(*a3, v9);
        if ((*((_BYTE *)*a3 + 288) & 1) != 0)
          re::ecs2::Entity::sendActivateEvents(*a3, (re::ecs2::Scene *)v9);
      }
      v11 = *(re::EventBus **)(v9 + 288);
      if (v11)
      {
        v12 = *a3;
        v14[0] = v10;
        v14[1] = v12;
        Type = re::EventBus::getTypeId<RESceneEntityDidReparentEvent>();
        re::EventBus::publish(v11, (uint64_t)v12, (uint64_t)Type, (uint64_t)v14, 0x10uLL, 0);
      }
      *(_QWORD *)(v9 + 312) = 0;
      *(_BYTE *)(v9 + 320) = 0;
    }
    else
    {
      re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray((uint64_t)v14, (uint64_t *)a3);
      re::ecs2::Scene::sendAddAndActivateEvents(v9, (uint64_t)v14);
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v14);
    }
  }
}

void re::ecs2::EntityChildCollection::didSet(uint64_t a1, unint64_t a2, uint64_t a3, re **a4)
{
  re::ecs2::EntityChildCollection::didInsert(a1, a2, a4);
}

void re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(_QWORD *a1)
{
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray(uint64_t a1, uint64_t *a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)a1, 1uLL);
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)a1, a2);
  return a1;
}

re::ecs2::EntityComponentCollection *re::ecs2::EntityComponentCollection::EntityComponentCollection(re::ecs2::EntityComponentCollection *this, re::ecs2::Entity *a2, unint64_t a3)
{
  __int128 v5;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)this + 1, a3);
  ++*((_DWORD *)this + 8);
  *((_DWORD *)this + 12) = 0;
  *((_WORD *)this + 26) = 16;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *((_OWORD *)this + 4) = v5;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_OWORD *)this + 5) = v5;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = 0;
  return this;
}

uint64_t re::ecs2::EntityComponentCollection::add(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v4;
  const __int16 *v5;
  int16x8_t *v6;
  int16x8_t v7;
  int v8;
  uint16x8_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int16 *)this + 25);
  if (!*((_WORD *)this + 25))
    goto LABEL_10;
  v5 = (const __int16 *)((char *)a2 + 16);
  v6 = (int16x8_t *)*((_QWORD *)this + 7);
  v7 = vld1q_dup_s16(v5);
  v8 = 1;
  while (1)
  {
    v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_2260F1E80);
    v9.i16[0] = vmaxvq_u16(v9);
    if (v9.i32[0])
      break;
    v8 -= 8;
    ++v6;
    if (!--v4)
      goto LABEL_10;
  }
  if (v9.u16[0] - v8 < *((unsigned __int16 *)this + 24))
  {
    v10 = *re::ecsCoreLogObjects(this);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(*(_QWORD *)this + 280);
      v12 = *((_QWORD *)a2 + 4);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v11;
      v18 = 2080;
      v19 = v12;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Entity '%s' already contains a component of type '%s' - ignoring new one.", buf, 0x16u);
    }
    return 0;
  }
  else
  {
LABEL_10:
    (*(void (**)(_BYTE *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(_QWORD *)a2 + 32))(buf, a2);
    v16 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
      v14 = (id)(*(_QWORD *)buf + 8);
    re::ecs2::EntityComponentCollection::add((uint64_t)this, &v16, 1);
    if (v16)
    {

      v16 = 0;
    }
    v13 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)

  }
  return v13;
}

void re::ecs2::EntityComponentCollection::add(uint64_t a1, uint64_t *a2, int a3)
{
  __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;

  re::ecs2::EntityComponentCollection::willAdd((re::ecs2::Entity **)a1, a2);
  *(_QWORD *)(*a2 + 16) = *(_QWORD *)a1;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(a1 + 8), a2);
  v6 = *(_WORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 40))(*a2) + 16);
  re::ecs2::PackedTypeIDs::ensureCapacity((unsigned __int16 *)(a1 + 48), *(unsigned __int16 *)(a1 + 48) + 1);
  *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * *(unsigned __int16 *)(a1 + 48)) = v6;
  v7 = *(_WORD *)(a1 + 48) + 1;
  *(_WORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 50) = (v7 + 7) >> 3;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
  if (v8 != -1)
    *(_QWORD *)(a1 + 8 * v8 + 96) = *a2;
  re::ecs2::EntityComponentCollection::didAdd((re::ecs2::Entity **)a1, (re::ecs2::Component **)a2, a3);
}

void re::ecs2::EntityComponentCollection::willAdd(re::ecs2::Entity **a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  re::ecs2::Entity *v7;
  re::ecs2::Entity *v8;

  v4 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  if (v4 == re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    v5 = *a2;
    v6 = (!*(_BYTE *)(*a2 + 176) || *(_BYTE *)(v5 + 177)) && *(_BYTE *)(v5 + 178) == 0;
    re::ecs2::Entity::setSelfAnchored_Before(*a1, v6);
  }
  else if (v4 == re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         && *(_BYTE *)(*a2 + 352)
         && (*((_DWORD *)*a1 + 72) & 0x131) == 0x11)
  {
    v7 = *a1;
    do
    {
      v8 = v7;
      v7 = (re::ecs2::Entity *)*((_QWORD *)v7 + 3);
    }
    while (v7);
    re::ecs2::Entity::sendDeactivateEvents(*a1, *((re::ecs2::Scene **)v8 + 2));
  }
}

void re::ecs2::EntityComponentCollection::didAdd(re::ecs2::Entity **a1, re::ecs2::Component **a2, int a3)
{
  const re::ecs2::ComponentTypeBase *v6;
  re::ecs2::Entity *v7;
  re::ecs2::Entity *v8;
  uint64_t v9;
  re::ecs2::SceneComponentCollectionBase *v10;
  re::ecs2::Component *v11;
  int v12;

  v6 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)*a2 + 40))(*a2);
  v7 = *a1;
  do
  {
    v8 = v7;
    v7 = (re::ecs2::Entity *)*((_QWORD *)v7 + 3);
  }
  while (v7);
  v9 = *((_QWORD *)v8 + 2);
  if (v9)
  {
    if (!*((_BYTE *)*a1 + 371))
    {
      v10 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v9 + 200), v6);
      re::ecs2::SceneComponentCollectionBase::add(v10, *a2);
      if (a3)
        re::ecs2::Scene::sendAddAndActivateComponentEvents((re::ecs2::Scene *)v9, *a1, v6);
    }
  }
  if (v6 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    v11 = *a2;
    v12 = (!*((_BYTE *)*a2 + 176) || *((_BYTE *)v11 + 177)) && *((unsigned __int8 *)v11 + 178) == 0;
    re::ecs2::Entity::setSelfAnchored_After(*a1, v12);
  }
  else if (v6 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    re::ecs2::Entity::setSelfRequiresAnchoring_After(*a1, *((unsigned __int8 *)*a2 + 352));
  }
}

void re::ecs2::EntityComponentCollection::removeAt(re::ecs2::EntityComponentCollection *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  char v13;
  re::EventBus *v14;
  __objc2_class_ro *Type;
  re::EventBus *v16;
  uint64_t v17;
  re::ecs2::SceneComponentCollectionBase *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v2 = a2;
  v41 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 3) <= a2)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_40;
  }
  v4 = *(_QWORD **)(*((_QWORD *)this + 5) + 8 * a2);
  if (v4)
    v5 = v4 + 1;
  v6 = *((_DWORD *)this + 8);
  v7 = *(_QWORD *)this;
  do
  {
    v8 = v7;
    v7 = *(_QWORD *)(v7 + 24);
  }
  while (v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    v20 = *((_QWORD *)this + 3);
    v19 = *((_DWORD *)this + 8);
    goto LABEL_24;
  }
  v10 = (void *)(*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4);
  v11 = v10;
  v12 = *(_QWORD *)this;
  if (!*(_BYTE *)(*(_QWORD *)this + 371))
  {
    if ((*(_BYTE *)(v12 + 288) & 1) != 0)
    {
      if (v10 != re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
        || (v13 = re::ecs2::Entity::setSelfAnchored_Before(*(re::ecs2::Entity **)this, 0),
            v12 = *(_QWORD *)this,
            (v13 & 1) == 0))
      {
        v14 = *(re::EventBus **)(v9 + 288);
        *(_QWORD *)&v36 = v12;
        *((_QWORD *)&v36 + 1) = v11;
        Type = re::EventBus::getTypeId<REComponentWillDeactivateEvent>();
        re::EventBus::publish(v14, v12, (uint64_t)Type, (uint64_t)&v36, 0x10uLL, v11);
        v12 = *(_QWORD *)this;
      }
    }
    v16 = *(re::EventBus **)(v9 + 288);
    *(_QWORD *)&v36 = v12;
    *((_QWORD *)&v36 + 1) = v11;
    v17 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
    re::EventBus::publish(v16, v12, v17, (uint64_t)&v36, 0x10uLL, v11);
  }
  v18 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v9 + 200), (const re::ecs2::ComponentTypeBase *)v11);
  re::ecs2::SceneComponentCollectionBase::remove(v18, (re::ecs2::Component *)v4);
  v19 = *((_DWORD *)this + 8);
  v20 = *((_QWORD *)this + 3);
  if (v19 == v6)
    goto LABEL_24;
  v21 = *((_QWORD *)this + 5);
  if (v20)
  {
    v22 = 8 * v20;
    v23 = (_QWORD *)*((_QWORD *)this + 5);
    while ((_QWORD *)*v23 != v4)
    {
      ++v23;
      v22 -= 8;
      if (!v22)
      {
        v23 = (_QWORD *)(v21 + 8 * v20);
        break;
      }
    }
  }
  else
  {
    v23 = (_QWORD *)*((_QWORD *)this + 5);
  }
  v2 = ((uint64_t)v23 - v21) >> 3;
  if (v2 != v20)
  {
LABEL_24:
    v4[2] = 0;
    if (v20 > v2)
    {
      v24 = v20 - 1;
      v25 = *((_QWORD *)this + 5);
      if (v20 - 1 > v2)
      {
        v26 = (uint64_t *)(v25 + 8 * v2);
        v27 = v26 + 1;
        if (v26 + 1 != (uint64_t *)(v25 + 8 * v20))
        {
          v28 = *v26;
          v29 = 8 * v20 - 8 * v2 - 8;
          do
          {
            *(v27 - 1) = *v27;
            *v27++ = v28;
            v29 -= 8;
          }
          while (v29);
          v25 = *((_QWORD *)this + 5);
        }
      }
      v30 = v25 + 8 * v20;
      v31 = *(_QWORD *)(v30 - 8);
      if (v31)
      {

        *(_QWORD *)(v30 - 8) = 0;
        v24 = *((_QWORD *)this + 3) - 1;
        v19 = *((_DWORD *)this + 8);
      }
      *((_QWORD *)this + 3) = v24;
      *((_DWORD *)this + 8) = v19 + 1;
      v32 = *((_QWORD *)this + 7);
      memmove((void *)(v32 + 2 * v2), (const void *)(v32 + 2 * v2 + 2), 2 * (*((unsigned __int16 *)this + 24) + ~v2));
      *(_WORD *)(v32 + 2 * *((unsigned __int16 *)this + 24) - 2) = -1;
      v33 = *((_WORD *)this + 24) - 1;
      *((_WORD *)this + 24) = v33;
      *((_WORD *)this + 25) = (v33 + 7) >> 3;
      v34 = (*(uint64_t (**)(_QWORD *))(*v4 + 32))(v4);
      if (v34 != -1)
        *((_QWORD *)this + v34 + 12) = 0;
      v35 = (void *)(*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4);
      if (v35 == re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
      {
        re::ecs2::Entity::setSelfAnchored_After(*(re::ecs2::Entity **)this, 0);
      }
      else if (v35 == re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
      {
        re::ecs2::Entity::setSelfRequiresAnchoring_After(*(re::ecs2::Entity **)this, 0);
      }
      goto LABEL_38;
    }
LABEL_40:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v4)
LABEL_38:

}

void re::ecs2::EntityComponentCollection::remove(re::ecs2::EntityComponentCollection *this, re::ecs2::Component *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = 0;
    while (*(re::ecs2::Component **)(*((_QWORD *)this + 5) + 8 * v3) != a2)
    {
      if (v2 == ++v3)
        return;
    }
    re::ecs2::EntityComponentCollection::removeAt(this, v3);
  }
}

void re::ecs2::EntityComponentCollection::remove(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2;
  const __int16 *v3;
  int16x8_t *v4;
  int16x8_t v5;
  int i;
  uint16x8_t v7;
  unint64_t v8;

  v2 = *((unsigned __int16 *)this + 25);
  if (*((_WORD *)this + 25))
  {
    v3 = (const __int16 *)((char *)a2 + 16);
    v4 = (int16x8_t *)*((_QWORD *)this + 7);
    v5 = vld1q_dup_s16(v3);
    for (i = 1; ; i -= 8)
    {
      v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_2260F1E80);
      v7.i16[0] = vmaxvq_u16(v7);
      if (v7.i32[0])
        break;
      ++v4;
      if (!--v2)
        return;
    }
    v8 = v7.u16[0] - i;
    if ((int)v8 < *((unsigned __int16 *)this + 24))
      re::ecs2::EntityComponentCollection::removeAt(this, v8);
  }
}

void re::ecs2::EntityComponentCollection::clear(uint64_t **this, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;

  re::ecs2::EntityComponentCollection::willClear((re::ecs2::EntityComponentCollection *)this, a2);
  v3 = this[3];
  if (v3)
  {
    v4 = this[5];
    v5 = 8 * (_QWORD)v3;
    do
    {
      v6 = *v4++;
      *(_QWORD *)(v6 + 16) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  if (*((_WORD *)this + 25))
  {
    v7 = 0;
    v8 = 16 * *((unsigned __int16 *)this + 25);
    *(_QWORD *)&v9 = -1;
    *((_QWORD *)&v9 + 1) = -1;
    do
    {
      *(_OWORD *)&this[7][v7 / 8] = v9;
      v7 += 16;
    }
    while (v8 != v7);
  }
  *((_DWORD *)this + 12) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  this[28] = 0;
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(this + 1));
}

void re::ecs2::EntityComponentCollection::willClear(re::ecs2::EntityComponentCollection *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::EventBus *v6;
  char v7;
  unint64_t v8;
  unint64_t i;
  re::ecs2::Component *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  const re::ecs2::ComponentTypeBase *v14;
  re::ecs2::SceneComponentCollectionBase *v15;
  re::ecs2::Entity *v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)this;
  do
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(re::EventBus **)(v5 + 288);
    if (v6)
    {
      v7 = 0;
      ++*((_QWORD *)v6 + 12);
      goto LABEL_8;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 1;
LABEL_8:
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    for (i = 0; i < v8; ++i)
    {
      if (v8 <= i)
      {
        memset(v17, 0, sizeof(v17));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v5)
      {
        v10 = *(re::ecs2::Component **)(*((_QWORD *)this + 5) + 8 * i);
        if ((v7 & 1) == 0)
        {
          v11 = (const void *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)v10 + 40))(v10);
          v12 = v11;
          v13 = *(_QWORD *)this;
          if ((*(_BYTE *)(*(_QWORD *)this + 288) & 1) != 0)
          {
            *(_QWORD *)&v17[0] = *(_QWORD *)this;
            *((_QWORD *)&v17[0] + 1) = v11;
            re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v6, v13, v17, v11);
            v13 = *(_QWORD *)this;
          }
          *(_QWORD *)&v17[0] = v13;
          *((_QWORD *)&v17[0] + 1) = v12;
          re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillRemoveEvent,void>(v6, v13, v17, v12);
        }
        v14 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)v10 + 40))(v10);
        v15 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v5 + 200), v14);
        re::ecs2::SceneComponentCollectionBase::remove(v15, v10);
        v8 = *((_QWORD *)this + 3);
      }
    }
  }
  if ((v7 & 1) == 0)
    re::EventBus::endBatch(v6, a2);
  v16 = *(re::ecs2::Entity **)this;
  re::ecs2::Entity::setSelfAnchored_Before(v16, 0);
  re::ecs2::Entity::setSelfAnchored_After(v16, 0);
}

uint64_t re::ecs2::EntityComponentCollection::get(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2;
  const __int16 *v3;
  int16x8_t *v4;
  int16x8_t v5;
  int i;
  uint16x8_t v7;
  uint64_t v8;

  v2 = *((unsigned __int16 *)this + 25);
  if (!*((_WORD *)this + 25))
    return 0;
  v3 = (const __int16 *)((char *)a2 + 16);
  v4 = (int16x8_t *)*((_QWORD *)this + 7);
  v5 = vld1q_dup_s16(v3);
  for (i = 1; ; i -= 8)
  {
    v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_2260F1E80);
    v7.i16[0] = vmaxvq_u16(v7);
    if (v7.i32[0])
      break;
    ++v4;
    if (!--v2)
      return 0;
  }
  v8 = v7.u16[0] - i;
  if ((int)v8 >= *((unsigned __int16 *)this + 24))
    return 0;
  if (*((_QWORD *)this + 3) <= (unint64_t)v8)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v8);
}

uint64_t re::ecs2::EntityComponentCollection::getOrAdd(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t result;

  result = re::ecs2::EntityComponentCollection::get(this, a2);
  if (!result)
    return re::ecs2::EntityComponentCollection::add(this, a2);
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t *result;

  result = (uint64_t *)re::EventBus::getEventInfo<REComponentWillDeactivateEvent>((uint64_t)a1);
  if (result)
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 0x10uLL, a4);
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillRemoveEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t *result;

  result = (uint64_t *)re::EventBus::getEventInfo<REComponentWillRemoveEvent>((uint64_t)a1);
  if (result)
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 0x10uLL, a4);
  return result;
}

uint64_t re::EventBus::getEventInfo<REComponentWillDeactivateEvent>(uint64_t a1)
{
  uint64_t v2;
  __objc2_class_ro *Type;

  Type = re::EventBus::getTypeId<REComponentWillDeactivateEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), (uint64_t *)&Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getEventInfo<REComponentWillRemoveEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &v4);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t *re::ecs2::EntityFactory::instance(re::ecs2::EntityFactory *this)
{
  unsigned __int8 v1;
  const char *v3;

  {
    re::ecs2::EntityFactory::instance(void)::s_instance = 0;
    re::ecs2::EntityFactory::init((re::Allocator *)&re::ecs2::EntityFactory::instance(void)::s_instance, v3);
  }
  return &re::ecs2::EntityFactory::instance(void)::s_instance;
}

re::Allocator *re::ecs2::EntityFactory::init(re::Allocator *this, const char *a2)
{
  re::Allocator *v2;
  re::Allocator *v3;
  BOOL v4;
  re *v5;
  char v6;
  uint64_t (*v7)(void);
  re::Allocator *v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t *v11;
  uint8_t v12[14];
  char v13[2];

  if (!*(_QWORD *)this)
  {
    v2 = this;
    re::Defaults::BOOLValue((re::Defaults *)"enableEntityDebugAllocator", a2, v13);
    if (v13[0])
      v4 = v13[1] == 0;
    else
      v4 = 1;
    if (v4)
    {
      v5 = (re *)re::Allocator::useMallocAllocator(v3);
      v6 = (char)v5;
      v7 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(v5)[2] + 32);
      if ((v6 & 1) != 0)
      {
        v8 = (re::Allocator *)v7();
        this = re::Allocator::Allocator(v8, "Entity", 1);
        *(_QWORD *)this = &off_24ED42648;
      }
      else
      {
        v8 = (re::Allocator *)v7();
      }
    }
    else
    {
      v9 = *re::ecsCoreLogObjects(v3);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "enableEntityDebugAllocator = true: Using PageDebugAllocator", v12, 2u);
      }
      v11 = re::globalAllocators((re *)v10);
      v8 = (re::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 72, 8);
      this = re::PageDebugAllocator::PageDebugAllocator(v8, "Entity", 1, 0x400uLL);
    }
    *(_QWORD *)v2 = v8;
  }
  return this;
}

re *re::ecs2::EntityFactory::deinit(re *this)
{
  void (***v1)(_QWORD);
  re *v2;
  uint64_t v3;

  v1 = *(void (****)(_QWORD))this;
  if (*(_QWORD *)this)
  {
    v2 = this;
    v3 = re::globalAllocators(this)[2];
    (**v1)(v1);
    this = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v1);
    *(_QWORD *)v2 = 0;
  }
  return this;
}

re::ecs2::Entity *re::ecs2::EntityFactory::make@<X0>(re::ecs2::EntityFactory *this@<X0>, unint64_t a2@<X1>, re::ecs2::Entity **a3@<X8>)
{
  re::ecs2::Entity *v5;
  re::ecs2::Entity *result;
  _QWORD v7[2];

  v5 = (re::ecs2::Entity *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this, 384, 0);
  uuid_generate_random((unsigned __int8 *)v7);
  result = re::ecs2::Entity::Entity(v5, (v7[1] + (v7[0] << 6) + (v7[0] >> 2) - 0x61C8864680B583E9) ^ v7[0], a2);
  *a3 = v5;
  return result;
}

void re::make::shared::object<re::ecs2::RealityRendererSceneGroup>(re *a1@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  uint64_t *v3;
  _anonymous_namespace_ *v4;

  v3 = re::globalAllocators(a1);
  v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 32, 8);
  ArcSharedObject::ArcSharedObject(v4, 0);
  *(_QWORD *)v4 = &off_24ED715B0;
  *((_QWORD *)v4 + 3) = 0;
  *a2 = v4;
}

void re::ecs2::RealityRendererSceneGroup::~RealityRendererSceneGroup(re::ecs2::RealityRendererSceneGroup *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::EntityHandleHookupTable::registerEntity(_anonymous_namespace_ *this, StringID *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  StringID *v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a2;
  v12[3] = 0;
  v11 = 0;
  if (a4)
  {
    v6 = *a4;
    *a4 = 0;
    v11 = v6;
    std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v12, (uint64_t)(a4 + 1));
  }
  v8 = *((_QWORD *)this + 2);
  re::DynamicArray<re::internal::EntityHandleHookupData>::add(this, &v10);
  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long &>((uint64_t)this + 40, &v9, &v8);
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)this + 88, a2 + 17, &v8);
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v11);
}

_QWORD *re::DynamicArray<re::internal::EntityHandleHookupData>::add(_anonymous_namespace_ *this, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::internal::EntityHandleHookupData>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_QWORD *)(*((_QWORD *)this + 4) + 48 * v4);
  *v5 = *a2;
  result = std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](v5 + 1, a2 + 1);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long &>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::internal::EntityHandleHookupTable::lookupEntity(uint64_t a1, char *a2, size_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  const char *v44;
  size_t v45;
  char *v46;
  size_t v47;
  uint64_t v48;
  _BYTE v49[12];
  __int16 v50;
  int v51;
  __int16 v52;
  unint64_t v53;
  __int16 v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v46 = a2;
  v47 = a3;
  v6 = &a2[a3];
  v7 = (char *)memchr(a2, 58, a3);
  if (v7)
    v8 = v7;
  else
    v8 = v6;
  v9 = v8 - a2;
  v10 = (unsigned __int8 *)re::Slice<char>::range(&v46, 0, v9);
  v12 = (const char *)v10;
  v13 = v11;
  v44 = (const char *)v10;
  v45 = v11;
  if (v11 >= 2
    && *v10 == 35
    && ((char)v10[1] & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v10[1] + 60) & 0x400) != 0)
  {
    v10 = (unsigned __int8 *)re::Slice<char>::range(&v44, 1uLL, v11);
    v15 = v10;
    v16 = &v10[v14];
    if (!v14)
      goto LABEL_19;
    while (*v10 == 48)
    {
      ++v10;
      if (!--v14)
      {
        v10 = v16;
        break;
      }
    }
    if (v10 == v16)
    {
LABEL_19:
      v10 = v16;
    }
    else if (*v10 - 48 < 0xA)
    {
      v10 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v10, v16, &v56, v49);
      if (v10 != v16 && *v10 - 48 <= 9 || __CFADD__((_QWORD)v56, *(_QWORD *)v49))
        goto LABEL_23;
      v17 = v56 + *(_QWORD *)v49;
LABEL_22:
      if (v16 != v10)
        goto LABEL_23;
      LOBYTE(v41) = 1;
      v42 = v17;
      v10 = (unsigned __int8 *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 40, &v42);
      if (v10)
      {
        v25 = *(_QWORD *)v10;
        v26 = *(_QWORD *)(a1 + 16);
        if (v26 <= *(_QWORD *)v10)
          goto LABEL_61;
        v34 = *(_QWORD *)(a1 + 32);
        if (v9 == a3)
        {
          if (v34)
            return *(_QWORD *)(v34 + 48 * v25);
          goto LABEL_23;
        }
        if (v34)
        {
          v35 = v34 + 48 * v25;
          v37 = *(_QWORD *)(v35 + 8);
          v36 = (_QWORD *)(v35 + 8);
          if (v37)
          {
            v38 = re::Slice<char>::range(&v46, v9 + 1, v47);
            return re::internal::EntityHandleHookupTable::lookupEntity(*v36, v38, v39);
          }
        }
      }
      else if (v9 == a3)
      {
        goto LABEL_23;
      }
      return 0;
    }
    if (v10 == v15)
    {
LABEL_23:
      v12 = v44;
      v13 = v45;
      goto LABEL_24;
    }
    v17 = 0;
    goto LABEL_22;
  }
LABEL_24:
  v18 = (char *)&v42 + 1;
  if ((v42 & 1) != 0)
    v18 = v43;
  if (v18)
  {
    v19 = (char)*v18;
    if (*v18)
    {
      v20 = (v42 & 1) != 0 ? (uint64_t *)(v43 + 1) : (uint64_t *)((char *)&v42 + 2);
      v21 = *(_BYTE *)v20;
      if (*(_BYTE *)v20)
      {
        v22 = (unsigned __int8 *)v20 + 1;
        do
        {
          v19 = 31 * v19 + v21;
          v23 = *v22++;
          v21 = v23;
        }
        while (v23);
      }
    }
  }
  else
  {
    v19 = 0;
  }
  *(_QWORD *)&v56 = 2 * v19;
  *((_QWORD *)&v56 + 1) = v18;
  v24 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 88, &v56);
  re::StringID::destroyString((re::StringID *)&v56);
  if (!v24)
    goto LABEL_44;
  v25 = *v24;
  v26 = *(_QWORD *)(a1 + 16);
  if (v26 <= v25)
  {
    v48 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    v50 = 1024;
    v51 = 789;
    v52 = 2048;
    v53 = v25;
    v54 = 2048;
    v55 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    v48 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    v50 = 1024;
    v51 = 789;
    v52 = 2048;
    v53 = v25;
    v54 = 2048;
    v55 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v27 = *(_QWORD *)(a1 + 32);
  if (v9 != a3)
  {
    if (v27)
    {
      v29 = v27 + 48 * v25;
      v31 = *(_QWORD *)(v29 + 8);
      v30 = (_QWORD *)(v29 + 8);
      if (v31)
      {
        v32 = re::Slice<char>::range(&v46, v9 + 1, v47);
        v28 = re::internal::EntityHandleHookupTable::lookupEntity(*v30, v32, v33);
        goto LABEL_45;
      }
    }
LABEL_44:
    v28 = 0;
    goto LABEL_45;
  }
  if (!v27)
    goto LABEL_44;
  v28 = *(_QWORD *)(v27 + 48 * v25);
LABEL_45:
  if (v41 && (v42 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v41 + 40))();
  return v28;
}

_QWORD *re::internal::EntityHandleHookupTable::hookupHandles(re::internal::EntityHandleHookupTable *this, const re::IntrospectionBase **a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24ED715F8;
  v7[1] = this;
  v8 = v7;
  v3 = (*((uint64_t (**)(const re::IntrospectionBase **))*a2 + 5))(a2);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  re::IntrospectionWalker::walk(v4, a2, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

re::internal::EntityHandleHookupTable *re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable(re::internal::EntityHandleHookupTable *this)
{
  uint64_t v1;
  re::internal::EntityHandleHookupTable *v2;
  uint64_t v3;
  re::internal::EntityHandleHookupTable **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const re::IntrospectionBase ***v9;
  uint64_t v10;
  const re::IntrospectionBase **v11;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = this;
    v3 = 48 * v1;
    v4 = (re::internal::EntityHandleHookupTable **)(*((_QWORD *)this + 4) + 8);
    do
    {
      this = *v4;
      if (*v4)
        this = (re::internal::EntityHandleHookupTable *)re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable(this);
      v4 += 6;
      v3 -= 48;
    }
    while (v3);
    v5 = *((_QWORD *)v2 + 2);
    if (v5)
    {
      v6 = *((_QWORD *)v2 + 4);
      v7 = v6 + 48 * v5;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 56);
        if (v8)
        {
          v9 = *(const re::IntrospectionBase ****)(*(_QWORD *)v6 + 72);
          v10 = 8 * v8;
          do
          {
            v11 = *v9++;
            this = (re::internal::EntityHandleHookupTable *)re::internal::EntityHandleHookupTable::hookupHandles(v2, v11);
            v10 -= 8;
          }
          while (v10);
        }
        v6 += 48;
      }
      while (v6 != v7);
    }
  }
  return this;
}

uint64_t re::internal::entityHandleSerialize(uint64_t a1, int a2, id *this, re::DynamicString *a4)
{
  uint64_t v7;
  const re::DynamicString *v9;
  const char **WeakRetained;
  const char **v11;
  uint64_t (**v12)(const char **, re::DynamicString *);
  uint64_t (*v13)(const char **, re::DynamicString *);
  const char *v14;
  const char *v15;
  size_t v16;

  if (re::ecs2::EntityHandle::isNull(this))
    goto LABEL_2;
  v9 = (const re::DynamicString *)this[2];
  if (v9)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v15, v9);
    re::DynamicString::operator=(a4, (re::DynamicString *)&v15);
    if (v15 && (v16 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    return 1;
  }
  WeakRetained = (const char **)objc_loadWeakRetained(this);
  if (!WeakRetained)
  {
LABEL_2:
    v15 = "";
    v16 = 0;
    re::DynamicString::operator=(a4, (uint64_t)&v15);
    return 1;
  }
  v11 = WeakRetained;
  if (a1
    && (v12 = *(uint64_t (***)(const char **, re::DynamicString *))(a1 + 8)) != 0
    && (v13 = *v12) != 0)
  {
    v7 = v13(WeakRetained - 1, a4);
  }
  else
  {
    v14 = WeakRetained[34];
    v15 = v14;
    v16 = strlen(v14);
    re::DynamicString::operator=(a4, (uint64_t)&v15);
    v7 = 1;
  }

  return v7;
}

uint64_t re::internal::entityHandleDeserialize(re::Allocator *a1, uint64_t a2, int a3, id *this, char *a5)
{
  uint64_t v6;
  void (*v7)(id *__return_ptr, char *);
  id location[3];

  v6 = *(_QWORD *)(a2 + 8);
  if (v6 && (v7 = *(void (**)(id *__return_ptr, char *))(v6 + 8)) != 0)
  {
    v7(location, a5);
    re::ecs2::EntityHandle::operator=(this, (uint64_t)location);
    re::ecs2::EntityHandle::reset(location);
    objc_destroyWeak(location);
  }
  else
  {
    re::ecs2::EntityHandle::setString(this, a5, a1);
  }
  return 1;
}

uint64_t re::internal::entityHandleDeepCopy(re::Allocator *a1, uint64_t a2, int a3, id *location, id *this)
{
  uint64_t v7;
  unint64_t *v9;
  char *v11;
  char v12;
  uint64_t v13;
  _BYTE v14[23];

  *(_QWORD *)&v14[15] = *MEMORY[0x24BDAC8D0];
  if (a2
    && (v7 = *(_QWORD *)(a2 + 8)) != 0
    && *(_QWORD *)(v7 + 24)
    && (v11 = re::ecs2::EntityHandle::resolve((uint64_t)location, *(char **)(v7 + 16)),
        (v9 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(_QWORD *)(v7 + 24), (uint64_t *)&v11)) != 0))
  {
    *(_QWORD *)v14 = 0;
    v13 = 0;
    *(_QWORD *)&v14[7] = 0;
    v12 = 35;
    std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](&v13, *v9);
    re::ecs2::EntityHandle::setString(this, &v12, a1);
  }
  else
  {
    re::ecs2::EntityHandle::operator=(this, location);
  }
  return 1;
}

_QWORD *re::DynamicArray<re::internal::EntityHandleHookupData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v7 + 1;
        v11 = 48 * v9;
        v12 = (uint64_t *)(v8 + 8);
        do
        {
          *(v10 - 1) = *(v12 - 1);
          std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](v10, v12);
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v12);
          v10 += 6;
          v12 += 6;
          v11 -= 48;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED715F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED715F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  const re::DynamicString *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  re *v10;
  NSObject *v11;
  char *v12;
  re *v13;
  unint64_t v14;
  char *v15;
  uint8_t buf[4];
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 16) == 11
    && *(uint64_t (**)(uint64_t, int, id *, re::DynamicString *))(a2 + 72) == re::internal::entityHandleSerialize)
  {
    v3 = *a3;
    v4 = *(const re::DynamicString **)(*a3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(result + 8);
      re::DynamicString::DynamicString((re::DynamicString *)&v13, v4);
      result = (uint64_t)v13;
      if ((v14 & 1) != 0)
        v6 = v14 >> 1;
      else
        v6 = v14 >> 1;
      if (v13 && (v14 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
      if (v6)
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v13, *(const re::DynamicString **)(v3 + 16));
        if ((v14 & 1) != 0)
          v7 = v15;
        else
          v7 = (char *)&v14 + 1;
        v8 = strlen(v7);
        v9 = re::internal::EntityHandleHookupTable::lookupEntity(v5, v7, v8);
        v10 = v13;
        if (v13 && (v14 & 1) != 0)
          v10 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
        if (v9)
        {
          re::ecs2::EntityHandle::reset((id *)v3);
          result = (uint64_t)objc_storeWeak((id *)v3, (id)(v9 + 8));
          *(_QWORD *)(v3 + 8) = *(_QWORD *)(v9 + 296);
        }
        else
        {
          v11 = *re::ecsCoreLogObjects(v10);
          result = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)result)
          {
            re::DynamicString::DynamicString((re::DynamicString *)&v13, *(const re::DynamicString **)(v3 + 16));
            if ((v14 & 1) != 0)
              v12 = v15;
            else
              v12 = (char *)&v14 + 1;
            *(_DWORD *)buf = 136315138;
            v17 = v12;
            _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "EntityHandle points to unknown entity '%s'", buf, 0xCu);
            result = (uint64_t)v13;
            if (v13)
            {
              if ((v14 & 1) != 0)
                return (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

void re::ecs2::CustomSystem::~CustomSystem(re::ecs2::CustomSystem *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 13);
  if (v2)
    _Block_release(v2);
  v3 = (const void *)*((_QWORD *)this + 14);
  if (v3)
    _Block_release(v3);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 19);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::CustomSystem::~CustomSystem(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::CustomSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id WeakRetained;
  void *v11;
  _BYTE v13[16];
  uint64_t v14[2];

  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v14);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v13, 3071, a1);
  if ((a2 & 0x100000000) == 0)
  {
    if (*(_QWORD *)(a1 + 112))
    {
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
      if (v7)
      {
        v8 = (id *)v6;
        v9 = 8 * v7;
        do
        {
          WeakRetained = objc_loadWeakRetained(v8);
          if (WeakRetained)
          {
            v11 = WeakRetained;
            re::ecs2::CustomSystem::update(a1, (unint64_t)WeakRetained - 8, a2, a3);

          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, float))(a1 + 128))(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 40), *(float *)&a2);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v13);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)126>::end((uint64_t)v14);
}

uint64_t re::ecs2::CustomSystem::update(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  const re::ecs2::ComponentTypeBase *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18[4];

  v4 = *(float *)&a3;
  v18[2] = a3;
  v18[3] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v18);
  if (*(_QWORD *)(a1 + 112))
  {
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 3071, a1);
    if (!*(_BYTE *)(a2 + 50))
    {
      if (*(_QWORD *)(a1 + 152))
      {
        v7 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
        v8 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(a1 + 176)));
        if ((_DWORD)v8 != 0x7FFFFFFF)
        {
          v9 = *(_QWORD *)(a1 + 168);
          if (*(_QWORD *)(v9 + 32 * v8 + 16) != a2)
          {
            v10 = v8;
            do
              v10 = *(_DWORD *)(v9 + 32 * v10 + 8) & 0x7FFFFFFF;
            while ((_DWORD)v10 != 0x7FFFFFFF && *(_QWORD *)(v9 + 32 * v10 + 16) != a2);
          }
        }
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 112) + 16))();
    }
  }
  else
  {
    v11 = v4;
    v12 = *(const re::ecs2::ComponentTypeBase **)(a1 + 144);
    if (v12)
    {
      v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), v12);
      v14 = *(_QWORD *)(v13 + 24);
      if (v14)
        v15 = *(_QWORD *)(v13 + 40);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 3071, a1);
    (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t, float))(a1 + 136))(*(_QWORD *)(a1 + 120), a2, v15, v14, v11);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)126>::end((uint64_t)v18);
}

void re::ecs2::CustomSystem::willAddSceneToECSService(re::ecs2::CustomSystem *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v3 = *((_QWORD *)this + 13);
  if (v3 && !*(_BYTE *)(a2 + 50))
  {
    v5 = (*(uint64_t (**)(uint64_t, unint64_t, re::ecs2::CustomSystem *))(v3 + 16))(v3, a2, this);
    v6 = *((_QWORD *)this + 19);
    v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v8 = v7 ^ (v7 >> 31);
    if (v6)
    {
      v6 = v8 % *((unsigned int *)this + 44);
      v9 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * v6);
      if ((_DWORD)v9 != 0x7FFFFFFF)
      {
        v14 = *((_QWORD *)this + 21);
        if (*(_QWORD *)(v14 + 32 * v9 + 16) == a2)
          return;
        while (1)
        {
          v9 = *(_DWORD *)(v14 + 32 * v9 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v9 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v14 + 32 * v9 + 16) == a2)
            return;
        }
      }
    }
    v10 = *((unsigned int *)this + 47);
    if ((_DWORD)v10 == 0x7FFFFFFF)
    {
      v10 = *((unsigned int *)this + 46);
      v11 = v10;
      if ((_DWORD)v10 == *((_DWORD *)this + 44))
      {
        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)this + 152, 2 * *((_DWORD *)this + 45));
        LODWORD(v6) = v8 % *((unsigned int *)this + 44);
        v11 = *((_DWORD *)this + 46);
      }
      *((_DWORD *)this + 46) = v11 + 1;
      v12 = *((_QWORD *)this + 21);
      v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
    }
    else
    {
      v12 = *((_QWORD *)this + 21);
      v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
      *((_DWORD *)this + 47) = v13 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v12 + 32 * v10 + 8) = v13 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)this + 21) + 32 * v10 + 8) = *(_DWORD *)(*((_QWORD *)this + 21) + 32 * v10 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v6);
    *(_QWORD *)(*((_QWORD *)this + 21) + 32 * v10) = v8;
    *(_QWORD *)(*((_QWORD *)this + 21) + 32 * v10 + 16) = a2;
    *(_QWORD *)(*((_QWORD *)this + 21) + 32 * v10 + 24) = v5;
    *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v6) = v10;
    ++*((_DWORD *)this + 45);
    ++*((_DWORD *)this + 48);
  }
}

void re::ecs2::CustomSystem::willRemoveSceneFromECSService(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  int v21;
  int v22;

  if (*(_QWORD *)(a1 + 104) && !*(_BYTE *)(a2 + 50))
  {
    LODWORD(v4) = 0x7FFFFFFF;
    v5 = a2 ^ (a2 >> 30);
    if (*(_QWORD *)(a1 + 152))
    {
      v6 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27));
      v7 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4 * ((v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 176)));
      if ((_DWORD)v7 != 0x7FFFFFFF)
      {
        v8 = *(_QWORD *)(a1 + 168);
        if (*(_QWORD *)(v8 + 32 * v7 + 16) == a2)
        {
          LODWORD(v4) = v7;
        }
        else
        {
          v4 = v7;
          while (1)
          {
            v4 = *(_DWORD *)(v8 + 32 * v4 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v4 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v8 + 32 * v4 + 16) == a2)
              goto LABEL_13;
          }
          LODWORD(v4) = 0x7FFFFFFF;
        }
      }
    }
LABEL_13:
    CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 168) + 32 * v4 + 24));
    if (*(_QWORD *)(a1 + 152))
    {
      v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27));
      v10 = (v9 ^ (v9 >> 31)) % *(unsigned int *)(a1 + 176);
      v11 = *(_QWORD *)(a1 + 160);
      v12 = *(unsigned int *)(v11 + 4 * v10);
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)(a1 + 168);
        v14 = v13 + 32 * v12;
        if (*(_QWORD *)(v14 + 16) == a2)
        {
          *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v14 + 8) & 0x7FFFFFFF;
LABEL_20:
          v17 = *(_QWORD *)(a1 + 168);
          v18 = v17 + 32 * v12;
          v21 = *(_DWORD *)(v18 + 8);
          v20 = (int *)(v18 + 8);
          v19 = v21;
          if (v21 < 0)
          {
            *v20 = v19 & 0x7FFFFFFF;
            v17 = *(_QWORD *)(a1 + 168);
            v19 = *(_DWORD *)(v17 + 32 * v12 + 8);
          }
          v22 = *(_DWORD *)(a1 + 192);
          *(_DWORD *)(v17 + 32 * v12 + 8) = *(_DWORD *)(a1 + 188) | v19 & 0x80000000;
          --*(_DWORD *)(a1 + 180);
          *(_DWORD *)(a1 + 188) = v12;
          *(_DWORD *)(a1 + 192) = v22 + 1;
        }
        else
        {
          while (1)
          {
            v15 = v12;
            v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v12 == 0x7FFFFFFF)
              break;
            v16 = v13 + 32 * v12;
            if (*(_QWORD *)(v16 + 16) == a2)
            {
              *(_DWORD *)(v13 + 32 * v15 + 8) = *(_DWORD *)(v13 + 32 * v15 + 8) & 0x80000000 | *(_DWORD *)(v16 + 8) & 0x7FFFFFFF;
              goto LABEL_20;
            }
          }
        }
      }
    }
  }
}

uint64_t *re::ecs2::allocInfo_CustomSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_354);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_354))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117270, 0);
    *(uint64_t *)((char *)&qword_254117280 + 6) = 0;
    qword_254117280 = 0;
    qword_254117290 = 0;
    qword_254117298 = 0xFFFFFFFFLL;
    qword_254117270 = (uint64_t)&off_24ED7DAA8;
    qword_2541172A0 = (uint64_t)"CustomSystem";
    dword_2541172A8 = 0;
    unk_2541172B0 = 0u;
    unk_2541172C0 = 0u;
    unk_2541172D0 = 0u;
    qword_2541172E0 = 0;
    __cxa_guard_release(&_MergedGlobals_354);
  }
  return &qword_254117270;
}

void re::ecs2::initInfo_CustomSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x31FFC470425E4A40;
  v5[1] = "CustomSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_CustomSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CustomSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::CustomSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 2, 1);
  *(_QWORD *)v3 = &off_24ED71678;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_DWORD *)(v3 + 184) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 188) = 0x7FFFFFFFLL;
  *(_BYTE *)(v3 + 200) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::CustomSystem>(int a1, int a2, re::ecs2::CustomSystem *this)
{
  re::ecs2::CustomSystem::~CustomSystem(this);
}

double re::internal::defaultConstructV2<re::ecs2::CustomSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 2, 1);
  *(_QWORD *)v1 = &off_24ED71678;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 184) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 188) = 0x7FFFFFFFLL;
  *(_BYTE *)(v1 + 200) = 0;
  return result;
}

uint64_t re::ecs2::CustomSystem::typeInfo(re::ecs2::CustomSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomSystem>, 0);
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)126>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[508].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[508].i64[0] = v5;
      v6 = v3[508].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[508].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[509] = vaddq_s64(v3[509], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

re::ecs2::AnchorComponent *re::ecs2::initECSCore(re::ecs2 *this)
{
  char *v1;
  re::ecs2::CustomSystemRegistry *v2;
  char *v3;
  re::ecs2::EntityFactory *v4;
  uint64_t *v5;
  const char *v6;
  re::ecs2::AnchorComponent *result;
  uint64_t SyncInfo;

  v1 = re::ecs2::ComponentTypeRegistry::instance(this);
  re::ecs2::ComponentTypeRegistry::init((os_unfair_lock_s *)v1);
  v3 = re::ecs2::CustomSystemRegistry::instance(v2);
  re::ecs2::CustomSystemRegistry::init((os_unfair_lock_s *)v3, 0);
  v5 = re::ecs2::EntityFactory::instance(v4);
  result = re::ecs2::EntityFactory::init((re::Allocator *)v5, v6);
  if (!re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    SyncInfo = re::ecs2::AnchorComponent::makeSyncInfo(result);
    result = (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(SyncInfo);
  }
  if (!re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    result = (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::initComponentType(0);
  if (!re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    result = (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(0);
  if (!re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    return (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(0);
  return result;
}

void re::ecs2::deinitECSCore(re::ecs2 *this)
{
  uint64_t *v1;
  re *v2;
  char *v3;
  re::ecs2::ComponentTypeRegistry *v4;
  char *v5;

  if (re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    this = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(this);
  if (re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    this = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::deinitComponentType(this);
  if (re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    this = re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(this);
  if (re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    this = re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(this);
  v1 = re::ecs2::EntityFactory::instance(this);
  v2 = re::ecs2::EntityFactory::deinit((re *)v1);
  v3 = re::ecs2::CustomSystemRegistry::instance(v2);
  re::ecs2::CustomSystemRegistry::deinit((os_unfair_lock_s *)v3);
  v5 = re::ecs2::ComponentTypeRegistry::instance(v4);
  re::ecs2::ComponentTypeRegistry::deinit((re::ecs2::ComponentTypeRegistry *)v5);
}

_QWORD *re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED71780;
  v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(a1 + 1));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  return a1;
}

void re::ecs2::SceneCollection::~SceneCollection(re::ecs2::SceneCollection *this)
{
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(this);
  JUMPOUT(0x2276933B8);
}

re::ecs2::Entity *re::ecs2::SceneCollection::willClear(re::ecs2::Entity *this)
{
  re::ecs2::Entity *v1;
  unint64_t v2;

  if (*((_QWORD *)this + 3))
  {
    v1 = this;
    v2 = 0;
    do
      this = re::ecs2::Scene::setECSService(*(re::ecs2::Scene **)(*((_QWORD *)v1 + 5) + 8 * v2++), 0);
    while (v2 < *((_QWORD *)v1 + 3));
  }
  return this;
}

re::ecs2::Entity *re::ecs2::SceneCollection::willInsert(uint64_t a1, uint64_t a2, re::ecs2::Scene **a3)
{
  return re::ecs2::Scene::setECSService(*a3, *(re::ecs2::Entity **)(a1 + 48));
}

re::ecs2::Entity *re::ecs2::SceneCollection::willRemoveAt(uint64_t a1, uint64_t a2, re::ecs2::Scene **a3)
{
  return re::ecs2::Scene::setECSService(*a3, 0);
}

re::ecs2::Entity *re::ecs2::SceneCollection::willSet(uint64_t a1, unint64_t a2, re::ecs2::Scene **a3)
{
  re::ecs2::Scene **v5;

  v5 = (re::ecs2::Scene **)re::ecs2::EntityComponentCollection::operator[](a1, a2);
  re::ecs2::Scene::setECSService(*v5, 0);
  return re::ecs2::Scene::setECSService(*a3, *(re::ecs2::Entity **)(a1 + 48));
}

void re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(_QWORD *a1)
{
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(a1);
  JUMPOUT(0x2276933B8);
}

re::Allocator *re::ecs2::ComponentTypeBase::makeAllocator(re::ecs2::ComponentTypeBase *this, const char *a2)
{
  uint64_t v4;
  uint64_t *v5;
  re::Allocator *v6;
  unsigned __int8 v7;
  _BOOL4 v8;
  re *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  const char *v13;
  _QWORD v14[2];

  v4 = re::Allocator::useMallocAllocator(this);
  if ((v4 & 1) != 0)
  {
    v5 = re::globalAllocators((re *)v4);
    v6 = (re::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 24, 8);
    *(_QWORD *)re::Allocator::Allocator(v6, (const char *)this, 1) = &off_24ED42648;
  }
  else
  {
    if ((v7 & 1) == 0)
    {
      if ((_DWORD)v4)
      {
        re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::$_0::operator()(v4, v13);
      }
    }
    v14[0] = 0;
    v14[1] = &str_110;
    v8 = re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey((uint64_t)&re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::types, v14);
    re::StringID::destroyString((re::StringID *)v14);
    v10 = re::globalAllocators(v9)[2];
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32);
    if (v8)
    {
      v6 = (re::Allocator *)v11(v10, 72);
      re::PageDebugAllocator::PageDebugAllocator(v6, (const char *)this, 1, 0x400uLL);
    }
    else
    {
      v6 = (re::Allocator *)v11(v10, 240);
    }
  }
  return v6;
}

void re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::$_0::operator()(uint64_t a1, const char *a2)
{
  char *v2;
  size_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  _anonymous_namespace_ *v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12[2];
  char *v13;
  size_t v14;
  char v15[8];
  uint64_t v16;
  _QWORD v17[3];

  dword_255828AF0 = 0;
  re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::types = 0u;
  unk_255828AE0 = 0u;
  *(_QWORD *)algn_255828AF4 = 0x7FFFFFFFLL;
  re::Defaults::stringValue((re::Defaults *)"DebugComponentPools", a2, (uint64_t)v15);
  if (v15[0])
  {
    if ((v17[0] & 1) != 0)
      v2 = (char *)v17[1];
    else
      v2 = (char *)v17 + 1;
    if ((v17[0] & 1) != 0)
      v3 = v17[0] >> 1;
    else
      v3 = LOBYTE(v17[0]) >> 1;
    v13 = v2;
    v14 = v3;
    do
    {
      v4 = (char *)memchr(v2, 44, v3);
      if (v4)
        v5 = v4;
      else
        v5 = &v2[v3];
      v6 = v5 - v2;
      v7 = (_anonymous_namespace_ *)re::Slice<char>::range(&v13, 0, v6);
      v9 = v8;
      v12[0] = 0;
      v12[1] = (uint64_t)&str_110;
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::types, v12);
      re::StringID::destroyString((re::StringID *)v12);
      if (v6 == v3)
        v10 = v6;
      else
        v10 = v6 + 1;
      v2 = (char *)re::Slice<char>::range(&v13, v10, v14);
      v3 = v11;
      v13 = v2;
      v14 = v11;
    }
    while (v11);
    if (v15[0] && v16 && (v17[0] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
  }
}

BOOL re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  v3 = 0x7FFFFFFFLL;
  if ((_DWORD)v2)
  {
    v5 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                         + 4
                         * (((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
                          % v2));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v3 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v7 + 24 * v6 + 8), a2))
      {
        v6 = *(_DWORD *)(v7 + 24 * v6) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return v3 != 0x7FFFFFFF;
      }
      v3 = v6;
    }
  }
  return v3 != 0x7FFFFFFF;
}

_QWORD *re::ecs2::Component::markDirty(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  re::EventBus *v6;
  __objc2_class_ro *v7;
  uint64_t v8[2];

  v1 = this;
  v2 = this[2];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = *(_QWORD *)(v2 + 24);
    }
    while (v2);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = (const void *)(*(uint64_t (**)(_QWORD *))(*this + 40))(this);
      v6 = *(re::EventBus **)(v4 + 288);
      v8[0] = v1[2];
      v8[1] = (uint64_t)v5;
      v7 = re::EventBus::getTypeId<REComponentDidChangeEvent>();
      this = (_QWORD *)re::EventBus::publish(v6, v8[0], (uint64_t)v7, (uint64_t)v8, 0x10uLL, v5);
    }
  }
  *((_BYTE *)v1 + 24) = 0;
  return this;
}

uint64_t re::ecs2::Component::enqueueMarkDirty(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(this + 24))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 16);
    if (v2)
    {
      do
      {
        v3 = v2;
        v2 = *(_QWORD *)(v2 + 24);
      }
      while (v2);
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        this = *(_QWORD *)(v4 + 56);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 192))(this, v1);
          *(_BYTE *)(v1 + 24) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::Component::isExcludedFromRealityFile(re::ecs2::Component *this)
{
  return (*(unsigned __int8 *)((*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)this + 40))(this) + 40) >> 1) & 1;
}

uint64_t re::ecs2::Component::isIncludedInRealityFile(re::ecs2::Component *this)
{
  return (*(unsigned __int8 *)((*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)this + 40))(this) + 40) >> 2) & 1;
}

uint64_t *re::ecs2::allocInfo_Component(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_355);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_355))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117300, 0);
    *(uint64_t *)((char *)&qword_254117310 + 6) = 0;
    qword_254117310 = 0;
    qword_254117320 = 0;
    qword_254117328 = 0xFFFFFFFFLL;
    qword_254117300 = (uint64_t)&off_24ED7DAA8;
    qword_254117330 = (uint64_t)"Component";
    dword_254117338 = 0;
    unk_254117340 = 0u;
    unk_254117350 = 0u;
    unk_254117360 = 0u;
    qword_254117370 = 0;
    __cxa_guard_release(&_MergedGlobals_355);
  }
  return &qword_254117300;
}

void re::ecs2::initInfo_Component(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  v9[0] = 0x6DAE480279BALL;
  v9[1] = "Component";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  v4 = atomic_load((unsigned __int8 *)&qword_2541172F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541172F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 16, 8);
      *(_DWORD *)v7 = 2;
      *(_QWORD *)(v7 + 8) = 0;
      qword_2541172F0 = v7;
      __cxa_guard_release(&qword_2541172F8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541172F0;
  re::IntrospectionRegistry::add(this, v3);
  v8 = v10;
}

uint64_t re::ecs2::introspect_Component(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Component", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Component, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Component, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Component>, this);
}

uint64_t *re::ecs2::allocInfo_SceneComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_356);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_356))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117398, 0);
    *(uint64_t *)((char *)&qword_2541173A8 + 6) = 0;
    qword_2541173A8 = 0;
    qword_2541173B8 = 0;
    qword_2541173C0 = 0xFFFFFFFFLL;
    qword_254117398 = (uint64_t)&off_24ED7DAA8;
    qword_2541173C8 = (uint64_t)"SceneComponent";
    dword_2541173D0 = 0;
    xmmword_2541173D8 = 0u;
    unk_2541173E8 = 0u;
    xmmword_2541173F8 = 0u;
    qword_254117408 = 0;
    __cxa_guard_release(&_MergedGlobals_356);
  }
  return &qword_254117398;
}

void re::ecs2::initInfo_SceneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x79292DCDFFD39BE2;
  v14[1] = "SceneComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254117380);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254117380);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254117388 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "requiresAnchoring";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254117390 = v12;
      __cxa_guard_release(&qword_254117380);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254117388;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::SceneComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A8D8;
  *(_WORD *)(v3 + 25) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::SceneComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::SceneComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A8D8;
  *(_WORD *)(v1 + 25) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::SceneComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SceneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneComponent>, this);
}

re::ecs2::Scene *re::ecs2::Scene::Scene(re::ecs2::Scene *this, const StringID *a2)
{
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  re::ecs2::EntityFactory *v7;
  uint64_t *v8;
  uint64_t v9;
  re::ecs2::Entity *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  const char *v13;
  re::ecs2::Entity *v15;
  char v16;
  _BYTE v17[23];
  uint64_t v18[2];

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED717F0;
  *((_QWORD *)this + 3) = 0;
  v4 = re::StringID::StringID((re::ecs2::Scene *)((char *)this + 32), a2);
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 50) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_QWORD *)((char *)this + 188) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 25) = this;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 200, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v6, 0);
  *(_QWORD *)v6 = &off_24ED420D0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_DWORD *)(v6 + 136) = 0;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 172) = 0u;
  *(_QWORD *)(v6 + 188) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 36) = v6;
  *((_QWORD *)this + 37) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_BYTE *)this + 320) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 47) = 0;
  v8 = re::ecs2::EntityFactory::instance(v7);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v8, 4uLL, &v15);
  v9 = *((_QWORD *)this + 13);
  v10 = v15;
  *((_QWORD *)this + 13) = v15;
  if (v9)
  {

    v10 = (re::ecs2::Entity *)*((_QWORD *)this + 13);
  }
  *((_QWORD *)v10 + 2) = this;
  *((_DWORD *)v10 + 72) |= 0x80u;
  re::ecs2::Entity::updateSwiftObjectOwnership(v10);
  re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*((_QWORD *)this + 13) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*((_QWORD *)this + 13) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v11 = *((_QWORD *)this + 13);
  v12 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v15, a2->var1, *(_QWORD *)(v11 + 296));
  if ((v16 & 1) != 0)
    v13 = *(const char **)&v17[7];
  else
    v13 = v17;
  v18[0] = 0;
  v18[1] = (uint64_t)&str_110;
  re::StringID::operator=((unint64_t *)(v11 + 272), v18);
  re::StringID::destroyString((re::StringID *)v18);
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  *(_DWORD *)(*((_QWORD *)this + 13) + 288) |= 0x400u;
  return this;
}

re::ecs2::Scene *re::ecs2::Scene::Scene(re::ecs2::Scene *this, re::ecs2::Entity *a2)
{
  const char *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  const char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  re::ecs2::Entity *v11;
  uint64_t v12;
  unint64_t v13;
  re::ecs2::Component **v14;
  re::ecs2::Component *v15;
  const re::ecs2::ComponentTypeBase *v16;
  re::ecs2::SceneComponentCollectionBase *v17;
  uint64_t v19;
  char v20;
  _BYTE v21[23];
  char v22[8];
  unint64_t v23;
  uint64_t v24;
  char v25;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED717F0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const char *)*((_QWORD *)a2 + 35);
  re::DynamicString::rfind((uint64_t)&v24, 95, v22);
  if (v22[0])
  {
    v6 = (_anonymous_namespace_ *)re::DynamicString::substr((re::DynamicString *)&v24, 0, v23, (re::DynamicString *)&v19);
    if ((v20 & 1) != 0)
      v7 = *(const char **)&v21[7];
    else
      v7 = v21;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = &str_110;
    if (v19 && (v20 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = &str_110;
  }
  if (v24 && (v25 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v24 + 40))();
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 50) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = a2;
  v8 = (char *)a2 + 8;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_QWORD *)((char *)this + 188) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 25) = this;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 0;
  v9 = re::globalAllocators((re *)v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 200, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v10, 0);
  *(_QWORD *)v10 = &off_24ED420D0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_DWORD *)(v10 + 136) = 0;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 172) = 0u;
  *(_QWORD *)(v10 + 188) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 36) = v10;
  *((_QWORD *)this + 37) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  v11 = (re::ecs2::Entity *)*((_QWORD *)this + 13);
  *((_QWORD *)v11 + 2) = this;
  re::ecs2::Entity::updateSwiftObjectOwnership(v11);
  v12 = *((_QWORD *)this + 13);
  if (*(_QWORD *)(v12 + 56))
  {
    v13 = 0;
    do
    {
      v14 = (re::ecs2::Component **)re::ecs2::EntityComponentCollection::operator[](v12 + 32, v13);
      v15 = *v14;
      v16 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)*v14
                                                                                                  + 40))(*v14);
      v17 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)this + 200), v16);
      re::ecs2::SceneComponentCollectionBase::add(v17, v15);
      ++v13;
      v12 = *((_QWORD *)this + 13);
    }
    while (v13 < *(_QWORD *)(v12 + 56));
  }
  return this;
}

void re::ecs2::Scene::~Scene(re::ecs2::Scene *this)
{
  uint64_t v2;
  re::ecs2::Entity *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 13);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 304) + 16))(v2 + 304);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(v2 + 312);
  v3 = (re::ecs2::Entity *)*((_QWORD *)this + 13);
  *((_QWORD *)v3 + 2) = 0;
  re::ecs2::Entity::updateSwiftObjectOwnership(v3);
  re::ecs2::Entity::updateIsActive_Subtree(*((re::ecs2::Entity **)this + 13));
  re::ecs2::SceneComponentTable::clear((uint64_t)this + 200);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 64);
  v4 = *((_QWORD *)this + 36);
  if (v4)
  {

    *((_QWORD *)this + 36) = 0;
  }
  re::ecs2::SceneComponentTable::~SceneComponentTable((re::ecs2::Scene *)((char *)this + 200));
  v5 = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 19);
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    if (*((_QWORD *)this + 18))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 40))(v6, v5);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 14) = 0;
    ++*((_DWORD *)this + 34);
  }
  v7 = *((_QWORD *)this + 13);
  if (v7)
  {

    *((_QWORD *)this + 13) = 0;
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 64);
  re::StringID::destroyString((re::ecs2::Scene *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::Scene::~Scene(this);
  JUMPOUT(0x2276933B8);
}

re::ecs2::Entity *re::ecs2::Scene::setECSService(re::ecs2::Scene *a1, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *result;
  uint64_t v5;
  uint64_t v6;
  re::EventBus *v7;
  __objc2_class_ro *v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2::Entity **v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t SystemsForTypeID;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  re::ecs2::Entity **v52;
  uint64_t v53;
  re::ecs2::Entity *v54;
  uint64_t v55;
  uint64_t v56;
  re::EventBus *v57;
  re *v58;
  uint64_t v59;
  uint64_t v60;
  re *v61;
  re::EventBus *v62;
  uint64_t v63;
  uint64_t v64;
  re *v65;
  re::EventBus *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  unint64_t j;
  uint64_t v76;
  unsigned __int8 **v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  re::ecs2::Entity **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  re::EventBus *v102;
  __objc2_class_ro *Type;
  uint64_t v104;
  StringID v105;
  uint64_t v106;
  re::ecs2::Entity *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  StringID v112;
  re::ecs2::Scene *v113;
  _BYTE v114[16];
  _QWORD v115[3];
  uint64_t v116;
  _QWORD *v117;
  _QWORD v118[3];
  uint64_t v119;
  re *v120;
  _QWORD v121[3];
  uint64_t v122;
  re *v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  result = (re::ecs2::Entity *)*((_QWORD *)a1 + 7);
  if (result != a2)
  {
    if (result)
    {
      v5 = (*(uint64_t (**)(re::ecs2::Entity *))(*(_QWORD *)result + 32))(result);
      v6 = re::ServiceLocator::serviceOrNull<re::EventBus>(v5);
      if (v6)
      {
        v7 = (re::EventBus *)v6;
        re::EventBus::unsubscribe(*((_QWORD *)a1 + 36), *((_QWORD *)a1 + 41), *((_QWORD *)a1 + 42));
        *((_QWORD *)a1 + 41) = 0;
        *((_QWORD *)a1 + 42) = 0;
        re::EventBus::unsubscribe(*((_QWORD *)a1 + 36), *((_QWORD *)a1 + 43), *((_QWORD *)a1 + 44));
        *((_QWORD *)a1 + 43) = 0;
        *((_QWORD *)a1 + 44) = 0;
        re::EventBus::unsubscribe(*((_QWORD *)a1 + 36), *((_QWORD *)a1 + 45), *((_QWORD *)a1 + 46));
        *((_QWORD *)a1 + 45) = 0;
        *((_QWORD *)a1 + 46) = 0;
        v107 = a1;
        v8 = re::EventBus::getTypeId<RESceneWillRemoveEvent>();
        re::EventBus::publish(v7, (uint64_t)a1, (uint64_t)v8, (uint64_t)&v107, 8uLL, 0);
      }
      v9 = *((_QWORD *)a1 + 13);
      v10 = *(_QWORD *)(v9 + 328);
      if (v10)
      {
        v11 = *(re::ecs2::Entity ***)(v9 + 344);
        v12 = 8 * v10;
        do
        {
          if ((*((_BYTE *)*v11 + 288) & 1) != 0)
            re::ecs2::Entity::sendDeactivateEvents(*v11, a1);
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v111 = 0;
      v108 = 0;
      v109 = 0;
      v107 = 0;
      v110 = 0;
      v13 = *((_QWORD *)a1 + 33);
      if (v13)
      {
        v14 = (_QWORD **)*((_QWORD *)a1 + 35);
        v15 = &v14[v13];
        do
        {
          v16 = *v14;
          v109 = 0;
          ++v110;
          v17 = v16[3];
          if (v17)
          {
            v18 = (uint64_t *)v16[5];
            v19 = 8 * v17;
            do
            {
              v113 = 0;
              v113 = (re::ecs2::Scene *)*v18;
              if ((*(_BYTE *)(*((_QWORD *)v113 + 2) + 288) & 1) != 0)
                re::DynamicArray<re::TransitionCondition *>::add(&v107, &v113);
              ++v18;
              v19 -= 8;
            }
            while (v19);
          }
          (*(void (**)(_QWORD *, re::ecs2::Entity **))(*v16 + 88))(v16, &v107);
          ++v14;
        }
        while (v14 != v15);
        v20 = *((_QWORD *)a1 + 33);
        if (v20)
        {
          v21 = (uint64_t *)*((_QWORD *)a1 + 35);
          v22 = 8 * v20;
          do
          {
            v23 = *v21++;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 96))(v23, v23 + 8);
            v22 -= 8;
          }
          while (v22);
        }
      }
      if (*(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7)) + 24))
      {
        for (i = 0;
              i < *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7))
                            + 24);
              ++i)
        {
          v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7));
          v26 = (unsigned __int8 **)re::ecs2::EntityComponentCollection::operator[](v25, i);
          v27 = *v26;
          if (!(*(uint64_t (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)a1 + 7) + 96))(*((_QWORD *)a1 + 7), *v26))
          {
            v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7));
            v29 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v27 + 32))(v27);
            SystemsForTypeID = re::ecs2::SystemCollection::getSystemsForTypeID(v28, v29 + 32);
            if (v31)
            {
              v32 = (_QWORD *)SystemsForTypeID;
              v33 = 8 * v31;
              while ((re::ecs2::Scene *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 7) + 96))(*((_QWORD *)a1 + 7), *v32) != a1)
              {
                ++v32;
                v33 -= 8;
                if (!v33)
                  goto LABEL_30;
              }
              continue;
            }
LABEL_30:
            v34 = *((_QWORD *)a1 + 47);
            if (v34)
            {
              v35 = *(_QWORD *)(v34 + 24);
              v36 = v27[85];
              if (v35 != 1)
              {
                if (!v27[85])
                  continue;
LABEL_36:
                (*(void (**)(unsigned __int8 *, re::ecs2::Scene *))(*(_QWORD *)v27 + 56))(v27, a1);
                continue;
              }
            }
            else
            {
              v36 = v27[85];
            }
            if (v36 != 1)
              goto LABEL_36;
          }
        }
      }
      v37 = *((_QWORD *)a1 + 10);
      if (v37)
      {
        v38 = (uint64_t *)*((_QWORD *)a1 + 12);
        v39 = 8 * v37;
        do
        {
          v40 = *((_QWORD *)a1 + 7);
          v41 = *v38;
          v106 = v41;
          if (v41)
            v42 = (id)(v41 + 8);
          (*(void (**)(uint64_t, uint64_t *, re::ecs2::Scene *))(*(_QWORD *)v40 + 56))(v40, &v106, a1);
          if (v106)
          {

            v106 = 0;
          }
          ++v38;
          v39 -= 8;
        }
        while (v39);
      }
      v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 32))(*((_QWORD *)a1 + 7));
      v44 = *((_QWORD *)a1 + 13) + 272;
      if ((v45 & 1) == 0
      {
        re::introspect<re::EventBus>(void)::info = re::introspect_EventBus(0);
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, re::introspect<re::EventBus>(void)::info, v44))
      {
        v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 32))(*((_QWORD *)a1 + 7));
        v47 = re::ServiceLocator::service<re::ServiceRegistry>(v46);
        re::StringID::StringID((re::StringID *)&v105, (const StringID *)(*((_QWORD *)a1 + 13) + 272));
        if ((v48 & 1) == 0
        {
          re::introspect<re::EventBus>(void)::info = re::introspect_EventBus(0);
        }
        v49 = re::introspect<re::EventBus>(void)::info;
        re::StringID::StringID((re::StringID *)&v112, &v105);
        v113 = (re::ecs2::Scene *)v49;
        re::StringID::StringID((re::StringID *)v114, &v112);
        re::StringID::destroyString((re::StringID *)&v112);
        re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v47 + 16, (uint64_t *)&v113);
        re::StringID::destroyString((re::StringID *)v114);
        re::StringID::destroyString((re::StringID *)&v105);
      }
      result = v107;
      if (v107 && v111)
        result = (re::ecs2::Entity *)(*(uint64_t (**)(void))(*(_QWORD *)v107 + 40))();
    }
    *((_QWORD *)a1 + 7) = a2;
    v50 = *((_QWORD *)a1 + 13);
    v51 = *(_QWORD *)(v50 + 328);
    if (v51)
    {
      v52 = *(re::ecs2::Entity ***)(v50 + 344);
      v53 = 8 * v51;
      do
      {
        v54 = *v52++;
        result = re::ecs2::Entity::updateIsActive_Subtree(v54);
        v53 -= 8;
      }
      while (v53);
    }
    if (a2)
    {
      v55 = (*(uint64_t (**)(re::ecs2::Entity *))(*(_QWORD *)a2 + 32))(a2);
      v56 = re::ServiceLocator::serviceOrNull<re::ServiceRegistry>(v55);
      if (v56)
      {
        re::ServiceRegistry::add<re::EventBus>(v56, *((void **)a1 + 36), (StringID *)(*((_QWORD *)a1 + 13) + 272));
        v57 = (re::EventBus *)*((_QWORD *)a1 + 36);
        v59 = re::globalAllocators(v58)[2];
        v121[0] = &off_24ED5DC58;
        v122 = v59;
        v123 = (re *)v121;
        *((_QWORD *)a1 + 41) = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v57, (uint64_t)v121, 0, 0);
        *((_QWORD *)a1 + 42) = v60;
        v61 = v123;
        if (v123)
        {
          v61 = (re *)(**(uint64_t (***)(re *))v123)(v123);
          if (v123 != (re *)v121)
            v61 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 40))(v122);
          v123 = 0;
        }
        v62 = (re::EventBus *)*((_QWORD *)a1 + 36);
        v63 = re::globalAllocators(v61)[2];
        v118[0] = &off_24ED68028;
        v119 = v63;
        v120 = (re *)v118;
        *((_QWORD *)a1 + 43) = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v62, (uint64_t)v118, 0, 0);
        *((_QWORD *)a1 + 44) = v64;
        v65 = v120;
        if (v120)
        {
          v65 = (re *)(**(uint64_t (***)(re *))v120)(v120);
          if (v120 != (re *)v118)
            v65 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 40))(v119);
          v120 = 0;
        }
        v66 = (re::EventBus *)*((_QWORD *)a1 + 36);
        v67 = re::globalAllocators(v65)[2];
        v115[0] = &off_24ED6F098;
        v116 = v67;
        v117 = v115;
        *((_QWORD *)a1 + 45) = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v66, (uint64_t)v115, 0, 0);
        *((_QWORD *)a1 + 46) = v68;
        if (v117)
        {
          (*(void (**)(_QWORD *))*v117)(v117);
          if (v117 != v115)
            (*(void (**)(uint64_t))(*(_QWORD *)v116 + 40))(v116);
          v117 = 0;
        }
      }
      v69 = *((_QWORD *)a1 + 10);
      if (v69)
      {
        v70 = (uint64_t *)*((_QWORD *)a1 + 12);
        v71 = 8 * v69;
        do
        {
          v72 = *((_QWORD *)a1 + 7);
          v73 = *v70;
          v104 = v73;
          if (v73)
            v74 = (id)(v73 + 8);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, re::ecs2::Scene *))(*(_QWORD *)v72 + 48))(v72, &v104, 0xFFFFFFFFLL, a1);
          if (v104)
          {

            v104 = 0;
          }
          ++v70;
          v71 -= 8;
        }
        while (v71);
      }
      if (*(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7)) + 24))
      {
        for (j = 0;
              j < *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7))
                            + 24);
              ++j)
        {
          v76 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7));
          v77 = (unsigned __int8 **)re::ecs2::EntityComponentCollection::operator[](v76, j);
          v78 = *v77;
          v79 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)a1 + 7) + 96))(*((_QWORD *)a1 + 7), *v77);
          if ((re::ecs2::Scene *)v79 == a1)
            goto LABEL_89;
          if (!v79)
          {
            v80 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 40))(*((_QWORD *)a1 + 7));
            v81 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v78 + 32))(v78);
            v82 = re::ecs2::SystemCollection::getSystemsForTypeID(v80, v81 + 32);
            if (v83)
            {
              v84 = (_QWORD *)v82;
              v85 = 8 * v83;
              while ((re::ecs2::Scene *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 7) + 96))(*((_QWORD *)a1 + 7), *v84) != a1)
              {
                ++v84;
                v85 -= 8;
                if (!v85)
                  goto LABEL_83;
              }
              continue;
            }
LABEL_83:
            v86 = *((_QWORD *)a1 + 47);
            if (v86)
            {
              v87 = *(_QWORD *)(v86 + 24);
              v88 = v78[85];
              if (v87 != 1)
              {
                if (!v78[85])
                  continue;
LABEL_89:
                (*(void (**)(unsigned __int8 *, re::ecs2::Scene *))(*(_QWORD *)v78 + 48))(v78, a1);
                continue;
              }
            }
            else
            {
              v88 = v78[85];
            }
            if (v88 != 1)
              goto LABEL_89;
          }
        }
      }
      v111 = 0;
      v108 = 0;
      v109 = 0;
      v107 = 0;
      v110 = 0;
      v89 = *((_QWORD *)a1 + 33);
      if (v89)
      {
        v90 = (_QWORD *)*((_QWORD *)a1 + 35);
        v91 = &v90[v89];
        do
        {
          v92 = (_QWORD *)*v90;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v90 + 72))(*v90, *v90 + 8);
          v109 = 0;
          ++v110;
          v93 = v92[3];
          if (v93)
          {
            v94 = (uint64_t *)v92[5];
            v95 = 8 * v93;
            do
            {
              v113 = 0;
              v113 = (re::ecs2::Scene *)*v94;
              if ((*(_BYTE *)(*((_QWORD *)v113 + 2) + 288) & 1) != 0)
                re::DynamicArray<re::TransitionCondition *>::add(&v107, &v113);
              ++v94;
              v95 -= 8;
            }
            while (v95);
          }
          (*(void (**)(_QWORD *, re::ecs2::Entity **))(*v92 + 80))(v92, &v107);
          ++v90;
        }
        while (v90 != v91);
      }
      v96 = *((_QWORD *)a1 + 13);
      v97 = *(_QWORD *)(v96 + 328);
      if (v97)
      {
        v98 = *(re::ecs2::Entity ***)(v96 + 344);
        v99 = 8 * v97;
        do
        {
          if ((*((_BYTE *)*v98 + 288) & 1) != 0)
            re::ecs2::Entity::sendActivateEvents(*v98, a1);
          ++v98;
          v99 -= 8;
        }
        while (v99);
      }
      if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)a1 + 7) + 136))(*((_QWORD *)a1 + 7))
        && re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
      {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(*((_QWORD *)a1 + 13) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      v100 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 7) + 32))(*((_QWORD *)a1 + 7));
      v101 = re::ServiceLocator::serviceOrNull<re::EventBus>(v100);
      if (v101)
      {
        v102 = (re::EventBus *)v101;
        v113 = a1;
        Type = re::EventBus::getTypeId<RESceneDidAddEvent>();
        re::EventBus::publish(v102, (uint64_t)a1, (uint64_t)Type, (uint64_t)&v113, 8uLL, 0);
      }
      result = v107;
      if (v107)
      {
        if (v111)
          return (re::ecs2::Entity *)(*(uint64_t (**)(void))(*(_QWORD *)v107 + 40))();
      }
    }
  }
  return result;
}

uint64_t `anonymous namespace'::sceneComponentDidChangeHandler(_anonymous_namespace_ *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t `anonymous namespace'::sceneComponentwillDeactivateHandler(_anonymous_namespace_ *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t `anonymous namespace'::sceneComponentDidActivateHandler(_anonymous_namespace_ *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::Scene::addToAllEntitiesRecursively(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  re::ecs2::SceneComponentTable *v6;
  _BOOL8 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint32_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  re::ecs2::Component **v36;
  re::ecs2::Component *v37;
  const re::ecs2::ComponentTypeBase *v38;
  re::ecs2::SceneComponentCollectionBase *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  const re::ecs2::ComponentTypeBase *v43;
  uint64_t v44;
  _anonymous_namespace_ *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE buf[22];
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v3 = result;
    v4 = 0;
    v5 = (_QWORD *)(result + 152);
    v45 = (_anonymous_namespace_ *)(result + 112);
    v6 = (re::ecs2::SceneComponentTable *)(result + 200);
    while (1)
    {
      v47 = 0;
      v47 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v4);
      *(_QWORD *)buf = *(_QWORD *)(v47 + 296);
      v7 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v5, (uint64_t *)buf);
      if (!v7)
      {
        v14 = *(_QWORD *)(v3 + 128);
        re::DynamicArray<re::TransitionCondition *>::add(v45, &v47);
        v15 = *(_QWORD *)(v47 + 296);
        v46 = v15;
        *(_QWORD *)buf = v14;
        *(_QWORD *)&buf[8] = v47;
        v16 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
        v17 = v16 ^ (v16 >> 31);
        if (*(_QWORD *)(v3 + 152))
        {
          v18 = v17 % *(unsigned int *)(v3 + 176);
          v19 = *(unsigned int *)(*(_QWORD *)(v3 + 160) + 4 * v18);
          if ((_DWORD)v19 != 0x7FFFFFFF)
          {
            v20 = *(_QWORD *)(v3 + 168);
            while (*(_QWORD *)(v20 + 40 * v19 + 16) != v15)
            {
              LODWORD(v19) = *(_DWORD *)(v20 + 40 * v19 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v19 == 0x7FFFFFFF)
                goto LABEL_21;
            }
            goto LABEL_25;
          }
        }
        else
        {
          LODWORD(v18) = 0;
        }
LABEL_21:
        re::HashTable<unsigned long long,re::Pair<unsigned long,re::ecs2::Entity *,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v5, v18, v17, &v46, (__n128 *)buf);
        ++*(_DWORD *)(v3 + 192);
        goto LABEL_25;
      }
      v8 = v47;
      if (!*v5)
        break;
      v9 = *(_QWORD *)(v47 + 296);
      v10 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
      v11 = (v10 ^ (v10 >> 31)) % *(unsigned int *)(v3 + 176);
      v12 = *(_QWORD *)(v3 + 168);
      v13 = *(unsigned int *)(*(_QWORD *)(v3 + 160) + 4 * v11);
      if ((_DWORD)v13 == 0x7FFFFFFF)
        goto LABEL_16;
      while (*(_QWORD *)(v12 + 40 * v13 + 16) != v9)
      {
        v13 = *(_DWORD *)(v12 + 40 * v13 + 8) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF)
          goto LABEL_16;
      }
LABEL_17:
      v21 = v12 + 40 * v13;
      v23 = *(_QWORD *)(v21 + 32);
      v22 = v21 + 32;
      v24 = *re::ecsCoreLogObjects((re *)v7);
      v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v8 == v23)
      {
        if (v25)
        {
          v32 = *(_QWORD *)(v47 + 280);
          v33 = *(_QWORD *)(v47 + 296);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v32;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v33;
          v29 = v24;
          v30 = "Trying to add an entity to a scene twice: '%s' id=%llu";
          v31 = 22;
          goto LABEL_24;
        }
      }
      else if (v25)
      {
        v26 = *(_QWORD *)(v47 + 280);
        v27 = *(_QWORD *)(*(_QWORD *)v22 + 280);
        v28 = *(_QWORD *)(v47 + 296);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v26;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v27;
        v49 = 2048;
        v50 = v28;
        v29 = v24;
        v30 = "Trying to add second entity to a scene with same id: '%s' '%s' id=%llu";
        v31 = 32;
LABEL_24:
        _os_log_impl(&dword_224FE9000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, v31);
      }
LABEL_25:
      if (*(_QWORD *)(v3 + 128) != *(_DWORD *)(v3 + 180))
      {
        re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "m_allEntitiesById.size() == m_allEntities.size()", "addToAllEntitiesRecursively", 465);
        _os_crash();
        __break(1u);
      }
      v34 = v47;
      *(_BYTE *)(v47 + 370) = 1;
      if (*(_QWORD *)(v34 + 56))
      {
        v35 = 0;
        do
        {
          v36 = (re::ecs2::Component **)re::ecs2::EntityComponentCollection::operator[](v34 + 32, v35);
          v37 = *v36;
          v38 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)*v36 + 40))(*v36);
          v39 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get(v6, v38);
          re::ecs2::SceneComponentCollectionBase::add(v39, v37);
          ++v35;
          v34 = v47;
          v40 = *(_QWORD *)(v47 + 56);
        }
        while (v35 < v40);
        *(_BYTE *)(v47 + 370) = 0;
        if (v40)
          v41 = (*(_DWORD *)(v34 + 288) & 1) == 0;
        else
          v41 = 1;
        if (!v41)
        {
          v42 = 0;
          do
          {
            v46 = 0;
            v46 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[](v34 + 32, v42);
            v43 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v46 + 40))(v46);
            v44 = re::ecs2::SceneComponentTable::get(v6, v43);
            re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)buf, &v46);
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v44 + 80))(v44, buf);
            if (*(_QWORD *)buf)
            {
              if (v51)
                (*(void (**)(void))(**(_QWORD **)buf + 40))();
            }
            ++v42;
            v34 = v47;
          }
          while (v42 < *(_QWORD *)(v47 + 56));
        }
      }
      else
      {
        *(_BYTE *)(v34 + 370) = 0;
      }
      result = re::ecs2::Scene::addToAllEntitiesRecursively(v3, v34 + 312);
      if ((unint64_t)++v4 >= *(_QWORD *)(a2 + 16))
        return result;
    }
    v12 = *(_QWORD *)(v3 + 168);
LABEL_16:
    LODWORD(v13) = 0x7FFFFFFF;
    goto LABEL_17;
  }
  return result;
}

void re::ecs2::Scene::sendAddAndActivateEvents(uint64_t a1, uint64_t a2)
{
  re::EventBus *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  re::EventBus *v9;
  re::EventBus *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  re::EventBus *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  re::EventBus *v22;
  _QWORD *v23;
  const void *v24;

  v3 = *(re::EventBus **)(a1 + 288);
  ++*((_QWORD *)v3 + 12);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    v6 = v5 + 8 * v4;
    do
    {
      v7 = *(_QWORD **)v5;
      v8 = *(_DWORD *)(*(_QWORD *)v5 + 288);
      v9 = *(re::EventBus **)(a1 + 288);
      v23 = v7;
      re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidAddEvent,void>(v9, (uint64_t)v7, &v23, 0);
      if ((v8 & 1) != 0)
      {
        v10 = *(re::EventBus **)(a1 + 288);
        v23 = v7;
        re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(v10, (uint64_t)v7, &v23, 0);
      }
      v11 = v7[7];
      if (v11)
      {
        v12 = (uint64_t *)v7[9];
        v13 = 8 * v11;
        do
        {
          v14 = *v12++;
          v15 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
          v16 = *(re::EventBus **)(a1 + 288);
          v23 = v7;
          v24 = v15;
          re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidAddEvent,void>(v16, (uint64_t)v7, &v23, v15);
          v13 -= 8;
        }
        while (v13);
      }
      if ((v8 & 1) != 0)
      {
        v17 = v7[7];
        if (v17)
        {
          v18 = (uint64_t *)v7[9];
          v19 = 8 * v17;
          do
          {
            v20 = *v18++;
            v21 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
            v22 = *(re::EventBus **)(a1 + 288);
            v23 = v7;
            v24 = v21;
            re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(v22, (uint64_t)v7, &v23, v21);
            v19 -= 8;
          }
          while (v19);
        }
      }
      if (v7[41])
        re::ecs2::Scene::sendAddAndActivateEvents(a1, v7 + 39);
      v5 += 8;
    }
    while (v5 != v6);
    v3 = *(re::EventBus **)(a1 + 288);
  }
  re::EventBus::endBatch(v3, a2);
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidAddEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t *result;

  result = (uint64_t *)re::EventBus::getEventInfo<RESceneEntityDidAddEvent>((uint64_t)a1);
  if (result)
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 8uLL, a4);
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t *result;

  result = (uint64_t *)re::EventBus::getEventInfo<RESceneEntityDidActivateEvent>((uint64_t)a1);
  if (result)
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 8uLL, a4);
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidAddEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t *result;

  result = (uint64_t *)re::EventBus::getEventInfo<REComponentDidAddEvent>((uint64_t)a1);
  if (result)
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 0x10uLL, a4);
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t *result;

  result = (uint64_t *)re::EventBus::getEventInfo<REComponentDidActivateEvent>((uint64_t)a1);
  if (result)
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 0x10uLL, a4);
  return result;
}

uint64_t re::ecs2::Scene::removeFromAllEntities(uint64_t result, uint64_t a2)
{
  uint64_t *v3;

  if (!*(_BYTE *)(result + 304))
  {
    v3 = (uint64_t *)result;
    re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively(result, a2, 1);
    re::ecs2::Scene::sendDeactivateAndRemoveEvents((uint64_t)v3, a2);
    re::ecs2::Scene::removeFromAllEntitiesRecursively(v3, a2);
    return re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively((uint64_t)v3, a2, 0);
  }
  return result;
}

uint64_t re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v5 = result;
    v6 = *(uint64_t **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      result = re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively(v5, v8 + 312, a3);
      *(_BYTE *)(v8 + 371) = a3;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void re::ecs2::Scene::sendDeactivateAndRemoveEvents(uint64_t a1, uint64_t a2)
{
  re::EventBus *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  re::EventBus *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  re::EventBus *v20;
  re::EventBus *v21;
  uint64_t v22;
  re::EventBus::EventInfo *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;

  v3 = *(re::EventBus **)(a1 + 288);
  ++*((_QWORD *)v3 + 12);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(uint64_t **)(a2 + 32);
    v6 = &v5[v4];
    do
    {
      v7 = *v5;
      v8 = *(_DWORD *)(*v5 + 288);
      if (*(_QWORD *)(*v5 + 328))
        re::ecs2::Scene::sendDeactivateAndRemoveEvents(a1, v7 + 312);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v7 + 56);
        if (v9)
        {
          v10 = *(uint64_t **)(v7 + 72);
          v11 = 8 * v9;
          do
          {
            v12 = *v10++;
            v13 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
            v14 = *(re::EventBus **)(a1 + 288);
            v25 = v7;
            v26 = v13;
            re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v14, v7, &v25, v13);
            v11 -= 8;
          }
          while (v11);
        }
      }
      v15 = *(_QWORD *)(v7 + 56);
      if (v15)
      {
        v16 = *(uint64_t **)(v7 + 72);
        v17 = 8 * v15;
        do
        {
          v18 = *v16++;
          v19 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          v20 = *(re::EventBus **)(a1 + 288);
          v25 = v7;
          v26 = v19;
          re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillRemoveEvent,void>(v20, v7, &v25, v19);
          v17 -= 8;
        }
        while (v17);
      }
      v21 = *(re::EventBus **)(a1 + 288);
      if ((v8 & 1) != 0)
      {
        v25 = v7;
        re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v21, v7, &v25, 0);
        v21 = *(re::EventBus **)(a1 + 288);
      }
      v24 = v7;
      v25 = re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>();
      v22 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)v21 + 3, &v25);
      if (v22 != -1)
      {
        v23 = *(re::EventBus::EventInfo **)(*((_QWORD *)v21 + 4) + 48 * v22 + 8);
        if (v23)
          re::EventBus::EventInfo::addToBatch(v23, v21, v7, &v24, 8uLL, 0);
      }
      ++v5;
    }
    while (v5 != v6);
    v3 = *(re::EventBus **)(a1 + 288);
  }
  re::EventBus::endBatch(v3, a2);
}

uint64_t *re::ecs2::Scene::removeFromAllEntitiesRecursively(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  re::ecs2::SceneComponentTable *v5;
  _QWORD *v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  re::ecs2::Component **v12;
  uint64_t v13;
  uint64_t v14;
  const re::ecs2::ComponentTypeBase *v15;
  uint64_t v16;
  uint64_t v17;
  re::ecs2::Component *v18;
  const re::ecs2::ComponentTypeBase *v19;
  re::ecs2::SceneComponentCollectionBase *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  re::EventBus *v41;
  uint64_t v42;
  const void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46[5];
  re::ecs2::Component *v47;
  _QWORD v48[2];
  uint64_t v49;
  int v50;
  re::ecs2::Component **v51;

  if (!*(_QWORD *)(a2 + 16))
    return result;
  v3 = result;
  v4 = 0;
  v5 = (re::ecs2::SceneComponentTable *)(result + 25);
  v6 = result + 19;
  v45 = (uint64_t)(result + 14);
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v4);
    v8 = (_anonymous_namespace_ *)re::ecs2::Scene::removeFromAllEntitiesRecursively(v3, v7 + 312);
    v9 = *(_QWORD *)(v7 + 56);
    v51 = 0;
    v48[1] = 0;
    v49 = 0;
    v48[0] = 0;
    v50 = 0;
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v48, v9);
    ++v50;
    if (v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = (uint64_t *)re::ecs2::EntityComponentCollection::operator[](v7 + 32, i);
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v48, v11);
      }
    }
    v12 = v51;
    v13 = v49;
    if ((*(_BYTE *)(v7 + 288) & 1) == 0)
      goto LABEL_14;
    if (v49)
    {
      v14 = 8 * v49;
      do
      {
        v47 = 0;
        v47 = *v12;
        v15 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)v47 + 40))(v47);
        v16 = re::ecs2::SceneComponentTable::get(v5, v15);
        re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)v46, &v47);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 88))(v16, v46);
        if (v46[0] && v46[4])
          (*(void (**)(void))(*(_QWORD *)v46[0] + 40))();
        ++v12;
        v14 -= 8;
      }
      while (v14);
      v12 = v51;
      v13 = v49;
LABEL_14:
      *(_BYTE *)(v7 + 370) = 1;
      if (v13)
      {
        v17 = 8 * v13;
        do
        {
          v18 = *v12++;
          v19 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)v18 + 40))(v18);
          v20 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get(v5, v19);
          re::ecs2::SceneComponentCollectionBase::remove(v20, v18);
          v17 -= 8;
        }
        while (v17);
      }
      goto LABEL_19;
    }
    *(_BYTE *)(v7 + 370) = 1;
LABEL_19:
    *(_BYTE *)(v7 + 370) = 0;
    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v21 = *(_QWORD *)(v7 + 296);
    v22 = (unint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v6, v21);
    if (v22)
    {
      v23 = *v22;
      if (*v6)
      {
        v24 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
        v25 = (v24 ^ (v24 >> 31)) % *((unsigned int *)v3 + 44);
        v26 = v3[20];
        v27 = *(unsigned int *)(v26 + 4 * v25);
        if ((_DWORD)v27 != 0x7FFFFFFF)
        {
          v28 = v3[21];
          if (*(_QWORD *)(v28 + 40 * v27 + 16) == v21)
          {
            *(_DWORD *)(v26 + 4 * v25) = *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
LABEL_27:
            v30 = v3[21];
            v31 = v30 + 40 * v27;
            v34 = *(_DWORD *)(v31 + 8);
            v33 = (int *)(v31 + 8);
            v32 = v34;
            if (v34 < 0)
            {
              *v33 = v32 & 0x7FFFFFFF;
              v30 = v3[21];
              v32 = *(_DWORD *)(v30 + 40 * v27 + 8);
            }
            *(_DWORD *)(v30 + 40 * v27 + 8) = *((_DWORD *)v3 + 47) | v32 & 0x80000000;
            --*((_DWORD *)v3 + 45);
            v35 = *((_DWORD *)v3 + 48) + 1;
            *((_DWORD *)v3 + 47) = v27;
            *((_DWORD *)v3 + 48) = v35;
          }
          else
          {
            while (1)
            {
              v29 = v27;
              v27 = *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
              if (v27 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v28 + 40 * v27 + 16) == v21)
              {
                *(_DWORD *)(v28 + 40 * v29 + 8) = *(_DWORD *)(v28 + 40 * v29 + 8) & 0x80000000 | *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
                goto LABEL_27;
              }
            }
          }
        }
      }
      re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt(v45, v23);
      if (v23 < v3[16])
      {
        v36 = (_QWORD *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v6, *(_QWORD *)(*(_QWORD *)(v3[18] + 8 * v23) + 296));
        if (!v36)
        {
          re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) ", "pair", "removeFromAllEntitiesRecursively", 660);
          _os_crash();
          __break(1u);
          goto LABEL_40;
        }
        *v36 = v23;
      }
    }
    v38 = *(_QWORD *)(v7 + 328);
    if (v38)
      break;
LABEL_37:
    result = (uint64_t *)re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v48);
    if ((unint64_t)++v4 >= *(_QWORD *)(a2 + 16))
      return result;
  }
  v39 = *(unint64_t **)(v7 + 344);
  v40 = 8 * v38;
  while (1)
  {
    v23 = *v39;
    v46[0] = *(_QWORD *)(*v39 + 296);
    if (re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v6, v46))
    {
      break;
    }
    ++v39;
    v40 -= 8;
    if (!v40)
      goto LABEL_37;
  }
LABEL_40:
  v41 = (re::EventBus *)__CALLER_IS_PARENTING_AN_ENTITY_TO_AN_ENTITY_BEING_REMOVED__((unsigned __int8 *)v7, v23);
  return re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v41, v42, v43, v44);
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t *result;

  result = (uint64_t *)re::EventBus::getEventInfo<RESceneEntityWillDeactivateEvent>((uint64_t)a1);
  if (result)
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 8uLL, a4);
  return result;
}

uint64_t __CALLER_IS_PARENTING_AN_ENTITY_TO_AN_ENTITY_BEING_REMOVED__(unsigned __int8 *a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 v5;
  int v6;
  NSObject *v7;
  int v8;
  uint64_t result;
  _OWORD buf[5];
  uint64_t v11;

  v4 = *re::ecsCoreLogObjects((re *)a1);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v5)
  {
    v6 = a1[371];
    LODWORD(buf[0]) = 134218240;
    *(_QWORD *)((char *)buf + 4) = a1;
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = v6;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_INFO, "Parent (%p): isBeingRemovedFromScene=%d", (uint8_t *)buf, 0x12u);
  }
  v7 = *re::ecsCoreLogObjects((re *)v5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = *(unsigned __int8 *)(a2 + 371);
    LODWORD(buf[0]) = 134218240;
    *(_QWORD *)((char *)buf + 4) = a2;
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = v8;
    _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_INFO, "Child (%p): isBeingRemovedFromScene=%d", (uint8_t *)buf, 0x12u);
  }
  v11 = 0;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  result = _os_crash_msg();
  __break(1u);
  return result;
}

void re::ecs2::Scene::setRequiresAnchoring(re::ecs2::Scene *this, uint64_t a2)
{
  int v2;
  char v3;
  re::EventBus *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  re::ecs2::Entity ****v13;
  uint64_t v14;
  re::ecs2::Entity ***v15;
  re::EventBus *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  uint64_t v34;

  v2 = *((unsigned __int8 *)this + 48);
  if (v2 != (_DWORD)a2)
  {
    v3 = a2;
    if ((_DWORD)a2)
    {
      v5 = (re::EventBus *)*((_QWORD *)this + 36);
      ++*((_QWORD *)v5 + 12);
      v6 = *((_QWORD *)this + 13);
      v7 = *(_QWORD *)(v6 + 328);
      if (v7)
      {
        v8 = *(uint64_t ***)(v6 + 344);
        v9 = 8 * v7;
        do
        {
          v10 = *v8++;
          re::ecs2::Entity::sendWillDeactivateEventsOnSceneRequiresAnchoringChange(v10, (re::EventBus **)this, 0);
          v9 -= 8;
        }
        while (v9);
        v5 = (re::EventBus *)*((_QWORD *)this + 36);
      }
      re::EventBus::endBatch(v5, a2);
      LOBYTE(v2) = *((_BYTE *)this + 48);
    }
    *((_BYTE *)this + 49) = v2;
    *((_BYTE *)this + 48) = v3;
    v11 = *((_QWORD *)this + 13);
    v12 = *(_QWORD *)(v11 + 328);
    if (v12)
    {
      v13 = *(re::ecs2::Entity *****)(v11 + 344);
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        re::ecs2::Entity::updateSceneDependentFlagsRecursively(v15);
        v14 -= 8;
      }
      while (v14);
    }
    if ((v3 & 1) == 0)
    {
      v16 = (re::EventBus *)*((_QWORD *)this + 36);
      ++*((_QWORD *)v16 + 12);
      v17 = *((_QWORD *)this + 13);
      v18 = *(_QWORD *)(v17 + 328);
      if (v18)
      {
        v19 = *(uint64_t ***)(v17 + 344);
        v20 = 8 * v18;
        do
        {
          v21 = *v19++;
          re::ecs2::Entity::sendDidActivateEventsOnSceneRequiresAnchoringChange(v21, this, 0);
          v20 -= 8;
        }
        while (v20);
        v16 = (re::EventBus *)*((_QWORD *)this + 36);
      }
      re::EventBus::endBatch(v16, a2);
    }
    v34 = 0;
    v31[1] = 0;
    v32 = 0;
    v31[0] = 0;
    v33 = 0;
    v22 = *((_QWORD *)this + 33);
    if (v22)
    {
      v23 = *((_QWORD *)this + 35);
      v24 = v23 + 8 * v22;
      do
      {
        v25 = *(_QWORD **)v23;
        v26 = *(_QWORD *)(*(_QWORD *)v23 + 24);
        if (v26)
        {
          v27 = (uint64_t *)v25[5];
          v28 = 8 * v26;
          do
          {
            v30 = 0;
            v30 = *v27;
            if ((*(_DWORD *)(*(_QWORD *)(v30 + 16) + 288) & 0x86) == 2)
              re::DynamicArray<re::TransitionCondition *>::add(v31, &v30);
            ++v27;
            v28 -= 8;
          }
          while (v28);
          if (v32)
          {
            if (*((_BYTE *)this + 48))
              v29 = 88;
            else
              v29 = 80;
            (*(void (**)(_QWORD *, _QWORD *))(*v25 + v29))(v25, v31);
            v32 = 0;
            ++v33;
          }
        }
        v23 += 8;
      }
      while (v23 != v24);
      if (v31[0])
      {
        if (v34)
          (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
      }
    }
  }
}

uint64_t re::ecs2::Scene::sendAddAndActivateComponentEvents(re::ecs2::Scene *this, re::ecs2::Entity *a2, const re::ecs2::ComponentTypeBase *a3)
{
  re::EventBus *v6;
  uint64_t Type;
  uint64_t result;
  re::EventBus *v9;
  __objc2_class_ro *v10;
  re::ecs2::Entity *v11;
  const re::ecs2::ComponentTypeBase *v12;

  v6 = (re::EventBus *)*((_QWORD *)this + 36);
  v11 = a2;
  v12 = a3;
  Type = re::EventBus::getTypeId<REComponentDidAddEvent>();
  result = re::EventBus::publish(v6, (uint64_t)a2, Type, (uint64_t)&v11, 0x10uLL, a3);
  if ((*((_BYTE *)a2 + 288) & 1) != 0)
  {
    v9 = (re::EventBus *)*((_QWORD *)this + 36);
    v11 = a2;
    v12 = a3;
    v10 = re::EventBus::getTypeId<REComponentDidActivateEvent>();
    return re::EventBus::publish(v9, (uint64_t)a2, (uint64_t)v10, (uint64_t)&v11, 0x10uLL, a3);
  }
  return result;
}

uint64_t re::ecs2::Scene::setHiddenFromSwiftAPI(uint64_t this, uint64_t a2)
{
  if (!*(_BYTE *)(this + 50))
  {
    if (*(_QWORD *)(this + 56))
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Must hide a scene before adding it to an ECS service.", "m_ecsService == nullptr", "setHiddenFromSwiftAPI", 773);
      this = _os_crash();
      __break(1u);
    }
    else
    {
      *(_BYTE *)(this + 50) = 1;
    }
  }
  return this;
}

void re::ecs2::Scene::deprecatedAddSystem(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v12 = v3;
  if (v3)
    v4 = (id)(v3 + 8);
  v5 = a1[12];
  v6 = a1[10];
  if (v6)
  {
    v7 = 8 * v6;
    v8 = (_QWORD *)a1[12];
    while (*v8 != v3)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        v8 = (_QWORD *)(v5 + 8 * v6);
        break;
      }
    }
  }
  else
  {
    v8 = (_QWORD *)a1[12];
  }
  if (v6 == ((uint64_t)v8 - v5) >> 3)
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(a1 + 8, &v12);
  v9 = a1[7];
  if (v9)
  {
    v11 = v12;
    if (v12)
      v10 = (id)(v12 + 8);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, &v11, 0xFFFFFFFFLL, a1);
    if (v11)
    {

      v11 = 0;
    }
  }
  if (v12)

}

uint64_t re::ecs2::Scene::containsDeprecatedSystem(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    return 0;
  v4 = *(_QWORD **)(a1 + 96);
  v5 = 8 * v2;
  while (1)
  {
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
    if (*(_QWORD *)(v6 + 32) == *a2)
    {
      v7 = a2[1];
      if (*(unsigned __int16 *)(v6 + 40) == (unsigned __int16)v7
        && *(unsigned __int16 *)(v6 + 42) == WORD1(v7)
        && ((*(_DWORD *)(v6 + 44) ^ HIDWORD(v7)) & 0xFFFFFF) == 0)
      {
        break;
      }
    }
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return 1;
}

uint64_t *re::ecs2::allocInfo_Scene(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_357);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_357))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117418, 0);
    *(uint64_t *)((char *)&qword_254117428 + 6) = 0;
    qword_254117428 = 0;
    qword_254117438 = 0;
    qword_254117440 = 0xFFFFFFFFLL;
    qword_254117418 = (uint64_t)&off_24ED7DAA8;
    qword_254117448 = (uint64_t)"Scene";
    dword_254117450 = 0;
    unk_254117458 = 0u;
    unk_254117468 = 0u;
    unk_254117478 = 0u;
    qword_254117488 = 0;
    __cxa_guard_release(&_MergedGlobals_357);
  }
  return &qword_254117418;
}

void re::ecs2::initInfo_Scene(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 159404248;
  v5[1] = "Scene";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_Scene(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_Scene(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Scene", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Scene, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Scene, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Scene>, this);
}

void `anonymous namespace'::enqueueECSLogicalUpdate(_anonymous_namespace_ *this, re::ecs2::Entity *a2)
{
  _anonymous_namespace_ *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::Scheduler *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (this && (*((_BYTE *)this + 288) & 1) != 0)
  {
    do
    {
      v2 = this;
      this = (_anonymous_namespace_ *)*((_QWORD *)this + 3);
    }
    while (this);
    v3 = *((_QWORD *)v2 + 2);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 56);
      if (v4)
      {
        v5 = (*(uint64_t (**)(_QWORD, re::ecs2::Entity *))(*(_QWORD *)v4 + 80))(*(_QWORD *)(v3 + 56), a2);
        if (v5)
        {
          v6 = (re::Scheduler *)v5;
          if (!*(_BYTE *)(v5 + 844))
          {
            v7 = *(_QWORD *)(v3 + 376);
            if (!v7 || *(_QWORD *)(v7 + 24) == 1)
            {
              v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
              v9 = *(_QWORD *)(v8 + 24);
              if (v9)
              {
                v10 = *(_QWORD *)(v8 + 40);
                v11 = 8 * v9;
                while (1)
                {
                  if (!*(_BYTE *)(*(_QWORD *)v10 + 84))
                  {
                    v12 = *(_QWORD *)(*(_QWORD *)v10 + 96);
                    if (*((_QWORD *)v6 + 5) > v12)
                      break;
                  }
                  v10 += 8;
                  v11 -= 8;
                  if (!v11)
                    return;
                }
                re::Scheduler::enqueueTaskWithDeadline(v6, v12, 0.0);
              }
            }
          }
        }
      }
    }
  }
}

__n128 re::HashTable<unsigned long long,re::Pair<unsigned long,re::ecs2::Entity *,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __n128 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  __n128 result;
  _BYTE v26[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v13, v12);
          v15 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v26[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v26[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::Pair<unsigned long,re::ecs2::Entity *,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 40;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 40 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  result = *a5;
  *(__n128 *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::EventBus::getEventInfo<RESceneEntityDidAddEvent>(uint64_t a1)
{
  uint64_t v2;
  void *Type;

  Type = re::EventBus::getTypeId<RESceneEntityDidAddEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), (uint64_t *)&Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getEventInfo<RESceneEntityDidActivateEvent>(uint64_t a1)
{
  uint64_t v2;
  __objc2_class_ro *Type;

  Type = re::EventBus::getTypeId<RESceneEntityDidActivateEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), (uint64_t *)&Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getEventInfo<REComponentDidAddEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<REComponentDidAddEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getEventInfo<REComponentDidActivateEvent>(uint64_t a1)
{
  uint64_t v2;
  __objc2_class_ro *Type;

  Type = re::EventBus::getTypeId<REComponentDidActivateEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), (uint64_t *)&Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

uint64_t re::EventBus::getEventInfo<RESceneEntityWillDeactivateEvent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t Type;

  Type = re::EventBus::getTypeId<RESceneEntityWillDeactivateEvent>();
  v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v2 + 8);
}

void re::DynamicArray<re::SharedPtr<re::ecs2::System>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = v2 - 1;
  if (v2 - 1 > a2)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (uint64_t *)(v5 + 8 * a2);
    v7 = v6 + 1;
    if (v6 + 1 != (uint64_t *)(v5 + 8 * v2))
    {
      v8 = *v6;
      v9 = 8 * v2 - 8 * a2 - 8;
      do
      {
        *(v7 - 1) = *v7;
        *v7++ = v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  v10 = *(_QWORD *)(a1 + 32) + 8 * v2;
  v11 = *(_QWORD *)(v10 - 8);
  if (v11)
  {

    *(_QWORD *)(v10 - 8) = 0;
    v4 = *(_QWORD *)(a1 + 16) - 1;
  }
  *(_QWORD *)(a1 + 16) = v4;
  ++*(_DWORD *)(a1 + 24);
}

id re::internal::defaultRetain<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_CoordinateSpaceDefinitionComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_358);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_358))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541174A8, 0);
    *(uint64_t *)((char *)&qword_2541174B8 + 6) = 0;
    qword_2541174B8 = 0;
    qword_2541174C8 = 0;
    qword_2541174D0 = 0xFFFFFFFFLL;
    qword_2541174A8 = (uint64_t)&off_24ED7DAA8;
    qword_2541174D8 = (uint64_t)"CoordinateSpaceDefinitionComponent";
    dword_2541174E0 = 0;
    unk_2541174E8 = 0u;
    unk_2541174F8 = 0u;
    unk_254117508 = 0u;
    qword_254117518 = 0;
    __cxa_guard_release(&_MergedGlobals_358);
  }
  return &qword_2541174A8;
}

void re::ecs2::initInfo_CoordinateSpaceDefinitionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x31B0986B663F7F78;
  v10[1] = "CoordinateSpaceDefinitionComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_2541174A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541174A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254117498 = v8;
      __cxa_guard_release(&qword_2541174A0);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254117498;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CoordinateSpaceDefinitionComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CoordinateSpaceDefinitionComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CoordinateSpaceDefinitionComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CoordinateSpaceDefinitionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::CoordinateSpaceDefinitionComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A958;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::CoordinateSpaceDefinitionComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A958;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CoordinateSpaceDefinitionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CoordinateSpaceDefinitionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CoordinateSpaceDefinitionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CoordinateSpaceDefinitionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CoordinateSpaceDefinitionComponent>, this);
}

void re::ecs2::SceneComponentTable::~SceneComponentTable(re::ecs2::SceneComponentTable *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 10) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 18);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

uint64_t re::ecs2::SceneComponentTable::get(re::ecs2::SceneComponentTable *this, const re::ecs2::ComponentTypeBase *a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int16 *)a2 + 8);
  if (*((_QWORD *)this + 3) <= v4)
  {
    re::DynamicArray<double>::resize((uint64_t)this + 8, v4 + 1);
  }
  else
  {
    result = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4);
    if (result)
      return result;
  }
  v6 = (*(uint64_t (**)(const re::ecs2::ComponentTypeBase *))(*(_QWORD *)a2 + 40))(a2);
  v8[0] = v6;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 104))(v6, *(_QWORD *)this);
  v7 = *((_QWORD *)this + 3);
  if (v7 <= v4)
  {
    v8[1] = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v9 = 136315906;
    v10 = "operator[]";
    v11 = 1024;
    v12 = 789;
    v13 = 2048;
    v14 = v4;
    v15 = 2048;
    v16 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4) = v6;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)this + 6, v8);
  return v8[0];
}

uint64_t re::ecs2::SceneComponentTable::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  re *v6;
  uint64_t v7;

  v1 = this;
  v2 = *(_QWORD *)(this + 64);
  if (v2)
  {
    v3 = *(uint64_t **)(this + 80);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      v6 = (re *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 104))(v5, 0);
      v7 = re::globalAllocators(v6)[2];
      (**(void (***)(uint64_t))v5)(v5);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 24) = 0;
  ++*(_DWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 64) = 0;
  ++*(_DWORD *)(v1 + 72);
  return this;
}

uint64_t *re::allocInfo_EventBus(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_359);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_359))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117528, 0);
    *(uint64_t *)((char *)&qword_254117538 + 6) = 0;
    qword_254117538 = 0;
    qword_254117548 = 0;
    qword_254117550 = 0xFFFFFFFFLL;
    qword_254117528 = (uint64_t)&off_24ED7DAA8;
    qword_254117558 = (uint64_t)"EventBus";
    dword_254117560 = 0;
    unk_254117568 = 0u;
    unk_254117578 = 0u;
    unk_254117588 = 0u;
    qword_254117598 = 0;
    __cxa_guard_release(&_MergedGlobals_359);
  }
  return &qword_254117528;
}

void re::initInfo_EventBus(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3A628DB734CLL;
  v5[1] = "EventBus";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_EventBus(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::EventBus>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::EventBus>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::EventBus>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::EventBus>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::EventBus>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::EventBus>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::EventBus>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a3, 0);
  *(_QWORD *)a3 = &off_24ED420D0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_DWORD *)(a3 + 136) = 0;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 172) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 188) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestruct<re::EventBus>(int a1, int a2, re::EventBus *this)
{
  re::EventBus::~EventBus(this);
}

double re::internal::defaultConstructV2<re::EventBus>(uint64_t a1)
{
  double result;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED420D0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::introspect_EventBus(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EventBus", (uint64_t (*)(re::internal *))re::allocInfo_EventBus, (re::IntrospectionBase *(*)(void))re::initInfo_EventBus, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::EventBus>, this);
}

id re::internal::defaultRetain<re::EventBus>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::EventBus>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

re::ecs2::Entity *re::ecs2::Entity::Entity(re::ecs2::Entity *this, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;

  ArcSharedObject::ArcSharedObject(this, 0);
  *v6 = &off_24ED71838;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  re::ecs2::EntityComponentCollection::EntityComponentCollection((re::ecs2::EntityComponentCollection *)(v6 + 4), this, a3);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = &str_110;
  *((_DWORD *)this + 72) = 8202;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_QWORD *)this + 37) = a2;
  *((_QWORD *)this + 38) = &off_24ED714D8;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = this;
  *((_QWORD *)this + 45) = 0;
  *((_DWORD *)this + 92) = 0;
  *((_QWORD *)this + 47) = -1;
  return this;
}

void re::ecs2::Entity::~Entity(re::ecs2::Entity *this)
{
  _QWORD *v2;
  uint64_t v3;

  *((_DWORD *)this + 72) |= 0x800u;
  v2 = (_QWORD *)((char *)this + 304);
  (*(void (**)(char *))(*((_QWORD *)this + 38) + 16))((char *)this + 304);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 312);
  re::ecs2::EntityComponentCollection::clear((uint64_t **)this + 4, v3);
  *((_DWORD *)this + 72) = 0;
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(v2);
  re::StringID::destroyString((re::ecs2::Entity *)((char *)this + 272));
  re::ecs2::PackedTypeIDs::~PackedTypeIDs((re::ecs2::Entity *)((char *)this + 80));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 40);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::Entity::~Entity(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::Entity::setSwiftObject(re::ecs2::Entity *this, re *cf)
{
  re *v3;
  NSObject *v5;
  char *v6;
  char *v7;
  uint8_t v8[16];

  v3 = (re *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = cf;
  if (v3 != cf)
  {
    if (cf && v3)
    {
      v5 = *re::ecsCoreLogObjects(v3);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v8 = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot assign Swift object to entity. Another Swift object is already set. New Swift object is ignored.", v8, 2u);
      }
    }
    else if ((*((_BYTE *)this + 289) & 2) != 0)
    {
      if (v3)
        CFRelease(v3);
      if (cf)
        CFRetain(cf);
    }
    else
    {
      v6 = (char *)this + 8;
      if (cf)
        v7 = v6;
      else

    }
  }
}

void re::ecs2::Entity::updateSwiftObjectOwnership(re::ecs2::Entity *this)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  const void *v5;
  char v6;
  char *v7;

  v2 = *((_DWORD *)this + 72);
  if ((v2 & 0x80) != 0 && *((_QWORD *)this + 2) || (v3 = *((_QWORD *)this + 3)) != 0)
  {
    v4 = v2 | 0x200;
    LODWORD(v3) = 1;
  }
  else
  {
    v4 = v2 & 0xFFFFFDFF;
  }
  *((_DWORD *)this + 72) = v4;
  v5 = (const void *)*((_QWORD *)this + 45);
  if (v5)
  {
    if ((v2 & 0x200) != 0)
      v6 = v3;
    else
      v6 = 1;
    if ((v6 & 1) != 0)
    {
      if (((v3 ^ 1 | ((unsigned __int16)(v2 & 0x200) >> 9)) & 1) == 0)
      {
        CFRetain(v5);

      }
    }
    else
    {
      v7 = (char *)this + 8;
      CFRelease(*((CFTypeRef *)this + 45));
    }
  }
}

uint64_t re::ecs2::Entity::allocator(re::ecs2::Entity *this)
{
  return *re::ecs2::EntityFactory::instance(this);
}

void re::ecs2::Entity::setParentInternal(re::ecs2::Entity *this, re::ecs2::Entity *a2, unint64_t a3)
{
  char *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  re *v10;
  re::ecs2::Entity *v11;

  if (*((re::ecs2::Entity **)this + 3) != a2)
  {
    v11 = this;
    v6 = (char *)this + 8;
    if (!a2)
    {
      v9 = dyld_program_sdk_at_least();
      v10 = (re *)(*((_QWORD *)this + 3) + 304);
      if (v9)
        re::ecs2::EntityChildCollection::remove(v10, (uint64_t *)&v11);
      else
        re::Collection<re::SharedPtr<re::ecs2::Entity>>::removeStable((uint64_t)v10, (uint64_t *)&v11);
      goto LABEL_13;
    }
LABEL_3:
    v7 = (_QWORD *)((char *)a2 + 304);
    if (*((_QWORD *)a2 + 41) <= a3)
      re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(v7, (uint64_t *)&v11);
    else
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::insert((uint64_t)v7, a3, (uint64_t *)&v11);
LABEL_13:
    if (v11)

    return;
  }
  if (a2
    && *((_QWORD *)a2 + 41) > a3
    && *(re::ecs2::Entity **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)a2 + 304, a3) != this)
  {
    v11 = this;
    v8 = (char *)this + 8;
    goto LABEL_3;
  }
}

uint64_t re::Collection<re::SharedPtr<re::ecs2::Entity>>::removeStable(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = 8 * v4;
    v6 = *(_QWORD **)(a1 + 40);
    while (*v6 != *a2)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v6 = (_QWORD *)(v3 + 8 * v4);
        break;
      }
    }
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 40);
  }
  v7 = ((uint64_t)v6 - v3) >> 3;
  if (v7 == v4)
    return 0;
  v9 = *(_DWORD *)(a1 + 32);
  v10 = *a2;
  v17 = v10;
  if (v10)
    v11 = (id)(v10 + 8);
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v7, &v17);
  if (v9 == *(_DWORD *)(a1 + 32))
    goto LABEL_20;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
  {
    v14 = 8 * v13;
    v15 = *(_QWORD **)(a1 + 40);
    while (*v15 != v17)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
      {
        v15 = (_QWORD *)(v12 + 8 * v13);
        break;
      }
    }
  }
  else
  {
    v15 = *(_QWORD **)(a1 + 40);
  }
  v7 = ((uint64_t)v15 - v12) >> 3;
  if (v7 != v13)
  {
LABEL_20:
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::removeStableAt(a1 + 8, v7);
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, v7, &v17);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  if (v17)

  return v8;
}

void re::Collection<re::SharedPtr<re::ecs2::Entity>>::insert(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  id v6;
  re *v7;
  unint64_t v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21[2];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD buf[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v21[0] = v5;
  if (v5)
    v6 = (id)(v5 + 8);
  v7 = (re *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, a2, v21);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8 >= a2)
  {
    v10 = v8 + 1;
    if (v8 + 1 <= a2)
    {
      v21[1] = 0;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v22 = 136315906;
      v23 = "insert";
      v24 = 1024;
      v25 = 855;
      v26 = 2048;
      v27 = a2;
      v28 = 2048;
      v29 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v8 >= *(_QWORD *)(a1 + 16))
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity((_QWORD *)(a1 + 8), v8 + 1);
      v8 = *(_QWORD *)(a1 + 24);
    }
    v11 = *(_QWORD *)(a1 + 40);
    v12 = (_QWORD *)(v11 + 8 * v8);
    if (v8 <= a2)
    {
      v19 = v21[0];
      *v12 = v21[0];
      if (v19)
        v20 = (id)(v19 + 8);
    }
    else
    {
      v13 = *(v12 - 1);
      *(v12 - 1) = 0;
      *v12 = v13;
      v14 = v12 - 1;
      if (v14 != (uint64_t *)(v11 + 8 * a2))
      {
        v15 = *v14;
        v16 = (uint64_t *)(v11 + 8 * v8 - 16);
        v17 = 8 * a2 - 8 * v8 + 8;
        do
        {
          v18 = *v16;
          *v16 = v15;
          v16[1] = v18;
          --v16;
          v17 += 8;
        }
        while (v17);
        v11 = *(_QWORD *)(a1 + 40);
      }
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v11 + 8 * a2), v21[0]);
    }
    ++*(_QWORD *)(a1 + 24);
    ++*(_DWORD *)(a1 + 32);
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, v21);
  }
  else
  {
    v9 = *re::foundationCoreLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "void re::Collection<re::SharedPtr<re::ecs2::Entity>>::insert(size_t, const T &) [T "
                                     "= re::SharedPtr<re::ecs2::Entity>]";
      WORD6(buf[0]) = 2048;
      *(_QWORD *)((char *)buf + 14) = a2;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "%s: index %zu invalid after willInsert(), not inserting", (uint8_t *)buf, 0x16u);
    }
  }
  if (v21[0])

}

void re::ecs2::Entity::removeFromSceneOrParent(re::ecs2::Entity *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 288) & 0x80) != 0)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 56);
      if (v3)
      {
        v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
        v5 = *((_QWORD *)this + 2);
        v7 = v5;
        if (v5)
          v6 = (id)(v5 + 8);
        re::Collection<re::SharedPtr<re::ecs2::Scene>>::remove(v4, &v7);
        if (v7)

      }
    }
  }
  if (*((_QWORD *)this + 3))
    re::ecs2::Entity::setParentInternal(this, 0, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t re::ecs2::Entity::findInHierarchyByName(uint64_t a1, StringID *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = a1;
  if (!re::StringID::operator==((_QWORD *)(a1 + 272), a2))
  {
    v4 = *(_QWORD *)(v3 + 328);
    if (v4)
    {
      v5 = *(uint64_t **)(v3 + 344);
      v6 = 8 * v4;
      while (1)
      {
        v7 = *v5;
        re::StringID::StringID((re::StringID *)v9, a2);
        v3 = re::ecs2::Entity::findInHierarchyByName(v7, v9);
        re::StringID::destroyString((re::StringID *)v9);
        if (v3)
          break;
        ++v5;
        v6 -= 8;
        if (!v6)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void re::ecs2::Entity::setSelfEnabled(re::ecs2::Entity *this, int a2)
{
  int v3;

  v3 = *((_DWORD *)this + 72) & 1;
  re::ecs2::Entity::setSelfEnabledForFlag(this, a2, 8);
  if (v3 != ((*((_DWORD *)this + 72) & 1) != 0)
    && re::internal::enableSignposts(0, 0)
    && re::internal::enableHighFrequencyTracing(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*((re **)this + 35), 0);
    kdebug_trace();
  }
}

void re::ecs2::Entity::setSelfEnabledForFlag(re::ecs2::Entity *this, int a2, int a3)
{
  int v3;
  int v7;
  re::ecs2::Entity *v8;
  re::ecs2::Entity *v9;
  re::ecs2::Scene *v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v3 = *((_DWORD *)this + 72);
  if (((a3 & ~v3) == 0) != a2)
  {
    v7 = *((_DWORD *)this + 72);
    v8 = this;
    do
    {
      v9 = v8;
      v8 = (re::ecs2::Entity *)*((_QWORD *)v8 + 3);
    }
    while (v8);
    v10 = (re::ecs2::Scene *)*((_QWORD *)v9 + 2);
    if ((v3 & 1) != 0 && (a2 & 1) == 0)
    {
      re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v9 + 2));
      v7 = *((_DWORD *)this + 72);
    }
    v11 = v3 & 1;
    v12 = v7 & ~a3;
    v13 = v7 | a3;
    if (!a2)
      v13 = v12;
    *((_DWORD *)this + 72) = v13;
    re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree((uint64_t)this);
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    v14 = *((_DWORD *)this + 72);
    if (v11 != (v14 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v10);
      if ((v14 & 1) != 0)
        re::ecs2::Entity::sendActivateEvents(this, v10);
    }
  }
}

void re::ecs2::Entity::sendDeactivateEvents(re::ecs2::Entity *this, re::ecs2::Scene *a2)
{
  re::EventBus *v4;
  uint64_t v5;
  re::ecs2::Entity **v6;
  uint64_t v7;
  re::ecs2::Entity *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  re::EventBus *v15;
  _QWORD v16[2];

  if (a2 && (*((_BYTE *)this + 288) & 1) != 0 && !*((_BYTE *)this + 371))
  {
    v4 = (re::EventBus *)*((_QWORD *)a2 + 36);
    ++*((_QWORD *)v4 + 12);
    v5 = *((_QWORD *)this + 41);
    if (v5)
    {
      v6 = (re::ecs2::Entity **)*((_QWORD *)this + 43);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        re::ecs2::Entity::sendDeactivateEvents(v8, a2);
        v7 -= 8;
      }
      while (v7);
      v4 = (re::EventBus *)*((_QWORD *)a2 + 36);
    }
    v16[0] = this;
    re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v4, (uint64_t)this, v16, 0);
    v10 = *((_QWORD *)this + 7);
    if (v10)
    {
      v11 = (uint64_t *)*((_QWORD *)this + 9);
      v12 = 8 * v10;
      do
      {
        v13 = *v11++;
        v14 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        v15 = (re::EventBus *)*((_QWORD *)a2 + 36);
        v16[0] = this;
        v16[1] = v14;
        re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v15, (uint64_t)this, v16, v14);
        v12 -= 8;
      }
      while (v12);
    }
    re::EventBus::endBatch(*((re::EventBus **)a2 + 36), v9);
  }
}

uint64_t re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = *(_DWORD *)(this + 288);
  if ((~v1 & 0x2008) == 0
    && ((v2 = *(_QWORD *)(this + 24)) == 0 || (v3 = *(_DWORD *)(v2 + 288), (v3 & 0x80) != 0) || (v3 & 2) != 0))
  {
    v4 = v1 | 2;
  }
  else
  {
    v4 = v1 & 0xFFFFFFFD;
  }
  *(_DWORD *)(this + 288) = v4;
  if (((v1 >> 1) & 1) != (v4 & 2) >> 1)
  {
    v5 = *(_QWORD *)(this + 328);
    if (v5)
    {
      v6 = *(_QWORD *)(this + 344);
      v7 = 8 * v5;
      v8 = (v4 >> 1) & 1;
      do
      {
        this = *(_QWORD *)v6;
        if ((~*(_DWORD *)(*(_QWORD *)v6 + 288) & 0x2008) == 0)
          this = re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree(this, v8);
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return this;
}

uint64_t re::ecs2::Entity::updateIsActive_Self(uint64_t this)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *(_DWORD *)(this + 288);
  v2 = (v1 & 0x42) != 2 || (v1 & 0x14) == 16;
  if (!v2
    && ((v3 = *(_QWORD *)(this + 24)) != 0 && (*(_DWORD *)(v3 + 288) & 0x81) == 1
     || (v4 = *(_QWORD *)(this + 16)) != 0 && *(_QWORD *)(v4 + 56)))
  {
    v5 = v1 | 1;
  }
  else
  {
    v5 = v1 & 0xFFFFFFFE;
  }
  *(_DWORD *)(this + 288) = v5;
  return this;
}

uint64_t re::ecs2::Entity::onActivationChanged(re *a1, uint64_t a2)
{
  re *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const re::ecs2::ComponentTypeBase *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v21[2];
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1;
  v4 = re::globalAllocators(a1)[2];
  v28 = 0;
  v25[1] = 0;
  v26 = 0;
  v27 = 0;
  v25[0] = v4;
  re::DynamicArray<float *>::setCapacity(v25, 0x10uLL);
  ++v27;
  v24 = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = 0;
  v21[0] = v4;
  re::DynamicArray<float *>::setCapacity(v21, 1uLL);
  ++v23;
  if ((*((_BYTE *)v3 + 288) & 1) != 0)
    v5 = 10;
  else
    v5 = 11;
  do
  {
    if (a2 && *((_QWORD *)v3 + 7))
    {
      v6 = 0;
      do
      {
        v29 = 0;
        v29 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v3 + 32, v6);
        v7 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        v8 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), v7);
        v9 = (_QWORD *)v8;
        v10 = *(_QWORD *)(v8 + 40);
        v11 = *(_QWORD *)(v8 + 24);
        if (v11)
        {
          v12 = 8 * v11;
          v13 = *(_QWORD **)(v8 + 40);
          while (*v13 != v29)
          {
            ++v13;
            v12 -= 8;
            if (!v12)
            {
              v13 = (_QWORD *)(v10 + 8 * v11);
              break;
            }
          }
        }
        else
        {
          v13 = *(_QWORD **)(v8 + 40);
        }
        if (v11 != ((uint64_t)v13 - v10) >> 3)
        {
          v22 = 0;
          ++v23;
          re::DynamicArray<re::TransitionCondition *>::add(v21, &v29);
          (*(void (**)(_QWORD *, _QWORD *))(*v9 + 8 * v5))(v9, v21);
        }
        ++v6;
      }
      while (v6 < *((_QWORD *)v3 + 7));
    }
    v14 = *((_QWORD *)v3 + 41);
    if ((int)v14 >= 1)
    {
      v15 = (uint64_t)v3 + 304;
      v16 = v14 + 1;
      do
      {
        v17 = (uint64_t *)re::ecs2::EntityComponentCollection::operator[](v15, (v16 - 2));
        v18 = *v17;
        if ((~*(_DWORD *)(*v17 + 288) & 0x2008) == 0
          && ((*(_DWORD *)(*v17 + 288) & 0x120) != 0x100 || *(_BYTE *)(a2 + 48) == 0))
        {
          re::ecs2::Entity::updateIsActive_Self(*v17);
          v29 = v18;
          re::DynamicArray<re::TransitionCondition *>::add(v25, &v29);
        }
        --v16;
      }
      while (v16 > 1);
    }
    if (!v26)
      break;
    v3 = *(re **)(v28 + 8 * --v26);
    ++v27;
  }
  while (v3);
  if (v21[0] && v24)
    (*(void (**)(void))(*(_QWORD *)v21[0] + 40))();
  result = v25[0];
  if (v25[0])
  {
    if (v28)
      return (*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 40))();
  }
  return result;
}

void re::ecs2::Entity::sendActivateEvents(re::ecs2::Entity *this, re::ecs2::Scene *a2)
{
  re::EventBus *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  re::EventBus *v10;
  uint64_t v11;
  uint64_t v12;
  re::ecs2::Entity **v13;
  uint64_t v14;
  re::ecs2::Entity *v15;
  _QWORD v16[2];

  if (a2 && (*((_BYTE *)this + 288) & 1) != 0)
  {
    v4 = (re::EventBus *)*((_QWORD *)a2 + 36);
    ++*((_QWORD *)v4 + 12);
    v5 = *((_QWORD *)this + 7);
    if (v5)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 9);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        v10 = (re::EventBus *)*((_QWORD *)a2 + 36);
        v16[0] = this;
        v16[1] = v9;
        re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(v10, (uint64_t)this, v16, v9);
        v7 -= 8;
      }
      while (v7);
      v4 = (re::EventBus *)*((_QWORD *)a2 + 36);
    }
    v16[0] = this;
    re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(v4, (uint64_t)this, v16, 0);
    v12 = *((_QWORD *)this + 41);
    if (v12)
    {
      v13 = (re::ecs2::Entity **)*((_QWORD *)this + 43);
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        re::ecs2::Entity::sendActivateEvents(v15, a2);
        v14 -= 8;
      }
      while (v14);
    }
    re::EventBus::endBatch(*((re::EventBus **)a2 + 36), v11);
  }
}

uint64_t re::ecs2::Entity::setSelfAnchored_Before(re::ecs2::Entity *this, char a2)
{
  int v3;
  uint64_t v4;
  re::ecs2::Entity *v5;
  re::ecs2::Entity *v6;

  if ((a2 & 1) != 0)
    return 0;
  v3 = *((_DWORD *)this + 72);
  if ((~v3 & 0x31) != 0)
    return 0;
  if (!*((_BYTE *)this + 371))
  {
    if ((v3 & 0x100) == 0)
    {
      v4 = *((_QWORD *)this + 3);
      if (v4)
      {
        if ((*(_DWORD *)(v4 + 288) & 0x84) == 4)
          return 0;
      }
    }
    v5 = this;
    do
    {
      v6 = v5;
      v5 = (re::ecs2::Entity *)*((_QWORD *)v5 + 3);
    }
    while (v5);
    re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v6 + 2));
  }
  return 1;
}

void re::ecs2::Entity::setSelfAnchored_After(re::ecs2::Entity *this, int a2)
{
  int v2;
  char v3;
  re::ecs2::Entity *v5;
  re::ecs2::Entity *v6;
  re::ecs2::Scene *v7;
  int v8;
  re::EventBus *v9;
  uint64_t Type;
  int v11;
  re::ecs2::Entity *v12;
  char v13;

  v2 = *((_DWORD *)this + 72);
  if (a2 != (v2 & 0x20) >> 5)
  {
    v3 = a2;
    v5 = this;
    do
    {
      v6 = v5;
      v5 = (re::ecs2::Entity *)*((_QWORD *)v5 + 3);
    }
    while (v5);
    v7 = (re::ecs2::Scene *)*((_QWORD *)v6 + 2);
    if (a2)
      v8 = 32;
    else
      v8 = 0;
    *((_DWORD *)this + 72) = v2 & 0xFFFFFFDF | v8;
    re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)this);
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    if (v7)
    {
      v9 = (re::EventBus *)*((_QWORD *)v7 + 36);
      v12 = this;
      v13 = v3;
      Type = re::EventBus::getTypeId<RESceneAnchoredStateChangedEvent>();
      re::EventBus::publish(v9, (uint64_t)this, Type, (uint64_t)&v12, 0x10uLL, 0);
    }
    v11 = *((_DWORD *)this + 72);
    if ((v2 & 1) != (v11 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v7);
      if ((v11 & 1) != 0)
        re::ecs2::Entity::sendActivateEvents(this, v7);
    }
  }
}

uint64_t re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = *(_DWORD *)(this + 288);
  if ((v1 & 0x20) != 0
    || (v1 & 0x100) == 0
    && (v2 = *(_QWORD *)(this + 24)) != 0
    && (v3 = *(_DWORD *)(v2 + 288), (v3 & 0x80) == 0)
    && (v3 & 4) != 0)
  {
    v4 = v1 | 4;
  }
  else
  {
    v4 = v1 & 0xFFFFFFFB;
  }
  *(_DWORD *)(this + 288) = v4;
  if (((v1 >> 2) & 1) != (v4 & 4) >> 2)
  {
    v5 = *(_QWORD *)(this + 328);
    if (v5)
    {
      v6 = *(_QWORD *)(this + 344);
      v7 = 8 * v5;
      v8 = (v4 >> 2) & 1;
      do
      {
        this = *(_QWORD *)v6;
        if ((*(_WORD *)(*(_QWORD *)v6 + 288) & 0x120) == 0)
          this = re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree(this, v8);
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return this;
}

void re::ecs2::Entity::setSelfRequiresAnchoring(re::ecs2::Entity *this, int a2)
{
  re::ecs2::Entity *v4;
  re::ecs2::Entity *v5;

  if (a2 && (*((_DWORD *)this + 72) & 0x131) == 0x11)
  {
    v4 = this;
    do
    {
      v5 = v4;
      v4 = (re::ecs2::Entity *)*((_QWORD *)v4 + 3);
    }
    while (v4);
    re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v5 + 2));
  }
  re::ecs2::Entity::setSelfRequiresAnchoring_After(this, a2);
}

void re::ecs2::Entity::setSelfRequiresAnchoring_After(re::ecs2::Entity *this, int a2)
{
  re::ecs2::Entity *v3;
  re::ecs2::Entity *v4;
  int v5;
  re::ecs2::Scene *v6;
  int v7;
  int v8;

  if (a2 != (*((_DWORD *)this + 72) & 0x100u) >> 8)
  {
    v3 = this;
    do
    {
      v4 = v3;
      v3 = (re::ecs2::Entity *)*((_QWORD *)v3 + 3);
    }
    while (v3);
    v5 = *((_DWORD *)this + 72) & 1;
    v6 = (re::ecs2::Scene *)*((_QWORD *)v4 + 2);
    v7 = a2 ? 256 : 0;
    *((_DWORD *)this + 72) = *((_DWORD *)this + 72) & 0xFFFFFEFF | v7;
    re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)this);
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    v8 = *((_DWORD *)this + 72);
    if (v5 != (v8 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v6);
      if ((v8 & 1) != 0)
        re::ecs2::Entity::sendActivateEvents(this, v6);
    }
  }
}

void re::ecs2::Entity::setGhosted(re::ecs2::Entity *this, int a2)
{
  int v2;
  int v5;
  re::ecs2::Entity *v6;
  re::ecs2::Entity *v7;
  re::ecs2::Scene *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;

  v2 = *((_DWORD *)this + 72);
  if ((v2 & 0x80) == 0 && ((((*((_DWORD *)this + 72) & 0x40) == 0) ^ a2) & 1) == 0)
  {
    v5 = *((_DWORD *)this + 72);
    v6 = this;
    do
    {
      v7 = v6;
      v6 = (re::ecs2::Entity *)*((_QWORD *)v6 + 3);
    }
    while (v6);
    v8 = (re::ecs2::Scene *)*((_QWORD *)v7 + 2);
    if ((v2 & 1) != 0 && a2)
    {
      re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v7 + 2));
      v5 = *((_DWORD *)this + 72);
    }
    v9 = v2 & 1;
    v10 = v5 & 0xFFFFFFBF;
    if (a2)
      v11 = 64;
    else
      v11 = 0;
    *((_DWORD *)this + 72) = v10 | v11;
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    v12 = *((_DWORD *)this + 72);
    if (v9 != (v12 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v8);
      if ((v12 & 1) != 0)
        re::ecs2::Entity::sendActivateEvents(this, v8);
    }
  }
}

uint64_t re::ecs2::Entity::updateIsSelfAnchored_Subtree(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;

  v1 = *(_BYTE **)(this + 128);
  if (v1 && (!v1[176] || v1[177]))
  {
    v2 = v1[178] == 0;
    v3 = (unsigned int *)(this + 288);
    v4 = *(_DWORD *)(this + 288) & 0xFFFFFFDF | (32 * v2);
  }
  else
  {
    v3 = (unsigned int *)(this + 288);
    v4 = *(_DWORD *)(this + 288) & 0xFFFFFFDF;
  }
  *v3 = v4;
  return this;
}

uint64_t re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree(uint64_t this, _BOOL4 a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  re::ecs2::Entity **v5;
  uint64_t v6;
  re::ecs2::Entity *v7;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_DWORD *)(this + 288) = *(_DWORD *)(this + 288) & 0xFFFFFFEF | v2;
  v3 = *(_QWORD *)(this + 328);
  if (v3)
  {
    v4 = a2;
    v5 = *(re::ecs2::Entity ***)(this + 344);
    v6 = 8 * v3;
    do
    {
      v7 = *v5++;
      this = re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree(v7, v4);
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree(uint64_t this, unsigned __int8 a2)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(_DWORD *)(this + 288);
  v3 = ((~v2 & 0x2008) == 0) & a2;
  v4 = v2 & 0xFFFFFFFD;
  if (v3)
    v5 = 2;
  else
    v5 = 0;
  *(_DWORD *)(this + 288) = v5 | v4;
  v6 = *(_QWORD *)(this + 328);
  if (v6)
  {
    v7 = *(_QWORD *)(this + 344);
    v8 = 8 * v6;
    v9 = v3 & 1;
    do
    {
      this = *(_QWORD *)v7;
      if ((~*(_DWORD *)(*(_QWORD *)v7 + 288) & 0x2008) == 0)
        this = re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree((re::ecs2::Entity *)this, v9);
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return this;
}

uint64_t re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree(uint64_t this, int a2)
{
  int v2;
  BOOL v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(this + 288);
  if ((v2 & 0x20) != 0 || (v3 = 0, v4 = v2 & 0xFFFFFFFB, (v2 & 0x100) == 0) && a2)
  {
    v4 = v2 | 4;
    v3 = 1;
  }
  *(_DWORD *)(this + 288) = v4;
  v5 = *(_QWORD *)(this + 328);
  if (v5)
  {
    v6 = *(_QWORD *)(this + 344);
    v7 = 8 * v5;
    do
    {
      this = *(_QWORD *)v6;
      if ((*(_BYTE *)(*(_QWORD *)v6 + 288) & 0x20) == 0)
        this = re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((re::ecs2::Entity *)this, v3);
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  return this;
}

re::ecs2::Entity *re::ecs2::Entity::updateIsActive_Subtree(re::ecs2::Entity *this)
{
  int v2;
  re::ecs2::Entity *result;
  uint64_t v4;
  re::ecs2::Entity **v5;
  uint64_t v6;

  v2 = *((_DWORD *)this + 72) & 1;
  result = (re::ecs2::Entity *)re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
  if (v2 != (*((_BYTE *)this + 288) & 1))
  {
    v4 = *((_QWORD *)this + 41);
    if (v4)
    {
      v5 = (re::ecs2::Entity **)*((_QWORD *)this + 43);
      v6 = 8 * v4;
      do
      {
        result = *v5;
        if ((~*((_DWORD *)*v5 + 72) & 0x2008) == 0)
          result = (re::ecs2::Entity *)re::ecs2::Entity::updateIsActive_Subtree(result);
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

re::ecs2::Entity *re::ecs2::Entity::updateSceneDependentFlagsRecursively(re::ecs2::Entity ***this)
{
  re::ecs2::Entity *result;
  re::ecs2::Entity **v3;
  re::ecs2::Entity **v4;
  uint64_t v5;
  re::ecs2::Entity *v6;

  result = re::ecs2::Entity::updateState<(re::ecs2::Entity::StateFlags)17>((re::ecs2::Entity *)this);
  v3 = this[41];
  if (v3)
  {
    v4 = this[43];
    v5 = 8 * (_QWORD)v3;
    do
    {
      v6 = *v4++;
      result = (re::ecs2::Entity *)re::ecs2::Entity::updateSceneDependentFlagsRecursively(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

re::ecs2::Entity *re::ecs2::Entity::updateState<(re::ecs2::Entity::StateFlags)17>(re::ecs2::Entity *this)
{
  re::ecs2::Entity *v2;
  re::ecs2::Entity *v3;
  uint64_t v4;
  _BOOL4 v5;

  v2 = this;
  do
  {
    v3 = v2;
    v2 = (re::ecs2::Entity *)*((_QWORD *)v2 + 3);
  }
  while (v2);
  v4 = *((_QWORD *)v3 + 2);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 48) != 0;
  else
    v5 = 0;
  re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree((uint64_t)this, v5);
  return re::ecs2::Entity::updateIsActive_Subtree(this);
}

uint64_t *re::ecs2::Entity::sendDidActivateEventsOnSceneRequiresAnchoringChange(uint64_t *this, re::ecs2::Scene *a2, _BOOL4 a3)
{
  int v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  re::EventBus *v12;
  re::EventBus *v13;
  uint64_t v14;
  re::ecs2::Entity **v15;
  uint64_t v16;
  re::ecs2::Entity *v17;
  _QWORD v18[2];

  v3 = *((_DWORD *)this + 72);
  if ((v3 & 1) != 0)
  {
    v5 = (uint64_t)this;
    if ((v3 & 4) == 0)
      a3 = 1;
    if (a3)
    {
      v7 = this[7];
      if (v7)
      {
        v8 = (uint64_t *)this[9];
        v9 = 8 * v7;
        do
        {
          v10 = *v8++;
          v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
          v12 = (re::EventBus *)*((_QWORD *)a2 + 36);
          v18[0] = v5;
          v18[1] = v11;
          re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(v12, v5, v18, v11);
          v9 -= 8;
        }
        while (v9);
      }
      v13 = (re::EventBus *)*((_QWORD *)a2 + 36);
      v18[0] = v5;
      this = re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(v13, v5, v18, 0);
    }
    v14 = *(_QWORD *)(v5 + 328);
    if (v14)
    {
      v15 = *(re::ecs2::Entity ***)(v5 + 344);
      v16 = 8 * v14;
      do
      {
        v17 = *v15++;
        this = (uint64_t *)re::ecs2::Entity::sendDidActivateEventsOnSceneRequiresAnchoringChange(v17, a2, a3);
        v16 -= 8;
      }
      while (v16);
    }
  }
  return this;
}

uint64_t *re::ecs2::Entity::sendWillDeactivateEventsOnSceneRequiresAnchoringChange(uint64_t *this, re::EventBus **a2, BOOL a3)
{
  int v3;
  uint64_t v5;
  uint64_t v7;
  re::ecs2::Entity **v8;
  uint64_t v9;
  re::ecs2::Entity *v10;
  re::EventBus *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  re::EventBus *v17;
  _QWORD v18[2];

  v3 = *((_DWORD *)this + 72);
  if ((v3 & 1) != 0)
  {
    v5 = (uint64_t)this;
    if ((v3 & 4) == 0)
      a3 = 1;
    v7 = this[41];
    if (v7)
    {
      v8 = (re::ecs2::Entity **)this[43];
      v9 = 8 * v7;
      do
      {
        v10 = *v8++;
        this = (uint64_t *)re::ecs2::Entity::sendWillDeactivateEventsOnSceneRequiresAnchoringChange(v10, (re::ecs2::Scene *)a2, a3);
        v9 -= 8;
      }
      while (v9);
    }
    if (a3)
    {
      v11 = a2[36];
      v18[0] = v5;
      this = re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v11, v5, v18, 0);
      v12 = *(_QWORD *)(v5 + 56);
      if (v12)
      {
        v13 = *(uint64_t **)(v5 + 72);
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          v16 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          v17 = a2[36];
          v18[0] = v5;
          v18[1] = v16;
          this = re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v17, v5, v18, v16);
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  return this;
}

void re::ecs2::Entity::updateAfterComponentDeserialized(re::ecs2::Entity *this, const re::ecs2::Component *a2)
{
  uint64_t v4;
  uint64_t v5;
  _UNKNOWN **v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _UNKNOWN **v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *i;
  _DWORD *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  do
  {
    if ((v7 & 1) == 0)
    {
      v23 = v5;
      v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      v12 = v11;
      v5 = v23;
      if (v12)
      {
        re::introspect<re::ecs2::AnchorComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchorComponent(0);
        v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        v5 = v23;
      }
    }
    if ((_UNKNOWN *)v5 == v6[60])
    {
      v22 = (!*((_BYTE *)a2 + 176) || *((_BYTE *)a2 + 177)) && *((_BYTE *)a2 + 178) == 0;
      re::ecs2::Entity::setSelfAnchored_Before(this, v22);
      re::ecs2::Entity::setSelfAnchored_After(this, v22);
      return;
    }
    v8 = *(unsigned int *)(v5 + 56);
    if (!(_DWORD)v8)
      break;
    v9 = *(_QWORD **)(v5 + 64);
    while (1)
    {
      v10 = (_DWORD *)*v9;
      if (*(_DWORD *)*v9 == 1 && v10[10] == 3)
        break;
      ++v9;
      if (!--v8)
        goto LABEL_14;
    }
    v5 = *((_QWORD *)v10 + 2);
  }
  while (v5);
LABEL_14:
  v13 = (*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  v15 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  while (1)
  {
    if ((v16 & 1) == 0)
    {
      v24 = v14;
      v15 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      v21 = v20;
      v14 = v24;
      if (v21)
      {
        re::introspect<re::ecs2::AnchoringComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchoringComponent(0);
        v15 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        v14 = v24;
      }
    }
    if ((_UNKNOWN *)v14 == v15[62])
      break;
    v17 = *(unsigned int *)(v14 + 56);
    if ((_DWORD)v17)
    {
      for (i = *(_QWORD **)(v14 + 64); ; ++i)
      {
        v19 = (_DWORD *)*i;
        if (*(_DWORD *)*i == 1 && v19[10] == 3)
          break;
        if (!--v17)
          return;
      }
      v14 = *((_QWORD *)v19 + 2);
      if (v14)
        continue;
    }
    return;
  }
  re::ecs2::Entity::setSelfRequiresAnchoring(this, *((unsigned __int8 *)a2 + 352));
}

uint64_t *re::ecs2::Entity::debugDescription@<X0>(re::ecs2::Entity *this@<X0>, re::DynamicString *a2@<X8>)
{
  size_t v4;
  _anonymous_namespace_ *v5;
  int16x8_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t *result;
  char __src[8];
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned __int32 v22;
  BOOL v23;
  BOOL v24;
  char v25;
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  v19 = 0;
  re::DynamicString::setCapacity(&v18, 0x20uLL);
  if (*((_QWORD *)this + 3))
  {
    __src[0] = 34;
    re::DynamicString::append((re::DynamicString *)&v18, __src, 1uLL);
    v4 = strlen(*(const char **)(*((_QWORD *)this + 3) + 280));
    re::DynamicString::append((re::DynamicString *)&v18, *(const char **)(*((_QWORD *)this + 3) + 280), v4);
    __src[0] = 34;
    v5 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)&v18, __src, 1uLL);
  }
  else
  {
    *(_QWORD *)__src = "<null>";
    v15 = 6;
    v5 = re::DynamicString::operator=((re::DynamicString *)&v18, (uint64_t)__src);
  }
  v7 = *((_DWORD *)this + 72);
  v6.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v7) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFBFFFFFFFDLL) & 0xFF01FF01FF01FF01;
  v22 = vmovn_s16(v6).u32[0];
  v23 = (v7 & 0x10) != 0;
  v24 = (v7 & 0x40) != 0;
  v25 = v7 & 1;
  v26 = (v7 & 0x80) != 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  re::DynamicString::setCapacity(__src, 0x40uLL);
  re::DynamicString::append((re::DynamicString *)__src, "{ ", 2uLL);
  v8 = 0;
  v9 = 1;
  do
  {
    if (*((_BYTE *)&v22 + v8))
    {
      if ((v9 & 1) == 0)
        re::DynamicString::append((re::DynamicString *)__src, " | ", 3uLL);
      v10 = strlen(off_24ED71858[v8]);
      re::DynamicString::append((re::DynamicString *)__src, off_24ED71858[v8], v10);
      v9 = 0;
    }
    ++v8;
  }
  while (v8 != 9);
  re::DynamicString::append((re::DynamicString *)__src, " }", 2uLL);
  if ((v19 & 1) != 0)
    v11 = v20;
  else
    v11 = (char *)&v19 + 1;
  if ((v15 & 1) != 0)
    v12 = v16;
  else
    v12 = (char *)&v15 + 1;
  re::DynamicString::format((re::DynamicString *)"<Entity { name = \"%s\", id = %llu, parent = %s, child count = %zu, state = %s }>", a2, *((_QWORD *)this + 35), *((_QWORD *)this + 37), v11, *((_QWORD *)this + 41), v12);
  if (*(_QWORD *)__src && (v15 & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)__src + 40))();
  result = v18;
  if (v18)
  {
    if ((v19 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v18 + 40))();
  }
  return result;
}

uint64_t *re::ecs2::Entity::debugDescriptionRecursive@<X0>(re::ecs2::Entity *this@<X0>, re::DynamicString *a2@<X8>)
{
  size_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  re::ecs2::Entity **v10;
  uint64_t v11;
  re::ecs2::Entity *v12;
  uint64_t *result;
  _OWORD v14[2];
  uint64_t *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;

  v4 = (*((_QWORD *)this + 41) << 6) + 64;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  re::DynamicString::setCapacity(a2, v4);
  re::ecs2::Entity::debugDescription(this, (re::DynamicString *)&v15);
  v5 = v16 & 1;
  if ((v16 & 1) != 0)
    v6 = v17;
  else
    v6 = (char *)&v16 + 1;
  if ((v16 & 1) != 0)
    v7 = v16 >> 1;
  else
    v7 = v16 >> 1;
  re::DynamicString::append(a2, v6, v7);
  v8 = (_anonymous_namespace_ *)v15;
  if (v15 && v5)
    v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v15 + 40))();
  v17 = 0;
  v18 = 0;
  v16 = 0;
  re::DynamicString::setCapacity(&v15, 0x20uLL);
  re::DynamicString::append((re::DynamicString *)&v15, "    ", 4uLL);
  v9 = *((_QWORD *)this + 41);
  if (v9)
  {
    v10 = (re::ecs2::Entity **)*((_QWORD *)this + 43);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      re::DynamicString::append(a2, "\n", 1uLL);
      re::DynamicString::DynamicString((re::DynamicString *)v14, (const re::DynamicString *)&v15);
      if (*(_QWORD *)&v14[0])
      {
        if ((BYTE8(v14[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v14[0] + 40))();
        memset(v14, 0, sizeof(v14));
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  result = v15;
  if (v15)
  {
    if ((v16 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *`anonymous namespace'::debugDescriptionRecursiveHelper(re::ecs2::Entity *a1, re::DynamicString *a2, char *a3)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  void *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _QWORD v21[3];

  v6 = *((_QWORD *)a3 + 1);
  if ((v6 & 1) != 0)
    v7 = (const char *)*((_QWORD *)a3 + 2);
  else
    v7 = a3 + 9;
  v8 = v6 >> 1;
  v9 = v6 >> 1;
  if ((*((_QWORD *)a3 + 1) & 1) != 0)
    v10 = v8;
  else
    v10 = v9;
  re::DynamicString::append(a2, v7, v10);
  re::ecs2::Entity::debugDescription(a1, (re::DynamicString *)&v20);
  v11 = v21[0] & 1;
  if ((v21[0] & 1) != 0)
    v12 = (const char *)v21[1];
  else
    v12 = (char *)v21 + 1;
  if ((v21[0] & 1) != 0)
    v13 = v21[0] >> 1;
  else
    v13 = LOBYTE(v21[0]) >> 1;
  re::DynamicString::append(a2, v12, v13);
  if (v20 && v11)
    (*(void (**)(void))(*(_QWORD *)v20 + 40))();
  result = re::DynamicString::append((re::DynamicString *)a3, "    ", 4uLL);
  v15 = *((_QWORD *)a1 + 41);
  if (v15)
  {
    v16 = (uint64_t *)*((_QWORD *)a1 + 43);
    v17 = 8 * v15;
    do
    {
      v18 = *v16;
      re::DynamicString::append(a2, "\n", 1uLL);
      re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)a3);
      result = *(void **)&v19[0];
      if (*(_QWORD *)&v19[0])
      {
        if ((BYTE8(v19[0]) & 1) != 0)
          result = (void *)(*(uint64_t (**)(void))(**(_QWORD **)&v19[0] + 40))();
        memset(v19, 0, sizeof(v19));
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  return result;
}

uint64_t re::ecs2::Entity::isStateValid(uint64_t a1, __int16 a2)
{
  int v2;
  int v5;
  _BYTE *v6;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  char v24;
  _BOOL4 v25;
  int v26;
  int v27;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;

  v2 = *(_DWORD *)(a1 + 288);
  if ((v2 & 0x80) == 0)
  {
    v5 = (~v2 & 0x2008) == 0;
    v6 = *(_BYTE **)(a1 + 128);
    v7 = v6 && (!v6[176] || v6[177]) && v6[178] == 0;
    v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v9)
      v10 = *(_BYTE *)(v9 + 352) != 0;
    else
      v10 = 0;
    v11 = *(_DWORD *)(a1 + 288);
    v12 = (v11 >> 6) & 1;
    v13 = *(_QWORD *)(a1 + 24);
    if (!v13 || (v14 = *(_DWORD *)(v13 + 288), (v14 & 0x80) != 0))
    {
      v22 = 0;
      v16 = v7;
      v18 = (_QWORD *)a1;
    }
    else
    {
      v30 = v7;
      v31 = *(_DWORD *)(a1 + 288);
      v15 = 1;
      v16 = v7;
      v29 = v10;
      v17 = v10;
      do
      {
        v18 = (_QWORD *)v13;
        if ((v17 & 1) == 0)
        {
          v19 = *(_BYTE **)(v13 + 128);
          if (v19)
            LODWORD(v19) = (!v19[176] || v19[177]) && v19[178] == 0;
          v16 |= v19;
        }
        v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v18 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v20)
          v21 = *(_BYTE *)(v20 + 352) != 0;
        else
          v21 = 0;
        v15 &= v14;
        v5 = v5 & ((~v14 & 0x2008) == 0);
        v12 |= (v14 & 0x40) >> 6;
        v13 = v18[3];
        if (!v13)
          break;
        v17 |= v21;
        v14 = *(_DWORD *)(v13 + 288);
      }
      while ((v14 & 0x80) == 0);
      v22 = v15 ^ 1;
      v7 = v30;
      LOBYTE(v11) = v31;
      v10 = v29;
    }
    v23 = v18[2];
    if (v23)
    {
      v24 = 0;
      v25 = *(_QWORD *)(v23 + 56) == 0;
      v26 = *(unsigned __int8 *)(v23 + 48);
      LODWORD(v23) = *(_BYTE *)(v23 + 48) != 0;
      if (((v25 | v22 | v12) & 1) == 0 && ((v5 ^ 1) & 1) == 0)
        v24 = (v26 == 0) | v16;
      if ((a2 & 2) == 0)
      {
LABEL_33:
        v27 = 0;
        if ((a2 & 0x20) == 0)
        {
LABEL_38:
          if ((a2 & 4) != 0)
          {
            v27 |= v16 ^ ((*(_BYTE *)(a1 + 288) & 4) >> 2);
            if ((a2 & 0x100) == 0)
            {
LABEL_40:
              if ((a2 & 0x10) == 0)
                goto LABEL_41;
              goto LABEL_48;
            }
          }
          else if ((a2 & 0x100) == 0)
          {
            goto LABEL_40;
          }
          v27 |= v10 ^ *(unsigned __int8 *)(a1 + 289);
          if ((a2 & 0x10) == 0)
          {
LABEL_41:
            if ((a2 & 0x40) == 0)
              goto LABEL_42;
            goto LABEL_49;
          }
LABEL_48:
          v27 |= v23 ^ ((*(_BYTE *)(a1 + 288) & 0x10) >> 4);
          if ((a2 & 0x40) == 0)
          {
LABEL_42:
            if ((a2 & 1) == 0)
            {
LABEL_44:
              v8 = v27 ^ 1;
              return v8 & 1;
            }
LABEL_43:
            LOBYTE(v27) = v27 | v24 ^ *(_BYTE *)(a1 + 288);
            goto LABEL_44;
          }
LABEL_49:
          v27 |= ((v11 ^ *(_BYTE *)(a1 + 288)) & 0x40) >> 6;
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_43;
        }
LABEL_37:
        v27 |= v7 ^ ((*(_BYTE *)(a1 + 288) & 0x20) >> 5);
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
      if ((a2 & 2) == 0)
        goto LABEL_33;
    }
    v27 = v5 ^ ((*(_BYTE *)(a1 + 288) & 2) >> 1);
    if ((a2 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
  v8 = 1;
  return v8 & 1;
}

uint64_t *re::ecs2::allocInfo_Entity(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_360);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_360))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541175A8, 0);
    *(uint64_t *)((char *)&qword_2541175B8 + 6) = 0;
    qword_2541175B8 = 0;
    qword_2541175C8 = 0;
    qword_2541175D0 = 0xFFFFFFFFLL;
    qword_2541175A8 = (uint64_t)&off_24ED7DAA8;
    qword_2541175D8 = (uint64_t)"Entity";
    dword_2541175E0 = 0;
    unk_2541175E8 = 0u;
    unk_2541175F8 = 0u;
    unk_254117608 = 0u;
    qword_254117618 = 0;
    __cxa_guard_release(&_MergedGlobals_360);
  }
  return &qword_2541175A8;
}

void re::ecs2::initInfo_Entity(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 4161118214;
  v5[1] = "Entity";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_Entity(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_Entity(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Entity", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Entity, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Entity, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Entity>, this);
}

uint64_t re::EventBus::getTypeId<RESceneAnchoredStateChangedEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  v1 = &re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    if (v3)
    {
      re::EventBus::getTypeId<RESceneAnchoredStateChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32RESceneAnchoredStateChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = (_QWORD *)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    }
  }
  return v1[59];
}

void re::ecs2::PackedTypeIDs::~PackedTypeIDs(re::ecs2::PackedTypeIDs *this)
{
  re::ecs2::PackedTypeIDs *v1;
  uint64_t *v3;

  v1 = (re::ecs2::PackedTypeIDs *)*((_QWORD *)this + 1);
  if (v1 != (re::ecs2::PackedTypeIDs *)((char *)this + 16) && v1 != 0)
  {
    v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, re::ecs2::PackedTypeIDs *))(*(_QWORD *)v3[2] + 40))(v3[2], v1);
  }
}

unsigned __int16 *re::ecs2::PackedTypeIDs::ensureCapacity(unsigned __int16 *this, unint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v11;

  if (this[2] < a2)
  {
    v2 = this;
    v3 = this[1];
    v4 = re::globalAllocators((re *)this);
    this = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 32 * v3, 16);
    v5 = this;
    if (v3)
    {
      v6 = 0;
      v7 = 2 * v3;
      do
      {
        *(_OWORD *)&this[v6] = *(_OWORD *)(*((_QWORD *)v2 + 1) + v6 * 2);
        v6 += 8;
      }
      while (8 * v3 != v6);
      v8 = &this[8 * v3];
      if (v7 <= v3 + 1)
        v7 = v3 + 1;
      this = (unsigned __int16 *)memset(v8, 255, 16 * (v7 - v3));
    }
    v9 = (unsigned __int16 *)*((_QWORD *)v2 + 1);
    if (v9 != v2 + 8 && v9 != 0)
    {
      v11 = re::globalAllocators((re *)this);
      this = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v11[2] + 40))(v11[2], v9);
    }
    *((_QWORD *)v2 + 1) = v5;
    v2[2] = 16 * v3;
  }
  return this;
}

uint64_t re::ecs2::AnchorComponent::makeSyncInfo(re::ecs2::AnchorComponent *this)
{
  uint64_t v1;

  v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  return v1;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4;
  BOOL v5;
  float v6;
  float v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  __int128 v12;
  uint64x2_t v14;
  _BYTE v15[8];
  uint64_t v16;

  RESyncBitReaderReadData();
  ReadOptional<unsigned long long>(v15);
  if (*(_BYTE *)(a3 + 184))
    v4 = 0;
  else
    v4 = v15[0] == 0;
  if (!v4)
  {
    if (*(_BYTE *)(a3 + 184))
      v5 = v15[0] == 0;
    else
      v5 = 0;
    if (v5)
    {
      *(_BYTE *)(a3 + 184) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a3 + 184) && v15[0])
        *(_BYTE *)(a3 + 184) = 1;
      *(_QWORD *)(a3 + 192) = v16;
    }
  }
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  if (*(_BYTE *)(a3 + 200) && *(_BYTE *)(a3 + 178) != 1)
  {
    *(_BYTE *)(a3 + 178) = 1;
    re::ecs2::AnchorComponent::onAnchorStateChanged((re::ecs2::AnchorComponent *)a3);
  }
  v14.i64[0] = 0x3F8000003F800000;
  v14.i64[1] = 1065353216;
  RESyncBitReaderReadData();
  v6 = 0.0 * (float)(0.0 + 0.0);
  v7 = (float)(0.0 + 0.0) * 0.0;
  v8 = (float)(0.0 + 0.0) * 1.0;
  v9.i32[3] = 0;
  v9.f32[0] = 1.0 - (float)(v6 + v6);
  v9.f32[1] = v7 + v8;
  v9.f32[2] = v7 - v8;
  v10.i32[3] = 0;
  v10.f32[0] = v7 - v8;
  v10.f32[1] = v9.f32[0];
  v10.f32[2] = v7 + v8;
  v11.i32[3] = 0;
  v11.f32[0] = v7 + v8;
  v11.f32[1] = v7 - v8;
  v11.f32[2] = v9.f32[0];
  v12 = 0uLL;
  HIDWORD(v12) = 1.0;
  *(float32x4_t *)(a3 + 48) = vmulq_n_f32(v9, 1.0);
  *(float32x4_t *)(a3 + 64) = vmulq_n_f32(v10, *(float *)vshrq_n_u64(v14, 0x20uLL).i32);
  *(float32x4_t *)(a3 + 80) = vmulq_laneq_f32(v11, (float32x4_t)v14, 2);
  *(_OWORD *)(a3 + 96) = v12;
  return 1;
}

uint64_t ReadOptional<unsigned long long>(_BYTE *a1)
{
  uint64_t result;

  result = RESyncBitReaderReadBool();
  *a1 = 0;
  return result;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[3];
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int32x4_t v11;

  MEMORY[0x227691F24](a2, a3 + 25, 16);
  v7[0] = *(_BYTE *)(a3 + 184);
  if (v7[0])
    v8 = *(_QWORD *)(a3 + 192);
  WriteOptional<unsigned long long>(a2, v7);
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteBool();
  v10 = xmmword_2260E5D70;
  v11 = 0u;
  v9 = 0u;
  re::decomposeScaleRotationTranslation<float>(a3 + 48, &v11, &v10, &v9);
  v6[0] = v11;
  v6[1] = v10;
  v6[2] = v9;
  MEMORY[0x227691F24](a2, v6, 48);
  return 1;
}

uint64_t WriteOptional<unsigned long long>(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = RESyncBitWriterWriteBool();
  if (*a2)
    JUMPOUT(0x227691F24);
  return result;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a3, 0);
  if ((RESyncObjectReadContextIsLocalSession() & 1) == 0)
    return re::SRTNetworkSyncHelper::read(a2, a3);
  v5 = RESyncBitReaderDataPtr();
  v6 = RESyncBitReaderBytesLeft();
  RESyncBitReaderSkipData();
  MEMORY[0x227691F24](a3, v5, v6);
  return 1;
}

uint64_t re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[8];
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  __int16 v13;
  _BYTE v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v12 = 0;
  RESyncBitReaderReadData();
  ReadOptional<unsigned long long>(v10);
  v5 = v10[0];
  v6 = v11;
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  MEMORY[0x227691F24](a2, v14, 16);
  v8[0] = v5;
  if (v5)
    v9 = v6;
  WriteOptional<unsigned long long>(a2, v8);
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteBool();
  result = RESyncBitWriterWriteBool();
  if (a3)
  {
    RESyncBitReaderReadData();
    ReadOptional<unsigned long long>(v10);
    RESyncBitReaderReadBool();
    RESyncBitReaderReadBool();
    return RESyncBitReaderReadBool();
  }
  return result;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a4, a3);
  if ((RESyncObjectReadContextIsLocalSession() & 1) == 0)
    return re::SRTNetworkSyncHelper::readDelta(a2, a3, a4);
  v7 = RESyncBitReaderDataPtr();
  v8 = RESyncBitReaderBytesLeft();
  RESyncBitReaderSkipData();
  MEMORY[0x227691F24](a4, v7, v8);
  return 1;
}

BOOL ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a3, 0);
  if ((RESyncObjectWriteContextIsLocalSession() & 1) != 0)
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x227691F24);
  }
  return re::SRTNetworkSyncHelper::write(a2, a3);
}

BOOL ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a4, a3);
  if ((RESyncObjectWriteContextIsLocalSession() & 1) != 0)
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x227691F24);
  }
  return re::SRTNetworkSyncHelper::writeDelta(a2, a3, a4);
}

_OWORD *re::ecs2::AnchorComponent::setWorldTransform(_OWORD *result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;

  if ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(*a2), (int8x16_t)vcgezq_f32(*a2)), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[1]), (int8x16_t)vcgezq_f32(a2[1]))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[2]), (int8x16_t)vcgezq_f32(a2[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[3]), (int8x16_t)vcgezq_f32(a2[3])))))) & 1) != 0)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) AnchorComponent cannot have NaN worldTransform", "!transform.containsNaN()", "setWorldTransform", 203);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    v2 = *a2;
    v3 = a2[1];
    v4 = a2[3];
    result[5] = a2[2];
    result[6] = v4;
    result[3] = v2;
    result[4] = v3;
  }
  return result;
}

void re::ecs2::AnchorComponent::onAnchorStateChanged(re::ecs2::AnchorComponent *this)
{
  re::ecs2::Entity *v1;
  _BOOL4 v2;

  v1 = (re::ecs2::Entity *)*((_QWORD *)this + 2);
  if (v1)
  {
    v2 = (!*((_BYTE *)this + 176) || *((_BYTE *)this + 177)) && *((_BYTE *)this + 178) == 0;
    re::ecs2::Entity::setSelfAnchored_Before(*((re::ecs2::Entity **)this + 2), v2);
    re::ecs2::Entity::setSelfAnchored_After(v1, v2);
  }
}

