unsigned int *re::serializeVector3D<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7, (uint64_t)"double");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7, (uint64_t)"double");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7, (uint64_t)"double");
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

unsigned int *re::serializeVector4D<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7, (uint64_t)"double");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7, (uint64_t)"double");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7, (uint64_t)"double");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "w", 3, a4 + 3, a7, (uint64_t)"double");
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

unsigned int *re::serializeMatrix2x2F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 2, a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

unsigned int *re::serializeMatrix3x3F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

unsigned int *re::serializeMatrix4x4F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
      re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 12, a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 4, a7);
    re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

unsigned int *re::serializeQuaternionF<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 4, a7);
    re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 8, a7);
    re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

unsigned int *re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_anonymous_namespace_ *a1, char *a2, uint64_t a3, float *a4, char a5)
{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 2;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 2)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((_BYTE *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 3;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 3)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((_BYTE *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 4)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((_BYTE *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1, a2, a3, &v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 4)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5, (uint64_t)"float");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5, (uint64_t)"float");
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return (unsigned int *)(*((_BYTE *)a1 + 40) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "w", 3, a4 + 3, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 2, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 12, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  _BOOL4 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 4, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  _BOOL4 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 4, a7);
    re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 8, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::serialize<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, float *a4, char a5)
{
  _BOOL8 result;
  uint64_t v9;

  v9 = 2;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;

  v9 = 3;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;

  v9 = 4;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, "w", 3, a4 + 24, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
    re::EncoderOPACK<re::FixedArrayInputStream>::endObject(a1 + 24);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
    re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
    re::EncoderOPACK<re::FixedArrayInputStream>::endObject(a1 + 24);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[8];
  _BYTE v27[32];

  if (a5 == this)
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  v14 = (_QWORD *)re::TypeInfo::enumConstants(this);
  if (!v15)
  {
LABEL_6:
    v17 = *a4;
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
    re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
    if (!a1[64])
    {
      result = (*(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, uint64_t *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
      if (!(_DWORD)result)
        return result;
      if ((unint64_t)*a4 < 0xA && ((0x21Fu >> *a4) & 1) != 0)
        return 1;
      *a4 = v17;
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
    }
    return 0;
  }
  v16 = 24 * v15;
  while (*v14 != 9)
  {
    v14 += 3;
    v16 -= 24;
    if (!v16)
      goto LABEL_6;
  }
  return re::serializeEnum<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
}

uint64_t re::serialize<re::EncoderOPACK<re::FixedArrayInputStream>>(_anonymous_namespace_ *a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 2;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 2)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 3;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 3)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v21 = **((_QWORD **)a5 + 2);
      v22 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v21 == (unsigned __int16)v22)
      {
        v24 = WORD1(v21) == WORD1(v22);
        v23 = (v22 ^ v21) & 0xFFFFFF00000000;
        v24 = v24 && v23 == 0;
        if (v24)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v25 = 2;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
  if ((_DWORD)result)
  {
    if (v25 == 2)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v16, v17, v18, v19, v20, v25);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v21 = **((_QWORD **)a5 + 2);
      v22 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v21 == (unsigned __int16)v22)
      {
        v24 = WORD1(v21) == WORD1(v22);
        v23 = (v22 ^ v21) & 0xFFFFFF00000000;
        v24 = v24 && v23 == 0;
        if (v24)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v25 = 3;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
  if ((_DWORD)result)
  {
    if (v25 == 3)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v16, v17, v18, v19, v20, v25);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v21 = **((_QWORD **)a5 + 2);
      v22 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v21 == (unsigned __int16)v22)
      {
        v24 = WORD1(v21) == WORD1(v22);
        v23 = (v22 ^ v21) & 0xFFFFFF00000000;
        v24 = v24 && v23 == 0;
        if (v24)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v25 = 4;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
  if ((_DWORD)result)
  {
    if (v25 == 4)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<long long>(a1 + 24, "w", 3, a4 + 24, (uint64_t)"double", a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v16, v17, v18, v19, v20, v25);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v21 = **((_QWORD **)a5 + 2);
      v22 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v21 == (unsigned __int16)v22)
      {
        v24 = WORD1(v21) == WORD1(v22);
        v23 = (v22 ^ v21) & 0xFFFFFF00000000;
        v24 = v24 && v23 == 0;
        if (v24)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v25 = 2;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
  if ((_DWORD)result)
  {
    if (v25 == 2)
    {
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v16, v17, v18, v19, v20, v25);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v21 = **((_QWORD **)a5 + 2);
      v22 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v21 == (unsigned __int16)v22)
      {
        v24 = WORD1(v21) == WORD1(v22);
        v23 = (v22 ^ v21) & 0xFFFFFF00000000;
        v24 = v24 && v23 == 0;
        if (v24)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v25 = 3;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
  if ((_DWORD)result)
  {
    if (v25 == 3)
    {
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v16, v17, v18, v19, v20, v25);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v21 = **((_QWORD **)a5 + 2);
      v22 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v21 == (unsigned __int16)v22)
      {
        v24 = WORD1(v21) == WORD1(v22);
        v23 = (v22 ^ v21) & 0xFFFFFF00000000;
        v24 = v24 && v23 == 0;
        if (v24)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v25 = 4;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v25, 4);
  if ((_DWORD)result)
  {
    if (v25 == 4)
    {
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), v15, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v16, v17, v18, v19, v20, v25);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _OWORD v19[3];

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  if (*(_BYTE *)(a1 + 64))
    return 0;
  LOBYTE(v19[0]) = 1;
  DWORD1(v19[0]) = 0;
  *((_QWORD *)&v19[0] + 1) = a2;
  memset(&v19[1], 0, 32);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)(a1 + 24), v19);
  re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
  re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
  re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _OWORD v19[3];

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::FixedArrayInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  if (*(_BYTE *)(a1 + 64))
    return 0;
  LOBYTE(v19[0]) = 1;
  DWORD1(v19[0]) = 0;
  *((_QWORD *)&v19[0] + 1) = a2;
  memset(&v19[1], 0, 32);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)(a1 + 24), v19);
  re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
  re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
  re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
  re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[8];
  _BYTE v27[32];

  if (a5 == this)
    return re::internal::serializeEnumAsBinary<re::EncoderBinary<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  v14 = (_QWORD *)re::TypeInfo::enumConstants(this);
  if (!v15)
  {
LABEL_6:
    v17 = *a4;
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
    re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
    if (!a1[64])
    {
      result = (*(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, uint64_t *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
      if (!(_DWORD)result)
        return result;
      if ((unint64_t)*a4 < 0xA && ((0x21Fu >> *a4) & 1) != 0)
        return 1;
      *a4 = v17;
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
    }
    return 0;
  }
  v16 = 24 * v15;
  while (*v14 != 9)
  {
    v14 += 3;
    v16 -= 24;
    if (!v16)
      goto LABEL_6;
  }
  return re::serializeEnum<re::EncoderBinary<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
}

BOOL re::serialize<re::EncoderBinary<re::FixedArrayInputStream>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 2;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 2)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 3;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 3)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 4;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 4)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 4;
  result = re::EncoderBinary<re::FixedArrayInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v15, 4);
  if (result)
  {
    if (v15 == 4)
    {
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::FixedArrayInputStream>::serializeValue<int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(a1, v9, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

uint64_t re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  _BYTE v16[23];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20[3];
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  re::DynamicString::setCapacity(&v22, 0);
  v21 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v22, a3, &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, 0, (re::DynamicString *)&v14);
  if ((v15 & 1) != 0)
    v11 = *(_BYTE **)&v16[7];
  else
    v11 = v16;
  if ((v23 & 1) != 0)
    v12 = v24;
  else
    v12 = (char *)&v23 + 1;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v17, "deserialize", v11, v12);
  *(_QWORD *)&v20[0] = 400;
  *((_QWORD *)&v20[0] + 1) = &re::FoundationErrorCategory(void)::instance;
  *(_QWORD *)&v20[1] = v17;
  *((_QWORD *)&v20[2] + 1) = v19;
  *(__int128 *)((char *)&v20[1] + 8) = v18;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, v20);
  if (*(_QWORD *)&v20[1])
  {
    if ((BYTE8(v20[1]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v20[1] + 40))();
    memset(&v20[1], 0, 32);
  }
  if (v14 && (v15 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v14 + 40))();
  result = (uint64_t)v22;
  if (v22)
  {
    if ((v23 & 1) != 0)
      return (*(uint64_t (**)(void))(*v22 + 40))();
  }
  return result;
}

uint64_t re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  _BYTE v16[23];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20[3];
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  re::DynamicString::setCapacity(&v22, 0);
  v21 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v22, "Failed to serialize Swift Codable component of type %s.", &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v14);
  if ((v15 & 1) != 0)
    v11 = *(_BYTE **)&v16[7];
  else
    v11 = v16;
  if ((v23 & 1) != 0)
    v12 = v24;
  else
    v12 = (char *)&v23 + 1;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v17, "serialize", v11, v12);
  *(_QWORD *)&v20[0] = 400;
  *((_QWORD *)&v20[0] + 1) = &re::FoundationErrorCategory(void)::instance;
  *(_QWORD *)&v20[1] = v17;
  *((_QWORD *)&v20[2] + 1) = v19;
  *(__int128 *)((char *)&v20[1] + 8) = v18;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, v20);
  if (*(_QWORD *)&v20[1])
  {
    if ((BYTE8(v20[1]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v20[1] + 40))();
    memset(&v20[1], 0, 32);
  }
  if (v14 && (v15 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v14 + 40))();
  result = (uint64_t)v22;
  if (v22)
  {
    if ((v23 & 1) != 0)
      return (*(uint64_t (**)(void))(*v22 + 40))();
  }
  return result;
}

char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteRawValue(char **a1, uint64_t a2, uint64_t a3)
{
  char *result;
  unint64_t v7;
  char v8;
  _BYTE *v9;

  result = *a1;
  if (*((_QWORD *)result + 4) - *((_QWORD *)result + 3) < a3)
  {
    result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>((uint64_t)result, a3);
    if (!a3)
      return result;
  }
  else if (!a3)
  {
    return result;
  }
  v7 = 0;
  do
  {
    v8 = *(_BYTE *)(a2 + v7);
    v9 = (_BYTE *)*((_QWORD *)*a1 + 3);
    *((_QWORD *)*a1 + 3) = v9 + 1;
    *v9 = v8;
    ++v7;
  }
  while (v7 < a3);
  return result;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(unsigned int *a1, uint64_t a2)
{
  __int16 v4;
  rapidjson::internal *v6;
  char *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  rapidjson::internal *v18;
  char *v19;
  rapidjson::internal *v20;
  char *v21;

  v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)a2);
    case 1:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      v8 = (uint64_t *)a2;
      v9 = 0;
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteBool(v8, v9);
    case 2:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      v8 = (uint64_t *)a2;
      v9 = 1;
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteBool(v8, v9);
    case 3:
      if (!rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(a2))
        return 0;
      if (!*a1)
        goto LABEL_23;
      v10 = *((_QWORD *)a1 + 1) + 24;
      while (1)
      {
        v11 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? v10 - 24 : *(_QWORD *)(v10 - 16);
        v12 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? 21 - *(char *)(v10 - 3) : *(_DWORD *)(v10 - 24);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        if (!rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)a2, v11, v12)|| (rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(v10, a2) & 1) == 0)
        {
          break;
        }
        v13 = v10 + 24;
        v10 += 48;
        if (v13 == *((_QWORD *)a1 + 1) + 48 * *a1)
        {
LABEL_23:
          *(_QWORD *)(a2 + 32) -= 16;
          return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndObject((uint64_t *)a2);
        }
      }
      return 0;
    case 4:
      if (!rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(a2))
        return 0;
      if (!*a1)
        goto LABEL_29;
      v14 = *((_QWORD *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v15 = (uint64_t)a1;
      else
        v15 = *((_QWORD *)a1 + 1);
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v16 = 21 - *((char *)a1 + 21);
      else
        v16 = *a1;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)a2, v15, v16);
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        v17 = *(double *)a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble(a2, v17);
      }
      else if ((v4 & 0x20) != 0)
      {
        v18 = (rapidjson::internal *)*a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)a2, v18, v19);
      }
      else if ((v4 & 0x40) != 0)
      {
        v20 = (rapidjson::internal *)*a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)a2, v20, v21);
      }
      else
      {
        v6 = *(rapidjson::internal **)a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix((char *)a2);
        if ((v4 & 0x80) != 0)
          return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt64((uint64_t *)a2, (unint64_t)v6, v7);
        else
          return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint64((uint64_t *)a2, v6, v7);
      }
  }
  while ((rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(v14, a2) & 1) != 0)
  {
    v14 += 24;
    if (v14 == *((_QWORD *)a1 + 1) + 24 * *a1)
    {
LABEL_29:
      *(_QWORD *)(a2 + 32) -= 16;
      return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndArray((uint64_t *)a2);
    }
  }
  return 0;
}

uint64_t re::ecs2::AnimationSceneManager::animationService(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 160, a2);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::ecs2::AnimationSceneManager::updateAnimationsForScene(re::ecs2::AnimationSceneManager *this, const re::ecs2::Scene *a2, float a3)
{
  re::AnimationManager **v4;
  re::AnimationManager **v5;
  re::AnimationManager *v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  v4 = (re::AnimationManager **)re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 160, (unint64_t)a2);
  if (v4)
  {
    v5 = v4;
    v6 = *v4;
    v7 = 112;
    do
    {
      v8 = *(_DWORD *)((char *)v6 + v7);
      if (v8)
        break;
      v9 = v7 == 176;
      v7 += 64;
    }
    while (!v9);
    if (v8)
    {
      re::AnimationManager::update(v6, a3);
      re::AnimationManager::applyAnimations(*v5);
    }
  }
}

_QWORD *re::ecs2::AnimationSceneManager::setTaskOptions(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;

  v2 = *(_QWORD *)a2;
  *((_BYTE *)result + 272) = *(_BYTE *)(a2 + 8);
  result[33] = v2;
  v3 = result[31];
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t)(result + 26);
    do
    {
      v7 = (_QWORD **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v5);
      result = re::ecs2::System::setTaskOptions(*v7, (uint64_t *)a2);
      ++v5;
    }
    while (v3 != v5);
  }
  return result;
}

void re::ecs2::AnimationSceneManager::registerSystem(re::ecs2::AnimationSceneManager *this, re::ecs2::System *a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = *((_QWORD *)this + 31);
  v5 = *((_QWORD *)this + 27);
  if (v4 + 1 > 8 * v5)
  {
    re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity((_QWORD *)this + 26, (v4 + 8) >> 3);
    v5 = *((_QWORD *)this + 27);
  }
  if (v5 <= v4 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*((_BYTE *)this + 224) & 1) != 0)
    v6 = (char *)this + 232;
  else
    v6 = (char *)*((_QWORD *)this + 30);
  v7 = *(_QWORD *)&v6[8 * (v4 >> 3)];
  ++*((_QWORD *)this + 31);
  ++*((_DWORD *)this + 64);
  *(_QWORD *)(v7 + 8 * (v4 & 7)) = a2;
  re::ecs2::System::setTaskOptions(a2, (uint64_t *)this + 33);
  re::ecs2::AnimationSceneManager::updateScheduling(this);
}

void re::ecs2::AnimationSceneManager::updateScheduling(re::ecs2::AnimationSceneManager *this)
{
  unint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  re::ecs2::System **v15;
  re::ecs2::System *v16;
  uint64_t v17;
  re::Scheduler *v18;
  unint64_t v19;

  v1 = *((_QWORD *)this + 4);
  v2 = *((_DWORD *)this + 10);
  if (v1 < 0xB)
  {
    if ((v2 & 1) != 0)
    {
      v4 = (uint64_t *)((char *)this + 48);
      if (v1)
      {
LABEL_6:
        v5 = 0;
        v6 = 8 * v1;
        do
        {
          v7 = *v4++;
          v5 |= v7;
          v6 -= 8;
        }
        while (v6);
        v8 = v5 != 0;
        goto LABEL_19;
      }
    }
    else
    {
      v4 = (uint64_t *)*((_QWORD *)this + 7);
      if (v1)
        goto LABEL_6;
    }
    v8 = 0;
    goto LABEL_19;
  }
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)((char *)this + 48);
  else
    v3 = (uint64_t *)*((_QWORD *)this + 7);
  v9 = 8 * v1 - 8;
  do
  {
    v10 = *v3++;
    v8 = v10 != 0;
    if (v10)
      v11 = 1;
    else
      v11 = v9 == 0;
    v9 -= 8;
  }
  while (!v11);
LABEL_19:
  v12 = *((_QWORD *)this + 31);
  if (v12)
  {
    v13 = 0;
    v14 = (char *)this + 208;
    do
    {
      v15 = (re::ecs2::System **)re::BucketArray<re::ecs2::System *,8ul>::operator[]((uint64_t)v14, v13);
      v16 = *v15;
      if (v8 != (*((_BYTE *)*v15 + 64) != 0))
      {
        re::ecs2::System::setTaskEnabled(*v15, v8);
        if (v8)
        {
          v17 = *((_QWORD *)v16 + 5);
          if (v17)
          {
            v18 = (re::Scheduler *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 80))(v17);
            if (v18)
            {
              v19 = *((_QWORD *)v16 + 12);
              if (*((_QWORD *)v18 + 5) <= v19)
                return;
              re::Scheduler::resetTaskCurrentTime(v18, v19);
            }
          }
        }
      }
      ++v13;
    }
    while (v12 != v13);
  }
}

void re::ecs2::AnimationSceneManager::registerScene(re::ecs2::AnimationSceneManager *this, unint64_t a2)
{
  uint64_t *v4;
  re::AnimationManager *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  re::AnimationManager **v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  re::AnimationManager *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  re::AnimationManager *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  v4 = re::globalAllocators(this);
  v5 = (re::AnimationManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 512, 8);
  re::AnimationManager::AnimationManager(v5);
  v6 = *((_QWORD *)this + 20);
  v30[3] = v30;
  v29 = (uint64_t)v5;
  v30[0] = &off_24ED5D788;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (v6)
  {
    v9 = v8 % *((unsigned int *)this + 46);
    v10 = *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *((_QWORD *)this + 22);
      if (*(_QWORD *)(v11 + (v10 << 6) + 16) == a2)
      {
LABEL_6:
        v12 = v11 + (v10 << 6);
        goto LABEL_9;
      }
      while (1)
      {
        v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + (v10 << 6) + 16) == a2)
          goto LABEL_6;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v13 = re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 160, v9, v8, &v26, &v29);
  ++*((_DWORD *)this + 50);
  v12 = *((_QWORD *)this + 22) + ((unint64_t)v13 << 6);
LABEL_9:
  v14 = (re::AnimationManager **)(v12 + 24);
  std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](&v29);
  re::AnimationManager::init(*v14, 0, 0);
  v15 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  v16 = *((_DWORD *)this + 74);
  if ((v16 & 1) != 0)
  {
    v17 = (uint64_t *)((char *)this + 304);
    if (!v15)
      goto LABEL_16;
  }
  else
  {
    v17 = (uint64_t *)*((_QWORD *)this + 39);
    if (!v15)
      goto LABEL_16;
  }
  v18 = 40 * v15;
  do
  {
    v17 = (uint64_t *)(std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](v17)
                    + 40);
    v18 -= 40;
  }
  while (v18);
  v16 = *((_DWORD *)this + 74);
LABEL_16:
  *((_DWORD *)this + 74) = v16 + 2;
  v19 = *v14;
  v28 = *v14;
  v20 = *((_QWORD *)this + 17);
  if (v20)
  {
    v21 = v20 - 1;
    v22 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v21);
    v29 = v22;
    *((_QWORD *)this + 17) = v21;
    ++*((_DWORD *)this + 36);
    v23 = (char *)this + 72;
    v24 = &v29;
  }
  else
  {
    v22 = *((_QWORD *)this + 8);
    v27 = v22;
    if (((v22 + 1) & 0x3F) != 0)
      v25 = ((unint64_t)(v22 + 1) >> 6) + 1;
    else
      v25 = (unint64_t)(v22 + 1) >> 6;
    *((_QWORD *)this + 8) = v22 + 1;
    v29 = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::AnimationSceneManager *)((char *)this + 24), v25, &v29);
    v23 = (char *)this + 72;
    v24 = &v27;
  }
  re::HashTable<re::AnimationManager *,unsigned long,re::Hash<re::AnimationManager *>,re::EqualTo<re::AnimationManager *>,true,false>::addNew((uint64_t)v23, (uint64_t *)&v28, v24);
  *((_QWORD *)v19 + 5) = (char *)this + 8;
  *((_QWORD *)v19 + 6) = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, *((unsigned __int8 *)v19 + 56), v22);
  re::ecs2::AnimationSceneManager::updateScheduling(this);
}

void re::ecs2::AnimationSceneManager::unregisterScene(re::ecs2::AnimationSceneManager *this, const re::ecs2::Scene *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  unint64_t v36;

  v4 = (uint64_t *)re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 160, (unint64_t)a2);
  if (!v4)
    return;
  v5 = v4;
  v6 = *v4;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  LODWORD(v7) = 0x7FFFFFFF;
  if (*((_QWORD *)this + 9))
  {
    v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
    v9 = *(unsigned int *)(*((_QWORD *)this + 10) + 4 * ((v8 ^ (v8 >> 31)) % *((unsigned int *)this + 24)));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *((_QWORD *)this + 11);
      if (*(_QWORD *)(v10 + 32 * v9 + 16) == v6)
      {
        LODWORD(v7) = v9;
      }
      else
      {
        v7 = v9;
        while (1)
        {
          v7 = *(_DWORD *)(v10 + 32 * v7 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v7 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v10 + 32 * v7 + 16) == v6)
            goto LABEL_11;
        }
        LODWORD(v7) = 0x7FFFFFFF;
      }
    }
  }
LABEL_11:
  v36 = *(_QWORD *)(*((_QWORD *)this + 11) + 32 * v7 + 24);
  re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 24, v36);
  v11 = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::add((_QWORD *)this + 15, &v36);
  if (*((_QWORD *)this + 35))
  {
    v12 = *((_QWORD *)this + 36);
    v13 = *((_DWORD *)this + 74);
    if ((v13 & 1) != 0)
    {
      v15 = v12 + 1;
      if (v15 >= 5)
      {
        v16 = 8;
LABEL_22:
        if (v16 <= v15)
          v20 = v15;
        else
          v20 = v16;
        re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity((uint64_t *)this + 35, v20);
        if ((*((_DWORD *)this + 74) & 1) != 0)
          goto LABEL_26;
LABEL_20:
        v19 = (char *)*((_QWORD *)this + 39);
        goto LABEL_27;
      }
    }
    else
    {
      v14 = *((_QWORD *)this + 38);
      if (v12 >= v14)
      {
        v15 = v12 + 1;
        if (v14 < v15)
        {
          v16 = 2 * v14;
          goto LABEL_22;
        }
      }
    }
    if ((v13 & 1) == 0)
      goto LABEL_20;
  }
  else
  {
    v17 = *((_QWORD *)this + 36) + 1;
    re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity((uint64_t *)this + 35, v17);
    v18 = *((_DWORD *)this + 74) + 2;
    *((_DWORD *)this + 74) = v18;
    if ((v18 & 1) == 0)
      goto LABEL_20;
  }
LABEL_26:
  v19 = (char *)this + 304;
LABEL_27:
  std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](&v19[40 * *((_QWORD *)this + 36)], v5);
  ++*((_QWORD *)this + 36);
  *((_DWORD *)this + 74) += 2;
  if (*((_QWORD *)this + 20))
  {
    v21 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    v22 = (v21 ^ (v21 >> 31)) % *((unsigned int *)this + 46);
    v23 = *((_QWORD *)this + 21);
    v24 = *(unsigned int *)(v23 + 4 * v22);
    if ((_DWORD)v24 != 0x7FFFFFFF)
    {
      v25 = *((_QWORD *)this + 22);
      v26 = v25 + (v24 << 6);
      if (*(const re::ecs2::Scene **)(v26 + 16) == a2)
      {
        *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)(v26 + 8) & 0x7FFFFFFF;
LABEL_34:
        v30 = *((_QWORD *)this + 22);
        v31 = v30 + (v24 << 6);
        v34 = *(_DWORD *)(v31 + 8);
        v33 = (int *)(v31 + 8);
        v32 = v34;
        if (v34 < 0)
        {
          *v33 = v32 & 0x7FFFFFFF;
          std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v30 + (v24 << 6) + 24));
          v30 = *((_QWORD *)this + 22);
          v32 = *(_DWORD *)(v30 + (v24 << 6) + 8);
        }
        v35 = *((_DWORD *)this + 50);
        *(_DWORD *)(v30 + (v24 << 6) + 8) = *((_DWORD *)this + 49) | v32 & 0x80000000;
        --*((_DWORD *)this + 47);
        *((_DWORD *)this + 49) = v24;
        *((_DWORD *)this + 50) = v35 + 1;
      }
      else
      {
        while (1)
        {
          v27 = v24;
          v28 = *(_DWORD *)(v25 + (v24 << 6) + 8);
          v24 = v28 & 0x7FFFFFFF;
          if ((v28 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          v29 = v25 + (v24 << 6);
          if (*(const re::ecs2::Scene **)(v29 + 16) == a2)
          {
            *(_DWORD *)(v25 + ((unint64_t)v27 << 6) + 8) = *(_DWORD *)(v25 + ((unint64_t)v27 << 6) + 8) & 0x80000000 | *(_DWORD *)(v29 + 8) & 0x7FFFFFFF;
            goto LABEL_34;
          }
        }
      }
    }
  }
  re::ecs2::AnimationSceneManager::updateScheduling(this);
}

void re::HashTable<re::AnimationManager *,unsigned long,re::Hash<re::AnimationManager *>,re::EqualTo<re::AnimationManager *>,true,false>::addNew(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v16 + 32 * v10 + 16) == v6)
        return;
      while (1)
      {
        v10 = *(_DWORD *)(v16 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v16 + 32 * v10 + 16) == v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = v6;
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(v15 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::setSchedulingEnabled(re::ecs2::AnimationSceneManager **this, int a2, unint64_t a3)
{
  char *v4;

  v4 = (char *)(this + 2);
  if (a2)
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4, a3);
  else
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, a3);
  re::ecs2::AnimationSceneManager::updateScheduling(this[1]);
}

void re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::~AnimationScenesSchedulingDelegate(re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate *this)
{
  re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::~AnimationScenesSchedulingDelegate(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED5D6B0;
  v3 = (_QWORD *)((char *)this + 112);
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    if (*((_QWORD *)this + 18))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 18) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 34);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 8);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 16);
}

void re::ecs2::AnimationSceneManager::~AnimationSceneManager(re::ecs2::AnimationSceneManager *this)
{
  re::ecs2::AnimationSceneManager::~AnimationSceneManager(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t i;

  *(_QWORD *)this = &off_24ED5D700;
  if (*((_QWORD *)this + 35))
  {
    v2 = *((_QWORD *)this + 36);
    if (v2)
    {
      if ((*((_BYTE *)this + 296) & 1) != 0)
        v3 = (uint64_t *)((char *)this + 304);
      else
        v3 = (uint64_t *)*((_QWORD *)this + 39);
      v4 = 40 * v2;
      do
      {
        v3 = (uint64_t *)(std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](v3)
                       + 40);
        v4 -= 40;
      }
      while (v4);
    }
    v5 = *((_DWORD *)this + 74);
    if ((v5 & 1) == 0)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 35) + 40))(*((_QWORD *)this + 35), *((_QWORD *)this + 39));
      v5 = *((_DWORD *)this + 74);
    }
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = (v5 | 1) + 2;
  }
  v6 = *((_QWORD *)this + 31);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 208, i);
  }
  while (*((_QWORD *)this + 27))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 26);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 208);
  *((_QWORD *)this + 31) = 0;
  ++*((_DWORD *)this + 64);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 208);
  re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 20);
  re::ecs2::AnimationSceneManager::AnimationScenesSchedulingDelegate::~AnimationScenesSchedulingDelegate((re::ecs2::AnimationSceneManager *)((char *)this + 8));
}

uint64_t re::ecs2::AnimationSceneManager::taskOptions(re::ecs2::AnimationSceneManager *this)
{
  return (uint64_t)this + 264;
}

uint64_t re::ecs2::AnimationSceneManager::unregisterSystem(uint64_t this, re::ecs2::System *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(this + 248);
  if (v2)
  {
    v4 = this;
    v5 = 0;
    v6 = this + 208;
    while (1)
    {
      this = re::BucketArray<re::ecs2::System *,8ul>::operator[](v6, v5);
      if (*(re::ecs2::System **)this == a2)
        break;
      if (v2 == ++v5)
      {
        v5 = v2;
        break;
      }
    }
    v8 = *(_QWORD *)(v4 + 248);
    if (v5 != v8)
    {
      if (v8 <= v5)
      {
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 848, v5, v8);
        this = _os_crash();
        __break(1u);
      }
      else
      {
        v9 = v8 - 1;
        if (v8 - 1 > v5)
        {
          v10 = *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v9);
          *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v5) = v10;
          v9 = *(_QWORD *)(v4 + 248) - 1;
        }
        this = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, v9);
        --*(_QWORD *)(v4 + 248);
        ++*(_DWORD *)(v4 + 256);
      }
    }
  }
  return this;
}

double re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED5D788;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5D788;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t a1, re::AnimationManager **a2)
{
  return re::internal::destroyPersistent<re::AnimationManager>((re *)"operator()", 36, *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_16AnimationManagerEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

uint64_t re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  _BYTE v27[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v14, v13);
          v16 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v27[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              v22 += 64;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::ecs2::Scene const*,std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + (v10 << 6) + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + (v10 << 6) + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 16) = *a4;
  std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100]((_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 24), a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  result = *a1;
  if (a2 && !result)
  {
    result = re::DynamicOverflowArray<std::unique_ptr<re::AnimationManager,std::function<void ()(re::AnimationManager*)>>,4ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 4;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        v14 = a1[4];
        if ((v7 & 1) != 0)
          v15 = a1 + 3;
        else
          v15 = (_QWORD *)a1[4];
        if (v9)
        {
          v16 = 0;
          v17 = 40 * v9;
          do
          {
            std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](&a1[v16 / 8 + 3], &v15[v16 / 8]);
            std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](&v15[v16 / 8]);
            v16 += 40;
          }
          while (v17 != v16);
          result = *a1;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v14);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x28uLL))
      {
        v2 = 40 * a2;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 40 * a2, 8);
        if (result)
        {
          v11 = result;
          v12 = *((_DWORD *)a1 + 4);
          if ((v12 & 1) != 0)
            v13 = a1 + 3;
          else
            v13 = (uint64_t *)a1[4];
          v18 = a1[1];
          if (v18)
          {
            v19 = 40 * v18;
            v20 = (_QWORD *)result;
            do
            {
              std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](v20, v13);
              result = std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](v13);
              v13 += 5;
              v20 += 5;
              v19 -= 40;
            }
            while (v19);
            v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 40, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::System *,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 8 * (a2 & 7);
}

re::ecs2::TransformComponent *re::ecs2::TransformComponent::TransformComponent(re::ecs2::TransformComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[2];
  uint64_t v6;
  _BYTE v7[40];
  re::BindNode *v8[5];

  v8[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED5D818;
  *(_QWORD *)(v2 + 32) = 0x3F8000003F800000;
  *(_QWORD *)(v2 + 40) = 1065353216;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0x3F80000000000000;
  v3 = v2 + 88;
  *(_QWORD *)(v2 + 120) = 0;
  *(_BYTE *)(v2 + 128) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_QWORD *)(v2 + 200) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_DWORD *)(v2 + 112) = 0;
  re::makeEntityBindNodeForComponent((re *)v2, (uint64_t)v8);
  v5[0] = (uint64_t)"Transform.transform";
  v5[1] = 19;
  re::BindNode::bindPointWithOverride<re::GenericSRT<float>>(v8, v5, (uint64_t)&v6);
  *((_QWORD *)this + 10) = v6;
  re::DynamicArray<re::RigDataValue>::operator=(v3, (uint64_t)v7);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v7);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v7);
  re::BindNode::deinit((re::BindNode *)v8);
  return this;
}

void re::ecs2::TransformComponent::worldMatrix4x4F(re::ecs2::TransformComponent *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;

  if (*((_QWORD *)this + 2))
  {
    if (a2)
    {
      if (*((_BYTE *)this + 128))
        re::ecs2::TransformComponent::anchoredAnimatedWorldTransform((float32x4_t *)this, (float32x4_t *)a3);
      else
        re::ecs2::TransformComponent::deactivatedAnchoredAnimatedWorldTransform(*((_QWORD **)this + 2), (__int128 *)a3);
    }
    else
    {
      re::ecs2::TransformComponent::anchoredUnanimatedWorldTransform(*((uint64x2_t **)this + 2), (__int128 *)a3);
    }
  }
  else
  {
    v3 = *((float *)this + 12);
    v4 = *((float *)this + 13);
    v5 = v3 + v3;
    v6 = v4 + v4;
    v7 = *((float *)this + 14);
    v8 = *((float *)this + 15);
    v9 = v7 + v7;
    v10 = v3 * (float)(v3 + v3);
    v11 = v4 * (float)(v4 + v4);
    v12 = v7 * (float)(v7 + v7);
    v13 = v5 * v4;
    v14 = v5 * v7;
    v15 = v6 * v7;
    v16 = v5 * v8;
    v17 = v6 * v8;
    v18 = v9 * v8;
    v19.i32[3] = 0;
    v19.f32[0] = 1.0 - (float)(v11 + v12);
    v19.f32[1] = v13 + v18;
    v20.i32[3] = 0;
    v19.f32[2] = v14 - v17;
    v21.i32[3] = 0;
    v21.f32[0] = v13 - v18;
    v21.f32[1] = 1.0 - (float)(v10 + v12);
    v21.f32[2] = v15 + v16;
    v20.f32[0] = v14 + v17;
    v20.f32[1] = v15 - v16;
    v20.f32[2] = 1.0 - (float)(v10 + v11);
    v22 = *((float32x4_t *)this + 2);
    *(float32x4_t *)a3 = vmulq_n_f32(v19, v22.f32[0]);
    *(float32x4_t *)(a3 + 16) = vmulq_n_f32(v21, *(float *)vshrq_n_u64((uint64x2_t)v22, 0x20uLL).i32);
    v23 = *((_OWORD *)this + 4);
    HIDWORD(v23) = 1.0;
    *(float32x4_t *)(a3 + 32) = vmulq_laneq_f32(v20, v22, 2);
    *(_OWORD *)(a3 + 48) = v23;
  }
}

_QWORD *re::ecs2::TransformComponent::deactivatedAnchoredAnimatedWorldTransform@<X0>(_QWORD *result@<X0>, __int128 *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  float32x4_t *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float32x4_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v2 = xmmword_2260E5D70;
  v3 = xmmword_2260E5F40;
  v4 = xmmword_2260E5F20;
  v5 = xmmword_2260E5F10;
  while (result)
  {
    v6 = (float32x4_t *)result[30];
    if (v6)
    {
      v7 = 0;
      v8 = v6[3].f32[0];
      v9 = v6[3].f32[1];
      v10 = v6[3].f32[2];
      v11 = v6[3].f32[3];
      v12 = v6[2];
      v28 = v6[4];
      v13 = v8 + v8;
      v14 = v9 + v9;
      v15 = v8 * (float)(v8 + v8);
      v16 = v9 * (float)(v9 + v9);
      v17 = v10 * (float)(v10 + v10);
      v18 = v13 * v9;
      v19 = (float)(v10 + v10) * v11;
      v20.i32[3] = 0;
      v20.f32[0] = 1.0 - (float)(v16 + v17);
      v20.f32[1] = v18 + v19;
      v21 = v13 * v10;
      v22 = v14 * v10;
      v23 = v13 * v11;
      v24 = v14 * v11;
      v20.f32[2] = v21 - v24;
      v25.i32[3] = 0;
      v25.f32[0] = v18 - v19;
      v25.f32[1] = 1.0 - (float)(v15 + v17);
      v25.f32[2] = v22 + v23;
      v26.i32[3] = 0;
      v26.f32[0] = v21 + v24;
      v26.f32[1] = v22 - v23;
      v26.f32[2] = 1.0 - (float)(v15 + v16);
      v27 = vmulq_n_f32(v20, v12.f32[0]);
      v28.i32[3] = 1.0;
      v29 = vmulq_n_f32(v25, *(float *)vshrq_n_u64((uint64x2_t)v12, 0x20uLL).i32);
      v41 = v5;
      v42 = v4;
      v30 = vmulq_laneq_f32(v26, v12, 2);
      v43 = v3;
      v44 = v2;
      do
      {
        *(__int128 *)((char *)&v45 + v7) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*(__int128 *)((char *)&v41 + v7))), v29, *(float32x2_t *)((char *)&v41 + v7), 1), v30, *(float32x4_t *)((char *)&v41 + v7), 2), v28, *(float32x4_t *)((char *)&v41 + v7), 3);
        v7 += 16;
      }
      while (v7 != 64);
      v5 = v45;
      v4 = v46;
      v3 = v47;
      v2 = v48;
    }
    v31 = (float32x4_t *)result[16];
    if (v31)
    {
      v32 = 0;
      v33 = v31[3];
      v34 = v31[4];
      v35 = v31[5];
      v36 = v31[6];
      v41 = v5;
      v42 = v4;
      v43 = v3;
      v44 = v2;
      do
      {
        *(__int128 *)((char *)&v45 + v32) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(*(__int128 *)((char *)&v41 + v32))), v34, *(float32x2_t *)((char *)&v41 + v32), 1), v35, *(float32x4_t *)((char *)&v41 + v32), 2), v36, *(float32x4_t *)((char *)&v41 + v32), 3);
        v32 += 16;
      }
      while (v32 != 64);
      v37 = v46;
      v38 = v47;
      v39 = v48;
      *a2 = v45;
      a2[1] = v37;
      a2[2] = v38;
      a2[3] = v39;
    }
    else
    {
      v40 = result[3];
      if (v40)
      {
        if ((*(_BYTE *)(v40 + 288) & 0x80) != 0)
          result = 0;
        else
          result = (_QWORD *)result[3];
      }
      else
      {
        result = 0;
      }
    }
    if (v31)
      return result;
  }
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v3;
  a2[3] = v2;
  return result;
}

float32x4_t re::ecs2::TransformComponent::anchoredAnimatedWorldTransform@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t *v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t result;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _OWORD v19[4];
  _OWORD v20[4];

  v4 = re::ecs2::TransformComponent::unanchoredAnimatedWorldTransform(this);
  v5 = (float32x4_t *)this[8].i64[1];
  if (v5)
  {
    v6 = 0;
    result = v5[3];
    v8 = v5[4];
    v9 = v5[5];
    v10 = v5[6];
    v11 = v4[1];
    v12 = v4[2];
    v13 = v4[3];
    v19[0] = *v4;
    v19[1] = v11;
    v19[2] = v12;
    v19[3] = v13;
    do
    {
      v20[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(result, COERCE_FLOAT(v19[v6])), v8, *(float32x2_t *)&v19[v6], 1), v9, (float32x4_t)v19[v6], 2), v10, (float32x4_t)v19[v6], 3);
      ++v6;
    }
    while (v6 != 4);
    result.i64[0] = *(_QWORD *)&v20[0];
    v14 = (float32x4_t)v20[1];
    v15 = (float32x4_t)v20[2];
    v16 = (float32x4_t)v20[3];
    *a2 = (float32x4_t)v20[0];
    a2[1] = v14;
    a2[2] = v15;
    a2[3] = v16;
  }
  else
  {
    v17 = v4[1];
    *a2 = *v4;
    a2[1] = v17;
    result = v4[2];
    v18 = v4[3];
    a2[2] = result;
    a2[3] = v18;
  }
  return result;
}

uint64x2_t *re::ecs2::TransformComponent::anchoredUnanimatedWorldTransform@<X0>(uint64x2_t *this@<X0>, __int128 *a2@<X8>)
{
  uint64x2_t *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x4_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v3 = this;
  v5 = xmmword_2260E5D70;
  v6 = xmmword_2260E5F40;
  v7 = xmmword_2260E5F20;
  v8 = xmmword_2260E5F10;
  while (v3)
  {
    v9 = v3[15].i64[0];
    if (v9)
    {
      v46 = v6;
      v47 = v5;
      v44 = v8;
      v45 = v7;
      this = (uint64x2_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(v9 + 80));
      v10 = 0;
      v11 = *(float *)this[1].i32;
      v12 = *(float *)&this[1].i32[1];
      v13 = *(float *)&this[1].i32[2];
      v14 = *(float *)&this[1].i32[3];
      v15 = *(float32x4_t *)this;
      v31 = (float32x4_t)this[2];
      v16 = v11 + v11;
      v17 = v12 + v12;
      v18 = v11 * (float)(v11 + v11);
      v19 = v12 * (float)(v12 + v12);
      v20 = v13 * (float)(v13 + v13);
      v21 = v16 * v12;
      v22 = (float)(v13 + v13) * v14;
      v23.i32[3] = 0;
      v23.f32[0] = 1.0 - (float)(v19 + v20);
      v23.f32[1] = v21 + v22;
      v24 = v16 * v13;
      v25 = v17 * v13;
      v26 = v16 * v14;
      v27 = v17 * v14;
      v23.f32[2] = v24 - v27;
      v28.i32[3] = 0;
      v28.f32[0] = v21 - v22;
      v28.f32[1] = 1.0 - (float)(v18 + v20);
      v28.f32[2] = v25 + v26;
      v29.i32[3] = 0;
      v29.f32[0] = v24 + v27;
      v29.f32[1] = v25 - v26;
      v29.f32[2] = 1.0 - (float)(v18 + v19);
      v30 = vmulq_n_f32(v23, COERCE_FLOAT(*this));
      v31.i32[3] = 1.0;
      v32 = vmulq_n_f32(v28, *(float *)vshrq_n_u64(*this, 0x20uLL).i32);
      v48 = v44;
      v49 = v45;
      v33 = vmulq_laneq_f32(v29, v15, 2);
      v50 = v46;
      v51 = v47;
      do
      {
        *(__int128 *)((char *)&v52 + v10) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(__int128 *)((char *)&v48 + v10))), v32, *(float32x2_t *)((char *)&v48 + v10), 1), v33, *(float32x4_t *)((char *)&v48 + v10), 2), v31, *(float32x4_t *)((char *)&v48 + v10), 3);
        v10 += 16;
      }
      while (v10 != 64);
      v8 = v52;
      v7 = v53;
      v6 = v54;
      v5 = v55;
    }
    v34 = (float32x4_t *)v3[8].i64[0];
    if (v34)
    {
      v35 = 0;
      v36 = v34[3];
      v37 = v34[4];
      v38 = v34[5];
      v39 = v34[6];
      v48 = v8;
      v49 = v7;
      v50 = v6;
      v51 = v5;
      do
      {
        *(__int128 *)((char *)&v52 + v35) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, COERCE_FLOAT(*(__int128 *)((char *)&v48 + v35))), v37, *(float32x2_t *)((char *)&v48 + v35), 1), v38, *(float32x4_t *)((char *)&v48 + v35), 2), v39, *(float32x4_t *)((char *)&v48 + v35), 3);
        v35 += 16;
      }
      while (v35 != 64);
      v40 = v53;
      v41 = v54;
      v42 = v55;
      *a2 = v52;
      a2[1] = v40;
      a2[2] = v41;
      a2[3] = v42;
    }
    else
    {
      v43 = v3[1].i64[1];
      if (v43)
      {
        if ((*(_BYTE *)(v43 + 288) & 0x80) != 0)
          v3 = 0;
        else
          v3 = (uint64x2_t *)v3[1].i64[1];
      }
      else
      {
        v3 = 0;
      }
    }
    if (v34)
      return this;
  }
  *a2 = v8;
  a2[1] = v7;
  a2[2] = v6;
  a2[3] = v5;
  return this;
}

void re::ecs2::TransformComponent::parentWorldMatrix4x4F(re::ecs2::TransformComponent *this@<X0>, const re::ecs2::Entity *a2@<X1>, _OWORD *a3@<X8>)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  re::ecs2::TransformComponent **v8;

  if (!this)
  {
    *a3 = xmmword_2260E5F10;
    a3[1] = xmmword_2260E5F20;
    v5 = xmmword_2260E5F40;
    v6 = xmmword_2260E5D70;
    goto LABEL_5;
  }
  v3 = (_OWORD *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3[4];
    *a3 = v3[3];
    a3[1] = v4;
    v5 = v3[5];
    v6 = v3[6];
LABEL_5:
    a3[2] = v5;
    a3[3] = v6;
    return;
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 288) & 0x80) != 0)
      v8 = 0;
    else
      v8 = (re::ecs2::TransformComponent **)*((_QWORD *)this + 3);
  }
  else
  {
    v8 = 0;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(v8, a2, a3);
}

__n128 re::ecs2::TransformComponent::worldSRT@<Q0>(re::ecs2::TransformComponent **this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v4;
  BOOL v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  unsigned __int8 v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  __n128 result;
  __int128 v34;
  __n128 v35;
  float32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  __n128 v39;
  simd_float3x3 v40;

  re::ecs2::TransformComponent::worldMatrix4x4F(this, a2, &v36);
  v35 = v39;
  v4 = vmulq_f32(v36, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v38, v38, 0xCuLL), v38, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v37, (int8x16_t)v37, 0xCuLL), (int8x16_t)v37, 8uLL)));
  v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0] <= 0.0;
  v6 = -1.0;
  if (!v5)
    v6 = 1.0;
  v7 = vmulq_f32(v36, v36);
  v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
  v8.f32[0] = sqrtf(v8.f32[0]);
  v9 = vmulq_f32((float32x4_t)v37, (float32x4_t)v37);
  v10 = vmulq_f32((float32x4_t)v38, (float32x4_t)v38);
  v8.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v8.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v34 = (__int128)vmulq_n_f32(v8, v6);
  v11 = vdivq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34, 0));
  v12 = vdivq_f32((float32x4_t)v37, (float32x4_t)vdupq_lane_s32((int32x2_t)(v34 >> 32), 0));
  v13 = vdivq_f32((float32x4_t)v38, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2));
  v14 = (int32x4_t)vmulq_f32(v11, v11);
  v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
  *(float32x2_t *)v8.f32 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  *(float32x2_t *)v8.f32 = vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32)));
  v40.columns[0] = (simd_float3)vmulq_n_f32(v11, vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))).f32[0]);
  v15 = vmulq_f32((float32x4_t)v40.columns[0], v12);
  v16 = vmulq_f32((float32x4_t)v40.columns[0], (float32x4_t)v40.columns[0]);
  v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)));
  v18 = vsubq_f32(v12, vmulq_n_f32((float32x4_t)v40.columns[0], vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))), v17).f32[0]));
  v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  *(float32x2_t *)v9.f32 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  *(float32x2_t *)v9.f32 = vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32)));
  v19.i32[0] = vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32))).u32[0];
  v20 = vmulq_f32((float32x4_t)v40.columns[0], v13);
  v40.columns[1] = (simd_float3)vmulq_n_f32(v18, *(float *)v19.i32);
  v21 = vsubq_f32(v13, vmulq_n_f32((float32x4_t)v40.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]/ v17.f32[0]));
  v22 = vmulq_f32(v13, (float32x4_t)v40.columns[1]);
  v23 = vmulq_f32((float32x4_t)v40.columns[1], (float32x4_t)v40.columns[1]);
  v24 = vsubq_f32(v21, vmulq_n_f32((float32x4_t)v40.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]));
  v25 = (int32x4_t)vmulq_f32(v24, v24);
  v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v25.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)));
  v40.columns[2] = (simd_float3)vmulq_n_f32(v24, vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).f32[0]);
  *(double *)v26.i64 = simd_quaternion(v40);
  v27 = v26.i64[1];
  v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1);
  v29 = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v26, v28), (int8x16_t)vcgeq_f32(v28, v26)))).u8[0];
  *(int32x2_t *)v28.f32 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL));
  *(int8x8_t *)v28.f32 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v28.f32), (int8x8_t)vcgez_f32(*(float32x2_t *)v28.f32)));
  v30 = v29 | v28.i8[4] | v28.i8[0];
  v31 = (v30 & 1) == 0;
  if ((v30 & 1) != 0)
    v32 = 0;
  else
    v32 = v26.i64[0];
  *(_OWORD *)a3 = v34;
  if (!v31)
    v27 = 0x3F80000000000000;
  *(_QWORD *)(a3 + 16) = v32;
  *(_QWORD *)(a3 + 24) = v27;
  result = v35;
  *(__n128 *)(a3 + 32) = v35;
  return result;
}

double re::ecs2::TransformComponent::worldOrientation(re::ecs2::TransformComponent **this, const re::ecs2::Entity *a2)
{
  int32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  simd_float3x3 v21;

  re::ecs2::TransformComponent::worldMatrix4x4F(this, a2, &v18);
  v2 = (int32x4_t)vmulq_f32(v18, v18);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v21.columns[0] = (simd_float3)vmulq_n_f32(v18, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  v5 = vmulq_f32(v19, (float32x4_t)v21.columns[0]);
  v6 = vmulq_f32((float32x4_t)v21.columns[0], (float32x4_t)v21.columns[0]);
  v6.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0];
  v7 = vsubq_f32(v19, vmulq_n_f32((float32x4_t)v21.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]/ v6.f32[0]));
  v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  v8.i32[0] = vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).u32[0];
  v11 = vmulq_f32(v20, (float32x4_t)v21.columns[0]);
  v21.columns[1] = (simd_float3)vmulq_n_f32(v7, *(float *)v8.i32);
  v12 = vsubq_f32(v20, vmulq_n_f32((float32x4_t)v21.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]/ v6.f32[0]));
  v13 = vmulq_f32(v20, (float32x4_t)v21.columns[1]);
  v14 = vmulq_f32((float32x4_t)v21.columns[1], (float32x4_t)v21.columns[1]);
  v15 = vsubq_f32(v12, vmulq_n_f32((float32x4_t)v21.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]));
  v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1))).u32[0];
  *(float32x2_t *)v14.f32 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  *(float32x2_t *)v14.f32 = vmul_f32(*(float32x2_t *)v14.f32, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32)));
  v21.columns[2] = (simd_float3)vmulq_n_f32(v15, vmul_f32(*(float32x2_t *)v14.f32, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32))).f32[0]);
  return simd_quaternion(v21);
}

double re::ecs2::TransformComponent::worldScale(re::ecs2::TransformComponent **this, const re::ecs2::Entity *a2)
{
  float32x4_t v2;
  BOOL v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;

  re::ecs2::TransformComponent::worldMatrix4x4F(this, a2, &v10);
  v2 = vmulq_f32(v10, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v12, v12, 0xCuLL), v12, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v11, (int8x16_t)v11, 0xCuLL), (int8x16_t)v11, 8uLL)));
  v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] <= 0.0;
  v4 = -1.0;
  if (!v3)
    v4 = 1.0;
  v5 = vmulq_f32(v10, v10);
  v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)));
  v7 = vmulq_f32((float32x4_t)v11, (float32x4_t)v11);
  v6.f32[0] = sqrtf(v6.f32[0]);
  v8 = vmulq_f32((float32x4_t)v12, (float32x4_t)v12);
  v6.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
  v6.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
  *(_QWORD *)&result = vmulq_n_f32(v6, v4).u64[0];
  return result;
}

void re::ecs2::TransformComponent::setWorldSRT(uint64_t a1, uint64_t a2, re::ecs2::Entity *a3)
{
  re::ecs2::TransformComponent *v5;
  char v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  BOOL v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v31;
  __int128 v32;
  float32x4_t v33;
  int8x16_t v35;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  simd_float4x4 v54;
  simd_float3x3 v55;
  simd_float4x4 v56;

  v5 = *(re::ecs2::TransformComponent **)(a1 + 16);
  if (v5)
  {
    v6 = (char)a3;
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v5, a3, &v54);
    v56 = __invert_f4(v54);
    v8 = (float32x4_t)v56.columns[0];
    v9 = (float32x4_t)v56.columns[1];
    v10 = (float32x4_t)v56.columns[2];
    v47 = (float32x4_t)v56.columns[3];
    v56.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v56.columns[0], vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v10, (int8x16_t)v10, 0xCuLL), (int8x16_t)v10, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56.columns[2], (int32x4_t)v56.columns[2]), (int8x16_t)v56.columns[2], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(
                                                       (int8x16_t)v56.columns[1],
                                                       (int8x16_t)v56.columns[1],
                                                       0xCuLL),
                                                     (int8x16_t)v56.columns[1],
                                                     8uLL)));
    v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56.columns[0], 2), vaddq_f32((float32x4_t)v56.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.columns[0].f32, 1))).f32[0] <= 0.0;
    v12 = -1.0;
    if (!v11)
      v12 = 1.0;
    v13 = vmulq_f32(v8, v8);
    v13.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u32[0];
    v14 = vmulq_f32(v9, v9);
    v7.f32[0] = sqrtf(v13.f32[0]);
    v15 = vmulq_f32(v10, v10);
    v7.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
    v7.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]);
    v45 = *(float32x4_t *)a2;
    v46 = vmulq_n_f32(v7, v12);
    v16 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v16, v16)));
    v50 = v9;
    v52 = v8;
    v55.columns[0] = (simd_float3)vmulq_n_f32(v8, vmul_f32(v17, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v17, v17))).f32[0]);
    v18 = vmulq_f32(v9, (float32x4_t)v55.columns[0]);
    v19 = vmulq_f32((float32x4_t)v55.columns[0], (float32x4_t)v55.columns[0]);
    v19.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
    v20 = vsubq_f32(v9, vmulq_n_f32((float32x4_t)v55.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]/ v19.f32[0]));
    v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
    v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
    v21.i32[0] = vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).u32[0];
    v24 = vmulq_f32(v10, (float32x4_t)v55.columns[0]);
    v55.columns[1] = (simd_float3)vmulq_n_f32(v20, *(float *)v21.i32);
    v25 = vsubq_f32(v10, vmulq_n_f32((float32x4_t)v55.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]/ v19.f32[0]));
    v48 = v10;
    v26 = vmulq_f32(v10, (float32x4_t)v55.columns[1]);
    v27 = vmulq_f32((float32x4_t)v55.columns[1], (float32x4_t)v55.columns[1]);
    v28 = vsubq_f32(v25, vmulq_n_f32((float32x4_t)v55.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]));
    v29 = (int32x4_t)vmulq_f32(v28, v28);
    v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
    *(float32x2_t *)v27.f32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32)));
    v55.columns[2] = (simd_float3)vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32))).f32[0]);
    *(double *)_Q0.i64 = simd_quaternion(v55);
    v33 = vmulq_f32(v45, v46);
    _Q2 = *(float32x4_t *)(a2 + 16);
    v35 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL), vnegq_f32(_Q0)), _Q2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    v41 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL), _Q2, _Q0, 3), _Q0, _Q2, 3);
    _Q2.i32[0] = _Q2.i32[3];
    __asm { FMLA            S1, S2, V0.S[3] }
    v41.i32[3] = _S1;
    v42 = vaddq_f32(v47, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(_OWORD *)(a2 + 32))), v50, *(float32x2_t *)(a2 + 32), 1), v48, *(float32x4_t *)(a2 + 32), 2));
    v43 = vdivq_f32(v42, (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 3));
    if ((v6 & 1) != 0 || !*(_QWORD *)(a1 + 16))
    {
      *(float32x4_t *)(a1 + 32) = v33;
      *(float32x4_t *)(a1 + 48) = v41;
      *(float32x4_t *)(a1 + 64) = v43;
    }
    else
    {
      v49 = v43;
      v51 = v41;
      v53 = v33;
      v44 = (float32x4_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      if (v44)
      {
        *v44 = v53;
        v44[1] = v51;
        v44[2] = v49;
      }
    }
  }
  else
  {
    v31 = *(float32x4_t *)a2;
    v32 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 64) = v32;
    *(float32x4_t *)(a1 + 32) = v31;
  }
}

void re::ecs2::TransformComponent::setWorldPosition(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::TransformComponent *v3;
  float32x4_t v4;
  float32x4_t *v5;
  float32x4_t v6;
  simd_float4x4 v7;
  simd_float4x4 v8;

  v3 = (re::ecs2::TransformComponent *)a1[2];
  if (v3)
  {
    v4.i64[0] = a2;
    v4.i64[1] = a3;
    v6 = v4;
    v5 = (float32x4_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 10));
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v3, 0, &v7);
    v8 = __invert_f4(v7);
    v8.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v8.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v8.columns[0], v6.f32[0]), (float32x4_t)v8.columns[1], *(float32x2_t *)v6.f32, 1), (float32x4_t)v8.columns[2], v6, 2));
    v5[2] = vdivq_f32((float32x4_t)v8.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v8.columns[0], 3));
  }
  else
  {
    a1[8] = a2;
    a1[9] = a3;
  }
}

void re::ecs2::TransformComponent::setWorldOrientation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::TransformComponent *v3;
  float32x4_t v4;
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v22;
  simd_float4x4 v23;
  simd_float4x4 v24;

  v3 = (re::ecs2::TransformComponent *)a1[2];
  if (v3)
  {
    v4.i64[0] = a2;
    v4.i64[1] = a3;
    v22 = v4;
    v5 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 10));
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v3, 0, &v23);
    v24 = __invert_f4(v23);
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[0], (float32x4_t)v24.columns[0]);
    v24.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vadd_f32(*(float32x2_t *)v24.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).u32[0];
    v6 = vrsqrte_f32((float32x2_t)v24.columns[3].u32[0]);
    v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v6, v6)));
    v24.columns[0] = (simd_float4)vmulq_n_f32((float32x4_t)v24.columns[0], vmul_f32(v7, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v7, v7))).f32[0]);
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[1], (float32x4_t)v24.columns[0]);
    v8 = vmulq_f32((float32x4_t)v24.columns[0], (float32x4_t)v24.columns[0]);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    v24.columns[1] = (simd_float4)vsubq_f32((float32x4_t)v24.columns[1], vmulq_n_f32((float32x4_t)v24.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vaddq_f32((float32x4_t)v24.columns[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).f32[0]/ v8.f32[0]));
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[1], (float32x4_t)v24.columns[1]);
    v24.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vadd_f32(*(float32x2_t *)v24.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).u32[0];
    v9 = vrsqrte_f32((float32x2_t)v24.columns[3].u32[0]);
    v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v9, v9)));
    v24.columns[3].i32[0] = vmul_f32(v10, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(v10, v10))).u32[0];
    v11 = vmulq_f32((float32x4_t)v24.columns[2], (float32x4_t)v24.columns[0]);
    v24.columns[1] = (simd_float4)vmulq_n_f32((float32x4_t)v24.columns[1], v24.columns[3].f32[0]);
    v24.columns[3] = (simd_float4)vsubq_f32((float32x4_t)v24.columns[2], vmulq_n_f32((float32x4_t)v24.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]/ v8.f32[0]));
    v24.columns[2] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[2], (float32x4_t)v24.columns[1]);
    v12 = vmulq_f32((float32x4_t)v24.columns[1], (float32x4_t)v24.columns[1]);
    v24.columns[2] = (simd_float4)vsubq_f32((float32x4_t)v24.columns[3], vmulq_n_f32((float32x4_t)v24.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24.columns[2], 2), vaddq_f32((float32x4_t)v24.columns[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.columns[2].f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]));
    v24.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v24.columns[2], (float32x4_t)v24.columns[2]);
    v24.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v24.columns[3], 2), vadd_f32(*(float32x2_t *)v24.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.columns[3].f32, 1))).u32[0];
    *(float32x2_t *)v12.f32 = vrsqrte_f32((float32x2_t)v24.columns[3].u32[0]);
    *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32)));
    v24.columns[2] = (simd_float4)vmulq_n_f32((float32x4_t)v24.columns[2], vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v24.columns[3].u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32))).f32[0]);
    *(double *)_Q0.i64 = simd_quaternion(*(simd_float3x3 *)v24.columns[0].f32);
    _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), vnegq_f32(_Q0)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    v15 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), v22, _Q0, 3);
    _Q2.i32[0] = v22.i32[3];
    v16 = vmlaq_laneq_f32(v15, _Q0, v22, 3);
    __asm { FMLA            S3, S2, V0.S[3] }
    v16.i32[3] = _S3;
    *(float32x4_t *)(v5 + 16) = v16;
  }
  else
  {
    a1[6] = a2;
    a1[7] = a3;
  }
}

void re::ecs2::TransformComponent::setWorldScale(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::TransformComponent *v3;
  float32x4_t v4;
  float32x4_t *v5;
  BOOL v6;
  simd_float4x4 v7;
  float32x4_t v8;
  simd_float4x4 v9;

  v3 = (re::ecs2::TransformComponent *)a1[2];
  if (v3)
  {
    v4.i64[0] = a2;
    v4.i64[1] = a3;
    v8 = v4;
    v5 = (float32x4_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 10));
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v3, 0, &v9);
    v7 = __invert_f4(v9);
    v7.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[0], vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7.columns[2], (int8x16_t)v7.columns[2], 0xCuLL), (int8x16_t)v7.columns[2], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[1], (int32x4_t)v7.columns[1]), (int8x16_t)v7.columns[1], 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7.columns[2],
                                                                 (int32x4_t)v7.columns[2]),
                                                    (int8x16_t)v7.columns[2],
                                                    0xCuLL),
                                     (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7.columns[1], (int8x16_t)v7.columns[1], 0xCuLL), (int8x16_t)v7.columns[1], 8uLL)));
    v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[3], 2), vaddq_f32((float32x4_t)v7.columns[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[3].f32, 1))).f32[0] <= 0.0;
    v7.columns[3].i32[0] = -1.0;
    if (!v6)
      v7.columns[3].f32[0] = 1.0;
    v7.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[0], (float32x4_t)v7.columns[0]);
    v7.columns[0] = (simd_float4)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[0], 2), vaddq_f32((float32x4_t)v7.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[0].f32, 1)));
    v7.columns[0].f32[0] = sqrtf(v7.columns[0].f32[0]);
    v7.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[1], (float32x4_t)v7.columns[1]);
    v7.columns[2] = (simd_float4)vmulq_f32((float32x4_t)v7.columns[2], (float32x4_t)v7.columns[2]);
    v7.columns[0].i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[1], 2), vaddq_f32((float32x4_t)v7.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[1].f32, 1))).f32[0]);
    v7.columns[0].i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7.columns[2], 2), vaddq_f32((float32x4_t)v7.columns[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.columns[2].f32, 1))).f32[0]);
    *v5 = vmulq_f32(vmulq_n_f32((float32x4_t)v7.columns[0], v7.columns[3].f32[0]), v8);
  }
  else
  {
    a1[4] = a2;
    a1[5] = a3;
  }
}

void re::ecs2::TransformComponent::worldMatrix4x4F(re::ecs2::TransformComponent **this@<X0>, const re::ecs2::Entity *a2@<X1>, _OWORD *a3@<X8>)
{
  re::ecs2::TransformComponent *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (this)
  {
    while (1)
    {
      if (this[30])
      {
        re::ecs2::TransformComponent::worldMatrix4x4F(this[30], (int)a2, (uint64_t)a3);
        return;
      }
      v3 = this[16];
      if (v3)
        break;
      this = (re::ecs2::TransformComponent **)this[3];
      if (!this || ((_BYTE)this[36] & 0x80) != 0)
        goto LABEL_6;
    }
    v6 = *((_OWORD *)v3 + 4);
    *a3 = *((_OWORD *)v3 + 3);
    a3[1] = v6;
    v4 = *((_OWORD *)v3 + 5);
    v5 = *((_OWORD *)v3 + 6);
  }
  else
  {
LABEL_6:
    *a3 = xmmword_2260E5F10;
    a3[1] = xmmword_2260E5F20;
    v4 = xmmword_2260E5F40;
    v5 = xmmword_2260E5D70;
  }
  a3[2] = v4;
  a3[3] = v5;
}

uint64_t re::ecs2::TransformComponent::makeSyncInfo(re::ecs2::TransformComponent *this)
{
  uint64_t v1;

  v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  return v1;
}

BOOL ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke()
{
  return re::SRTNetworkSyncHelper::readSnapshot();
}

void ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_2()
{
  JUMPOUT(0x227691F24);
}

uint64_t ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((RESyncObjectReadContextIsLocalSession() & 1) == 0)
    return re::SRTNetworkSyncHelper::read(a2, a3);
  v5 = RESyncBitReaderDataPtr();
  v6 = RESyncBitReaderBytesLeft();
  RESyncBitReaderSkipData();
  MEMORY[0x227691F24](a3, v5, v6);
  return 1;
}

uint64_t ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if ((RESyncObjectReadContextIsLocalSession() & 1) == 0)
    return re::SRTNetworkSyncHelper::readDelta(a2, a3, a4);
  v7 = RESyncBitReaderDataPtr();
  v8 = RESyncBitReaderBytesLeft();
  RESyncBitReaderSkipData();
  MEMORY[0x227691F24](a4, v7, v8);
  return 1;
}

BOOL ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((RESyncObjectWriteContextIsLocalSession() & 1) != 0)
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x227691F24);
  }
  return re::SRTNetworkSyncHelper::write(a2, a3);
}

BOOL ___ZN2re4ecs218TransformComponent12makeSyncInfoEv_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((RESyncObjectWriteContextIsLocalSession() & 1) != 0)
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x227691F24);
  }
  return re::SRTNetworkSyncHelper::writeDelta(a2, a3, a4);
}

float32x4_t *re::ecs2::TransformComponent::unanchoredAnimatedWorldTransform(float32x4_t *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  re::ecs2::TransformComponent *v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  _OWORD v38[4];
  _OWORD v39[4];

  if (this[8].i8[0] == 1)
  {
    v2 = this[3].f32[0];
    v3 = this[3].f32[1];
    v4 = v2 + v2;
    v5 = v3 + v3;
    v6 = this[3].f32[2];
    v7 = this[3].f32[3];
    v8 = v6 + v6;
    v9 = v2 * (float)(v2 + v2);
    v10 = v3 * (float)(v3 + v3);
    v11 = v6 * (float)(v6 + v6);
    v12 = v4 * v3;
    v13 = v4 * v6;
    v14 = v5 * v6;
    v15 = v4 * v7;
    v16 = v5 * v7;
    v17 = v8 * v7;
    v18.i32[3] = 0;
    v18.f32[0] = 1.0 - (float)(v10 + v11);
    v18.f32[1] = v12 + v17;
    v18.f32[2] = v13 - v16;
    v19.i32[3] = 0;
    v20.i32[3] = 0;
    v20.f32[0] = v12 - v17;
    v20.f32[1] = 1.0 - (float)(v9 + v11);
    v20.f32[2] = v14 + v15;
    v19.f32[0] = v13 + v16;
    v19.f32[1] = v14 - v15;
    v19.f32[2] = 1.0 - (float)(v9 + v10);
    v21 = this[2];
    v22 = this[4];
    v22.i32[3] = 1.0;
    this[9] = vmulq_n_f32(v18, v21.f32[0]);
    this[10] = vmulq_n_f32(v20, *(float *)vshrq_n_u64((uint64x2_t)v21, 0x20uLL).i32);
    this[11] = vmulq_laneq_f32(v19, v21, 2);
    this[12] = v22;
    v23 = this[1].i64[0];
    while (!*(_QWORD *)(v23 + 128))
    {
      v23 = *(_QWORD *)(v23 + 24);
      if (!v23 || (*(_BYTE *)(v23 + 288) & 0x80) != 0)
        break;
      v24 = *(re::ecs2::TransformComponent **)(v23 + 240);
      if (v24)
      {
        v25 = (float32x4_t *)re::ecs2::TransformComponent::unanchoredAnimatedWorldTransform(v24);
        v26 = 0;
        v27 = *v25;
        v28 = v25[1];
        v29 = v25[2];
        v30 = v25[3];
        v31 = this[10];
        v32 = this[11];
        v33 = this[12];
        v38[0] = this[9];
        v38[1] = v31;
        v38[2] = v32;
        v38[3] = v33;
        do
        {
          v39[v26] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(v38[v26])), v28, *(float32x2_t *)&v38[v26], 1), v29, (float32x4_t)v38[v26], 2), v30, (float32x4_t)v38[v26], 3);
          ++v26;
        }
        while (v26 != 4);
        v34 = (float32x4_t)v39[1];
        v35 = (float32x4_t)v39[2];
        v36 = (float32x4_t)v39[3];
        this[9] = (float32x4_t)v39[0];
        this[10] = v34;
        this[11] = v35;
        this[12] = v36;
        break;
      }
    }
    this[8].i8[0] = 2;
  }
  return this + 9;
}

_anonymous_namespace_ *re::ecs2::TransformSystem::willAddSceneToECSService(_anonymous_namespace_ *this, re::EventBus **a2, const re::ecs2::AnchorComponent *a3)
{
  re::EventBus *v3;
  _anonymous_namespace_ *v4;
  re::EventBus *v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *Type;
  re *EventInfo;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  re *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[2];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  re::ecs2::Scene *v58;
  uint64_t (**v59)();
  void *v60;
  uint64_t v61;
  uint64_t (***v62)();
  uint64_t (**v63[6])();
  uint64_t v64;
  uint64_t (***v65)();
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v58 = (re::ecs2::Scene *)a2;
  v3 = a2[36];
  if (v3)
  {
    v4 = this;
    v5 = a2[13];
    v6 = *((_QWORD *)v5 + 41);
    if (v6)
    {
      v7 = (_QWORD **)*((_QWORD *)v5 + 43);
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        this = (_anonymous_namespace_ *)re::ecs2::TransformSystem::activateEntityHierarchyTransformState(v9, 0, a3);
        v8 -= 8;
      }
      while (v8);
    }
    v52[0] = 0;
    v52[1] = 0;
    v53 = 1;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    v57 = 0;
    v10 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::newAnchorComponentHandler, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v12 = v11;
    v13 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v13 = v10;
    v13[1] = v12;
    v14 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::removedAnchorComponentHandler, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v16 = v15;
    v17 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v17 = v14;
    v17[1] = v16;
    v18 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::newTransformComponentHandler, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v20 = v19;
    v21 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v21 = v18;
    v21[1] = v20;
    Type = re::EventBus::getTypeId<RESceneEntityDidAddEvent>();
    EventInfo = (re *)re::EventBus::addOrGetEventInfo(v3, (uint64_t)Type);
    v24 = re::globalAllocators(EventInfo)[2];
    v59 = &off_24ED5DB50;
    v60 = re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidAddEvent>;
    v61 = v24;
    v62 = &v59;
    re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>((uint64_t)&v59, 0, v63);
    v25 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v63, 0, 0);
    v27 = v26;
    if (v65)
    {
      ((void (*)(uint64_t (***)()))**v65)(v65);
      if (v65 != v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
      v65 = 0;
    }
    if (v62)
    {
      ((void (*)(uint64_t (***)()))**v62)(v62);
      if (v62 != &v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
    }
    v28 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v28 = v25;
    v28[1] = v27;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidReparentEvent>, 0, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v32 = v29;
    v32[1] = v31;
    v33 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentDidChangeEvent>, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v35 = v34;
    v36 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v36 = v33;
    v36[1] = v35;
    v37 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentDidChangeEvent>, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v39 = v38;
    v40 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v40 = v37;
    v40[1] = v39;
    v41 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, 0, (uint64_t)re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentWillRemoveEvent>, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v43 = v42;
    v44 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v44 = v41;
    v44[1] = v43;
    v45 = re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>();
    v46 = (re *)re::EventBus::addOrGetEventInfo(v3, v45);
    v47 = re::globalAllocators(v46)[2];
    v59 = &off_24ED5DC00;
    v60 = re::ecs2::TransformSystem::removeSceneEntityHandler;
    v61 = v47;
    v62 = &v59;
    re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>((uint64_t)&v59, 0, v63);
    v48 = re::EventBus::EventInfo::addSubscription((unint64_t)v46, (uint64_t)v63, 0, 0);
    v50 = v49;
    if (v65)
    {
      ((void (*)(uint64_t (***)()))**v65)(v65);
      if (v65 != v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
      v65 = 0;
    }
    if (v62)
    {
      ((void (*)(uint64_t (***)()))**v62)(v62);
      if (v62 != &v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
    }
    v51 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v52);
    *v51 = v48;
    v51[1] = v50;
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)v4 + 104, (uint64_t *)&v58, (uint64_t)v52);
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v52);
    this = (_anonymous_namespace_ *)v52[0];
    if (v52[0])
    {
      if ((v53 & 1) == 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v52[0] + 40))();
    }
  }
  return this;
}

_QWORD *re::ecs2::TransformSystem::activateEntityHierarchyTransformState(_QWORD *result, re::ecs2::Entity *a2, const re::ecs2::AnchorComponent *a3)
{
  uint64_t v4;
  uint64_t v5;
  re::ecs2::TransformSystem **v6;
  uint64_t v7;
  re::ecs2::TransformSystem *v8;

  if (result[16])
    a2 = (re::ecs2::Entity *)result[16];
  v4 = result[30];
  if (v4)
  {
    *(_QWORD *)(v4 + 136) = a2;
    *(_BYTE *)(v4 + 128) = 1;
  }
  v5 = result[41];
  if (v5)
  {
    v6 = (re::ecs2::TransformSystem **)result[43];
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = (_QWORD *)re::ecs2::TransformSystem::activateEntityHierarchyTransformState(v8, a2, a3);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t re::ecs2::TransformSystem::newAnchorComponentHandler(uint64_t a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent((_QWORD *)a1, *(re::ecs2::Entity **)(a1 + 128), a3);
  return 0;
}

uint64_t re::ecs2::TransformSystem::removedAnchorComponentHandler(_QWORD *a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  uint64_t i;
  re::ecs2::Entity *v4;

  for (i = a1[3]; i; i = *(_QWORD *)(i + 24))
  {
    if ((*(_BYTE *)(i + 288) & 0x80) != 0)
      break;
    v4 = *(re::ecs2::Entity **)(i + 128);
    if (v4)
      goto LABEL_6;
  }
  v4 = 0;
LABEL_6:
  re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(a1, v4, a3);
  return 0;
}

uint64_t re::ecs2::TransformSystem::newTransformComponentHandler(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _anonymous_namespace_ **v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;

  if (a1)
  {
    v1 = a1;
    while (1)
    {
      v2 = v1[16];
      if (v2)
        break;
      v1 = (_QWORD *)v1[3];
      if (!v1 || (v1[36] & 0x80) != 0)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v2 = 0;
  }
  v3 = a1[30];
  *(_QWORD *)(v3 + 136) = v2;
  *(_BYTE *)(v3 + 128) = 1;
  v4 = a1[41];
  if (v4)
  {
    v5 = (_anonymous_namespace_ **)a1[43];
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      re::ecs2::TransformSystem::updateEntityHierarchyTransformDirtyState(v7);
      v6 -= 8;
    }
    while (v6);
  }
  return 0;
}

uint64_t re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidAddEvent>(_QWORD *a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  _QWORD *v3;
  re::ecs2::Entity *v4;

  if (a1)
  {
    v3 = a1;
    while (1)
    {
      v4 = (re::ecs2::Entity *)v3[16];
      if (v4)
        break;
      v3 = (_QWORD *)v3[3];
      if (!v3 || (v3[36] & 0x80) != 0)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v4 = 0;
  }
  re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(a1, v4, a3);
  return 0;
}

uint64_t re::ecs2::TransformSystem::entityHierarchyChangedHandler<RESceneEntityDidReparentEvent>(_QWORD *a1, uint64_t a2, const re::ecs2::AnchorComponent *a3)
{
  _QWORD *v3;
  re::ecs2::Entity *v4;

  if (a1)
  {
    v3 = a1;
    while (1)
    {
      v4 = (re::ecs2::Entity *)v3[16];
      if (v4)
        break;
      v3 = (_QWORD *)v3[3];
      if (!v3 || (v3[36] & 0x80) != 0)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v4 = 0;
  }
  re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(a1, v4, a3);
  return 0;
}

uint64_t re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentDidChangeEvent>(_anonymous_namespace_ *a1)
{
  re::ecs2::TransformSystem::updateEntityHierarchyTransformDirtyState(a1);
  return 0;
}

uint64_t re::ecs2::TransformSystem::invalidateEntityUnanchoredTransformHierarchy<REComponentWillRemoveEvent>(_anonymous_namespace_ *a1)
{
  re::ecs2::TransformSystem::updateEntityHierarchyTransformDirtyState(a1);
  return 0;
}

uint64_t re::ecs2::TransformSystem::removeSceneEntityHandler(_QWORD *a1, re::ecs2::Entity *a2)
{
  re::ecs2::TransformSystem::deactivateEntityHierarchyTransformState(a1, a2);
  return 0;
}

uint64_t re::ecs2::TransformSystem::willRemoveSceneFromECSService(re::ecs2::TransformSystem *this, re::ecs2::Scene *a2)
{
  char *v2;
  uint64_t result;
  re::ecs2::Entity *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v2 = (char *)this + 104;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v16);
  if (result)
  {
    v5 = (uint64_t)v16;
    v6 = *((_QWORD *)v16 + 36);
    if (v6)
    {
      v7 = result;
      v8 = *(_QWORD *)(result + 40);
      if (v8)
      {
        for (i = 0; i != v8; ++i)
        {
          v10 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v7, i);
          re::EventBus::unsubscribe(v6, *(_QWORD *)v10, *(_QWORD *)(v10 + 8));
        }
        v5 = (uint64_t)v16;
      }
    }
    v11 = *(_QWORD *)(v5 + 104);
    v12 = *(_QWORD *)(v11 + 328);
    if (v12)
    {
      v13 = *(_QWORD ***)(v11 + 344);
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        re::ecs2::TransformSystem::deactivateEntityHierarchyTransformState(v15, v4);
        v14 -= 8;
      }
      while (v14);
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v2, (uint64_t *)&v16);
  }
  return result;
}

_QWORD *re::ecs2::TransformSystem::deactivateEntityHierarchyTransformState(_QWORD *result, re::ecs2::Entity *a2)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::TransformSystem **v4;
  uint64_t v5;
  re::ecs2::TransformSystem *v6;

  v2 = result[30];
  if (v2)
  {
    *(_BYTE *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
  }
  v3 = result[41];
  if (v3)
  {
    v4 = (re::ecs2::TransformSystem **)result[43];
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      result = (_QWORD *)re::ecs2::TransformSystem::deactivateEntityHierarchyTransformState(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

_QWORD *re::ecs2::TransformSystem::updateEntityHierarchyRootAnchorComponent(_QWORD *this, re::ecs2::Entity *a2, const re::ecs2::AnchorComponent *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v4 = this;
  v5 = this[30];
  if (v5)
  {
    if (!*(_BYTE *)(v5 + 128))
      return this;
    *(_QWORD *)(v5 + 136) = a2;
    *(_BYTE *)(v5 + 128) = 1;
  }
  v17[0] = 0;
  v17[1] = 0;
  v18 = 1;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = 0;
  v6 = v4[41];
  if (v6)
  {
    v7 = (uint64_t *)v4[43];
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v17) = v9;
      v8 -= 8;
    }
    while (v8);
  }
  v10 = v21;
  while (v10)
  {
    v11 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v17, v10 - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v17, v21 - 1);
    v10 = --v21;
    ++v22;
    if (!v11[16])
    {
      v12 = v11[30];
      if (v12)
      {
        *(_QWORD *)(v12 + 136) = a2;
        *(_BYTE *)(v12 + 128) = 1;
      }
      v13 = v11[41];
      if (v13)
      {
        v14 = (uint64_t *)v11[43];
        v15 = 8 * v13;
        do
        {
          v16 = *v14++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v17) = v16;
          v15 -= 8;
        }
        while (v15);
        v10 = v21;
      }
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v17);
  this = (_QWORD *)v17[0];
  if (v17[0])
  {
    if ((v18 & 1) == 0)
      return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v17[0] + 40))();
  }
  return this;
}

_anonymous_namespace_ *re::ecs2::TransformSystem::updateEntityHierarchyTransformDirtyState(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v1 = result;
  v2 = *((_QWORD *)result + 30);
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 128) < 2u)
      return result;
    *(_BYTE *)(v2 + 128) = 1;
  }
  v14[0] = 0;
  v14[1] = 0;
  v15 = 1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = 0;
  v3 = *((_QWORD *)v1 + 41);
  if (v3)
  {
    v4 = (uint64_t *)*((_QWORD *)v1 + 43);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v14) = v6;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = v18;
  if (v18)
  {
    while (1)
    {
      v8 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v14, v7 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v14, v18 - 1);
      v7 = --v18;
      ++v19;
      if (!v8[16])
      {
        v9 = v8[30];
        if (!v9)
          goto LABEL_12;
        if (*(unsigned __int8 *)(v9 + 128) >= 2u)
          break;
      }
LABEL_16:
      if (!v7)
        goto LABEL_17;
    }
    *(_BYTE *)(v9 + 128) = 1;
LABEL_12:
    v10 = v8[41];
    if (v10)
    {
      v11 = (uint64_t *)v8[43];
      v12 = 8 * v10;
      do
      {
        v13 = *v11++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v14) = v13;
        v12 -= 8;
      }
      while (v12);
      v7 = v18;
    }
    goto LABEL_16;
  }
LABEL_17:
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v14);
  result = (_anonymous_namespace_ *)v14[0];
  if (v14[0])
  {
    if ((v15 & 1) == 0)
      return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 40))();
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_TransformComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_190);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_190))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B2C8, 0);
    *(uint64_t *)((char *)&qword_25410B2D8 + 6) = 0;
    qword_25410B2D8 = 0;
    qword_25410B2E8 = 0;
    qword_25410B2F0 = 0xFFFFFFFFLL;
    qword_25410B2C8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B2F8 = (uint64_t)"TransformComponent";
    dword_25410B300 = 0;
    xmmword_25410B308 = 0u;
    unk_25410B318 = 0u;
    xmmword_25410B328 = 0u;
    qword_25410B338 = 0;
    __cxa_guard_release(&_MergedGlobals_190);
  }
  return &qword_25410B2C8;
}

void re::ecs2::initInfo_TransformComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x74A840394154E22;
  v15[1] = "TransformComponent";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B2A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B2A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B2B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_SRT((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "transform";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410B2B8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 8, 4);
      *v13 = 0x100000004;
      qword_25410B2C0 = (uint64_t)v13;
      __cxa_guard_release(&qword_25410B2A0);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410B2B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::TransformComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::TransformComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TransformComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TransformComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

re::ecs2::TransformComponent *re::internal::defaultConstruct<re::ecs2::TransformComponent>(int a1, int a2, re::ecs2::TransformComponent *this)
{
  return re::ecs2::TransformComponent::TransformComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::TransformComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TransformComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_TransformComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TransformComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TransformComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TransformComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TransformComponent>, this);
}

uint64_t *re::ecs2::allocInfo_TransformSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B2A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B2A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B340, 0);
    *(uint64_t *)((char *)&qword_25410B350 + 6) = 0;
    qword_25410B350 = 0;
    qword_25410B360 = 0;
    qword_25410B368 = 0xFFFFFFFFLL;
    qword_25410B340 = (uint64_t)&off_24ED7DAA8;
    qword_25410B370 = (uint64_t)"TransformSystem";
    dword_25410B378 = 0;
    unk_25410B380 = 0u;
    unk_25410B390 = 0u;
    unk_25410B3A0 = 0u;
    qword_25410B3B0 = 0;
    __cxa_guard_release(&qword_25410B2A8);
  }
  return &qword_25410B340;
}

void re::ecs2::initInfo_TransformSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x1C2499D73A6E8136;
  v5[1] = "TransformSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_TransformSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::TransformSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::TransformSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TransformSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TransformSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::TransformSystem *re::internal::defaultConstruct<re::ecs2::TransformSystem>(int a1, int a2, re::ecs2::TransformSystem *this)
{
  return re::ecs2::TransformSystem::TransformSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::TransformSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::TransformSystem>(_QWORD *a1)
{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_TransformSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TransformSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TransformSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TransformSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TransformSystem>, this);
}

void re::ecs2::TransformSystem::~TransformSystem(re::ecs2::TransformSystem *this)
{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::TransformSystem::typeInfo(re::ecs2::TransformSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TransformSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TransformSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TransformSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TransformSystem>, 0);
}

void re::ecs2::TransformComponent::~TransformComponent(re::ecs2::TransformComponent *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED5D818;
  v2 = (char *)this + 88;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 88);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;

  *(_QWORD *)this = &off_24ED5D818;
  v2 = (char *)this + 88;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 88);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return 14;
}

void *re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DAA0;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DAA0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DAF8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DAF8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DB50;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DB50;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DBA8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DBA8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DC58;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DC58;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DC00;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5DC00;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 16;
}

uint64_t *re::BucketArray<re::ecs2::Entity *,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::Entity *,32ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::Entity *,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 256, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::Entity *,32ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 32) >> 5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

re::ecs2::TransformSystem *re::ecs2::TransformSystem::TransformSystem(re::ecs2::TransformSystem *this)
{
  uint64_t v2;
  uint64_t v3;

  re::ecs2::System::System((uint64_t)this, 1);
  *(_QWORD *)v2 = &off_24ED5D9E8;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  v3 = v2 + 104;
  *(_QWORD *)(v2 + 140) = 0x7FFFFFFFLL;
  return this;
}

id re::internal::defaultRetain<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::TransformSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_PortalCrossingFlagsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_191);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_191))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B3E0, 0);
    *(uint64_t *)((char *)&qword_25410B3F0 + 6) = 0;
    qword_25410B3F0 = 0;
    qword_25410B400 = 0;
    qword_25410B408 = 0xFFFFFFFFLL;
    qword_25410B3E0 = (uint64_t)&off_24ED7DAA8;
    qword_25410B410 = (uint64_t)"PortalCrossingFlagsComponent";
    dword_25410B418 = 0;
    unk_25410B420 = 0u;
    unk_25410B430 = 0u;
    unk_25410B440 = 0u;
    qword_25410B450 = 0;
    __cxa_guard_release(&_MergedGlobals_191);
  }
  return &qword_25410B3E0;
}

void re::ecs2::initInfo_PortalCrossingFlagsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x37D4EAFB9BC30C48;
  v18[1] = "PortalCrossingFlagsComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B3C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B3C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B3C8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "enablePortalCrossing";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410B3D0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "enablePortalCrossingIsInherited";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410B3D8 = v16;
      __cxa_guard_release(&qword_25410B3C0);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410B3C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PortalCrossingFlagsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PortalCrossingFlagsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PortalCrossingFlagsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PortalCrossingFlagsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::PortalCrossingFlagsComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56C08;
  *(_WORD *)(v3 + 25) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::PortalCrossingFlagsComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::PortalCrossingFlagsComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56C08;
  *(_WORD *)(v1 + 25) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::PortalCrossingFlagsComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PortalCrossingFlagsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalCrossingFlagsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalCrossingFlagsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalCrossingFlagsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalCrossingFlagsComponent>, this);
}

uint64_t re::ecs2::PortalCrossingFlagsComponent::overridePortalCrossingFlags(re::ecs2::PortalCrossingFlagsComponent *this, const re::ecs2::Entity *a2, re::HierarchicalMeshOverrideFlags *a3, re::HierarchicalMeshOverrideFlags *a4)
{
  uint64_t result;
  char v7;
  int v8;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::PortalCrossingFlagsComponent *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v7 = *(_BYTE *)(result + 25);
    if (!*((_BYTE *)a2 + 16))
      *((_BYTE *)a2 + 16) = 1;
    *((_BYTE *)a2 + 17) = v7;
    v8 = *(unsigned __int8 *)(result + 26);
    *((_BYTE *)a2 + 25) = v8;
    if (v8)
    {
      if (!*((_BYTE *)a3 + 16))
      {
        *((_BYTE *)a3 + 16) = 1;
        v7 = *((_BYTE *)a2 + 17);
      }
      *((_BYTE *)a3 + 17) = v7;
      *((_BYTE *)a3 + 25) = 1;
    }
  }
  return result;
}

re::ecs2::IKParametersComponent *re::ecs2::IKParametersComponent::createSolversForAsset(re::ecs2::IKParametersComponent *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 664);
  else
    v3 = 0;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  if (*((_QWORD *)this + 10) != (v3 ^ (v4 >> 31) ^ v4))
  {
    re::ecs2::IKParametersComponent::createRuntimeData(this);
    return (re::ecs2::IKParametersComponent *)re::ecs2::Component::enqueueMarkDirty(v1);
  }
  return this;
}

void re::ecs2::IKParametersComponent::createRuntimeData(re::ecs2::IKParametersComponent *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[12];
  __int16 v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  _QWORD v51[6];
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = atomic_load((unsigned int *)(v1 + 704));
    if (v2 == 2)
    {
      v4 = *((_QWORD *)this + 5);
      if (v4)
      {
        v5 = *(uint64_t **)(v4 + 264);
        if (v5 == re::IKRigAsset::assetType(this))
        {
          if (*((_QWORD *)this + 7))
          {
            *((_QWORD *)this + 10) = 0;
            re::FixedArray<re::FullBodyIKSolver>::deinit((_QWORD *)this + 7);
          }
          v6 = *((_QWORD *)this + 5);
          if (v6)
            v7 = *(_QWORD *)(v6 + 664);
          else
            v7 = 0;
          v8 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
          *((_QWORD *)this + 10) = v7 ^ (v8 >> 31) ^ v8;
          v9 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::IKRigAsset>((re::ecs2::IKParametersComponent *)((char *)this + 32));
          v10 = *((_QWORD *)v9 + 16);
          if (v10)
          {
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 120;
            while (1)
            {
              v15 = *((_QWORD *)v9 + 16);
              if (v15 <= v13)
                break;
              v16 = *(_QWORD *)(*((_QWORD *)v9 + 17) + v11);
              if (v16)
              {
                v15 = *((_QWORD *)v9 + 4);
                if (v15 <= v13)
                  goto LABEL_42;
                re::FullBodyIKSolver::FullBodyIKSolver((uint64_t)&v34, v16, (uint64_t *)(*((_QWORD *)v9 + 5) + v12));
                v15 = *((_QWORD *)this + 8);
                if (v15 <= v13)
                  goto LABEL_43;
                v17 = *((_QWORD *)this + 9);
                v18 = v17 + v14;
                v19 = v34;
                *(_QWORD *)&v34 = 0;
                *((_QWORD *)&v34 + 1) = &str_110;
                v20 = *(_QWORD *)(v17 + v14 - 112);
                v21 = v19 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v17 + v14 - 120) & 1;
                *(_QWORD *)(v18 - 112) = *((_QWORD *)&v19 + 1);
                v51[0] = v21;
                v51[1] = v20;
                *(_QWORD *)(v18 - 120) = v19;
                re::StringID::destroyString((re::StringID *)v51);
                v22 = *(_QWORD *)&v35[0];
                *(_QWORD *)&v35[0] = 0;
                std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v17 + v14 - 104), v22);
                std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v17 + v14 - 96), (uint64_t)v35 + 8);
                re::FixedArray<float>::operator=((uint64_t *)(v17 + v14 - 64), (uint64_t *)&v36 + 1);
                v24 = (uint64_t *)(v17 + v14 - 40);
                if (v24 != &v38)
                {
                  v25 = *v24;
                  if (*v24 && v25 != v38)
                    goto LABEL_44;
                  *v24 = v38;
                  v38 = v25;
                  v26 = v17 + v14;
                  v27 = *(_QWORD *)(v17 + v14 - 32);
                  *(_QWORD *)(v26 - 32) = v39;
                  v39 = v27;
                  v28 = *(_QWORD *)(v17 + v14 - 24);
                  *(_QWORD *)(v26 - 24) = v40;
                  v40 = v28;
                }
                v29 = (uint64_t *)(v18 - 16);
                if ((uint64_t *)(v18 - 16) != &v41)
                {
                  v30 = *v29;
                  if (*v29 && v30 != v41)
                    goto LABEL_45;
                  *v29 = v41;
                  v41 = v30;
                  v31 = (_QWORD *)(v17 + v14);
                  v32 = *(_QWORD *)(v17 + v14 - 8);
                  *(v31 - 1) = v42;
                  v42 = v32;
                  v33 = *(_QWORD *)(v17 + v14);
                  *v31 = v43;
                  v43 = v33;
                }
                if (v41)
                {
                  if (v42)
                  {
                    (*(void (**)(void))(*(_QWORD *)v41 + 40))();
                    v42 = 0;
                    v43 = 0;
                  }
                  v41 = 0;
                }
                if (v38)
                {
                  if (v39)
                  {
                    (*(void (**)(void))(*(_QWORD *)v38 + 40))();
                    v39 = 0;
                    v40 = 0;
                  }
                  v38 = 0;
                }
                if (*((_QWORD *)&v36 + 1))
                {
                  if ((_QWORD)v37)
                  {
                    (*(void (**)(void))(**((_QWORD **)&v36 + 1) + 40))();
                    v37 = 0uLL;
                  }
                  *((_QWORD *)&v36 + 1) = 0;
                }
                std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v35);
                re::StringID::destroyString((re::StringID *)&v34);
              }
              ++v13;
              v14 += 128;
              v12 += 16;
              v11 += 40;
              if (v10 == v13)
                goto LABEL_39;
            }
            *(_QWORD *)v44 = 0;
            v36 = 0u;
            v37 = 0u;
            memset(v35, 0, sizeof(v35));
            v34 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v51[0]) = 136315906;
            *(_QWORD *)((char *)v51 + 4) = "operator[]";
            WORD2(v51[1]) = 1024;
            *(_DWORD *)((char *)&v51[1] + 6) = 476;
            WORD1(v51[2]) = 2048;
            *(_QWORD *)((char *)&v51[2] + 4) = v13;
            WORD2(v51[3]) = 2048;
            *(_QWORD *)((char *)&v51[3] + 6) = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_42:
            v52 = 0u;
            v53 = 0u;
            memset(v51, 0, sizeof(v51));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v44 = 136315906;
            *(_QWORD *)&v44[4] = "operator[]";
            v45 = 1024;
            v46 = 476;
            v47 = 2048;
            v48 = v13;
            v49 = 2048;
            v50 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_43:
            v52 = 0u;
            v53 = 0u;
            memset(v51, 0, sizeof(v51));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v44 = 136315906;
            *(_QWORD *)&v44[4] = "operator[]";
            v45 = 1024;
            v46 = 468;
            v47 = 2048;
            v48 = v13;
            v49 = 2048;
            v50 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_44:
            re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
            _os_crash();
            __break(1u);
LABEL_45:
            re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
            _os_crash();
            __break(1u);
          }
LABEL_39:
          *((_BYTE *)this + 96) = 1;
        }
      }
      else
      {
        re::IKRigAsset::assetType(this);
      }
    }
  }
}

uint64_t re::AssetHandle::asset<re::IKRigAsset>(re::IKRigAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::IKRigAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::ecs2::IKParametersComponentStateImpl::dependsOnComponents(re::ecs2::IKParametersComponentStateImpl *this)
{
  return (uint64_t)this + 16;
}

void re::ecs2::IKParametersComponentStateImpl::didSetDirty(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  re::Scheduler *v3;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 96);
  v3 = (re::Scheduler *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 80))(*(_QWORD *)(v1 + 40));
  if (v3)
    v4 = v2 == -1;
  else
    v4 = 1;
  if (!v4)
    re::Scheduler::enqueueTaskWithDeadline(v3, v2, 0.0);
}

BOOL re::ecs2::IKParametersComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::ecs2::IKParametersComponent **v10;
  re::ecs2::IKParametersComponent *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v27;
  unsigned int v28;
  re::RigGraphAsset *v29;
  const re::MeshAsset *v30;
  uint64_t *IKSolverRigGraphAsset;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[6];

  v49[5] = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v48, a5, 0);
  v45 = a4;
  v46 = v48;
  v47 = v49[0];
  if (v48 != a5 || LOWORD(v49[0]) != 0xFFFFLL || (v49[0] & 0xFFFF0000) != 4294901760)
  {
    while (1)
    {
      v10 = (re::ecs2::IKParametersComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v46);
      v11 = *v10;
      v12 = *((_QWORD *)*v10 + 2);
      re::ecs2::IKParametersComponent::createSolversForAsset(*v10);
      v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v13)
      {
        if (*((_BYTE *)v11 + 96))
        {
          v14 = v13;
          v15 = *(_QWORD *)(v13 + 40);
          if (v15)
            v16 = *(_QWORD *)(v15 + 664);
          else
            v16 = 0;
          v17 = v13 + 32;
          v18 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
          v19 = v16 ^ (v18 >> 31) ^ v18;
          v20 = *((_QWORD *)v11 + 11);
          v21 = *((_QWORD *)v11 + 5);
          if (v21 || v19 != v20)
            goto LABEL_19;
          if (v15)
            break;
        }
      }
LABEL_45:
      v40 = v45;
      v41 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v46);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v40, v41, *(_QWORD *)(a3 + 48));
LABEL_46:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v46);
      if (v46 == a5 && (unsigned __int16)v47 == 0xFFFF && WORD1(v47) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    if (*(_QWORD *)v17)
    {

      *(_QWORD *)v17 = 0;
    }
    v15 = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *((_QWORD *)v11 + 11) = 0;
    *((_BYTE *)v11 + 96) = 0;
    v21 = *((_QWORD *)v11 + 5);
LABEL_19:
    v23 = v19 == v20 || v15 == 0;
    if (v21 && v23)
    {
      v24 = *(_QWORD *)(v12 + 176);
      v25 = atomic_load((unsigned int *)(v21 + 704));
      if (v25 != 2 || v24 == 0)
        goto LABEL_46;
      v27 = *(_QWORD *)(v24 + 40);
      if (!v27)
        goto LABEL_46;
      v28 = atomic_load((unsigned int *)(v27 + 704));
      if (v28 != 2)
        goto LABEL_46;
      v29 = (re::RigGraphAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v24 + 32));
      v30 = (const re::MeshAsset *)re::AssetHandle::asset<re::IKRigAsset>((re::ecs2::IKParametersComponent *)((char *)v11 + 32));
      IKSolverRigGraphAsset = re::RigGraphAsset::createIKSolverRigGraphAsset(v29, v30, (uint64_t)&v48);
      if (!(_BYTE)v48)
        goto LABEL_46;
      v32 = *((_QWORD *)v11 + 5);
      if (v32)
        v33 = *(_QWORD *)(v32 + 24);
      else
        v33 = 0;
      v34 = v49[0];
      v35 = re::RigGraphAsset::assetType((re::RigGraphAsset *)IKSolverRigGraphAsset);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v33 + 416))(&v43, v33, v34, v35, 0, 0, 0);
      v36 = v44;
      if (v44)
      {
        v49[0] = 0;
        re::AssetHandle::operator=((uint64_t *)(v14 + 32), &v43);
        re::ecs2::Component::enqueueMarkDirty(v14);
        v37 = *(_QWORD *)(v14 + 40);
        if (v37)
          v38 = *(_QWORD *)(v37 + 664);
        else
          v38 = 0;
        v39 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
        *((_QWORD *)v11 + 11) = v38 ^ (v39 >> 31) ^ v39;
        *((_BYTE *)v11 + 96) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v43);
      if ((_BYTE)v48)
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v49);
      if (!v36)
        goto LABEL_46;
    }
    goto LABEL_45;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::IKParametersComponentStateImpl::processPreparingComponents()
{
  return 0;
}

uint64_t re::ecs2::IKParametersComponentStateImpl::processUpdatingComponents()
{
  return 0;
}

uint64_t re::ecs2::IKParametersSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *WeakRetained;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  re *isStatisticCollectionEnabled;
  uint64_t v13;
  int64x2_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  _anonymous_namespace_ *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t FirstBitSet;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  _BYTE v50[16];
  uint64_t v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD v61[3];
  uint64_t v62;

  v52[0] = a2;
  v52[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v51);
  WeakRetained = (id *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
  if (v5)
  {
    v6 = WeakRetained;
    v7 = 0;
    v8 = 8 * v5;
    do
    {
      WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        v9 = WeakRetained;
        v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 0;
        v7 += v11;

      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if ((isStatisticCollectionEnabled & 1) != 0)
  {
    v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      v15 = v14[460].u64[0];
      if (v15 >= v7)
        v15 = v7;
      v14[460].i64[0] = v15;
      v16 = v14[460].u64[1];
      if (v16 <= v7)
        v16 = v7;
      v14[460].i64[1] = v16;
      v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[461] = vaddq_s64(v14[461], v17);
      *(_BYTE *)(v13 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50, 3131, a1);
  v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v58, (uint64_t *)(a1 + 272));
  v61[2] = *(_QWORD *)(a1 + 312);
  v54 = 1;
  v55 = 0;
  v56 = 0;
  v53[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v53, 0);
  v54 += 2;
  v19 = *(_QWORD *)(a1 + 312);
  if ((v19 & 0x3F) != 0)
    v20 = (v19 >> 6) + 1;
  else
    v20 = v19 >> 6;
  v57 = *(_QWORD *)(a1 + 312);
  v62 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v53, v20, &v62);
  v21 = *(_DWORD *)(a1 + 288);
  if ((v21 & 1) != 0)
    v22 = (_QWORD *)(a1 + 296);
  else
    v22 = *(_QWORD **)(a1 + 304);
  v23 = *(_QWORD *)(a1 + 280);
  v24 = (uint64_t *)(a1 + 296);
  while (1)
  {
    v25 = a1 + 296;
    if ((v21 & 1) == 0)
      v25 = *(_QWORD *)(a1 + 304);
    if (v22 == (_QWORD *)(v25 + 8 * v23))
      break;
    *v22++ = 0;
    v21 = *(_DWORD *)(a1 + 288);
  }
  v26 = v61;
  if ((v60 & 1) == 0)
    v26 = (unint64_t *)v61[1];
  v27 = v59;
  if ((v59 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    v28 = 0;
    while (1)
    {
      v30 = *v26++;
      v29 = v30;
      if (v30)
        break;
      v28 -= 64;
      if (!--v27)
        goto LABEL_49;
    }
    v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      FirstBitSet = v31 - v28;
      do
      {
        v33 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, FirstBitSet);
        v34 = *(_QWORD *)(*v33 + 224);
        v35 = v33[3];
        v36 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v35);
        if (*(_DWORD *)(v36 + 40))
          v37 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 24))(v34, v52, v33, v35, v36, 0);
        else
          v37 = 0;
        v38 = v33[5];
        v39 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v38);
        if (*(_DWORD *)(v39 + 40))
          v37 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, v52, v33, v38, v39, 0);
        v40 = v33[6];
        v41 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v40);
        if (*(_DWORD *)(v41 + 40))
        {
          if (((v37 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v52, v33, v40, v41, 0)) & 1) == 0)goto LABEL_47;
        }
        else if (!v37)
        {
LABEL_47:
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v53, FirstBitSet);
          goto LABEL_48;
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v53, FirstBitSet);
LABEL_48:
        FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v58, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_49:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 272, (uint64_t)v53);
  if (*(_BYTE *)(a1 + 336))
  {
    v42 = *(_QWORD *)(a1 + 280);
    v43 = *(_DWORD *)(a1 + 288);
    if (v42 >= 0xB)
    {
      if ((v43 & 1) == 0)
        v24 = *(uint64_t **)(a1 + 304);
      v44 = 8 * v42;
      while (!*v24)
      {
        ++v24;
        v44 -= 8;
        if (!v44)
          goto LABEL_65;
      }
      goto LABEL_63;
    }
    if ((v43 & 1) == 0)
      v24 = *(uint64_t **)(a1 + 304);
    if (v42)
    {
      v45 = 0;
      v46 = 8 * v42;
      do
      {
        v47 = *v24++;
        v45 |= v47;
        v46 -= 8;
      }
      while (v46);
      if (v45)
      {
LABEL_63:
        v48 = *(re::ecs2::System **)(a1 + 320);
        if (!*((_BYTE *)v48 + 86))
          re::ecs2::System::queueToRun(v48, 0.0);
      }
    }
  }
LABEL_65:
  if (v53[0] && (v54 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v53[0] + 40))();
  if (v58 && (v60 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v58 + 40))();
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v51);
}

uint64_t re::ecs2::IKParametersSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v25[16];
  uint64_t v26[2];
  _QWORD v27[2];
  uint64_t v28;

  v27[0] = a3;
  v27[1] = a4;
  v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v26);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
    v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      v12 = v11[460].u64[0];
      if (v12 >= v10)
        v12 = v10;
      v11[460].i64[0] = v12;
      v13 = v11[460].u64[1];
      if (v13 <= v10)
        v13 = v10;
      v11[460].i64[1] = v13;
      v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[461] = vaddq_s64(v11[461], v14);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25, 3131, a1);
  v28 = a2;
  v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 160), &v28);
  if (v15 == -1)
    v16 = 0;
  else
    v16 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, *(_QWORD *)(*(_QWORD *)(a1 + 168) + 16 * v15 + 8));
  v17 = *(_QWORD *)(*v16 + 224);
  v18 = v16[3];
  v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
  if (*(_DWORD *)(v19 + 40))
    (*(void (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v27, v16, v18, v19, 0);
  v20 = v16[5];
  v21 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v20);
  if (*(_DWORD *)(v21 + 40))
    (*(void (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v27, v16, v20, v21, 0);
  v22 = v16[6];
  v23 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v22);
  if (*(_DWORD *)(v23 + 40))
    (*(void (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, v27, v16, v22, v23, 0);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v26);
}

void re::ecs2::IKParametersSystem::willAddSceneToECSService(re::ecs2::IKParametersSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 104;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::IKParametersSystem *)((char *)this + 224);
  v6 = *((_QWORD *)this + 29);
  v7 = *((_DWORD *)this + 60);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 248);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 32);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 248);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 32);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::IKParametersSystem *)((char *)this + 160), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 272;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 18);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 14);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 14);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 120) & 1) != 0)
    v19 = (char *)this + 128;
  else
    v19 = (char *)*((_QWORD *)this + 17);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 18);
  ++*((_DWORD *)this + 38);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 18);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::IKParametersSystem *)((char *)this + 160), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 18);
  v29 = *((_QWORD *)this + 33);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 33) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 33) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 240) & 1) != 0)
      v33 = (char *)this + 248;
    else
      v33 = (char *)*((_QWORD *)this + 32);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 29) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 18);
  v35 = *((_QWORD *)this + 39);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 39) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::IKParametersSystem *)((char *)this + 272), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 39) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 288) & 1) != 0)
      v39 = (char *)this + 296;
    else
      v39 = (char *)*((_QWORD *)this + 38);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 35) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 336))
    return;
  v40 = *((_QWORD *)this + 35);
  v41 = *((_DWORD *)this + 72);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 296);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 38);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 40);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 296);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 38);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::IKParametersSystem::willRemoveSceneFromECSService(re::ecs2::IKParametersSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 160);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 20, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_IKParametersComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_192);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_192))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B488, 0);
    *(uint64_t *)((char *)&qword_25410B498 + 6) = 0;
    qword_25410B498 = 0;
    qword_25410B4A8 = 0;
    qword_25410B4B0 = 0xFFFFFFFFLL;
    qword_25410B488 = (uint64_t)&off_24ED7DAA8;
    qword_25410B4B8 = (uint64_t)"IKParametersComponent";
    dword_25410B4C0 = 0;
    xmmword_25410B4C8 = 0u;
    unk_25410B4D8 = 0u;
    xmmword_25410B4E8 = 0u;
    qword_25410B4F8 = 0;
    __cxa_guard_release(&_MergedGlobals_192);
  }
  return &qword_25410B488;
}

void re::ecs2::initInfo_IKParametersComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x4101A12855F3362;
  v17[1] = "IKParametersComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B460);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B460);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B470 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::IntrospectionInfo<re::FixedArray<re::FullBodyIKSolver>>::get(1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "solvers";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x3800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410B478 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_AssetHandle((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "ikRigAssetHandle";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25410B480 = v15;
      __cxa_guard_release(&qword_25410B460);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410B470;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::IKParametersComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::IKParametersComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::IKParametersComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::IKParametersComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

double re::internal::defaultConstruct<re::ecs2::IKParametersComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56C88;
  result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_BYTE *)(v3 + 96) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::IKParametersComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::FixedArray<re::FullBodyIKSolver>::deinit(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::IKParametersComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56C88;
  result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_BYTE *)(v1 + 96) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::IKParametersComponent>(_QWORD *a1)
{
  re::FixedArray<re::FullBodyIKSolver>::deinit(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_IKParametersComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IKParametersComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_IKParametersComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_IKParametersComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::IKParametersComponent>, this);
}

uint64_t *re::ecs2::allocInfo_IKParametersSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B468);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B468))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B500, 0);
    *(uint64_t *)((char *)&qword_25410B510 + 6) = 0;
    qword_25410B510 = 0;
    qword_25410B520 = 0;
    qword_25410B528 = 0xFFFFFFFFLL;
    qword_25410B500 = (uint64_t)&off_24ED7DAA8;
    qword_25410B530 = (uint64_t)"IKParametersSystem";
    dword_25410B538 = 0;
    unk_25410B540 = 0u;
    unk_25410B550 = 0u;
    unk_25410B560 = 0u;
    qword_25410B570 = 0;
    __cxa_guard_release(&qword_25410B468);
  }
  return &qword_25410B500;
}

void re::ecs2::initInfo_IKParametersSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x83C6DF79F9B0A3F6;
  v5[1] = "IKParametersSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_IKParametersSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::IKParametersSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::IKParametersSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::IKParametersSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::IKParametersSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::IKParametersSystem *re::internal::defaultConstruct<re::ecs2::IKParametersSystem>(uint64_t a1, uint64_t a2, re::ecs2::IKParametersSystem *a3)
{
  return re::ecs2::IKParametersSystem::IKParametersSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::IKParametersSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::IKParametersSystem>(_QWORD *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_IKParametersSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IKParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_IKParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_IKParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::IKParametersSystem>, this);
}

void re::ecs2::IKParametersSystem::~IKParametersSystem(re::ecs2::IKParametersSystem *this)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::IKParametersSystem::typeInfo(re::ecs2::IKParametersSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IKParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_IKParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_IKParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::IKParametersSystem>, 0);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::IKParametersComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5DDA0;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5DDF8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5DE50;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5DEA8;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5DDA0;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5DDF8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5DE50;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5DEA8;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5DDA0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5DDA0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5DDF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5DDF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5DE50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5DE50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5DEA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5DEA8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::IKParametersComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

re::ecs2::IKParametersSystem *re::ecs2::IKParametersSystem::IKParametersSystem(re::ecs2::IKParametersSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED5DCF0;
  v3 = v2 + 344;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  v5 = (_QWORD *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  v6 = (_QWORD *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  v7 = (_QWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((_QWORD *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = this;
  *((_QWORD *)this + 41) = v3;
  *((_BYTE *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  *((_QWORD *)this + 43) = &off_24ED5DCB0;
  *((_QWORD *)this + 44) = this;
  *((_QWORD *)this + 45) = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  return this;
}

id re::internal::defaultRetain<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::IKParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_SceneUnderstandingComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_193);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_193))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B5F8, 0);
    *(uint64_t *)((char *)&qword_25410B608 + 6) = 0;
    qword_25410B608 = 0;
    qword_25410B618 = 0;
    qword_25410B620 = 0xFFFFFFFFLL;
    qword_25410B5F8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B628 = (uint64_t)"SceneUnderstandingComponent";
    dword_25410B630 = 0;
    xmmword_25410B638 = 0u;
    unk_25410B648 = 0u;
    xmmword_25410B658 = 0u;
    qword_25410B668 = 0;
    __cxa_guard_release(&_MergedGlobals_193);
  }
  return &qword_25410B5F8;
}

void re::ecs2::initInfo_SceneUnderstandingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xB7A4C0F509B6B38ALL;
  v14[1] = "SceneUnderstandingComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B580);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B580);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B5A8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<unsigned char [16]>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "identifier";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410B5B0 = v12;
      __cxa_guard_release(&qword_25410B580);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410B5A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::SceneUnderstandingComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5DF00;
  *(_WORD *)(v3 + 41) = 513;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5DF00;
  *(_WORD *)(v1 + 41) = 513;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::ecs2::allocInfo_SceneUnderstandingRootComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B588);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B588))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B670, 0);
    *(uint64_t *)((char *)&qword_25410B680 + 6) = 0;
    qword_25410B680 = 0;
    qword_25410B690 = 0;
    qword_25410B698 = 0xFFFFFFFFLL;
    qword_25410B670 = (uint64_t)&off_24ED7DAA8;
    qword_25410B6A0 = (uint64_t)"SceneUnderstandingRootComponent";
    dword_25410B6A8 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_25410B6E0 = 0;
    __cxa_guard_release(&qword_25410B588);
  }
  return &qword_25410B670;
}

void re::ecs2::initInfo_SceneUnderstandingRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x2CBC1F2A37446606;
  v14[1] = "SceneUnderstandingRootComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B590);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B590);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B5B8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_size_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "updateId";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410B5C0 = v12;
      __cxa_guard_release(&qword_25410B590);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410B5B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRootComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRootComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRootComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56D08;
  *(_QWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRootComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRootComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56D08;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRootComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SceneUnderstandingRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingRootComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SceneUnderstandingRenderOptionsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B598);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B598))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B6E8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B6F8 = 0;
    qword_25410B708 = 0;
    qword_25410B710 = 0xFFFFFFFFLL;
    qword_25410B6E8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B718 = (uint64_t)"SceneUnderstandingRenderOptionsComponent";
    dword_25410B720 = 0;
    xmmword_25410B728 = 0u;
    unk_25410B738 = 0u;
    xmmword_25410B748 = 0u;
    qword_25410B758 = 0;
    __cxa_guard_release(&qword_25410B598);
  }
  return &qword_25410B6E8;
}

void re::ecs2::initInfo_SceneUnderstandingRenderOptionsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;

  v30[0] = 0xDCE03EE9E8EB53DALL;
  v30[1] = "SceneUnderstandingRenderOptionsComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B5A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B5A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B5C8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "enableOcclusion";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410B5D0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "enableWireframe";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410B5D8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "enableDepthFeathering";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1B00000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410B5E0 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "enableGuidedFilterOcclusionSupport";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1C00000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25410B5E8 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_BOOL((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "enableGuidedFilterOcclusion";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x1D00000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_25410B5F0 = v28;
      __cxa_guard_release(&qword_25410B5A0);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_25410B5C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v29 = v31;
}

void re::internal::defaultConstruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56D88;
  *(_DWORD *)(v3 + 25) = 0;
  *(_DWORD *)(v3 + 28) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneUnderstandingRenderOptionsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56D88;
  *(_DWORD *)(v1 + 25) = 0;
  *(_DWORD *)(v1 + 28) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingRenderOptionsComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SceneUnderstandingRenderOptionsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingRenderOptionsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingRenderOptionsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingRenderOptionsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingRenderOptionsComponent>, this);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::initComponentType(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  re::ecs2::ComponentTypeRegistry *v9;
  char *v10;
  uint64_t result;
  StringID v12;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::SceneUnderstandingComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingComponent>, 0);
  }
  re::getPrettyTypeName((re *)re::introspect<re::ecs2::SceneUnderstandingComponent>(void)::info, (const re::IntrospectionBase *)&v15);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v15, "Component", v13);
  if (v13[0])
  {
    v4 = (v16[0] & 1) != 0 ? v16[0] >> 1 : LOBYTE(v16[0]) >> 1;
    if (v14 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v15, 0, v14, (re::DynamicString *)&v12);
      re::DynamicString::operator=((re::DynamicString *)&v15, (re::DynamicString *)&v12);
      v3 = *(re **)&v12.var0;
      if (*(_QWORD *)&v12.var0)
      {
        if (((uint64_t)v12.var1 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v12.var0 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = v6;
  if ((v16[0] & 1) != 0)
    v8 = (const char *)v16[1];
  else
    v8 = (char *)v16 + 1;
  *(_QWORD *)&v12.var0 = 0;
  v12.var1 = (char *)&str_110;
  re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::ComponentType((uint64_t)v7, &v12, a1, 4);
  re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v10 = re::ecs2::ComponentTypeRegistry::instance(v9);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v10, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  result = v15;
  if (v15)
  {
    if ((v16[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

uint64_t re::ecs2::SceneUnderstandingComponent::clone(re::ecs2::SceneUnderstandingComponent *this, const Component *a2)
{
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                + 32))(&v5);
  v3 = v5;
  uuid_copy((unsigned __int8 *)(v5 + 25), (const unsigned __int8 *)this + 25);
  *(_WORD *)(v3 + 41) = *(_WORD *)((char *)this + 41);
  return v3;
}

void re::ecs2::SceneUnderstandingComponent::~SceneUnderstandingComponent(re::ecs2::SceneUnderstandingComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

BOOL re::ecs2::SceneUnderstandingComponent::isExcludedFromRealityFile(re::ecs2::SceneUnderstandingComponent *this)
{
  return *((_BYTE *)this + 42) == 1;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::ComponentType(uint64_t a1, const StringID *a2, uint64_t a3, int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24ED5DF80;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(a1 + 32), (const char *)0x30);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::SceneUnderstandingComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingComponent>, 0);
  }
  v8 = re::introspect<re::ecs2::SceneUnderstandingComponent>(void)::info;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  v9 = (char *)v8[6];
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v18[0] = 2 * v10;
  v18[1] = v9;
  v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
  if (v14)
  {
    v15 = *v14;
  }
  else
  {
    v16 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  re::StringID::destroyString((re::StringID *)v18);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  return a1;
}

double re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 48, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5DF00;
  *(_WORD *)(v3 + 41) = 513;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED5DFF0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

void *re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::ecs2::SceneUnderstandingComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingComponent>, 0);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[126];
}

__n128 re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::SceneUnderstandingComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED5DF80;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneUnderstandingComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneUnderstandingComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneUnderstandingComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneUnderstandingComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneUnderstandingComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneUnderstandingComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneUnderstandingComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneUnderstandingComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED5DFF0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneUnderstandingComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Slice<re::ecs2::SceneUnderstandingComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneUnderstandingComponent>,re::Slice<re::ecs2::SceneUnderstandingComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneUnderstandingComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

re::ecs2::RenderPassGroupManagerStateTracking *re::ecs2::RenderPassGroupManagerStateTracking::RenderPassGroupManagerStateTracking(re::ecs2::RenderPassGroupManagerStateTracking *this, re::EntitlementManager *a2)
{
  _OWORD *v4;
  _QWORD v6[2];
  _QWORD v7[4];

  v7[3] = *MEMORY[0x24BDAC8D0];
  v4 = (_OWORD *)re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::HierarchyStateTracking((uint64_t)this);
  *(_QWORD *)v4 = &off_24ED5E098;
  *(_OWORD *)((char *)v4 + 248) = 0u;
  v4 = (_OWORD *)((char *)v4 + 248);
  *((_WORD *)this + 148) = 0;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = a2;
  v7[0] = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v7[1] = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v7[2] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[0] = v7;
  v6[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v4, (uint64_t)v6);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::HierarchyStateTracking(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_QWORD *)a1 = off_24ED5E190;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::RenderPassGroupManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  _UNKNOWN **v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id *v18;
  id WeakRetained;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  id *v56;
  uint64_t v57;
  char *v58;
  void *v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  const char *v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;

  v2 = a2;
  v3 = a1;
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_35;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a1 + 24) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 == (_DWORD)v5)
    goto LABEL_35;
  v8 = v5;
  v9 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v10 = *(_DWORD *)(a1 + 40);
  v92 = v10;
  do
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 24 * v8 + 16);
    v12 = *((unsigned __int16 *)v9[40] + 8);
    if (*(_QWORD *)(v11 + 224) <= v12)
      goto LABEL_27;
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 240) + 8 * v12);
    if (!v13)
      goto LABEL_27;
    v14 = *(_QWORD *)(v13 + 24);
    if (!v14)
      goto LABEL_27;
    v15 = *(_QWORD *)(v13 + 40);
    v16 = 8 * v14;
    do
    {
      v17 = *(_QWORD **)v15;
      v18 = (id *)(*(_QWORD *)v15 + 32);
      if (!*v18)
        goto LABEL_22;
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)v15 + 32));
      v20 = WeakRetained;
      if (WeakRetained)
        v21 = (uint64_t)WeakRetained - 8;
      else
        v21 = 0;
      if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
      {
        v105 = v21;
        a1 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a2, &v105);
        if (!(_DWORD)a1)
        {
          if (!v20)
            goto LABEL_22;
LABEL_21:

          goto LABEL_22;
        }
      }
      else
      {
        re::ecs2::EntityHandle::reset(v18);
        objc_destroyWeak(v18);
        *v18 = 0;
      }
      a1 = (uint64_t)re::ecs2::Component::markDirty(v17);
      if (v20)
        goto LABEL_21;
LABEL_22:
      v15 += 8;
      v16 -= 8;
    }
    while (v16);
    v10 = *(_DWORD *)(v3 + 40);
    LODWORD(v4) = v92;
    v2 = a2;
    v9 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
LABEL_27:
    if (v10 <= (int)v5 + 1)
      v22 = v5 + 1;
    else
      v22 = v10;
    while (1)
    {
      v8 = (v5 + 1);
      if (v22 - 1 == (_DWORD)v5)
        break;
      LODWORD(v5) = v5 + 1;
      v23 = v8;
      if ((*(_DWORD *)(*(_QWORD *)(v3 + 24) + 24 * v8 + 8) & 0x80000000) != 0)
        goto LABEL_34;
    }
    v23 = v22;
LABEL_34:
    LODWORD(v5) = v23;
  }
  while ((_DWORD)v4 != v23);
LABEL_35:
  v93 = *(unsigned int *)(v2 + 32);
  v24 = 0;
  if ((_DWORD)v93)
  {
    v25 = (int *)(*(_QWORD *)(v2 + 16) + 8);
    while (1)
    {
      v26 = *v25;
      v25 += 6;
      if (v26 < 0)
        break;
      if (v93 == ++v24)
      {
        LODWORD(v24) = *(_DWORD *)(v2 + 32);
        break;
      }
    }
  }
  if ((_DWORD)v93 != (_DWORD)v24)
  {
    v27 = v24;
    v28 = *(_QWORD *)(v2 + 16);
    v29 = (_QWORD *)(v3 + 56);
    v30 = &v101;
    v95 = v3;
    while (1)
    {
      v31 = *(_QWORD *)(v28 + 24 * v27 + 16);
      v32 = *(_QWORD **)(v3 + 304);
      a1 = re::ecs2::RenderPassGroupService::enableRenderPassGroups((re::ecs2::RenderPassGroupService *)a1);
      if ((_DWORD)a1)
        break;
LABEL_140:
      v28 = *(_QWORD *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v24 + 1))
        v87 = v24 + 1;
      else
        v87 = *(_DWORD *)(v2 + 32);
      while (1)
      {
        v27 = (v24 + 1);
        if (v87 - 1 == (_DWORD)v24)
          break;
        LODWORD(v24) = v24 + 1;
        v88 = v27;
        if ((*(_DWORD *)(v28 + 24 * v27 + 8) & 0x80000000) != 0)
          goto LABEL_147;
      }
      v88 = v87;
LABEL_147:
      LODWORD(v24) = v88;
      if ((_DWORD)v93 == v88)
        goto LABEL_148;
    }
    if (*v29)
    {
      v33 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) >> 27));
      v34 = *(unsigned int *)(*(_QWORD *)(v3 + 64) + 4 * ((v33 ^ (v33 >> 31)) % *(unsigned int *)(v3 + 80)));
      if ((_DWORD)v34 != 0x7FFFFFFF)
      {
        v45 = *(_QWORD *)(v3 + 72);
        for (i = v45 + 40 * v34; *(_QWORD *)(i + 16) != v31; i = v45 + 40 * v34)
        {
          LODWORD(v34) = *(_DWORD *)(v45 + 40 * v34 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v34 == 0x7FFFFFFF)
            goto LABEL_45;
        }
        goto LABEL_140;
      }
    }
LABEL_45:
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v32 + 8))(&v105, *v32, v31);
    if ((_BYTE)v105)
      v35 = v106;
    else
      v35 = 0;
    v36 = *(_QWORD *)(v31 + 24);
    if (v36)
    {
      if ((*(_BYTE *)(v36 + 288) & 0x80) != 0)
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      else
      {
        v91 = 0;
        v90 = 0;
        v89 = v35;
        do
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v32 + 8))(&v105, *v32, v36);
          v37 = (_BYTE)v105 ? v106 : 0;
          if (v35 != v37)
            break;
          if (*v29)
          {
            v38 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) >> 27));
            v39 = *(unsigned int *)(*(_QWORD *)(v3 + 64) + 4 * ((v38 ^ (v38 >> 31)) % *(unsigned int *)(v3 + 80)));
            if ((_DWORD)v39 != 0x7FFFFFFF)
            {
              v40 = *(_QWORD *)(v3 + 72);
              while (*(_QWORD *)(v40 + 40 * v39 + 16) != v36)
              {
                LODWORD(v39) = *(_DWORD *)(v40 + 40 * v39 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v39 == 0x7FFFFFFF)
                  goto LABEL_60;
              }
              v47 = v40 + 40 * v39;
              v91 = *(_QWORD *)(v47 + 24);
              LOBYTE(v90) = *(_BYTE *)(v47 + 32);
              break;
            }
          }
LABEL_60:
          v41 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v36 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v41)
          {
            v91 = *(_QWORD *)(v36 + 296);
            v90 = *(unsigned __int8 *)(v41 + 26);
            v31 = v36;
          }
          else
          {
            v42 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v36 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            v43 = v90;
            if (v42)
              v43 = 0;
            v90 = v43;
            v44 = v91;
            if (v42)
              v44 = 0;
            v91 = v44;
            if (v42)
              v31 = v36;
          }
          v36 = *(_QWORD *)(v36 + 24);
          v35 = v89;
        }
        while (v36 && (*(_BYTE *)(v36 + 288) & 0x80) == 0);
      }
    }
    else
    {
      LOBYTE(v90) = 0;
      v91 = 0;
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v105);
    v98 = 0;
    v99 = 0;
    v100 = 1;
    v30[1] = 0;
    v30[2] = 0;
    *v30 = 0;
    *((_DWORD *)v30 + 6) = 0;
    re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::init((uint64_t)&v98, (uint64_t)&v105, 1uLL);
    v48 = re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::addUninitialized((uint64_t)&v98);
    *(_QWORD *)v48 = v31;
    *(_QWORD *)(v48 + 8) = v91;
    *(_BYTE *)(v48 + 16) = v90;
    *(_QWORD *)(v48 + 24) = v35;
    v49 = v103;
    if (v103)
    {
      while (1)
      {
        v50 = (__int128 *)re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v98, --v49);
        v51 = v50[1];
        v96 = *v50;
        v97 = v51;
        re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v98, v49);
        v103 = v49;
        ++v104;
        if ((*(_BYTE *)(v96 + 288) & 1) != 0)
          break;
LABEL_121:
        if (!v49)
          goto LABEL_128;
      }
      v52 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v96 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v52
        || (v55 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v96 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0&& (v57 = *(_QWORD *)(v55 + 32), v56 = (id *)(v55 + 32), v57)&& (v58 = (char *)objc_loadWeakRetained(v56)) != 0&& (v59 = v58, v52 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v58 + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType), v59, v52))
      {
        if (*(_BYTE *)(v52 + 25) == 1)
        {
          v53 = 0;
          v54 = 0;
        }
        else
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v52 + 16) + 296);
          v54 = *(unsigned __int8 *)(v52 + 26);
        }
        *((_QWORD *)&v96 + 1) = v53;
        LOBYTE(v97) = v54;
        if (v54)
          goto LABEL_91;
      }
      else
      {
        if (!(_BYTE)v97)
          goto LABEL_99;
LABEL_91:
        if (re::internal::render_on_top::never_use_this::g_enableRenderOnTopEntitlement)
        {
          v60 = v96;
          v61 = atomic_load((unsigned __int8 *)&qword_25410B768);
          if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_25410B768))
          {
            re::Defaults::BOOLValue((re::Defaults *)"enableRenderOnTopSPIEntitlement", v80, (char *)&v107);
            if ((_BYTE)v107)
              v81 = BYTE1(v107);
            else
              v81 = 1;
            _MergedGlobals_194 = v81;
            __cxa_guard_release(&qword_25410B768);
          }
          if (_MergedGlobals_194)
          {
            v62 = *(_QWORD *)(v60 + 200);
            if (v62)
            {
              if (*(_QWORD *)(v62 + 32))
                RESyncableGetOwnerPeerID();
              if (!*(_QWORD *)(v3 + 312))
                LOBYTE(v97) = 0;
            }
          }
        }
      }
LABEL_99:
      v63 = v96;
      if (*((_QWORD *)&v96 + 1))
      {
        *(_QWORD *)&v107 = *((_QWORD *)&v96 + 1);
        BYTE8(v107) = v97;
        v64 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v96 ^ ((unint64_t)v96 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                * ((unint64_t)v96 ^ ((unint64_t)v96 >> 30))) >> 27));
        v65 = v64 ^ (v64 >> 31);
        if (*v29)
        {
          v66 = v65 % *(unsigned int *)(v3 + 80);
          v67 = *(unsigned int *)(*(_QWORD *)(v3 + 64) + 4 * v66);
          if ((_DWORD)v67 != 0x7FFFFFFF)
          {
            v68 = *(_QWORD *)(v3 + 72);
            while (*(_QWORD *)(v68 + 40 * v67 + 16) != (_QWORD)v96)
            {
              LODWORD(v67) = *(_DWORD *)(v68 + 40 * v67 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v67 == 0x7FFFFFFF)
                goto LABEL_107;
            }
            goto LABEL_108;
          }
        }
        else
        {
          LODWORD(v66) = 0;
        }
LABEL_107:
        re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove((uint64_t)v29, v66, v65, &v96, &v107);
        ++*(_DWORD *)(v3 + 96);
        v63 = v96;
      }
LABEL_108:
      v69 = *(_QWORD *)(v63 + 328);
      if (v69)
      {
        v70 = v30;
        v71 = v29;
        v72 = *(uint64_t **)(v63 + 344);
        v73 = 8 * v69;
        do
        {
          v75 = *v72++;
          v74 = v75;
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v32 + 8))(&v107, *v32, v75);
          if ((_BYTE)v107)
            v76 = *((_QWORD *)&v107 + 1);
          else
            v76 = 0;
          if (*((_QWORD *)&v97 + 1) == v76)
            v77 = *((_QWORD *)&v96 + 1);
          else
            v77 = 0;
          if (*((_QWORD *)&v97 + 1) == v76)
            v78 = v97;
          else
            v78 = 0;
          v79 = re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::addUninitialized((uint64_t)&v98);
          *(_QWORD *)v79 = v74;
          *(_QWORD *)(v79 + 8) = v77;
          *(_BYTE *)(v79 + 16) = v78;
          *(_QWORD *)(v79 + 24) = v76;
          v73 -= 8;
        }
        while (v73);
        v49 = v103;
        v29 = v71;
        v30 = v70;
        v3 = v95;
      }
      goto LABEL_121;
    }
LABEL_128:
    v82 = v98;
    if (v99)
    {
      v83 = v102;
      v84 = v100;
      v85 = v99 - 1;
      do
      {
        if ((v84 & 1) != 0)
          v86 = v30;
        else
          v86 = v83;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 40))(v82, v86[v85]);
        v84 += 2;
        v100 = v84;
        --v85;
      }
      while (v85 != -1);
      if ((v84 & 1) != 0)
        goto LABEL_139;
LABEL_138:
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v82 + 40))(v82, v102);
    }
    else if (v98 && (v100 & 1) == 0)
    {
      goto LABEL_138;
    }
LABEL_139:
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v105);
    v2 = a2;
    goto LABEL_140;
  }
LABEL_148:
  *(_BYTE *)(v3 + 296) = 0;
}

void re::ecs2::RenderPassGroupManagerStateTracking::clearEntityHierarchyStateData(uint64_t this, uint64_t a2)
{
  *(_BYTE *)(this + 296) = 1;
  re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::clearEntityHierarchyStateData(this, a2);
}

void re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE v28[120];

  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
    v22[0] = 0;
    v22[1] = 0;
    v23 = 1;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v27 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
    v4 = v26;
    while (v4)
    {
      v5 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v4 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v26 - 1);
      v4 = --v26;
      ++v27;
      if (*(_QWORD *)(a1 + 56))
      {
        v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        v7 = (v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 80);
        v8 = *(_QWORD *)(a1 + 64);
        v9 = *(unsigned int *)(v8 + 4 * v7);
        if ((_DWORD)v9 != 0x7FFFFFFF)
        {
          v10 = *(_QWORD *)(a1 + 72);
          if (*(_QWORD *)(v10 + 40 * v9 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
LABEL_10:
            v12 = *(_QWORD *)(a1 + 72);
            v13 = v12 + 40 * v9;
            v16 = *(_DWORD *)(v13 + 8);
            v15 = (int *)(v13 + 8);
            v14 = v16;
            if (v16 < 0)
            {
              *v15 = v14 & 0x7FFFFFFF;
              v12 = *(_QWORD *)(a1 + 72);
              v14 = *(_DWORD *)(v12 + 40 * v9 + 8);
            }
            *(_DWORD *)(v12 + 40 * v9 + 8) = *(_DWORD *)(a1 + 92) | v14 & 0x80000000;
            --*(_DWORD *)(a1 + 84);
            v17 = *(_DWORD *)(a1 + 96) + 1;
            *(_DWORD *)(a1 + 92) = v9;
            *(_DWORD *)(a1 + 96) = v17;
          }
          else
          {
            while (1)
            {
              v11 = v9;
              v9 = *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
              if (v9 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v10 + 40 * v9 + 16) == v5)
              {
                *(_DWORD *)(v10 + 40 * v11 + 8) = *(_DWORD *)(v10 + 40 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 40 * v9 + 8) & 0x7FFFFFFF;
                goto LABEL_10;
              }
            }
          }
        }
      }
      v18 = *(_QWORD *)(v5 + 328);
      if (v18)
      {
        v19 = *(uint64_t **)(v5 + 344);
        v20 = 8 * v18;
        do
        {
          v21 = *v19++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
          v20 -= 8;
        }
        while (v20);
        v4 = v26;
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
    if (v22[0])
    {
      if ((v23 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
  }
}

void re::ecs2::RenderPassGroupManager::updateGroupData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 312) = a2;
  v4 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v4);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v3 + 200);
  *(_QWORD *)(v3 + 304) = 0;
}

double re::ecs2::RenderPassGroupManager::addBoundsTable(uint64_t a1, StringID *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v8 = (_QWORD *)(a1 + 328);
  v9 = a3 & 0xFFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 376) < (a3 & 0xFFFFFFFFFFFFFFFuLL))
  {
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 328);
    *(_QWORD *)(a1 + 376) = v9;
  }
  v16 = a3;
  v20 = 0;
  v17 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v18 = *((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 2) = 0;
  v19 = *(__int128 *)((char *)a4 + 24);
  *(__int128 *)((char *)a4 + 24) = xmmword_2260F5A80;
  v10 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  if (!*v8)
  {
    LODWORD(v12) = 0;
    goto LABEL_10;
  }
  v12 = v11 % *(unsigned int *)(a1 + 352);
  v13 = *(unsigned int *)(*(_QWORD *)(a1 + 336) + 4 * v12);
  if ((_DWORD)v13 == 0x7FFFFFFF)
  {
LABEL_10:
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove((uint64_t)v8, v12, v11, a2, &v16);
    ++*(_DWORD *)(a1 + 368);
    return re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v17);
  }
  v14 = *(_QWORD *)(a1 + 344);
  while (!re::StringID::operator==((_QWORD *)(v14 + 80 * v13 + 8), a2))
  {
    v13 = *(_DWORD *)(v14 + 80 * v13) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF)
      goto LABEL_10;
  }
  return re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v17);
}

void re::ecs2::RenderPassGroupManager::mergeBoundsTable(uint64_t a1, StringID *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  float32x4_t *v17;
  unint64_t v18;
  float32x4_t *v19;
  unint64_t v20;
  float32x4_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  unsigned int v42;
  unsigned int v43;

  if (*(_QWORD *)(a1 + 376) == (a3 & 0xFFFFFFFFFFFFFFFLL)
    && (v8 = re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 328, a2)) != 0)
  {
    v9 = v8;
    v10 = *(unsigned int *)(a4 + 32);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = (int *)(*(_QWORD *)(a4 + 16) + 8);
      while (1)
      {
        v13 = *v12;
        v12 += 20;
        if (v13 < 0)
          break;
        if (v10 == ++v11)
        {
          LODWORD(v11) = *(_DWORD *)(a4 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    if ((_DWORD)v10 != (_DWORD)v11)
    {
      v14 = v11;
      v15 = (_QWORD *)(v8 + 8);
      v16 = *(_QWORD *)(a4 + 16);
      do
      {
        v17 = (float32x4_t *)(v16 + 80 * v14);
        v20 = v17[1].u64[0];
        v19 = v17 + 1;
        v18 = v20;
        v21 = v19 + 1;
        v22 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) >> 27));
        v23 = v22 ^ (v22 >> 31);
        if (*v15)
        {
          v24 = *(unsigned int *)(*(_QWORD *)(v9 + 16) + 4 * (v23 % *(unsigned int *)(v9 + 32)));
          if ((_DWORD)v24 != 0x7FFFFFFF)
          {
            v25 = *(_QWORD *)(v9 + 24);
            while (*(_QWORD *)(v25 + 80 * v24 + 16) != v18)
            {
              LODWORD(v24) = *(_DWORD *)(v25 + 80 * v24 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v24 == 0x7FFFFFFF)
                goto LABEL_17;
            }
            v37 = (float32x4_t *)(v25 + 80 * v24);
            v38 = *v21;
            v39 = v37[2];
            v40 = v37[3];
            v39.i32[3] = 0;
            v38.i32[3] = 0;
            v37[2] = vminnmq_f32(v39, v38);
            v41 = v19[2];
            v40.i32[3] = 0;
            v41.i32[3] = 0;
            v37[3] = vmaxnmq_f32(v40, v41);
            v37[4].i8[0] |= *(_BYTE *)(v16 + 80 * v14 + 64);
            goto LABEL_30;
          }
LABEL_17:
          v26 = v23 % *(unsigned int *)(v9 + 32);
          v27 = *(unsigned int *)(*(_QWORD *)(v9 + 16) + 4 * v26);
          if ((_DWORD)v27 != 0x7FFFFFFF)
          {
            v28 = *(_QWORD *)(v9 + 24);
            while (*(_QWORD *)(v28 + 80 * v27 + 16) != v18)
            {
              LODWORD(v27) = *(_DWORD *)(v28 + 80 * v27 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v27 == 0x7FFFFFFF)
                goto LABEL_23;
            }
            goto LABEL_30;
          }
        }
        else
        {
          v26 = 0;
        }
LABEL_23:
        v29 = *(unsigned int *)(v9 + 44);
        if ((_DWORD)v29 == 0x7FFFFFFF)
        {
          v29 = *(unsigned int *)(v9 + 40);
          v30 = v29;
          if ((_DWORD)v29 == *(_DWORD *)(v9 + 32))
          {
            v31 = v10;
            re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v9 + 8, 2 * *(_DWORD *)(v9 + 36));
            v10 = v31;
            v26 = v23 % *(unsigned int *)(v9 + 32);
            v30 = *(_DWORD *)(v9 + 40);
            v18 = v19->i64[0];
          }
          *(_DWORD *)(v9 + 40) = v30 + 1;
          v32 = *(_QWORD *)(v9 + 24);
          v33 = *(_DWORD *)(v32 + 80 * v29 + 8);
        }
        else
        {
          v32 = *(_QWORD *)(v9 + 24);
          v33 = *(_DWORD *)(v32 + 80 * v29 + 8);
          *(_DWORD *)(v9 + 44) = v33 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v32 + 80 * v29 + 8) = v33 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(v9 + 24) + 80 * v29 + 8) = *(_DWORD *)(*(_QWORD *)(v9 + 24) + 80 * v29 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v9 + 16) + 4 * v26);
        *(_QWORD *)(*(_QWORD *)(v9 + 24) + 80 * v29) = v23;
        *(_QWORD *)(*(_QWORD *)(v9 + 24) + 80 * v29 + 16) = v18;
        v34 = (_OWORD *)(*(_QWORD *)(v9 + 24) + 80 * v29);
        v35 = *v21;
        v36 = v19[3];
        v34[3] = v19[2];
        v34[4] = v36;
        v34[2] = v35;
        *(_DWORD *)(*(_QWORD *)(v9 + 16) + 4 * v26) = v29;
        ++*(_DWORD *)(v9 + 36);
        ++*(_DWORD *)(v9 + 48);
LABEL_30:
        v42 = *(_DWORD *)(a4 + 32);
        v16 = *(_QWORD *)(a4 + 16);
        if (v42 <= (int)v11 + 1)
          v42 = v11 + 1;
        while (1)
        {
          v14 = (v11 + 1);
          if (v42 - 1 == (_DWORD)v11)
            break;
          LODWORD(v11) = v11 + 1;
          v43 = v14;
          if ((*(_DWORD *)(v16 + 80 * v14 + 8) & 0x80000000) != 0)
            goto LABEL_36;
        }
        v43 = v42;
LABEL_36:
        LODWORD(v11) = v43;
      }
      while ((_DWORD)v10 != v43);
    }
  }
  else
  {
    re::ecs2::RenderPassGroupManager::addBoundsTable(a1, a2, a3, (__int128 *)a4);
  }
}

uint64_t re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 80 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 80 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 80 * v4 + 24;
}

_QWORD *re::ecs2::RenderPassGroupManager::boundsTable(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;
  _BOOL4 v10;
  _BOOL4 v11;

  v4 = a1 + 328;
  v5 = a3 & 0xFFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 376) < (a3 & 0xFFFFFFFFFFFFFFFuLL))
  {
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 328);
    *(_QWORD *)(a1 + 376) = v5;
  }
  result = (_QWORD *)re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4, a2);
  if (result)
  {
    v8 = *result & 0xFFFFFFFFFFFFFFFLL;
    v10 = v5 != 0xFFFFFFFFFFFFFFFLL && v8 == v5;
    if (v8 == 0xFFFFFFFFFFFFFFFLL)
      v11 = v5 == 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      ++result;
    else
      return 0;
  }
  return result;
}

uint64_t re::ecs2::RenderPassGroupManager::computeCanUseRenderPassGroupsForSorting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v11;
  _BOOL4 v12;
  _anonymous_namespace_ *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _OWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[6];
  uint64_t v29[2];

  v29[1] = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v11 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 64, &v23);
  if (v11)
    v12 = *(_BYTE *)(v11 + 8) == 0;
  else
    v12 = 1;
  v13 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v23 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v13)
    v14 = 0;
  else
    v14 = a6 & ~a5 & v12;
  if (v14 == 1 && (*(_QWORD *)a3 < 0xFFFFFFFFFFFFFFFELL || (*(_QWORD *)a3 & 1) != 0 || **(_BYTE **)(a3 + 8)))
  {
    v15 = *(_QWORD *)(a1 + 432);
    v16 = a4 & 0xFFFFFFFFFFFFFFFLL;
    if (v15 == (a4 & 0xFFFFFFFFFFFFFFFLL))
    {
      v13 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 384, (_QWORD *)a3);
      if (v13)
      {
        re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v13 + 8, &v23);
        return v14 ^ 1u;
      }
    }
    if (v15 < v16)
    {
      re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 384);
      *(_QWORD *)(a1 + 432) = v16;
    }
    v29[0] = v23;
    memset(v24, 0, sizeof(v24));
    v25 = 0;
    v26 = 0x7FFFFFFFLL;
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v24, v29);
    v27 = a4;
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::HashSetBase((uint64_t)v28, (uint64_t)v24);
    v17 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)a3 >> 31) ^ (*(_QWORD *)a3 >> 1));
    v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 384))
    {
      v19 = v18 % *(unsigned int *)(a1 + 408);
      v20 = *(unsigned int *)(*(_QWORD *)(a1 + 392) + 4 * v19);
      if ((_DWORD)v20 != 0x7FFFFFFF)
      {
        v21 = *(_QWORD *)(a1 + 400);
        while (!re::StringID::operator==((_QWORD *)(v21 + 80 * v20 + 8), (_QWORD *)a3))
        {
          v20 = *(_DWORD *)(v21 + 80 * v20) & 0x7FFFFFFF;
          if (v20 == 0x7FFFFFFF)
            goto LABEL_23;
        }
        goto LABEL_24;
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
LABEL_23:
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1 + 384, v19, v18, (const StringID *)a3, &v27);
    ++*(_DWORD *)(a1 + 424);
LABEL_24:
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v28);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v24);
  }
  return v14 ^ 1u;
}

uint64_t re::ecs2::RenderPassGroupManager::renderPassGroupPerEntity(re::ecs2::RenderPassGroupManager *this)
{
  return (uint64_t)this + 64;
}

double re::ecs2::RenderPassGroupManager::getPerFrameDisqualifiedEntities@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  double result;

  v6 = a1 + 384;
  v7 = a3 & 0xFFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 432) < (a3 & 0xFFFFFFFFFFFFFFFuLL))
  {
    re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1 + 384);
    *(_QWORD *)(a1 + 432) = v7;
  }
  v9 = (_QWORD *)re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v6, a2);
  if (!v9)
    goto LABEL_10;
  v10 = *v9 & 0xFFFFFFFFFFFFFFFLL;
  if (v10 != 0xFFFFFFFFFFFFFFFLL)
  {
    if (v7 == 0xFFFFFFFFFFFFFFFLL || v10 != v7)
      goto LABEL_10;
LABEL_9:
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::HashSetBase(a4, (uint64_t)(v9 + 1));
    return result;
  }
  if (v7 == 0xFFFFFFFFFFFFFFFLL)
    goto LABEL_9;
LABEL_10:
  result = 0.0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 36) = 0x7FFFFFFF;
  return result;
}

void re::ecs2::RenderPassGroupManagerStateTracking::~RenderPassGroupManagerStateTracking(re::ecs2::RenderPassGroupManagerStateTracking *this)
{
  re::ecs2::RenderPassGroupManagerStateTracking::~RenderPassGroupManagerStateTracking(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 34);
  if (v2)
  {
    if (*((_QWORD *)this + 35))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 36));
      *((_QWORD *)this + 35) = 0;
      *((_QWORD *)this + 36) = 0;
    }
    *((_QWORD *)this + 34) = 0;
  }
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    if (*((_QWORD *)this + 32))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 33));
      *((_QWORD *)this + 32) = 0;
      *((_QWORD *)this + 33) = 0;
    }
    *((_QWORD *)this + 31) = 0;
  }
  *(_QWORD *)this = off_24ED5E190;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1);
}

uint64_t re::ecs2::RenderPassGroupManagerStateTracking::trackedComponents(re::ecs2::RenderPassGroupManagerStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t re::ecs2::RenderPassGroupManagerStateTracking::trackedActivationComponents(re::ecs2::RenderPassGroupManagerStateTracking *this)
{
  return *((_QWORD *)this + 36);
}

void re::ecs2::RenderPassGroupManager::~RenderPassGroupManager(re::ecs2::RenderPassGroupManager *this)
{
  re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 48);
  re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 41);
  re::ecs2::RenderPassGroupManagerStateTracking::~RenderPassGroupManagerStateTracking((re::ecs2::RenderPassGroupManager *)((char *)this + 8));
}

{
  re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 48);
  re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 41);
  re::ecs2::RenderPassGroupManagerStateTracking::~RenderPassGroupManagerStateTracking((re::ecs2::RenderPassGroupManager *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::RenderPassGroupManager::registerScene(re::ecs2::RenderPassGroupManager *this, re::EventBus **a2)
{
  re::EventBus *v2;
  re *v3;
  re *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  re *v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  re *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t result;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  re::ecs2::Scene *v44;
  _BYTE v45[24];
  uint64_t v46;
  re *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v44 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  v38[0] = 0;
  v3 = (re::ecs2::RenderPassGroupManager *)((char *)this + 8);
  v38[1] = 0;
  v39 = 1;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v43 = 0;
  v4 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 16))(v3);
  if (v5)
  {
    v6 = (uint64_t *)v4;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      v46 = re::globalAllocators(v4)[2];
      v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
      *(_QWORD *)v9 = &off_24ED5E1D0;
      *((_QWORD *)v9 + 1) = v3;
      *((_QWORD *)v9 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      *((_QWORD *)v9 + 3) = 0;
      v47 = v9;
      v10 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v45, v8, 0);
      v12 = v11;
      v13 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
      *v13 = v10;
      v13[1] = v12;
      if (v47)
      {
        (**(void (***)(re *))v47)(v47);
        if (v47 != (re *)v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      }
      re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v38, v8);
      v4 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v38, v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v14 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 24))(v3);
  if (v15)
  {
    v16 = (uint64_t *)v14;
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v38, v18);
      v14 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v38, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v46 = re::globalAllocators(v14)[2];
  v19 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v19 = &off_24ED5E2D8;
  *((_QWORD *)v19 + 1) = v3;
  *((_QWORD *)v19 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  *((_QWORD *)v19 + 3) = 0;
  v47 = v19;
  v20 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v45, 0, 0);
  v22 = v21;
  v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v23 = v20;
  v23[1] = v22;
  v24 = v47;
  if (v47)
  {
    v24 = (re *)(**(uint64_t (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      v24 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  v46 = re::globalAllocators(v24)[2];
  v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v25 = &off_24ED5E330;
  *((_QWORD *)v25 + 1) = v3;
  *((_QWORD *)v25 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  *((_QWORD *)v25 + 3) = 0;
  v47 = v25;
  v26 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v45, 0, 0);
  v28 = v27;
  v29 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v29 = v26;
  v29[1] = v28;
  v30 = v47;
  if (v47)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  v46 = re::globalAllocators(v30)[2];
  v31 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v31 = &off_24ED5E388;
  *((_QWORD *)v31 + 1) = v3;
  *((_QWORD *)v31 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  *((_QWORD *)v31 + 3) = 0;
  v47 = v31;
  v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v45, 0, 0);
  v34 = v33;
  v35 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v35 = v32;
  v35[1] = v34;
  if (v47)
  {
    (**(void (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v44, (uint64_t)v38);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v44);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v38);
  result = v38[0];
  if (v38[0])
  {
    if ((v39 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v38[0] + 40))();
  }
  return result;
}

uint64_t re::ecs2::RenderPassGroupManager::unregisterScene(re::ecs2::RenderPassGroupManager *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  re::ecs2::Scene *v14;

  v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  v3 = *((_QWORD *)v14 + 13);
  v4 = *(_QWORD *)(v3 + 328);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 344);
    v6 = 8 * v4;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v5 + 288) & 1) != 0)
        (*(void (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8);
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = (char *)this + 160;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    v9 = *((_QWORD *)v14 + 36);
    if (v9)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 40);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t *re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v32, v14, v13);
          v16 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v32[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v22 - 16) >> 31) ^ (*(_QWORD *)(v22 - 16) >> 1));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 80;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13)
          v27 = 2 * v12;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 80 * v9);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 80 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8), a4);
  v29 = *(_QWORD *)(a1 + 16) + 80 * v9;
  v30 = *a5;
  *(_OWORD *)(v29 + 32) = 0u;
  v29 += 32;
  *(_QWORD *)(v29 - 8) = v30;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_DWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v29, a5 + 1);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 80 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_13, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  double result;

  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::trackedActivationComponents()
{
  return 0;
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  double result;

  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    return re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(a1 + 32));
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5E228;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5E280;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E1D0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E1D0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E228;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E228;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E280;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E280;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E2D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E2D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (!*(_BYTE *)(a2 + 371))
  {
    v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E330;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E330;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E388;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E388;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RenderPassGroup>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_13, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1024, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 32 * (a2 & 0x1F);
}

uint64_t re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 32) >> 5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 32 * (v2 & 0x1F);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_13, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t *re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v32, v14, v13);
          v16 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v32[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v22 - 16) >> 31) ^ (*(_QWORD *)(v22 - 16) >> 1));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 80;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13)
          v27 = 2 * v12;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 80 * v9);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 80 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8), a4);
  v29 = *(_QWORD *)(a1 + 16) + 80 * v9;
  v30 = *a5;
  *(_OWORD *)(v29 + 32) = 0u;
  v29 += 32;
  *(_QWORD *)(v29 - 8) = v30;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_DWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v29, a5 + 1);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (__int128 *)(*(_QWORD *)&v13[16] + v10 + 32));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 80 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 80 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 16) = *a4;
  v13 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9);
  v14 = *a5;
  v15 = a5[2];
  v13[3] = a5[1];
  v13[4] = v15;
  v13[2] = v14;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_13, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Pair<re::FrameCount,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t *re::ecs2::allocInfo_ClusterShadowSeparatorComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_195);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_195))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B7D8, 0);
    *(uint64_t *)((char *)&qword_25410B7E8 + 6) = 0;
    qword_25410B7E8 = 0;
    qword_25410B7F8 = 0;
    qword_25410B800 = 0xFFFFFFFFLL;
    qword_25410B7D8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B808 = (uint64_t)"ClusterShadowSeparatorComponent";
    dword_25410B810 = 0;
    unk_25410B818 = 0u;
    unk_25410B828 = 0u;
    unk_25410B838 = 0u;
    qword_25410B848 = 0;
    __cxa_guard_release(&_MergedGlobals_195);
  }
  return &qword_25410B7D8;
}

void re::ecs2::initInfo_ClusterShadowSeparatorComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x4E424AB8BF52B1A4;
  v10[1] = "ClusterShadowSeparatorComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B780);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B780);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B778 = v8;
      __cxa_guard_release(&qword_25410B780);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410B778;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClusterShadowSeparatorComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ClusterShadowSeparatorComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClusterShadowSeparatorComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClusterShadowSeparatorComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ClusterShadowSeparatorComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56E08;
}

void *re::internal::defaultDestruct<re::ecs2::ClusterShadowSeparatorComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClusterShadowSeparatorComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56E08;
}

void *re::internal::defaultDestructV2<re::ecs2::ClusterShadowSeparatorComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClusterShadowSeparatorComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClusterShadowSeparatorComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClusterShadowSeparatorComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClusterShadowSeparatorComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClusterShadowSeparatorComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ClusterShadowMarkerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B788);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B788))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B850, 0);
    *(uint64_t *)((char *)&qword_25410B860 + 6) = 0;
    qword_25410B860 = 0;
    qword_25410B870 = 0;
    qword_25410B878 = 0xFFFFFFFFLL;
    qword_25410B850 = (uint64_t)&off_24ED7DAA8;
    qword_25410B880 = (uint64_t)"ClusterShadowMarkerComponent";
    dword_25410B888 = 0;
    xmmword_25410B890 = 0u;
    unk_25410B8A0 = 0u;
    xmmword_25410B8B0 = 0u;
    qword_25410B8C0 = 0;
    __cxa_guard_release(&qword_25410B788);
  }
  return &qword_25410B850;
}

void re::ecs2::initInfo_ClusterShadowMarkerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xD5DA40D47753ADD2;
  v10[1] = "ClusterShadowMarkerComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B798);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B798);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B790 = v8;
      __cxa_guard_release(&qword_25410B798);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410B790;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClusterShadowMarkerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ClusterShadowMarkerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClusterShadowMarkerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClusterShadowMarkerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ClusterShadowMarkerComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56E88;
}

void *re::internal::defaultDestruct<re::ecs2::ClusterShadowMarkerComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClusterShadowMarkerComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56E88;
}

void *re::internal::defaultDestructV2<re::ecs2::ClusterShadowMarkerComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClusterShadowMarkerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClusterShadowMarkerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClusterShadowMarkerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClusterShadowMarkerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClusterShadowMarkerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ShadowClusterComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B7A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B7A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B8C8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B8D8 = 0;
    qword_25410B8E8 = 0;
    qword_25410B8F0 = 0xFFFFFFFFLL;
    qword_25410B8C8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B8F8 = (uint64_t)"ShadowClusterComponent";
    dword_25410B900 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25410B938 = 0;
    __cxa_guard_release(&qword_25410B7A0);
  }
  return &qword_25410B8C8;
}

void re::ecs2::initInfo_ShadowClusterComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xDFE7254011F9DB06;
  v10[1] = "ShadowClusterComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B7B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B7B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B7A8 = v8;
      __cxa_guard_release(&qword_25410B7B0);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410B7A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowClusterComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ShadowClusterComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowClusterComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowClusterComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ShadowClusterComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56F08;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 76) = 1;
}

void *re::internal::defaultDestruct<re::ecs2::ShadowClusterComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ShadowClusterComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56F08;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 76) = 1;
}

void *re::internal::defaultDestructV2<re::ecs2::ShadowClusterComponent>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ShadowClusterComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ShadowClusterRootComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B7B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B7B8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B940, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B950 = 0;
    qword_25410B960 = 0;
    qword_25410B968 = 0xFFFFFFFFLL;
    qword_25410B940 = (uint64_t)&off_24ED7DAA8;
    qword_25410B970 = (uint64_t)"ShadowClusterRootComponent";
    dword_25410B978 = 0;
    xmmword_25410B980 = 0u;
    unk_25410B990 = 0u;
    xmmword_25410B9A0 = 0u;
    qword_25410B9B0 = 0;
    __cxa_guard_release(&qword_25410B7B8);
  }
  return &qword_25410B940;
}

void re::ecs2::initInfo_ShadowClusterRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xE94DDA63926F6F82;
  v10[1] = "ShadowClusterRootComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410B7C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410B7C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410B7C0 = v8;
      __cxa_guard_release(&qword_25410B7C8);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410B7C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowClusterRootComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ShadowClusterRootComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowClusterRootComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowClusterRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

int32x4_t re::internal::defaultConstruct<re::ecs2::ShadowClusterRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  int32x4_t result;
  __int128 v5;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56F88;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v5;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ShadowClusterRootComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::ShadowClusterRootComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  int32x4_t result;
  __int128 v3;

  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED56F88;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v3;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ShadowClusterRootComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ShadowClusterRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterRootComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ShadowClusterSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410B7D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410B7D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B9B8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B9C8 = 0;
    qword_25410B9D8 = 0;
    qword_25410B9E0 = 0xFFFFFFFFLL;
    qword_25410B9B8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B9E8 = (uint64_t)"ShadowClusterSystem";
    dword_25410B9F0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25410BA28 = 0;
    __cxa_guard_release(&qword_25410B7D0);
  }
  return &qword_25410B9B8;
}

void re::ecs2::initInfo_ShadowClusterSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCF3FEC89DB6BBED2;
  v5[1] = "ShadowClusterSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ShadowClusterSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowClusterSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ShadowClusterSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowClusterSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowClusterSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ShadowClusterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a3 + 256) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED5E3E0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 192) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 196) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 244) = 0x7FFFFFFFLL;
  *(_BYTE *)(v3 + 256) = 1;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ShadowClusterSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 26);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 20);
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ShadowClusterSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED5E3E0;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 196) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_DWORD *)(v1 + 240) = 0;
  *(_QWORD *)(v1 + 244) = 0x7FFFFFFFLL;
  *(_BYTE *)(v1 + 256) = 1;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ShadowClusterSystem>(uint64_t *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 26);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 20);
  *a1 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ShadowClusterSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterSystem>, this);
}

re *re::ecs2::ShadowClusterSystem::willAddSceneToECSService(re *this, re::EventBus **a2)
{
  re::EventBus *v2;
  re *v4;
  uint64_t v5;
  uint64_t v6;
  re *v7;
  __objc2_class_ro *Type;
  unint64_t EventInfo;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re *v14;
  re *v15;
  uint64_t v16;
  re::ecs2::Scene *v17;
  _BYTE v18[24];
  uint64_t v19;
  re *v20;
  _BYTE v21[24];
  uint64_t v22;
  re *v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _BYTE v29[24];
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v17 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (v2)
  {
    v4 = this;
    v5 = (uint64_t)this + 160;
    v6 = re::globalAllocators(this)[2];
    v22 = v6;
    v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 32, 0);
    *(_QWORD *)v7 = &off_24ED5E470;
    *((_QWORD *)v7 + 1) = v4;
    *((_QWORD *)v7 + 2) = re::ecs2::ShadowClusterSystem::onEntityReparented;
    *((_QWORD *)v7 + 3) = 0;
    v23 = v7;
    Type = re::EventBus::getTypeId<RESceneEntityDidReparentEvent>();
    EventInfo = re::EventBus::addOrGetEventInfo(v2, (uint64_t)Type);
    v30 = v6;
    v31 = 0;
    v10 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v29, (uint64_t)v21);
    v27 = re::globalAllocators(v10)[2];
    v28 = 0;
    *(_QWORD *)&v24[0] = &off_24ED5E530;
    v25 = v30;
    v26 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v24 + 8, (uint64_t)v29);
    v28 = v24;
    if (v31)
    {
      (**(void (***)(_BYTE *))v31)(v31);
      if (v31 != v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    }
    v11 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v24, (uint64_t)a2, 0);
    v13 = v12;
    if (v28)
    {
      (**(void (***)(_OWORD *))v28)(v28);
      if (v28 != v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    }
    *(_QWORD *)&v24[0] = v11;
    *((_QWORD *)&v24[0] + 1) = v13;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(v5, (uint64_t *)&v17, v24);
    v14 = v23;
    if (v23)
    {
      v14 = (re *)(**(uint64_t (***)(re *))v23)(v23);
      if (v23 != (re *)v21)
        v14 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
      v23 = 0;
    }
    v19 = re::globalAllocators(v14)[2];
    v15 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 32, 0);
    *(_QWORD *)v15 = &off_24ED5E4D8;
    *((_QWORD *)v15 + 1) = v4;
    *((_QWORD *)v15 + 2) = re::ecs2::ShadowClusterSystem::onComponentWillRemove;
    *((_QWORD *)v15 + 3) = 0;
    v20 = v15;
    *(_QWORD *)&v24[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v18, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    *((_QWORD *)&v24[0] + 1) = v16;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)v4 + 208, (uint64_t *)&v17, v24);
    this = v20;
    if (v20)
    {
      this = (re *)(**(uint64_t (***)(re *))v20)(v20);
      if (v20 != (re *)v18)
        return (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    }
  }
  return this;
}

uint64_t re::ecs2::ShadowClusterSystem::onEntityReparented(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a3[1];
  v25 = *(_QWORD *)(v3 + 224);
  if (v25)
  {
    if (!re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
    {
      if (*a3)
      {
        if (*(_QWORD *)(*a3 + 224))
        {
          v7 = *(_QWORD *)(a1 + 128);
          if (v7)
          {
            v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            v24 = 0;
            v21[1] = 0;
            v22 = 0;
            v21[0] = 0;
            v23 = 0;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v21, &v25);
            v9 = v22;
            if (v22)
            {
              v10 = v8 + 8;
              do
              {
                v11 = v9 - 1;
                v12 = *(_QWORD *)(v24 + 8 * v11);
                v22 = v11;
                ++v23;
                v13 = *(_QWORD *)(v12 + 16);
                v14 = *(_QWORD *)(v13 + 328);
                if (v14)
                {
                  v15 = *(uint64_t **)(v13 + 344);
                  v16 = 8 * v14;
                  do
                  {
                    v17 = *v15;
                    if (*v15)
                      v18 = (id)(v17 + 8);
                    v20 = *(_QWORD *)(v17 + 224);
                    if (v20)
                      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v21, &v20);

                    ++v15;
                    v16 -= 8;
                  }
                  while (v16);
                }
                v19 = *(_QWORD *)(v3 + 224);
                if (v19)
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v10, (uint64_t *)(v19 + 64));
                v9 = v22;
              }
              while (v22);
            }
            if (v21[0] && v24)
              (*(void (**)(void))(*(_QWORD *)v21[0] + 40))();
          }
        }
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::ShadowClusterSystem::onComponentWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 224);
  if (v2)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128));
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v3 + 8, (uint64_t *)(v2 + 64));
  }
  return 0;
}

uint64_t re::ecs2::ShadowClusterSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::ecs2::Scene *v17;

  v17 = a2;
  v2 = *((_QWORD *)a2 + 36);
  if (v2)
  {
    v4 = this;
    v5 = this + 160;
    LODWORD(v6) = 0x7FFFFFFF;
    v7 = (unint64_t)a2 ^ ((unint64_t)a2 >> 30);
    if (*(_QWORD *)(this + 160))
    {
      v8 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
      v9 = *(unsigned int *)(*(_QWORD *)(this + 168) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(this + 184)));
      if ((_DWORD)v9 != 0x7FFFFFFF)
      {
        v10 = *(_QWORD *)(this + 176);
        if (*(re::ecs2::Scene **)(v10 + 40 * v9 + 16) == a2)
        {
          LODWORD(v6) = v9;
        }
        else
        {
          v6 = v9;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v10 + 40 * v6 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v6 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v10 + 40 * v6 + 16) == a2)
              goto LABEL_11;
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    v11 = *(_QWORD *)(this + 176) + 40 * v6;
    re::EventBus::unsubscribe(v2, *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32));
    LODWORD(v12) = 0x7FFFFFFF;
    if (*(_QWORD *)(v4 + 208))
    {
      v13 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
      v14 = *(unsigned int *)(*(_QWORD *)(v4 + 216) + 4 * ((v13 ^ (v13 >> 31)) % *(unsigned int *)(v4 + 232)));
      if ((_DWORD)v14 != 0x7FFFFFFF)
      {
        v15 = *(_QWORD *)(v4 + 224);
        if (*(re::ecs2::Scene **)(v15 + 40 * v14 + 16) == a2)
        {
          LODWORD(v12) = v14;
        }
        else
        {
          v12 = v14;
          while (1)
          {
            LODWORD(v12) = *(_DWORD *)(v15 + 40 * v12 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v12 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v15 + 40 * v12 + 16) == a2)
              goto LABEL_20;
          }
          LODWORD(v12) = 0x7FFFFFFF;
        }
      }
    }
LABEL_20:
    v16 = *(_QWORD *)(v4 + 224) + 40 * v12;
    re::EventBus::unsubscribe(v2, *(_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 32));
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v5, (uint64_t *)&v17);
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v4 + 208, (uint64_t *)&v17);
  }
  return this;
}

void re::ecs2::ShadowClusterSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD *v28;
  unsigned __int8 **v29;
  const re::ecs2::MeshComponent *v30;
  _BYTE *v31;
  unsigned __int8 v32;
  unsigned __int8 *v33;
  _QWORD *v34;
  re::ecs2::MeshComponentHelper *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int32x4_t v68;
  uint64_t v69;
  _BYTE v70[16];
  uint64_t v71[2];
  _QWORD v72[2];
  _BYTE v73[16];
  uint64_t v74;
  _QWORD *v75;
  float32x4_t v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  if (!*(_BYTE *)(a1 + 256))
    return;
  v2 = (_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 424) & 0x10) == 0)
      return;
  }
  v4 = *(_QWORD **)(a1 + 128);
  if (!v4)
    return;
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_75;
  v6 = *(_QWORD **)a2;
  v66 = *(_QWORD *)a2 + 8 * v5;
  v68 = vdupq_n_s32(0x7F800000u);
  v65 = (uint64_t)v2;
  do
  {
    v7 = *v6;
    v8 = (*(uint64_t (**)(_QWORD *))(*v2[16] + 40))(v2[16]);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v7 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v67 = v6;
    if (v9)
    {
      v10 = *(_QWORD ***)(v9 + 40);
      v11 = *(_QWORD *)(v9 + 24);
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v72[0] = v10;
    v72[1] = v11;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v71);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70, 3101, (uint64_t)v2);
    v12 = (*(uint64_t (**)(_QWORD *))(*v2[17] + 24))(v2[17]);
    v69 = v12;
    if (!v11)
    {
      (*(void (**)(_QWORD *))(*v2[18] + 16))(v2[18]);
      goto LABEL_73;
    }
    v13 = v12;
    v14 = v8 + 8;
    v15 = &v10[v11];
    v16 = 8 * v11;
    v17 = 8 * v11;
    v18 = v10;
    do
    {
      v19 = *v18;
      v20 = *v18 + 8;
      if (!*v20)
        goto LABEL_19;
      v21 = *(_QWORD *)(v19[2] + 176);
      (*(void (**)(float32x4_t *__return_ptr, uint64_t))(*(_QWORD *)v13 + 8))(&v76, v13);
      v22 = v76.i64[1];
      if (!v76.i8[0])
        v22 = 0;
      v23 = v19[5];
      if (!v21 || v23 != *(_QWORD *)(v21 + 40))
      {
        v24 = v19[6];
        v19[5] = 0;
        v19[6] = 0;
        v25 = v19[4];
        v19[4] = 0;
        v76.i64[0] = v25;
        v76.i64[1] = v23;
        *(_QWORD *)&v77 = v24;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v76);
LABEL_18:
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v14, v20);
        re::ecs2::Component::markDirty(v19);
        goto LABEL_19;
      }
      if (v19[7] != v22)
      {
        v19[7] = v22;
        goto LABEL_18;
      }
LABEL_19:
      ++v18;
      v17 -= 8;
    }
    while (v17);
    v26 = v16;
    v27 = v10;
    v2 = (_QWORD **)v65;
    do
    {
      v28 = *v27;
      if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v14, *v27 + 8))
      {
        v28[8] = 0;
        re::ecs2::Component::markDirty(v28);
      }
      ++v27;
      v26 -= 8;
    }
    while (v26);
    v76.i64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v65 + 144) + 16))(*(_QWORD *)(v65 + 144));
    v29 = (unsigned __int8 **)v10;
    do
    {
      v30 = (const re::ecs2::MeshComponent *)*((_QWORD *)*v29 + 2);
      if (v30)
      {
        v31 = re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v76, (unint64_t)v30);
        v32 = v31[16] ? v31[17] : 1;
        v33 = *v29;
        if ((*v29)[76] != v32)
        {
          v33[76] = v32;
          re::ecs2::Component::markDirty(v33);
        }
      }
      ++v29;
      v16 -= 8;
    }
    while (v16);
    do
    {
      if (*(_QWORD *)(v65 + 128))
      {
        v63 = *v10;
        if (*((_BYTE *)*v10 + 76))
        {
          if (!v63[8])
          {
            v34 = (_QWORD *)v63[2];
            v35 = (re::ecs2::MeshComponentHelper *)v34[22];
            if (v35)
            {
              v36 = *((_QWORD *)v35 + 5);
              if (v36)
              {
                v37 = atomic_load((unsigned int *)(v36 + 704));
                if (v37 == 2 && (re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(v35, v30) & 1) == 0)
                {
                  v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v65 + 128) + 40))(*(_QWORD *)(v65 + 128));
                  (*(void (**)(float32x4_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v69 + 8))(&v76, v69, v34);
                  if (v76.i8[0])
                    v39 = v76.i64[1];
                  else
                    v39 = 0;
                  v40 = v34[3];
                  if (v40 && (*(_BYTE *)(v40 + 288) & 0x80) == 0)
                  {
                    while (1)
                    {
                      v41 = (_QWORD *)v40;
                      if (!*(_QWORD *)(v40 + 224))
                        break;
                      (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v69 + 8))(&v76, v69, v40);
                      v42 = v76.i8[0] ? v76.i64[1] : 0;
                      if (v39 != v42)
                        break;
                      if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
                      {
                        *(_QWORD *)&v61 = 0x7F0000007FLL;
                        *((_QWORD *)&v61 + 1) = 0x7F0000007FLL;
                        v76 = (float32x4_t)v68;
                        v77 = v61;
                        v62 = *(_QWORD *)(v38 + 104);
                        *(_QWORD *)(v38 + 104) = v62 + 1;
                        re::ecs2::ShadowClusterSystem::trySetPhysicsCluster(v34, v62, &v69, &v76);
                        goto LABEL_70;
                      }
                      v40 = v41[3];
                      if (v40)
                      {
                        v34 = v41;
                        if ((*(_BYTE *)(v40 + 288) & 0x80) == 0)
                          continue;
                      }
                      goto LABEL_54;
                    }
                  }
                  v41 = v34;
LABEL_54:
                  v78 = 0;
                  v76 = 0u;
                  v77 = 0u;
                  v79 = 0x7FFFFFFFLL;
                  re::ecs2::ShadowClusterSystem::recursivelyCluster((uint64_t)v73, v65, v41, (uint64_t)v72, &v69, (uint64_t)&v76);
                  if (v74)
                  {
                    v43 = v75;
                    v44 = &v75[10 * v74];
                    do
                    {
                      v45 = v43[2];
                      if (v45)
                      {
                        v46 = (float32x4_t *)v43[4];
                        v47 = &v46[2 * v45];
                        v48.i64[0] = 0x7F0000007FLL;
                        v48.i32[2] = 127;
                        v49 = (float32x4_t)v68;
                        do
                        {
                          v50 = *v46;
                          v51 = v46[1];
                          v46 += 2;
                          v49.i32[3] = 0;
                          v50.i32[3] = 0;
                          v48.i32[3] = 0;
                          v49 = vminnmq_f32(v49, v50);
                          v51.i32[3] = 0;
                          v48 = vmaxnmq_f32(v48, v51);
                        }
                        while (v46 != v47);
                        v52 = vsubq_f32(v48, v49);
                      }
                      else
                      {
                        v52.i64[0] = 0x7F0000007FLL;
                        v52.i32[2] = 127;
                      }
                      v53 = *(_QWORD *)(v38 + 104);
                      *(_QWORD *)(v38 + 104) = v53 + 1;
                      v54 = v43[7];
                      if (v54)
                      {
                        v52.i32[3] = 0;
                        v55 = vmaxnmq_f32(v52, (float32x4_t)0);
                        v56 = vmulq_f32(v55, v55);
                        v56.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]);
                        v57 = fminf(fminf(v55.f32[0], v55.f32[2]), v55.f32[1])
                            / fmaxf((float)(v56.f32[0] * 0.5) + (float)(v56.f32[0] * 0.5), 0.0001);
                        v58 = (uint64_t *)v43[9];
                        v59 = 8 * v54;
                        do
                        {
                          v60 = *v58++;
                          *(float *)(v60 + 72) = v57;
                          *(_QWORD *)(v60 + 64) = v53;
                          re::ecs2::Component::markDirty((_QWORD *)v60);
                          v59 -= 8;
                        }
                        while (v59);
                      }
                      v43 += 10;
                    }
                    while (v43 != v44);
                  }
                  re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)v73);
                  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v76);
                }
              }
            }
          }
        }
      }
LABEL_70:
      ++v10;
    }
    while (v10 != v15);
LABEL_73:
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70);
    re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v71);
    v6 = v67 + 1;
  }
  while (v67 + 1 != (_QWORD *)v66);
  v4 = v2[16];
LABEL_75:
  v64 = (*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v64 + 8);
}

uint64_t re::ecs2::ShadowClusterSystem::trySetPhysicsCluster(_QWORD *a1, uint64_t a2, _QWORD *a3, float32x4_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float32x4_t *v12;
  float32x4_t v13;
  uint32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  float32x4_t v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float32x4_t v39;
  float32x4_t v40;

  v8 = a1[28];
  v9 = a1[22];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 40);
    if (v10)
    {
      v11 = atomic_load((unsigned int *)(v10 + 704));
      if (v11 != 2)
        return 0;
      v12 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v9 + 32));
      v35 = xmmword_2260E5F10;
      v36 = xmmword_2260E5F20;
      v37 = xmmword_2260E5F40;
      v38 = xmmword_2260E5D70;
      re::MeshAsset::aabbFromMesh(v12, (float32x4_t *)&v35, (uint64_t)&v39);
      re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v9 + 16), (const re::ecs2::Entity *)1, &v35);
      v13 = v39;
      v14 = (uint32x4_t)vcgtq_f32(v39, v40);
      v14.i32[3] = v14.i32[2];
      if ((vmaxvq_u32(v14) & 0x80000000) != 0)
      {
        v17 = 0uLL;
        v16 = 0uLL;
      }
      else
      {
        v15.i64[0] = 0x3F0000003F000000;
        v15.i64[1] = 0x3F0000003F000000;
        v16 = vmulq_f32(vaddq_f32(v39, v40), v15);
        v17 = vsubq_f32(v39, v16);
        v13 = v16;
      }
      v34[0] = vaddq_f32(v17, v13);
      v34[1] = vaddq_f32(v16, vsubq_f32(v40, v16));
      re::AABB::transform(v34, (float32x4_t *)&v35, (uint64_t)v33);
      v18 = *a4;
      v19 = a4[1];
      v18.i32[3] = 0;
      v20 = (float32x4_t)v33[0];
      v21 = (float32x4_t)v33[1];
      v20.i32[3] = 0;
      v19.i32[3] = 0;
      v21.i32[3] = 0;
      *a4 = vminnmq_f32(v18, v20);
      a4[1] = vmaxnmq_f32(v19, v21);
    }
  }
  if (a1[41])
  {
    v22 = 0;
    v23 = 1;
    do
    {
      v24 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)(a1 + 38), v22);
      v25 = re::ecs2::ShadowClusterSystem::trySetPhysicsCluster(*v24, a2, a3, a4);
      if (a1[41] <= (unint64_t)v23)
        break;
      v22 = v23++;
    }
    while ((v25 & 1) != 0);
    if ((v25 & 1) == 0)
      return 0;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a3 + 8))(&v35, *a3, a1);
  if ((_BYTE)v35)
    v26 = *((_QWORD *)&v35 + 1);
  else
    v26 = 0;
  if (v8 && v9)
  {
    if (*(_QWORD *)(v9 + 40))
    {
      v27 = vsubq_f32(a4[1], *a4);
      v27.i32[3] = 0;
      v28 = vmaxnmq_f32(v27, (float32x4_t)0);
      v29 = vmulq_f32(v28, v28);
      v29.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
      *(float *)(v8 + 72) = fminf(fminf(v28.f32[0], v28.f32[2]), v28.f32[1])
                          / fmaxf((float)(v29.f32[0] * 0.5) + (float)(v29.f32[0] * 0.5), 0.0001);
      *(_QWORD *)(v8 + 64) = a2;
      re::AssetHandle::operator=((uint64_t *)(v8 + 32), (uint64_t *)(v9 + 32));
LABEL_23:
      *(_QWORD *)(v8 + 56) = v26;
      re::ecs2::Component::markDirty((_QWORD *)v8);
      return 1;
    }
LABEL_22:
    *(_BYTE *)(v8 + 76) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    v31 = *(_OWORD *)(v8 + 32);
    v32 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    v35 = v31;
    *(_QWORD *)&v36 = v32;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
    goto LABEL_23;
  }
  if (v8)
    goto LABEL_22;
  return 1;
}

float32x4_t *`anonymous namespace'::getScaledWorldAABB(_anonymous_namespace_ *this, re::ecs2::TransformComponent ***a2, double a3)
{
  float32x4_t *v5;
  uint32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v13[2];
  float32x4_t v14[4];
  float32x4_t v15;
  float32x4_t v16;

  v5 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(a2 + 4));
  v14[0] = (float32x4_t)xmmword_2260E5F10;
  v14[1] = (float32x4_t)xmmword_2260E5F20;
  v14[2] = (float32x4_t)xmmword_2260E5F40;
  v14[3] = (float32x4_t)xmmword_2260E5D70;
  re::MeshAsset::aabbFromMesh(v5, v14, (uint64_t)&v15);
  re::ecs2::TransformComponent::worldMatrix4x4F(a2[2], (const re::ecs2::Entity *)1, v14);
  v6 = (uint32x4_t)vcgtq_f32(v15, v16);
  v6.i32[3] = v6.i32[2];
  if ((vmaxvq_u32(v6) & 0x80000000) != 0)
  {
    v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v8 = 0uLL;
    v10 = vaddq_f32(vmulq_n_f32(v15, *(float *)&a3), (float32x4_t)0);
  }
  else
  {
    v7.i64[0] = 0x3F0000003F000000;
    v7.i64[1] = 0x3F0000003F000000;
    v8 = vmulq_f32(vaddq_f32(v15, v16), v7);
    v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v10 = vaddq_f32(v8, vmulq_n_f32(vsubq_f32(v15, v8), *(float *)&a3));
  }
  v13[0] = v10;
  v13[1] = vaddq_f32(v8, vmulq_f32(v9, vsubq_f32(v16, v8)));
  return re::AABB::transform(v13, v14, (uint64_t)this);
}

void re::ecs2::ShadowClusterSystem::recursivelyCluster(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v19;
  uint64_t *v20;
  _BOOL8 v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t *v32;
  uint32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  float v52;
  uint64_t v53;
  uint64_t v54[6];
  uint64_t v55[7];
  uint64_t v56;
  _BYTE v57[40];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  uint64_t v65[3];
  int v66;
  uint64_t v67;
  uint64_t v68[3];
  int v69;
  uint64_t v70;
  float32x4_t v71[2];
  float32x4_t v72;
  float32x4_t v73;

  v7 = a3[28];
  v56 = v7;
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity((_QWORD *)a1, 0);
    ++*(_DWORD *)(a1 + 24);
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a5 + 8))(&v59, *a5, a3);
    if ((_BYTE)v59)
      v10 = *((_QWORD *)&v59 + 1);
    else
      v10 = 0;
    if (a3[41])
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = re::ecs2::EntityComponentCollection::operator[]((uint64_t)(a3 + 38), v11);
        v14 = *(_QWORD *)v13;
        if (!re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a5 + 8))(&v59, *a5, v14);
          v15 = (_BYTE)v59 ? *((_QWORD *)&v59 + 1) : 0;
          if (v10 == v15)
          {
            re::ecs2::ShadowClusterSystem::recursivelyCluster(&v59, a2, v14, a4, a5, a6);
            if ((_QWORD)v60)
            {
              v16 = 0;
              v17 = 1;
              do
              {
                re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add((_anonymous_namespace_ *)a1, v61 + 80 * v16);
                v16 = v17;
              }
              while ((unint64_t)v60 > v17++);
            }
            re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)&v59);
          }
        }
        v11 = ++v12;
      }
      while (a3[41] > (unint64_t)v12);
    }
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 128) + 32))(&v53);
    v19 = HIDWORD(v53);
    re::ecs2::ShadowClusterSystem::mergeClusters((uint64_t)&v59, (uint64_t *)a1, (uint64_t *)a1, *(float *)&v53);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1, (uint64_t)&v59);
    re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)&v59);
    if (*(_BYTE *)(v7 + 76))
    {
      v20 = (uint64_t *)(v7 + 64);
      if (*(_QWORD *)(v7 + 64))
      {
        v21 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a6, (uint64_t *)(v7 + 64));
        if (!v21)
        {
          v22 = *v20;
          v70 = 0;
          v68[1] = 0;
          v68[2] = 0;
          v69 = 0;
          v23 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity(v68, 0);
          ++v69;
          v67 = 0;
          v65[1] = 0;
          v65[2] = 0;
          v66 = 0;
          re::DynamicArray<float *>::setCapacity(v65, 0);
          ++v66;
          v24 = *(_QWORD *)(a2 + 128);
          if (v24)
          {
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v24 + 32))(&v59);
            v52 = *((float *)&v59 + 1);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v62 + 1);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v59 + 1);
            v25 = *(_QWORD *)(a4 + 8);
            if (v25)
            {
              v26 = *(uint64_t **)a4;
              v27 = 8 * v25;
              do
              {
                v28 = *v26;
                v58 = v28;
                if (*(_QWORD *)(v28 + 64) == v22)
                {
                  v29 = *(_QWORD *)(*(_QWORD *)(v28 + 16) + 176);
                  if (v29)
                  {
                    v30 = *(_QWORD *)(v29 + 40);
                    if (v30)
                    {
                      v31 = atomic_load((unsigned int *)(v30 + 704));
                      if (v31 == 2)
                      {
                        v32 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v29 + 32));
                        v59 = xmmword_2260E5F10;
                        v60 = xmmword_2260E5F20;
                        v61 = xmmword_2260E5F40;
                        v62 = xmmword_2260E5D70;
                        re::MeshAsset::aabbFromMesh(v32, (float32x4_t *)&v59, (uint64_t)&v72);
                        re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v29 + 16), (const re::ecs2::Entity *)1, &v59);
                        v33 = (uint32x4_t)vcgtq_f32(v72, v73);
                        v33.i32[3] = v33.i32[2];
                        if ((vmaxvq_u32(v33) & 0x80000000) != 0)
                        {
                          v36 = v52;
                          v35 = vmulq_n_f32(v72, v52);
                          v37 = 0uLL;
                          v38 = 0uLL;
                        }
                        else
                        {
                          v34.i64[0] = 0x3F0000003F000000;
                          v34.i64[1] = 0x3F0000003F000000;
                          v35 = vmulq_f32(vaddq_f32(v72, v73), v34);
                          v36 = v52;
                          v37 = vmulq_n_f32(vsubq_f32(v72, v35), v52);
                          v38 = v35;
                        }
                        v71[0] = vaddq_f32(v37, v35);
                        v71[1] = vaddq_f32(v38, vmulq_n_f32(vsubq_f32(v73, v38), v36));
                        re::AABB::transform(v71, (float32x4_t *)&v59, (uint64_t)v57);
                        re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v68, (uint64_t)v57);
                        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v65, &v58);
                      }
                    }
                  }
                }
                ++v26;
                v27 -= 8;
              }
              while (v27);
            }
          }
          re::DynamicArray<re::AABB>::DynamicArray((uint64_t)&v59, v68);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v61 + 8, v65);
          if (v65[0] && v67)
            (*(void (**)(void))(*(_QWORD *)v65[0] + 40))();
          if (v68[0] && v70)
            (*(void (**)(void))(*(_QWORD *)v68[0] + 40))();
          re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add((_anonymous_namespace_ *)a1, (uint64_t)&v59);
          if (*((_QWORD *)&v61 + 1))
          {
            if (v64)
              (*(void (**)(void))(**((_QWORD **)&v61 + 1) + 40))();
            v64 = 0;
            v62 = 0uLL;
            *((_QWORD *)&v61 + 1) = 0;
            ++v63;
          }
          if ((_QWORD)v59)
          {
            if ((_QWORD)v61)
              (*(void (**)(void))(*(_QWORD *)v59 + 40))();
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a6, v20);
        }
      }
      else
      {
        v39 = a3[22];
        if (v39 && (v40 = *(_QWORD *)(v39 + 40)) != 0 && (v41 = atomic_load((unsigned int *)(v40 + 704)), v41 != 3))
        {
          re::AssetHandle::operator=((uint64_t *)(v7 + 32), (uint64_t *)(v39 + 32));
          *(_QWORD *)(v7 + 56) = v10;
          re::ecs2::Component::markDirty((_QWORD *)v7);
          v44 = *(_QWORD *)(v39 + 40);
          if (v44)
          {
            v45 = atomic_load((unsigned int *)(v44 + 704));
            if (v45 == 2)
            {
              *(_QWORD *)&v61 = 0;
              *(_QWORD *)&v60 = 0;
              v59 = 0uLL;
              DWORD2(v60) = 0;
              re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::resize(&v59);
              v46 = v60;
              v47 = v61;
              re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::operator[](v60);
              LODWORD(v48) = v19;
              re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v47, (uint64_t)v68);
              re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::operator[](v46);
              re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(v47 + 40), &v56);
              re::ecs2::ShadowClusterSystem::mergeClusters((uint64_t)v68, (uint64_t *)&v59, (uint64_t *)a1, 0.0);
              re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1, (uint64_t)v68);
              re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)v68);
              re::DynamicArray<re::RigBasicConstraint>::deinit((uint64_t)&v59);
            }
          }
        }
        else
        {
          *(_QWORD *)(v7 + 64) = 0;
          v42 = *(_OWORD *)(v7 + 32);
          v43 = *(_QWORD *)(v7 + 48);
          *(_QWORD *)(v7 + 40) = 0;
          *(_QWORD *)(v7 + 48) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          v59 = v42;
          *(_QWORD *)&v60 = v43;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v59);
          *(_QWORD *)(v7 + 56) = v10;
          re::ecs2::Component::markDirty((_QWORD *)v7);
        }
      }
    }
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v55);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v54);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
}

__n128 re::DynamicArray<re::AABB>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  _OWORD *v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::AABB>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_OWORD *)(*((_QWORD *)this + 4) + 32 * v4);
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *v5 = *(_OWORD *)a2;
  v5[1] = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::ShadowClusterSystem::mergeClusters(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t i;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int Set;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  __n128 v89;
  int32x4_t v90;
  int32x4_t v91;
  uint64_t v92;
  int32x4_t v93;
  int32x4_t v94;
  uint64_t v95;
  _OWORD v96[2];
  __int128 v97;
  __int128 v98;
  unsigned int v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  _DWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  unsigned int v116;
  uint64_t v117;
  _QWORD v118[15];
  uint64_t v119;
  _QWORD v120[3];
  _QWORD *v121;
  int v122;
  const char *v123;
  __int16 v124;
  int v125;
  __int16 v126;
  unint64_t v127;
  __int16 v128;
  unint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (!a2[2])
  {
    a2 = a3;
    goto LABEL_8;
  }
  v6 = a2;
  if (!a3[2])
  {
LABEL_8:
    re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::DynamicArray(a1, a2);
    return;
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v118);
  v116 = 0;
  v114 = 0u;
  v115 = 0u;
  v117 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v114, (uint64_t)v118, 3);
  v113 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v109 = v118;
  re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v109, 0);
  ++v112;
  v108 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v104 = v118;
  re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v104, 0);
  ++v107;
  v8 = v6[2];
  if (v8)
  {
    v9 = 0;
    v10 = 80 * v8;
    v11 = (uint64_t *)(v6[4] + 16);
    do
    {
      v12 = *v11;
      v11 += 10;
      v9 += v12;
      v10 -= 80;
    }
    while (v10);
  }
  else
  {
    v9 = 0;
  }
  v13 = a3[2];
  if (v13)
  {
    v14 = 0;
    v15 = 80 * v13;
    v16 = (uint64_t *)(a3[4] + 16);
    do
    {
      v17 = *v16;
      v16 += 10;
      v14 += v17;
      v15 -= 80;
    }
    while (v15);
  }
  else
  {
    v14 = 0;
  }
  if (v110 < v9)
    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v109, v9);
  if (v105 < v14)
    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v104, v14);
  v18 = v6[2];
  if (v18)
  {
    v19 = v6[4];
    v20 = v19 + 80 * v18;
    v90 = vdupq_n_s32(0x3727C5ACu);
    v93 = vdupq_n_s32(0xB727C5AC);
    do
    {
      v21 = (int *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)&v114, v19);
      if (!v21)
      {
        v130.i64[0] = v19;
        LODWORD(v97) = HIDWORD(v115);
        v21 = (int *)re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::add((uint64_t)&v114, (uint64_t *)&v130, &v97);
      }
      v22 = *(_QWORD *)(v19 + 16);
      v24 = (float32x4_t)v90;
      v23 = (float32x4_t)v93;
      if (v22)
      {
        v25 = *v21;
        v26 = *(float32x4_t **)(v19 + 32);
        v27 = &v26[2 * v22];
        do
        {
          v28 = *v26;
          v29 = v26[1];
          v26 += 2;
          v130 = vaddq_f32(v28, v23);
          v131 = vaddq_f32(v29, v24);
          LODWORD(v132) = v25;
          re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v109, (uint64_t)&v130);
          v24 = (float32x4_t)v90;
          v23 = (float32x4_t)v93;
        }
        while (v26 != v27);
      }
      v19 += 80;
    }
    while (v19 != v20);
  }
  v30 = a3[2];
  if (v30)
  {
    v31 = a3[4];
    v32 = v31 + 80 * v30;
    v91 = vdupq_n_s32(0x3727C5ACu);
    v94 = vdupq_n_s32(0xB727C5AC);
    do
    {
      v33 = (int *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)&v114, v31);
      if (!v33)
      {
        v130.i64[0] = v31;
        LODWORD(v97) = HIDWORD(v115);
        v33 = (int *)re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::add((uint64_t)&v114, (uint64_t *)&v130, &v97);
      }
      v34 = *(_QWORD *)(v31 + 16);
      v36 = (float32x4_t)v91;
      v35 = (float32x4_t)v94;
      if (v34)
      {
        v37 = *v33;
        v38 = *(float32x4_t **)(v31 + 32);
        v39 = &v38[2 * v34];
        do
        {
          v40 = *v38;
          v41 = v38[1];
          v38 += 2;
          v130 = vaddq_f32(v40, v35);
          v131 = vaddq_f32(v41, v36);
          LODWORD(v132) = v37;
          re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v104, (uint64_t)&v130);
          v36 = (float32x4_t)v91;
          v35 = (float32x4_t)v94;
        }
        while (v38 != v39);
      }
      v31 += 80;
    }
    while (v31 != v32);
  }
  v42 = HIDWORD(v115);
  v102 = HIDWORD(v115);
  v103 = 0;
  v101 = v118;
  if (HIDWORD(v115))
  {
    v43 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v118[0] + 32))(v118, 8 * HIDWORD(v115), 4);
    v103 = v43;
    if (!v43)
      goto LABEL_112;
    v45 = v43;
    v46 = v42 - 1;
    if (v42 != 1)
    {
      v45 = v43;
      do
      {
        *v45++ = 0x100000000;
        --v46;
      }
      while (v46);
    }
    *v45 = 0x100000000;
    v47 = v102;
    if (v102)
    {
      v48 = 1;
      do
      {
        *v43 = v48 - 1;
        v43 += 2;
      }
      while (v47 > v48++);
    }
  }
  v120[0] = &off_24ED5E588;
  v120[1] = &v101;
  v120[2] = LODWORD(a4);
  v121 = v120;
  v95 = v113;
  v92 = v108;
  re::intersectAABBs(v113);
  v50 = v121;
  if (v121 == v120)
  {
    v51 = 4;
    v50 = v120;
    goto LABEL_47;
  }
  if (v121)
  {
    v51 = 5;
LABEL_47:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = *v6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = v52;
  re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  v99 = 0;
  v97 = 0u;
  v98 = 0u;
  v100 = 0x7FFFFFFFLL;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)&v97, (uint64_t)v118, 3);
  if ((_DWORD)v42)
  {
    for (i = 0; i != v42; ++i)
    {
      if (i == re::UnionFind::findSet((re::UnionFind *)&v101, i))
      {
        v54 = *(_DWORD *)(a1 + 16);
        v130 = 0uLL;
        v131.i32[2] = 0;
        v131.i64[0] = 0;
        *((_QWORD *)&v134 + 1) = 0;
        v132 = 0u;
        v133 = 0u;
        LODWORD(v134) = 0;
        re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add((_anonymous_namespace_ *)a1, (uint64_t)&v130);
        if (*((_QWORD *)&v132 + 1) && *((_QWORD *)&v134 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v132 + 1) + 40))(*((_QWORD *)&v132 + 1));
        if (v130.i64[0] && (_QWORD)v132)
          (*(void (**)(uint64_t))(*(_QWORD *)v130.i64[0] + 40))(v130.i64[0]);
        v55 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (i ^ (i >> 30))) ^ ((0xBF58476D1CE4E5B9 * (i ^ (i >> 30))) >> 27));
        v56 = v55 ^ (v55 >> 31);
        v57 = v97;
        if (!(_QWORD)v97
          || (v57 = v56 % DWORD2(v98),
              v58 = *(unsigned int *)(*((_QWORD *)&v97 + 1) + 4 * v57),
              (_DWORD)v58 == 0x7FFFFFFF))
        {
LABEL_61:
          v59 = v100;
          if ((_DWORD)v100 == 0x7FFFFFFF)
          {
            v59 = v99;
            v60 = v99;
            if (v99 == DWORD2(v98))
            {
              re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity((uint64_t)&v97, 2 * HIDWORD(v98));
              v60 = v99;
              v57 = v56 % DWORD2(v98);
            }
            v99 = v60 + 1;
            v61 = v98;
            v62 = *(_DWORD *)(v98 + 24 * v59 + 8);
          }
          else
          {
            v61 = v98;
            v62 = *(_DWORD *)(v98 + 24 * v100 + 8);
            LODWORD(v100) = v62 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v61 + 24 * v59 + 8) = v62 | 0x80000000;
          v63 = *((_QWORD *)&v97 + 1);
          *(_DWORD *)(v98 + 24 * v59 + 8) = *(_DWORD *)(v98 + 24 * v59 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)&v97 + 1) + 4 * v57);
          *(_QWORD *)(v98 + 24 * v59) = v56;
          *(_DWORD *)(v98 + 24 * v59 + 12) = i;
          *(_DWORD *)(v98 + 24 * v59 + 16) = v54;
          *(_DWORD *)(v63 + 4 * v57) = v59;
          ++HIDWORD(v98);
          ++HIDWORD(v100);
        }
        else
        {
          while (i != *(_DWORD *)(v98 + 24 * v58 + 12))
          {
            LODWORD(v58) = *(_DWORD *)(v98 + 24 * v58 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v58 == 0x7FFFFFFF)
              goto LABEL_61;
          }
        }
      }
    }
  }
  v64 = v116;
  if (v116)
  {
    v65 = 0;
    v66 = (int *)(v115 + 8);
    while (1)
    {
      v67 = *v66;
      v66 += 8;
      if (v67 < 0)
        break;
      if (v116 == ++v65)
      {
        LODWORD(v65) = v116;
        break;
      }
    }
  }
  else
  {
    LODWORD(v65) = 0;
  }
  if (v116 != (_DWORD)v65)
  {
    v68 = v65;
    v69 = v115;
    while (1)
    {
      v70 = v69 + 32 * v68;
      Set = re::UnionFind::findSet((re::UnionFind *)&v101, *(unsigned int *)(v70 + 24));
      if (!(_QWORD)v97)
        break;
      v72 = 0xBF58476D1CE4E5B9 * (Set ^ ((unint64_t)Set >> 30));
      v73 = ((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) ^ ((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) >> 31))
          % DWORD2(v98);
      v74 = v98;
      v75 = *(unsigned int *)(*((_QWORD *)&v97 + 1) + 4 * v73);
      if ((_DWORD)v75 == 0x7FFFFFFF)
        goto LABEL_82;
      while (*(_DWORD *)(v98 + 24 * v75 + 12) != Set)
      {
        v75 = *(_DWORD *)(v98 + 24 * v75 + 8) & 0x7FFFFFFF;
        if (v75 == 0x7FFFFFFF)
          goto LABEL_82;
      }
LABEL_83:
      v76 = v70 + 16;
      v77 = *(unsigned int *)(v74 + 24 * v75 + 16);
      v78 = *(_QWORD **)v76;
      v79 = *(_QWORD *)(*(_QWORD *)v76 + 16);
      if (!v79)
        goto LABEL_88;
      v80 = (_OWORD *)v78[4];
      v81 = 32 * v79;
      do
      {
        v82 = v80[1];
        v96[0] = *v80;
        v96[1] = v82;
        v83 = *(_QWORD *)(a1 + 16);
        if (v83 <= v77)
        {
          v119 = 0;
          v133 = 0u;
          v134 = 0u;
          v131 = 0u;
          v132 = 0u;
          v130 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v122 = 136315906;
          v123 = "operator[]";
          v124 = 1024;
          v125 = 789;
          v126 = 2048;
          v127 = v77;
          v128 = 2048;
          v129 = v83;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_111;
        }
        re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)(*(_QWORD *)(a1 + 32) + 80 * v77), (uint64_t)v96);
        v80 += 2;
        v81 -= 32;
      }
      while (v81);
      v78 = *(_QWORD **)v76;
LABEL_88:
      v84 = v78[7];
      if (v84)
      {
        v85 = (uint64_t *)v78[9];
        v86 = 8 * v84;
        while (1)
        {
          v119 = *v85;
          v76 = *(_QWORD *)(a1 + 16);
          if (v76 <= v77)
            break;
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(*(_QWORD *)(a1 + 32) + 80 * v77 + 40), &v119);
          ++v85;
          v86 -= 8;
          if (!v86)
            goto LABEL_92;
        }
LABEL_111:
        *(_QWORD *)&v96[0] = 0;
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        v130 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v122 = 136315906;
        v123 = "operator[]";
        v124 = 1024;
        v125 = 789;
        v126 = 2048;
        v127 = v77;
        v128 = 2048;
        v129 = v76;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_112:
        re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
LABEL_92:
      if (v64 <= (int)v65 + 1)
        v87 = v65 + 1;
      else
        v87 = v64;
      while (1)
      {
        v68 = (v65 + 1);
        if (v87 - 1 == (_DWORD)v65)
          break;
        LODWORD(v65) = v65 + 1;
        v88 = v68;
        if ((*(_DWORD *)(v69 + 32 * v68 + 8) & 0x80000000) != 0)
          goto LABEL_99;
      }
      v88 = v87;
LABEL_99:
      LODWORD(v65) = v88;
      if (v64 == v88)
        goto LABEL_100;
    }
    v74 = v98;
LABEL_82:
    LODWORD(v75) = 0x7FFFFFFF;
    goto LABEL_83;
  }
LABEL_100:
  v89.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v97);
  if (v101 && v102)
    (*(void (**)(double))(*v101 + 40))(v89.n128_f64[0]);
  if (v104 && v92)
    (*(void (**)(__n128))(*v104 + 40))(v89);
  if (v109)
  {
    if (v95)
      (*(void (**)(__n128))(*v109 + 40))(v89);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v114);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v118);
}

uint64_t re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::add(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

__n128 re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 48 * v5;
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 32) = v13;
  *(__n128 *)v11 = result;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 80 * v5;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 24) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v13;
  v14 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v14;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  v15 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v11 + 48) = v15;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v16 = *(_QWORD *)(v11 + 56);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v16;
  v17 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v17;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(v11 + 64);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::UnionFind::findSet(re::UnionFind *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t Set;

  v2 = a2;
  if (*((_QWORD *)this + 1) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)this + 2) + 8 * a2);
  if (v5 != (_DWORD)v3)
  {
    Set = re::UnionFind::findSet(this, v5);
    if (*((_QWORD *)this + 1) > v2)
    {
      v3 = Set;
      *(_DWORD *)(*((_QWORD *)this + 2) + 8 * v2) = Set;
      return v3;
    }
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v3;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::operator[](uint64_t result)
{
  if (!result)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::resize(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = result[2];
  if (v1 != 1)
  {
    v2 = result;
    if (v1)
    {
      v4 = 0;
      v5 = 1;
      do
      {
        v6 = v2[4];
        v7 = v6 + v4;
        v8 = *(_QWORD *)(v6 + v4 + 120);
        if (v8)
        {
          if (*(_QWORD *)(v7 + 152))
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
          *(_QWORD *)(v7 + 152) = 0;
          *(_QWORD *)(v6 + v4 + 128) = 0;
          *(_QWORD *)(v6 + v4 + 136) = 0;
          *(_QWORD *)(v6 + v4 + 120) = 0;
          ++*(_DWORD *)(v6 + v4 + 144);
        }
        v9 = v6 + v4 + 80;
        result = *(_QWORD **)v9;
        if (*(_QWORD *)v9)
        {
          v10 = v6 + v4;
          if (*(_QWORD *)(v10 + 112))
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
          *(_QWORD *)(v10 + 112) = 0;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          *(_QWORD *)v9 = 0;
          ++*(_DWORD *)(v10 + 104);
        }
        ++v5;
        v4 += 80;
      }
      while (v5 < v2[2]);
    }
    else if (result[1]
           || (result = re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity(result, 1uLL), !v2[2]))
    {
      v3 = v2[4];
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 72) = 0;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_DWORD *)(v3 + 64) = 0;
    }
    v2[2] = 1;
    ++*((_DWORD *)v2 + 6);
  }
  return result;
}

void re::ecs2::ShadowClusterSystem::~ShadowClusterSystem(re::ecs2::ShadowClusterSystem *this)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ShadowClusterSystem::typeInfo(re::ecs2::ShadowClusterSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowClusterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowClusterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowClusterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowClusterSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E470;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E470;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5E4D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5E4D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ShadowClusterSystem,REEventHandlerResult (re::ecs2::ShadowClusterSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ShadowClusterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED5E530;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED5E530;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5E530;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5E530;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneEntityDidReparentEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneEntityDidReparentEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::DynamicArray<re::AABB>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::AABB>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::AABB>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::AABB>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AABB>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::AABB>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::AABB>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 32 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 32 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 32 * (_QWORD)v5), 32 * v4 - 32 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 32 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::DynamicArray<re::AABB>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::AABB>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AABB>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    v6 = a2[2];
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity((_QWORD *)a1, a2[2]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *>((void **)a2[4], (void **)(a2[4] + 80 * *(_QWORD *)(a1 + 16)), *(void ***)(a1 + 32));
      v11 = *(_QWORD *)(a1 + 16);
      if (v11 != v6)
      {
        v12 = 5 * v11;
        v13 = (uint64_t *)(a2[4] + 16 * v12);
        v14 = *(_QWORD *)(a1 + 32) + 16 * v12;
        v15 = 80 * v6 - 16 * v12;
        do
        {
          re::DynamicArray<re::AABB>::DynamicArray(v14, v13);
          re::DynamicArray<char const*>::DynamicArray(v14 + 40, v13 + 5);
          v13 += 10;
          v14 += 80;
          v15 -= 80;
        }
        while (v15);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *>((void **)a2[4], (void **)(a2[4] + 80 * v6), *(void ***)(a1 + 32));
      v7 = *(_QWORD *)(a1 + 16);
      if (v6 != v7)
      {
        v8 = 80 * v7 - 80 * v6;
        v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 80 * v6 + 40);
        do
        {
          v10 = v9 - 5;
          if (*v9)
          {
            if (v9[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 40))(*v9);
            v9[4] = 0;
            v9[1] = 0;
            v9[2] = 0;
            *v9 = 0;
            ++*((_DWORD *)v9 + 6);
          }
          if (*v10)
          {
            if (*(v9 - 1))
              (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 40))(*v10);
            *(v9 - 1) = 0;
            *(v9 - 4) = 0;
            *(v9 - 3) = 0;
            *v10 = 0;
            ++*((_DWORD *)v9 - 4);
          }
          v9 += 10;
          v8 -= 80;
        }
        while (v8);
      }
    }
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1;
}

_QWORD *re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 80 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = (_QWORD *)(v8 + v10);
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *v13 = 0;
          v13[1] = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          v13[2] = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          v13[4] = v16;
          *((_DWORD *)v13 + 6) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v12[9] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v12[5] = 0;
          *((_DWORD *)v12 + 16) = 0;
          v17 = (_QWORD *)(v8 + v10 + 40);
          v18 = *(_QWORD *)(v8 + v10 + 48);
          v12[5] = *v17;
          *v17 = 0;
          v12[6] = v18;
          v13[6] = 0;
          v19 = v7[v10 / 8 + 7];
          v12[7] = *(_QWORD *)(v8 + v10 + 56);
          v13[7] = v19;
          v20 = v7[v10 / 8 + 9];
          v12[9] = *(_QWORD *)(v8 + v10 + 72);
          v13[9] = v20;
          *((_DWORD *)v13 + 16) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v12 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          if (*v17)
          {
            if (v20)
              (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 40))(*v17);
            v13[9] = 0;
            *(_QWORD *)(v8 + v10 + 48) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *v17 = 0;
            ++*((_DWORD *)v13 + 16);
          }
          if (*v13)
          {
            if (v13[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 40))(*v13);
            v13[4] = 0;
            v13[1] = 0;
            v13[2] = 0;
            *v13 = 0;
            ++*((_DWORD *)v13 + 6);
          }
          v10 += 80;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *,re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> *>(void **result, void **a2, void **a3)
{
  void **v5;
  uint64_t v6;
  void *v7;
  void **v8;
  unint64_t v9;
  void *v10;
  void **v11;
  unint64_t v12;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      if (v5 != a3)
      {
        v7 = v5[v6];
        if (a3[v6])
        {
          if (v7)
          {
            result = re::DynamicArray<re::AABB>::copy(&a3[v6], (uint64_t)&v5[v6]);
            v8 = &a3[v6];
          }
          else
          {
            v8 = &a3[v6];
            a3[v6 + 2] = 0;
          }
          ++*((_DWORD *)v8 + 6);
        }
        else if (v7)
        {
          v9 = (unint64_t)v5[v6 + 2];
          a3[v6] = v7;
          re::DynamicArray<re::AABB>::setCapacity(&a3[v6], v9);
          ++LODWORD(a3[v6 + 3]);
          result = re::DynamicArray<re::AABB>::copy(&a3[v6], (uint64_t)&v5[v6]);
        }
        v10 = v5[v6 + 5];
        if (a3[v6 + 5])
        {
          if (v10)
          {
            result = re::DynamicArray<char const*>::copy(&a3[v6 + 5], (uint64_t)&v5[v6 + 5]);
            v11 = &a3[v6];
          }
          else
          {
            v11 = &a3[v6];
            a3[v6 + 7] = 0;
          }
          ++*((_DWORD *)v11 + 16);
        }
        else if (v10)
        {
          v12 = (unint64_t)v5[v6 + 7];
          a3[v6 + 5] = v10;
          re::DynamicArray<float *>::setCapacity(&a3[v6 + 5], v12);
          ++LODWORD(a3[v6 + 8]);
          result = re::DynamicArray<char const*>::copy(&a3[v6 + 5], (uint64_t)&v5[v6 + 5]);
        }
      }
      v6 += 10;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 48 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _BYTE v26[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v13, v12);
          v15 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v26[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v26[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*,unsigned int,re::Hash<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,re::EqualTo<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true> const*>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED5E588;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED5E588;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::operator()(uint64_t result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  re::UnionFind *v8;
  uint64_t v9;
  unsigned int Set;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;

  v3 = vsubq_f32(a2[1], *a2);
  v3.i32[3] = 0;
  v4 = vmaxnmq_f32(v3, (float32x4_t)0);
  v5 = vsubq_f32(a3[1], *a3);
  v5.i32[3] = 0;
  v6 = vmaxnmq_f32(v5, (float32x4_t)0);
  v7 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1)))).f32[0];
  if (v7 > 1.0)
    v7 = 1.0 / v7;
  if (v7 >= *(float *)(result + 16))
  {
    v8 = *(re::UnionFind **)(result + 8);
    v9 = a3[2].u32[0];
    Set = re::UnionFind::findSet(v8, a2[2].u32[0]);
    result = re::UnionFind::findSet(v8, v9);
    if (Set != (_DWORD)result)
    {
      v11 = *((_QWORD *)v8 + 1);
      if (v11 <= Set)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else if (v11 > result)
      {
        v12 = *((_QWORD *)v8 + 2);
        v13 = *(_DWORD *)(v12 + 8 * Set + 4);
        v14 = *(_DWORD *)(v12 + 8 * result + 4);
        if (v13 >= v14)
          v15 = result;
        else
          v15 = Set;
        if (v11 > v15)
        {
          if (v13 >= v14)
            v16 = Set;
          else
            v16 = result;
          *(_DWORD *)(v12 + 8 * v15) = v16;
          if (v11 > v16)
          {
            *(_DWORD *)(v12 + 8 * v16 + 4) += *(_DWORD *)(v12 + 8 * v15 + 4);
            return result;
          }
LABEL_20:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_19:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_20;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0,std::allocator<re::ecs2::ShadowClusterSystem::mergeClusters(re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,re::DynamicArray<re::Pair<re::DynamicArray<re::AABB>,re::DynamicArray<re::ecs2::ShadowClusterComponent *>,true>> const&,float)::$_0>,void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>::target_type()
{
}

uint64_t *re::ecs2::allocInfo_ClippingBoxComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410BA38);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410BA38))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410BA68, 0);
    *(uint64_t *)((char *)&qword_25410BA78 + 6) = 0;
    qword_25410BA78 = 0;
    qword_25410BA88 = 0;
    qword_25410BA90 = 0xFFFFFFFFLL;
    qword_25410BA68 = (uint64_t)&off_24ED7DAA8;
    qword_25410BA98 = (uint64_t)"ClippingBoxComponent";
    dword_25410BAA0 = 0;
    xmmword_25410BAA8 = 0u;
    unk_25410BAB8 = 0u;
    xmmword_25410BAC8 = 0u;
    qword_25410BAD8 = 0;
    __cxa_guard_release(&qword_25410BA38);
  }
  return &qword_25410BA68;
}

void re::ecs2::initInfo_ClippingBoxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;

  v24[0] = 0xEBF69FF01B370AE8;
  v24[1] = "ClippingBoxComponent";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_196);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_196);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410BA40 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_localBoundsMin";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410BA48 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "m_localBoundsMax";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x3000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_25410BA50 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "m_clipChildren";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4400000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_25410BA58 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "m_featherIntervalFraction";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4000000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_25410BA60 = v22;
      __cxa_guard_release(&_MergedGlobals_196);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25410BA40;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClippingBoxComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ClippingBoxComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClippingBoxComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClippingBoxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v23 = v25;
}

void re::internal::defaultConstruct<re::ecs2::ClippingBoxComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57008;
  *(_QWORD *)(v3 + 32) = 0xBF000000BF000000;
  *(_QWORD *)(v3 + 40) = 3204448256;
  *(_QWORD *)(v3 + 48) = 0x3F0000003F000000;
  *(_QWORD *)(v3 + 56) = 1056964608;
  *(_DWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 68) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::ClippingBoxComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClippingBoxComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57008;
  *(_QWORD *)(v1 + 32) = 0xBF000000BF000000;
  *(_QWORD *)(v1 + 40) = 3204448256;
  *(_QWORD *)(v1 + 48) = 0x3F0000003F000000;
  *(_QWORD *)(v1 + 56) = 1056964608;
  *(_DWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 68) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::ClippingBoxComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClippingBoxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClippingBoxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClippingBoxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClippingBoxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClippingBoxComponent>, this);
}

uint64_t *re::ecs2::allocInfo_TintService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_197);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_197))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410BAE8, 0);
    *(uint64_t *)((char *)&qword_25410BAF8 + 6) = 0;
    qword_25410BAF8 = 0;
    qword_25410BB08 = 0;
    qword_25410BB10 = 0xFFFFFFFFLL;
    qword_25410BAE8 = (uint64_t)&off_24ED7DAA8;
    qword_25410BB18 = (uint64_t)"TintService";
    dword_25410BB20 = 0;
    unk_25410BB28 = 0u;
    unk_25410BB38 = 0u;
    unk_25410BB48 = 0u;
    qword_25410BB58 = 0;
    __cxa_guard_release(&_MergedGlobals_197);
  }
  return &qword_25410BAE8;
}

void re::ecs2::initInfo_TintService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x1FD9D995C2CE634;
  v5[1] = "TintService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_TintService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_TintService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TintService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TintService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TintService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TintService>, this);
}

uint64_t *re::ecs2::allocInfo_PinAlignment(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410BB80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410BB80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410BC30, 0);
    *(uint64_t *)((char *)&qword_25410BC40 + 6) = 0;
    qword_25410BC40 = 0;
    qword_25410BC50 = 0;
    qword_25410BC58 = 0xFFFFFFFFLL;
    qword_25410BC30 = (uint64_t)&off_24ED7DAA8;
    qword_25410BC60 = (uint64_t)"PinAlignment";
    dword_25410BC68 = 0;
    xmmword_25410BC70 = 0u;
    unk_25410BC80 = 0u;
    xmmword_25410BC90 = 0u;
    qword_25410BCA0 = 0;
    __cxa_guard_release(&qword_25410BB80);
  }
  return &qword_25410BC30;
}

void re::ecs2::initInfo_PinAlignment(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  const re::IntrospectionBase *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  unint64_t i;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  unint64_t j;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  uint64_t *v45;
  uint64_t v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65[2];
  StringID v66;
  _QWORD v67[2];
  uint64_t v68;
  const char *v69;

  v68 = 0x3AE3A0B4A362B7DCLL;
  v69 = "PinAlignment";
  re::StringID::destroyString((re::StringID *)&v68);
  *((_OWORD *)this + 2) = v64;
  v4 = atomic_load((unsigned __int8 *)&qword_25410BB78);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v5 = (re *)__cxa_guard_acquire(&qword_25410BB78);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v7 = re::introspectionAllocator(v5);
  v8 = atomic_load((unsigned __int8 *)&qword_25410BB68);
  if ((v8 & 1) == 0)
  {
    v47 = (re *)__cxa_guard_acquire(&qword_25410BB68);
    if ((_DWORD)v47)
    {
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 0;
      *((_QWORD *)v49 + 2) = "Rigid";
      qword_25410BBB0 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 1;
      *((_QWORD *)v51 + 2) = "PointToPoint";
      qword_25410BBB8 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 2;
      *((_QWORD *)v53 + 2) = "DirectionToDirection";
      qword_25410BBC0 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 3;
      *((_QWORD *)v55 + 2) = "PointToLine";
      qword_25410BBC8 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 4;
      *((_QWORD *)v57 + 2) = "PointToPlane";
      qword_25410BBD0 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 5;
      *((_QWORD *)v59 + 2) = "LineToLine";
      qword_25410BBD8 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *(_QWORD *)(v61 + 8) = 6;
      *(_QWORD *)(v61 + 16) = "PlaneToPlane";
      qword_25410BBE0 = v61;
      __cxa_guard_release(&qword_25410BB68);
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25410BB70);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25410BB70))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410BBE8, "PinAlignmentType", 1, 1, 1, 1);
    qword_25410BBE8 = (uint64_t)&off_24ED7D9E8;
    qword_25410BC28 = (uint64_t)&re::ecs2::introspect_PinAlignmentType(BOOL)::enumTable;
    dword_25410BBF8 = 9;
    __cxa_guard_release(&qword_25410BB70);
  }
  if ((_MergedGlobals_198 & 1) != 0)
  {
LABEL_33:
    v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
    *(_DWORD *)v32 = 1;
    *(_QWORD *)(v32 + 8) = "m_type";
    *(_QWORD *)(v32 + 16) = &qword_25410BBE8;
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 32) = 1;
    *(_DWORD *)(v32 + 40) = 0;
    *(_QWORD *)(v32 + 48) = 0;
    *(_QWORD *)(v32 + 56) = 0;
    *(_DWORD *)(v32 + 64) = 0;
    qword_25410BB88 = v32;
    v33 = re::introspectionAllocator((re *)v32);
    v34 = re::introspect_PoseF((re::IntrospectionBase **)1);
    v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = "m_sourcePose";
    *(_QWORD *)(v35 + 16) = v34;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = 0x1000000002;
    *(_DWORD *)(v35 + 40) = 0;
    *(_QWORD *)(v35 + 48) = 0;
    *(_QWORD *)(v35 + 56) = 0;
    *(_DWORD *)(v35 + 64) = 0;
    qword_25410BB90 = v35;
    v36 = re::introspectionAllocator((re *)v35);
    v37 = re::introspect_PoseF((re::IntrospectionBase **)1);
    v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = "m_targetPose";
    *(_QWORD *)(v38 + 16) = v37;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0x3000000003;
    *(_DWORD *)(v38 + 40) = 0;
    *(_QWORD *)(v38 + 48) = 0;
    *(_QWORD *)(v38 + 56) = 0;
    *(_DWORD *)(v38 + 64) = 0;
    qword_25410BB98 = v38;
    v39 = re::introspectionAllocator((re *)v38);
    v41 = re::introspect_BOOL((re *)1, v40);
    v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = "m_isSameOrientation";
    *(_QWORD *)(v42 + 16) = v41;
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = 0x5000000004;
    *(_DWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    *(_QWORD *)(v42 + 56) = 0;
    *(_DWORD *)(v42 + 64) = 0;
    qword_25410BBA0 = v42;
    v43 = re::introspectionAllocator((re *)v42);
    v45 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v44);
    v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = "m_values";
    *(_QWORD *)(v46 + 16) = v45;
    *(_QWORD *)(v46 + 24) = 0;
    *(_QWORD *)(v46 + 32) = 0x5800000005;
    *(_DWORD *)(v46 + 40) = 0;
    *(_QWORD *)(v46 + 48) = 0;
    *(_QWORD *)(v46 + 56) = 0;
    *(_DWORD *)(v46 + 64) = 0;
    qword_25410BBA8 = v46;
    __cxa_guard_release(&qword_25410BB78);
LABEL_2:
    *((_QWORD *)this + 2) = 0x8000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 5;
    *((_QWORD *)this + 8) = &qword_25410BB88;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PinAlignment>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PinAlignment>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PinAlignment>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PinAlignment>;
    re::IntrospectionRegistry::add(this, v3);
    v63 = v64;
    return;
  }
  _MergedGlobals_198 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410BBE8, v6);
  v65[0] = 0xEA05251A419B7090;
  v65[1] = (uint64_t)"PinAlignmentType";
  v68 = 0x31CD534126;
  v69 = "uint8_t";
  v10 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v68);
  if (v10)
  {
    v11 = *v10;
    re::StringID::destroyString((re::StringID *)&v68);
    v12 = (unsigned int *)qword_25410BC28;
    v67[1] = v11;
    re::TypeBuilder::beginEnumType((uint64_t)&v68, v65, 1, 1, (uint64_t)v67);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      for (i = 0; i < v14; ++i)
      {
        v16 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * i);
        if (*(_DWORD *)v16 == 1)
        {
          v17 = *(char **)(v16 + 16);
          if (v17)
          {
            v18 = *v17;
            if (*v17)
            {
              v19 = v17[1];
              if (v19)
              {
                v20 = (unsigned __int8 *)(v17 + 2);
                do
                {
                  v18 = 31 * v18 + v19;
                  v21 = *v20++;
                  v19 = v21;
                }
                while (v21);
              }
            }
          }
          else
          {
            v18 = 0;
          }
          v22 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)&v66.var0 = 2 * v18;
          v66.var1 = v17;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v68, v22, &v66);
          re::StringID::destroyString((re::StringID *)&v66);
          v14 = *v12;
        }
      }
      if (v14)
      {
        for (j = 0; j < v14; ++j)
        {
          v24 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * j);
          if (*(_DWORD *)v24 == 2)
          {
            v25 = *(char **)(v24 + 16);
            if (v25)
            {
              v26 = *v25;
              if (*v25)
              {
                v27 = v25[1];
                if (v27)
                {
                  v28 = (unsigned __int8 *)(v25 + 2);
                  do
                  {
                    v26 = 31 * v26 + v27;
                    v29 = *v28++;
                    v27 = v29;
                  }
                  while (v29);
                }
              }
            }
            else
            {
              v26 = 0;
            }
            v30 = *(_QWORD *)(v24 + 8);
            *(_QWORD *)&v66.var0 = 2 * v26;
            v66.var1 = v25;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v68, v30, &v66);
            re::StringID::destroyString((re::StringID *)&v66);
            v14 = *v12;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v68, v31);
    xmmword_25410BC08 = (__int128)v66;
    re::StringID::destroyString((re::StringID *)v65);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v68);
  re::internal::assertLog((re::internal *)5, v62, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "PinAlignmentType");
  _os_crash();
  __break(1u);
}

double re::internal::defaultConstruct<re::ecs2::PinAlignment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_BYTE *)a3 = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0x3F80000000000000;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0x3F80000000000000;
  *(_BYTE *)(a3 + 80) = 1;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PinAlignment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 88);
  result = *(_QWORD *)(a3 + 88);
  if (result)
  {
    if (*(_QWORD *)(a3 + 120))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 120) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::PinAlignment>(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PinAlignment>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 88);
  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    if (*(_QWORD *)(a1 + 120))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  return result;
}

uint64_t re::ecs2::introspect_PinAlignment(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PinAlignment", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PinAlignment, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PinAlignment, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PinAlignment>, this);
}

uint64_t re::ecs2::FrameProfilingSystem::willAddSystemToECSService(re::ecs2::FrameProfilingSystem *this)
{
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  if (result)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)result + 8))(&v9, result, "engine:Courier.refont");
    v4 = *(_OWORD *)((char *)this + 104);
    *(_OWORD *)((char *)this + 104) = v9;
    v9 = v4;
    v5 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v10;
    v10 = v5;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    *((_QWORD *)this + 21) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v6);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    result = re::ServiceLocator::serviceOrNull<re::Engine>(v7);
    *((_QWORD *)this + 20) = result;
    v8 = *((_QWORD *)this + 21);
    if (v8)
      *((_QWORD *)this + 22) = *(_QWORD *)(v8 + 72);
  }
  return result;
}

__n128 re::ecs2::FrameProfilingSystem::willRemoveSystemFromECSService(re::ecs2::FrameProfilingSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;

  if (*((_BYTE *)this + 152))
  {
    v2 = *((_QWORD *)this + 21);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 104);
      if (v3)
        v4 = *(_QWORD *)(v3 + 296);
      else
        v4 = 0;
      re::StringID::StringID((re::StringID *)v10, (const StringID *)this + 8);
      v11 = *((_QWORD *)this + 18);
      re::RenderGraphManager::removeProvider(v4, (uint64_t)v10);
      re::StringID::destroyString((re::StringID *)v10);
      *((_BYTE *)this + 152) = 0;
    }
  }
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  v5 = *(_OWORD *)((char *)this + 104);
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  v8 = v5;
  v9 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return result;
}

void re::ecs2::FrameProfilingSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  re::DrawingManager *v6;
  _BOOL8 shouldRenderProfilerNode;
  uint64_t v8;
  re::RenderGraphManager *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  re::RenderManager *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char v29;
  char *v30;
  _anonymous_namespace_ *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  re::StringID *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  re *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char *var1;
  uint64_t v51;
  _QWORD *v52;
  re *v53;
  _BYTE v54[16];
  uint64_t v55;
  StringID v56[2];
  StringID v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 168);
  if (!v3)
    return;
  v5 = *(_QWORD *)(a1 + 160);
  if (!v5 || !*(_QWORD *)(a1 + 176) || (*(_BYTE *)(v5 + 424) & 0x10) == 0 || a3 != 1)
    return;
  v6 = *(re::DrawingManager **)(v3 + 104);
  if (!v6)
  {
    if (!*(_BYTE *)(a1 + 152))
      return;
    goto LABEL_16;
  }
  shouldRenderProfilerNode = re::DrawingManager::shouldRenderProfilerNode(v6);
  if (!shouldRenderProfilerNode)
  {
    if (!*(_BYTE *)(a1 + 152))
      return;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 104);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 296);
LABEL_17:
      re::StringID::StringID((re::StringID *)v54, (const StringID *)(a1 + 128));
      v55 = *(_QWORD *)(a1 + 144);
      re::RenderGraphManager::removeProvider(v11, (uint64_t)v54);
      re::StringID::destroyString((re::StringID *)v54);
      *(_BYTE *)(a1 + 152) = 0;
      return;
    }
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a1 + 152))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 104);
    if (v8)
      v9 = *(re::RenderGraphManager **)(v8 + 296);
    else
      v9 = 0;
    v12 = re::globalAllocators((re *)shouldRenderProfilerNode);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v73, (const re::DynamicString *)v56);
    *(_QWORD *)v13 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v13 + 8), (const re::DynamicString *)&v73);
    if (v73 && (v74 & 1) != 0)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v73 + 40))(v73, v75);
    *(_QWORD *)v13 = off_24ED83260;
    re::RenderGraphManager::addProviderInternal(v9, "ProfilerOverlay", (const re::RenderGraphProviderBase *)v13, 0, 1, (uint64_t)&v73);
    v14 = v73;
    v15 = v74;
    v73 = 0;
    v74 = (char *)&str_110;
    v16 = *(_QWORD *)(a1 + 128);
    v17 = *(char **)(a1 + 136);
    *(_QWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 136) = v15;
    *(_QWORD *)&v57.var0 = v14 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
    v57.var1 = v17;
    re::StringID::destroyString((re::StringID *)&v57);
    *(_QWORD *)(a1 + 144) = v75;
    re::StringID::destroyString((re::StringID *)&v73);
    if (*(_QWORD *)&v56[0].var0)
    {
      if (((uint64_t)v56[0].var1 & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v56[0].var0 + 40))();
      memset(v56, 0, sizeof(v56));
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  v18 = *(re::RenderManager **)(a1 + 168);
  v19 = *((_QWORD *)v18 + 13);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 1648);
    if (v20)
    {
      v53 = (re *)(a1 + 104);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 && (v22 = atomic_load((unsigned int *)(v21 + 704)), v22 == 2))
      {
        v23 = re::RenderManager::perFrameAllocator(v18);
        v72 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v68 = (uint64_t *)v23;
        re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, 0);
        ++v71;
        re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, 1uLL);
        v24 = *(_QWORD *)(v20 + 320);
        if (v24)
        {
          v25 = *(_QWORD **)(v20 + 336);
          v52 = &v25[6 * v24];
          v26 = v70;
          do
          {
            re::StringID::invalid((re::StringID *)&v73);
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v80 = -1;
            v81 = 0;
            v82 = 0;
            v83 = re::kInvalidStringRenderHandle;
            v75 = xmmword_22611CBB0;
            re::makeFontID(v53, (re::StringID *)&v66);
            v27 = v66;
            v28 = v67;
            v66 = 0;
            v67 = (char *)&str_110;
            v29 = v73;
            v30 = v74;
            v73 = v27;
            v74 = v28;
            *(_QWORD *)&v57.var0 = v27 & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
            v57.var1 = v30;
            re::StringID::destroyString((re::StringID *)&v57);
            re::StringID::destroyString((re::StringID *)&v66);
            re::StringID::invalid((re::StringID *)&v57);
            *(_QWORD *)&v58 = 0x3F8000003F800000;
            *((_QWORD *)&v58 + 1) = 0x3F8000003F800000;
            v59 = 0u;
            v60 = 0u;
            v61 = 0u;
            v62 = 0u;
            v63 = 0u;
            v64 = -1;
            v65 = 0x2800000006;
            v31 = (_anonymous_namespace_ *)re::TextManager::drawDynamicText(*(_QWORD *)(a1 + 176), (uint64_t)&v57, v25, (uint64_t)&v73);
            v65 = v25[4];
            if (v26 >= v69)
            {
              v32 = v26 + 1;
              if (v69 < v32)
              {
                if (v68)
                {
                  v33 = 8;
                  if (v69)
                    v33 = 2 * v69;
                  if (v33 <= v32)
                    v34 = v32;
                  else
                    v34 = v33;
                  re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, v34);
                }
                else
                {
                  re::DynamicArray<re::RenderProfilerText>::setCapacity(&v68, v32);
                  ++v71;
                }
              }
              v26 = v70;
            }
            v35 = re::StringID::StringID((re::StringID *)(v72 + (v26 << 7)), &v57);
            v36 = v58;
            v37 = v60;
            *((_OWORD *)v35 + 2) = v59;
            *((_OWORD *)v35 + 3) = v37;
            *((_OWORD *)v35 + 1) = v36;
            v38 = v61;
            v39 = v62;
            v40 = v63;
            *((_QWORD *)v35 + 14) = v64;
            *((_OWORD *)v35 + 5) = v39;
            *((_OWORD *)v35 + 6) = v40;
            *((_OWORD *)v35 + 4) = v38;
            *((_QWORD *)v35 + 15) = v65;
            v70 = ++v26;
            ++v71;
            re::StringID::destroyString((re::StringID *)&v57);
            re::StringID::destroyString((re::StringID *)&v73);
            v25 += 6;
          }
          while (v25 != v52);
        }
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 104);
        if (v41)
          v42 = re::RenderFrameBox::get(v41 + 344, 0xFFFFFFFFFFFFFFFuLL);
        else
          v42 = 0;
        if (v70)
          (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v42 + 320) + 48))(*(_QWORD *)(v42 + 320), &v68);
        re::DynamicArray<re::RenderText>::deinit((uint64_t)&v68);
      }
      else
      {
        re::AssetHandle::loadAsync(v53);
      }
    }
  }
  v43 = *(_QWORD **)(a1 + 168);
  v44 = v43[13];
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 1664);
    if (v45)
    {
      if (re::ProfilerManager::isProcessorEnabled<re::ProfilerFlameChartProcessor,void>(*(_QWORD *)(v44 + 1664))
        || re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(v45)
        || re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(v45))
      {
        v46 = (re *)(a1 + 104);
        v47 = *(_QWORD *)(a1 + 112);
        if (v47 && (v48 = atomic_load((unsigned int *)(v47 + 704)), v48 == 2))
        {
          if (v43[1] <= 1uLL)
          {
            re::makeFontID(v46, (re::StringID *)&v57);
            v49 = *(_QWORD *)&v57.var0;
            var1 = v57.var1;
            *(_QWORD *)&v57.var0 = 0;
            v57.var1 = (char *)&str_110;
            v51 = v43[1];
            v74 = (char *)v43[2];
            v43[1] = v49;
            v43[2] = var1;
            v73 = v49 & 0xFFFFFFFFFFFFFFFELL | v51 & 1;
            re::StringID::destroyString((re::StringID *)&v73);
            re::StringID::destroyString((re::StringID *)&v57);
          }
        }
        else
        {
          re::AssetHandle::loadAsync(v46);
        }
      }
    }
  }
}

_QWORD *re::DynamicArray<re::RenderProfilerText>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderProfilerText>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[16 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v13 = v8[14];
          v14 = *((_OWORD *)v8 + 4);
          v15 = *((_OWORD *)v8 + 6);
          *((_OWORD *)v11 + 5) = *((_OWORD *)v8 + 5);
          *((_OWORD *)v11 + 6) = v15;
          *((_OWORD *)v11 + 4) = v14;
          v17 = *((_OWORD *)v8 + 2);
          v16 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          *((_OWORD *)v11 + 2) = v17;
          *((_OWORD *)v11 + 3) = v16;
          v11[14] = v13;
          v11[15] = v8[15];
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 16;
          v11 += 16;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

BOOL re::ProfilerManager::isProcessorEnabled<re::ProfilerFlameChartProcessor,void>(uint64_t a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  _BOOL8 v4;
  __guard v6;

  v6 = re::ProfilerManager::getProcessorId<re::ProfilerFlameChartProcessor>();
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(a1 + 480), (unint64_t *)&v6);
  if (v3)
    v4 = *(_BYTE *)(v3[3] + 8) != 0;
  else
    v4 = 0;
  os_unfair_lock_unlock(v2);
  return v4;
}

BOOL re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(uint64_t a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  _BOOL8 v4;
  __guard v6;

  v6 = re::ProfilerManager::getProcessorId<re::ProfilerMiniHUDProcessor>();
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(a1 + 480), (unint64_t *)&v6);
  if (v3)
    v4 = *(_BYTE *)(v3[3] + 8) != 0;
  else
    v4 = 0;
  os_unfair_lock_unlock(v2);
  return v4;
}

BOOL re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(uint64_t a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  _BOOL8 v4;
  __guard v6;

  v6 = re::ProfilerManager::getProcessorId<re::ProfilerDetailedHUDProcessor>();
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(a1 + 480), (unint64_t *)&v6);
  if (v3)
    v4 = *(_BYTE *)(v3[3] + 8) != 0;
  else
    v4 = 0;
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t *re::ecs2::allocInfo_FrameProfilingSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_199);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_199))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410BCB0, 0);
    *(uint64_t *)((char *)&qword_25410BCC0 + 6) = 0;
    qword_25410BCC0 = 0;
    qword_25410BCD0 = 0;
    qword_25410BCD8 = 0xFFFFFFFFLL;
    qword_25410BCB0 = (uint64_t)&off_24ED7DAA8;
    qword_25410BCE0 = (uint64_t)"FrameProfilingSystem";
    dword_25410BCE8 = 0;
    unk_25410BCF0 = 0u;
    unk_25410BD00 = 0u;
    unk_25410BD10 = 0u;
    qword_25410BD20 = 0;
    __cxa_guard_release(&_MergedGlobals_199);
  }
  return &qword_25410BCB0;
}

void re::ecs2::initInfo_FrameProfilingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x51BA0A3EA7E549D0;
  v5[1] = "FrameProfilingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_FrameProfilingSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::FrameProfilingSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::FrameProfilingSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::FrameProfilingSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FrameProfilingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::StringID *re::internal::defaultConstruct<re::ecs2::FrameProfilingSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID *v4;
  re::StringID *result;

  *(_QWORD *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  v4 = (re::StringID *)(a3 + 128);
  re::ecs2::System::System(a3, 1);
  *(_QWORD *)a3 = &off_24ED5E630;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  result = re::StringID::invalid(v4);
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::FrameProfilingSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 13));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

re::StringID *re::internal::defaultConstructV2<re::ecs2::FrameProfilingSystem>(uint64_t a1)
{
  re::StringID *v2;
  _QWORD *v3;
  re::StringID *result;

  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v2 = (re::StringID *)(a1 + 128);
  re::ecs2::System::System(a1, 1);
  *v3 = &off_24ED5E630;
  v3[14] = 0;
  v3[15] = 0;
  v3[13] = 0;
  result = re::StringID::invalid(v2);
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::FrameProfilingSystem>(_QWORD *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 13));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_FrameProfilingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameProfilingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrameProfilingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrameProfilingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrameProfilingSystem>, this);
}

void re::ecs2::FrameProfilingSystem::~FrameProfilingSystem(re::ecs2::FrameProfilingSystem *this)
{
  re::StringID::destroyString((re::ecs2::FrameProfilingSystem *)((char *)this + 128));
  re::AssetHandle::~AssetHandle((re::ecs2::FrameProfilingSystem *)((char *)this + 104));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::StringID::destroyString((re::ecs2::FrameProfilingSystem *)((char *)this + 128));
  re::AssetHandle::~AssetHandle((re::ecs2::FrameProfilingSystem *)((char *)this + 104));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::FrameProfilingSystem::typeInfo(re::ecs2::FrameProfilingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameProfilingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrameProfilingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrameProfilingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrameProfilingSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::FrameProfilingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void re::ecs2::dockingBundleDataFromTuningFile(uint64_t a1, char **a2, uint64_t *a3)
{
  void *v6;
  void *v7;
  int v8;
  re::VideoDefaults *v9;
  void *v10;
  void *v11;
  id v12;
  re *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  void *v41;
  int v42;
  void *v43;
  int v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  re::VideoDefaults *v56;
  re *v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  int64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int64_t v84;
  char *v85;
  void *v86;
  char *v87;
  char *v88;
  __int128 v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  NSObject *v94;
  uint64_t v95;
  NSObject *v96;
  NSObject *v97;
  id v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  char **v103;
  void *v104;
  id obj;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  char *v113;
  __int128 v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  void *__p;
  char *v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  id v127;
  id v128;
  uint8_t buf[4];
  int v130;
  __int16 v131;
  int v132;
  uint8_t v133[128];
  uint8_t v134[4];
  _BYTE v135[12];
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCString:encoding:", a1, 1);
  a2[1] = *a2;
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(a3);
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "fileExistsAtPath:", v6);

  if (v8)
  {
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
    v9 = (re::VideoDefaults *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
  }
  else
  {
    re::Bundle::reResourcesFramework((uint64_t)v134);
    if (v134[0])
      v11 = *(void **)&v135[4];
    else
      v11 = 0;
    v12 = objc_retainAutorelease(v11);
    if (v134[0])

    objc_msgSend(v12, "URLForResource:withExtension:", v6, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v13 = (re *)re::VideoDefaults::logEnabled(v9);
  if (v10)
  {
    if ((_DWORD)v13)
    {
      v96 = *re::videoLogObjects(v13);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v134 = 136315138;
        *(_QWORD *)v135 = a1;
        _os_log_impl(&dword_224FE9000, v96, OS_LOG_TYPE_DEFAULT, "[dockingBundleDataFromTuningFile]: Loading Docking bundle data file tuning file %s", v134, 0xCu);
      }
    }
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCString:encoding:", "purpose", 1);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCString:encoding:", "bundle", 1);
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCString:encoding:", "curve", 1);
    v17 = v10;
    v128 = 0;
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:options:error:", v17, 0, &v128);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v128;
    if (!v19)
    {
      v100 = v15;
      v127 = 0;
      objc_msgSend(MEMORY[0x24BDD1770], "propertyListWithData:options:format:error:", v18, 0, 0, &v127);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v127;
      if (!v19)
      {
        v98 = v17;
        v99 = v10;
        v104 = v14;
        v21 = objc_alloc(MEMORY[0x24BDBCE30]);
        v22 = v20;
        objc_msgSend(v20, "valueForKey:", v100);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)objc_msgSend(v21, "initWithArray:", v23);

        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v25 = v24;
        v14 = v104;
        obj = v25;
        v110 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v123, v134, 16);
        if (v110)
        {
          v109 = *(_QWORD *)v124;
          v101 = (uint64_t)(a2 + 2);
          v106 = a3;
          v102 = v22;
          v103 = a2;
          do
          {
            v26 = 0;
            do
            {
              if (*(_QWORD *)v124 != v109)
                objc_enumerationMutation(obj);
              v27 = *(void **)(*((_QWORD *)&v123 + 1) + 8 * v26);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v107 = v26;
                objc_msgSend(v27, "valueForKey:", v14);
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v108 = objc_msgSend(v28, "unsignedIntValue");

                v29 = objc_alloc(MEMORY[0x24BDBCE30]);
                objc_msgSend(v27, "valueForKey:", v16);
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                v31 = (void *)objc_msgSend(v29, "initWithArray:", v30);

                __p = 0;
                v121 = 0;
                v122 = 0;
                _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, objc_msgSend(v31, "count"));
                v118 = 0u;
                v119 = 0u;
                v116 = 0u;
                v117 = 0u;
                v32 = v31;
                v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v116, v133, 16);
                if (v33)
                {
                  v34 = v33;
                  v35 = *(_QWORD *)v117;
                  do
                  {
                    for (i = 0; i != v34; ++i)
                    {
                      if (*(_QWORD *)v117 != v35)
                        objc_enumerationMutation(v32);
                      v37 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * i);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        v38 = v37;
                        if (objc_msgSend(v38, "count") == 3)
                        {
                          objc_msgSend(v38, "objectAtIndex:", 0);
                          v39 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v39, "floatValue");
                          *(_QWORD *)&v114 = v40;

                          objc_msgSend(v38, "objectAtIndex:", 1);
                          v41 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v41, "floatValue");
                          v112 = v42;

                          objc_msgSend(v38, "objectAtIndex:", 2);
                          v43 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v43, "floatValue");
                          v111 = v44;

                          v45 = v114;
                          DWORD1(v45) = v112;
                          DWORD2(v45) = v111;
                          v46 = v121;
                          if (v121 >= v122)
                          {
                            v48 = (v121 - (_BYTE *)__p) >> 4;
                            if ((unint64_t)(v48 + 1) >> 60)
                              goto LABEL_104;
                            v49 = (v122 - (_BYTE *)__p) >> 3;
                            if (v49 <= v48 + 1)
                              v49 = v48 + 1;
                            if ((unint64_t)(v122 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
                              v50 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v50 = v49;
                            if (v50)
                            {
                              v114 = v45;
                              v51 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v122, v50);
                              v45 = v114;
                            }
                            else
                            {
                              v51 = 0;
                            }
                            v52 = &v51[16 * v48];
                            *(_OWORD *)v52 = v45;
                            v47 = v52 + 16;
                            v54 = (char *)__p;
                            v53 = v121;
                            if (v121 != __p)
                            {
                              do
                              {
                                v55 = *((_OWORD *)v53 - 1);
                                v53 -= 16;
                                *((_OWORD *)v52 - 1) = v55;
                                v52 -= 16;
                              }
                              while (v53 != v54);
                              v53 = (char *)__p;
                            }
                            __p = v52;
                            v121 = v47;
                            v122 = &v51[16 * v50];
                            if (v53)
                              operator delete(v53);
                          }
                          else
                          {
                            *(_OWORD *)v121 = v45;
                            v47 = v46 + 16;
                          }
                          v121 = v47;
                        }

                      }
                    }
                    v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v116, v133, 16);
                  }
                  while (v34);
                }

                v57 = (re *)re::VideoDefaults::logEnabled(v56);
                if ((_DWORD)v57)
                {
                  v94 = *re::videoLogObjects(v57);
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109376;
                    v130 = v108;
                    v131 = 1024;
                    v132 = (unint64_t)(v121 - (_BYTE *)__p) >> 4;
                    _os_log_impl(&dword_224FE9000, v94, OS_LOG_TYPE_DEFAULT, "[dockingBundleDataFromFileURL]: Loaded docking curve with purpose %x and %d points", buf, 0xEu);
                  }
                }
                v59 = v103[1];
                v58 = (unint64_t)v103[2];
                v60 = v106;
                if ((unint64_t)v59 >= v58)
                {
                  v62 = *v103;
                  v63 = (v59 - *v103) >> 2;
                  v64 = v63 + 1;
                  if ((unint64_t)(v63 + 1) >> 62)
                    goto LABEL_104;
                  v65 = v58 - (_QWORD)v62;
                  if (v65 >> 1 > v64)
                    v64 = v65 >> 1;
                  if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                    v66 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v66 = v64;
                  if (v66)
                  {
                    v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v101, v66);
                    v62 = *v103;
                    v59 = v103[1];
                  }
                  else
                  {
                    v67 = 0;
                  }
                  v68 = &v67[4 * v63];
                  *(_DWORD *)v68 = v108;
                  v61 = v68 + 4;
                  while (v59 != v62)
                  {
                    v69 = *((_DWORD *)v59 - 1);
                    v59 -= 4;
                    *((_DWORD *)v68 - 1) = v69;
                    v68 -= 4;
                  }
                  *v103 = v68;
                  v103[1] = v61;
                  v103[2] = &v67[4 * v66];
                  if (v62)
                    operator delete(v62);
                }
                else
                {
                  *(_DWORD *)v59 = v108;
                  v61 = v59 + 4;
                }
                v103[1] = v61;
                v71 = (_QWORD *)v106[1];
                v70 = v106[2];
                if ((unint64_t)v71 >= v70)
                {
                  v77 = (_QWORD *)*v106;
                  v78 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v71 - *v106) >> 3);
                  v79 = v78 + 1;
                  if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_104:
                    abort();
                  v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)v77) >> 3);
                  if (2 * v80 > v79)
                    v79 = 2 * v80;
                  if (v80 >= 0x555555555555555)
                    v81 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v81 = v79;
                  v115 = v81;
                  if (v81)
                  {
                    if (v81 > 0xAAAAAAAAAAAAAAALL)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v82 = (char *)operator new(24 * v81);
                  }
                  else
                  {
                    v82 = 0;
                  }
                  v83 = &v82[24 * v78];
                  *(_QWORD *)v83 = 0;
                  *((_QWORD *)v83 + 1) = 0;
                  *((_QWORD *)v83 + 2) = 0;
                  v84 = v121 - (_BYTE *)__p;
                  if (v121 == __p)
                  {
                    v60 = v106;
                  }
                  else
                  {
                    v85 = &v82[24 * v78];
                    v86 = __p;
                    v113 = v82;
                    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v83, v84 >> 4);
                    v87 = (char *)*((_QWORD *)v85 + 1);
                    memmove(v87, v86, v84);
                    v82 = v113;
                    *((_QWORD *)v85 + 1) = &v87[v84];
                    v60 = v106;
                    v77 = (_QWORD *)*v106;
                    v71 = (_QWORD *)v106[1];
                  }
                  v88 = &v82[24 * v115];
                  v76 = v83 + 24;
                  if (v71 == v77)
                  {
                    *v60 = (uint64_t)v83;
                    v60[1] = (uint64_t)v76;
                    v60[2] = (uint64_t)v88;
                  }
                  else
                  {
                    do
                    {
                      *((_QWORD *)v83 - 3) = 0;
                      *((_QWORD *)v83 - 2) = 0;
                      v83 -= 24;
                      *((_QWORD *)v83 + 2) = 0;
                      v89 = *(_OWORD *)(v71 - 3);
                      v71 -= 3;
                      *(_OWORD *)v83 = v89;
                      *((_QWORD *)v83 + 2) = v71[2];
                      *v71 = 0;
                      v71[1] = 0;
                      v71[2] = 0;
                    }
                    while (v71 != v77);
                    v77 = (_QWORD *)*v60;
                    v90 = (_QWORD *)v60[1];
                    *v60 = (uint64_t)v83;
                    v60[1] = (uint64_t)v76;
                    v60[2] = (uint64_t)v88;
                    if (v90 != v77)
                    {
                      v91 = v90;
                      do
                      {
                        v93 = (void *)*(v91 - 3);
                        v91 -= 3;
                        v92 = v93;
                        if (v93)
                        {
                          *(v90 - 2) = v92;
                          operator delete(v92);
                        }
                        v90 = v91;
                      }
                      while (v91 != v77);
                    }
                  }
                  v22 = v102;
                  if (v77)
                    operator delete(v77);
                }
                else
                {
                  *v71 = 0;
                  v71[1] = 0;
                  v71[2] = 0;
                  v72 = __p;
                  v73 = v121 - (_BYTE *)__p;
                  if (v121 != __p)
                  {
                    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v71, v73 >> 4);
                    v74 = (char *)v71[1];
                    memmove(v74, v72, v73);
                    v75 = &v74[v73];
                    v60 = v106;
                    v71[1] = v75;
                  }
                  v76 = v71 + 3;
                  v22 = v102;
                }
                v60[1] = (uint64_t)v76;
                v14 = v104;
                if (__p)
                {
                  v121 = (char *)__p;
                  operator delete(__p);
                }

                v26 = v107;
              }
              ++v26;
            }
            while (v26 != v110);
            v95 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v123, v134, 16);
            v110 = v95;
          }
          while (v95);
        }

        v20 = v22;
        v10 = v99;
        v17 = v98;
        v19 = 0;
      }

      v15 = v100;
    }

  }
  else if ((_DWORD)v13)
  {
    v97 = *re::videoLogObjects(v13);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v134 = 136315138;
      *(_QWORD *)v135 = a1;
      _os_log_error_impl(&dword_224FE9000, v97, OS_LOG_TYPE_ERROR, "[dockingBundleDataFromTuningFile]: unable to resolve tuning file %s", v134, 0xCu);
    }
  }

}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    if (v18)
      v19 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    v21 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == __src)
          v23 = 1;
        else
          v23 = v15 >> 3;
        v24 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v8, v23);
        v20 = &v24[16 * (v23 >> 2)];
        v21 = &v24[16 * v25];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v22 = v16 + 2;
        if (v16 >= -1)
          v22 = v16 + 1;
        v20 -= 16 * (v22 >> 1);
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v26 = v20 + 16;
    v27 = *(char **)a1;
    if (*(char **)a1 != __src)
    {
      v28 = __src;
      do
      {
        v29 = *((_OWORD *)v28 - 1);
        v28 -= 16;
        *((_OWORD *)v20 - 1) = v29;
        v20 -= 16;
      }
      while (v28 != v27);
    }
    v30 = *(_BYTE **)(a1 + 8);
    v31 = v30 - __src;
    if (v30 != __src)
      memmove(v26, __src, v30 - __src);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = &v26[v31];
    *(_QWORD *)(a1 + 16) = v21;
    if (v32)
      operator delete(v32);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (__src <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)__src = *(_OWORD *)v3;
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void re::ecs2::PlacementAnimationSerialization::~PlacementAnimationSerialization(re::ecs2::PlacementAnimationSerialization *this)
{
  re::ecs2::PlacementAnimationSerialization *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = this;
  if (*((_QWORD *)this + 1))
  {
    v2 = *(unsigned int *)this;
    if ((_DWORD)v2)
    {
      v3 = 0;
      for (i = 0; i < v2; ++i)
      {
        v5 = *((_QWORD *)v1 + 1) + v3;
        if (*(_QWORD *)(v5 + 8))
        {
          v6 = re::globalAllocators(this);
          this = (re::ecs2::PlacementAnimationSerialization *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6[2] + 40))(v6[2], *(_QWORD *)(v5 + 8));
          *(_QWORD *)(v5 + 8) = 0;
          *(_DWORD *)(v5 + 4) = 0;
          v2 = *(unsigned int *)v1;
        }
        v3 += 16;
      }
    }
    v7 = re::globalAllocators(this);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7[2] + 40))(v7[2], *((_QWORD *)v1 + 1));
    *((_QWORD *)v1 + 1) = 0;
  }
}

void re::ecs2::PlacementAnimationSerialization::makeBundle(re::ecs2::PlacementAnimationSerialization *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 __p;
  char *v25;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (*(_DWORD *)this)
  {
    v4 = operator new(0x30uLL);
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    *v4 = &off_24ED5E6C0;
    v4[4] = 0;
    v4[5] = 0;
    std::vector<re::ecs2::DockingSpline>::reserve(v4 + 3);
    *(_QWORD *)&__p = v4 + 3;
    *((_QWORD *)&__p + 1) = v4;
    std::shared_ptr<re::ecs2::PlacementAnimationCurveBundle>::operator=[abi:nn180100](a2, &__p);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    __p = 0uLL;
    v25 = 0;
    if (*(_DWORD *)this)
    {
      v8 = 0;
      do
      {
        v9 = (unint64_t)&v25[-__p] >> 4;
        v10 = *(_DWORD *)(*((_QWORD *)this + 1) + 16 * v8 + 4);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&__p, v11);
        v12 = (char *)__p;
        *((_QWORD *)&__p + 1) = __p;
        v13 = *((_QWORD *)this + 1);
        if (*(_DWORD *)(v13 + 16 * v8 + 4))
        {
          v14 = 0;
          do
          {
            v15 = *(_QWORD *)(v13 + 16 * v8 + 8);
            if (v12 >= v25)
            {
              v16 = (uint64_t)&v12[-__p] >> 4;
              if ((unint64_t)(v16 + 1) >> 60)
                abort();
              v17 = (uint64_t)&v25[-__p] >> 3;
              if (v17 <= v16 + 1)
                v17 = v16 + 1;
              if ((unint64_t)&v25[-__p] >= 0x7FFFFFFFFFFFFFF0)
                v18 = 0xFFFFFFFFFFFFFFFLL;
              else
                v18 = v17;
              if (v18)
                v19 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v25, v18);
              else
                v19 = 0;
              v20 = &v19[16 * v16];
              *(_OWORD *)v20 = *(_OWORD *)(v15 + 16 * v14);
              v12 = v20 + 16;
              v21 = (char *)*((_QWORD *)&__p + 1);
              v22 = (char *)__p;
              if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
              {
                do
                {
                  v23 = *((_OWORD *)v21 - 1);
                  v21 -= 16;
                  *((_OWORD *)v20 - 1) = v23;
                  v20 -= 16;
                }
                while (v21 != v22);
                v21 = (char *)__p;
              }
              *(_QWORD *)&__p = v20;
              *((_QWORD *)&__p + 1) = v12;
              v25 = &v19[16 * v18];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_OWORD *)v12 = *(_OWORD *)(v15 + 16 * v14);
              v12 += 16;
            }
            *((_QWORD *)&__p + 1) = v12;
            ++v14;
            v13 = *((_QWORD *)this + 1);
          }
          while (v14 < *(unsigned int *)(v13 + 16 * v8 + 4));
        }
        re::ecs2::PlacementAnimationCurveBundle::addCurve(*(uint64_t **)a2, *(_DWORD *)(v13 + 16 * v8++), &__p);
      }
      while (v8 < *(unsigned int *)this);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
  }
}

uint64_t std::shared_ptr<re::ecs2::PlacementAnimationCurveBundle>::operator=[abi:nn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void re::ecs2::PlacementAnimationCurveBundle::addCurve(uint64_t *a1, int a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float v9;
  float32x4_t *v10;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  float32x4_t *v20;
  char *v21;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t v25;
  unint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  int v39;
  char *v40;
  void *v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  void *v60[2];
  void *v61[4];
  int v62;
  __int128 v63;
  void *__p;
  float32x4_t *v65;
  _QWORD v66[3];

  memset(v61, 0, sizeof(v61));
  *(_OWORD *)v60 = 0u;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(&__p, (uint64_t)a3);
  if (a3[1] == *a3)
  {
    v63 = xmmword_2260E5F40;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_((uint64_t)&__p, (char *)__p, (char *)&v63);
  }
  else
  {
    v6 = 126 - 2 * __clz(((char *)v65 - (_BYTE *)__p) >> 4);
    if (v65 == __p)
      v7 = 0;
    else
      v7 = v6;
    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_Lb0EEEvT1_SF_T0_NS_15iterator_traitsISF_E15difference_typeEb((float32x4_t *)__p, v65, v7, 1);
    v8 = v65;
    v9 = v65[-1].f32[0];
    if (*(float *)__p <= 0.0)
    {
      if (v9 >= 1.0)
        goto LABEL_27;
    }
    else
    {
      v63 = xmmword_2260E5F40;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_((uint64_t)&__p, (char *)__p, (char *)&v63);
      if (v9 >= 1.0)
      {
        v8 = v65;
        goto LABEL_27;
      }
    }
  }
  v10 = v65;
  if ((unint64_t)v65 >= v66[0])
  {
    v16 = ((char *)v65 - (_BYTE *)__p) >> 4;
    if ((unint64_t)(v16 + 1) >> 60)
      goto LABEL_78;
    v17 = (uint64_t)(v66[0] - (_QWORD)__p) >> 3;
    if (v17 <= v16 + 1)
      v17 = v16 + 1;
    if (v66[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v66, v18);
    else
      v19 = 0;
    v20 = (float32x4_t *)&v19[16 * v16];
    v21 = &v19[16 * v18];
    __asm { FMOV            V0.4S, #1.0 }
    *v20 = _Q0;
    v8 = v20 + 1;
    v24 = (float32x4_t *)__p;
    v23 = v65;
    if (v65 != __p)
    {
      do
      {
        v25 = v23[-1];
        --v23;
        v20[-1] = v25;
        --v20;
      }
      while (v23 != v24);
      v23 = (float32x4_t *)__p;
    }
    __p = v20;
    v65 = v8;
    v66[0] = v21;
    if (v23)
      operator delete(v23);
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
    *v65 = _Q0;
    v8 = v10 + 1;
  }
  v65 = v8;
LABEL_27:
  v26 = ((char *)v8 - (_BYTE *)__p) >> 4;
  if (v26 > (uint64_t)v61[0] >> 3)
  {
    if ((char *)v8 - (_BYTE *)__p < 0)
      goto LABEL_78;
    v60[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v26);
    v60[1] = v60[0];
    v61[0] = (char *)v60[0] + 8 * v27;
  }
  std::vector<float>::reserve(&v61[1], ((char *)v65 - (_BYTE *)__p) >> 4);
  v28 = v65;
  if (v65 != __p)
  {
    v29 = 0;
    v28 = (float32x4_t *)__p;
    do
    {
      v30 = v28[v29].i64[0];
      if (v60[1] >= v61[0])
      {
        v32 = ((char *)v60[1] - (char *)v60[0]) >> 3;
        if ((unint64_t)(v32 + 1) >> 61)
          goto LABEL_78;
        v33 = ((char *)v61[0] - (char *)v60[0]) >> 2;
        if (v33 <= v32 + 1)
          v33 = v32 + 1;
        if ((void *)((char *)v61[0] - (char *)v60[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v34 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v34);
        else
          v35 = 0;
        v36 = (uint64_t *)(v34 + 8 * v32);
        *v36 = v30;
        v31 = (uint64_t)(v36 + 1);
        v37 = (char *)v60[1];
        if (v60[1] != v60[0])
        {
          do
          {
            v38 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v36 = v38;
          }
          while (v37 != v60[0]);
          v37 = (char *)v60[0];
        }
        v60[0] = v36;
        v61[0] = (void *)(v34 + 8 * v35);
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_QWORD *)v60[1] = v30;
        v31 = (uint64_t)v60[1] + 8;
      }
      v60[1] = (void *)v31;
      v39 = *((_DWORD *)__p + 4 * v29 + 2);
      v40 = (char *)v61[2];
      if (v61[2] >= v61[3])
      {
        v42 = (char *)v61[1];
        v43 = ((char *)v61[2] - (char *)v61[1]) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          goto LABEL_78;
        v45 = (char *)v61[3] - (char *)v61[1];
        if (((char *)v61[3] - (char *)v61[1]) >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v61[3], v46);
          v42 = (char *)v61[1];
          v40 = (char *)v61[2];
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[4 * v43];
        *(_DWORD *)v48 = v39;
        v41 = v48 + 4;
        while (v40 != v42)
        {
          v49 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *((_DWORD *)v48 - 1) = v49;
          v48 -= 4;
        }
        v61[1] = v48;
        v61[2] = v41;
        v61[3] = &v47[4 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_DWORD *)v61[2] = v39;
        v41 = v40 + 4;
      }
      v61[2] = v41;
      ++v29;
      v28 = (float32x4_t *)__p;
    }
    while (v29 < ((char *)v65 - (_BYTE *)__p) >> 4);
  }
  if (v28)
  {
    v65 = v28;
    operator delete(v28);
  }
  v62 = a2;
  v50 = a1[2];
  v51 = a1[1];
  if (v51 < v50)
  {
    *(_QWORD *)(v51 + 16) = 0;
    *(_QWORD *)(v51 + 24) = 0;
    *(_QWORD *)v51 = 0;
    *(_QWORD *)(v51 + 8) = 0;
    *(_OWORD *)v51 = *(_OWORD *)v60;
    *(void **)(v51 + 16) = v61[0];
    *(_QWORD *)(v51 + 32) = 0;
    *(_QWORD *)(v51 + 40) = 0;
    *(_OWORD *)(v51 + 24) = *(_OWORD *)&v61[1];
    *(void **)(v51 + 40) = v61[3];
    memset(&v61[1], 0, 24);
    *(_DWORD *)(v51 + 48) = v62;
    a1[1] = v51 + 56;
    return;
  }
  v52 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v51 - *a1) >> 3);
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) > 0x492492492492492)
LABEL_78:
    abort();
  v54 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v50 - *a1) >> 3);
  if (2 * v54 > v53)
    v53 = 2 * v54;
  if (v54 >= 0x249249249249249)
    v53 = 0x492492492492492;
  v66[2] = a1 + 2;
  if (v53 > 0x492492492492492)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = 56 * v53;
  v56 = (char *)operator new(56 * v53);
  v57 = &v56[56 * v52];
  __p = v56;
  v65 = (float32x4_t *)v57;
  *(_OWORD *)v57 = *(_OWORD *)v60;
  *((void **)v57 + 2) = v61[0];
  *(_OWORD *)(v57 + 24) = *(_OWORD *)&v61[1];
  *((void **)v57 + 5) = v61[3];
  memset(&v61[1], 0, 24);
  *((_DWORD *)v57 + 12) = a2;
  v66[0] = v57 + 56;
  v66[1] = &v56[v55];
  std::vector<re::ecs2::DockingSpline>::__swap_out_circular_buffer(a1, &__p);
  v58 = a1[1];
  std::__split_buffer<re::ecs2::DockingSpline>::~__split_buffer((uint64_t)&__p);
  v59 = v61[1];
  a1[1] = v58;
  if (v59)
  {
    v61[2] = v59;
    operator delete(v59);
  }
}

uint64_t *std::vector<re::ecs2::DockingSpline>::reserve(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v3[5];

  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((result[2] - *result) >> 3)) <= 2)
  {
    v1 = result;
    v2 = result[1] - *result;
    v3[4] = result + 2;
    v3[0] = operator new(0xA8uLL);
    v3[1] = v3[0] + v2;
    v3[2] = v3[0] + v2;
    v3[3] = v3[0] + 168;
    std::vector<re::ecs2::DockingSpline>::__swap_out_circular_buffer(v1, v3);
    return (uint64_t *)std::__split_buffer<re::ecs2::DockingSpline>::~__split_buffer((uint64_t)v3);
  }
  return result;
}

_QWORD *re::ecs2::PlacementAnimationCurveBundle::buildSerialization(_QWORD *this, re::ecs2::PlacementAnimationSerialization *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v3 = this[1] - *this;
  if (v3)
  {
    v4 = this;
    *(_DWORD *)a2 = -1227133513 * (v3 >> 3);
    v5 = re::globalAllocators((re *)this);
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5[2] + 32))(v5[2], 16 * *(_DWORD *)a2, 0);
    *((_QWORD *)a2 + 1) = this;
    if (*(_DWORD *)a2)
    {
      v6 = 0;
      do
      {
        v7 = *v4 + 56 * v6;
        v8 = *((_QWORD *)a2 + 1) + 16 * v6;
        v9 = (*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 2;
        *(_DWORD *)v8 = *(_DWORD *)(v7 + 48);
        *(_DWORD *)(v8 + 4) = v9;
        v10 = re::globalAllocators((re *)this);
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10[2] + 32))(v10[2], (int)((4 * (*(_DWORD *)(v7 + 32) - *(_DWORD *)(v7 + 24))) & 0xFFFFFFF0), 0);
        *(_QWORD *)(v8 + 8) = this;
        v11 = (_QWORD *)(v8 + 8);
        if (*(_QWORD *)(v7 + 32) != *(_QWORD *)(v7 + 24))
        {
          v12 = 0;
          v13 = 1;
          do
          {
            v14 = *(_QWORD *)(*(_QWORD *)v7 + 8 * v12);
            v15 = *v11 + 16 * v12;
            HIDWORD(v14) = HIDWORD(*(_QWORD *)v15);
            *(_DWORD *)(v15 + 8) = *(_QWORD *)(v15 + 8);
            *(_QWORD *)v15 = v14;
            v16 = *(_QWORD *)(*(_QWORD *)v7 + 8 * v12);
            v17 = *v11 + 16 * v12;
            v18 = *(_OWORD *)v17;
            *(_DWORD *)(v17 + 8) = *(_QWORD *)(v17 + 8);
            DWORD1(v18) = HIDWORD(v16);
            *(_QWORD *)v17 = v18;
            *(_DWORD *)(*v11 + 16 * v12 + 8) = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 4 * v12);
            v12 = v13++;
          }
          while (v12 < (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 2);
        }
        ++v6;
      }
      while (v6 < *(unsigned int *)a2);
    }
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
  }
  return this;
}

void ___ZN2re4ecs230PlacementAnimatorCurveProvider8instanceEv_block_invoke()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v0 + 32;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0x3FB999999999999ALL;
  v7 = 0uLL;
  std::shared_ptr<re::ecs2::PlacementAnimationCurveBundle>::operator=[abi:nn180100](v0 + 56, &v7);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v7 = 0uLL;
  std::shared_ptr<re::ecs2::PlacementAnimationCurveBundle>::operator=[abi:nn180100](v0 + 72, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  qword_25410BD30 = v0;
}

_QWORD *re::ecs2::PlacementAnimatorCurveProvider::setDockingAnimationOverrides(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  re *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  re *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  __int16 v16;
  __int16 v17;
  uint8_t buf[2];
  __int16 v19;

  if (qword_25410BD38 != -1)
    dispatch_once(&qword_25410BD38, &__block_literal_global_17);
  v4 = qword_25410BD30;
  v5 = *a1;
  v6 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)a1);
  if (v5)
  {
    if ((_DWORD)v6)
    {
      v7 = *re::videoLogObjects(v6);
      v6 = (re *)os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v6)
      {
        v19 = 0;
        v8 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Set custom override for docking";
        v9 = (uint8_t *)&v19;
LABEL_16:
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      }
    }
  }
  else if ((_DWORD)v6)
  {
    v7 = *re::videoLogObjects(v6);
    v6 = (re *)os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v6)
    {
      *(_WORD *)buf = 0;
      v8 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Cleared custom override for docking";
      v9 = buf;
      goto LABEL_16;
    }
  }
  v10 = *a2;
  v11 = (re *)re::VideoDefaults::logEnabled(v6);
  if (v10)
  {
    if ((_DWORD)v11)
    {
      v12 = *re::videoLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v17 = 0;
        v13 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Set custom override for undocking";
        v14 = (uint8_t *)&v17;
LABEL_19:
        _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      }
    }
  }
  else if ((_DWORD)v11)
  {
    v12 = *re::videoLogObjects(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v13 = "[PlacementAnimatorCurveProvider::setDockingAnimationOverrides]: Cleared custom override for undocking";
      v14 = (uint8_t *)&v16;
      goto LABEL_19;
    }
  }
  std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100]((_QWORD *)(v4 + 56), *a1, a1[1]);
  return std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100]((_QWORD *)(v4 + 72), *a2, a2[1]);
}

void re::ecs2::CustomDockingRegionComponent::buildDockAnimation(re::ecs2::CustomDockingRegionComponent *this, const char *a2, const char *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void **v17[3];
  uint64_t v18[3];
  void *__p;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void ***v25;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  memset(v18, 0, sizeof(v18));
  std::vector<re::ecs2::DockingSpline>::reserve(v18);
  memset(v17, 0, sizeof(v17));
  std::vector<re::ecs2::DockingSpline>::reserve((uint64_t *)v17);
  if (!a2)
  {
    v6 = 0;
    if (!a3)
      goto LABEL_25;
    goto LABEL_17;
  }
  re::ecs2::dockingBundleDataFromTuningFile((uint64_t)a2, (char **)&v22, (uint64_t *)&__p);
  v6 = (char *)__p;
  v7 = v20;
  if (v20 == __p)
  {
    v23 = v22;
  }
  else
  {
    v8 = 0;
    if ((unint64_t)((v20 - (_BYTE *)__p) / 24) <= 1)
      v9 = 1;
    else
      v9 = (v20 - (_BYTE *)__p) / 24;
    v10 = __p;
    do
    {
      re::ecs2::PlacementAnimationCurveBundle::addCurve(v18, *((_DWORD *)v22 + v8++), v10);
      v10 += 3;
    }
    while (v9 != v8);
    v23 = v22;
    v11 = v7;
    do
    {
      v13 = (void *)*((_QWORD *)v11 - 3);
      v11 -= 24;
      v12 = v13;
      if (v13)
      {
        *((_QWORD *)v7 - 2) = v12;
        operator delete(v12);
      }
      v7 = v11;
    }
    while (v11 != v6);
    v7 = v6;
  }
  v20 = v7;
  if (a3)
  {
LABEL_17:
    re::ecs2::dockingBundleDataFromTuningFile((uint64_t)a3, (char **)&v22, (uint64_t *)&__p);
    v6 = (char *)__p;
    if (v20 == __p)
    {
      v6 = v20;
    }
    else
    {
      v14 = 0;
      if ((unint64_t)((v20 - (_BYTE *)__p) / 24) <= 1)
        v15 = 1;
      else
        v15 = (v20 - (_BYTE *)__p) / 24;
      v16 = __p;
      do
      {
        re::ecs2::PlacementAnimationCurveBundle::addCurve((uint64_t *)v17, *((_DWORD *)v22 + v14++), v16);
        v16 += 3;
      }
      while (v15 != v14);
    }
  }
LABEL_25:
  re::ecs2::PlacementAnimationCurveBundle::buildSerialization(v18, (re::ecs2::CustomDockingRegionComponent *)((char *)this + 96));
  re::ecs2::PlacementAnimationCurveBundle::buildSerialization(v17, (re::ecs2::CustomDockingRegionComponent *)((char *)this + 112));
  v25 = v17;
  std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100]((void ***)&v25);
  v17[0] = (void **)v18;
  std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100](v17);
  if (v6)
  {
    _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)&__p);
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void re::ecs2::CustomDockingRegionComponent::activateDockAnimationOverrides(re::ecs2::CustomDockingRegionComponent *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  re::ecs2::PlacementAnimationSerialization::makeBundle((re::ecs2::CustomDockingRegionComponent *)((char *)this + 96), (uint64_t)&v9);
  v10 = v9;
  re::ecs2::PlacementAnimationSerialization::makeBundle((re::ecs2::CustomDockingRegionComponent *)((char *)this + 112), (uint64_t)&v8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  v9 = v8;
  re::ecs2::PlacementAnimatorCurveProvider::setDockingAnimationOverrides((uint64_t *)&v10, (uint64_t *)&v9);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t re::ecs2::CustomDockingRegionComponent::getCustomDockingRegionComponentFromScene(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(_QWORD *)(a1 + 224) <= v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(uint64_t **)(v2 + 40);
  v5 = 8 * v3;
  while (1)
  {
    result = *v4;
    v7 = *(_QWORD *)(*v4 + 16);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 288) & 1) != 0)
        break;
    }
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_CustomDockingRegionComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410BD58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410BD58))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410BE00, 0);
    *(uint64_t *)((char *)&qword_25410BE10 + 6) = 0;
    qword_25410BE10 = 0;
    qword_25410BE20 = 0;
    qword_25410BE28 = 0xFFFFFFFFLL;
    qword_25410BE00 = (uint64_t)&off_24ED7DAA8;
    qword_25410BE30 = (uint64_t)"CustomDockingRegionComponent";
    dword_25410BE38 = 0;
    unk_25410BE40 = 0u;
    unk_25410BE50 = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25410BE70 = 0;
    __cxa_guard_release(&qword_25410BD58);
  }
  return &qword_25410BE00;
}

void re::ecs2::initInfo_CustomDockingRegionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const re::IntrospectionBase *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  _anonymous_namespace_ *v19;
  unint64_t v20;
  unint64_t i;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  unint64_t j;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  re *v42;
  uint64_t *v43;
  re *v44;
  uint64_t *v45;
  re *v46;
  uint64_t *v47;
  re *v48;
  uint64_t *v49;
  re *v50;
  uint64_t *v51;
  re *v52;
  uint64_t *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60[2];
  StringID v61;
  _QWORD v62[2];
  uint64_t v63;
  const char *v64;

  v63 = 0x7AC04804869D2916;
  v64 = "CustomDockingRegionComponent";
  re::StringID::destroyString((re::StringID *)&v63);
  *((_OWORD *)this + 2) = v59;
  v4 = atomic_load((unsigned __int8 *)&qword_25410BD50);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v5 = (re *)__cxa_guard_acquire(&qword_25410BD50);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v6 = re::introspectionAllocator(v5);
  v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = "Component";
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 40) = 3;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_25410BD60 = v8;
  v9 = re::introspectionAllocator((re *)v8);
  v10 = re::introspect_AABB((re::IntrospectionBase **)1);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = "m_bounds";
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0x2000000001;
  *(_DWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  qword_25410BD68 = v11;
  v13 = re::introspectionAllocator((re *)v11);
  v14 = atomic_load((unsigned __int8 *)&qword_25410BD40);
  if ((v14 & 1) == 0)
  {
    v42 = (re *)__cxa_guard_acquire(&qword_25410BD40);
    if ((_DWORD)v42)
    {
      v43 = re::introspectionAllocator(v42);
      v44 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 24, 8);
      *(_DWORD *)v44 = 1;
      *((_QWORD *)v44 + 1) = 0;
      *((_QWORD *)v44 + 2) = "DockTransitionStyleDefault";
      qword_25410BD80 = (uint64_t)v44;
      v45 = re::introspectionAllocator(v44);
      v46 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 24, 8);
      *(_DWORD *)v46 = 1;
      *((_QWORD *)v46 + 1) = 1;
      *((_QWORD *)v46 + 2) = "DockTransitionStyleGroundSkim";
      qword_25410BD88 = (uint64_t)v46;
      v47 = re::introspectionAllocator(v46);
      v48 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 24, 8);
      *(_DWORD *)v48 = 1;
      *((_QWORD *)v48 + 1) = 2;
      *((_QWORD *)v48 + 2) = "DockTransitionStyleSwoop";
      qword_25410BD90 = (uint64_t)v48;
      v49 = re::introspectionAllocator(v48);
      v50 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 24, 8);
      *(_DWORD *)v50 = 1;
      *((_QWORD *)v50 + 1) = 3;
      *((_QWORD *)v50 + 2) = "DockTransitionStyleCustom0";
      qword_25410BD98 = (uint64_t)v50;
      v51 = re::introspectionAllocator(v50);
      v52 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v51 + 32))(v51, 24, 8);
      *(_DWORD *)v52 = 1;
      *((_QWORD *)v52 + 1) = 4;
      *((_QWORD *)v52 + 2) = "DockTransitionStyleCustom1";
      qword_25410BDA0 = (uint64_t)v52;
      v53 = re::introspectionAllocator(v52);
      v54 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 24, 8);
      *(_DWORD *)v54 = 1;
      *((_QWORD *)v54 + 1) = 5;
      *((_QWORD *)v54 + 2) = "DockTransitionStyleCustom2";
      qword_25410BDA8 = (uint64_t)v54;
      v55 = re::introspectionAllocator(v54);
      v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 24, 8);
      *(_DWORD *)v56 = 1;
      *(_QWORD *)(v56 + 8) = 6;
      *(_QWORD *)(v56 + 16) = "DockTransitionStyleCustom3";
      qword_25410BDB0 = v56;
      __cxa_guard_release(&qword_25410BD40);
    }
  }
  v15 = atomic_load((unsigned __int8 *)&qword_25410BD48);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25410BD48))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410BDB8, "DockTransitionStyle", 1, 1, 1, 1);
    qword_25410BDB8 = (uint64_t)&off_24ED7D9E8;
    qword_25410BDF8 = (uint64_t)&re::ecs2::introspect_DockTransitionStyle(BOOL)::enumTable;
    dword_25410BDC8 = 9;
    __cxa_guard_release(&qword_25410BD48);
  }
  if ((_MergedGlobals_200 & 1) != 0)
  {
LABEL_33:
    v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = "m_transitionStyle";
    *(_QWORD *)(v38 + 16) = &qword_25410BDB8;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0x4000000002;
    *(_DWORD *)(v38 + 40) = 0;
    *(_QWORD *)(v38 + 48) = 0;
    *(_QWORD *)(v38 + 56) = 0;
    *(_DWORD *)(v38 + 64) = 0;
    qword_25410BD70 = v38;
    v39 = re::introspectionAllocator((re *)v38);
    v40 = re::introspect_Vector3F((re::IntrospectionBase **)1);
    v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = "m_dockPosition";
    *(_QWORD *)(v41 + 16) = v40;
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = 0x5000000003;
    *(_DWORD *)(v41 + 40) = 0;
    *(_QWORD *)(v41 + 48) = 0;
    *(_QWORD *)(v41 + 56) = 0;
    *(_DWORD *)(v41 + 64) = 0;
    qword_25410BD78 = v41;
    __cxa_guard_release(&qword_25410BD50);
LABEL_2:
    *((_QWORD *)this + 2) = 0x8000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 4;
    *((_QWORD *)this + 8) = &qword_25410BD60;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomDockingRegionComponent>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CustomDockingRegionComponent>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomDockingRegionComponent>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomDockingRegionComponent>;
    re::IntrospectionRegistry::add(this, v3);
    v58 = v59;
    return;
  }
  _MergedGlobals_200 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410BDB8, v12);
  v60[0] = 0x7F7AD97148E63D12;
  v60[1] = (uint64_t)"DockTransitionStyle";
  v63 = 0x31CD534126;
  v64 = "uint8_t";
  v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v63);
  if (v16)
  {
    v17 = *v16;
    re::StringID::destroyString((re::StringID *)&v63);
    v18 = (unsigned int *)qword_25410BDF8;
    v62[1] = v17;
    re::TypeBuilder::beginEnumType((uint64_t)&v63, v60, 1, 1, (uint64_t)v62);
    v20 = *v18;
    if ((_DWORD)v20)
    {
      for (i = 0; i < v20; ++i)
      {
        v22 = *(_QWORD *)(*((_QWORD *)v18 + 1) + 8 * i);
        if (*(_DWORD *)v22 == 1)
        {
          v23 = *(char **)(v22 + 16);
          if (v23)
          {
            v24 = *v23;
            if (*v23)
            {
              v25 = v23[1];
              if (v25)
              {
                v26 = (unsigned __int8 *)(v23 + 2);
                do
                {
                  v24 = 31 * v24 + v25;
                  v27 = *v26++;
                  v25 = v27;
                }
                while (v27);
              }
            }
          }
          else
          {
            v24 = 0;
          }
          v28 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)&v61.var0 = 2 * v24;
          v61.var1 = v23;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v63, v28, &v61);
          re::StringID::destroyString((re::StringID *)&v61);
          v20 = *v18;
        }
      }
      if (v20)
      {
        for (j = 0; j < v20; ++j)
        {
          v30 = *(_QWORD *)(*((_QWORD *)v18 + 1) + 8 * j);
          if (*(_DWORD *)v30 == 2)
          {
            v31 = *(char **)(v30 + 16);
            if (v31)
            {
              v32 = *v31;
              if (*v31)
              {
                v33 = v31[1];
                if (v33)
                {
                  v34 = (unsigned __int8 *)(v31 + 2);
                  do
                  {
                    v32 = 31 * v32 + v33;
                    v35 = *v34++;
                    v33 = v35;
                  }
                  while (v35);
                }
              }
            }
            else
            {
              v32 = 0;
            }
            v36 = *(_QWORD *)(v30 + 8);
            *(_QWORD *)&v61.var0 = 2 * v32;
            v61.var1 = v31;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v63, v36, &v61);
            re::StringID::destroyString((re::StringID *)&v61);
            v20 = *v18;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v63, v37);
    xmmword_25410BDD8 = (__int128)v61;
    re::StringID::destroyString((re::StringID *)v60);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v63);
  re::internal::assertLog((re::internal *)5, v57, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "DockTransitionStyle");
  _os_crash();
  __break(1u);
}

int32x4_t re::internal::defaultConstruct<re::ecs2::CustomDockingRegionComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  int32x4_t result;
  __int128 v5;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57088;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomDockingRegionComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::CustomDockingRegionComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  int32x4_t result;
  __int128 v3;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57088;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomDockingRegionComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CustomDockingRegionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDockingRegionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDockingRegionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDockingRegionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDockingRegionComponent>, this);
}

void std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<re::ecs2::DockingSpline>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<re::ecs2::DockingSpline>::destroy[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

std::vector<int> *__cdecl std::vector<float>::vector(std::vector<int> *this, const std::vector<int> *__x)
{
  int *end;
  std::vector<int>::pointer begin;
  int64_t v5;
  std::vector<int>::pointer v6;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = __x->__begin_;
  end = __x->__end_;
  v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<float>::__vallocate[abi:nn180100](this, v5 >> 2);
    v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<int>::pointer)((char *)v6 + v5);
  }
  return this;
}

char *std::vector<float>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

void _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v5 >> 4);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

float32x4_t *_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_Lb0EEEvT1_SF_T0_NS_15iterator_traitsISF_E15difference_typeEb(float32x4_t *result, float32x4_t *a2, uint64_t a3, char a4)
{
  float32x4_t *v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  float32x4_t v16;
  float32x4_t v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned __int8 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  unsigned __int8 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  unsigned __int8 v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  BOOL v58;
  float32x4_t v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  unsigned __int8 v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  BOOL v84;
  uint64_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  int64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float32x4_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x4_t v104;
  float32x4_t *v105;
  float32x4_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t *v117;
  float32x4_t v118;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v68 = a2[-1];
        v69 = *v8;
        if ((vmovn_s32(vcgtq_f32(*v8, v68)).u8[0] & 1) != 0)
        {
          *v8 = v68;
          a2[-1] = v69;
        }
        return result;
      case 3:
        v70 = *v8;
        v71 = v8[1];
        v72 = a2[-1];
        v73 = vmovn_s32(vcgtq_f32(v71, v72)).u8[0];
        if ((vmovn_s32(vcgtq_f32(*v8, v71)).u8[0] & 1) != 0)
        {
          if ((v73 & 1) != 0)
          {
            *v8 = v72;
          }
          else
          {
            *v8 = v71;
            v8[1] = v70;
            v118 = a2[-1];
            if ((vmovn_s32(vcgtq_f32(v70, v118)).u8[0] & 1) == 0)
              return result;
            v8[1] = v118;
          }
          a2[-1] = v70;
        }
        else if ((v73 & 1) != 0)
        {
          v8[1] = v72;
          a2[-1] = v71;
          v79 = v8[1];
          goto LABEL_158;
        }
        return result;
      case 4:
        return _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v74 = v8 + 1;
        v75 = v8 + 2;
        v76 = v8 + 3;
        result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(v7, v7 + 1, v7 + 2, v7 + 3);
        v77 = a2[-1];
        v78 = v7[3];
        if ((vmovn_s32(vcgtq_f32(v78, v77)).u8[0] & 1) != 0)
        {
          *v76 = v77;
          a2[-1] = v78;
          v79 = *v76;
          v80 = *v75;
          if ((vmovn_s32(vcgtq_f32(*v75, *v76)).u8[0] & 1) != 0)
          {
            *v75 = v79;
            *v76 = v80;
            v81 = *v74;
            if ((vmovn_s32(vcgtq_f32(*v74, v79)).u8[0] & 1) != 0)
            {
              v7[1] = v79;
              v7[2] = v81;
LABEL_158:
              v114 = *v7;
              if ((vmovn_s32(vcgtq_f32(*v7, v79)).u8[0] & 1) != 0)
              {
                *v7 = v79;
                v7[1] = v114;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v82 = v8 + 1;
          v84 = v8 == a2 || v82 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v84)
            {
              v85 = 16;
              v86 = v8;
              do
              {
                v88 = *v86;
                v87 = v86[1];
                v86 = v82;
                if ((vmovn_s32(vcgtq_f32(v88, v87)).u8[0] & 1) != 0)
                {
                  v89 = v85;
                  while (1)
                  {
                    *(float32x4_t *)((char *)v8 + v89) = v88;
                    v90 = v89 - 16;
                    if (v89 == 16)
                      break;
                    v88 = *(float32x4_t *)((char *)v8 + v89 - 32);
                    v89 -= 16;
                    if ((vmovn_s32(vcgtq_f32(v88, v87)).u8[0] & 1) == 0)
                    {
                      v91 = (float32x4_t *)((char *)v8 + v90);
                      goto LABEL_124;
                    }
                  }
                  v91 = v8;
LABEL_124:
                  *v91 = v87;
                }
                v82 = v86 + 1;
                v85 += 16;
              }
              while (&v86[1] != a2);
            }
          }
          else if (!v84)
          {
            do
            {
              v116 = *v7;
              v115 = v7[1];
              v7 = v82;
              if ((vmovn_s32(vcgtq_f32(v116, v115)).u8[0] & 1) != 0)
              {
                v117 = v82;
                do
                {
                  *v117 = v116;
                  v116 = v117[-2];
                  --v117;
                }
                while ((vmovn_s32(vcgtq_f32(v116, v115)).u8[0] & 1) != 0);
                *v117 = v115;
              }
              ++v82;
            }
            while (&v7[1] != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v92 = (unint64_t)(v10 - 2) >> 1;
          v93 = v92;
          do
          {
            v94 = v93;
            if (v92 >= v93)
            {
              v95 = (2 * v93) | 1;
              v96 = &v8[v95];
              if (2 * v94 + 2 < v10 && v96->f32[0] < COERCE_FLOAT(*(_OWORD *)&v96[1]))
              {
                ++v96;
                v95 = 2 * v94 + 2;
              }
              v97 = &v8[v94];
              v98 = *v96;
              v99 = *v97;
              if ((vmovn_s32(vcgtq_f32(*v97, *v96)).u8[0] & 1) == 0)
              {
                do
                {
                  *v97 = v98;
                  v97 = v96;
                  if (v92 < v95)
                    break;
                  v100 = 2 * v95;
                  v95 = (2 * v95) | 1;
                  v96 = &v8[v95];
                  v101 = v100 + 2;
                  if (v101 < v10 && v96->f32[0] < COERCE_FLOAT(*(_OWORD *)&v96[1]))
                  {
                    ++v96;
                    v95 = v101;
                  }
                  v98 = *v96;
                }
                while ((vmovn_s32(vcgtq_f32(v99, *v96)).u8[0] & 1) == 0);
                *v97 = v99;
              }
            }
            v93 = v94 - 1;
          }
          while (v94);
          v102 = (unint64_t)v9 >> 4;
          while (2)
          {
            v103 = 0;
            v104 = *v8;
            v105 = v8;
            do
            {
              v106 = v105;
              v105 += v103 + 1;
              v107 = 2 * v103;
              v103 = (2 * v103) | 1;
              v108 = v107 + 2;
              if (v108 < v102 && v105->f32[0] < COERCE_FLOAT(*(_OWORD *)&v105[1]))
              {
                ++v105;
                v103 = v108;
              }
              *v106 = *v105;
            }
            while (v103 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
            if (v105 == --a2)
            {
LABEL_152:
              *v105 = v104;
            }
            else
            {
              *v105 = *a2;
              *a2 = v104;
              v109 = (char *)v105 - (char *)v8 + 16;
              if (v109 >= 17)
              {
                v110 = (((unint64_t)v109 >> 4) - 2) >> 1;
                v111 = &v8[v110];
                v112 = *v111;
                v104 = *v105;
                if ((vmovn_s32(vcgtq_f32(*v105, *v111)).u8[0] & 1) != 0)
                {
                  do
                  {
                    *v105 = v112;
                    v105 = v111;
                    if (!v110)
                      break;
                    v110 = (v110 - 1) >> 1;
                    v111 = &v8[v110];
                    v112 = *v111;
                  }
                  while ((vmovn_s32(vcgtq_f32(v104, *v111)).u8[0] & 1) != 0);
                  goto LABEL_152;
                }
              }
            }
            if (v102-- <= 2)
              return result;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a2[-1];
        if ((unint64_t)v9 >= 0x801)
        {
          v13 = v8[v11];
          v14 = *v8;
          v15 = vmovn_s32(vcgtq_f32(v13, v12)).u8[0];
          if ((vmovn_s32(vcgtq_f32(*v8, v13)).u8[0] & 1) != 0)
          {
            if ((v15 & 1) != 0)
            {
              *v8 = v12;
              goto LABEL_21;
            }
            *v8 = v13;
            v8[v11] = v14;
            v22 = a2[-1];
            if ((vmovn_s32(vcgtq_f32(v14, v22)).u8[0] & 1) != 0)
            {
              v8[v11] = v22;
LABEL_21:
              a2[-1] = v14;
            }
          }
          else if ((v15 & 1) != 0)
          {
            v8[v11] = v12;
            a2[-1] = v13;
            v19 = v8[v11];
            v20 = *v8;
            if ((vmovn_s32(vcgtq_f32(*v8, v19)).u8[0] & 1) != 0)
            {
              *v8 = v19;
              v8[v11] = v20;
            }
          }
          v23 = v11 - 1;
          v24 = v8[v11 - 1];
          v25 = v8[1];
          v26 = a2[-2];
          v27 = vmovn_s32(vcgtq_f32(v24, v26)).u8[0];
          if ((vmovn_s32(vcgtq_f32(v25, v24)).u8[0] & 1) != 0)
          {
            if ((v27 & 1) != 0)
            {
              v8[1] = v26;
              goto LABEL_33;
            }
            v8[1] = v24;
            v8[v23] = v25;
            v31 = a2[-2];
            if ((vmovn_s32(vcgtq_f32(v25, v31)).u8[0] & 1) != 0)
            {
              v8[v23] = v31;
LABEL_33:
              a2[-2] = v25;
            }
          }
          else if ((v27 & 1) != 0)
          {
            v8[v23] = v26;
            a2[-2] = v24;
            v28 = v8[v23];
            v29 = v8[1];
            if ((vmovn_s32(vcgtq_f32(v29, v28)).u8[0] & 1) != 0)
            {
              v8[1] = v28;
              v8[v23] = v29;
            }
          }
          v32 = v11 + 1;
          v33 = v8[v11 + 1];
          v34 = v8[2];
          v35 = a2[-3];
          v36 = vmovn_s32(vcgtq_f32(v33, v35)).u8[0];
          if ((vmovn_s32(vcgtq_f32(v34, v33)).u8[0] & 1) != 0)
          {
            if ((v36 & 1) != 0)
            {
              v8[2] = v35;
              goto LABEL_42;
            }
            v8[2] = v33;
            v8[v32] = v34;
            v39 = a2[-3];
            if ((vmovn_s32(vcgtq_f32(v34, v39)).u8[0] & 1) != 0)
            {
              v8[v32] = v39;
LABEL_42:
              a2[-3] = v34;
            }
          }
          else if ((v36 & 1) != 0)
          {
            v8[v32] = v35;
            a2[-3] = v33;
            v37 = v8[v32];
            v38 = v8[2];
            if ((vmovn_s32(vcgtq_f32(v38, v37)).u8[0] & 1) != 0)
            {
              v8[2] = v37;
              v8[v32] = v38;
            }
          }
          v40 = v8[v11];
          v41 = v8[v23];
          v42 = v8[v32];
          v43 = vmovn_s32(vcgtq_f32(v40, v42)).u8[0];
          if ((vmovn_s32(vcgtq_f32(v41, v40)).u8[0] & 1) != 0)
          {
            if ((v43 & 1) != 0)
            {
              v8[v23] = v42;
              v8[v32] = v41;
LABEL_53:
              v44 = *v8;
              *v8 = v40;
              v8[v11] = v44;
              goto LABEL_54;
            }
            v8[v23] = v40;
            v8[v11] = v41;
            if ((vmovn_s32(vcgtq_f32(v41, v42)).u8[0] & 1) != 0)
            {
              v8[v11] = v42;
              v8[v32] = v41;
              goto LABEL_51;
            }
          }
          else
          {
            if ((v43 & 1) == 0)
              goto LABEL_53;
            v8[v11] = v42;
            v8[v32] = v40;
            if ((vmovn_s32(vcgtq_f32(v41, v42)).u8[0] & 1) == 0)
            {
LABEL_51:
              v40 = v42;
              goto LABEL_53;
            }
            v8[v23] = v42;
            v8[v11] = v41;
          }
          v40 = v41;
          goto LABEL_53;
        }
        v16 = *v8;
        v17 = v8[v11];
        v18 = vmovn_s32(vcgtq_f32(*v8, v12)).u8[0];
        if ((vmovn_s32(vcgtq_f32(v17, *v8)).u8[0] & 1) != 0)
        {
          if ((v18 & 1) != 0)
          {
            v8[v11] = v12;
          }
          else
          {
            v8[v11] = v16;
            *v8 = v17;
            v30 = a2[-1];
            if ((vmovn_s32(vcgtq_f32(v17, v30)).u8[0] & 1) == 0)
              goto LABEL_54;
            *v8 = v30;
          }
          a2[-1] = v17;
        }
        else if ((v18 & 1) != 0)
        {
          *v8 = v12;
          a2[-1] = v16;
          v21 = v8[v11];
          if ((vmovn_s32(vcgtq_f32(v21, *v8)).u8[0] & 1) != 0)
          {
            v8[v11] = *v8;
            *v8 = v21;
          }
        }
LABEL_54:
        --a3;
        v45 = *v8;
        if ((a4 & 1) == 0 && v8[-1].f32[0] >= v45.f32[0])
        {
          if (v45.f32[0] >= a2[-1].f32[0])
          {
            v60 = v8 + 1;
            do
            {
              v8 = v60;
              if (v60 >= a2)
                break;
              ++v60;
            }
            while (v45.f32[0] >= COERCE_FLOAT(*v8));
          }
          else
          {
            do
            {
              v59 = v8[1];
              ++v8;
            }
            while (v45.f32[0] >= v59.f32[0]);
          }
          v61 = a2;
          if (v8 < a2)
          {
            v61 = a2;
            do
            {
              v62 = v61[-1];
              --v61;
            }
            while (v45.f32[0] < v62.f32[0]);
          }
          if (v8 < v61)
          {
            v63 = *v8;
            v64 = *v61;
            do
            {
              *v8 = v64;
              *v61 = v63;
              do
              {
                v65 = v8[1];
                ++v8;
                v63 = v65;
              }
              while ((vmovn_s32(vcgtq_f32(v65, v45)).u8[0] & 1) == 0);
              do
              {
                v66 = v61[-1];
                --v61;
                v64 = v66;
              }
              while ((vmovn_s32(vcgtq_f32(v66, v45)).u8[0] & 1) != 0);
            }
            while (v8 < v61);
          }
          v67 = v8 - 1;
          if (&v8[-1] != v7)
            *v7 = *v67;
          a4 = 0;
          *v67 = v45;
          continue;
        }
        v46 = 0;
        do
          v47 = v8[++v46];
        while (v47.f32[0] < v45.f32[0]);
        v48 = &v8[v46];
        v49 = a2;
        if (v46 == 1)
        {
          v49 = a2;
          do
          {
            if (v48 >= v49)
              break;
            v51 = v49[-1];
            --v49;
          }
          while (v51.f32[0] >= v45.f32[0]);
        }
        else
        {
          do
          {
            v50 = v49[-1];
            --v49;
          }
          while (v50.f32[0] >= v45.f32[0]);
        }
        if (v48 >= v49)
        {
          v57 = v48 - 1;
        }
        else
        {
          v52 = *v49;
          v53 = &v8[v46];
          v54 = v49;
          do
          {
            *v53 = v52;
            *v54 = v47;
            do
            {
              v55 = v53[1];
              ++v53;
              v47 = v55;
            }
            while (v55.f32[0] < v45.f32[0]);
            do
            {
              v56 = v54[-1];
              --v54;
              v52 = v56;
            }
            while (v56.f32[0] >= v45.f32[0]);
          }
          while (v53 < v54);
          v57 = v53 - 1;
        }
        if (v57 != v8)
          *v8 = *v57;
        *v57 = v45;
        if (v48 < v49)
        {
LABEL_77:
          result = (float32x4_t *)_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_Lb0EEEvT1_SF_T0_NS_15iterator_traitsISF_E15difference_typeEb(v7, v57, a3, a4 & 1);
          a4 = 0;
          v8 = v57 + 1;
          continue;
        }
        v58 = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEbT1_SF_T0_(v8, v57);
        v8 = v57 + 1;
        result = (float32x4_t *)_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEbT1_SF_T0_(v57 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v58)
            continue;
          goto LABEL_77;
        }
        a2 = v57;
        if (!v58)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEbT1_SF_T0_(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unsigned __int8 v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unsigned __int8 v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  int v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1];
      v7 = *a1;
      if ((vmovn_s32(vcgtq_f32(*a1, v6)).u8[0] & 1) != 0)
      {
        *a1 = v6;
        a2[-1] = v7;
      }
      return result;
    case 3:
      v8 = *a1;
      v9 = a1[1];
      v10 = a2[-1];
      v11 = vmovn_s32(vcgtq_f32(v9, v10)).u8[0];
      if ((vmovn_s32(vcgtq_f32(*a1, v9)).u8[0] & 1) != 0)
      {
        if ((v11 & 1) != 0)
        {
          *a1 = v10;
        }
        else
        {
          *a1 = v9;
          a1[1] = v8;
          v28 = a2[-1];
          if ((vmovn_s32(vcgtq_f32(v8, v28)).u8[0] & 1) == 0)
            return result;
          a1[1] = v28;
        }
        a2[-1] = v8;
      }
      else if ((v11 & 1) != 0)
      {
        a1[1] = v10;
        a2[-1] = v9;
        v27 = *a1;
        v26 = a1[1];
        if ((vmovn_s32(vcgtq_f32(*a1, v26)).u8[0] & 1) != 0)
        {
          *a1 = v26;
          a1[1] = v27;
        }
      }
      return result;
    case 4:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = a2[-1];
      v21 = a1[3];
      if ((vmovn_s32(vcgtq_f32(v21, v20)).u8[0] & 1) != 0)
      {
        *v19 = v20;
        a2[-1] = v21;
        v22 = *v19;
        v23 = *v18;
        if ((vmovn_s32(vcgtq_f32(*v18, *v19)).u8[0] & 1) != 0)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if ((vmovn_s32(vcgtq_f32(*v17, v22)).u8[0] & 1) != 0)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if ((vmovn_s32(vcgtq_f32(*a1, v22)).u8[0] & 1) != 0)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2];
      v14 = *a1;
      v15 = a1[1];
      v16 = vmovn_s32(vcgtq_f32(v15, v13)).u8[0];
      if ((vmovn_s32(vcgtq_f32(*a1, v15)).u8[0] & 1) != 0)
      {
        if ((v16 & 1) != 0)
        {
          *a1 = v13;
        }
        else
        {
          *a1 = v15;
          a1[1] = v14;
          if ((vmovn_s32(vcgtq_f32(v14, v13)).u8[0] & 1) == 0)
            goto LABEL_28;
          a1[1] = v13;
        }
        a1[2] = v14;
      }
      else if ((v16 & 1) != 0)
      {
        a1[1] = v13;
        a1[2] = v15;
        if ((vmovn_s32(vcgtq_f32(v14, v13)).u8[0] & 1) != 0)
        {
          *a1 = v13;
          a1[1] = v14;
        }
      }
LABEL_28:
      v29 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v30 = 0;
      v31 = 48;
      break;
  }
  while (1)
  {
    v32 = *v29;
    v33 = *v12;
    if ((vmovn_s32(vcgtq_f32(*v12, *v29)).u8[0] & 1) != 0)
    {
      v34 = v31;
      while (1)
      {
        *(float32x4_t *)((char *)a1 + v34) = v33;
        v35 = v34 - 16;
        if (v34 == 16)
          break;
        v33 = *(float32x4_t *)((char *)a1 + v34 - 32);
        v34 -= 16;
        if ((vmovn_s32(vcgtq_f32(v33, v32)).u8[0] & 1) == 0)
        {
          v36 = (float32x4_t *)((char *)a1 + v35);
          goto LABEL_36;
        }
      }
      v36 = a1;
LABEL_36:
      *v36 = v32;
      if (++v30 == 8)
        return &v29[1] == a2;
    }
    v12 = v29;
    v31 += 16;
    if (++v29 == a2)
      return 1;
  }
}

float32x4_t *_ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2re4ecs216SplineParametricC1ERKNS_6vectorIDv3_fNS_9allocatorIS6_EEEEE3__0PS6_EEvT1_SF_SF_SF_T0_(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  unsigned __int8 v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  v7 = vmovn_s32(vcgtq_f32(*a2, *a3)).u8[0];
  if ((vmovn_s32(vcgtq_f32(*result, *a2)).u8[0] & 1) != 0)
  {
    if ((v7 & 1) != 0)
    {
      *result = v6;
    }
    else
    {
      *result = v4;
      *a2 = v5;
      if ((vmovn_s32(vcgtq_f32(v5, *a3)).u8[0] & 1) == 0)
      {
        v5 = *a3;
        goto LABEL_12;
      }
      *a2 = *a3;
    }
    *a3 = v5;
  }
  else if ((v7 & 1) != 0)
  {
    *a2 = v6;
    *a3 = v4;
    v8 = *result;
    v5 = v4;
    if ((vmovn_s32(vcgtq_f32(*result, *a2)).u8[0] & 1) != 0)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
    }
  }
  else
  {
    v5 = *a3;
  }
LABEL_12:
  if ((vmovn_s32(vcgtq_f32(v5, *a4)).u8[0] & 1) != 0)
  {
    *a3 = *a4;
    *a4 = v5;
    v9 = *a2;
    if ((vmovn_s32(vcgtq_f32(*a2, *a3)).u8[0] & 1) != 0)
    {
      *a2 = *a3;
      *a3 = v9;
      v10 = *result;
      if ((vmovn_s32(vcgtq_f32(*result, *a2)).u8[0] & 1) != 0)
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<re::ecs2::PlacementAnimationCurveBundle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED5E6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::ecs2::PlacementAnimationCurveBundle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED5E6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<re::ecs2::PlacementAnimationCurveBundle>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<re::ecs2::DockingSpline>::__destroy_vector::operator()[abi:nn180100](&v1);
}

uint64_t *std::vector<re::ecs2::DockingSpline>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<re::ecs2::DockingSpline>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<re::ecs2::DockingSpline>::destroy[abi:nn180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  std::__shared_mutex_base *v7;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v2 & 1) == 0
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info = (uint64_t)&off_24ED5E710;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (re *)re::ecs2::introspect_VideoMaterialAttachment((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info, 0);
    qword_255802488 = 0x2800000003;
    dword_255802490 = v10;
    word_255802494 = 0;
    *(_QWORD *)&xmmword_255802498 = 0;
    *((_QWORD *)&xmmword_255802498 + 1) = 0xFFFFFFFFLL;
    qword_2558024A8 = v9;
    unk_2558024B0 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info = (uint64_t)&off_24ED5E710;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *(_OWORD *)(v9 + 32);
    xmmword_255802498 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(BOOL)::info;
}

uint64_t *re::ecs2::allocInfo_ImageBasedReflectionReceiverComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410BE80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410BE80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410BE98, 0);
    *(uint64_t *)((char *)&qword_25410BEA8 + 6) = 0;
    qword_25410BEA8 = 0;
    qword_25410BEB8 = 0;
    qword_25410BEC0 = 0xFFFFFFFFLL;
    qword_25410BE98 = (uint64_t)&off_24ED7DAA8;
    qword_25410BEC8 = (uint64_t)"ImageBasedReflectionReceiverComponent";
    dword_25410BED0 = 0;
    unk_25410BED8 = 0u;
    unk_25410BEE8 = 0u;
    unk_25410BEF8 = 0u;
    qword_25410BF08 = 0;
    __cxa_guard_release(&qword_25410BE80);
  }
  return &qword_25410BE98;
}

void re::ecs2::initInfo_ImageBasedReflectionReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x25EE020AF0649916;
  v13[1] = "ImageBasedReflectionReceiverComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_201);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_201);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410BE88 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_attachments";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410BE90 = v11;
      __cxa_guard_release(&_MergedGlobals_201);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410BE88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionReceiverComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionReceiverComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionReceiverComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

double re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57108;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionReceiverComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57108;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedReflectionReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionReceiverComponent>, this);
}

re::StringID *re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  re::StringID *v5;
  re::StringID *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::VideoMaterialAttachment>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = re::StringID::StringID((re::StringID *)(*((_QWORD *)this + 4) + 32 * v4), a2);
  result = re::StringID::StringID((re::StringID *)((char *)v5 + 16), a2 + 1);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL re::DynamicArray<re::ecs2::VideoMaterialAttachment>::remove(uint64_t a1, _QWORD *a2)
{
  int v3;
  _BYTE v5[8];
  unint64_t v6;

  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::indexOf(a1, a2, (uint64_t)v5);
  v3 = v5[0];
  if (v5[0])
    re::DynamicArray<re::ecs2::VideoMaterialAttachment>::removeAt(a1, v6);
  return v3 != 0;
}

BOOL re::ecs2::ImageBasedReflectionReceiverComponent::receivesSpecularLightSpill(re::ecs2::ImageBasedReflectionReceiverComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  const char **v3;
  const char *v4;
  int v5;
  _BOOL8 result;
  BOOL v7;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = 32 * v1 - 32;
  v3 = (const char **)(*((_QWORD *)this + 8) + 8);
  do
  {
    v4 = *v3;
    v3 += 4;
    v5 = strcmp(v4, "REVideoAttachmentSpillSpecular");
    result = v5 == 0;
    if (v5)
      v7 = v2 == 0;
    else
      v7 = 1;
    v2 -= 32;
  }
  while (!v7);
  return result;
}

uint64_t re::ecs2::ImageBasedReflectionReceiverComponent::receivesDiffuseLightSpill(re::ecs2::ImageBasedReflectionReceiverComponent *this)
{
  uint64_t v1;
  const char **v2;
  uint64_t v3;
  const char *v4;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = (const char **)(*((_QWORD *)this + 8) + 8);
  v3 = 32 * v1;
  while (1)
  {
    v4 = *v2;
    if (!strcmp(*v2, "REVideoAttachmentSpill") || !strcmp(v4, "REVideoAttachmentChannelID1TextureSpill"))
      break;
    v2 += 4;
    v3 -= 32;
    if (!v3)
      return 0;
  }
  return 1;
}

void re::ecs2::ImageBasedReflectionReceiverComponent::removeParamsFromSystemParameterBlock(re::ecs2::ImageBasedReflectionReceiverComponent *this, re::MaterialManager *a2, char a3)
{
  uint64_t v6;
  uint64_t *SystemMaterialParameterBlock;
  re::MaterialParameterBlock *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::MaterialParameterBlock *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::MaterialParameterBlock *v17;

  v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 296);
  SystemMaterialParameterBlock = re::MaterialManager::getSystemMaterialParameterBlock(a2, v6);
  if (SystemMaterialParameterBlock)
  {
    v8 = (re::MaterialParameterBlock *)SystemMaterialParameterBlock;
    v9 = *((_QWORD *)this + 6);
    if (v9)
    {
      v10 = *((_QWORD *)this + 8);
      v11 = 32 * v9;
      do
      {
        re::MaterialParameterBlock::removeParameter(v8, *(const char **)(v10 + 24));
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock((char **)v10, v8, v12);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
    v13 = (char *)this + 72;
    v14 = *((_QWORD *)this + 11);
    if (v14)
    {
      v15 = *((_QWORD *)this + 13);
      v16 = 32 * v14;
      do
      {
        re::MaterialParameterBlock::removeParameter(v8, *(const char **)(v15 + 24));
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock((char **)v15, v8, v17);
        v15 += 32;
        v16 -= 32;
      }
      while (v16);
    }
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear((uint64_t)v13);
    if ((a3 & 1) != 0 && re::MaterialParameterBlock::isEmpty(v8))
      re::MaterialManager::removeSystemMaterialParameterBlock(a2, v6);
  }
}

void re::ecs2::ImageBasedReflectionReceiverComponent::applyAttachments(uint64_t *a1, re::RenderManager **this, re::TextureHandle *a3, int a4, int a5, int a6, _OWORD *a7, int a8, float a9, float a10, float a11, float a12, int32x2_t a13, int32x2_t a14, __int128 a15)
{
  uint64_t v24;
  uint64_t v25;
  re::MaterialParameterBlock *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int32x4_t v49;
  int32x4_t v51;
  _QWORD v52[4];
  _QWORD v53[4];
  _QWORD v54[4];
  _QWORD v55[4];
  _QWORD v56[4];
  _QWORD v57[4];
  _QWORD v58[4];
  _OWORD v59[4];
  _QWORD v60[4];
  uint64_t v61;
  _OWORD v62[2];

  v24 = re::MaterialManager::getOrAddSystemMaterialParameterBlock(this, *(_QWORD *)(a1[2] + 296));
  v25 = a1[6];
  if (v25)
  {
    v26 = (re::MaterialParameterBlock *)v24;
    v27 = 32 * v25;
    v28 = a1[8];
    v49 = vdupq_lane_s32(a13, 0);
    v51 = vdupq_lane_s32(a14, 0);
    do
    {
      v29 = *(_QWORD *)v28 >> 1;
      if (v29 > 0x6ACE73CDBA36B78DLL)
      {
        if (*(_QWORD *)v28 >> 1 > 0x757106E73545B3A8uLL)
        {
          if (v29 == 0x757106E73545B3A9)
          {
            v46 = *(char **)(v28 + 8);
            if (v46 == "REVideoAttachmentContentPlaneHeightWorldspace"
              || !strcmp(v46, "REVideoAttachmentContentPlaneHeightWorldspace"))
            {
              v47 = *(_QWORD *)(v28 + 16) >> 1;
              *(float *)&v61 = a10;
              *(_QWORD *)&v62[0] = v47;
              re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v57);
              v57[0] = 0;
              goto LABEL_38;
            }
LABEL_37:
            re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(a1[2], (char **)v28, a3, v26, a4, a5);
            goto LABEL_38;
          }
          if (v29 != 0x79D6ECFADD603431)
            goto LABEL_37;
          v36 = *(const char **)(v28 + 8);
          if (v36 != "REVideoAttachmentAverageColor")
          {
            if (strcmp(v36, "REVideoAttachmentAverageColor"))
              goto LABEL_37;
          }
          v37 = *(_QWORD *)(v28 + 16) >> 1;
          v62[0] = a15;
          v61 = v37;
          re::MaterialParameterBlock::setConstant(v26, &v61, 0x10uLL, v62, 33, (uint64_t)v54);
          v54[0] = 0;
        }
        else if (v29 == 0x6ACE73CDBA36B78ELL)
        {
          v42 = *(char **)(v28 + 8);
          if (v42 != "REVideoAttachmentDockingRegionWidth" && strcmp(v42, "REVideoAttachmentDockingRegionWidth"))
            goto LABEL_37;
          v43 = *(_QWORD *)(v28 + 16) >> 1;
          v62[0] = v51;
          v61 = v43;
          re::MaterialParameterBlock::setConstant(v26, &v61, 0x10uLL, v62, 33, (uint64_t)v52);
          v52[0] = 0;
        }
        else
        {
          if (v29 != 0x6F0005E972D1405FLL)
            goto LABEL_37;
          v32 = *(const char **)(v28 + 8);
          if (v32 != "REVideoAttachmentDockingRegionHeight")
          {
            if (strcmp(v32, "REVideoAttachmentDockingRegionHeight"))
              goto LABEL_37;
          }
          v33 = *(_QWORD *)(v28 + 16) >> 1;
          v62[0] = v49;
          v61 = v33;
          re::MaterialParameterBlock::setConstant(v26, &v61, 0x10uLL, v62, 33, (uint64_t)v53);
          v53[0] = 0;
        }
      }
      else if (*(_QWORD *)v28 >> 1 > 0x47340200864FAC3DuLL)
      {
        if (v29 == 0x47340200864FAC3ELL)
        {
          v44 = *(char **)(v28 + 8);
          if (v44 != "REVideoAttachmentTransitionAlpha" && strcmp(v44, "REVideoAttachmentTransitionAlpha"))
            goto LABEL_37;
          v45 = *(_QWORD *)(v28 + 16) >> 1;
          *(float *)&v61 = a12;
          *(_QWORD *)&v62[0] = v45;
          re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v55);
          v55[0] = 0;
        }
        else
        {
          if (v29 != 0x514FAA62239F3AECLL)
            goto LABEL_37;
          v34 = *(const char **)(v28 + 8);
          if (v34 != "REVideoAttachmentContentPlaneWidthWorldspace")
          {
            if (strcmp(v34, "REVideoAttachmentContentPlaneWidthWorldspace"))
              goto LABEL_37;
          }
          v35 = *(_QWORD *)(v28 + 16) >> 1;
          *(float *)&v61 = a9;
          *(_QWORD *)&v62[0] = v35;
          re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v58);
          v58[0] = 0;
        }
      }
      else if (v29 == 0x30E43710AE043515)
      {
        v38 = *(char **)(v28 + 8);
        if (v38 != "REVideoAttachmentWorldToPlaneUVsTransformMatrix"
          && strcmp(v38, "REVideoAttachmentWorldToPlaneUVsTransformMatrix"))
        {
          goto LABEL_37;
        }
        v39 = *(_QWORD *)(v28 + 16) >> 1;
        v40 = a7[1];
        v59[0] = *a7;
        v59[1] = v40;
        v41 = a7[3];
        v59[2] = a7[2];
        v59[3] = v41;
        *(_QWORD *)&v62[0] = v39;
        re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 0x40uLL, v59, 50, (uint64_t)v60);
        v60[0] = 0;
      }
      else
      {
        if (v29 != 0x42D70E5EED7878EBLL)
          goto LABEL_37;
        v30 = *(const char **)(v28 + 8);
        if (v30 != "REVideoAttachmentContentBrightnessScale")
        {
          if (strcmp(v30, "REVideoAttachmentContentBrightnessScale"))
            goto LABEL_37;
        }
        v31 = *(_QWORD *)(v28 + 16) >> 1;
        *(float *)&v61 = a11;
        *(_QWORD *)&v62[0] = v31;
        re::MaterialParameterBlock::setConstant(v26, (uint64_t *)v62, 4uLL, &v61, 1, (uint64_t)v56);
        v56[0] = 0;
      }
LABEL_38:
      v28 += 32;
      v27 -= 32;
    }
    while (v27);
  }
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  _QWORD v11[2];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v11[0] = 0;
  v11[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 32 * *((_QWORD *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VideoMaterialAttachment>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

void re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 32 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 32;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 32 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = &str_110;
        v7[2] = 0;
        v7[3] = &str_110;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ecs2::VideoMaterialAttachment>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 32 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[2];
  v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[3] = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::VideoMaterialAttachment>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear(a2);
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
    {
      v11 = *(char **)(a2 + 32);
      v12 = 32 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VideoMaterialAttachment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::DynamicArray<re::ecs2::VideoMaterialAttachment>::indexOf@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v7 = a2 + 2;
    v8 = 32 * v5;
    v9 = *(_QWORD **)(result + 32);
    while (1)
    {
      result = re::StringID::operator==(v9, a2);
      if ((_DWORD)result)
      {
        result = re::StringID::operator==(v9 + 2, v7);
        if ((result & 1) != 0)
          break;
      }
      v9 += 4;
      v8 -= 32;
      if (!v8)
      {
        v9 = (_QWORD *)(v4 + 32 * v5);
        break;
      }
    }
  }
  else
  {
    v9 = *(_QWORD **)(result + 32);
  }
  v10 = ((uint64_t)v9 - v4) >> 5;
  if (v10 == v5)
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v10;
    v11 = 1;
  }
  *(_BYTE *)a3 = v11;
  return result;
}

void re::DynamicArray<re::ecs2::VideoMaterialAttachment>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  re::StringID *v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v17, 0, sizeof(v17));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v4 + 32 * v2;
    v6 = (_QWORD *)(v4 + 32 * a2);
    v7 = *(_QWORD *)(v5 - 32);
    v8 = *(_QWORD *)(v5 - 24);
    *(_QWORD *)(v5 - 32) = 0;
    *(_QWORD *)(v5 - 24) = &str_110;
    v9 = v6[1];
    v10 = v7 & 0xFFFFFFFFFFFFFFFELL | *v6 & 1;
    v6[1] = v8;
    *(_QWORD *)&v17[0] = v10;
    *((_QWORD *)&v17[0] + 1) = v9;
    *v6 = v7;
    re::StringID::destroyString((re::StringID *)v17);
    v11 = *(_QWORD *)(v5 - 16);
    v12 = *(_QWORD *)(v5 - 8);
    *(_QWORD *)(v5 - 16) = 0;
    *(_QWORD *)(v5 - 8) = &str_110;
    v13 = v6[3];
    v14 = v11 & 0xFFFFFFFFFFFFFFFELL | v6[2] & 1;
    v6[3] = v12;
    *(_QWORD *)&v17[0] = v14;
    *((_QWORD *)&v17[0] + 1) = v13;
    v6[2] = v11;
    re::StringID::destroyString((re::StringID *)v17);
    v2 = *(_QWORD *)(a1 + 16);
  }
  v15 = *(_QWORD *)(a1 + 32) + 32 * v2;
  v16 = (re::StringID *)(v15 - 32);
  re::StringID::destroyString((re::StringID *)(v15 - 16));
  re::StringID::destroyString(v16);
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

float re::UnlitMaterial::commitConstantChanges(re::UnlitMaterial *this, re::RenderManager *a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  __int128 v9;

  v4 = re::UnlitMaterial::addRenderFrameParameterDelta(this, a2);
  if (v4)
  {
    v6 = v4;
    if (a2 && (v7 = (unsigned __int8 *)*((_QWORD *)a2 + 19)) != 0)
      v8 = *v7;
    else
      v8 = 0;
    *(_BYTE *)(v4 + 16) = 1;
    re::ColorGamut4F::as((uint64_t)this + 24, v8, 1, (uint64_t)&v9);
    *(_OWORD *)(v6 + 32) = v9;
    result = *((float *)this + 11);
    *(float *)(v6 + 48) = result;
  }
  return result;
}

uint64_t re::UnlitMaterial::addRenderFrameParameterDelta(re::UnlitMaterial *this, re::RenderManager *a2)
{
  re::DrawingManager *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;

  v3 = (re::DrawingManager *)*((_QWORD *)a2 + 13);
  if (v3
    && (re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(v3, *((_QWORD *)this + 16)) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 17);
    v6 = *(_QWORD *)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 48);
    v8 = v7 & 0xFFFFFFFFFFFFFFFLL;
    v9 = *((_QWORD *)this + 15) & 0xFFFFFFFFFFFFFFFLL;
    if (v9 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v8 == 0xFFFFFFFFFFFFFFFLL)
        return *((_QWORD *)this + 16);
    }
    else if (v8 != 0xFFFFFFFFFFFFFFFLL && v9 == v8)
    {
      return *((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 15) = v7 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v6 << 60);
    re::UnlitMaterial::parameterTable(this, a2, &v13);
    *((_QWORD *)this + 16) = re::DrawingManager::addRenderFrameDeltaForNextFrame<re::UnlitParameterDelta,re::UnlitParameterTable>((uint64_t)v3, &v13);
    if (v13)

    return *((_QWORD *)this + 16);
  }
  *((_QWORD *)this + 16) = 0;
  v10 = *((_QWORD *)this + 13);
  if (!v10)
    return 0;

  result = 0;
  *((_QWORD *)this + 13) = 0;
  return result;
}

void re::UnlitMaterial::parameterTable(re::UnlitMaterial *this@<X0>, const re::RenderManager *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  _BYTE v10[16];
  uint64_t v11[4];

  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    *a3 = v4;
LABEL_10:
    v9 = (id)(v4 + 8);
    return;
  }
  if (a2 && (v6 = (unsigned __int8 *)*((_QWORD *)a2 + 19)) != 0)
    v7 = *v6;
  else
    v7 = 0;
  re::make::shared::object<re::UnlitParameterTable>(this, v11);
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v11[0];
  v11[0] = v8;
  if (v8)

  re::ColorGamut4F::as((uint64_t)this + 24, v7, 1, (uint64_t)v11);
  *(_OWORD *)(*((_QWORD *)this + 13) + 48) = *(_OWORD *)v11;
  *(_DWORD *)(*((_QWORD *)this + 13) + 64) = *((_DWORD *)this + 11);
  re::PbrMaterial::makeTextureHandle((re::UnlitMaterial *)((char *)this + 48), (re::TextureHandle *)v10);
  v11[0] = (uint64_t)&off_24ED5E7E8;
  re::TextureHandle::TextureHandle((re::TextureHandle *)&v11[1], (const re::TextureHandle *)v10);
  re::TextureHandle::operator=((re::TextureHandle *)(*((_QWORD *)this + 13) + 104), (re::TextureHandle *)&v11[1]);
  v11[0] = (uint64_t)&off_24ED5E7E8;
  re::TextureHandle::invalidate((re::TextureHandle *)&v11[1]);
  re::TextureHandle::invalidate((re::TextureHandle *)v10);
  *((_QWORD *)this + 14) = 0xFFFFFFFFFFFFFFFLL;
  v4 = *((_QWORD *)this + 13);
  *a3 = v4;
  if (v4)
    goto LABEL_10;
}

uint64_t re::DrawingManager::addRenderFrameDeltaForNextFrame<re::UnlitParameterDelta,re::UnlitParameterTable>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v4 = re::globalAllocators((re *)a1);
  v5 = re::PerFrameAllocatorManager::perFrameAllocator(v4[6], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 40) << 60));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 80, 16);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)v6 = &unk_24ED466E8;
  objc_initWeak((id *)(v6 + 8), 0);
  *(_QWORD *)v6 = &off_24ED5E7A8;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v6 + 32) = _Q0;
  *(_DWORD *)(v6 + 48) = 1065353216;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v12 = *a2;
  *(_WORD *)(v6 + 16) = 0;
  if (v12)
    v13 = (void *)(v12 + 8);
  else
    v13 = 0;
  objc_storeWeak((id *)(v6 + 8), v13);
  if (!*(_QWORD *)(a1 + 624))
  {
    *(_QWORD *)(a1 + 624) = v5;
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((_QWORD *)(a1 + 624), 0);
    *(_DWORD *)(a1 + 640) += 2;
  }
  v15 = v6;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(a1 + 624, &v15);
  return v6;
}

uint64_t re::UnlitParameterDelta::init(uint64_t result)
{
  *(_WORD *)(result + 16) = 0;
  return result;
}

void re::UnlitParameterDelta::applyDeltaChange(id *this)
{
  char *WeakRetained;
  char *v3;
  __int128 v4;
  _BYTE v5[16];

  WeakRetained = (char *)objc_loadWeakRetained(this + 1);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    if (*((_BYTE *)this + 16))
    {
      *((_DWORD *)WeakRetained + 18) = 3;
      v4 = *((_OWORD *)this + 2);
      *((_DWORD *)WeakRetained + 14) = *((_DWORD *)this + 12);
      *(_OWORD *)(WeakRetained + 40) = v4;
    }
    if (*((_BYTE *)this + 17))
    {
      re::TextureHandle::TextureHandle((re::TextureHandle *)v5, (const re::TextureHandle *)(this + 8));
      re::TextureHandle::operator=((re::TextureHandle *)(v3 + 96), (re::TextureHandle *)v5);
      re::TextureHandle::invalidate((re::TextureHandle *)v5);
    }

  }
}

uint64_t re::UnlitTextureSource::lookup@<X0>(uint64_t this@<X0>, const re::WeakStringID *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_QWORD *)a2 == 0x34EAA28FD9A1AC37 && *(_QWORD *)(this + 16) && *(_QWORD *)(this + 8))
  {
    *(_BYTE *)a3 = 1;
    *(_WORD *)(a3 + 1) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return this;
}

uint64_t re::UnlitTextureSource::layoutHash(re::UnlitTextureSource *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    if (*((_QWORD *)this + 1))
      LODWORD(v1) = 73244475;
    else
      LODWORD(v1) = 0;
  }
  return (73244475 * (v1 ^ WORD1(v1))) ^ ((73244475 * (v1 ^ WORD1(v1))) >> 16);
}

uint64_t re::UnlitTextureSource::size(re::UnlitTextureSource *this)
{
  return 1;
}

void re::UnlitTextureSource::textureAt(re::UnlitTextureSource *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s **v3;
  uint64_t v4;

  if (!a2 && *((_QWORD *)this + 2) && (v4 = *((_QWORD *)this + 1), v3 = (os_unfair_lock_s **)((char *)this + 8), v4))
    re::TextureHandle::metalTexture(v3, a3);
  else
    *a3 = 0;
}

__n128 re::make::shared::object<re::UnlitParameterTable>@<Q0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __n128 result;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 16);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v4 = &off_24ED5E840;
  *(_QWORD *)(v4 + 32) = &off_24ED5E888;
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(v4 + 48) = result;
  *(_DWORD *)(v4 + 64) = 1065353216;
  *(_DWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 96) = &off_24ED5E7E8;
  *a2 = v4;
  return result;
}

void re::UnlitParameterTable::~UnlitParameterTable(re::UnlitParameterTable *this)
{
  *(_QWORD *)this = &off_24ED5E840;
  *((_QWORD *)this + 12) = &off_24ED5E7E8;
  re::TextureHandle::invalidate((re::UnlitParameterTable *)((char *)this + 104));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED5E840;
  *((_QWORD *)this + 12) = &off_24ED5E7E8;
  re::TextureHandle::invalidate((re::UnlitParameterTable *)((char *)this + 104));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void *re::UnlitConstantSource::lookup(re::UnlitConstantSource *this, const re::WeakStringID *a2)
{
  if (*(_QWORD *)a2 != 0x1F383C7C217AE8A0)
  {
    if (*(_QWORD *)a2 == 0x4FA976128CFELL && (*((_BYTE *)this + 48) & 1) != 0)
      return &re::UnlitConstantSource::s_locations;
    return 0;
  }
  if ((*((_BYTE *)this + 48) & 2) == 0)
    return 0;
  return &unk_255803ACC;
}

uint64_t re::UnlitConstantSource::layoutHash(re::UnlitConstantSource *this)
{
  unsigned int v1;

  v1 = 73244475 * (*((_DWORD *)this + 12) ^ HIWORD(*((_DWORD *)this + 12)));
  return (73244475 * (v1 ^ HIWORD(v1))) ^ ((73244475 * (v1 ^ HIWORD(v1))) >> 16);
}

uint64_t re::UnlitConstantSource::data(re::UnlitConstantSource *this)
{
  return (uint64_t)this + 16;
}

uint64_t *re::ecs2::allocInfo_GroundPlaneComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_202);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_202))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410BF30, 0);
    *(uint64_t *)((char *)&qword_25410BF40 + 6) = 0;
    qword_25410BF40 = 0;
    qword_25410BF50 = 0;
    qword_25410BF58 = 0xFFFFFFFFLL;
    qword_25410BF30 = (uint64_t)&off_24ED7DAA8;
    qword_25410BF60 = (uint64_t)"GroundPlaneComponent";
    dword_25410BF68 = 0;
    xmmword_25410BF70 = 0u;
    unk_25410BF80 = 0u;
    xmmword_25410BF90 = 0u;
    qword_25410BFA0 = 0;
    __cxa_guard_release(&_MergedGlobals_202);
  }
  return &qword_25410BF30;
}

void re::ecs2::initInfo_GroundPlaneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x1AAD283225AD710;
  v14[1] = "GroundPlaneComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410BF18);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410BF18);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410BF20 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "isSceneUnderstandingMeshPhysicsFallback";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410BF28 = v12;
      __cxa_guard_release(&qword_25410BF18);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410BF20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::GroundPlaneComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::GroundPlaneComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::GroundPlaneComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::GroundPlaneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::GroundPlaneComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED44198;
}

uint64_t re::internal::defaultDestruct<re::ecs2::GroundPlaneComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::GroundPlaneComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED44198;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::GroundPlaneComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_GroundPlaneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GroundPlaneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_GroundPlaneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_GroundPlaneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::GroundPlaneComponent>, this);
}

void re::introspect_LoadTraceType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410BFB0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410BFB0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Unknown";
      qword_25410BFD0 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Synchronous";
      qword_25410BFD8 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Asynchronous";
      qword_25410BFE0 = v32;
      __cxa_guard_release(&qword_25410BFB0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410BFB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410BFB8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410C008, "LoadTraceType", 1, 1, 1, 1);
    qword_25410C008 = (uint64_t)&off_24ED7D9E8;
    qword_25410C048 = (uint64_t)&re::introspect_LoadTraceType(BOOL)::enumTable;
    dword_25410C018 = 9;
    __cxa_guard_release(&qword_25410BFB8);
  }
  if ((_MergedGlobals_203 & 1) == 0)
  {
    _MergedGlobals_203 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410C008, a2);
    v34 = 0xCE13B02F3DC4EF72;
    v35 = "LoadTraceType";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_25410C048;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_25410C028 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "LoadTraceType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_LoadTraceComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410BFC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410BFC0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C050, 0);
    *(uint64_t *)((char *)&qword_25410C060 + 6) = 0;
    qword_25410C060 = 0;
    qword_25410C070 = 0;
    qword_25410C078 = 0xFFFFFFFFLL;
    qword_25410C050 = (uint64_t)&off_24ED7DAA8;
    qword_25410C080 = (uint64_t)"LoadTraceComponent";
    dword_25410C088 = 0;
    xmmword_25410C090 = 0u;
    unk_25410C0A0 = 0u;
    xmmword_25410C0B0 = 0u;
    qword_25410C0C0 = 0;
    __cxa_guard_release(&qword_25410BFC0);
  }
  return &qword_25410C050;
}

void re::ecs2::initInfo_LoadTraceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xAB5761FC7B9757BCLL;
  v21[1] = "LoadTraceComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_25410BFC8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410BFC8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410BFE8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "loadTraceId";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410BFF0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::introspect_LoadTraceType((re *)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "loadTraceType";
      *(_QWORD *)(v15 + 16) = &qword_25410C008;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25410BFF8 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "loadCacheUsed";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2100000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_25410C000 = v19;
      __cxa_guard_release(&qword_25410BFC8);
    }
  }
  *((_QWORD *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25410BFE8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::LoadTraceComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::LoadTraceComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LoadTraceComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LoadTraceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::LoadTraceComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::LoadTraceComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::LoadTraceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 23);
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 17);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 11);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 5);
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::LoadTraceComponent>(uint64_t *a1)
{
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 23);
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 17);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 11);
  re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 5);
  *a1 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_LoadTraceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LoadTraceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LoadTraceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LoadTraceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LoadTraceComponent>, this);
}

os_log_t ___ZN2re4ecs218LoadTraceComponent3logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.re", "LoadTraceComponent");
  re::ecs2::LoadTraceComponent::log(void)::log = (uint64_t)result;
  return result;
}

uint64_t re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(re::ecs2::LoadTraceComponent *this)
{
  uint64_t result;

  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    return kdebug_trace();
  return result;
}

void re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_24, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + v5 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::ecs2::LoadTraceComponent::updateTrackedAssets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  _BYTE v61[24];
  _BYTE v62[31];
  char v63;
  _BYTE v64[8];
  unint64_t v65;

  v7 = a1 + 184;
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(a1 + 184);
  v8 = *(unsigned int *)(a1 + 168);
  v59 = v7;
  v9 = 0;
  if ((_DWORD)v8)
  {
    v10 = (int *)(*(_QWORD *)(a1 + 152) + 8);
    while (1)
    {
      v11 = *v10;
      v10 += 10;
      if (v11 < 0)
        break;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 168);
        break;
      }
    }
  }
  if ((_DWORD)v8 != (_DWORD)v9)
  {
    v12 = v9;
    while (1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v64, (const re::AssetHandle *)(*(_QWORD *)(a1 + 152) + 40 * v12 + 16));
      v13 = *(_QWORD *)(a1 + 40);
      if (v13)
      {
        v14 = v65 ? *(_QWORD *)(v65 + 664) : 0;
        v15 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) >> 27));
        v16 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * ((v14 ^ (v15 >> 31) ^ v15) % *(unsigned int *)(a1 + 64)));
        if ((_DWORD)v16 != 0x7FFFFFFF)
        {
          v17 = *(_QWORD *)(a1 + 56);
          while (*(_QWORD *)(v17 + 48 * v16 + 24) != v65)
          {
            v16 = *(_DWORD *)(v17 + 48 * v16 + 8) & 0x7FFFFFFF;
            if (v16 == 0x7FFFFFFF)
              goto LABEL_16;
          }
          goto LABEL_37;
        }
      }
LABEL_16:
      v18 = v65 ? *(_QWORD *)(v65 + 264) : 0;
      if (*(_QWORD *)a4)
      {
        v19 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) >> 27));
        v20 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * ((v19 ^ (v19 >> 31)) % *(unsigned int *)(a4 + 24)));
        if ((_DWORD)v20 != 0x7FFFFFFF)
          break;
      }
LABEL_37:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
      if (*(_DWORD *)(a1 + 168) <= (v9 + 1))
        v28 = v9 + 1;
      else
        v28 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v12 = (v9 + 1);
        if (v28 - 1 == (_DWORD)v9)
          break;
        LODWORD(v9) = v9 + 1;
        v29 = v12;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 152) + 40 * v12 + 8) & 0x80000000) != 0)
          goto LABEL_44;
      }
      v29 = v28;
LABEL_44:
      LODWORD(v9) = v29;
      if ((_DWORD)v8 == v29)
        goto LABEL_45;
    }
    v21 = *(_QWORD *)(a4 + 16);
    while (*(_QWORD *)(v21 + 32 * v20 + 16) != v18)
    {
      v20 = *(_DWORD *)(v21 + 32 * v20 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v20 == 0x7FFFFFFF)
        goto LABEL_37;
    }
    v63 = 0;
    if (v65)
      v22 = *(_QWORD *)(v65 + 664);
    else
      v22 = 0;
    v23 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) >> 27));
    v24 = v22 ^ (v23 >> 31) ^ v23;
    if (v13)
    {
      v25 = v24 % *(unsigned int *)(a1 + 64);
      v26 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v25);
      if ((_DWORD)v26 != 0x7FFFFFFF)
      {
        v27 = *(_QWORD *)(a1 + 56);
        while (*(_QWORD *)(v27 + 48 * v26 + 24) != v65)
        {
          v26 = *(_DWORD *)(v27 + 48 * v26 + 8) & 0x7FFFFFFF;
          if (v26 == 0x7FFFFFFF)
            goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else
    {
      LODWORD(v25) = 0;
    }
LABEL_35:
    re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1 + 40, v25, v24, (const re::AssetHandle *)v64, &v63);
    ++*(_DWORD *)(a1 + 80);
LABEL_36:
    re::AssetHandle::AssetHandle((re::AssetHandle *)v62, (const re::AssetHandle *)v64);
    re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a2, (re::AssetHandle *)v62, a4);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v62);
    goto LABEL_37;
  }
LABEL_45:
  v30 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = (int *)(*(_QWORD *)(a1 + 56) + 8);
    v33 = v59;
    while (1)
    {
      v34 = *v32;
      v32 += 12;
      if (v34 < 0)
        break;
      if (v30 == ++v31)
      {
        LODWORD(v31) = *(_DWORD *)(a1 + 72);
        break;
      }
    }
  }
  else
  {
    LODWORD(v31) = 0;
    v33 = v59;
  }
  if ((_DWORD)v30 != (_DWORD)v31)
  {
    v35 = v31;
    do
    {
      if (!re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1 + 136, *(_QWORD *)(a1 + 56) + 48 * v35 + 16))re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(v33, (re::AssetHandle *)(*(_QWORD *)(a1 + 56) + 48 * v35 + 16));
      v36 = *(_DWORD *)(a1 + 72);
      if (v36 <= (int)v31 + 1)
        v37 = v31 + 1;
      else
        v37 = *(_DWORD *)(a1 + 72);
      while (1)
      {
        v35 = (v31 + 1);
        if (v37 - 1 == (_DWORD)v31)
          break;
        LODWORD(v31) = v31 + 1;
        v38 = v35;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 56) + 48 * v35 + 8) & 0x80000000) != 0)
          goto LABEL_62;
      }
      v38 = v37;
LABEL_62:
      LODWORD(v31) = v38;
    }
    while (v36 != v38);
  }
  v39 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = (int *)(*(_QWORD *)(a1 + 200) + 8);
    while (1)
    {
      v42 = *v41;
      v41 += 10;
      if (v42 < 0)
        break;
      if (v39 == ++v40)
      {
        LODWORD(v40) = *(_DWORD *)(a1 + 216);
        break;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if ((_DWORD)v39 != (_DWORD)v40)
  {
    v43 = v40;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v64, (const re::AssetHandle *)(*(_QWORD *)(a1 + 200) + 40 * v43 + 16));
      if (*(_QWORD *)(a1 + 40))
      {
        v44 = v65 ? *(_QWORD *)(v65 + 664) : 0;
        v45 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v65 ^ (v65 >> 30))) >> 27));
        v46 = (v44 ^ (v45 >> 31) ^ v45) % *(unsigned int *)(a1 + 64);
        v47 = *(_QWORD *)(a1 + 48);
        v48 = *(unsigned int *)(v47 + 4 * v46);
        if ((_DWORD)v48 != 0x7FFFFFFF)
        {
          v49 = *(_QWORD *)(a1 + 56);
          if (*(_QWORD *)(v49 + 48 * v48 + 24) == v65)
          {
            *(_DWORD *)(v47 + 4 * v46) = *(_DWORD *)(v49 + 48 * v48 + 8) & 0x7FFFFFFF;
LABEL_81:
            v51 = *(_QWORD *)(a1 + 56);
            v52 = v51 + 48 * v48;
            v55 = *(_DWORD *)(v52 + 8);
            v54 = (int *)(v52 + 8);
            v53 = v55;
            if (v55 < 0)
            {
              *v54 = v53 & 0x7FFFFFFF;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)(v51 + 48 * v48 + 16));
              v51 = *(_QWORD *)(a1 + 56);
              v53 = *(_DWORD *)(v51 + 48 * v48 + 8);
            }
            *(_DWORD *)(v51 + 48 * v48 + 8) = *(_DWORD *)(a1 + 76) | v53 & 0x80000000;
            --*(_DWORD *)(a1 + 68);
            v56 = *(_DWORD *)(a1 + 80) + 1;
            *(_DWORD *)(a1 + 76) = v48;
            *(_DWORD *)(a1 + 80) = v56;
          }
          else
          {
            while (1)
            {
              v50 = v48;
              v48 = *(_DWORD *)(v49 + 48 * v48 + 8) & 0x7FFFFFFF;
              if (v48 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v49 + 48 * v48 + 24) == v65)
              {
                *(_DWORD *)(v49 + 48 * v50 + 8) = *(_DWORD *)(v49 + 48 * v50 + 8) & 0x80000000 | *(_DWORD *)(v49 + 48 * v48 + 8) & 0x7FFFFFFF;
                goto LABEL_81;
              }
            }
          }
        }
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v61, (const re::AssetHandle *)v64);
      re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a3, (re::AssetHandle *)v61, a4);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v61);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
      if (*(_DWORD *)(a1 + 216) <= (v40 + 1))
        v57 = v40 + 1;
      else
        v57 = *(_DWORD *)(a1 + 216);
      while (1)
      {
        v43 = (v40 + 1);
        if (v57 - 1 == (_DWORD)v40)
          break;
        LODWORD(v40) = v40 + 1;
        v58 = v43;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 200) + 40 * v43 + 8) & 0x80000000) != 0)
          goto LABEL_91;
      }
      v58 = v57;
LABEL_91:
      LODWORD(v40) = v58;
    }
    while ((_DWORD)v39 != v58);
  }
}

uint64_t re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(uint64_t a1, uint64_t a2, re::AssetHandle *a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *((_QWORD *)a3 + 1);
  if (v5)
    v5 = *(_QWORD *)(v5 + 264);
  if (*(_QWORD *)a4)
  {
    v6 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
    v7 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * ((v6 ^ (v6 >> 31)) % *(unsigned int *)(a4 + 24)));
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(a4 + 16);
      if (*(_QWORD *)(v8 + 32 * v7 + 16) != v5)
      {
        do
          v7 = *(_DWORD *)(v8 + 32 * v7 + 8) & 0x7FFFFFFF;
        while ((_DWORD)v7 != 0x7FFFFFFF && *(_QWORD *)(v8 + 32 * v7 + 16) != v5);
      }
    }
  }
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
  {
    re::AssetHandle::assetInfo(a3);
    return kdebug_trace();
  }
  return result;
}

BOOL re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (v3)
      v4 = *(_QWORD *)(v3 + 664);
    else
      v4 = 0;
    v6 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
    v7 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v4 ^ (v6 >> 31) ^ v6) % v2));
    v5 = 0x7FFFFFFFLL;
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v5 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v8 + 40 * v7 + 24) != v3)
      {
        v7 = *(_DWORD *)(v8 + 40 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF)
          return v5 != 0x7FFFFFFF;
      }
      v5 = v7;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFLL;
  }
  return v5 != 0x7FFFFFFF;
}

void re::ecs2::LoadTraceComponent::checkAssetLoadStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v26;
  char v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BYTE v47[24];
  _BYTE v48[31];
  char v49;
  _BYTE v50[24];
  _BYTE v51[8];
  uint64_t v52;

  if (*(_DWORD *)(a1 + 116))
  {
    v10 = *(unsigned int *)(a1 + 112);
    if ((_DWORD)v10)
      memset_pattern16(*(void **)(a1 + 96), &memset_pattern_24, 4 * v10);
    v11 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 8;
      do
      {
        v14 = *(_QWORD *)(a1 + 104);
        v15 = *(_DWORD *)(v14 + v13);
        if (v15 < 0)
        {
          *(_DWORD *)(v14 + v13) = v15 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v14 + v13 + 8));
          v11 = *(unsigned int *)(a1 + 120);
        }
        ++v12;
        v13 += 48;
      }
      while (v12 < v11);
    }
    *(_DWORD *)(a1 + 116) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    v16 = *(_DWORD *)(a1 + 128) + 1;
    *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 128) = v16;
  }
  v17 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = (int *)(*(_QWORD *)(a1 + 56) + 8);
    while (1)
    {
      v20 = *v19;
      v19 += 12;
      if (v20 < 0)
        break;
      if (v17 == ++v18)
      {
        LODWORD(v18) = *(_DWORD *)(a1 + 72);
        break;
      }
    }
  }
  else
  {
    LODWORD(v18) = 0;
  }
  if ((_DWORD)v17 != (_DWORD)v18)
  {
    v21 = v18;
    do
    {
      v22 = 3 * v21;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v51, (const re::AssetHandle *)(*(_QWORD *)(a1 + 56) + 48 * v21 + 16));
      if (v52)
      {
        v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 16 * v22 + 40);
        v24 = atomic_load((unsigned int *)(v52 + 704));
        if (v24 == 2)
        {
          if (v23 != 1)
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v50, (const re::AssetHandle *)v51);
            re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a2, (re::AssetHandle *)v50, a5);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v50);
            v49 = 1;
            goto LABEL_31;
          }
        }
        else if (atomic_load((unsigned int *)(v52 + 704)))
        {
          v26 = atomic_load((unsigned int *)(v52 + 704));
          if (v26 == 3 && v23 != 3)
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v47, (const re::AssetHandle *)v51);
            re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a4, (re::AssetHandle *)v47, a5);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v47);
            v28 = 3;
            goto LABEL_30;
          }
        }
        else if (v23 != 2)
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v48, (const re::AssetHandle *)v51);
          re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(a1, a3, (re::AssetHandle *)v48, a5);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v48);
          v28 = 2;
LABEL_30:
          v49 = v28;
LABEL_31:
          re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addOrReplace(a1 + 88, (const re::AssetHandle *)v51, &v49);
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v51);
      v29 = *(_DWORD *)(a1 + 72);
      if (v29 <= (int)v18 + 1)
        v30 = v18 + 1;
      else
        v30 = *(_DWORD *)(a1 + 72);
      while (1)
      {
        v21 = (v18 + 1);
        if (v30 - 1 == (_DWORD)v18)
          break;
        LODWORD(v18) = v18 + 1;
        v31 = v21;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 56) + 48 * v21 + 8) & 0x80000000) != 0)
          goto LABEL_39;
      }
      v31 = v30;
LABEL_39:
      LODWORD(v18) = v31;
    }
    while (v29 != v31);
  }
  v32 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v32)
  {
    v33 = 0;
    v34 = (int *)(*(_QWORD *)(a1 + 104) + 8);
    while (1)
    {
      v35 = *v34;
      v34 += 12;
      if (v35 < 0)
        break;
      if (v32 == ++v33)
      {
        LODWORD(v33) = *(_DWORD *)(a1 + 120);
        break;
      }
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if ((_DWORD)v32 != (_DWORD)v33)
  {
    v36 = v33;
    v37 = *(_QWORD *)(a1 + 40);
    do
    {
      v38 = *(_QWORD *)(a1 + 104);
      if (v37)
      {
        v39 = *(_QWORD *)(v38 + 48 * v36 + 24);
        if (v39)
          v40 = *(_QWORD *)(v39 + 664);
        else
          v40 = 0;
        v42 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) >> 27));
        v43 = (v40 ^ (v42 >> 31) ^ v42) % *(unsigned int *)(a1 + 64);
        v41 = *(_QWORD *)(a1 + 56);
        v44 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v43);
        if ((_DWORD)v44 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v41 + 48 * v44 + 24) != v39)
          {
            v44 = *(_DWORD *)(v41 + 48 * v44 + 8) & 0x7FFFFFFF;
            if (v44 == 0x7FFFFFFF)
              goto LABEL_56;
          }
          goto LABEL_57;
        }
      }
      else
      {
        v41 = *(_QWORD *)(a1 + 56);
      }
LABEL_56:
      v44 = 0x7FFFFFFFLL;
LABEL_57:
      *(_BYTE *)(v41 + 48 * v44 + 40) = *(_BYTE *)(v38 + 48 * v36 + 40);
      if (v32 <= (int)v33 + 1)
        v45 = v33 + 1;
      else
        v45 = v32;
      while (1)
      {
        v36 = (v33 + 1);
        if (v45 - 1 == (_DWORD)v33)
          break;
        LODWORD(v33) = v33 + 1;
        v46 = v36;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 104) + 48 * v36 + 8) & 0x80000000) != 0)
          goto LABEL_64;
      }
      v46 = v45;
LABEL_64:
      LODWORD(v33) = v46;
    }
    while ((_DWORD)v32 != v46);
  }
}

uint64_t re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addOrReplace(uint64_t result, const re::AssetHandle *a2, _BYTE *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    v7 = *(_QWORD *)(v6 + 664);
  else
    v7 = 0;
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v9 = v7 ^ (v8 >> 31) ^ v8;
  if (!*(_QWORD *)result)
  {
    LODWORD(v10) = 0;
    goto LABEL_11;
  }
  v10 = v9 % *(unsigned int *)(result + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_11:
    result = re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(result, v10, v9, a2, a3);
    goto LABEL_12;
  }
  v12 = *(_QWORD *)(result + 16);
  while (*(_QWORD *)(v12 + 48 * v11 + 24) != v6)
  {
    v11 = *(_DWORD *)(v12 + 48 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_11;
  }
  *(_BYTE *)(v12 + 48 * v11 + 40) = *a3;
LABEL_12:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::LoadTraceComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57188;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_DWORD *)(v1 + 72) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_DWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_DWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_DWORD *)(v1 + 216) = 0;
  *(_QWORD *)(v1 + 220) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::AssetHandle *a4, _BYTE *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  _BYTE v28[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init((uint64_t)v28, v14, v13);
          v16 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v28[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = v18 + 40;
            do
            {
              if ((*(_DWORD *)(v23 - 32) & 0x80000000) != 0)
                re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1, *(_QWORD *)(v23 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v23 - 40), v23 - 24, v23);
              ++v22;
              v23 += 48;
            }
            while (v22 < v21);
          }
          re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13)
          v26 = 2 * v12;
        else
          v26 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 48 * v10 + 8);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 48 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 48 * v10 + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v10) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 16), a4);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 48 * v10 + 40) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::AssetHandle,re::ecs2::LoadTraceAssetLoadState,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_24, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::ecs2::allocInfo_ClientWorldOriginRefComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_204);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_204))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C0E0, 0);
    *(uint64_t *)((char *)&qword_25410C0F0 + 6) = 0;
    qword_25410C0F0 = 0;
    qword_25410C100 = 0;
    qword_25410C108 = 0xFFFFFFFFLL;
    qword_25410C0E0 = (uint64_t)&off_24ED7DAA8;
    qword_25410C110 = (uint64_t)"ClientWorldOriginRefComponent";
    dword_25410C118 = 0;
    unk_25410C120 = 0u;
    unk_25410C130 = 0u;
    unk_25410C140 = 0u;
    qword_25410C150 = 0;
    __cxa_guard_release(&_MergedGlobals_204);
  }
  return &qword_25410C0E0;
}

void re::ecs2::initInfo_ClientWorldOriginRefComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xE6691EEFCF88156ELL;
  v10[1] = "ClientWorldOriginRefComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C0D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C0D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C0D0 = v8;
      __cxa_guard_release(&qword_25410C0D8);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410C0D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClientWorldOriginRefComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ClientWorldOriginRefComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClientWorldOriginRefComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClientWorldOriginRefComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ClientWorldOriginRefComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57208;
  *(_QWORD *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57208;
  *(_QWORD *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::ClientWorldOriginRefComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClientWorldOriginRefComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClientWorldOriginRefComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClientWorldOriginRefComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClientWorldOriginRefComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClientWorldOriginRefComponent>, this);
}

uint64_t *re::ecs2::allocInfo_WorldRootToken(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C168);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C168))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C198, 0);
    *(uint64_t *)((char *)&qword_25410C1A8 + 6) = 0;
    qword_25410C1A8 = 0;
    qword_25410C1B8 = 0;
    qword_25410C1C0 = 0xFFFFFFFFLL;
    qword_25410C198 = (uint64_t)&off_24ED7DAA8;
    qword_25410C1C8 = (uint64_t)"WorldRootToken";
    dword_25410C1D0 = 0;
    xmmword_25410C1D8 = 0u;
    unk_25410C1E8 = 0u;
    xmmword_25410C1F8 = 0u;
    qword_25410C208 = 0;
    __cxa_guard_release(&qword_25410C168);
  }
  return &qword_25410C198;
}

void re::ecs2::initInfo_WorldRootToken(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0x1F8500F0353C75CALL;
  v11[1] = "WorldRootToken";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C160);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C160);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint64_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_worldRootId";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      _MergedGlobals_205 = v9;
      __cxa_guard_release(&qword_25410C160);
    }
  }
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &_MergedGlobals_205;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::WorldRootToken>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::WorldRootToken>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WorldRootToken>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WorldRootToken>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void re::internal::defaultConstruct<re::ecs2::WorldRootToken>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::WorldRootToken>(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t re::ecs2::introspect_WorldRootToken(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WorldRootToken", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WorldRootToken, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WorldRootToken, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WorldRootToken>, this);
}

uint64_t *re::ecs2::allocInfo_WorldRootComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C170);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C170))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C210, 0);
    *(uint64_t *)((char *)&qword_25410C220 + 6) = 0;
    qword_25410C220 = 0;
    qword_25410C230 = 0;
    qword_25410C238 = 0xFFFFFFFFLL;
    qword_25410C210 = (uint64_t)&off_24ED7DAA8;
    qword_25410C240 = (uint64_t)"WorldRootComponent";
    dword_25410C248 = 0;
    xmmword_25410C250 = 0u;
    unk_25410C260 = 0u;
    xmmword_25410C270 = 0u;
    qword_25410C280 = 0;
    __cxa_guard_release(&qword_25410C170);
  }
  return &qword_25410C210;
}

void re::ecs2::initInfo_WorldRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xE23DDCC2FBA88FD2;
  v19[1] = "WorldRootComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C178);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C178);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C180 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)re::internal::introspectionInfoStorage<re::ecs2::WorldRootToken>;
      if (!re::internal::introspectionInfoStorage<re::ecs2::WorldRootToken>)
      {
        v11 = re::ecs2::allocInfo_WorldRootToken((re::ecs2 *)v9);
        re::internal::introspectionInfoStorage<re::ecs2::WorldRootToken> = (uint64_t)v11;
        re::ecs2::initInfo_WorldRootToken((re::ecs2 *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "worldRootToken";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410C188 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "applyToSelf";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25410C190 = v17;
      __cxa_guard_release(&qword_25410C178);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410C180;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::WorldRootComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::WorldRootComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WorldRootComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WorldRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void re::internal::defaultConstruct<re::ecs2::WorldRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57288;
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  *(_QWORD *)(v3 + 48) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::WorldRootComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::WorldRootComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57288;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::WorldRootComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_WorldRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WorldRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WorldRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WorldRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WorldRootComponent>, this);
}

uint64_t *re::allocInfo_ProjectiveShadowParams(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_206);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_206))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C2F0, 0);
    *(uint64_t *)((char *)&qword_25410C300 + 6) = 0;
    qword_25410C300 = 0;
    qword_25410C310 = 0;
    qword_25410C318 = 0xFFFFFFFFLL;
    qword_25410C2F0 = (uint64_t)&off_24ED7DAA8;
    qword_25410C320 = (uint64_t)"ProjectiveShadowParams";
    dword_25410C328 = 0;
    unk_25410C330 = 0u;
    unk_25410C340 = 0u;
    unk_25410C350 = 0u;
    qword_25410C360 = 0;
    __cxa_guard_release(&_MergedGlobals_206);
  }
  return &qword_25410C2F0;
}

void re::initInfo_ProjectiveShadowParams(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xCCA3463BD356374ALL;
  v19[1] = "ProjectiveShadowParams";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C290);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C290);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "intensity";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25410C2B8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "objectSpaceDecayRate";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410C2C0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "groundDecayRate";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25410C2C8 = v17;
      __cxa_guard_release(&qword_25410C290);
    }
  }
  *((_QWORD *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410C2B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ProjectiveShadowParams>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ProjectiveShadowParams>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ProjectiveShadowParams>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ProjectiveShadowParams>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

double re::internal::defaultConstruct<re::ProjectiveShadowParams>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  result = 2.00000047;
  *(_QWORD *)a3 = 0x400000003FA00000;
  *(_DWORD *)(a3 + 8) = 1094713344;
  return result;
}

double re::internal::defaultConstructV2<re::ProjectiveShadowParams>(uint64_t a1)
{
  double result;

  result = 2.00000047;
  *(_QWORD *)a1 = 0x400000003FA00000;
  *(_DWORD *)(a1 + 8) = 1094713344;
  return result;
}

uint64_t *re::ecs2::allocInfo_ProjectiveShadowReceiverComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C2A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C2A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C368, 0);
    *(uint64_t *)((char *)&qword_25410C378 + 6) = 0;
    qword_25410C378 = 0;
    qword_25410C388 = 0;
    qword_25410C390 = 0xFFFFFFFFLL;
    qword_25410C368 = (uint64_t)&off_24ED7DAA8;
    qword_25410C398 = (uint64_t)"ProjectiveShadowReceiverComponent";
    dword_25410C3A0 = 0;
    xmmword_25410C3A8 = 0u;
    unk_25410C3B8 = 0u;
    xmmword_25410C3C8 = 0u;
    qword_25410C3D8 = 0;
    __cxa_guard_release(&qword_25410C2A0);
  }
  return &qword_25410C368;
}

void re::ecs2::initInfo_ProjectiveShadowReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0xE32F79A252B689ELL;
  v23[1] = "ProjectiveShadowReceiverComponent";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C2A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C2A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C2D0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)qword_25410C298;
      if (!qword_25410C298)
      {
        v11 = re::allocInfo_ProjectiveShadowParams((re *)v9);
        qword_25410C298 = (uint64_t)v11;
        re::initInfo_ProjectiveShadowParams((re *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "params";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1C00000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410C2D8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "isVisible";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25410C2E0 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAutomaticallyAdded";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x2900000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25410C2E8 = v21;
      __cxa_guard_release(&qword_25410C2A8);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25410C2D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ProjectiveShadowReceiverComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

int32x4_t re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  int32x4_t result;
  __int128 v5;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57308;
  *(_QWORD *)(v3 + 28) = 0x400000003FA00000;
  *(_DWORD *)(v3 + 36) = 1094713344;
  *(_WORD *)(v3 + 40) = 1;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 48) = result;
  *(_OWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::ProjectiveShadowReceiverComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  int32x4_t result;
  __int128 v3;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57308;
  *(_QWORD *)(v1 + 28) = 0x400000003FA00000;
  *(_DWORD *)(v1 + 36) = 1094713344;
  *(_WORD *)(v1 + 40) = 1;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 48) = result;
  *(_OWORD *)(v1 + 64) = v3;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverComponent>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProjectiveShadowReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ProjectiveShadowReceiverSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C2B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C2B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C3E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410C3F0 = 0;
    qword_25410C400 = 0;
    qword_25410C408 = 0xFFFFFFFFLL;
    qword_25410C3E0 = (uint64_t)&off_24ED7DAA8;
    qword_25410C410 = (uint64_t)"ProjectiveShadowReceiverSystem";
    dword_25410C418 = 0;
    xmmword_25410C420 = 0u;
    unk_25410C430 = 0u;
    xmmword_25410C440 = 0u;
    qword_25410C450 = 0;
    __cxa_guard_release(&qword_25410C2B0);
  }
  return &qword_25410C3E0;
}

void re::ecs2::initInfo_ProjectiveShadowReceiverSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE33F64CC7DE6D83ALL;
  v5[1] = "ProjectiveShadowReceiverSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x2F000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ProjectiveShadowReceiverSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ProjectiveShadowReceiverSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::ProjectiveShadowReceiverSystem *re::internal::defaultConstruct<re::ecs2::ProjectiveShadowReceiverSystem>(int a1, int a2, re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  return re::ecs2::ProjectiveShadowReceiverSystem::ProjectiveShadowReceiverSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::ProjectiveShadowReceiverSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = a3[87];
  if (v4)
  {
    if (a3[88])
    {
      v5 = a3 + 88;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[89]);
      *v5 = 0;
      a3[89] = 0;
    }
    a3[87] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 54));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 51));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ProjectiveShadowReceiverSystem>(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[87];
  if (v2)
  {
    if (a1[88])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[89]);
      a1[88] = 0;
      a1[89] = 0;
    }
    a1[87] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 54));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 51));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProjectiveShadowReceiverSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverSystem>, this);
}

uint64_t sendAllReceiversToInactive(uint64_t a1)
{
  uint64_t i;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  for (i = 0; i != 3; ++i)
  {
    v3 = *(_QWORD *)(a1 + 8 * byte_22611CD5D[i] + 24);
    v4 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(a1 + 16) + 8, v3);
    result = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v13, v4, 0);
    v11 = v13;
    v12 = v14;
    if (v4 != v13 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 4294901760)
    {
      do
      {
        v8 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v11);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), v3, v8, *(_QWORD *)(a1 + 32));
        result = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      }
      while (v11 != v4 || (unsigned __int16)v12 != 0xFFFF || WORD1(v12) != 0xFFFF);
    }
  }
  return result;
}

uint64_t re::ecs2::ProjectiveShadowReceiverStateImpl::ProjectiveShadowReceiverStateImpl(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];
  _QWORD v5[7];

  v5[6] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24ED5E908;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 68) = xmmword_22610CC60;
  *(_QWORD *)(a1 + 84) = 0x3CF5C28F3F800000;
  *(_WORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_22610CC70;
  *(_QWORD *)(a1 + 112) = 0x3EB333333F800000;
  *(_BYTE *)(a1 + 120) = 1;
  *(_OWORD *)(a1 + 124) = xmmword_22610CC80;
  *(_OWORD *)(a1 + 140) = xmmword_22610CC90;
  *(_QWORD *)(a1 + 156) = 0x3DCCCCCD41F00000;
  *(_DWORD *)(a1 + 164) = 1100480512;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = xmmword_2260E5F50;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 208) = 0x3F8000003F2D42C4;
  *(_DWORD *)(a1 + 216) = 10;
  *(_OWORD *)(a1 + 220) = xmmword_22610CCA0;
  *(_QWORD *)(a1 + 236) = 1056964608;
  *(_DWORD *)(a1 + 244) = 0x40000000;
  *(_WORD *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 252) = 1;
  *(_BYTE *)(a1 + 254) = 0;
  *(_QWORD *)(a1 + 256) = 897988541;
  *(_QWORD *)(a1 + 264) = 0x3E80000000000000;
  *(_QWORD *)(a1 + 272) = 0x103DCCCCCDLL;
  *(_DWORD *)(a1 + 288) = -1;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 292) = 0;
  *(_DWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 320) = a2;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[4] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[5] = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 6;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 296), (uint64_t)v4);
  return a1;
}

void re::ecs2::ProjectiveShadowReceiverStateImpl::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::Component **v14;
  re::ecs2::Component **v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  re::ecs2::Component *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  re::ecs2::System *v36;
  uint64_t v37;

  if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4)
  {
    v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a2 + 8) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        v14 = *(re::ecs2::Component ***)(v12 + 40);
        v15 = &v14[v13];
        do
        {
          v16 = *v14;
          for (i = 24; i != 56; i += 8)
          {
            v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + i), v16);
            if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
            {
              v21 = v18;
              v22 = v19;
              goto LABEL_26;
            }
          }
          v21 = -1;
          v22 = 0xFFFFFFFFLL;
LABEL_26:
          re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v21, v22);
          ++v14;
        }
        while (v14 != v15);
      }
    }
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4
         || re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4
         || re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    v7 = *(_QWORD *)a2;
    v37 = *(_QWORD *)(a2 + 8);
    v8 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 56), &v37);
    if (v8 == -1)
      return;
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 168, *(_QWORD *)(*(_QWORD *)(v7 + 64) + 16 * v8 + 8));
    if (!*(_BYTE *)(v7 + 232))
      return;
    v9 = *(_QWORD *)(v7 + 176);
    v10 = *(_DWORD *)(v7 + 184);
    if (v9 < 0xB)
    {
      if ((v10 & 1) != 0)
        v31 = (uint64_t *)(v7 + 192);
      else
        v31 = *(uint64_t **)(v7 + 200);
      if (!v9)
        return;
      v33 = 0;
      v34 = 8 * v9;
      do
      {
        v35 = *v31++;
        v33 |= v35;
        v34 -= 8;
      }
      while (v34);
      if (!v33)
        return;
    }
    else
    {
      if ((v10 & 1) != 0)
        v11 = (_QWORD *)(v7 + 192);
      else
        v11 = *(_QWORD **)(v7 + 200);
      v32 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v32 -= 8;
        if (!v32)
          return;
      }
    }
    v36 = *(re::ecs2::System **)(v7 + 216);
    if (!*((_BYTE *)v36 + 86))
      re::ecs2::System::queueToRun(v36, 0.0);
  }
  else
  {
    v23 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v23)
    {
      v24 = (re::ecs2::Component *)v23;
      v25 = 24;
      v26 = 0xFFFFFFFFLL;
      do
      {
        v27 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v25), v24);
        if (v27 != -1 && (v28 & 0xFFFFFF00000000) != 0)
        {
          v30 = v27;
          v26 = v28;
          goto LABEL_37;
        }
        v25 += 8;
      }
      while (v25 != 56);
      v30 = -1;
LABEL_37:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v30, v26);
    }
  }
}

BOOL re::ecs2::ProjectiveShadowReceiverStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int32x4_t v24;
  uint64_t v25[3];
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v26, a5, 0);
  v8 = v26;
  v9 = v27;
  v26 = a4;
  v27 = v8;
  v28 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    v24 = vdupq_n_s32(0x7F800000u);
    while (1)
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v27);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 176);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 40);
      if (v17 != *(_QWORD *)(v15 + 88))
      {
        *(_QWORD *)&v18 = 0x7F0000007FLL;
        *((_QWORD *)&v18 + 1) = 0x7F0000007FLL;
        *(int32x4_t *)(v15 + 48) = v24;
        *(_OWORD *)(v15 + 64) = v18;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v25, (const re::AssetHandle *)(v16 + 32));
LABEL_13:
        re::AssetHandle::operator=((uint64_t *)(v15 + 80), v25);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v25);
        v17 = *(_QWORD *)(v15 + 88);
      }
      v20 = v26;
      v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
      if (v17)
        v22 = 40;
      else
        v22 = 32;
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(_QWORD *)(a3 + v22));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
      if (v27 == a5 && (unsigned __int16)v28 == 0xFFFF && WORD1(v28) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    *(_QWORD *)&v19 = 0x7F0000007FLL;
    *((_QWORD *)&v19 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v15 + 48) = v24;
    *(_OWORD *)(v15 + 64) = v19;
    memset(v25, 0, sizeof(v25));
    goto LABEL_13;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::ProjectiveShadowReceiverStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  float32x4_t **v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint32x4_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float32x4_t v24[2];
  unint64_t v25;
  float32x4_t v26;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v24, a5, 0);
  v25 = a4;
  v26 = v24[0];
  if (v24[0].i64[0] != a5 || v24[0].u16[4] != 0xFFFFLL || (v24[0].i32[2] & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v10 = (float32x4_t **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
      v11 = *v10;
      v12 = (uint64_t)&(*v10)[3];
      v13 = *(float32x4_t *)v12;
      v14 = (*v10)[4];
      v15 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v12, v14);
      v15.i32[3] = v15.i32[2];
      if ((vmaxvq_u32(v15) & 0x80000000) != 0)
      {
        re::ecs2::ShadowHelper::expandSkinnedMeshBoundingBox(*v10 + 3, *(_QWORD *)(v11[1].i64[0] + 176), v24);
        v16 = v24[1];
        *(float32x4_t *)v12 = v24[0];
        *(float32x4_t *)(v12 + 16) = v16;
        v13 = v11[3];
        v14 = v11[4];
      }
      v17 = (uint32x4_t)vcgtq_f32(v13, v14);
      v17.i32[3] = v17.i32[2];
      v18 = (unint64_t *)(a3 + 48);
      if ((vmaxvq_u32(v17) & 0x80000000) == 0
        || (v21 = v11[5].i64[1]) != 0
        && (v22 = atomic_load((unsigned int *)(v21 + 704)), v18 = (unint64_t *)(a3 + 32), v22 == 3))
      {
        v19 = v25;
        v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v26);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *v18);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
    }
    while (v26.i64[0] != a5 || v26.u16[4] != 0xFFFF || v26.u16[5] != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::ProjectiveShadowReceiverStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  signed int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  float32x4_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  signed int v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _anonymous_namespace_ *v71;
  _anonymous_namespace_ *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int *v91;
  __n128 v92;
  int v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _anonymous_namespace_ *v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  __n128 v138;
  _anonymous_namespace_ *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  int v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  float32x4_t *v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  float v155;
  uint64_t v156;
  uint64_t v157;
  float32x4_t v158;
  uint32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float v162;
  float v163;
  float v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  uint32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float v175;
  float32x4_t v176;
  float v177;
  float v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  uint64_t v186;
  _BOOL8 v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  float32x4_t v202;
  uint64_t v203;
  uint64_t StreamNameForWorldRoot;
  char *v205;
  uint64_t v206;
  char v207;
  unsigned __int8 *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t (**v213)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  double v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  re *v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  float32x4_t *v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  float32x4_t v249;
  uint64_t v250;
  float32x4_t v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  float32x4_t v256;
  BOOL v257;
  float32x4_t v258;
  int v259;
  float32x4_t v260;
  float v261;
  uint64_t v262;
  _BYTE v263[32];
  float32x4_t v264;
  float32x4_t v265;
  int v266;
  __int128 v267;
  __int128 v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  float32x4_t v278;
  int v279;
  uint64_t v280;
  uint64_t *v281;
  __int128 v282;
  int v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  int v287;
  uint64_t v288;
  uint64_t *v289;
  __int128 v290;
  int v291;
  uint64_t v292;
  re *v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298[3];
  _BYTE v299[80];
  __int128 v300;
  __int128 v301;
  _BYTE v302[48];
  _BYTE v303[24];
  uint64_t v304;
  _BYTE v305[40];
  uint64_t v306;

  v306 = *MEMORY[0x24BDAC8D0];
  v229 = *(_QWORD *)(a3 + 8);
  v262 = *(_QWORD *)(a3 + 48);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 320) + 136) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 136));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*(_DWORD *)(v10 + 124))
    v11 = *(_DWORD *)(v10 + 124);
  else
    v11 = *(_DWORD *)(v10 + 16);
  v252 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 320) + 736) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 736));
  v235 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 320) + 736) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 736));
  v243 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 320) + 736) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 736));
  v237 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 320) + 736) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 736));
  v231 = a1;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 320) + 736) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 736));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v298, a5, 0);
  v13 = v298[0];
  v298[0].i64[0] = a4;
  *(float32x4_t *)((char *)v298 + 8) = v13;
  if (v13.i64[0] != a5 || v13.u16[4] != 0xFFFFLL || (v13.i32[2] & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*(&v298[0].u16[4]);
      if (!*(_QWORD *)v12)
        goto LABEL_14;
      v15 = *(_QWORD *)(*(_QWORD *)v14 + 16);
      v16 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
      v17 = *(unsigned int *)(*(_QWORD *)(v12 + 8) + 4 * ((v16 ^ (v16 >> 31)) % *(unsigned int *)(v12 + 24)));
      if ((_DWORD)v17 == 0x7FFFFFFF)
        goto LABEL_14;
      v18 = *(_QWORD *)(v12 + 16);
      while (*(_QWORD *)(v18 + 32 * v17 + 16) != v15)
      {
        v17 = *(_DWORD *)(v18 + 32 * v17 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v17 == 0x7FFFFFFF)
          goto LABEL_14;
      }
      if ((*(_DWORD *)(v18 + 32 * v17 + 28) & 0xFFFFFF) == 0)
      {
LABEL_14:
        v19 = v298[0].i64[0];
        v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle(&v298[0].u16[4]);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(_QWORD *)(a3 + 32));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v298[0].i16[4]);
    }
    while (v298[0].i64[1] != a5 || v298[1].u16[0] != 0xFFFF || v298[1].u16[1] != 0xFFFF);
  }
  v23 = *(_QWORD *)(v231 + 320);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 112) + 104);
  if (v24)
  {
    v233 = re::RenderFrameBox::get(v24 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v23 = *(_QWORD *)(v231 + 320);
  }
  else
  {
    v233 = 0;
  }
  v293 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 144) + 16))(*(_QWORD *)(v23 + 144));
  v25 = re::globalAllocators(v293);
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v231 + 320) + 112) + 136);
  v247 = re::PerFrameAllocatorManager::perFrameAllocator(v25[6], *(_QWORD *)(v26 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(v26 + 16) << 60));
  v27 = 245;
  v28 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v29 = v27 >> 1;
    v30 = &v28[v27 >> 1];
    v32 = *v30;
    v31 = v30 + 1;
    v27 += ~(v27 >> 1);
    if (v32 < v11 + 1)
      v28 = v31;
    else
      v27 = v29;
  }
  while (v27);
  v33 = *v28;
  v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v247 + 32))(v247, ((4 * v33 + 15) & 0x7FFFFFFF0) + 144 * v33, 16);
  if (!v34)
  {
LABEL_320:
    re::internal::assertLog((re::internal *)4, v35, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
    goto LABEL_321;
  }
  v36 = v34;
  if ((_DWORD)v33)
    memset_pattern16(v34, &unk_2260EB7B0, 4 * v33);
  v37 = *(unsigned int *)(v235 + 32);
  v230 = v36;
  v38 = 0;
  if ((_DWORD)v37)
  {
    v39 = (int *)(*(_QWORD *)(v235 + 16) + 8);
    while (1)
    {
      v40 = *v39;
      v39 += 18;
      if (v40 < 0)
        break;
      if (v37 == ++v38)
      {
        LODWORD(v38) = *(_DWORD *)(v235 + 32);
        break;
      }
    }
  }
  if ((_DWORD)v37 == (_DWORD)v38)
    goto LABEL_40;
  v51 = v38;
  v52 = *(_QWORD *)(v235 + 16);
  v53 = *(_DWORD *)(v235 + 32);
  v234 = v53;
  do
  {
    v54 = v52 + 72 * v51;
    v55 = *(unsigned int *)(v54 + 52);
    if (!(_DWORD)v55)
      goto LABEL_298;
    v236 = v38;
    v290 = 0uLL;
    v291 = 0;
    v292 = 0;
    v289 = (uint64_t *)v247;
    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v289, v55);
    v254 = ++v291;
    v56 = *(_DWORD *)(v54 + 52);
    v287 = 0;
    v285 = 0u;
    v286 = 0u;
    v288 = 0x7FFFFFFFLL;
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v285, v247, v56);
    v57 = *(unsigned int *)(v54 + 56);
    if ((_DWORD)v57)
    {
      v58 = 0;
      v59 = (int *)(*(_QWORD *)(v54 + 40) + 8);
      while (1)
      {
        v60 = *v59;
        v59 += 6;
        if (v60 < 0)
          break;
        if (v57 == ++v58)
        {
          LODWORD(v58) = *(_DWORD *)(v54 + 56);
          break;
        }
      }
    }
    else
    {
      LODWORD(v58) = 0;
    }
    if ((_DWORD)v57 != (_DWORD)v58)
    {
      v61 = v58;
      v62 = *((_QWORD *)&v290 + 1);
      do
      {
        v63 = *(_QWORD *)(*(_QWORD *)(v54 + 40) + 24 * v61 + 16);
        v298[0].i64[0] = v63;
        *(_DWORD *)v263 = v62;
        v64 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v63 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v63 & 0xFFFFFF)) >> 27));
        v65 = v64 ^ (v64 >> 31);
        if ((_QWORD)v285)
        {
          v66 = v65 % DWORD2(v286);
          v67 = *(unsigned int *)(*((_QWORD *)&v285 + 1) + 4 * v66);
          if ((_DWORD)v67 != 0x7FFFFFFF)
          {
            do
            {
              v68 = v286 + 32 * v67;
              v70 = *(unsigned __int16 *)(v68 + 16);
              v69 = v68 + 16;
              if (v70 == (unsigned __int16)v63
                && *(unsigned __int16 *)(v69 + 2) == WORD1(v63)
                && ((*(_DWORD *)(v286 + 32 * v67 + 20) ^ HIDWORD(v63)) & 0xFFFFFF) == 0)
              {
                goto LABEL_60;
              }
              v67 = *(_DWORD *)(v286 + 32 * v67 + 8) & 0x7FFFFFFF;
            }
            while (v67 != 0x7FFFFFFF);
          }
        }
        else
        {
          LODWORD(v66) = 0;
        }
        re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,unsigned int,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove((uint64_t)&v285, v66, v65, v298, v263);
        ++HIDWORD(v288);
LABEL_60:
        v71 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get(v252, v63);
        v72 = v71;
        if (v62 >= (unint64_t)v290)
        {
          v73 = v254;
          if ((unint64_t)v290 < v62 + 1)
          {
            if (v289)
            {
              v74 = 8;
              if ((_QWORD)v290)
                v74 = 2 * v290;
              if (v74 <= v62 + 1)
                v75 = v62 + 1;
              else
                v75 = v74;
              re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v289, v75);
              v73 = v291;
            }
            else
            {
              re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v289, v62 + 1);
              v73 = v291 + 1;
            }
          }
          v62 = *((_QWORD *)&v290 + 1);
        }
        else
        {
          v73 = v254;
        }
        v76 = (_OWORD *)(v292 + 48 * v62);
        v78 = *((_OWORD *)v72 + 2);
        v77 = *((_OWORD *)v72 + 3);
        *v76 = *((_OWORD *)v72 + 1);
        v76[1] = v78;
        v76[2] = v77;
        *((_QWORD *)&v290 + 1) = ++v62;
        v254 = v73 + 1;
        v291 = v73 + 1;
        if (*(_DWORD *)(v54 + 56) <= (v58 + 1))
          v79 = v58 + 1;
        else
          v79 = *(_DWORD *)(v54 + 56);
        while (1)
        {
          v61 = (v58 + 1);
          if (v79 - 1 == (_DWORD)v58)
            break;
          LODWORD(v58) = v58 + 1;
          v80 = v61;
          if ((*(_DWORD *)(*(_QWORD *)(v54 + 40) + 24 * v61 + 8) & 0x80000000) != 0)
            goto LABEL_79;
        }
        v80 = v79;
LABEL_79:
        LODWORD(v58) = v80;
      }
      while ((_DWORD)v57 != v80);
    }
    v282 = 0uLL;
    v283 = 0;
    v284 = 0;
    v281 = (uint64_t *)v247;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v281, 0);
    v253 = ++v283;
    if (!*(_QWORD *)v237)
      goto LABEL_291;
    v81 = *(_QWORD *)(v54 + 16);
    v82 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v81 ^ (v81 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v81 ^ (v81 >> 30))) >> 27));
    v83 = *(unsigned int *)(*(_QWORD *)(v237 + 8) + 4 * ((v82 ^ (v82 >> 31)) % *(unsigned int *)(v237 + 24)));
    if ((_DWORD)v83 == 0x7FFFFFFF)
      goto LABEL_291;
    v84 = *(_QWORD *)(v237 + 16);
    while (*(_QWORD *)(v84 + 72 * v83 + 16) != v81)
    {
      LODWORD(v83) = *(_DWORD *)(v84 + 72 * v83 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v83 == 0x7FFFFFFF)
        goto LABEL_291;
    }
    v232 = (uint64_t *)(v54 + 16);
    v85 = v84 + 72 * v83;
    v86 = *(unsigned int *)(v85 + 52);
    v87 = v85 + 24;
    v278 = 0uLL;
    v279 = 0;
    v280 = 0;
    v88 = v247;
    v277 = v247;
    re::DynamicArray<re::ShadowClusterInfo>::setCapacity(&v277, v86);
    ++v279;
    v89 = *(unsigned int *)(v85 + 52);
    v273 = 0;
    v274 = 0;
    v275 = 0;
    v276 = 0;
    v272 = (uint64_t *)v247;
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(&v272, v89);
    v245 = ++v275;
    v250 = *(unsigned int *)(v85 + 56);
    v90 = 0;
    if ((_DWORD)v250)
    {
      v91 = (int *)(*(_QWORD *)(v85 + 40) + 8);
      v92 = 0uLL;
      while (1)
      {
        v93 = *v91;
        v91 += 6;
        if (v93 < 0)
          break;
        if (v250 == ++v90)
        {
          LODWORD(v90) = *(_DWORD *)(v85 + 56);
          break;
        }
      }
    }
    else
    {
      v92 = 0uLL;
    }
    if ((_DWORD)v250 != (_DWORD)v90)
    {
      v94 = v90;
      v239 = DWORD2(v286);
      v95 = v285;
      v248 = v85 + 24;
      v241 = v286;
      do
      {
        v96 = re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get(v243, *(_QWORD *)(*(_QWORD *)(v87 + 16) + 24 * v94 + 16));
        v97 = *(unsigned int *)(v96 + 60);
        *(_QWORD *)&v263[16] = 0;
        *(_DWORD *)&v263[24] = 0;
        v264.i64[0] = 0;
        *(_OWORD *)v263 = (unint64_t)v247;
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v263, v97);
        v259 = ++*(_DWORD *)&v263[24];
        v98 = *(unsigned int *)(v96 + 60);
        *(_QWORD *)&v305[16] = 0;
        *(_DWORD *)&v305[24] = 0;
        *(_QWORD *)&v305[32] = 0;
        *(_OWORD *)v305 = (unint64_t)v247;
        re::DynamicArray<float *>::setCapacity(v305, v98);
        v99 = ++*(_DWORD *)&v305[24];
        v88 = *(unsigned int *)(v96 + 64);
        if ((_DWORD)v88)
        {
          v100 = 0;
          v101 = (int *)(*(_QWORD *)(v96 + 48) + 8);
          v92 = 0uLL;
          while (1)
          {
            v102 = *v101;
            v101 += 12;
            if (v102 < 0)
              break;
            if (v88 == ++v100)
            {
              LODWORD(v100) = *(_DWORD *)(v96 + 64);
              break;
            }
          }
        }
        else
        {
          LODWORD(v100) = 0;
          v92 = 0uLL;
        }
        if ((_DWORD)v88 == (_DWORD)v100)
          goto LABEL_153;
        v255 = v99;
        v257 = 0;
        v103 = v100;
        v104 = *(_QWORD *)(v96 + 48);
        do
        {
          v105 = 0;
          v106 = v104 + 48 * v103;
          v107 = v106 + 24;
          v108 = *(unint64_t **)(v106 + 16);
          while (1)
          {
            v109 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), *(_QWORD *)(a3 + 24 + v105), (re::ecs2::Component *)v108);
            if (v109 != -1 && (v110 & 0xFFFFFF00000000) != 0)
              break;
            v105 += 8;
            if (v105 == 32)
            {
              v109 = -1;
              break;
            }
          }
          if (v262 == v109)
          {
            v112 = (_anonymous_namespace_ *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v293, v108[2]);
            if (*(_BYTE *)v112)
            {
              v113 = *(_QWORD *)&v305[16];
              v114 = v255;
              if (*(_QWORD *)&v305[16] >= *(_QWORD *)&v305[8])
              {
                v115 = *(_QWORD *)&v305[16] + 1;
                if (*(_QWORD *)&v305[8] < (unint64_t)(*(_QWORD *)&v305[16] + 1))
                {
                  if (*(_QWORD *)v305)
                  {
                    v116 = 2 * *(_QWORD *)&v305[8];
                    if (!*(_QWORD *)&v305[8])
                      v116 = 8;
                    if (v116 <= v115)
                      v117 = *(_QWORD *)&v305[16] + 1;
                    else
                      v117 = v116;
                    v112 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v305, v117);
                    v114 = *(_DWORD *)&v305[24];
                  }
                  else
                  {
                    v112 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v305, v115);
                    v114 = *(_DWORD *)&v305[24] + 1;
                  }
                }
                v113 = *(_QWORD *)&v305[16];
              }
              *(_QWORD *)(*(_QWORD *)&v305[32] + 8 * v113) = v108;
              *(_QWORD *)&v305[16] = v113 + 1;
              v255 = v114 + 1;
              *(_DWORD *)&v305[24] = v114 + 1;
              v118 = v108[2];
              v119 = *(_QWORD *)(v118 + 224);
              if (v119)
              {
                v120 = v257 || *(_BYTE *)(v119 + 76) != 0;
              }
              else
              {
                v112 = (_anonymous_namespace_ *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v293, v118);
                if (*((_BYTE *)v112 + 16))
                  v121 = *((_BYTE *)v112 + 17);
                else
                  v121 = 1;
                v120 = v121 | v257;
              }
              v122 = *(_QWORD *)&v263[16];
              v123 = v259;
              if (*(_QWORD *)&v263[16] >= *(_QWORD *)&v263[8])
              {
                v124 = *(_QWORD *)&v263[16] + 1;
                if (*(_QWORD *)&v263[8] < (unint64_t)(*(_QWORD *)&v263[16] + 1))
                {
                  if (*(_QWORD *)v263)
                  {
                    v125 = 2 * *(_QWORD *)&v263[8];
                    if (!*(_QWORD *)&v263[8])
                      v125 = 8;
                    if (v125 <= v124)
                      v126 = *(_QWORD *)&v263[16] + 1;
                    else
                      v126 = v125;
                    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v263, v126);
                    v123 = *(_DWORD *)&v263[24];
                  }
                  else
                  {
                    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v263, v124);
                    v123 = *(_DWORD *)&v263[24] + 1;
                  }
                }
                v122 = *(_QWORD *)&v263[16];
              }
              v127 = v264.i64[0] + 24 * v122;
              v128 = *(_QWORD *)(v107 + 16);
              *(_OWORD *)v127 = *(_OWORD *)v107;
              *(_QWORD *)(v127 + 16) = v128;
              *(_QWORD *)&v263[16] = v122 + 1;
              v259 = v123 + 1;
              *(_DWORD *)&v263[24] = v123 + 1;
              v257 = v120 != 0;
            }
          }
          v92 = 0uLL;
          v104 = *(_QWORD *)(v96 + 48);
          if (*(_DWORD *)(v96 + 64) <= (v100 + 1))
            v129 = v100 + 1;
          else
            v129 = *(_DWORD *)(v96 + 64);
          while (1)
          {
            v103 = (v100 + 1);
            if (v129 - 1 == (_DWORD)v100)
              break;
            LODWORD(v100) = v100 + 1;
            v130 = v103;
            if ((*(_DWORD *)(v104 + 48 * v103 + 8) & 0x80000000) != 0)
              goto LABEL_148;
          }
          v130 = v129;
LABEL_148:
          LODWORD(v100) = v130;
        }
        while ((_DWORD)v88 != v130);
        if (!v257)
        {
LABEL_153:
          v87 = v248;
        }
        else
        {
          memset(v298, 0, 32);
          v88 = v241;
          if ((_QWORD)v95
            && (v131 = *(_QWORD *)(v96 + 16),
                v132 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v131 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v131 & 0xFFFFFF)) >> 27)),
                v133 = *(unsigned int *)(*((_QWORD *)&v95 + 1) + 4 * ((v132 ^ (v132 >> 31)) % v239)),
                (_DWORD)v133 != 0x7FFFFFFF))
          {
            do
            {
              v135 = v241 + 32 * v133;
              v137 = *(unsigned __int16 *)(v135 + 16);
              v136 = v135 + 16;
              if (v137 == (unsigned __int16)v131 && *(unsigned __int16 *)(v136 + 2) == WORD1(v131))
              {
                v134 = v133;
                if (((*(_DWORD *)(v241 + 32 * v133 + 20) ^ HIDWORD(v131)) & 0xFFFFFF) == 0)
                  break;
              }
              v133 = *(_DWORD *)(v241 + 32 * v133 + 8) & 0x7FFFFFFF;
              v134 = 0x7FFFFFFFLL;
            }
            while (v133 != 0x7FFFFFFF);
          }
          else
          {
            v134 = 0x7FFFFFFFLL;
          }
          v298[2].i64[0] = *(unsigned int *)(v241 + 32 * v134 + 24);
          v298[2].i8[8] = 0;
          v298[2].i32[3] = *(_DWORD *)(v96 + 24);
          *(_QWORD *)v299 = *(_QWORD *)v263;
          *(_OWORD *)&v299[8] = *(_OWORD *)&v263[8];
          memset(v263, 0, 24);
          *(_QWORD *)&v299[32] = v264.i64[0];
          v264.i64[0] = 0;
          *(_DWORD *)&v263[24] = v259 + 1;
          *(_DWORD *)&v299[24] = 1;
          v138 = re::DynamicArray<re::ShadowClusterInfo>::add((_anonymous_namespace_ *)&v277, (uint64_t)v298);
          v139 = *(_anonymous_namespace_ **)v299;
          if (*(_QWORD *)v299 && *(_QWORD *)&v299[32])
            v139 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(_QWORD **)v299 + 40))(v138);
          v140 = v274;
          v87 = v248;
          if (v274 >= v273)
          {
            v141 = v274 + 1;
            if (v273 < v274 + 1)
            {
              if (v272)
              {
                v142 = 2 * v273;
                if (!v273)
                  v142 = 8;
                if (v142 <= v141)
                  v143 = v274 + 1;
                else
                  v143 = v142;
                re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(&v272, v143);
                v245 = v275;
              }
              else
              {
                re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(&v272, v141);
                v245 = ++v275;
              }
            }
            v140 = v274;
          }
          v144 = v276 + 40 * v140;
          *(_QWORD *)(v144 + 8) = 0;
          *(_QWORD *)(v144 + 16) = 0;
          *(_QWORD *)v144 = *(_QWORD *)v305;
          v145 = *(_OWORD *)&v305[8];
          memset(v305, 0, 24);
          *(_OWORD *)(v144 + 8) = v145;
          *(_QWORD *)(v144 + 32) = *(_QWORD *)&v305[32];
          *(_QWORD *)&v305[32] = 0;
          *(_DWORD *)(v144 + 24) = 1;
          v274 = v140 + 1;
          v275 = ++v245;
          v92 = 0uLL;
        }
        if (*(_QWORD *)v305 && *(_QWORD *)&v305[32])
        {
          (*(void (**)(__n128))(**(_QWORD **)v305 + 40))(v92);
          v92 = 0uLL;
        }
        if (*(_QWORD *)v263 && v264.i64[0])
        {
          (*(void (**)(__n128))(**(_QWORD **)v263 + 40))(v92);
          v92 = 0uLL;
        }
        if (*(_DWORD *)(v87 + 32) <= (v90 + 1))
          v146 = v90 + 1;
        else
          v146 = *(_DWORD *)(v87 + 32);
        while (1)
        {
          v94 = (v90 + 1);
          if (v146 - 1 == (_DWORD)v90)
            break;
          LODWORD(v90) = v90 + 1;
          v147 = v94;
          if ((*(_DWORD *)(*(_QWORD *)(v87 + 16) + 24 * v94 + 8) & 0x80000000) != 0)
            goto LABEL_186;
        }
        v147 = v146;
LABEL_186:
        LODWORD(v90) = v147;
      }
      while ((_DWORD)v250 != v147);
    }
    if (!v278.i64[1])
      goto LABEL_279;
    v264.i32[0] = 0;
    *(__n128 *)v263 = v92;
    *(__n128 *)&v263[16] = v92;
    *(uint64_t *)((char *)v264.i64 + 4) = 0x7FFFFFFFLL;
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v263, v247, 3);
    if (!v278.i64[1])
      goto LABEL_239;
    v148 = 0;
    v244 = v276;
    v246 = v274;
    v240 = v292;
    v242 = *((_QWORD *)&v290 + 1);
    do
    {
      if (v148 == v246)
      {
        v295.i64[0] = 0;
        memset(v299, 0, 32);
        memset(v298, 0, sizeof(v298));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v305 = 136315906;
        *(_QWORD *)&v305[4] = "operator[]";
        *(_WORD *)&v305[12] = 1024;
        *(_DWORD *)&v305[14] = 797;
        *(_WORD *)&v305[18] = 2048;
        *(_QWORD *)&v305[20] = v246;
        *(_WORD *)&v305[28] = 2048;
        *(_QWORD *)&v305[30] = v246;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_318:
        v295.i64[0] = 0;
        memset(v299, 0, 32);
        memset(v298, 0, sizeof(v298));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v305 = 136315906;
        *(_QWORD *)&v305[4] = "operator[]";
        *(_WORD *)&v305[12] = 1024;
        *(_DWORD *)&v305[14] = 797;
        *(_WORD *)&v305[18] = 2048;
        *(_QWORD *)&v305[20] = v88;
        *(_WORD *)&v305[28] = 2048;
        *(_QWORD *)&v305[30] = v242;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_319:
        v295.i64[0] = 0;
        memset(v299, 0, 32);
        memset(v298, 0, sizeof(v298));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v305 = 136315906;
        *(_QWORD *)&v305[4] = "operator[]";
        *(_WORD *)&v305[12] = 1024;
        *(_DWORD *)&v305[14] = 789;
        *(_WORD *)&v305[18] = 2048;
        *(_QWORD *)&v305[20] = v88;
        *(_WORD *)&v305[28] = 2048;
        *(_QWORD *)&v305[30] = v246;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_320;
      }
      v149 = v280;
      v88 = *(unsigned int *)(v280 + 96 * v148 + 32);
      if (v242 <= v88)
        goto LABEL_318;
      v150 = (float32x4_t *)(v240 + 48 * v88);
      v249 = v150[1];
      v251 = *v150;
      v297 = 0uLL;
      v151 = v244 + 40 * v148;
      v152 = *(_QWORD *)(v151 + 16);
      if (v152)
      {
        v153 = 0;
        v238 = (float32x4_t *)(v280 + 96 * v148);
        v88 = *(_QWORD *)(v151 + 32);
        v154 = 8 * v152;
        v155 = INFINITY;
        do
        {
          v156 = *(_QWORD *)v88;
          v157 = *(_QWORD *)(*(_QWORD *)v88 + 16);
          re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v157, (const re::ecs2::Entity *)1, v298);
          v158 = *(float32x4_t *)(v156 + 64);
          *(_OWORD *)v305 = *(_OWORD *)(v156 + 48);
          *(float32x4_t *)&v305[16] = v158;
          v159 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v305, v158);
          v159.i32[3] = v159.i32[2];
          if ((vmaxvq_u32(v159) & 0x80000000) == 0)
          {
            if ((re::AABB::transform((float32x4_t *)v305, v298, (uint64_t)&v295),
                  v160 = vsubq_f32(v296, v295),
                  v160.i32[3] = 0,
                  v161 = vmaxnmq_f32(v160, (float32x4_t)0),
                  v161.f32[0] != 0.0)
              && (v162 = fabsf(v161.f32[0]), v162 >= (float)((float)(v162 + 1.0) * 0.00001))
              || v161.f32[1] != 0.0 && (v163 = fabsf(v161.f32[1]), v163 >= (float)((float)(v163 + 1.0) * 0.00001))
              || v161.f32[2] != 0.0 && (v164 = fabsf(v161.f32[2]), v164 >= (float)((float)(v164 + 1.0) * 0.00001)))
            {
              v258 = v295;
              v260 = v296;
              v256 = v161;
              if (v297.f32[3] <= 0.00001)
              {
                re::BoundingSphere::BoundingSphere(&v297, (uint64_t)v305, v298);
              }
              else
              {
                re::BoundingSphere::BoundingSphere(&v294, (uint64_t)v305, v298);
                re::BoundingSphere::expandToIncludeSphere(&v297, &v294, v165, v166, v167, v168, v169, v170);
              }
              if (*(_BYTE *)(v156 + 40))
              {
                v171 = (uint32x4_t)vcgtq_f32(v258, v260);
                v171.i32[3] = v171.i32[2];
                if ((vmaxvq_u32(v171) & 0x80000000) != 0)
                {
                  v173 = 0uLL;
                  v172.i64[0] = 0x3F0000003F000000;
                  v172.i64[1] = 0x3F0000003F000000;
                }
                else
                {
                  v172.i64[0] = 0x3F0000003F000000;
                  v172.i64[1] = 0x3F0000003F000000;
                  v173 = vmulq_f32(vaddq_f32(v260, v258), v172);
                }
                v174 = vmulq_f32(v251, vsubq_f32(v173, v249));
                v175 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v174, 2), vaddq_f32(v174, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v174.f32, 1))).f32[0];
                v176 = vmulq_f32(v251, vmulq_f32(v256, v172));
                v177 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 2), vaddq_f32(v176, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.f32, 1))).f32[0]);
                v178 = v177 + v175;
                if ((float)(v177 + v175) >= 0.0)
                {
                  v294.i64[0] = *(_QWORD *)(v157 + 296);
                  v261 = v175;
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v263, (uint64_t *)&v294);
                  v175 = v261;
                }
                v153 |= v178 >= 0.0;
                if (v155 > (float)(v175 - v177))
                  v155 = v175 - v177;
              }
            }
          }
          v88 += 8;
          v154 -= 8;
        }
        while (v154);
        if ((v153 & 1) != 0)
        {
          *v238 = v297;
          v179 = v149 + 96 * v148;
          *(float *)(v179 + 36) = v155;
          *(_BYTE *)(v179 + 40) = 1;
        }
      }
      ++v148;
      v180 = v278.u64[1];
    }
    while (v148 < v278.i64[1]);
    if (v278.i64[1])
    {
      v88 = 0;
      do
      {
        if (*(_BYTE *)(v280 + 96 * v88 + 40))
        {
          if (v246 <= v88)
            goto LABEL_319;
          v181 = v244 + 40 * v88;
          v182 = *(_QWORD *)(v181 + 16);
          if (v182)
          {
            v183 = *(_QWORD *)(v181 + 32);
            v184 = (int *)(v280 + 96 * v88 + 32);
            v185 = 8 * v182;
            do
            {
              v186 = *(_QWORD *)(*(_QWORD *)v183 + 16);
              v298[0].i64[0] = *(_QWORD *)(v186 + 296);
              v187 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v263, (uint64_t *)v298);
              if (v187)
              {
                v188 = *(_QWORD *)(v186 + 296);
                v189 = *v184;
                v190 = *((_QWORD *)&v282 + 1);
                if (*((_QWORD *)&v282 + 1) >= (unint64_t)v282)
                {
                  v191 = *((_QWORD *)&v282 + 1) + 1;
                  if ((unint64_t)v282 < *((_QWORD *)&v282 + 1) + 1)
                  {
                    if (v281)
                    {
                      v192 = 2 * v282;
                      if (!(_QWORD)v282)
                        v192 = 8;
                      if (v192 <= v191)
                        v193 = *((_QWORD *)&v282 + 1) + 1;
                      else
                        v193 = v192;
                      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v281, v193);
                      v194 = v283;
                    }
                    else
                    {
                      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v281, v191);
                      v194 = v283 + 1;
                    }
                    v253 = v194;
                  }
                  v190 = *((_QWORD *)&v282 + 1);
                }
                v195 = v284 + 16 * v190;
                *(_QWORD *)v195 = v188;
                *(_DWORD *)(v195 + 8) = v189;
                *((_QWORD *)&v282 + 1) = v190 + 1;
                v283 = ++v253;
              }
              v183 += 8;
              v185 -= 8;
            }
            while (v185);
            v180 = v278.u64[1];
          }
        }
        ++v88;
      }
      while (v88 < v180);
    }
LABEL_239:
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v263);
    v298[1].i64[0] = 0;
    v298[1].i32[2] = 0;
    v298[2].i64[0] = 0;
    v298[0] = (float32x4_t)(unint64_t)v277;
    re::DynamicArray<re::ShadowClusterInfo>::setCapacity(v298, 0);
    ++v298[1].i32[2];
    if (v278.i64[1])
    {
      v197 = v280;
      v198 = 96 * v278.i64[1];
      do
      {
        if (*(_BYTE *)(v197 + 40))
          re::DynamicArray<re::ShadowClusterInfo>::add((_anonymous_namespace_ *)v298, v197);
        v197 += 96;
        v198 -= 96;
      }
      while (v198);
    }
    v199 = v277;
    if (v277)
      v200 = v298[0].i64[0] == 0;
    else
      v200 = 1;
    if (!v200 && v277 != v298[0].i64[0])
    {
LABEL_322:
      re::internal::assertLog((re::internal *)4, v196, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
    }
    v277 = v298[0].i64[0];
    v298[0].i64[0] = v199;
    v202 = v278;
    v278 = *(float32x4_t *)((char *)v298 + 8);
    *(float32x4_t *)((char *)v298 + 8) = v202;
    v203 = v280;
    v280 = v298[2].i64[0];
    v298[2].i64[0] = v203;
    ++v298[1].i32[2];
    ++v279;
    re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)v298);
    if (v278.i64[1])
    {
      StreamNameForWorldRoot = re::RenderFrame::getStreamNameForWorldRoot((re::DynamicString **)v233, (const re::StringID *)(*(_QWORD *)(v229 + 104) + 272), *v232);
      v205 = *(char **)(StreamNameForWorldRoot + 16);
      if ((*(_BYTE *)(StreamNameForWorldRoot + 8) & 1) == 0)
        v205 = (char *)(StreamNameForWorldRoot + 9);
      if (v205)
      {
        v206 = *v205;
        if (*v205)
        {
          v207 = v205[1];
          if (v207)
          {
            v208 = (unsigned __int8 *)(v205 + 2);
            do
            {
              v206 = 31 * v206 + v207;
              v209 = *v208++;
              v207 = v209;
            }
            while (v209);
          }
        }
      }
      else
      {
        v206 = 0;
      }
      v295.i64[1] = (uint64_t)v205;
      v295.i64[0] = 2 * v206;
      v271 = v206 & 0x7FFFFFFFFFFFFFFFLL;
      v210 = v284;
      *(_QWORD *)v263 = v281;
      v281 = 0;
      *(_OWORD *)&v263[8] = v282;
      v282 = 0u;
      v284 = 0;
      v283 = v253 + 1;
      *(_DWORD *)&v263[24] = 1;
      v264.i64[0] = v210;
      v264.i64[1] = v277;
      v277 = 0;
      v265 = v278;
      v278 = 0u;
      v211 = v280;
      v280 = 0;
      ++v279;
      v266 = 1;
      *(_QWORD *)&v267 = v211;
      *((_QWORD *)&v267 + 1) = v289;
      v289 = 0;
      v268 = v290;
      v290 = 0u;
      v270 = v292;
      v292 = 0;
      v291 = v254 + 1;
      v269 = 1;
      v212 = re::RenderFrameData::stream((re::RenderFrameData *)(v233 + 264), (const re::WeakStringID *)&v271);
      v213 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v212, (uint64_t *)&v294);
      if (!v213)
      {
        v225 = *(_QWORD *)(*(_QWORD *)(v212 + 48) + 8);
        v226 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v225 + 32))(v225, 56, 8);
        *(_QWORD *)v226 = 0;
        *(_QWORD *)(v226 + 8) = 0;
        *(_DWORD *)(v226 + 16) = 1;
        *(_QWORD *)(v226 + 32) = 0;
        *(_QWORD *)(v226 + 40) = 0;
        *(_QWORD *)(v226 + 24) = 0;
        *(_DWORD *)(v226 + 48) = 0;
        v227 = (re *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::init(v226, v225, 1uLL);
        v228 = re::globalAllocators(v227)[2];
        *(_QWORD *)v305 = &off_24ED5EA40;
        *(_QWORD *)&v305[8] = v225;
        *(_QWORD *)&v305[24] = v228;
        *(_QWORD *)&v305[32] = v305;
        v298[0].i64[1] = v226;
        v298[0].i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul> *>::__handle[abi:nn180100];
        *(_QWORD *)&v299[8] = v228;
        *(_QWORD *)&v299[16] = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v298[2], (uint64_t)v305);
        v213 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v212, (uint64_t *)&v294, (re *)v298);
        if (*(_QWORD *)&v299[16])
        {
          v297.i64[0] = (uint64_t)v298;
          (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)&v299[16] + 16))(*(_QWORD *)&v299[16], &v297);
          if (*(_QWORD *)&v299[16])
          {
            (***(void (****)(_QWORD))&v299[16])(*(_QWORD *)&v299[16]);
            if (*(float32x4_t **)&v299[16] != &v298[2])
              (*(void (**)(_QWORD))(**(_QWORD **)&v299[8] + 40))(*(_QWORD *)&v299[8]);
            *(_QWORD *)&v299[16] = 0;
          }
        }
        if (v298[0].i64[0])
          ((void (*)(int))v298[0].i64[0])(0);
        if (*(_QWORD *)&v305[32])
        {
          (***(void (****)(_QWORD))&v305[32])(*(_QWORD *)&v305[32]);
          if (*(_BYTE **)&v305[32] != v305)
            (*(void (**)(_QWORD))(**(_QWORD **)&v305[24] + 40))(*(_QWORD *)&v305[24]);
        }
      }
      v298[0].i64[0] = *(_QWORD *)v263;
      memset(v263, 0, 24);
      *(float32x4_t *)((char *)v298 + 8) = *(float32x4_t *)&v263[8];
      ++*(_DWORD *)&v263[24];
      v298[1].i32[2] = 1;
      v298[2] = v264;
      *(float32x4_t *)v299 = v265;
      v264 = 0u;
      v265 = 0u;
      ++v266;
      *(_OWORD *)&v299[24] = v267;
      v267 = 0u;
      *(_OWORD *)&v299[40] = v268;
      v268 = 0u;
      *(_QWORD *)&v299[64] = v270;
      v270 = 0;
      ++v269;
      *(_DWORD *)&v299[16] = 1;
      *(_DWORD *)&v299[56] = 1;
      re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::add(v214, (uint64_t)v298);
      if (*(_QWORD *)&v299[32])
      {
        if (*(_QWORD *)&v299[64])
          (*(void (**)(void))(**(_QWORD **)&v299[32] + 40))();
        *(_QWORD *)&v299[64] = 0;
        memset(&v299[32], 0, 24);
        ++*(_DWORD *)&v299[56];
      }
      re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)&v298[2].i64[1]);
      if (v298[0].i64[0])
      {
        v215 = v298[2].i64[0];
        if (v298[2].i64[0])
          (*(void (**)(void))(*(_QWORD *)v298[0].i64[0] + 40))();
      }
      v216 = *(_QWORD *)(v214 + 40);
      if (v216)
      {
        re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v214, v216 - 1);
        if (*((_QWORD *)&v267 + 1))
        {
          if (v270)
            (*(void (**)(void))(**((_QWORD **)&v267 + 1) + 40))();
          v270 = 0;
          v268 = 0uLL;
          *((_QWORD *)&v267 + 1) = 0;
          ++v269;
        }
        re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)&v264.i64[1]);
        if (*(_QWORD *)v263 && v264.i64[0])
          (*(void (**)(void))(**(_QWORD **)v263 + 40))();
        re::StringID::destroyString((re::StringID *)&v295);
        goto LABEL_279;
      }
LABEL_321:
      re::internal::assertLog((re::internal *)4, v215, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
      goto LABEL_322;
    }
LABEL_279:
    v217 = v272;
    if (v272)
    {
      v218 = v276;
      if (v276)
      {
        if (v274)
        {
          v219 = 40 * v274;
          v220 = (_QWORD *)(v276 + 32);
          do
          {
            v221 = *(v220 - 4);
            if (v221)
            {
              if (*v220)
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v221 + 40))(v221, v92);
              *v220 = 0;
              *(v220 - 3) = 0;
              *(v220 - 2) = 0;
              *(v220 - 4) = 0;
              ++*((_DWORD *)v220 - 2);
            }
            v220 += 5;
            v219 -= 40;
          }
          while (v219);
        }
        (*(void (**)(uint64_t *, uint64_t, __n128))(*v217 + 40))(v217, v218, v92);
      }
      v276 = 0;
      v274 = 0;
      v272 = 0;
      v273 = 0;
    }
    re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)&v277);
LABEL_291:
    if (v281 && v284)
      (*(void (**)(void))(*v281 + 40))();
    v222 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v285);
    if (v289 && v292)
      (*(void (**)(double))(*v289 + 40))(v222);
    v53 = *(_DWORD *)(v235 + 32);
    v52 = *(_QWORD *)(v235 + 16);
    LODWORD(v37) = v234;
    LODWORD(v38) = v236;
LABEL_298:
    if (v53 <= (int)v38 + 1)
      v223 = v38 + 1;
    else
      v223 = v53;
    while (1)
    {
      v51 = (v38 + 1);
      if (v223 - 1 == (_DWORD)v38)
        break;
      LODWORD(v38) = v38 + 1;
      v224 = v51;
      if ((*(_DWORD *)(v52 + 72 * v51 + 8) & 0x80000000) != 0)
        goto LABEL_305;
    }
    v224 = v223;
LABEL_305:
    LODWORD(v38) = v224;
  }
  while ((_DWORD)v37 != v224);
LABEL_40:
  v298[1].i32[0] = 1065353216;
  *(float32x4_t *)((char *)&v298[1] + 4) = (float32x4_t)xmmword_22610CC60;
  *(uint64_t *)((char *)v298[2].i64 + 4) = 0x3CF5C28F3F800000;
  v298[2].i16[6] = 0;
  *(_OWORD *)v299 = xmmword_22610CC70;
  *(_QWORD *)&v299[16] = 0x3EB333333F800000;
  v299[24] = 1;
  *(_OWORD *)&v299[28] = xmmword_22610CC80;
  *(_OWORD *)&v299[44] = xmmword_22610CC90;
  *(_QWORD *)&v299[60] = 0x3DCCCCCD41F00000;
  *(_DWORD *)&v299[68] = 1100480512;
  v299[72] = 0;
  v300 = xmmword_2260E5F50;
  LOBYTE(v301) = 1;
  *(_QWORD *)v302 = 0x3F8000003F2D42C4;
  *(_OWORD *)&v302[12] = xmmword_22610CCA0;
  *(_QWORD *)&v302[28] = 1056964608;
  *(_DWORD *)&v302[8] = 10;
  *(_DWORD *)&v302[36] = 0x40000000;
  *(_WORD *)&v302[40] = 0;
  *(_WORD *)&v302[44] = 1;
  v302[46] = 0;
  *(_QWORD *)v303 = 897988541;
  *(_QWORD *)&v303[12] = 0x3DCCCCCD3E800000;
  *(_DWORD *)&v303[8] = 0;
  *(_DWORD *)&v303[20] = 16;
  v304 = 0xFFFFFFFFLL;
  v298[0].i64[0] = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(v231 + 8)) + 1664);
  v298[0].i64[1] = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(v231 + 32)) + 1664);
  v41 = *(_OWORD *)(v231 + 240);
  *(_OWORD *)&v302[16] = *(_OWORD *)(v231 + 224);
  *(_OWORD *)&v302[32] = v41;
  *(_OWORD *)v303 = *(_OWORD *)(v231 + 256);
  v42 = *(_QWORD *)(v231 + 272);
  v43 = *(_OWORD *)(v231 + 176);
  *(_OWORD *)&v299[64] = *(_OWORD *)(v231 + 160);
  v300 = v43;
  v44 = *(_OWORD *)(v231 + 208);
  v301 = *(_OWORD *)(v231 + 192);
  *(_OWORD *)v302 = v44;
  v45 = *(_OWORD *)(v231 + 112);
  *(_OWORD *)v299 = *(_OWORD *)(v231 + 96);
  *(_OWORD *)&v299[16] = v45;
  v46 = *(_OWORD *)(v231 + 144);
  *(_OWORD *)&v299[32] = *(_OWORD *)(v231 + 128);
  *(_OWORD *)&v299[48] = v46;
  v47 = *(float32x4_t *)(v231 + 80);
  v298[1] = *(float32x4_t *)(v231 + 64);
  v298[2] = v47;
  v48 = *(_QWORD *)(v231 + 288);
  *(_QWORD *)&v303[16] = v42;
  v304 = v48;
  (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v233 + 320) + 304))(*(_QWORD *)(v233 + 320), v298);
  v49 = *(_DWORD *)(a5 + 40) != 0;
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v247 + 40))(v247, v230);
  return v49;
}

unint64_t re::DataArray<re::ecs2::ShadowPlaneInfo>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + ((unint64_t)(unsigned __int16)a2 << 7);
}

uint64_t re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 80 * (unsigned __int16)a2;
}

__n128 re::DynamicArray<re::ShadowClusterInfo>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ShadowClusterInfo>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 96 * v4;
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(__n128 *)v5 = result;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 72) = 0;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 56) = v8;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v9 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v10;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(v5 + 72);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::ProjectiveShadowReceiverSystem::willAddSystemToECSService(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  re::ecs2::ProjectiveShadowReceiverSystem *v1;
  __int128 *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  re::MeshAsset *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v1 = this;
  v39 = *MEMORY[0x24BDAC8D0];
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = (__int128 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 5) + 32))(*((_QWORD *)v1 + 5));
  p_info = VideoSpillMapMetalSession.info;
  if ((v3 & 1) == 0)
    goto LABEL_13;
  while (1)
  {
    p_info = (__objc2_class_ro **)p_info[414];
    re::StringID::invalid((re::StringID *)&v21);
    v5 = (*(uint64_t (**)(__int128 *, __objc2_class_ro **, __int128 *))(*(_QWORD *)v2 + 16))(v2, p_info, &v21);
    re::StringID::destroyString((re::StringID *)&v21);
    *((_QWORD *)v1 + 92) = v5;
    v6 = *(_QWORD *)(*((_QWORD *)v1 + 90) + 120);
    if (!v6)
      break;
    (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v6 + 8))(&v21, v6, "engine:arProjectiveShadow.rematerial");
    v7 = *(_OWORD *)((char *)v1 + 408);
    *(_OWORD *)((char *)v1 + 408) = v21;
    v21 = v7;
    v8 = *((_QWORD *)v1 + 53);
    *((_QWORD *)v1 + 53) = v22;
    *(_QWORD *)&v22 = v8;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
    re::AssetHandle::loadAsync((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)v1 + 408));
    (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**(_QWORD **)(*((_QWORD *)v1 + 90) + 120)
                                                                         + 8))(&v21, *(_QWORD *)(*((_QWORD *)v1 + 90) + 120), "engine:arProjectiveShadowPlane.rematerial");
    v2 = (__int128 *)((char *)v1 + 432);
    v9 = *((_OWORD *)v1 + 27);
    *((_OWORD *)v1 + 27) = v21;
    v21 = v9;
    v10 = *((_QWORD *)v1 + 56);
    *((_QWORD *)v1 + 56) = v22;
    *(_QWORD *)&v22 = v10;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
    re::AssetHandle::loadAsync((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)v1 + 432));
    v13 = (_QWORD *)*((_QWORD *)v1 + 90);
    v14 = v13[13];
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 424) & 0x10) == 0)
        break;
    }
    v15 = v13[14];
    if (!v15)
    {
      re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) ", "m_system->m_renderManager", "init", 125);
      _os_crash();
      __break(1u);
LABEL_11:
      v30 = 0;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v34) = 136315906;
      *(__objc2_class_ro **)((char *)p_info + 52) = (__objc2_class_ro *)"operator[]";
      WORD6(v34) = 1024;
      *(_DWORD *)((char *)p_info + 62) = 797;
      WORD1(v35) = 2048;
      *(__objc2_class_ro **)((char *)p_info + 68) = 0;
      WORD6(v35) = 2048;
      *(__objc2_class_ro **)((char *)p_info + 78) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_12;
    }
    p_info = (__objc2_class_ro **)&v30;
    v16 = *(_QWORD *)(v15 + 32);
    v2 = (__int128 *)v13[15];
    v17 = re::MeshAsset::assetType(v11);
    (*(void (**)(_QWORD *__return_ptr, __int128 *, const char *, uint64_t *))(*(_QWORD *)v2 + 32))(v20, v2, "sharedPlaneMesh.compiledmesh", v17);
    v18 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v20);
    if (!*(_QWORD *)(v18 + 416))
      goto LABEL_11;
    v19 = **(_QWORD **)(v18 + 432);
    *(_QWORD *)&v21 = 0;
    *((_QWORD *)&v21 + 1) = &str_110;
    BYTE8(v22) = 0;
    HIDWORD(v22) = 1065353216;
    v2 = &v27;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    *(_QWORD *)&v22 = v19;
    v23 = xmmword_2260E5F10;
    v24 = xmmword_2260E5F20;
    v25 = xmmword_2260E5F40;
    v26 = xmmword_2260E5D70;
    if (*((_QWORD *)&v27 + 1))
    {
      *(_DWORD *)v28 = 0;
      *((_QWORD *)&v22 + 1) = 0x3F80000000000000;
      *((_QWORD *)v1 + 86) = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(v16 + 72, (uint64_t)&v21);
      re::MeshInstance::~MeshInstance((re::MeshInstance *)&v21);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
      return;
    }
LABEL_12:
    v20[3] = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v1 = (re::ecs2::ProjectiveShadowReceiverSystem *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v30) = 136315906;
    *(__objc2_class_ro **)((char *)p_info + 4) = (__objc2_class_ro *)"operator[]";
    v31 = 1024;
    *(_DWORD *)((char *)p_info + 14) = 468;
    v32 = 2048;
    *(__objc2_class_ro **)((char *)p_info + 20) = 0;
    v33 = 2048;
    *(__objc2_class_ro **)((char *)p_info + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    {
      p_info[414] = (__objc2_class_ro *)re::ecs2::introspect_ProjectiveShadowReceiverService(0);
    }
  }
}

double re::ecs2::ProjectiveShadowReceiverSystem::willRemoveSystemFromECSService(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;

  v2 = *(_OWORD *)((char *)this + 408);
  v3 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 51) = 0;
  v10 = v2;
  v11 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  v4 = *((_OWORD *)this + 27);
  v5 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 54) = 0;
  v10 = v4;
  v11 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  v6 = *((_QWORD *)this + 90);
  v7 = *(_QWORD *)(v6 + 104);
  if (!v7 || (*(_BYTE *)(v7 + 424) & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v6 + 112);
    if (v8)
    {
      if ((*((_DWORD *)this + 173) & 0xFFFFFF) != 0)
        re::MeshManager::destroyInstance(*(uint64_t **)(v8 + 32), *((_QWORD *)this + 86));
      *((_QWORD *)this + 86) = 0xFFFFFFFFLL;
    }
  }
  *((_QWORD *)this + 92) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  return result;
}

void re::ecs2::ProjectiveShadowReceiverSystem::willAddSceneToECSService(re::ecs2::ProjectiveShadowReceiverSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 280);
  v6 = *((_QWORD *)this + 36);
  v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 304);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 39);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 304);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 39);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 328;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 25);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 176) & 1) != 0)
    v19 = (char *)this + 184;
  else
    v19 = (char *)*((_QWORD *)this + 24);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 25);
  ++*((_DWORD *)this + 52);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 25);
  v29 = *((_QWORD *)this + 40);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 40) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 296) & 1) != 0)
      v33 = (char *)this + 304;
    else
      v33 = (char *)*((_QWORD *)this + 39);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 36) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 25);
  v35 = *((_QWORD *)this + 46);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 46) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 344) & 1) != 0)
      v39 = (char *)this + 352;
    else
      v39 = (char *)*((_QWORD *)this + 45);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 42) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 392))
    return;
  v40 = *((_QWORD *)this + 42);
  v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 352);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 45);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 47);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 352);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 45);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::ProjectiveShadowReceiverSystem::willRemoveSceneFromECSService(re::ecs2::ProjectiveShadowReceiverSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::ComponentBucketsBase *v16;
  uint64_t result;
  re::ecs2::Scene *v18;

  v18 = a2;
  v4 = (uint64_t *)((char *)this + 216);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 27, &v18);
  if (v5 != -1)
  {
    v6 = *((_QWORD *)this + 28) + 16 * v5;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(_QWORD *)(v6 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(_QWORD *)(v6 + 8));
    v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(_QWORD *)(v6 + 8));
    if (*v7)
    {
      v8 = v7;
      *v7 = 0;
      v9 = v7 + 1;
      v10 = *(_QWORD *)(v7[1] + 288);
      if (v10)
      {
        v11 = v7[12];
        if (v11)
        {
          for (i = 0; i != v11; ++i)
          {
            v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
            re::EventBus::unsubscribe(v10, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
      v14 = 0;
      v15 = v8 + 3;
      do
      {
        v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
        if (*(_QWORD *)v16)
          re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
        v15[v14++] = -1;
      }
      while (v14 != 4);
      *v9 = 0;
      v9[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v4, &v18);
  }
  result = *((_QWORD *)this + 92);
  if (result)
    return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)result + 88))(result, a2);
  return result;
}

void re::ecs2::ProjectiveShadowReceiverSystem::updateScenes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  re::AssetHandle *v26;
  uint64_t v27;
  uint64_t v28;
  re::Scheduler *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  re *isStatisticCollectionEnabled;
  uint64_t v45;
  int64x2_t *v46;
  unint64_t v47;
  unint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  re::ecs2::System *v68;
  int64x2_t v69;
  uint64_t v70;
  _QWORD v71[2];
  _QWORD v72[2];
  uint64_t v73;
  _OWORD v74[11];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v72[0] = a3;
  v72[1] = a4;
  if (*(_QWORD *)(a1 + 128))
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (!v6 || (*(_BYTE *)(v6 + 424) & 0x10) != 0)
    {
      if (re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken != -1)
        dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
      if (!re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows)
      {
        (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(a1 + 128) + 16))(v74);
        if (BYTE12(v75))
        {
          v7 = a2[1];
          if (v7)
          {
            v8 = *a2;
            v9 = (uint64_t)&(*a2)[(_QWORD)v7];
            v10 = 1;
            do
            {
              while (1)
              {
                v11 = *v8;
                v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v12)
                {
                  if (*(_QWORD *)(v12 + 24) && *(_BYTE *)(**(_QWORD **)(v12 + 40) + 30))
                    break;
                }
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 736) + 80))(*(_QWORD *)(a1 + 736), v11);
                v10 = 0;
                if (++v8 == (uint64_t *)v9)
                  goto LABEL_22;
              }
              *(_QWORD *)&v74[0] = v11;
              v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 216), v74);
              if (v13 == -1)
                v14 = 0;
              else
                v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, *(_QWORD *)(*(_QWORD *)(a1 + 224) + 16 * v13 + 8));
              sendAllReceiversToInactive(v14);
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 736) + 88))(*(_QWORD *)(a1 + 736), v11);
              ++v8;
            }
            while (v8 != (uint64_t *)v9);
            if ((v10 & 1) == 0)
            {
LABEL_22:
              v73 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 720) + 136) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 720) + 136));
              v15 = *(_QWORD *)(a1 + 720);
              v16 = *(_QWORD *)(*(_QWORD *)(v15 + 112) + 88);
              if (v16)
              {
                LOBYTE(v71[0]) = 0;
                *(_QWORD *)&v74[0] = 0x587ABAC10091B1A0;
                *((_QWORD *)&v74[0] + 1) = "overrides:enablemeshshadows";
                v17 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v16, v74, v71) != 0;
                re::StringID::destroyString((re::StringID *)v74);
                LOBYTE(v8) = v71[0];
                v15 = *(_QWORD *)(a1 + 720);
              }
              else
              {
                v17 = 1;
              }
              (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(v15 + 128) + 16))(v74);
              v18 = v75;
              *(_OWORD *)(a1 + 624) = v74[10];
              *(_OWORD *)(a1 + 640) = v18;
              v19 = v77;
              *(_OWORD *)(a1 + 656) = v76;
              *(_OWORD *)(a1 + 672) = v19;
              v20 = v74[7];
              *(_OWORD *)(a1 + 560) = v74[6];
              *(_OWORD *)(a1 + 576) = v20;
              v21 = v74[9];
              *(_OWORD *)(a1 + 592) = v74[8];
              *(_OWORD *)(a1 + 608) = v21;
              v22 = v74[3];
              *(_OWORD *)(a1 + 496) = v74[2];
              *(_OWORD *)(a1 + 512) = v22;
              v23 = v74[5];
              *(_OWORD *)(a1 + 528) = v74[4];
              *(_OWORD *)(a1 + 544) = v23;
              v24 = v74[1];
              *(_OWORD *)(a1 + 464) = v74[0];
              *(_OWORD *)(a1 + 480) = v24;
              if (v17)
                LOBYTE(v8) = *(_BYTE *)(a1 + 652);
              if (!(_BYTE)v8)
                goto LABEL_36;
              v25 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 408));
              if (!v25 || *(_BYTE *)(v25 + 1656))
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 408));
                v26 = (re::AssetHandle *)(a1 + 432);
                v27 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 432));
                if (v27 && !*(_BYTE *)(v27 + 1656))
                {
LABEL_36:
                  re::ecs2::System::queueToRun((re::ecs2::System *)a1, 0.0);
                  v29 = (re::Scheduler *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
                  if (v29)
                  {
                    v30 = *(_QWORD *)(a1 + 96);
                    if (*((_QWORD *)v29 + 5) > v30)
                      re::Scheduler::enqueueTaskWithDeadline(v29, v30, 0.0);
                  }
                  return;
                }
LABEL_35:
                re::AssetHandle::loadAsync(v26);
                goto LABEL_36;
              }
              v26 = (re::AssetHandle *)(a1 + 432);
              v28 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 432));
              if (!v28 || *(_BYTE *)(v28 + 1656))
                goto LABEL_35;
              (*(void (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 720) + 736) + 64))();
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(*(_QWORD *)(a1 + 720) + 736) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 720) + 736), &v73);
              v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 720) + 736) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 720) + 736));
              v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 720) + 736) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 720) + 736));
              if (!*(_DWORD *)(v31 + 40) || !*(_DWORD *)(v32 + 40))
              {
                v33 = a2[1];
                if (!v33)
                  return;
                v34 = *a2;
                v35 = 8 * (_QWORD)v33;
                do
                {
                  v71[0] = *v34;
                  v36 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 216), v71);
                  if (v36 == -1)
                    v37 = 0;
                  else
                    v37 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, *(_QWORD *)(*(_QWORD *)(a1 + 224) + 16 * v36 + 8));
                  sendAllReceiversToInactive(v37);
                  ++v34;
                  v35 -= 8;
                }
                while (v35);
              }
              v38 = a2[1];
              if (v38)
              {
                v39 = *a2;
                v70 = (uint64_t)&(*a2)[(_QWORD)v38];
                v69 = vdupq_n_s64(1uLL);
                while (1)
                {
                  v40 = *v39;
                  v41 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*v39 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                  if (v41)
                    v42 = *(_QWORD *)(v41 + 24);
                  else
                    v42 = 0;
                  v43 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)v74);
                  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v43);
                  if ((_DWORD)isStatisticCollectionEnabled)
                  {
                    v45 = re::profilerThreadContext(isStatisticCollectionEnabled);
                    v46 = *(int64x2_t **)(v45 + 152);
                    if (v46)
                    {
                      v47 = v46[428].u64[0];
                      if (v47 >= v42)
                        v47 = v42;
                      v46[428].i64[0] = v47;
                      v48 = v46[428].u64[1];
                      if (v48 <= v42)
                        v48 = v42;
                      v46[428].i64[1] = v48;
                      v49.i64[1] = v69.i64[1];
                      v49.i64[0] = v42;
                      v46[429] = vaddq_s64(v46[429], v49);
                      *(_BYTE *)(v45 + 184) = 0;
                    }
                  }
                  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v71, 3081, a1);
                  v73 = v40;
                  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 224)
                                  + 16
                                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 216), &v73)+ 8);
                  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 328, v50);
                  v51 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, v50);
                  v52 = *(_QWORD *)(*v51 + 224);
                  v53 = v51[3];
                  v54 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v51[2] + 8, v53);
                  if (*(_DWORD *)(v54 + 40))
                    v55 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v52 + 24))(v52, v72, v51, v53, v54, 0);
                  else
                    v55 = 0;
                  v56 = v51[5];
                  v57 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v51[2] + 8, v56);
                  if (*(_DWORD *)(v57 + 40))
                    v55 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, v72, v51, v56, v57, 0);
                  v58 = v51[6];
                  v59 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v51[2] + 8, v58);
                  if (*(_DWORD *)(v59 + 40))
                    break;
                  if (v55)
                    goto LABEL_66;
LABEL_67:
                  if (*(_BYTE *)(a1 + 392))
                  {
                    v60 = *(_QWORD *)(a1 + 336);
                    v61 = *(_DWORD *)(a1 + 344);
                    if (v60 < 0xB)
                    {
                      v64 = (uint64_t *)(a1 + 352);
                      if ((v61 & 1) == 0)
                        v64 = *(uint64_t **)(a1 + 360);
                      if (!v60)
                        goto LABEL_85;
                      v65 = 0;
                      v66 = 8 * v60;
                      do
                      {
                        v67 = *v64++;
                        v65 |= v67;
                        v66 -= 8;
                      }
                      while (v66);
                      if (!v65)
                        goto LABEL_85;
                    }
                    else
                    {
                      v62 = (_QWORD *)(a1 + 352);
                      if ((v61 & 1) == 0)
                        v62 = *(_QWORD **)(a1 + 360);
                      v63 = 8 * v60;
                      while (!*v62)
                      {
                        ++v62;
                        v63 -= 8;
                        if (!v63)
                          goto LABEL_85;
                      }
                    }
                    v68 = *(re::ecs2::System **)(a1 + 376);
                    if (!*((_BYTE *)v68 + 86))
                      re::ecs2::System::queueToRun(v68, 0.0);
                  }
LABEL_85:
                  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v71);
                  re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v74);
                  if (++v39 == (uint64_t *)v70)
                    return;
                }
                if (((v55 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v52 + 40))(v52, v72, v51, v58, v59, 0)) & 1) == 0)goto LABEL_67;
LABEL_66:
                re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 328, v50);
                goto LABEL_67;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t re::ecs2::ProjectiveShadowReceiverStateImpl::dependsOnComponents(re::ecs2::ProjectiveShadowReceiverStateImpl *this)
{
  return *((_QWORD *)this + 39);
}

void re::ecs2::ProjectiveShadowReceiverSystem::~ProjectiveShadowReceiverSystem(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 87);
  if (v2)
  {
    if (*((_QWORD *)this + 88))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 89));
      *((_QWORD *)this + 88) = 0;
      *((_QWORD *)this + 89) = 0;
    }
    *((_QWORD *)this + 87) = 0;
  }
  re::AssetHandle::~AssetHandle((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 432));
  re::AssetHandle::~AssetHandle((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 408));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 87);
  if (v2)
  {
    if (*((_QWORD *)this + 88))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 89));
      *((_QWORD *)this + 88) = 0;
      *((_QWORD *)this + 89) = 0;
    }
    *((_QWORD *)this + 87) = 0;
  }
  re::AssetHandle::~AssetHandle((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 432));
  re::AssetHandle::~AssetHandle((re::ecs2::ProjectiveShadowReceiverSystem *)((char *)this + 408));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ProjectiveShadowReceiverSystem::typeInfo(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ProjectiveShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::DebugSettingsManager::getWithErrorCode<BOOL>(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 112))
    return 3;
  if (!a3)
    return 4;
  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = re::DebugSettingsManager::contains<BOOL>(a1, a2);
  if (!(_DWORD)v7)
  {
    v8 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a1)
    {
      v9 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if ((_DWORD)v10 != 0x7FFFFFFF)
      {
        v11 = *(_QWORD *)(a1 + 16);
        v8 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((_QWORD *)(v11 + 40 * v10 + 8), a2))
        {
          v10 = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        v8 = v10;
      }
    }
LABEL_13:
    v12 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v12 + 40 * v8 + 24))
    {
      v13 = *(_QWORD *)(v12 + 40 * v8 + 28);
      if ((v13 & 0xFFFFFFFF00000000) == 0x200000000)
        *a3 = v13;
      v7 = (v13 & 0xFFFFFFFF00000000) != 0x200000000;
    }
    else
    {
      v7 = 5;
    }
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::DebugSettingsManager::contains<BOOL>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 112))
    return 3;
  v2 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1, a2);
  if (!v2)
    return 1;
  if (*(_BYTE *)v2 && *(_DWORD *)(v2 + 8) != 2)
    return 2;
  return 0;
}

void re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,unsigned int,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _BYTE v25[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v25, v13, v12);
          v15 = *(_OWORD *)v25;
          *(_OWORD *)v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v25[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v25[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,unsigned int,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

_QWORD *re::DynamicArray<re::ShadowClusterInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ShadowClusterInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 96 * v9;
        v11 = (_QWORD *)(v8 + 80);
        v12 = v7;
        do
        {
          v13 = *((_OWORD *)v11 - 5);
          v14 = *((_OWORD *)v11 - 3);
          *((_OWORD *)v12 + 1) = *((_OWORD *)v11 - 4);
          *((_OWORD *)v12 + 2) = v14;
          *(_OWORD *)v12 = v13;
          v12[10] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 18) = 0;
          v15 = *(v11 - 3);
          v12[6] = *(v11 - 4);
          *(v11 - 4) = 0;
          v12[7] = v15;
          *(v11 - 3) = 0;
          v16 = v12[8];
          v12[8] = *(v11 - 2);
          *(v11 - 2) = v16;
          v17 = v12[10];
          v12[10] = *v11;
          *v11 = v17;
          ++*((_DWORD *)v11 - 2);
          ++*((_DWORD *)v12 + 18);
          v18 = *(v11 - 4);
          if (v18)
          {
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
            *v11 = 0;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            ++*((_DWORD *)v11 - 2);
          }
          v11 += 12;
          v12 += 12;
          v10 -= 96;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ShadowClusterInfo>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 96 * v4;
        v6 = (_QWORD *)(v3 + 80);
        do
        {
          v7 = *(v6 - 4);
          if (v7)
          {
            if (*v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v6 = 0;
            *(v6 - 3) = 0;
            *(v6 - 2) = 0;
            *(v6 - 4) = 0;
            ++*((_DWORD *)v6 - 2);
          }
          v6 += 12;
          v5 -= 96;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ShadowClusterInfo>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ShadowClusterInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ShadowClusterInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::add(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::addUninitialized(a1);
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v6;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 64) = 0;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v7;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v8 = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v8;
  v9 = *(_QWORD *)(result + 72);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v9;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 64);
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 88) = v10;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v11 = *(_QWORD *)(result + 96);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v11;
  v12 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v12;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 104);
  return result;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 480, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_225668E34()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::deinit(*result);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5EA40;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5EA40;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ProjectiveShadowBuilder::Input::PerSceneData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](a1, i);
      v5 = v4[10];
      if (v5)
      {
        if (v4[14])
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v4[14] = 0;
        v4[11] = 0;
        v4[12] = 0;
        v4[10] = 0;
        ++*((_DWORD *)v4 + 26);
      }
      re::DynamicArray<re::ShadowClusterInfo>::deinit((uint64_t)(v4 + 5));
      if (*v4)
      {
        if (v4[4])
          (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4);
        v4[4] = 0;
        v4[1] = 0;
        v4[2] = 0;
        *v4 = 0;
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 120 * (a2 & 3);
}

uint64_t re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 120 * (v2 & 3);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5EA98;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5EAF0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5EB48;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5EBA0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5EA98;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5EAF0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5EB48;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5EBA0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EA98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EA98;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EAF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EAF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EB48;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EB48;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EBA0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EBA0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::allocInfo_WorldScopeComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_207);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_207))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C470, 0);
    *(uint64_t *)((char *)&qword_25410C480 + 6) = 0;
    qword_25410C480 = 0;
    qword_25410C490 = 0;
    qword_25410C498 = 0xFFFFFFFFLL;
    qword_25410C470 = (uint64_t)&off_24ED7DAA8;
    qword_25410C4A0 = (uint64_t)"WorldScopeComponent";
    dword_25410C4A8 = 0;
    unk_25410C4B0 = 0u;
    unk_25410C4C0 = 0u;
    unk_25410C4D0 = 0u;
    qword_25410C4E0 = 0;
    __cxa_guard_release(&_MergedGlobals_207);
  }
  return &qword_25410C470;
}

void re::ecs2::initInfo_WorldScopeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x4CD7DED8B5FCA36;
  v10[1] = "WorldScopeComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C468);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C468);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C460 = v8;
      __cxa_guard_release(&qword_25410C468);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410C460;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::WorldScopeComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::WorldScopeComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WorldScopeComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WorldScopeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::WorldScopeComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57388;
}

void *re::internal::defaultDestruct<re::ecs2::WorldScopeComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::WorldScopeComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57388;
}

void *re::internal::defaultDestructV2<re::ecs2::WorldScopeComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_WorldScopeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WorldScopeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WorldScopeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WorldScopeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WorldScopeComponent>, this);
}

uint64_t re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  int v49;
  uint64_t v50;

  v4 = atomic_load((unsigned __int8 *)&qword_25410C4F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25410C4F8))
  {
    qword_25410C4F0 = re::hashString((re *)"EnableTriPlanarVideoSupport", v34);
    __cxa_guard_release(&qword_25410C4F8);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_25410C508);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25410C508))
  {
    qword_25410C500 = re::hashString((re *)"EnableInverseToneMapping", v35);
    __cxa_guard_release(&qword_25410C508);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_25410C518);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25410C518))
  {
    qword_25410C510 = re::hashString((re *)"EnableScreenVideoLetterBoxPadding", v36);
    __cxa_guard_release(&qword_25410C518);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25410C528);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25410C528))
  {
    qword_25410C520 = re::hashString((re *)"EnableVideoColorSpaceTransformation", v37);
    __cxa_guard_release(&qword_25410C528);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_25410C538);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25410C538))
  {
    qword_25410C530 = re::hashString((re *)"EnableVideoColorTransformation", v38);
    __cxa_guard_release(&qword_25410C538);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25410C548);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25410C548))
  {
    qword_25410C540 = re::hashString((re *)"VideoSamplingMode", v39);
    __cxa_guard_release(&qword_25410C548);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_25410C558);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25410C558))
  {
    qword_25410C550 = re::hashString((re *)"EnableVideoColorInvert", v40);
    __cxa_guard_release(&qword_25410C558);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_25410C568);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25410C568))
  {
    qword_25410C560 = re::hashString((re *)"PerceptualBlendingMode", v41);
    __cxa_guard_release(&qword_25410C568);
  }
  v12 = atomic_load((unsigned __int8 *)&qword_25410C578);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25410C578))
  {
    qword_25410C570 = re::hashString((re *)"PortalClippingMode", v42);
    __cxa_guard_release(&qword_25410C578);
  }
  v13 = atomic_load((unsigned __int8 *)&qword_25410C588);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25410C588))
  {
    qword_25410C580 = re::hashString((re *)"EnableAREnvProbe", v43);
    __cxa_guard_release(&qword_25410C588);
  }
  v14 = atomic_load((unsigned __int8 *)&qword_25410C598);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25410C598))
  {
    qword_25410C590 = re::hashString((re *)"EnableVirtualEnvironmentProbes", v44);
    __cxa_guard_release(&qword_25410C598);
  }
  v15 = atomic_load((unsigned __int8 *)&qword_25410C5A8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25410C5A8))
  {
    qword_25410C5A0 = re::hashString((re *)"EnableIBLRotation", v45);
    __cxa_guard_release(&qword_25410C5A8);
  }
  v16 = atomic_load((unsigned __int8 *)&qword_25410C5B8);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25410C5B8))
  {
    qword_25410C5B0 = re::hashString((re *)"EnableIBLBlending", v46);
    __cxa_guard_release(&qword_25410C5B8);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_25410C5C8);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25410C5C8))
  {
    qword_25410C5C0 = re::hashString((re *)"EnableShaderGraphLightSpill", v47);
    __cxa_guard_release(&qword_25410C5C8);
  }
  v18 = atomic_load((unsigned __int8 *)&qword_25410C5D8);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_25410C5D8))
  {
    qword_25410C5D0 = re::hashString((re *)"EnableVideoLegacyMode", v48);
    __cxa_guard_release(&qword_25410C5D8);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((_QWORD *)a1, *(_QWORD *)(a2 + 56), 27);
  v50 = qword_25410C560;
  v49 = *(_DWORD *)(a2 + 24);
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
  v19 = *(_QWORD *)(a2 + 8);
  if (v19)
  {
    v50 = qword_25410C4F0;
    v49 = *(unsigned __int8 *)(v19 + 204);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C500;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 207);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C510;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 217);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C520;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 205);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C530;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 208);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C540;
    v49 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 212);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C550;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 285);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C5D0;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 216);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
  }
  if (*(float *)(a2 + 44) <= 0.0)
  {
    v50 = qword_25410C580;
    v49 = 0;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C590;
    v49 = 0;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v50 = qword_25410C570;
    v49 = 2;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
  }
  v20 = *(_BYTE **)(a2 + 16);
  if (v20)
  {
    v50 = qword_25410C5A0;
    if (v20[1208])
    {
      v21 = 1;
    }
    else if (v20[136])
    {
      v21 = v20[1209];
    }
    else
    {
      v21 = 0;
    }
    v49 = v21;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
    v50 = qword_25410C5B0;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 136);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v22 = *(_QWORD *)(a2 + 32);
    if (v22)
    {
      v23 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v22 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      LODWORD(v22) = v23 && *(float *)(v23 + 276) > 0.0;
    }
    v50 = qword_25410C5C0;
    v49 = v22;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
  }
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v25 = result;
    v26 = *(unsigned int *)(result + 64);
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = (int *)(*(_QWORD *)(result + 48) + 8);
      while (1)
      {
        v29 = *v28;
        v28 += 8;
        if (v29 < 0)
          break;
        if (v26 == ++v27)
        {
          LODWORD(v27) = *(_DWORD *)(result + 64);
          break;
        }
      }
    }
    else
    {
      LODWORD(v27) = 0;
    }
    if ((_DWORD)v26 != (_DWORD)v27)
    {
      v30 = v27;
      do
      {
        v31 = *(_QWORD *)(v25 + 48) + 32 * v30;
        v50 = *(_QWORD *)(v31 + 16);
        v49 = *(_DWORD *)(v31 + 24);
        result = re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)a1, &v50, &v49);
        if (*(_DWORD *)(v25 + 64) <= (v27 + 1))
          v32 = v27 + 1;
        else
          v32 = *(_DWORD *)(v25 + 64);
        v33 = v27;
        while (1)
        {
          v30 = (v33 + 1);
          if (v32 - 1 == v33)
            break;
          ++v33;
          LODWORD(v27) = v30;
          if ((*(_DWORD *)(*(_QWORD *)(v25 + 48) + 32 * v30 + 8) & 0x80000000) != 0)
            goto LABEL_53;
        }
        LODWORD(v27) = v32;
LABEL_53:
        ;
      }
      while ((_DWORD)v26 != (_DWORD)v27);
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

uint64_t re::ecs2::MeshComponentHelper::techniqueMappingOverlayNameHashForMeshScene(re::ecs2::MeshComponentHelper *this, float a2)
{
  int v2;
  unsigned __int8 v4;
  uint64_t *v5;
  const char *v7;
  char v8;
  char v9[2];

  v2 = (int)this;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C608);
  if ((v4 & 1) == 0)
  {
    this = (re::ecs2::MeshComponentHelper *)__cxa_guard_acquire(&qword_25410C608);
    if ((_DWORD)this)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableFadeTechniqueMappingOverride", v7, v9);
      if (v9[0])
        v8 = v9[1] ^ 1;
      else
        v8 = 1;
      _MergedGlobals_208 = v8;
      __cxa_guard_release(&qword_25410C608);
    }
  }
  if (_MergedGlobals_208 && (re::useDitherFade(this) & 1) == 0)
  {
    if (a2 < 1.0 || (v2 & 1) != 0)
      goto LABEL_5;
  }
  else if (v2)
  {
LABEL_5:
    if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
      dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
    v5 = &re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
    return *v5;
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  v5 = &re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  return *v5;
}

uint64_t re::ecs2::containsShaderGraphMaterialWithLightSpillNode(uint64_t this, const re::ecs2::MeshComponent *a2)
{
  re::MaterialAsset *v2;
  re::MaterialAsset *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!this)
    return this;
  v2 = a2;
  v3 = (const re::ecs2::MeshComponent *)((char *)a2 + 24 * this);
  while (1)
  {
    v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v2);
    if (!v4)
      goto LABEL_16;
    v5 = *(_QWORD **)(v4 + 1664);
    if (!v5 || *(_BYTE *)(v4 + 1730) != 7)
      goto LABEL_16;
    v6 = v5[22];
    if (v6)
      break;
LABEL_11:
    v9 = v5[25];
    if (v9)
    {
      v10 = v5[26];
      v11 = 144 * v9;
      v12 = v10 + 48;
      while (!*(_QWORD *)v12 || (objc_msgSend(*(id *)(*(_QWORD *)v12 + 24), "hasConnectedLightSpillNodes") & 1) == 0)
      {
        v12 += 144;
        v11 -= 144;
        if (!v11)
          goto LABEL_16;
      }
      return 1;
    }
LABEL_16:
    v2 = (re::MaterialAsset *)((char *)v2 + 24);
    if (v2 == v3)
      return 0;
  }
  v7 = 144 * v6;
  v8 = v5[23] + 48;
  while (!*(_QWORD *)v8 || (objc_msgSend(*(id *)(*(_QWORD *)v8 + 24), "hasConnectedLightSpillNodes") & 1) == 0)
  {
    v8 += 144;
    v7 -= 144;
    if (!v7)
      goto LABEL_11;
  }
  return 1;
}

uint64_t re::ecs2::containsShaderGraphMaterialWithModelPositionOffset(re::ecs2 *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v2;
  re::MaterialAsset *v3;
  re::MaterialAsset *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return 0;
  v3 = (re::MaterialAsset *)*((_QWORD *)this + 11);
  v4 = (re::MaterialAsset *)((char *)v3 + 24 * v2);
  while (1)
  {
    v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v3);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 1664);
      if (v6)
      {
        if (*(_BYTE *)(v5 + 1730) == 7)
        {
          v7 = *(_QWORD *)(v6 + 176);
          if (v7)
            break;
        }
      }
    }
LABEL_11:
    v3 = (re::MaterialAsset *)((char *)v3 + 24);
    if (v3 == v4)
      return 0;
  }
  v8 = 144 * v7;
  v9 = *(_QWORD *)(v6 + 184) + 48;
  while (!*(_QWORD *)v9
       || (re::sg::Material::hasGeometryModifierWithModelPositionOffset((id *)(*(_QWORD *)v9 + 24)) & 1) == 0)
  {
    v9 += 144;
    v8 -= 144;
    if (!v8)
      goto LABEL_11;
  }
  return 1;
}

void re::ecs2::fetchBuffers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, _anonymous_namespace_ *a7, _BYTE *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  re::TextureAsset *v27;
  uint64_t v28;
  re::TextureHandle *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  re::TextureHandle *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD *v43;
  BOOL v49;
  uint64_t v50;
  _QWORD v53[4];
  BOOL v54;
  _BYTE v55[16];
  id v56[7];
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[6];
  _BYTE v68[12];
  __int16 v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v8 = a6;
    v9 = a4;
    v10 = a3;
    v11 = 0;
    v50 = a2;
    while (1)
    {
      v12 = *(_QWORD *)(v10 + 16);
      if (v12 <= v11)
        goto LABEL_47;
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v11);
      v14 = *(_QWORD **)(*(_QWORD *)(v10 + 32) + 8 * v11);
      if (v14)
        v15 = v14 + 1;
      if (!v13 || *(_QWORD *)(v9 + 8) == 0)
        break;
      v17 = *(_QWORD *)(v9 + 16);
      v18 = *(_QWORD *)(v17 + 128);
      v62 = 0;
      v63 = &v62;
      v64 = 0x2000000000;
      v65 = 0;
      v58 = 0;
      v59 = &v58;
      v60 = 0x2000000000;
      v61 = 0;
      v56[1] = (id)MEMORY[0x24BDAC760];
      v56[2] = (id)0x40000000;
      v56[3] = ___ZN2re4ecs212fetchBuffersERKNS_13RenderManagerERKNS_12DynamicArrayIP10DRBuffer_sEERKNS4_INS0_21DirectParameterHandleEEERKNS_10FixedArrayINS_14LinkedFunctionEEERNS_11BucketArrayIN2NS9SharedPtrIN3MTL6BufferEEELm8EEERNSE_IPSN_EERNS4_INS_13TextureHandleEEERb_block_invoke;
      v56[4] = &unk_24ED5EBF0;
      v56[5] = &v62;
      v49 = v18 != 0;
      v57 = v18 != 0;
      v56[6] = &v58;
      v19 = (_anonymous_namespace_ *)DRBufferRead();
      if (v18)
      {
        v8 = v14[7];
        memset(&v67[2], 0, 24);
        v20 = v59[3];
        v67[0] = v63[3];
        v67[1] = v20;
        v67[3] = v8;
        if (v8)
        {
          if (v8 >> 59)
            goto LABEL_50;
          v67[4] = v22;
          if (v22)
          {
            v24 = v8 - 1;
            if (v8 != 1)
            {
              do
              {
                *v22 = 0;
                v22[1] = 0;
                v22 += 4;
                --v24;
              }
              while (v24);
            }
            v12 = 0;
            *v22 = 0;
            v22[1] = 0;
            while (1)
            {
              v25 = v14[7];
              if (v25 <= v12)
                break;
              v25 = v67[3];
              if (v67[3] <= v12)
                goto LABEL_46;
              v26 = *(_QWORD *)(v17 + 128);
              if (v26)
              {
                v27 = (re::TextureAsset *)(v14[9] + 32 * v12);
                v28 = v67[4];
                v29 = (re::TextureHandle *)(v67[4] + 32 * v12);
                v30 = *((_QWORD *)v27 + 3);
                v31 = *(_QWORD *)(v17 + 136);
                while (*(_QWORD *)(v31 + 8) != v30)
                {
                  v31 += 16;
                  if (!--v26)
                    goto LABEL_37;
                }
                v32 = re::AssetHandle::loadedAsset<re::TextureAsset>(v27);
                v33 = *(_DWORD *)v31;
                if (v32 && *(_DWORD *)(v32 + 380) == v33)
                {
                  v34 = (re::TextureHandle *)(v32 + 48);
                  re::TextureHandle::TextureHandle((re::TextureHandle *)v55, (const re::TextureHandle *)(v32 + 48));
                  v35 = *(_DWORD *)v31;
                  re::TextureHandle::operator=(v29, (re::TextureHandle *)v55);
                  v36 = v28 + 32 * v12;
                  *(_BYTE *)(v36 + 28) = 0;
                  *(_DWORD *)(v36 + 24) = v35;
                  *(_QWORD *)(v36 + 16) = v30;
                  re::TextureHandle::invalidate((re::TextureHandle *)v55);
                  re::DynamicArray<re::TextureHandle>::add(a7, v34);
                }
                else
                {
                  re::TextureManager::stockTextureForType(*(re **)(a1 + 64), v33, &v75);
                  v56[0] = (id)v75;
                  v37 = *(_DWORD *)v31;
                  NS::SharedPtr<MTL::Texture>::operator=((void **)v29, v56);
                  v38 = v28 + 32 * v12;
                  *(_BYTE *)(v38 + 28) = 1;
                  *(_DWORD *)(v38 + 24) = v37;
                  *(_QWORD *)(v38 + 16) = v30;
                  if (v56[0])
                  {

                    v56[0] = 0;
                  }
                  *a8 = 1;
                  if ((_QWORD)v75)

                }
              }
LABEL_37:
              if (++v12 == v8)
                goto LABEL_38;
            }
            v66 = 0;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v68 = 136315906;
            *(_QWORD *)&v68[4] = "operator[]";
            v69 = 1024;
            v70 = 789;
            v71 = 2048;
            v72 = v12;
            v73 = 2048;
            v74 = v25;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_46:
            v66 = 0;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v68 = 136315906;
            *(_QWORD *)&v68[4] = "operator[]";
            v69 = 1024;
            v70 = 468;
            v71 = 2048;
            v72 = v12;
            v73 = 2048;
            v74 = v25;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_47:
            *(_QWORD *)v68 = 0;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v67[0]) = 136315906;
            *(_QWORD *)((char *)v67 + 4) = "operator[]";
            WORD2(v67[1]) = 1024;
            *(_DWORD *)((char *)&v67[1] + 6) = 797;
            WORD1(v67[2]) = 2048;
            *(_QWORD *)((char *)&v67[2] + 4) = v11;
            WORD2(v67[3]) = 2048;
            *(_QWORD *)((char *)&v67[3] + 6) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_48:
            *(_QWORD *)v68 = 0;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v67[0]) = 136315906;
            *(_QWORD *)((char *)v67 + 4) = "operator[]";
            WORD2(v67[1]) = 1024;
            *(_DWORD *)((char *)&v67[1] + 6) = 468;
            WORD1(v67[2]) = 2048;
            *(_QWORD *)((char *)&v67[2] + 4) = v11;
            WORD2(v67[3]) = 2048;
            *(_QWORD *)((char *)&v67[3] + 6) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_49:
            *(_QWORD *)v68 = 0;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v67[0]) = 136315906;
            *(_QWORD *)((char *)v67 + 4) = "operator[]";
            WORD2(v67[1]) = 1024;
            *(_DWORD *)((char *)&v67[1] + 6) = 468;
            WORD1(v67[2]) = 2048;
            *(_QWORD *)((char *)&v67[2] + 4) = v11;
            WORD2(v67[3]) = 2048;
            *(_QWORD *)((char *)&v67[3] + 6) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_50:
            re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, v8);
            _os_crash();
            __break(1u);
          }
          re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
LABEL_38:
        re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::add(*(_QWORD *)(a1 + 24) + 1192, v67);
        re::FixedArray<re::ArgumentBufferTextureRecord>::deinit(&v67[2]);
        v8 = a6;
      }
      v39 = *(void **)(a1 + 184);
      v40 = v63[3];
      v41 = v59[3];
      v53[0] = MEMORY[0x24BDAC760];
      v53[1] = 0x40000000;
      v53[2] = ___ZN2re4ecs212fetchBuffersERKNS_13RenderManagerERKNS_12DynamicArrayIP10DRBuffer_sEERKNS4_INS0_21DirectParameterHandleEEERKNS_10FixedArrayINS_14LinkedFunctionEEERNS_11BucketArrayIN2NS9SharedPtrIN3MTL6BufferEEELm8EEERNSE_IPSN_EERNS4_INS_13TextureHandleEEERb_block_invoke_2;
      v53[3] = &__block_descriptor_tmp_18;
      v54 = v49;
      v42 = objc_msgSend(v39, sel_newBufferWithBytesNoCopy_length_options_deallocator_, v40, v41, 0, v53);
      v43 = (_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::addUninitialized(a5);
      *v43 = v42;
      v12 = *(_QWORD *)(v8 + 8);
      if (v12 <= v11)
        goto LABEL_49;
      *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * v11) = v42;
      if (v42)

      _Block_object_dispose(&v58, 8);
      _Block_object_dispose(&v62, 8);
      v10 = a3;
      v9 = a4;
      if (v14)
        goto LABEL_13;
LABEL_14:
      ++v11;
      a2 = v50;
      if (v11 >= *(_QWORD *)(v50 + 16))
        return;
    }
    v12 = *(_QWORD *)(v8 + 8);
    if (v12 <= v11)
      goto LABEL_48;
    *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * v11) = 0;
    if (!v14)
      goto LABEL_14;
LABEL_13:

    goto LABEL_14;
  }
}

uint64_t ___ZN2re4ecs212fetchBuffersERKNS_13RenderManagerERKNS_12DynamicArrayIP10DRBuffer_sEERKNS4_INS0_21DirectParameterHandleEEERKNS_10FixedArrayINS_14LinkedFunctionEEERNS_11BucketArrayIN2NS9SharedPtrIN3MTL6BufferEEELm8EEERNSE_IPSN_EERNS4_INS_13TextureHandleEEERb_block_invoke(uint64_t result, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  size_t *v8;
  _QWORD *v9;

  v5 = result;
  if (!*(_BYTE *)(result + 48))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
LABEL_8:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24) = a3;
    return result;
  }
  v6 = re::globalAllocators((re *)result);
  if (!a3)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v7 = a3 + 16;
  if (a3 < 0xFFFFFFFFFFFFFFF0)
  {
    v8 = (size_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6[2] + 32))(v6[2], v7, 0);
    v9 = v8 + 2;
    *v8 = a3;
    v8[1] = (size_t)v8;
    bzero(v8 + 2, a3);
LABEL_7:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24) = v9;
    result = (uint64_t)memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24), a2, a3);
    goto LABEL_8;
  }
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 1, a3);
  result = _os_crash();
  __break(1u);
  return result;
}

re::TextureHandle *re::DynamicArray<re::TextureHandle>::add(_anonymous_namespace_ *this, re::TextureHandle *a2)
{
  unint64_t v4;
  re::TextureHandle *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TextureHandle>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::TextureHandle::TextureHandle((re::TextureHandle *)(*((_QWORD *)this + 4) + 16 * v4), a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::ecs2::MeshComponent::updateMaterialData(re::ecs2::MeshComponent *this, const re::ecs2::MeshSystem *a2, const re::MeshAsset *a3, re::ecs2::Entity *a4, const re::DirectResourceAssetTracker *a5)
{
  size_t v10;
  uint64_t v11;
  re::MeshManager *v12;
  uint64_t v13;
  void *v14;
  re *inited;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  const re::AssetHandle *v27;
  re::MaterialAsset *v28;
  _anonymous_namespace_ *v29;
  const re::ecs2::Entity *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  int v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char isUnderHighFidelityVisualProxyTree;
  _QWORD *v63;
  _anonymous_namespace_ *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _anonymous_namespace_ *v69;
  __n128 v70;
  void *v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  re::ecs2::Entity *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  _anonymous_namespace_ *v93;
  uint64_t *v94;
  unint64_t v95;
  _anonymous_namespace_ *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _anonymous_namespace_ *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t DebugTechnique;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  re::ecs2::Entity *v119;
  const re::MaterialInstance *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  re::ecs2::VisualProxyCaptureHelper *v134;
  re::ecs2::VisualProxyCaptureHelper *v135;
  re::ecs2::Entity *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  re::MaterialParameterTable *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  re::MaterialAsset *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  const __int16 *v159;
  int16x8_t *v160;
  int16x8_t v161;
  int v162;
  uint16x8_t v163;
  _anonymous_namespace_ *v164;
  _anonymous_namespace_ *v165;
  _anonymous_namespace_ *v166;
  _anonymous_namespace_ *v167;
  _anonymous_namespace_ *v168;
  _anonymous_namespace_ *v169;
  _anonymous_namespace_ *v170;
  _anonymous_namespace_ *v171;
  _anonymous_namespace_ *v172;
  _anonymous_namespace_ *v173;
  const char *v174;
  id v175;
  re::DirectResourceAssetTracker *v176;
  re::ecs2::EntityComponentCollection *v177;
  re::ecs2::EntityComponentCollection *v178;
  int v179;
  re::ecs2::VisualProxyCaptureHelper *v180;
  re::RenderManager *v181;
  StringID v182;
  _QWORD v183[2];
  StringID v184;
  _QWORD v185[2];
  StringID v186;
  _QWORD v187[2];
  StringID v188;
  _QWORD v189[2];
  StringID v190;
  _QWORD v191[2];
  StringID v192;
  _QWORD v193[2];
  StringID v194;
  _QWORD v195[2];
  StringID v196;
  _QWORD v197[2];
  StringID v198;
  _QWORD v199[2];
  StringID v200;
  _QWORD v201[2];
  _anonymous_namespace_ *v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE v205[24];
  id location;
  uint64_t v207;
  _BYTE v208[28];
  __int16 v209;
  _BYTE v210[10];
  int v211;
  const char *v212;
  __int16 v213;
  _BYTE v214[14];
  __int16 v215;
  _BYTE v216[10];
  _BYTE v217[18];
  __int16 v218;
  size_t v219;
  __int16 v220;
  const re::DirectResourceAssetTracker *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  v181 = (re::RenderManager *)*((_QWORD *)a2 + 14);
  v10 = (size_t)this + 224;
  v11 = *((_QWORD *)this + 29);
  if (v11)
    v179 = *(unsigned __int8 *)(v11 + 260) != 0;
  else
    v179 = 0;
  v12 = (re::MeshManager *)*((_QWORD *)v181 + 4);
  v13 = *((_QWORD *)v181 + 17);
  if (v13)
    v14 = (void *)(v13 + 8);
  else
    v14 = 0;
  inited = (re *)objc_initWeak(&location, v14);
  v16 = re::globalAllocators(inited);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 512, 8);
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_OWORD *)(v17 + 160) = 0u;
  *(_OWORD *)(v17 + 176) = 0u;
  *(_OWORD *)(v17 + 192) = 0u;
  *(_OWORD *)(v17 + 208) = 0u;
  *(_OWORD *)(v17 + 224) = 0u;
  *(_OWORD *)(v17 + 240) = 0u;
  *(_OWORD *)(v17 + 256) = 0u;
  *(_OWORD *)(v17 + 272) = 0u;
  *(_OWORD *)(v17 + 288) = 0u;
  *(_OWORD *)(v17 + 304) = 0u;
  *(_OWORD *)(v17 + 320) = 0u;
  *(_OWORD *)(v17 + 336) = 0u;
  *(_OWORD *)(v17 + 352) = 0u;
  *(_OWORD *)(v17 + 368) = 0u;
  *(_OWORD *)(v17 + 384) = 0u;
  *(_OWORD *)(v17 + 400) = 0u;
  *(_OWORD *)(v17 + 416) = 0u;
  *(_OWORD *)(v17 + 432) = 0u;
  *(_OWORD *)(v17 + 448) = 0u;
  *(_OWORD *)(v17 + 464) = 0u;
  *(_OWORD *)(v17 + 480) = 0u;
  *(_OWORD *)(v17 + 496) = 0u;
  *(_DWORD *)(v17 + 280) = 1;
  *(_QWORD *)(v17 + 296) = 0;
  *(_QWORD *)(v17 + 304) = 0;
  *(_QWORD *)(v17 + 288) = 0;
  *(_DWORD *)(v17 + 312) = 0;
  *(_OWORD *)(v17 + 320) = 0u;
  *(_OWORD *)(v17 + 336) = 0u;
  *(_QWORD *)(v17 + 352) = 0;
  *(_DWORD *)(v17 + 360) = 1;
  *(_QWORD *)(v17 + 376) = 0;
  *(_QWORD *)(v17 + 384) = 0;
  *(_QWORD *)(v17 + 368) = 0;
  *(_DWORD *)(v17 + 392) = 0;
  *(_QWORD *)(v17 + 400) = 0;
  *(_QWORD *)(v17 + 408) = 0;
  *(_DWORD *)(v17 + 416) = 1;
  *(_QWORD *)(v17 + 424) = 0;
  *(_QWORD *)(v17 + 432) = 0;
  *(_DWORD *)(v17 + 448) = 0;
  *(_QWORD *)(v17 + 440) = 0;
  *(_QWORD *)(v17 + 456) = 0;
  *(_QWORD *)(v17 + 464) = 0;
  *(_DWORD *)(v17 + 472) = 1;
  *(_QWORD *)(v17 + 480) = 0;
  *(_QWORD *)(v17 + 488) = 0;
  *(_DWORD *)(v17 + 504) = 0;
  *(_QWORD *)(v17 + 496) = 0;
  *(_QWORD *)&v224 = 0;
  v222 = 0u;
  v223 = 0u;
  *((_QWORD *)&v223 + 1) = re::globalAllocators((re *)v17)[2];
  *(_QWORD *)&v224 = 0;
  re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset((id *)v10, &location, (void *)v17, (uint64_t)&v222);
  if ((_QWORD)v224)
  {
    (**(void (***)(_QWORD))v224)(v224);
    if ((__int128 *)v224 != &v222)
      (*(void (**)(_QWORD))(**((_QWORD **)&v223 + 1) + 40))(*((_QWORD *)&v223 + 1));
  }
  objc_destroyWeak(&location);
  location = 0;
  v18 = *((_QWORD *)a2 + 80);
  v180 = a4;
  if (v18 && (*((_BYTE *)a4 + 288) & 0x40) != 0)
  {
    v28 = (re::MaterialAsset *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 80))(v18);
    re::ecs2::MeshComponentHelper::overrideMaterials((uint64_t)a3, v12, v28, (uint64_t *)(*((_QWORD *)this + 29) + 96), (uint64_t *)(*((_QWORD *)this + 29) + 144), (_QWORD *)(*((_QWORD *)this + 29) + 344));
    goto LABEL_131;
  }
  v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v19)
    goto LABEL_26;
  if (*(_BYTE *)(v19 + 42) == 2)
  {
    v20 = *((_QWORD *)this + 9);
    if (v20)
    {
      v21 = *((_QWORD *)a2 + 21);
      v22 = (uint64_t *)(*((_QWORD *)this + 11) + 8);
      v23 = 24 * v20 - 24;
      do
      {
        v25 = *v22;
        v22 += 3;
        v24 = v25;
        v26 = v25 != v21 || v23 == 0;
        v23 -= 24;
      }
      while (!v26);
      if (v24 != v21)
        goto LABEL_26;
    }
    re::DynamicArray<re::AssetHandle>::clear((re::ecs2::MeshComponent *)((char *)this + 56));
  }
  if (!*((_QWORD *)this + 9))
  {
    v27 = (const re::ecs2::MeshSystem *)((char *)a2 + 184);
    goto LABEL_27;
  }
LABEL_26:
  v27 = (const re::ecs2::MeshSystem *)((char *)a2 + 160);
LABEL_27:
  re::AssetHandle::AssetHandle((re::AssetHandle *)v205, v27);
  v29 = (_anonymous_namespace_ *)re::ecs2::MeshComponentHelper::repairedMaterialHandles(v12, (uint64_t)a3, (re::AssetHandle *)v205, *((re::AssetHandle **)this + 11), *((_QWORD *)this + 9), (uint64_t)&v211);
  v176 = a5;
  v177 = v12;
  if (!*((_QWORD *)this + 15))
  {
    v32 = (_QWORD *)*((_QWORD *)this + 29);
    if (v32[22])
    {
      v33 = v32 + 21;
      v34 = v32[21];
      if (v34)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v32[23]);
        *v33 = 0;
        v33[1] = 0;
        v33[2] = 0;
      }
    }
    goto LABEL_72;
  }
  a4 = *(re::ecs2::Entity **)&v214[2];
  v31 = (_QWORD *)*((_QWORD *)this + 29);
  if (v31[22] == *(_QWORD *)&v214[2])
  {
    if (!*(_QWORD *)&v214[2])
      goto LABEL_72;
    goto LABEL_40;
  }
  v31[22] = a4;
  if (a4)
  {
    if ((unint64_t)a4 >> 60)
    {
LABEL_247:
      re::internal::assertLog((re::internal *)6, (uint64_t)v30, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a4);
      _os_crash();
      __break(1u);
LABEL_248:
      re::internal::assertLog((re::internal *)4, (uint64_t)v30, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v10 = 16 * (_QWORD)a4;
    v31[23] = v35;
    if (!v35)
      goto LABEL_248;
    v36 = v35;
    if (a4 != (re::ecs2::Entity *)1)
    {
      v10 -= 16;
      bzero(v35, v10);
      v36 = (_QWORD *)((char *)v36 + v10);
    }
    *v36 = 0;
    v36[1] = 0;
LABEL_40:
    v17 = 0;
    v37 = 1;
    while (*((_QWORD *)this + 15) > v17 && !re::ecs2::EntityHandle::isNull((id *)(*((_QWORD *)this + 17) + 24 * v17)))
    {
      a5 = (const re::DirectResourceAssetTracker *)*((_QWORD *)this + 15);
      if ((unint64_t)a5 <= v17)
        goto LABEL_227;
      v38 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 88) + 56))(*((_QWORD *)a2 + 88), *(_QWORD *)(*((_QWORD *)this + 17) + 24 * v17 + 8));
      if (!v38)
        break;
      v39 = *v38;
      if (v39 == 1)
      {
        v10 = *((_QWORD *)v38 + 1);
        if (!v10)
          break;
        v48 = (id)(v10 + 8);
        a5 = *(const re::DirectResourceAssetTracker **)&v214[2];
        if (*(_QWORD *)&v214[2] <= v17)
          goto LABEL_240;
        re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)&v216[2] + 24 * v17), (uint64_t *)(v10 + 80));
        re::UnlitMaterial::parameterTable((re::UnlitMaterial *)v10, v181, &v202);
        v49 = *((_QWORD *)this + 29);
        a5 = *(const re::DirectResourceAssetTracker **)(v49 + 176);
        if ((unint64_t)a5 <= v17)
          goto LABEL_242;
        v175 = (id)(v10 + 8);
        v42 = (uint64_t)v202;
        v50 = (char *)v202 + 96;
        v51 = (_QWORD *)(*(_QWORD *)(v49 + 184) + 16 * v17);
        *v51 = (char *)v202 + 32;
        v51[1] = v50;
        v52 = *((_QWORD *)this + 29);
        v53 = *(_QWORD *)(v52 + 496);
        a5 = *(const re::DirectResourceAssetTracker **)(v52 + 464);
        if (v53 + 1 > 8 * (uint64_t)a5)
        {
          re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity((_QWORD *)(v52 + 456), (v53 + 8) >> 3);
          a5 = *(const re::DirectResourceAssetTracker **)(v52 + 464);
        }
        v10 = v53 >> 3;
        if ((unint64_t)a5 <= v53 >> 3)
          goto LABEL_244;
        if ((*(_BYTE *)(v52 + 472) & 1) != 0)
          v54 = v52 + 480;
        else
          v54 = *(_QWORD *)(v52 + 488);
        v58 = *(_QWORD *)(v54 + 8 * v10);
        v59 = v53 & 7;
        ++*(_QWORD *)(v52 + 496);
        ++*(_DWORD *)(v52 + 504);
      }
      else
      {
        if (v39 != 2)
          break;
        v10 = *((_QWORD *)v38 + 1);
        if (!v10)
          break;
        v40 = (id)(v10 + 8);
        a5 = *(const re::DirectResourceAssetTracker **)&v214[2];
        if (*(_QWORD *)&v214[2] <= v17)
          goto LABEL_239;
        re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)&v216[2] + 24 * v17), (uint64_t *)(v10 + 528));
        re::PbrMaterial::parameterTable((re::PbrMaterial *)v10, v181, &v202);
        v41 = *((_QWORD *)this + 29);
        a5 = *(const re::DirectResourceAssetTracker **)(v41 + 176);
        if ((unint64_t)a5 <= v17)
          goto LABEL_241;
        v175 = (id)(v10 + 8);
        v42 = (uint64_t)v202;
        v43 = (char *)v202 + 208;
        v44 = (_QWORD *)(*(_QWORD *)(v41 + 184) + 16 * v17);
        *v44 = (char *)v202 + 32;
        v44[1] = v43;
        v45 = *((_QWORD *)this + 29);
        v46 = *(_QWORD *)(v45 + 440);
        a5 = *(const re::DirectResourceAssetTracker **)(v45 + 408);
        if (v46 + 1 > 8 * (uint64_t)a5)
        {
          re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity((_QWORD *)(v45 + 400), (v46 + 8) >> 3);
          a5 = *(const re::DirectResourceAssetTracker **)(v45 + 408);
        }
        v10 = v46 >> 3;
        if ((unint64_t)a5 <= v46 >> 3)
          goto LABEL_243;
        if ((*(_BYTE *)(v45 + 416) & 1) != 0)
          v47 = v45 + 424;
        else
          v47 = *(_QWORD *)(v45 + 432);
        v58 = *(_QWORD *)(v47 + 8 * v10);
        v59 = v46 & 7;
        ++*(_QWORD *)(v45 + 440);
        ++*(_DWORD *)(v45 + 448);
      }
      *(_QWORD *)(v58 + 8 * v59) = v42;

LABEL_65:
      v17 = v37;
      if ((unint64_t)a4 <= v37++)
        goto LABEL_72;
    }
    v55 = *((_QWORD *)this + 29);
    a5 = *(const re::DirectResourceAssetTracker **)(v55 + 176);
    if ((unint64_t)a5 <= v17)
      goto LABEL_226;
    v56 = (_QWORD *)(*(_QWORD *)(v55 + 184) + 16 * v17);
    *v56 = 0;
    v56[1] = 0;
    goto LABEL_65;
  }
LABEL_72:
  v60 = *((_QWORD *)v180 + 24);
  if (v60)
  {
    re::ecs2::MeshComponentHelper::fixLegacyParametersColorGamut(v181, (uint64_t)&v211, *((unint64_t **)v180 + 24));
    *(_QWORD *)&v222 = *(_QWORD *)&v216[2];
    *((_QWORD *)&v222 + 1) = *(_QWORD *)&v214[2];
    v61 = *(_QWORD *)(v60 + 88);
    *(_QWORD *)v208 = *(_QWORD *)(v60 + 104);
    *(_QWORD *)&v208[8] = v61;
    re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks((_anonymous_namespace_ *)&v222, v208, (uint64_t *)(*((_QWORD *)this + 29) + 96), (uint64_t *)(*((_QWORD *)this + 29) + 120), *((_QWORD *)this + 29) + 344);
  }
  *(_QWORD *)&v222 = *(_QWORD *)&v216[2];
  *((_QWORD *)&v222 + 1) = *(_QWORD *)&v214[2];
  isUnderHighFidelityVisualProxyTree = re::ecs2::VisualProxyCaptureHelper::isUnderHighFidelityVisualProxyTree((_BOOL8)v180, v30);
  re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles((_anonymous_namespace_ *)&v222, isUnderHighFidelityVisualProxyTree, (uint64_t *)(*((_QWORD *)this + 29) + 96), (uint64_t *)(*((_QWORD *)this + 29) + 144), *((_QWORD *)this + 29) + 344);
  a4 = (re::ecs2::Entity *)*((_QWORD *)this + 20);
  v63 = (_QWORD *)*((_QWORD *)this + 29);
  v63[41] = a4;
  if (a4)
  {
    if ((unint64_t)a4 >= 0xAAAAAAAAAAAAAABLL)
    {
LABEL_236:
      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a4);
      _os_crash();
      __break(1u);
      goto LABEL_237;
    }
    v17 = 24 * (_QWORD)a4;
    v63[42] = v65;
    if (!v65)
    {
LABEL_237:
      re::internal::assertLog((re::internal *)4, v67, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_238;
    }
    v10 = (size_t)v65;
    if (a4 != (re::ecs2::Entity *)1)
    {
      v17 -= 24;
      bzero(v65, v17);
      v10 += v17;
    }
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
  }
  v68 = (_QWORD *)*((_QWORD *)this + 29);
  v68[25] = a4;
  if (a4)
  {
    v17 = 16 * (_QWORD)a4;
    v68[26] = v71;
    if (!v71)
    {
LABEL_238:
      re::internal::assertLog((re::internal *)4, v72, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_239:
      *(_QWORD *)v217 = 0;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v222 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v208 = 136315906;
      *(_QWORD *)&v208[4] = "operator[]";
      *(_WORD *)&v208[12] = 1024;
      *(_DWORD *)&v208[14] = 789;
      *(_WORD *)&v208[18] = 2048;
      *(_QWORD *)&v208[20] = v17;
      v209 = 2048;
      *(_QWORD *)v210 = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_240:
      *(_QWORD *)v217 = 0;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v222 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v208 = 136315906;
      *(_QWORD *)&v208[4] = "operator[]";
      *(_WORD *)&v208[12] = 1024;
      *(_DWORD *)&v208[14] = 789;
      *(_WORD *)&v208[18] = 2048;
      *(_QWORD *)&v208[20] = v17;
      v209 = 2048;
      *(_QWORD *)v210 = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_241:
      *(_QWORD *)v217 = 0;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v222 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v208 = 136315906;
      *(_QWORD *)&v208[4] = "operator[]";
      *(_WORD *)&v208[12] = 1024;
      *(_DWORD *)&v208[14] = 468;
      *(_WORD *)&v208[18] = 2048;
      *(_QWORD *)&v208[20] = v17;
      v209 = 2048;
      *(_QWORD *)v210 = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_242:
      *(_QWORD *)v217 = 0;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v222 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v208 = 136315906;
      *(_QWORD *)&v208[4] = "operator[]";
      *(_WORD *)&v208[12] = 1024;
      *(_DWORD *)&v208[14] = 468;
      *(_WORD *)&v208[18] = 2048;
      *(_QWORD *)&v208[20] = v17;
      v209 = 2048;
      *(_QWORD *)v210 = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_243:
      *(_QWORD *)v217 = 0;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v222 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v208 = 136315906;
      *(_QWORD *)&v208[4] = "operator[]";
      *(_WORD *)&v208[12] = 1024;
      *(_DWORD *)&v208[14] = 858;
      *(_WORD *)&v208[18] = 2048;
      *(_QWORD *)&v208[20] = v10;
      v209 = 2048;
      *(_QWORD *)v210 = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_244:
      *(_QWORD *)v217 = 0;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v222 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v208 = 136315906;
      *(_QWORD *)&v208[4] = "operator[]";
      *(_WORD *)&v208[12] = 1024;
      *(_DWORD *)&v208[14] = 858;
      *(_WORD *)&v208[18] = 2048;
      *(_QWORD *)&v208[20] = v10;
      v209 = 2048;
      *(_QWORD *)v210 = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_245;
    }
    v10 = (size_t)v71;
    if (a4 != (re::ecs2::Entity *)1)
    {
      v73 = v17 - 16;
      bzero(v71, v73);
      v10 += v73;
    }
    v74 = 0;
    v17 = 0;
    v75 = 0;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    do
    {
      v76 = *((_QWORD *)this + 20);
      if (v76 <= (unint64_t)v75)
        goto LABEL_220;
      v77 = re::DataArray<re::MeshInstance>::get((uint64_t)v177 + 72, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (_QWORD)v75));
      *(_QWORD *)v217 = *(_QWORD *)&v216[2];
      *(_QWORD *)&v217[8] = *(_QWORD *)&v214[2];
      v78 = *(_QWORD *)(v77 + 128);
      v202 = *(_anonymous_namespace_ **)(v77 + 136);
      v203 = v78;
      v79 = *((_QWORD *)this + 29);
      a5 = *(const re::DirectResourceAssetTracker **)(v79 + 328);
      if (a5 <= v75)
        goto LABEL_221;
      re::MaterialAssetHelper::extractMaterialDataFromMeshInstanceParameterBlocks((_anonymous_namespace_ *)v217, &v202, (uint64_t *)(*(_QWORD *)(v79 + 336) + v17), v79 + 344);
      v80 = (_QWORD *)*((_QWORD *)this + 29);
      a5 = (const re::DirectResourceAssetTracker *)v80[41];
      if (a5 <= v75)
        goto LABEL_222;
      a5 = (const re::DirectResourceAssetTracker *)v80[25];
      if (a5 <= v75)
        goto LABEL_223;
      v81 = *(_QWORD *)(v80[42] + v17 + 8);
      v82 = *(_QWORD *)(v80[42] + v17 + 16);
      v83 = (_QWORD *)(v80[26] + v74);
      *v83 = v82;
      v83[1] = v81;
      v75 = (re::ecs2::Entity *)((char *)v75 + 1);
      v17 += 24;
      v74 += 16;
    }
    while (a4 != v75);
  }
  a4 = v180;
  v84 = *((_QWORD *)v180 + 31);
  if (v84)
  {
    v85 = (_QWORD *)*((_QWORD *)this + 29);
    a5 = *(const re::DirectResourceAssetTracker **)(v84 + 48);
    v85[28] = a5;
    if (a5)
    {
      if ((unint64_t)a5 >= 0xE38E38E38E38E39)
      {
LABEL_245:
        re::internal::assertLog((re::internal *)6, v86, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 18, a5);
        _os_crash();
        __break(1u);
        goto LABEL_246;
      }
      v85[29] = v87;
      if (!v87)
      {
LABEL_246:
        re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_247;
      }
      v89 = (char *)a5 - 1;
      if (a5 != (const re::DirectResourceAssetTracker *)1)
      {
        do
        {
          *v87 = 0;
          v87[2] = 0;
          v87[4] = 0;
          v87[6] = 0;
          v87[8] = 0;
          v87[10] = 0;
          v87[12] = 0;
          v87[14] = 0;
          v87[16] = 0;
          v87 += 18;
          --v89;
        }
        while (v89);
      }
      *v87 = 0;
      v87[2] = 0;
      v87[4] = 0;
      v87[6] = 0;
      v87[8] = 0;
      v87[10] = 0;
      v87[12] = 0;
      v87[14] = 0;
      v87[16] = 0;
    }
    memcpy(*(void **)(*((_QWORD *)this + 29) + 232), *(const void **)(v84 + 64), 18 * *(_QWORD *)(v84 + 48));
  }
  v90 = *((_QWORD *)v180 + 32);
  if (v90)
  {
    re::ecs2::DirectMaterialParametersArrayComponent::resolveSerializedParameters(*((re::ecs2::DirectMaterialParametersArrayComponent **)v180 + 32), v176, (uint64_t)v208, v70);
    v91 = (uint64_t *)*((_QWORD *)this + 29);
    v92 = *(_QWORD *)&v208[16];
    v94 = (uint64_t *)(*((_QWORD *)this + 29) + 24);
    v95 = *(_QWORD *)&v208[16];
    v97 = *(_QWORD *)&v208[16];
    if (*(_QWORD *)&v208[16])
    {
      v17 = 0;
      a4 = 0;
      v10 = 0;
      do
      {
        v98 = *((_QWORD *)this + 29);
        a5 = *(const re::DirectResourceAssetTracker **)(v98 + 104);
        if ((unint64_t)a5 <= v10)
          goto LABEL_224;
        a5 = (const re::DirectResourceAssetTracker *)*((_QWORD *)this + 9);
        if ((unint64_t)a5 <= v10)
          goto LABEL_225;
        v99 = *(_QWORD *)&v210[2];
        v100 = *(_QWORD *)(*(_QWORD *)(v98 + 112) + 8 * v10);
        v101 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::Entity *)((char *)a4 + *((_QWORD *)this + 11)));
        if (v101 && *((_BYTE *)v101 + 1730) == 6)
        {
          if (*(_QWORD *)(v100 + 176) && *(_QWORD *)(v99 + v17 + 16) == 1)
          {
            v202 = 0;
            v203 = 0;
            v204 = 0;
            v102 = *(_QWORD *)(v99 + v17 + 16);
            a5 = *(const re::DirectResourceAssetTracker **)(v90 + 48);
            if ((unint64_t)a5 <= v10)
              goto LABEL_230;
            v103 = *((_QWORD *)this + 29);
            a5 = *(const re::DirectResourceAssetTracker **)(v103 + 104);
            if ((unint64_t)a5 <= v10)
              goto LABEL_231;
            re::ecs2::fetchBuffers((uint64_t)v181, v99 + v17, *(_QWORD *)(v90 + 64) + v17, *(_QWORD *)(*(_QWORD *)(v103 + 112) + 8 * v10) + 168, v103 + 264, (unint64_t)&v202, (_anonymous_namespace_ *)(v103 + 48), (_BYTE *)(v103 + 88));
            v104 = *((_QWORD *)this + 29);
            a5 = *(const re::DirectResourceAssetTracker **)(v104 + 8);
            if ((unint64_t)a5 <= v10)
              goto LABEL_233;
            re::FixedArray<float>::operator=((uint64_t *)((char *)a4 + *(_QWORD *)(v104 + 16)), (uint64_t *)&v202);
            v101 = v202;
            if (v202 && v203)
              v101 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v202 + 40))();
          }
          if (*(_QWORD *)(v100 + 200))
          {
            v105 = v99 + v17;
            if (*(_QWORD *)(v105 + 56) == 1)
            {
              v202 = 0;
              v203 = 0;
              v204 = 0;
              v106 = *(_QWORD *)(v105 + 56);
              a5 = *(const re::DirectResourceAssetTracker **)(v90 + 48);
              if ((unint64_t)a5 <= v10)
                goto LABEL_232;
              v107 = *((_QWORD *)this + 29);
              a5 = *(const re::DirectResourceAssetTracker **)(v107 + 104);
              if ((unint64_t)a5 <= v10)
                goto LABEL_234;
              re::ecs2::fetchBuffers((uint64_t)v181, v105 + 40, *(_QWORD *)(v90 + 64) + v17 + 40, *(_QWORD *)(*(_QWORD *)(v107 + 112) + 8 * v10) + 192, v107 + 264, (unint64_t)&v202, (_anonymous_namespace_ *)(v107 + 48), (_BYTE *)(v107 + 88));
              v108 = *((_QWORD *)this + 29);
              a5 = *(const re::DirectResourceAssetTracker **)(v108 + 32);
              if ((unint64_t)a5 <= v10)
                goto LABEL_235;
              re::FixedArray<float>::operator=((uint64_t *)((char *)a4 + *(_QWORD *)(v108 + 40)), (uint64_t *)&v202);
              if (v202 && v203)
                (*(void (**)(void))(*(_QWORD *)v202 + 40))();
            }
          }
        }
        ++v10;
        v97 = *(_QWORD *)&v208[16];
        a4 = (re::ecs2::Entity *)((char *)a4 + 24);
        v17 += 80;
      }
      while (v10 < *(_QWORD *)&v208[16]);
      a4 = v180;
    }
    v109 = *(_QWORD *)v208;
    if (*(_QWORD *)v208)
    {
      v110 = *(_QWORD *)&v210[2];
      if (*(_QWORD *)&v210[2])
      {
        if (v97)
        {
          v111 = 80 * v97;
          do
          {
            re::DynamicArray<re::ObjCObject>::deinit(v110 + 40);
            re::DynamicArray<re::ObjCObject>::deinit(v110);
            v110 += 80;
            v111 -= 80;
          }
          while (v111);
          v109 = *(_QWORD *)v208;
          v110 = *(_QWORD *)&v210[2];
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v109 + 40))(v109, v110);
      }
    }
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v211);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v205);
LABEL_131:
  if (!*((_BYTE *)a2 + 256))
  {
    v126 = *((_QWORD *)a2 + 21);
    if (!v126)
      return 0;
    v127 = atomic_load((unsigned int *)(v126 + 704));
    if (v127 != 2)
      return 0;
    v128 = re::AssetHandle::loadedAsset<re::MaterialAsset>((const re::ecs2::MeshSystem *)((char *)a2 + 160));
    v129 = *((_QWORD *)this + 29);
    v130 = *(_QWORD *)(v129 + 104);
    if (!v130)
      return 0;
    v131 = *(_QWORD **)(v129 + 112);
    v132 = 8 * v130;
    while (*v131 == *(_QWORD *)(v128 + 1664))
    {
      ++v131;
      v132 -= 8;
      if (!v132)
        return 0;
    }
  }
  v178 = (re::ecs2::Entity *)((char *)a4 + 32);
  v112 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v112)
    goto LABEL_136;
  v134 = v180;
  do
  {
    v135 = v134;
    v134 = (re::ecs2::VisualProxyCaptureHelper *)*((_QWORD *)v134 + 3);
  }
  while (v134);
  v136 = re::ecs2::ComponentHelper::privateSceneDataEntity(*((re::ecs2::ComponentHelper **)v135 + 2), 0);
  if (v136)
  {
    v112 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v136 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v112)
    {
LABEL_136:
      v113 = *(_QWORD *)(v112 + 40);
      if ((v113 & 1) != 0 ? v113 >> 1 : v113 >> 1)
      {
        DebugTechnique = re::Hash<re::DynamicString>::operator()((uint64_t)&v222, v112 + 32);
        v116 = *((_QWORD *)this + 29);
        if (!*(_BYTE *)(v116 + 240))
          *(_BYTE *)(v116 + 240) = 1;
        *(_QWORD *)(v116 + 248) = DebugTechnique;
        v117 = *((_QWORD *)this + 29);
        v118 = *(_QWORD *)(v117 + 104);
        if (v118)
        {
          v119 = *(re::ecs2::Entity **)(v117 + 112);
          v75 = (re::ecs2::Entity *)((char *)v119 + 8 * v118);
          a4 = (re::ecs2::Entity *)72;
          while (1)
          {
            v120 = *(const re::MaterialInstance **)v119;
            if (!*(_QWORD *)(*(_QWORD *)v119 + 96))
            {
              a5 = (const re::DirectResourceAssetTracker *)*((_QWORD *)v120 + 10);
              *((_QWORD *)v120 + 13) = a5;
              if (a5)
              {
                if ((unint64_t)a5 >= 0x666666666666667)
                  goto LABEL_228;
                *((_QWORD *)v120 + 14) = DebugTechnique;
                if (!DebugTechnique)
                  goto LABEL_229;
                v123 = (char *)a5 - 1;
                if (a5 != (const re::DirectResourceAssetTracker *)1)
                {
                  do
                  {
                    *(_QWORD *)DebugTechnique = 0;
                    *(_QWORD *)(DebugTechnique + 32) = 0;
                    DebugTechnique += 40;
                    --v123;
                  }
                  while (v123);
                }
                *(_QWORD *)DebugTechnique = 0;
                *(_QWORD *)(DebugTechnique + 32) = 0;
              }
            }
            if (*((_QWORD *)v120 + 10))
              break;
LABEL_158:
            v119 = (re::ecs2::Entity *)((char *)v119 + 8);
            if (v119 == v75)
              goto LABEL_171;
          }
          v17 = 0;
          v10 = 0;
          while (1)
          {
            a5 = (const re::DirectResourceAssetTracker *)*((_QWORD *)v120 + 13);
            if ((unint64_t)a5 <= v10)
              break;
            if (!*(_QWORD *)(*((_QWORD *)v120 + 14) + v17))
            {
              v124 = **(_QWORD **)(*((_QWORD *)v120 + 11) + v17);
              if (*(_BYTE *)(v124 + 2632))
              {
                v125 = *((_QWORD *)v120 + 2);
                *(_QWORD *)&v222 = *(_QWORD *)(v124 + 2640);
                DebugTechnique = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find((_QWORD *)(v125 + 184), (uint64_t *)&v222);
                if (DebugTechnique != -1)
                {
                  DebugTechnique = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(*(_QWORD *)(v125 + 192) + 72 * DebugTechnique + 8), (_QWORD *)(*((_QWORD *)this + 29) + 248));
                  if (DebugTechnique != -1)
                    DebugTechnique = (uint64_t)re::MaterialManager::generateDebugTechnique(*((re::MaterialManager **)v181 + 3), v120, v10);
                }
              }
            }
            ++v10;
            v17 += 40;
            if (*((_QWORD *)v120 + 10) <= v10)
              goto LABEL_158;
          }
          *(_QWORD *)v208 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v211 = 136315906;
          v212 = "operator[]";
          v213 = 1024;
          *(_DWORD *)v214 = 468;
          *(_WORD *)&v214[4] = 2048;
          *(_QWORD *)&v214[6] = v10;
          v215 = 2048;
          *(_QWORD *)v216 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_220:
          re::internal::assertLog((re::internal *)6, v72, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v75, v76);
          _os_crash();
          __break(1u);
LABEL_221:
          v207 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v208 = 136315906;
          *(_QWORD *)&v208[4] = "operator[]";
          *(_WORD *)&v208[12] = 1024;
          *(_DWORD *)&v208[14] = 468;
          *(_WORD *)&v208[18] = 2048;
          *(_QWORD *)&v208[20] = v75;
          v209 = 2048;
          *(_QWORD *)v210 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_222:
          *(_QWORD *)v217 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v208 = 136315906;
          *(_QWORD *)&v208[4] = "operator[]";
          *(_WORD *)&v208[12] = 1024;
          *(_DWORD *)&v208[14] = 468;
          *(_WORD *)&v208[18] = 2048;
          *(_QWORD *)&v208[20] = v75;
          v209 = 2048;
          *(_QWORD *)v210 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_223:
          *(_QWORD *)v217 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v208 = 136315906;
          *(_QWORD *)&v208[4] = "operator[]";
          *(_WORD *)&v208[12] = 1024;
          *(_DWORD *)&v208[14] = 468;
          *(_WORD *)&v208[18] = 2048;
          *(_QWORD *)&v208[20] = v75;
          v209 = 2048;
          *(_QWORD *)v210 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_224:
          v202 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 468;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_225:
          v202 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 789;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_226:
          *(_QWORD *)v217 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v208 = 136315906;
          *(_QWORD *)&v208[4] = "operator[]";
          *(_WORD *)&v208[12] = 1024;
          *(_DWORD *)&v208[14] = 468;
          *(_WORD *)&v208[18] = 2048;
          *(_QWORD *)&v208[20] = v17;
          v209 = 2048;
          *(_QWORD *)v210 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_227:
          *(_QWORD *)v217 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v208 = 136315906;
          *(_QWORD *)&v208[4] = "operator[]";
          *(_WORD *)&v208[12] = 1024;
          *(_DWORD *)&v208[14] = 789;
          *(_WORD *)&v208[18] = 2048;
          *(_QWORD *)&v208[20] = v17;
          v209 = 2048;
          *(_QWORD *)v210 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_228:
          re::internal::assertLog((re::internal *)6, v121, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a5);
          _os_crash();
          __break(1u);
LABEL_229:
          re::internal::assertLog((re::internal *)4, v122, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_230:
          v207 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 797;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_231:
          v207 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 468;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_232:
          v207 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 797;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_233:
          v207 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 468;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_234:
          v207 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 468;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_235:
          v207 = 0;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v217 = 136315906;
          *(_QWORD *)&v217[4] = "operator[]";
          *(_WORD *)&v217[12] = 1024;
          *(_DWORD *)&v217[14] = 468;
          v218 = 2048;
          v219 = v10;
          v220 = 2048;
          v221 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_236;
        }
      }
    }
  }
LABEL_171:
  v137 = *((_QWORD *)this + 29);
  v138 = *(_QWORD *)(v137 + 104);
  if (v138)
  {
    v139 = 8 * v138;
    v140 = *(uint64_t **)(v137 + 112);
    do
    {
      v141 = *v140;
      v142 = *((_QWORD *)a2 + 26);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      v143 = (re::MaterialParameterTable *)(v141 + 224);
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v143, v142, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        *(_BYTE *)(*((_QWORD *)this + 29) + 256) = 1;
      }
      v144 = *((_QWORD *)a2 + 27);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v143, v144, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        *(_WORD *)(*((_QWORD *)this + 29) + 256) = 257;
      }
      v145 = *((_QWORD *)a2 + 28);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v143, v145, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        goto LABEL_193;
      }
      v146 = *((_QWORD *)a2 + 29);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v143, v146, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        goto LABEL_193;
      }
      v147 = *((_QWORD *)a2 + 30);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v143, v147, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
        goto LABEL_193;
      }
      v148 = *((_QWORD *)a2 + 31);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      if (re::MaterialParameterTable::tryGetPassTechniqueMapping(v143, v148, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
      {
LABEL_193:
        *(_BYTE *)(*((_QWORD *)this + 29) + 258) = 1;
      }
      ++v140;
      v139 -= 8;
    }
    while (v139);
  }
  v149 = atomic_load((unsigned __int8 *)&qword_25410C5E8);
  if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_25410C5E8))
  {
    qword_25410C5E0 = re::hashString((re *)"Occlusion", v174);
    __cxa_guard_release(&qword_25410C5E8);
  }
  v150 = (re::MaterialAsset *)*((_QWORD *)this + 11);
  v151 = *((_QWORD *)this + 9);
  if (v151)
  {
    v152 = 24 * v151;
    while (1)
    {
      v153 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v150);
      if (v153)
      {
        v154 = *(_QWORD *)(v153 + 1664);
        if (v154)
        {
          v155 = *(_QWORD *)(v154 + 16);
          if (v155)
          {
            if (re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v155 + 16, &qword_25410C5E0))
            {
              break;
            }
          }
        }
      }
      v150 = (re::MaterialAsset *)((char *)v150 + 24);
      v152 -= 24;
      if (!v152)
      {
        LOBYTE(v151) = 0;
        goto LABEL_204;
      }
    }
    LOBYTE(v151) = 1;
LABEL_204:
    v156 = *((_QWORD *)this + 9);
    v150 = (re::MaterialAsset *)*((_QWORD *)this + 11);
  }
  else
  {
    v156 = 0;
  }
  *(_BYTE *)(*((_QWORD *)this + 29) + 259) = v151;
  v157 = re::ecs2::containsShaderGraphMaterialWithLightSpillNode(v156, v150);
  *(_BYTE *)(*((_QWORD *)this + 29) + 260) = v157;
  if (v179 != v157)
  {
    v158 = *((unsigned __int16 *)v180 + 41);
    if (*((_WORD *)v180 + 41))
    {
      v159 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                             + 16);
      v160 = (int16x8_t *)*((_QWORD *)v180 + 11);
      v161 = vld1q_dup_s16(v159);
      v162 = 1;
      while (1)
      {
        v163 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v161, *v160), (int8x16_t)xmmword_2260F1E80);
        v163.i16[0] = vmaxvq_u16(v163);
        if (v163.i32[0])
          break;
        v162 -= 8;
        ++v160;
        if (!--v158)
          goto LABEL_211;
      }
      LODWORD(v158) = v163.u16[0] - v162 < *((unsigned __int16 *)v180 + 40);
      if (!v157)
        goto LABEL_215;
    }
    else
    {
LABEL_211:
      if (!v157)
      {
LABEL_215:
        if ((_DWORD)v158)
          re::ecs2::EntityComponentCollection::remove(v178, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        return 1;
      }
    }
    if ((v158 & 1) == 0)
    {
      v164 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::add(v178, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      *(_QWORD *)&v200.var0 = 0xFFFDBC97C8B59A5ELL;
      v200.var1 = "REVideoAttachmentChannelID1TextureSpill";
      v201[0] = 0;
      v201[1] = &str_110;
      v164 = (_anonymous_namespace_ *)((char *)v164 + 32);
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v200);
      re::StringID::destroyString((re::StringID *)v201);
      re::StringID::destroyString((re::StringID *)&v200);
      *(_QWORD *)&v198.var0 = 0x76CA5FD80552008;
      v198.var1 = "REVideoAttachmentSpillSpecular";
      v199[0] = 0;
      v199[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v198);
      re::StringID::destroyString((re::StringID *)v199);
      re::StringID::destroyString((re::StringID *)&v198);
      *(_QWORD *)&v196.var0 = 0x61C86E215C086A2ALL;
      v196.var1 = "REVideoAttachmentWorldToPlaneUVsTransformMatrix";
      v197[0] = 0;
      v197[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v196);
      re::StringID::destroyString((re::StringID *)v197);
      re::StringID::destroyString((re::StringID *)&v196);
      *(_QWORD *)&v194.var0 = 0xA29F54C4473E75D8;
      v194.var1 = "REVideoAttachmentContentPlaneWidthWorldspace";
      v195[0] = 0;
      v195[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v194);
      re::StringID::destroyString((re::StringID *)v195);
      re::StringID::destroyString((re::StringID *)&v194);
      *(_QWORD *)&v192.var0 = 0xEAE20DCE6A8B6752;
      v192.var1 = "REVideoAttachmentContentPlaneHeightWorldspace";
      v193[0] = 0;
      v193[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v192);
      re::StringID::destroyString((re::StringID *)v193);
      re::StringID::destroyString((re::StringID *)&v192);
      *(_QWORD *)&v190.var0 = 0x85AE1CBDDAF0F1D6;
      v190.var1 = "REVideoAttachmentContentBrightnessScale";
      v191[0] = 0;
      v191[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v190);
      re::StringID::destroyString((re::StringID *)v191);
      re::StringID::destroyString((re::StringID *)&v190);
      *(_QWORD *)&v188.var0 = 0x8E6804010C9F587CLL;
      v188.var1 = "REVideoAttachmentTransitionAlpha";
      v189[0] = 0;
      v189[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v188);
      re::StringID::destroyString((re::StringID *)v189);
      re::StringID::destroyString((re::StringID *)&v188);
      *(_QWORD *)&v186.var0 = 0xF3ADD9F5BAC06862;
      v186.var1 = "REVideoAttachmentAverageColor";
      v187[0] = 0;
      v187[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v186);
      re::StringID::destroyString((re::StringID *)v187);
      re::StringID::destroyString((re::StringID *)&v186);
      *(_QWORD *)&v184.var0 = 0xDE000BD2E5A280BELL;
      v184.var1 = "REVideoAttachmentDockingRegionHeight";
      v185[0] = 0;
      v185[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v184);
      re::StringID::destroyString((re::StringID *)v185);
      re::StringID::destroyString((re::StringID *)&v184);
      *(_QWORD *)&v182.var0 = 0xD59CE79B746D6F1CLL;
      v182.var1 = "REVideoAttachmentDockingRegionWidth";
      v183[0] = 0;
      v183[1] = &str_110;
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v164, &v182);
      re::StringID::destroyString((re::StringID *)v183);
      re::StringID::destroyString((re::StringID *)&v182);
    }
  }
  return 1;
}

uint64_t re::MaterialParameterTable::tryGetPassTechniqueMapping(re::MaterialParameterTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 1032, &v4);
  if (result)
    return re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(result, &v5);
  return result;
}

_QWORD *re::ecs2::MeshComponent::updateStaticBoundingBoxData(_QWORD *this, const re::ecs2::Entity *a2, const re::RenderManager *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  const re::ecs2::Entity *v8;
  const re::ecs2::Entity *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  re *inited;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t *v27;
  const float *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  _anonymous_namespace_ *v32;
  id location;
  _QWORD v34[3];
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!this[36])
  {
    v5 = this;
    v6 = this + 4;
    this = (_QWORD *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(this + 4));
    if (this)
    {
      v7 = this;
      if (a3)
        goto LABEL_7;
      v8 = a2;
      do
      {
        v9 = v8;
        v8 = (const re::ecs2::Entity *)*((_QWORD *)v8 + 3);
      }
      while (v8);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v9 + 2) + 56) + 32))(*(_QWORD *)(*((_QWORD *)v9 + 2) + 56));
      this = (_QWORD *)re::ServiceLocator::serviceOrNull<re::RenderManager>(v10);
      a3 = (const re::RenderManager *)this;
      if (this)
      {
LABEL_7:
        v11 = *((_QWORD *)a3 + 17);
        if (v11)
          v12 = (void *)(v11 + 8);
        else
          v12 = 0;
        inited = (re *)objc_initWeak(&location, v12);
        v14 = re::globalAllocators(inited);
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 224, 8);
        *(_OWORD *)(v15 + 160) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)v15 = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 80) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_DWORD *)(v15 + 112) = 1;
        *(_QWORD *)(v15 + 120) = 0;
        *(_QWORD *)(v15 + 128) = 0;
        *(_OWORD *)(v15 + 168) = 0u;
        *(_OWORD *)(v15 + 152) = 0u;
        *(_DWORD *)(v15 + 184) = 1;
        *(_QWORD *)(v15 + 192) = 0;
        *(_QWORD *)(v15 + 200) = 0;
        memset(v34, 0, sizeof(v34));
        v35 = re::globalAllocators((re *)v15)[2];
        v36 = 0;
        re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset((id *)v5 + 35, &location, (void *)v15, (uint64_t)v34);
        if (v36)
        {
          (*(void (**)(_QWORD *))*v36)(v36);
          if (v36 != v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        }
        objc_destroyWeak(&location);
        location = 0;
        v16 = (uint64_t *)v5[36];
        v17 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v17)
        {
          v18 = *((_QWORD *)v17 + 81);
          if (v18)
          {
            v20 = v18 + 8;
            v18 = *(_QWORD *)(v18 + 8);
            v19 = *(_QWORD *)(v20 + 8);
          }
          else
          {
            v19 = 0;
          }
          v16[6] = v19;
          v16[7] = v18;
          v23 = *((_QWORD *)v17 + 81);
          if (v23)
          {
            v24 = v23 + 32;
            v23 = *(_QWORD *)(v23 + 32);
            v22 = *(_QWORD *)(v24 + 8);
          }
          else
          {
            v22 = 0;
          }
        }
        else
        {
          v17 = (_anonymous_namespace_ *)re::AssetHandle::operator=(v16, v6);
          v21 = v7[110];
          v16[6] = v7[111];
          v16[7] = v21;
          v22 = v7[114];
          v23 = v7[113];
        }
        v16[8] = v22;
        v16[9] = v23;
        if (*((float *)v5 + 24) != 0.0)
        {
          v17 = re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)(v16 + 3), (uint64_t)(v16 + 6));
          v26 = v16[4];
          v25 = (float32x4_t *)v16[5];
          if (v26)
          {
            v27 = &v25[2 * v26];
            do
            {
              v28 = (const float *)(v5 + 12);
              v29 = vld1q_dup_f32(v28);
              v30 = v25[1];
              *v25 = vsubq_f32(*v25, v29);
              v31 = vld1q_dup_f32(v28);
              v25[1] = vaddq_f32(v30, v31);
              v25 += 2;
            }
            while (v25 != v27);
            v26 = v16[4];
            v25 = (float32x4_t *)v16[5];
          }
          v16[6] = (uint64_t)v25;
          v16[7] = v26;
        }
      }
    }
  }
  return this;
}

_anonymous_namespace_ *re::FixedArray<re::AABB>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::AABB>::copy(a1, a2);
  }
  return a1;
}

re::ecs2::MeshComponentStateImpl *re::ecs2::MeshComponentStateImpl::MeshComponentStateImpl(re::ecs2::MeshComponentStateImpl *this, re::ecs2::MeshSystem *a2)
{
  _QWORD v4[2];
  _QWORD v5[12];

  v5[11] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED5EC40;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *(_QWORD *)((char *)this + 124) = 0x7FFFFFFFLL;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[4] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[5] = re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[6] = re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[7] = re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[8] = re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[9] = re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[10] = re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 11;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::MeshComponentStateImpl *)((char *)this + 16), (uint64_t)v4);
  return this;
}

void re::ecs2::MeshComponentStateImpl::didDependentComponentChange(uint64_t a1, unint64_t a2, re::ecs2::Entity *a3, re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v8;
  uint64_t v9;
  re::ecs2::EntityComponentCollection *v10;
  re *inited;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  re::ecs2::Entity *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __int16 *v31;
  int16x8_t *v32;
  int16x8_t v33;
  int v34;
  uint16x8_t v35;
  id *v36;
  re *v37;
  uint64_t v38;
  id v39;
  id location;
  uint64_t v41;
  re::ecs2::Entity *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v42 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
    || re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
  {
    re::ecs2::MeshComponentStateImpl::markEntityHierarchyDirty(a2, a3);
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
         || re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  {
    v41 = *(_QWORD *)(a2 + 8);
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    DWORD1(v45) = 0x7FFFFFFF;
    v8 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 40, &v41, (uint64_t *)&v43);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v43);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v8, (uint64_t *)&v42);
  }
  else
  {
    v9 = *((_QWORD *)a3 + 22);
    if (v9)
    {
      if (re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
      {
        v12 = 24;
        v13 = 0xFFFFFFFFLL;
        do
        {
          v14 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v12), (re::ecs2::Component *)v9);
          if (v14 != -1 && (v15 & 0xFFFFFF00000000) != 0)
          {
            v17 = v14;
            v13 = v15;
            goto LABEL_34;
          }
          v12 += 8;
        }
        while (v12 != 56);
        v17 = -1;
LABEL_34:
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v17, v13);
      }
      else
      {
        v10 = (re::ecs2::Entity *)((char *)a3 + 32);
        if (re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
        {
          re::ecs2::EntityComponentCollection::get(v10, a4);
        }
        else if (re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
        {
          *(_OWORD *)(v9 + 208) = 0u;
          *(_BYTE *)(v9 + 192) = 0;
          v38 = re::ecs2::EntityComponentCollection::get(v10, a4);
          if (v38)
          {
            *(_BYTE *)(v9 + 192) = *(_BYTE *)(v38 + 25);
            *(_OWORD *)(v9 + 208) = *(_OWORD *)(v38 + 304);
          }
        }
        else if (re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
               || re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4
               || re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
               || re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
        {
          inited = (re *)objc_initWeak(&location, 0);
          v43 = 0uLL;
          *(_QWORD *)&v44 = 0;
          *((_QWORD *)&v44 + 1) = re::globalAllocators(inited)[2];
          *(_QWORD *)&v45 = 0;
          re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset((id *)(v9 + 224), &location, 0, (uint64_t)&v43);
          if ((_QWORD)v45)
          {
            (**(void (***)(_QWORD))v45)(v45);
            if ((__int128 *)v45 != &v43)
              (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 40))(*((_QWORD *)&v44 + 1));
          }
          objc_destroyWeak(&location);
          location = 0;
        }
      }
    }
  }
  if (re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == (_UNKNOWN *)a4)
  {
    v18 = v42;
    v19 = (uint64_t)v42;
    do
    {
      v20 = v19;
      v19 = *(_QWORD *)(v19 + 24);
    }
    while (v19);
    if (v18 == re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(v20 + 16), 0))
    {
      v21 = (uint64_t)v42;
      do
      {
        v22 = v21;
        v21 = *(_QWORD *)(v21 + 24);
      }
      while (v21);
      v23 = *(_QWORD *)(v22 + 16);
      v24 = *(_QWORD *)(v23 + 128);
      if (v24)
      {
        v25 = *(uint64_t **)(v23 + 144);
        v26 = &v25[v24];
        v27 = (int8x16_t)xmmword_2260F1E80;
        do
        {
          v28 = *v25;
          v29 = *(_QWORD *)(*v25 + 176);
          if (v29)
          {
            v30 = *(unsigned __int16 *)(v28 + 82);
            if (!*(_WORD *)(v28 + 82))
              goto LABEL_50;
            v31 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                  + 16);
            v32 = *(int16x8_t **)(v28 + 88);
            v33 = vld1q_dup_s16(v31);
            v34 = 1;
            while (1)
            {
              v35 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v33, *v32), v27);
              v35.i16[0] = vmaxvq_u16(v35);
              if (v35.i32[0])
                break;
              v34 -= 8;
              ++v32;
              if (!--v30)
                goto LABEL_50;
            }
            if (v35.u16[0] - v34 >= *(unsigned __int16 *)(v28 + 80))
            {
LABEL_50:
              v36 = (id *)(v29 + 224);
              v37 = (re *)objc_initWeak(&v39, 0);
              *(_QWORD *)&v45 = 0;
              v43 = 0u;
              v44 = 0u;
              *((_QWORD *)&v44 + 1) = re::globalAllocators(v37)[2];
              *(_QWORD *)&v45 = 0;
              re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(v36, &v39, 0, (uint64_t)&v43);
              if ((_QWORD)v45)
              {
                (**(void (***)(_QWORD))v45)(v45);
                if ((__int128 *)v45 != &v43)
                  (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 40))(*((_QWORD *)&v44 + 1));
              }
              objc_destroyWeak(&v39);
              v39 = 0;
              v27 = (int8x16_t)xmmword_2260F1E80;
            }
          }
          ++v25;
        }
        while (v25 != v26);
      }
    }
  }
}

unint64_t re::ecs2::MeshComponentStateImpl::markEntityHierarchyDirty(unint64_t result, _QWORD *a2)
{
  uint64_t v3;
  re::ecs2::Component *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = (re::ecs2::Component *)a2[22];
  if (v4)
  {
    v5 = 24;
    v6 = 0xFFFFFFFFLL;
    do
    {
      v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v3 + 16), *(_QWORD *)(v3 + v5), v4);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        v10 = v7;
        v6 = v8;
        goto LABEL_10;
      }
      v5 += 8;
    }
    while (v5 != 56);
    v10 = -1;
LABEL_10:
    result = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(v3, v10, v6);
  }
  v11 = a2[41];
  if (v11)
  {
    v12 = (uint64_t *)a2[43];
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      result = re::ecs2::MeshComponentStateImpl::markEntityHierarchyDirty(v3, v14);
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 72 * v10;
  return v12 + 24;
}

void re::ecs2::MeshComponentStateImpl::didSetDirty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id *v5;
  re *inited;
  id location;
  _QWORD v8[3];
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = re::ecs2::ComponentBucketsBase::component(*(_QWORD *)(a2 + 16), a3, a4);
    if (v4)
    {
      v5 = (id *)(v4 + 280);
      inited = (re *)objc_initWeak(&location, 0);
      memset(v8, 0, sizeof(v8));
      v9 = re::globalAllocators(inited)[2];
      v10 = 0;
      re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(v5, &location, 0, (uint64_t)v8);
      if (v10)
      {
        (*(void (**)(_QWORD *))*v10)(v10);
        if (v10 != v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      }
      objc_destroyWeak(&location);
    }
  }
}

uint64_t re::ecs2::MeshComponentStateImpl::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  unsigned __int8 *v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  __int16 v31;
  unsigned __int8 v32;
  unsigned __int8 v34;
  unsigned __int8 v36;
  unsigned __int8 v38;
  unsigned __int8 v40;
  __int16 v42;
  int v43;
  unsigned __int8 v44;

  v29 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v29);
  if ((result & 1) == 0)
  {
    v29 = a2[37];
    result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v29);
    v9 = (re::ecs2::Component *)a2[22];
    if (v9)
    {
      v10 = (unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = *v10;
      LOBYTE(v29) = *v10;
      BYTE2(v29) = v10[2];
      if (BYTE2(v29))
        BYTE3(v29) = v10[3];
      BYTE4(v29) = v10[4];
      if (BYTE4(v29))
        BYTE5(v29) = v10[5];
      BYTE6(v29) = v10[6];
      if (BYTE6(v29))
        HIBYTE(v29) = v10[7];
      v30 = v10[8];
      v12 = *(_WORD *)(v10 + 9);
      v32 = v10[11];
      v31 = v12;
      if (v10[12])
        v34 = v10[13];
      if (v10[14])
        v36 = v10[15];
      if (v10[16])
        v38 = v10[17];
      if (v10[18])
        v40 = v10[19];
      if (v10[20])
        v42 = *((_WORD *)v10 + 11);
      v13 = *((_DWORD *)v10 + 6);
      v44 = v10[28];
      v43 = v13;
      v14 = 24;
      while (1)
      {
        v15 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
        if (v15 != -1 && (v16 & 0xFFFFFF00000000) != 0)
          break;
        v14 += 8;
        if (v14 == 56)
        {
          v15 = -1;
          break;
        }
      }
      v18 = *(_QWORD *)(a1 + 32) != v15;
      result = re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags((re::HierarchicalMeshOverrideFlags *)((char *)&v29 + 2));
      if (v11 != v18 || *((_QWORD *)v9 + 22) != result)
      {
        v19 = 24;
        v20 = 0xFFFFFFFFLL;
        do
        {
          v21 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v19), v9);
          if (v21 != -1 && (v22 & 0xFFFFFF00000000) != 0)
          {
            v24 = v21;
            v20 = v22;
            goto LABEL_37;
          }
          v19 += 8;
        }
        while (v19 != 56);
        v24 = -1;
LABEL_37:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v24, v20);
      }
    }
    v25 = a2[41];
    if (v25)
    {
      v26 = (uint64_t *)a2[43];
      v27 = 8 * v25;
      do
      {
        v28 = *v26++;
        result = re::ecs2::MeshComponentStateImpl::checkRenderOptionChanges(a1, v28, a3, a4);
        v27 -= 8;
      }
      while (v27);
    }
  }
  return result;
}

uint64_t re::ecs2::MeshComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  if (v5)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
    v9 = v21;
    v10 = v22;
    v21 = a4;
    v22 = v9;
    v23 = v10;
    v11 = (unsigned __int16)v10;
    v12 = v10 & 0xFFFF0000;
    if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
    {
      do
      {
        v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
        v16 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v24, *(_QWORD *)(*(_QWORD *)v15 + 16));
        v17 = v21;
        v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
        if (v16)
          v19 = 40;
        else
          v19 = 32;
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(_QWORD *)(a3 + v19));
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
      }
      while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Components should not be processed in headless mode.", "m_meshSystem->m_renderOptionsService", "processDirtyComponents", 1468);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::MeshComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const re::ecs2::MeshComponent *v20;
  _BYTE *v21;
  uint64_t v22;
  const re::AssetHandle *v23;
  unsigned int v24;
  uint64_t v25;
  const re::MeshAsset *v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  re::ecs2::ComponentBucketsBase *v37;
  unint64_t v38;
  uint64_t result;
  re::MeshManager **v42;
  char v43[8];
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v9 = *(_QWORD *)(a1 + 8);
  v42 = *(re::MeshManager ***)(v9 + 112);
  v10 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v9 + 160));
  if (v10 && !*(_BYTE *)(v10 + 1656))
  {
    v11 = 1;
  }
  else
  {
    re::AssetHandle::loadAsync((re::AssetHandle *)(*(_QWORD *)(a1 + 8) + 160));
    v11 = 0;
  }
  v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)(a1 + 8) + 184));
  if (v12 && !*(_BYTE *)(v12 + 1656))
  {
    v14 = 1;
  }
  else
  {
    re::AssetHandle::loadAsync((re::AssetHandle *)(*(_QWORD *)(a1 + 8) + 184));
    v14 = 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  if (v15)
  {
    v16 = v11 & v14;
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v45, a5, 0);
    v18 = v45;
    v17 = v46;
    v45 = a4;
    v46 = v18;
    v47 = v17;
    if (v18 != a5 || (unsigned __int16)v17 != 0xFFFFLL || (v17 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v19 = *(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v46);
        if (re::ecs2::MeshComponentHelper::areRequiredAssetsLoaded((re::ecs2::MeshComponentHelper *)v19, v20))
        {
          v21 = *(_BYTE **)(v19 + 16);
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 640);
          if (v22 && (v21[288] & 0x40) != 0)
          {
            v23 = (const re::AssetHandle *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 80))(v22);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v43, v23);
            if (!v44 || (v24 = atomic_load((unsigned int *)(v44 + 704)), v24 != 2))
            {
              re::AssetHandle::loadAsync((re::AssetHandle *)v43);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
              goto LABEL_33;
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
          }
          if (v16)
          {
            v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104);
            if (v25 && (*(_BYTE *)(v25 + 424) & 0x10) == 0)
              goto LABEL_31;
            v26 = (const re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v19 + 32));
            v27 = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v27)
            {
              v28 = v27;
              re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate(v27, v42[4]);
              v29 = v28 + 26;
              v30 = v28 + 24;
              v31 = (char *)(v28 + 27);
            }
            else
            {
              v29 = (_QWORD *)((char *)v26 + 392);
              v30 = (uint64_t *)((char *)v26 + 376);
              v31 = (char *)v26 + 448;
            }
            v32 = *v30;
            *(_QWORD *)(v19 + 152) = *v29;
            *(_QWORD *)(v19 + 160) = v32;
            *(_QWORD *)(v19 + 168) = v31;
            if (!v32)
              goto LABEL_33;
            v33 = (char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v48, (unint64_t)v21);
            *(_QWORD *)(v19 + 176) = re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags((re::HierarchicalMeshOverrideFlags *)(v33 + 2));
            if ((re::ecs2::MeshComponent::updateMaterialData((re::ecs2::MeshComponent *)v19, *(const re::ecs2::MeshSystem **)(a1 + 8), v26, (re::ecs2::Entity *)v21, *(const re::DirectResourceAssetTracker **)(*(_QWORD *)(a1 + 8) + 720)) & 1) != 0)
            {
              re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              *(_OWORD *)(v19 + 208) = 0u;
              *(_BYTE *)(v19 + 192) = 0;
              v34 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v34)
              {
                *(_BYTE *)(v19 + 192) = *(_BYTE *)(v34 + 25);
                *(_OWORD *)(v19 + 208) = *(_OWORD *)(v34 + 304);
              }
              re::ecs2::MeshComponent::updateStaticBoundingBoxData((_QWORD *)v19, (const re::ecs2::Entity *)v21, (const re::RenderManager *)v42);
              v35 = v45;
              v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v46);
              v37 = (re::ecs2::ComponentBucketsBase *)a3[2];
              v38 = a3[6];
            }
            else
            {
LABEL_31:
              v35 = v45;
              v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v46);
              v37 = (re::ecs2::ComponentBucketsBase *)a3[2];
              v38 = a3[4];
            }
            re::ecs2::ComponentBucketsBase::moveComponent(v37, v35, v36, v38);
          }
        }
LABEL_33:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v46);
      }
      while (v46 != a5 || (unsigned __int16)v47 != 0xFFFF || WORD1(v47) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Components should not be processed in headless mode.", "m_meshSystem->m_renderOptionsService", "processPreparingComponents", 1512);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::ecs2::MeshComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, _anonymous_namespace_ *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  _anonymous_namespace_ *v63;
  unsigned int v64;
  int *v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  re::DynamicString **v74;
  unsigned __int8 v75;
  uint64_t v76;
  uint64_t v77;
  const re::MeshAsset *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  re::ecs2::BillboardService *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  _anonymous_namespace_ *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t i;
  _QWORD *v125;
  uint64_t v126;
  re::RenderManager ***v127;
  re::RenderManager **v128;
  _BOOL4 v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  re::MaterialAsset *v143;
  re::MaterialAsset *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  re::MaterialParameterBlock *v154;
  uint64_t v155;
  uint64_t v156;
  re::Allocator *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  re::ecs2::EntityComponentCollection *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  re::ecs2::BillboardService *v172;
  uint64_t v173;
  float v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int *v180;
  int v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  re::ecs2::EntityComponentCollection *v187;
  uint64_t v188;
  uint64_t v189;
  BOOL v190;
  char v191;
  unsigned __int8 *v192;
  int v193;
  re::ecs2::EntityComponentCollection *v194;
  unsigned __int8 v195;
  unsigned __int8 *v196;
  int v197;
  uint64_t v198;
  BOOL v199;
  _anonymous_namespace_ *v200;
  _anonymous_namespace_ *v201;
  __int16 v202;
  uint64_t v203;
  uint64_t v204;
  BOOL v205;
  _anonymous_namespace_ *v206;
  char v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  _anonymous_namespace_ *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  float32x4_t v224;
  _BOOL4 v225;
  int32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float v229;
  float32x4_t v230;
  float v231;
  float32x2_t v232;
  float32x2_t v233;
  uint64_t v234;
  _anonymous_namespace_ *v235;
  int8x16_t v236;
  _anonymous_namespace_ *v237;
  float32x4_t v238;
  float32x4_t v239;
  int8x16_t v240;
  int8x16_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char var0;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  re::ecs2::Scene *v262;
  uint64_t v263;
  _anonymous_namespace_ *v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  simd_float3 v275;
  simd_float3 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  int v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  _OWORD *v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  int8x16_t v308;
  __int128 v309;
  re::LateLatch *v310;
  re::ecs2::BillboardService *v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  _DWORD *v316;
  re::RenderFrameData *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t (**v326)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v327;
  uint64_t v328;
  re *v329;
  unint64_t *v330;
  uint64_t v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  int *v341;
  uint64_t v342;
  re::ecs2::RenderingSubsystem *v343;
  _anonymous_namespace_ *v344;
  re::RenderFrame *v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  _BOOL8 v354;
  uint64_t v356;
  const char *v357;
  float32x4_t v358;
  float32x4_t v359;
  _anonymous_namespace_ *v360;
  uint64_t v361;
  int v363;
  uint64_t v364;
  uint64_t v365;
  float32x4_t v366;
  uint64_t v367;
  uint64_t v368;
  char v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char v376;
  __int16 v377;
  uint64_t v378;
  BOOL v379;
  BOOL v380;
  char v381;
  char v382;
  unsigned int v383;
  int v384;
  __int128 v385;
  uint64_t v386;
  float v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  float32x4_t v402;
  re::ecs2::Scene *v403;
  float32x4_t v404;
  uint64_t v405;
  int8x16_t v406;
  int8x16_t v407;
  uint64_t v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t ReflectionContentComponent;
  int v413[2];
  char v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  int v418;
  unint64_t v419;
  _anonymous_namespace_ *v420;
  _anonymous_namespace_ *v421;
  re::ecs2::RenderingSubsystem *v422;
  re::RenderFrame *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  simd_float3 v427;
  unsigned int v428;
  uint64_t v429;
  _QWORD v430[3];
  int v431;
  uint64_t v432;
  char v433;
  float v434;
  char v435;
  uint64_t v436;
  re::ecs2::Scene *v437[3];
  StringID v438;
  __int128 v439;
  __int128 v440;
  _QWORD v441[3];
  int v442;
  uint64_t v443;
  char v444;
  float v445;
  char v446;
  uint64_t v447;
  _QWORD v448[6];
  char v449;
  char v450;
  __int128 v451;
  float32x4_t v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  simd_float3 v456;
  __int128 v457;
  re::ecs2::BillboardService *v458;
  _anonymous_namespace_ *v459;
  __int128 v460;
  _QWORD v461[2];
  __int128 v462;
  __int128 v463;
  unsigned int v464;
  uint64_t v465;
  __int128 v466;
  __int128 v467;
  unsigned int v468;
  uint64_t v469;
  uint64_t v470[4];
  int v471;
  uint64_t v472;
  uint64_t v473[4];
  int v474;
  uint64_t v475;
  __int128 v476;
  __int128 v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  _BYTE v481[40];
  re::ecs2::BillboardService *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  char v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  simd_float3 v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _QWORD *v500;
  unint64_t v501;
  uint64_t v502;
  __int128 v503;
  float32x4_t *v504;
  uint64_t v505;
  __int128 *v506;
  float v507;
  uint64_t v508;
  float v509;
  unsigned int v510;
  int v511;
  __int16 v512;
  _anonymous_namespace_ *v513;
  _QWORD *v514;
  uint64_t v515;
  int v516;
  uint64_t v517;
  char v518;
  uint64_t v519;
  char v520;
  __int128 *v521;
  int v522;
  char v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  char v528;
  char v529;
  char v530;
  char v531;
  char v532;
  char v533;
  char v534;
  BOOL v535;
  BOOL v536;
  char v537;
  BOOL v538;
  __int128 *v539;
  __int128 v540[2];
  __int128 v541;
  __int128 v542;
  float32x4_t v543;
  __int128 v544;
  __int128 v545;
  simd_float3 v546;
  __int128 v547;
  simd_float3 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  uint64_t v557;
  uint64_t v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  uint64_t v563;
  _BYTE v564[32];
  __int128 v565;
  __int128 v566;
  _BYTE v567[88];
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  uint64_t v577;
  int8x16_t v578;
  _BYTE v579[19];
  unint64_t v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  uint64_t v585;
  simd_float3x3 v586;
  simd_float3x3 v587;

  v7 = a1;
  v585 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 8);
  v361 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
  v9 = re::RenderManager::perFrameAllocator((re::RenderManager *)v361);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 136) + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 136));
  v480 = v10;
  v478 = 0;
  v476 = 0u;
  v477 = 0u;
  v479 = 0x7FFFFFFFLL;
  v424 = v9;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v476, v9, 3);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v540, a5, 0);
  v11 = v540[0];
  v420 = a4;
  *(_QWORD *)&v540[0] = a4;
  *(__int128 *)((char *)v540 + 8) = v11;
  if ((_QWORD)v11 != a5 || WORD4(v11) != 0xFFFFLL || (DWORD2(v11) & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v540 + 4)
                      + 16);
      v580 = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v481, v10, v12);
      if (v481[0])
        v13 = *(_QWORD *)&v481[8];
      else
        v13 = 0;
      v580 = v13;
      *(_DWORD *)v481 = 0;
      v14 = (_QWORD *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v476, (uint64_t *)&v580, (int *)v481);
      ++*v14;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v540 + 4);
    }
    while (*((_QWORD *)&v540[0] + 1) != a5 || LOWORD(v540[1]) != 0xFFFF || WORD1(v540[1]) != 0xFFFF);
  }
  v474 = 0;
  memset(v473, 0, sizeof(v473));
  v475 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v473, v9, 3);
  v15 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 24);
    if (v16)
    {
      v17 = *(uint64_t **)(v15 + 40);
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        v20 = *(_QWORD *)(v19 + 16);
        *(_QWORD *)v481 = 0;
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v540, v10, v20);
        if (LOBYTE(v540[0]))
          v21 = *((_QWORD *)&v540[0] + 1);
        else
          v21 = 0;
        *(_QWORD *)v481 = v21;
        LODWORD(v540[0]) = 0;
        v22 = (_QWORD *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)v473, (uint64_t *)v481, (int *)v540);
        ++*v22;
        v18 -= 8;
      }
      while (v18);
    }
  }
  v471 = 0;
  memset(v470, 0, sizeof(v470));
  v472 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v470, v9, 3);
  v23 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 24);
    if (v24)
    {
      v25 = *(uint64_t **)(v23 + 40);
      v26 = 8 * v24;
      do
      {
        v27 = *v25++;
        v28 = *(_QWORD *)(v27 + 16);
        *(_QWORD *)v481 = 0;
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v540, v10, v28);
        if (LOBYTE(v540[0]))
          v29 = *((_QWORD *)&v540[0] + 1);
        else
          v29 = 0;
        *(_QWORD *)v481 = v29;
        LODWORD(v540[0]) = 0;
        v30 = (_QWORD *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)v470, (uint64_t *)v481, (int *)v540);
        ++*v30;
        v26 -= 8;
      }
      while (v26);
    }
  }
  v422 = (re::ecs2::RenderingSubsystem *)v8;
  v367 = a5;
  v466 = 0u;
  v467 = 0u;
  v468 = 0;
  v469 = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v466, v424, SHIDWORD(v477));
  v428 = v478;
  v31 = 0;
  if (v478)
  {
    v32 = (int *)(v477 + 8);
    while (1)
    {
      v33 = *v32;
      v32 += 8;
      if (v33 < 0)
        break;
      if (v478 == ++v31)
      {
        LODWORD(v31) = v478;
        break;
      }
    }
  }
  v425 = v7;
  if (v478 != (_DWORD)v31)
  {
    v34 = v31;
    v35 = (unint64_t)&v545;
    v36 = v477;
    v37 = (unint64_t)&v543;
    do
    {
      v38 = v36 + 32 * v34;
      v39 = (uint64_t *)(v38 + 16);
      v40 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v473, (uint64_t *)(v38 + 16));
      if (v40)
        v41 = *v40;
      else
        v41 = 0;
      v42 = *(_QWORD *)(v38 + 24);
      memset((char *)v540 + 8, 0, 20);
      *(_QWORD *)&v541 = 0;
      *(_QWORD *)&v540[0] = v424;
      re::DynamicArray<re::MeshScene>::setCapacity(v540, v42);
      *((_QWORD *)&v541 + 1) = 0;
      *(_QWORD *)&v542 = 0;
      ++DWORD2(v540[1]);
      DWORD2(v542) = 1;
      *(_QWORD *)&v544 = 0;
      v543 = 0uLL;
      DWORD2(v544) = 0;
      re::BucketArray<re::MeshDeformation,8ul>::init((uint64_t)&v541 + 8, v424, v41);
      *(_QWORD *)&v547 = 0;
      v546.i64[0] = 0;
      v545 = 0uLL;
      v546.i32[2] = 0;
      BYTE8(v547) = 0;
      *(_QWORD *)&v549 = 0;
      DWORD2(v549) = 0;
      *(_QWORD *)&v550 = 0;
      v548 = (simd_float3)(unint64_t)v424;
      re::DynamicArray<re::BlurPlaneData>::setCapacity(&v548, 0);
      ++DWORD2(v549);
      v551 = 0uLL;
      LODWORD(v552) = 0;
      *((_QWORD *)&v552 + 1) = 0;
      *((_QWORD *)&v550 + 1) = v424;
      re::DynamicArray<re::BlurPlaneData>::setCapacity((_QWORD *)&v550 + 1, 0);
      LODWORD(v552) = v552 + 1;
      LOWORD(v553) = 0;
      v43 = 0xBF58476D1CE4E5B9 * (*v39 ^ ((unint64_t)*v39 >> 30));
      v44 = (0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) ^ ((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) >> 31);
      if ((_QWORD)v466)
      {
        v45 = v44 % DWORD2(v467);
        v46 = *(unsigned int *)(*((_QWORD *)&v466 + 1) + 4 * v45);
        v7 = v425;
        if ((_DWORD)v46 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v467 + (v46 << 8) + 16) != *v39)
          {
            v46 = *(_DWORD *)(v467 + (v46 << 8) + 8) & 0x7FFFFFFF;
            if ((_DWORD)v46 == 0x7FFFFFFF)
              goto LABEL_40;
          }
          v48 = v467 + (v46 << 8);
          goto LABEL_42;
        }
      }
      else
      {
        LODWORD(v45) = 0;
        v7 = v425;
      }
LABEL_40:
      v47 = re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v466, v45, v44, v39, (uint64_t)v540);
      ++HIDWORD(v469);
      v48 = v467 + ((unint64_t)v47 << 8);
LABEL_42:
      v49 = v48 + 24;
      if (*((_QWORD *)&v550 + 1))
      {
        if (*((_QWORD *)&v552 + 1))
          (*(void (**)(void))(**((_QWORD **)&v550 + 1) + 40))();
        *((_QWORD *)&v552 + 1) = 0;
        v551 = 0uLL;
        *((_QWORD *)&v550 + 1) = 0;
        LODWORD(v552) = v552 + 1;
      }
      if (v548.i64[0])
      {
        if ((_QWORD)v550)
          (*(void (**)(void))(*(_QWORD *)v548.i64[0] + 40))();
        *(_QWORD *)&v550 = 0;
        *(_QWORD *)&v549 = 0;
        v548 = 0uLL;
        ++DWORD2(v549);
      }
      re::DynamicArray<re::StencilPortal>::deinit((uint64_t)&v545);
      re::BucketArray<re::MeshDeformation,8ul>::deinit((uint64_t)&v541 + 8);
      if (*((_QWORD *)&v541 + 1))
      {
        v50 = DWORD2(v542);
        if ((BYTE8(v542) & 1) == 0)
        {
          (*(void (**)(void))(**((_QWORD **)&v541 + 1) + 40))();
          v50 = DWORD2(v542);
        }
        *((_QWORD *)&v541 + 1) = 0;
        *(_QWORD *)&v542 = 0;
        DWORD2(v542) = (v50 | 1) + 2;
      }
      re::DynamicArray<re::MeshScene>::deinit((uint64_t)v540);
      v51 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v470, v39);
      if (v51)
      {
        v52 = *v51;
        memset((char *)v540 + 8, 0, 20);
        *(_QWORD *)&v541 = 0;
        *(_QWORD *)&v540[0] = v424;
        re::DynamicArray<re::StencilPortal>::setCapacity(v540, v52);
        v54 = DWORD2(v540[1])++;
        if ((__int128 *)(v49 + 96) != v540)
        {
          v55 = *(_QWORD *)(v49 + 96);
          if (v55)
            v56 = *(_QWORD *)&v540[0] == 0;
          else
            v56 = 1;
          if (!v56 && v55 != *(_QWORD *)&v540[0])
          {
LABEL_464:
            re::internal::assertLog((re::internal *)4, v53, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
            _os_crash();
            __break(1u);
LABEL_465:
            v580 = 0;
            v542 = 0u;
            v543 = 0u;
            v541 = 0u;
            memset(v540, 0, sizeof(v540));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v481 = 136315906;
            *(_QWORD *)&v481[4] = "operator[]";
            *(_WORD *)&v481[12] = 1024;
            *(_DWORD *)&v481[14] = 858;
            *(_WORD *)&v481[18] = 2048;
            *(_QWORD *)&v481[20] = v35;
            *(_WORD *)&v481[28] = 2048;
            *(_QWORD *)&v481[30] = v37;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_QWORD *)(v49 + 96) = *(_QWORD *)&v540[0];
          *(_QWORD *)&v540[0] = v55;
          v58 = *(_OWORD *)(v49 + 104);
          *(_OWORD *)(v49 + 104) = *(__int128 *)((char *)v540 + 8);
          *(__int128 *)((char *)v540 + 8) = v58;
          v59 = *(_QWORD *)(v49 + 128);
          *(_QWORD *)(v49 + 128) = v541;
          *(_QWORD *)&v541 = v59;
          DWORD2(v540[1]) = v54 + 2;
          ++*(_DWORD *)(v49 + 120);
        }
        re::DynamicArray<re::StencilPortal>::deinit((uint64_t)v540);
      }
      *(_BYTE *)(v49 + 136) = 0;
      v36 = v477;
      if (v478 <= (int)v31 + 1)
        v60 = v31 + 1;
      else
        v60 = v478;
      while (1)
      {
        v34 = (v31 + 1);
        if (v60 - 1 == (_DWORD)v31)
          break;
        LODWORD(v31) = v31 + 1;
        v61 = v34;
        if ((*(_DWORD *)(v477 + 32 * v34 + 8) & 0x80000000) != 0)
          goto LABEL_73;
      }
      v61 = v60;
LABEL_73:
      LODWORD(v31) = v61;
    }
    while (v428 != v61);
  }
  v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 40));
  v360 = (_anonymous_namespace_ *)re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v62);
  v462 = 0u;
  v463 = 0u;
  v464 = 0;
  v465 = 0x7FFFFFFFLL;
  v64 = v478;
  if (v478)
  {
    v37 = 0;
    v65 = (int *)(v477 + 8);
    v66 = a5;
    while (1)
    {
      v67 = *v65;
      v65 += 8;
      if (v67 < 0)
        break;
      if (v478 == ++v37)
      {
        v37 = v478;
        break;
      }
    }
  }
  else
  {
    v37 = 0;
    v66 = a5;
  }
  if (v478 != (_DWORD)v37)
  {
    v68 = v37;
    v69 = v477;
    do
    {
      v70 = (uint64_t *)(v69 + 32 * v68 + 16);
      LODWORD(v541) = 0;
      memset(v540, 0, sizeof(v540));
      *(_QWORD *)((char *)&v541 + 4) = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v462, v70, (uint64_t *)v540);
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v540);
      v69 = v477;
      if (v478 <= (int)v37 + 1)
        v71 = (v37 + 1);
      else
        v71 = v478;
      v72 = v37;
      while (1)
      {
        v68 = (v72 + 1);
        if ((_DWORD)v71 - 1 == v72)
          break;
        ++v72;
        v37 = v68;
        if ((*(_DWORD *)(v477 + 32 * v68 + 8) & 0x80000000) != 0)
          goto LABEL_90;
      }
      v37 = v71;
LABEL_90:
      ;
    }
    while (v64 != (_DWORD)v37);
  }
  v73 = *(_QWORD *)(v361 + 104);
  if (v73)
    v74 = (re::DynamicString **)re::RenderFrameBox::get(v73 + 344, 0xFFFFFFFFFFFFFFFuLL);
  else
    v74 = 0;
  v423 = (re::RenderFrame *)v74;
  re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, 0, v74, v461);
  if (re::s_debugSettingsManager)
  {
    *(_QWORD *)&v540[0] = 0x24602E277FE387A2;
    *((_QWORD *)&v540[0] + 1) = "perceptualBlendingMode";
    *(_DWORD *)v481 = 0;
    if (!re::DebugSettingsManager::getWithErrorCode<int>(re::s_debugSettingsManager, v540, v481))
    {
      v363 = *(_DWORD *)v481;
      re::StringID::destroyString((re::StringID *)v540);
      goto LABEL_100;
    }
    re::StringID::destroyString((re::StringID *)v540);
  }
  if ((v75 & 1) == 0)
  {
    if ((_DWORD)v356)
    {
    }
  }
  v363 = 2 * re::internal::perceptual_alpha::never_use_this::g_enablePerceptualAlpha;
LABEL_100:
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v540, v66, 0);
  v459 = v420;
  v460 = v540[0];
  if (*(_QWORD *)&v540[0] != v66 || WORD4(v540[0]) != 0xFFFFLL || (DWORD2(v540[0]) & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      v76 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v460);
      v77 = *(_QWORD *)v76;
      v458 = *(re::ecs2::BillboardService **)(*(_QWORD *)v76 + 16);
      v78 = (const re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v77 + 32));
      if (!*(_QWORD *)(v77 + 232)
        && (re::ecs2::MeshComponent::updateMaterialData((re::ecs2::MeshComponent *)v77, *(const re::ecs2::MeshSystem **)(v7 + 8), v78, v458, *(const re::DirectResourceAssetTracker **)(*(_QWORD *)(v7 + 8) + 720)) & 1) == 0)
      {
        v102 = (unint64_t)v459;
        v103 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v460);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v102, v103, *(_QWORD *)(a3 + 32));
        goto LABEL_393;
      }
      v79 = re::ecs2::containsShaderGraphMaterialWithLightSpillNode(*(_QWORD *)(v77 + 72), *(const re::ecs2::MeshComponent **)(v77 + 88));
      if (v79)
      {
        v80 = *(_QWORD *)(v77 + 16);
        do
        {
          v81 = v80;
          v80 = *(_QWORD *)(v80 + 24);
        }
        while (v80);
        ReflectionContentComponent = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(*(re::ecs2::ImageBasedReflectionSystem **)(v81 + 16), 0);
      }
      else
      {
        ReflectionContentComponent = 0;
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, re::ecs2::BillboardService *))(*(_QWORD *)v480 + 8))(v540, v480, v458);
      if (LOBYTE(v540[0]))
        v82 = *((_QWORD *)&v540[0] + 1);
      else
        v82 = 0;
      v421 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v466, v82);
      re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(*(_QWORD *)(v7 + 8) + 152), (re::ecs2::TransformComponent **)v458, &v454);
      re::ecs2::DynamicBoundingBoxComponent::lastKnownBoundsHelper(v458, &v452);
      v83 = *(_QWORD *)(v77 + 176);
      v419 = re::ecs2::MeshComponentHelper::clippingDataForMeshScene((uint64_t)v458, (const re::ecs2::MeshComponent *)&v452, (float32x4_t *)&v454, *(_QWORD *)(*(_QWORD *)(v7 + 8) + 648));
      if (BYTE5(v419))
        goto LABEL_393;
      v405 = v83;
      v84 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v424 + 32))(v424, 24, 8);
      v84[1] = 0;
      v84[2] = 0;
      *v84 = 0;
      re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(v84, v424, *(_QWORD *)(v77 + 160));
      re::FixedArray<re::SkinningInfluence>::copy(v84, v77 + 152);
      v85 = v458;
      v86 = *((_QWORD *)v458 + 23);
      v400 = v84;
      if (v86 && (v37 = *(_QWORD *)(v86 + 392)) != 0)
      {
        v88 = v84[1];
        v87 = v84[2];
        v415 = *(_QWORD *)(v37 + 24);
        v417 = *(_QWORD *)(v37 + 16);
        v429 = *(_QWORD *)(v37 + 48);
        v426 = *(_QWORD *)(v37 + 40);
        v35 = *(_QWORD *)(v37 + 88);
        v89 = *(const void **)(v37 + 96);
        v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v424 + 32))(v424, 24, 8);
        *(_QWORD *)(v90 + 8) = 0;
        *(_QWORD *)(v90 + 16) = 0;
        *(_QWORD *)v90 = 0;
        re::FixedArray<re::DeformationInputData>::init<>((uint64_t *)v90, v424, v35);
        if (*(_QWORD *)(v90 + 8) != v35)
          goto LABEL_462;
        if (v35)
          memmove(*(void **)(v90 + 16), v89, 168 * v35);
        v92 = v421;
        if (*((_QWORD *)v421 + 5))
        {
          v93 = *(_QWORD *)(v37 + 112);
          v91 = *(_QWORD *)(v37 + 120);
          v95 = *(_QWORD *)(v37 + 64);
          v94 = *(_QWORD *)(v37 + 72);
          v96 = *(_QWORD *)(v90 + 8);
          v97 = *(_QWORD *)(v90 + 16);
          v98 = *((_QWORD *)v421 + 10);
          v37 = *((_QWORD *)v421 + 6);
          if (v98 + 1 > 8 * v37)
          {
            *(_QWORD *)v413 = v91;
            v410 = v94;
            v99 = v93;
            v100 = v96;
            v408 = v95;
            re::BucketArray<re::MeshDeformation,8ul>::setBucketsCapacity((uint64_t *)v421 + 5, (v98 + 8) >> 3);
            v95 = v408;
            v91 = *(_QWORD *)v413;
            v94 = v410;
            v96 = v100;
            v93 = v99;
            v92 = v421;
            v37 = *((_QWORD *)v421 + 6);
          }
          v35 = v98 >> 3;
          if (v37 <= v98 >> 3)
            goto LABEL_465;
          if ((*((_BYTE *)v92 + 56) & 1) != 0)
            v101 = (char *)v92 + 64;
          else
            v101 = (char *)*((_QWORD *)v92 + 9);
          v104 = *(_QWORD *)&v101[8 * v35];
          ++*((_QWORD *)v92 + 10);
          ++*((_DWORD *)v92 + 22);
          v105 = (_QWORD *)(v104 + 104 * (v98 & 7));
          *v105 = v87;
          v105[1] = v88;
          v105[2] = v415;
          v105[3] = v417;
          v105[4] = v429;
          v105[5] = v426;
          v105[6] = v94;
          v105[7] = v95;
          v105[8] = v97;
          v105[9] = v96;
          v105[10] = v91;
          v105[11] = v93;
          v105[12] = 0;
        }
        v106 = *((_QWORD *)v92 + 10);
        if (!v106)
          goto LABEL_463;
        v398 = re::BucketArray<re::MeshDeformation,8ul>::operator[]((uint64_t)v421 + 40, v106 - 1);
        v85 = v458;
        v7 = v425;
      }
      else
      {
        v398 = 0;
      }
      v107 = *(_QWORD *)(v77 + 288);
      v108 = v107 + 80;
      v109 = v107 + 152;
      v110 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v85 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      v376 = v79;
      if (v110)
      {
        v112 = *(_QWORD *)(v110 + 96);
        v113 = v112 == 0;
        if (v112)
          v108 = v112 + 80;
        v114 = v112 + 152;
        if (v113)
          v114 = v109;
        v115 = *(_QWORD *)(v110 + 152);
        if (v115)
          v116 = v115 + 40;
        else
          v116 = v109;
        v399 = v116;
        v109 = v114;
      }
      else
      {
        v399 = v109;
      }
      v35 = *(_QWORD *)(v77 + 232);
      v427.i64[0] = *(_QWORD *)(v35 + 112);
      v427.i64[1] = *(_QWORD *)(v35 + 104);
      v395 = *(_QWORD *)(v35 + 136);
      v394 = *(_QWORD *)(v35 + 128);
      v393 = *(_QWORD *)(v35 + 160);
      v392 = *(_QWORD *)(v35 + 152);
      v391 = *(_QWORD *)(v35 + 208);
      v390 = *(_QWORD *)(v35 + 200);
      v117 = *(_QWORD *)(v35 + 176);
      v397 = v109;
      v396 = v108;
      if (v117)
      {
        if (v117 >> 61)
          goto LABEL_460;
        v118 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v424 + 32))(v424, 8 * v117, 8);
        if (!v118)
        {
LABEL_461:
          re::internal::assertLog((re::internal *)4, v119, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_462:
          re::internal::assertLog((re::internal *)4, v91, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
          _os_crash();
          __break(1u);
LABEL_463:
          re::internal::assertLog((re::internal *)4, v91, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
          goto LABEL_464;
        }
        v120 = v118;
        v121 = v118;
        if (v117 != 1)
        {
          bzero(v118, 8 * v117 - 8);
          v121 = &v120[v117 - 1];
        }
        *v121 = 0;
        v122 = *(_QWORD *)(v35 + 176);
        if (v122)
        {
          v123 = 0;
          for (i = 0; v122 != i; ++i)
          {
            v125 = (_QWORD *)(*(_QWORD *)(v35 + 184) + v123);
            if (*v125 || v125[1])
            {
              if (v117 <= i)
              {
                v580 = 0;
                v542 = 0u;
                v543 = 0u;
                v541 = 0u;
                memset(v540, 0, sizeof(v540));
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v481 = 136315906;
                *(_QWORD *)&v481[4] = "operator[]";
                *(_WORD *)&v481[12] = 1024;
                *(_DWORD *)&v481[14] = 468;
                *(_WORD *)&v481[18] = 2048;
                *(_QWORD *)&v481[20] = i;
                *(_WORD *)&v481[28] = 2048;
                *(_QWORD *)&v481[30] = v117;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_454:
                re::internal::assertLog((re::internal *)6, v204, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v82, v427.i64[1]);
                _os_crash();
                __break(1u);
LABEL_455:
                re::internal::assertLog((re::internal *)4, v253, "assertion failure: '%s' (%s:line %i) ", "referencingPortalComponent != nullptr", "processUpdatingComponents", 2176);
                _os_crash();
                __break(1u);
LABEL_456:
                *(_QWORD *)&v454 = 0;
                v542 = 0u;
                v543 = 0u;
                v541 = 0u;
                memset(v540, 0, sizeof(v540));
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v481 = 136315906;
                *(_QWORD *)&v481[4] = "operator[]";
                *(_WORD *)&v481[12] = 1024;
                *(_DWORD *)&v481[14] = 858;
                *(_WORD *)&v481[18] = 2048;
                *(_QWORD *)&v481[20] = v82;
                *(_WORD *)&v481[28] = 2048;
                *(_QWORD *)&v481[30] = i;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_457:
                re::internal::assertLog((re::internal *)4, v331, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                _os_crash();
                __break(1u);
LABEL_458:
                v35 = v335 >> 2;
                *(_QWORD *)&v454 = 0;
                v542 = 0u;
                v543 = 0u;
                v541 = 0u;
                memset(v540, 0, sizeof(v540));
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v481 = 136315906;
                *(_QWORD *)&v481[4] = "operator[]";
                *(_WORD *)&v481[12] = 1024;
                *(_DWORD *)&v481[14] = 858;
                *(_WORD *)&v481[18] = 2048;
                *(_QWORD *)&v481[20] = v35;
                *(_WORD *)&v481[28] = 2048;
                *(_QWORD *)&v481[30] = i;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_459:
                v580 = 0;
                v542 = 0u;
                v543 = 0u;
                v541 = 0u;
                memset(v540, 0, sizeof(v540));
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v481 = 136315906;
                *(_QWORD *)&v481[4] = "operator[]";
                *(_WORD *)&v481[12] = 1024;
                *(_DWORD *)&v481[14] = 468;
                *(_WORD *)&v481[18] = 2048;
                *(_QWORD *)&v481[20] = i;
                *(_WORD *)&v481[28] = 2048;
                *(_QWORD *)&v481[30] = v117;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_460:
                re::internal::assertLog((re::internal *)6, v111, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v117);
                _os_crash();
                __break(1u);
                goto LABEL_461;
              }
            }
            else
            {
              if (v117 <= i)
                goto LABEL_459;
              v125 = 0;
            }
            v120[i] = v125;
            v123 += 16;
          }
        }
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v424 + 40))(v424, v120);
      }
      else
      {
        v120 = 0;
      }
      v126 = *(_QWORD *)(v77 + 16);
      *(_QWORD *)&v438.var0 = v126;
      v127 = *(re::RenderManager ****)(*(_QWORD *)(v7 + 8) + 112);
      *(_QWORD *)&v540[0] = 0;
      DWORD2(v540[0]) = 0;
      v128 = v127[3];
      *(_QWORD *)v481 = *(_QWORD *)(v126 + 296);
      v129 = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v128 + 129), (uint64_t *)v481);
      v130 = v129;
      if (v129)
      {
        v131 = re::MaterialManager::getOrAddSystemMaterialParameterBlock(v127[3], *(_QWORD *)(v126 + 296));
        if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(v540, v132))
        {
          v133 = *(_QWORD *)&v540[0];
          *((_QWORD *)&v540[1] + *(_QWORD *)&v540[0]) = v131;
          *(_QWORD *)&v540[0] = v133 + 1;
          ++DWORD2(v540[0]);
        }
      }
      v403 = (re::ecs2::Scene *)v82;
      v134 = (*(uint64_t (**)(_QWORD, re::ecs2::RenderingSubsystem *))(**(_QWORD **)(*(_QWORD *)(v425 + 8)
                                                                                             + 696)
                                                                               + 24))(*(_QWORD *)(*(_QWORD *)(v425 + 8) + 696), v422);
      v135 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v134, (uint64_t *)&v438);
      if (v135)
      {
        v136 = re::ecs2::EntityHandle::resolve((id *)(*(_QWORD *)v135 + 32), (uint64_t)v422);
        if (v136)
        {
          v137 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v136 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v137)
          {
            v139 = v137;
            if (*(_BYTE *)(v137 + 152))
            {
              if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(v540, v138))
              {
                v140 = *(_QWORD *)&v540[0];
                *((_QWORD *)&v540[1] + *(_QWORD *)&v540[0]) = v139 + 160;
                *(_QWORD *)&v540[0] = v140 + 1;
                ++DWORD2(v540[0]);
              }
            }
          }
        }
      }
      v141 = *(_QWORD *)(v77 + 72);
      if (v141)
      {
        v142 = 0;
        v143 = *(re::MaterialAsset **)(v77 + 88);
        v144 = (re::MaterialAsset *)((char *)v143 + 24 * v141);
        do
        {
          v145 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v143);
          if (v145)
          {
            if ((*(_BYTE *)(v145 + 1730) & 0xFE) == 6)
            {
              v146 = *(_QWORD *)(*(_QWORD *)(v425 + 8) + 712);
              if (v146)
                *(_BYTE *)(v146 + 132) = 1;
            }
            v147 = *(_QWORD *)(v145 + 392);
            if (v147)
            {
              v148 = *(_QWORD *)(v145 + 408);
              v149 = v148 + 272 * v147;
              do
              {
                v150 = 4 * *(_QWORD *)(v148 + 112) + 4;
                v151 = v142;
                do
                {
                  v142 = v151;
                  v151 = 1;
                  v150 -= 4;
                }
                while (v150);
                v148 += 272;
              }
              while (v148 != v149);
            }
          }
          v143 = (re::MaterialAsset *)((char *)v143 + 24);
        }
        while (v143 != v144);
        if ((v142 & 1) != 0)
        {
          v152 = *(_QWORD *)(*(_QWORD *)&v438.var0 + 240);
          if (v152)
          {
            v153 = *(_QWORD *)(v152 + 136);
            if (v153)
            {
              v154 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v127[3], *(_QWORD *)(*(_QWORD *)&v438.var0 + 296));
              LODWORD(v437[0]) = *(_DWORD *)(v153 + 44);
              v580 = 0x284C61CF2B0;
              re::MaterialParameterBlock::setConstant(v154, (uint64_t *)&v580, 4uLL, v437, 3, (uint64_t)v481);
              *(_QWORD *)v481 = 0;
              if (!v130)
              {
                if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(v540, v155))
                {
                  v156 = *(_QWORD *)&v540[0];
                  *((_QWORD *)&v540[1] + *(_QWORD *)&v540[0]) = v154;
                  *(_QWORD *)&v540[0] = v156 + 1;
                  ++DWORD2(v540[0]);
                }
              }
            }
          }
        }
      }
      v157 = (re::Allocator *)re::RenderManager::perFrameAllocator((re::RenderManager *)v127);
      if (*(_QWORD *)&v540[0])
      {
        if (*(_QWORD *)&v540[0] == 1)
          v158 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(*(re::MaterialParameterBlock **)&v540[1], v157);
        else
          v158 = (uint64_t)re::MaterialParameterBlock::copyParametersFromArray(v157, &v540[1], *(uint64_t *)&v540[0]);
        v389 = v158;
        v159 = v425;
      }
      else
      {
        v389 = 0;
        v159 = v425;
      }
      v160 = *(_QWORD *)(v77 + 232);
      v375 = *(_QWORD *)(v160 + 16);
      v374 = *(_QWORD *)(v160 + 8);
      v372 = *(_QWORD *)(v160 + 32);
      v373 = *(_QWORD *)(v160 + 40);
      v370 = *(_QWORD *)(v160 + 64);
      v371 = *(_QWORD *)(v160 + 80);
      v369 = *(_BYTE *)(v160 + 88);
      v161 = (re::ecs2::BillboardService *)((char *)v458 + 32);
      v162 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v458 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v163 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
             + 8);
      if (*((_QWORD *)v422 + 28) > v163)
      {
        v164 = *(_QWORD *)(*((_QWORD *)v422 + 30) + 8 * v163);
        if (v164)
        {
          if (!v162)
          {
            if (*(_QWORD *)(v164 + 24))
            {
              v162 = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(v422, 0);
              if (v162)
              {
                v165 = v162;
                v162 = re::ecs2::EntityComponentCollection::get(v161, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v162)
                  v162 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v165 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              }
            }
          }
        }
      }
      v166 = *(_QWORD *)(v77 + 232);
      v388 = *(unsigned __int8 *)(v166 + 240);
      if (*(_BYTE *)(v166 + 240))
        v364 = *(_QWORD *)(v166 + 248);
      v386 = v162;
      v414 = *(_BYTE *)(v77 + 192);
      v451 = *(_OWORD *)(v77 + 208);
      v167 = *(_QWORD *)(*(_QWORD *)(v159 + 8) + 656);
      if (v167)
      {
        LODWORD(v168) = (*(uint64_t (**)(uint64_t, re::ecs2::BillboardService *))(*(_QWORD *)v167 + 24))(v167, v458);
        v170 = v169;
        v171 = v168;
      }
      else
      {
        v170 = 0;
        v171 = 1.0;
      }
      v368 = re::ecs2::MeshComponentHelper::techniqueMappingOverlayNameHashForMeshScene((re::ecs2::MeshComponentHelper *)(HIDWORD(v419) & 1), v171);
      v172 = v458;
      v173 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v159 + 8) + 664) + 16))(*(_QWORD *)(*(_QWORD *)(v159 + 8) + 664));
      v174 = 1.0;
      if (*(_QWORD *)v173)
      {
        v175 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * ((unint64_t)v172 ^ ((unint64_t)v172 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v172 ^ ((unint64_t)v172 >> 30))) >> 27));
        v176 = *(unsigned int *)(*(_QWORD *)(v173 + 8) + 4 * ((v175 ^ (v175 >> 31)) % *(unsigned int *)(v173 + 24)));
        if ((_DWORD)v176 != 0x7FFFFFFF)
        {
          v177 = *(_QWORD *)(v173 + 16);
          while (*(re::ecs2::BillboardService **)(v177 + 32 * v176 + 16) != v172)
          {
            v176 = *(_DWORD *)(v177 + 32 * v176 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v176 == 0x7FFFFFFF)
              goto LABEL_209;
          }
          v174 = *(float *)(v177 + 32 * v176 + 24);
        }
      }
LABEL_209:
      if (*((_QWORD *)v458 + 31))
      {
        *(_QWORD *)&v385 = *(_QWORD *)(*(_QWORD *)(v77 + 232) + 232);
        *((_QWORD *)&v385 + 1) = *(_QWORD *)(*(_QWORD *)(v77 + 232) + 224);
      }
      else
      {
        v385 = 0uLL;
      }
      v411 = *((_QWORD *)v458 + 37);
      v178 = *(_QWORD *)(*(_QWORD *)(v159 + 8) + 680);
      *(_QWORD *)&v540[0] = v458;
      v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 16))(v178);
      v180 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v179, (uint64_t *)v540);
      if (v180)
        v181 = *v180;
      else
        v181 = 1;
      v384 = v181;
      v383 = *(_DWORD *)(v77 + 144);
      v182 = re::ecs2::MeshComponentHelper::environmentLightingWeightForMeshScene((unint64_t)v458, *(_QWORD *)(*(_QWORD *)(v159 + 8) + 672));
      v183 = (*(uint64_t (**)(_QWORD, re::ecs2::RenderingSubsystem *))(**(_QWORD **)(*(_QWORD *)(v159 + 8)
                                                                                             + 696)
                                                                               + 24))(*(_QWORD *)(*(_QWORD *)(v159 + 8) + 696), v422);
      v184 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v183, (uint64_t *)&v458);
      v387 = v171;
      v401 = v170;
      if (v184 && (v185 = re::ecs2::EntityHandle::resolve((id *)(*(_QWORD *)v184 + 32), (uint64_t)v422)) != 0)
        v378 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v185 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      else
        v378 = 0;
      v186 = *(_QWORD *)(*(_QWORD *)(v159 + 8) + 128);
      v187 = (re::ecs2::BillboardService *)((char *)v458 + 32);
      v188 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v458 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v189 = re::ecs2::EntityComponentCollection::get(v187, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v188)
        v190 = v189 == 0;
      else
        v190 = 1;
      v191 = v190;
      v382 = v191;
      if (v190)
      {
        v381 = 0;
      }
      else
      {
        if (v186)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v186 + 72))(v540, v186, v189 + 32, &v454);
        }
        else
        {
          v540[0] = xmmword_2260E5F10;
          v540[1] = xmmword_2260E5F20;
          v541 = xmmword_2260E5F40;
          v542 = xmmword_2260E5D70;
        }
        v581 = v540[0];
        v582 = v540[1];
        v583 = v541;
        v584 = v542;
        v381 = 1;
      }
      v192 = *(unsigned __int8 **)(v77 + 232);
      v193 = v192[256];
      v37 = v192[257];
      v418 = v192[258];
      v194 = (re::ecs2::BillboardService *)((char *)v458 + 32);
      v195 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v458 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
      v196 = (unsigned __int8 *)re::ecs2::EntityComponentCollection::get(v194, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v196)
      {
        i = v196[25];
        v195 = v196[27];
        v197 = (v196[26] << 8) | (v196[28] << 24);
      }
      else
      {
        i = 0;
        v197 = 16777472;
      }
      v416 = v197;
      v198 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v458 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v198)
        v199 = *(_BYTE *)(v198 + 25) != 0;
      else
        v199 = 1;
      v380 = v199;
      v365 = re::ecs2::EntityComponentCollection::get((re::ecs2::BillboardService *)((char *)v458 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v379 = v365 != 0;
      v200 = (_anonymous_namespace_ *)re::ecs2::MeshComponentHelper::renderPassGroupDataForMeshScene((uint64_t)v458, 0, *(_QWORD *)(*(_QWORD *)(v425 + 8) + 728), *(unsigned __int8 *)(*(_QWORD *)(v77 + 232) + 259), (uint64_t)v461, *((_QWORD *)v423 + 46));
      v201 = v200;
      v406.i16[0] = v202;
      if (*(_QWORD *)(v77 + 72))
      {
        v203 = 0;
        v82 = 0;
        do
        {
          v200 = re::AssetHandle::isAnyDependencyMutated((re::AssetManager *)(*(_QWORD *)(v77 + 88) + v203), v540);
          if (LOBYTE(v540[0]))
            v205 = BYTE1(v540[0]) == 0;
          else
            v205 = 1;
          if (!v205)
          {
            if (v427.i64[1] <= v82)
              goto LABEL_454;
            atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v427.i64[0] + 8 * v82) + 1369));
          }
          ++v82;
          v203 += 24;
        }
        while (v82 < *(_QWORD *)(v77 + 72));
      }
      v206 = v421;
      v409 = i & 0xFFFEFFFF | ((v195 & 1) << 16) | v416;
      if (i & 1 | v416 & 1)
        *((_BYTE *)v421 + 136) = 1;
      v207 = *(_BYTE *)(*(_QWORD *)(v77 + 232) + 259);
      if (v193)
      {
        v540[0] = v454;
        v540[1] = v455;
        v541 = (__int128)v456;
        v542 = v457;
        v208 = v451;
        v543 = v452;
        v544 = v453;
        *((_BYTE *)v421 + 224) = 1;
        *(_OWORD *)&v481[7] = v208;
        v209 = *((_QWORD *)v421 + 19);
        v210 = *((_QWORD *)v421 + 20);
        v7 = v425;
        v211 = v201;
        if (v210 >= v209)
        {
          v212 = v210 + 1;
          if (v209 < v210 + 1)
          {
            if (*((_QWORD *)v421 + 18))
            {
              v213 = 2 * v209;
              v56 = v209 == 0;
              v214 = 8;
              if (!v56)
                v214 = v213;
              if (v214 <= v212)
                v215 = v212;
              else
                v215 = v214;
              re::DynamicArray<re::BlurPlaneData>::setCapacity((_QWORD *)v421 + 18, v215);
            }
            else
            {
              re::DynamicArray<re::BlurPlaneData>::setCapacity((_QWORD *)v421 + 18, v212);
              ++*((_DWORD *)v421 + 42);
            }
            v7 = v425;
            v206 = v421;
            v211 = v201;
          }
          v210 = *((_QWORD *)v206 + 20);
        }
        v222 = *((_QWORD *)v206 + 22) + 144 * v210;
        *(_OWORD *)(v222 + 80) = v544;
        *(float32x4_t *)(v222 + 64) = v543;
        *(_OWORD *)(v222 + 48) = v542;
        *(_OWORD *)(v222 + 32) = v541;
        *(_OWORD *)v222 = v540[0];
        *(_OWORD *)(v222 + 16) = v540[1];
        *(_QWORD *)(v222 + 96) = v411;
        *(_BYTE *)(v222 + 104) = v414;
        *(_OWORD *)(v222 + 105) = *(_OWORD *)v481;
        *(_QWORD *)(v222 + 120) = *(_QWORD *)&v481[15];
        *(_BYTE *)(v222 + 128) = v37;
        *(_BYTE *)(v222 + 129) = v418;
        ++*((_QWORD *)v206 + 20);
        ++*((_DWORD *)v206 + 42);
      }
      else
      {
        v7 = v425;
        v211 = v201;
        if (v418)
        {
          v540[0] = (__int128)v452;
          v540[1] = v453;
          v541 = v454;
          v542 = v455;
          v543 = (float32x4_t)v456;
          v544 = v457;
          *(_OWORD *)&v481[15] = v451;
          v216 = *((_QWORD *)v421 + 24);
          v217 = *((_QWORD *)v421 + 25);
          if (v217 >= v216)
          {
            v218 = v217 + 1;
            if (v216 < v217 + 1)
            {
              if (*((_QWORD *)v421 + 23))
              {
                v219 = 2 * v216;
                v56 = v216 == 0;
                v220 = 8;
                if (!v56)
                  v220 = v219;
                if (v220 <= v218)
                  v221 = v218;
                else
                  v221 = v220;
                re::DynamicArray<re::BlurPlaneData>::setCapacity((_QWORD *)v421 + 23, v221);
              }
              else
              {
                re::DynamicArray<re::BlurPlaneData>::setCapacity((_QWORD *)v421 + 23, v218);
                ++*((_DWORD *)v421 + 52);
              }
              v7 = v425;
              v206 = v421;
              v211 = v201;
            }
            v217 = *((_QWORD *)v206 + 25);
          }
          v267 = *((_QWORD *)v206 + 27) + 144 * v217;
          *(_OWORD *)(v267 + 16) = v540[1];
          *(_OWORD *)v267 = v540[0];
          *(_OWORD *)(v267 + 80) = v544;
          *(float32x4_t *)(v267 + 64) = v543;
          *(_OWORD *)(v267 + 48) = v542;
          *(_OWORD *)(v267 + 32) = v541;
          *(_BYTE *)(v267 + 96) = v414;
          *(_OWORD *)(v267 + 97) = *(_OWORD *)v481;
          *(_OWORD *)(v267 + 112) = *(_OWORD *)&v481[15];
          *(_QWORD *)(v267 + 128) = v411;
          ++*((_QWORD *)v206 + 25);
          ++*((_DWORD *)v206 + 52);
          if (!(_DWORD)v37)
            goto LABEL_275;
LABEL_274:
          *((_BYTE *)v206 + 225) = 1;
          goto LABEL_275;
        }
      }
      if ((_DWORD)v37)
        goto LABEL_274;
LABEL_275:
      v37 = v409;
      v223 = *((_QWORD *)v458 + 26);
      v448[0] = &v462;
      v448[1] = v403;
      v448[2] = &v452;
      v448[3] = &v454;
      v448[4] = v401;
      v448[5] = v211;
      v449 = v406.i8[0] & 1;
      v450 = v207;
      v224 = re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable((uint64_t)v448);
      v377 = (*(uint64_t (**)(_QWORD, re::ecs2::BillboardService *, float32x4_t))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 688)
                                                                                          + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 688), v458, v224);
      if (!v223)
      {
        var0 = 0;
        *(_BYTE *)&v438.var0 = 0;
        v248 = *(_QWORD *)(v7 + 8);
        if (!*(_QWORD *)(v248 + 136))
          goto LABEL_365;
        v249 = v386;
        if ((((v405 ^ 0x180197E) & ~HIDWORD(v405) | HIDWORD(v405) & v405) & 0x80) != 0)
        {
          v250 = *(_QWORD *)(v248 + 728);
          *(_QWORD *)v481 = *(_QWORD *)(v248 + 672);
          *(_QWORD *)&v481[8] = v250;
          *(_OWORD *)&v481[16] = *(_OWORD *)(v248 + 648);
          *(_QWORD *)&v481[32] = v424;
          v482 = v458;
          v483 = v386;
          v484 = v378;
          v485 = v365;
          v486 = 0;
          v487 = 0;
          v488 = 0;
          v489 = 0;
          v251 = v400[1];
          v488 = v400[2];
          v489 = v251;
          v508 = v401;
          v513 = v201;
          v515 = *((_QWORD *)v423 + 46);
          v516 = (v405 ^ 0x180197E) & ~HIDWORD(v405) | HIDWORD(v405) & v405;
          v490 = v398;
          v491 = v396;
          v492 = v397;
          v493 = v427;
          v494 = v395;
          v495 = v394;
          v496 = v393;
          v497 = v392;
          v498 = v391;
          v499 = v390;
          v500 = v120;
          v501 = v117;
          v502 = v389;
          v503 = v385;
          v504 = &v452;
          v505 = v399;
          v506 = &v454;
          v507 = v387;
          v509 = v174;
          v510 = v383;
          v511 = v384;
          v512 = v377;
          v514 = v461;
          v517 = v405;
          v518 = v388;
          if (v388)
            v519 = v364;
          v520 = v414;
          v521 = &v451;
          v522 = v363;
          v523 = v381;
          if ((v382 & 1) == 0)
          {
            v524 = v581;
            v525 = v582;
            v526 = v583;
            v527 = v584;
          }
          v528 = 0;
          v529 = v406.i8[0] & 1;
          v530 = v207;
          v531 = v406.i8[1] & 1;
          v532 = v409 & 1;
          v533 = BYTE1(v416) & 1;
          v534 = BYTE2(v409) & 1;
          v535 = (v409 & 0xFF000000) != 0;
          v536 = v380;
          v537 = v418;
          v538 = v365 != 0;
          v539 = &v462;
          i = v480;
          v252 = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)v480 + 32))(v480, v403);
          v254 = v252;
          v37 = *(unsigned int *)(v252 + 32);
          if ((_DWORD)v37)
          {
            v255 = 0;
            v256 = (int *)(*(_QWORD *)(v252 + 16) + 8);
            while (1)
            {
              v257 = *v256;
              v256 += 6;
              if (v257 < 0)
                break;
              if (v37 == ++v255)
              {
                LODWORD(v255) = *(_DWORD *)(v252 + 32);
                break;
              }
            }
          }
          else
          {
            LODWORD(v255) = 0;
          }
          if ((_DWORD)v37 != (_DWORD)v255)
          {
            v260 = v255;
            v261 = *(_QWORD *)(v252 + 16);
            do
            {
              v82 = *(_QWORD *)(v261 + 24 * v260 + 16);
              if (!v82)
                goto LABEL_455;
              (*(void (**)(__int128 *__return_ptr, unint64_t, _QWORD))(*(_QWORD *)i + 8))(v540, i, *(_QWORD *)(v82 + 16));
              if (LOBYTE(v540[0]))
                v262 = (re::ecs2::Scene *)*((_QWORD *)&v540[0] + 1);
              else
                v262 = 0;
              v263 = re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v466, (unint64_t)v262);
              if (v263)
              {
                v264 = (_anonymous_namespace_ *)v263;
                v437[0] = (re::ecs2::Scene *)v82;
                v437[1] = v262;
                v437[2] = (re::ecs2::Scene *)&v438;
                re::ecs2::MeshComponentHelper::generateSceneForPortalCrossing((unint64_t)v481, (float32x4_t **)v437, (uint64_t)v540);
                if (LOBYTE(v540[0]))
                {
                  if (!*(_QWORD *)v264 || (re::DynamicArray<re::MeshScene>::add(v264, &v540[1]), LOBYTE(v540[0])))
                  {
                    if (*((_QWORD *)&v560 + 1))
                    {
                      if (*((_QWORD *)&v556 + 1))
                        *((_QWORD *)&v556 + 1) = 0;
                      v253 = v556;
                      if ((_QWORD)v556)
                        (*(void (**)(void))(**((_QWORD **)&v560 + 1) + 40))();
                    }
                  }
                }
              }
              v261 = *(_QWORD *)(v254 + 16);
              if (*(_DWORD *)(v254 + 32) <= (v255 + 1))
                v265 = v255 + 1;
              else
                v265 = *(_DWORD *)(v254 + 32);
              v7 = v425;
              while (1)
              {
                v260 = (v255 + 1);
                if (v265 - 1 == (_DWORD)v255)
                  break;
                LODWORD(v255) = v255 + 1;
                v266 = v260;
                if ((*(_DWORD *)(v261 + 24 * v260 + 8) & 0x80000000) != 0)
                  goto LABEL_335;
              }
              v266 = v265;
LABEL_335:
              LODWORD(v255) = v266;
            }
            while ((_DWORD)v37 != v266);
          }
          var0 = (char)v438.var0;
          v249 = v386;
          v37 = v409;
        }
LABEL_366:
        v430[0] = v458;
        v430[1] = v249;
        v430[2] = v378;
        v431 = v363;
        v432 = ReflectionContentComponent;
        v433 = v376;
        v434 = v182;
        v435 = var0;
        v436 = v424;
        v310 = (re::LateLatch *)re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene((uint64_t)v481, (uint64_t)v430);
        v311 = v458;
        if (!v458)
        {
          v66 = v367;
          goto LABEL_375;
        }
        v66 = v367;
        if (re::LateLatch::shouldApplyAnchorLateLatching(v310))
        {
          v312 = *((_QWORD *)v311 + 30);
          if (v312)
          {
            v311 = *(re::ecs2::BillboardService **)(v312 + 136);
            if (!v311)
            {
LABEL_375:
              *((_QWORD *)&v540[0] + 1) = 0;
              v313 = v400[1];
              *(_QWORD *)&v540[0] = v400[2];
              *((_QWORD *)&v540[0] + 1) = v313;
              *(_QWORD *)&v540[1] = v398;
              *((_QWORD *)&v540[1] + 1) = v396;
              v542 = v454;
              v543 = (float32x4_t)v455;
              v544 = (__int128)v456;
              v545 = v457;
              *(_QWORD *)&v541 = v397;
              v546 = v427;
              *(_QWORD *)&v547 = v375;
              *((_QWORD *)&v547 + 1) = v374;
              v548.i64[0] = v373;
              v548.i64[1] = v372;
              *(_QWORD *)&v549 = v371;
              *((_QWORD *)&v549 + 1) = v370;
              LOBYTE(v550) = v369;
              *((_QWORD *)&v550 + 1) = v395;
              *(_QWORD *)&v551 = v394;
              *((_QWORD *)&v551 + 1) = v393;
              *(_QWORD *)&v552 = v392;
              *((_QWORD *)&v552 + 1) = v391;
              *(_QWORD *)&v553 = v390;
              *((_QWORD *)&v553 + 1) = v120;
              *(_QWORD *)&v554 = v117;
              *((_QWORD *)&v554 + 1) = v389;
              re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v555, (uint64_t *)v481);
              LODWORD(v560) = v419;
              BYTE8(v560) = v388;
              if (v388)
                *(_QWORD *)&v561 = v364;
              v562 = v451;
              BYTE8(v561) = v414;
              v563 = v368;
              *(float *)v564 = v387;
              *(float *)&v564[4] = v174;
              *(float *)&v564[8] = v182;
              *(_OWORD *)&v564[16] = v385;
              *(_QWORD *)&v565 = v405;
              *((_QWORD *)&v565 + 1) = v411;
              LOWORD(v566) = v377;
              BYTE2(v566) = (_BYTE)v311;
              *(_QWORD *)((char *)&v566 + 4) = __PAIR64__(v383, v384);
              *(float32x4_t *)&v567[8] = v452;
              *(_OWORD *)&v567[24] = v453;
              *(_QWORD *)&v567[40] = v399;
              v567[56] = v438.var0;
              if (v438.var0)
              {
                *(_OWORD *)&v567[72] = v439;
                v568 = v440;
              }
              *(_QWORD *)&v569 = 0;
              LOBYTE(v570) = v381;
              if ((v382 & 1) == 0)
              {
                v571 = v581;
                v572 = v582;
                v573 = v583;
                v574 = v584;
              }
              LOBYTE(v575) = v418;
              BYTE1(v575) = v409 & 1;
              BYTE2(v575) = BYTE1(v416) & 1;
              BYTE3(v575) = BYTE2(v37) & 1;
              BYTE4(v575) = (v37 & 0xFF000000) != 0;
              *(_WORD *)((char *)&v575 + 5) = v380;
              BYTE7(v575) = v379;
              if (*(_QWORD *)v421)
                re::DynamicArray<re::MeshScene>::add(v421, v540);
              if (*((_QWORD *)&v559 + 1))
              {
                if (*((_QWORD *)&v555 + 1))
                  *((_QWORD *)&v555 + 1) = 0;
                if ((_QWORD)v555)
                  (*(void (**)(void))(**((_QWORD **)&v559 + 1) + 40))();
              }
              if (v484)
              {
                if (*(_QWORD *)&v481[8])
                  *(_QWORD *)&v481[8] = 0;
                if (*(_QWORD *)v481)
                  (*(void (**)(void))(*(_QWORD *)v484 + 40))();
              }
              goto LABEL_393;
            }
            if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((_QWORD *)v311 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)&& *((_BYTE *)v311 + 184))
            {
              LOBYTE(v311) = re::LateLatchingManager::trackAnchorPose(*(os_unfair_lock_s **)(v361 + 160), *((_QWORD *)v311 + 24), *(_QWORD *)(*(_QWORD *)(v361 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL, (__int128 *)v311 + 3);
              goto LABEL_375;
            }
          }
        }
        LOBYTE(v311) = 0;
        goto LABEL_375;
      }
      v437[0] = 0;
      v437[0] = (re::ecs2::Scene *)re::ecs2::PortalComponent::targetWorldRootToken(v223, *(_QWORD *)(*(_QWORD *)(v7 + 8) + 40));
      if (v437[0] != v403)
      {
        re::ecs2::WorldRootProvider::worldIds((re::ecs2::WorldRootProvider *)&v480, (uint64_t)v540);
        if (v546.i32[3])
        {
          v225 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)&v545, (uint64_t *)v437);
          re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)v540);
          if (v225)
            goto LABEL_279;
        }
        else
        {
          v258 = *(_QWORD *)&v540[1];
          if (*(_QWORD *)&v540[1])
          {
            v259 = 0;
            while (*(re::ecs2::Scene **)((char *)&v540[2] + v259) != v437[0])
            {
              v259 += 8;
              if (8 * *(_QWORD *)&v540[1] == v259)
                goto LABEL_309;
            }
            re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)v540);
            if (v259 != 8 * v258)
            {
LABEL_279:
              re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v422, v437[0], (re::DynamicString **)v423, &v438);
              v586.columns[1] = (simd_float3)v455;
              v586.columns[2] = v456;
              v586.columns[0] = (simd_float3)v454;
              v587 = __invert_f3(v586);
              v226 = vdupq_laneq_s32((int32x4_t)v587.columns[1], 2);
              v227 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v587.columns[0], (int32x4_t)v587.columns[2]), (int32x4_t)v587.columns[1]);
              v587.columns[1] = (simd_float3)vtrn2q_s32((int32x4_t)v587.columns[0], (int32x4_t)v587.columns[1]);
              v587.columns[1].i32[2] = v587.columns[2].i32[1];
              v228 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v227, COERCE_FLOAT(*(_OWORD *)(v223 + 80))), (float32x4_t)v587.columns[1], *(float32x2_t *)(v223 + 80), 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v587.columns[0], (int32x4_t)v587.columns[2]), v226), *(float32x4_t *)(v223 + 80), 2);
              v587.columns[1] = (simd_float3)vmulq_f32(v228, v228);
              LODWORD(v229) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v587.columns[1], 2), vaddq_f32((float32x4_t)v587.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v587.columns[1].f32, 1))).u32[0];
              v230 = (float32x4_t)xmmword_226108EE0;
              if (fabsf(v229) >= 1.0e-10)
              {
                v231 = v229;
                v232 = vrsqrte_f32((float32x2_t)LODWORD(v229));
                v233 = vmul_f32(v232, vrsqrts_f32((float32x2_t)LODWORD(v231), vmul_f32(v232, v232)));
                v230 = vmulq_n_f32(vnegq_f32(v228), vmul_f32(v233, vrsqrts_f32((float32x2_t)LODWORD(v231), vmul_f32(v233, v233))).f32[0]);
              }
              v407 = (int8x16_t)v230;
              v358 = (float32x4_t)v454;
              v359 = (float32x4_t)v455;
              v402 = (float32x4_t)v456;
              v404 = *(float32x4_t *)(v223 + 64);
              v366 = (float32x4_t)v457;
              v441[0] = v458;
              v441[1] = v386;
              v441[2] = v378;
              v442 = v363;
              v443 = ReflectionContentComponent;
              v444 = v376;
              v445 = v182;
              v446 = 0;
              v447 = v424;
              re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene((uint64_t)v481, (uint64_t)v441);
              re::StringID::StringID((re::StringID *)v540, &v438);
              *(_QWORD *)&v540[1] = v411;
              v541 = 0uLL;
              v234 = v400[1];
              *(_QWORD *)&v541 = v400[2];
              *((_QWORD *)&v541 + 1) = v234;
              *(_QWORD *)&v542 = v398;
              *((_QWORD *)&v542 + 1) = v396;
              v544 = v454;
              v545 = v455;
              v546 = v456;
              v547 = v457;
              v543.i64[0] = v397;
              v548 = v427;
              *(_QWORD *)&v549 = v375;
              *((_QWORD *)&v549 + 1) = v374;
              *(_QWORD *)&v550 = v373;
              *((_QWORD *)&v550 + 1) = v372;
              *(_QWORD *)&v551 = v371;
              *((_QWORD *)&v551 + 1) = v370;
              LOBYTE(v552) = v369;
              *((_QWORD *)&v552 + 1) = v395;
              *(_QWORD *)&v553 = v394;
              *((_QWORD *)&v553 + 1) = v393;
              *(_QWORD *)&v554 = v392;
              *((_QWORD *)&v554 + 1) = v391;
              *(_QWORD *)&v555 = v390;
              *((_QWORD *)&v555 + 1) = v120;
              *(_QWORD *)&v556 = v117;
              *((_QWORD *)&v556 + 1) = v389;
              v235 = (_anonymous_namespace_ *)re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v557, (uint64_t *)v481);
              LODWORD(v562) = v419;
              BYTE8(v562) = v388;
              if (v388)
                v563 = v364;
              v564[0] = v414;
              *(_OWORD *)&v564[8] = v451;
              *(_QWORD *)&v564[24] = v368;
              *(_QWORD *)&v565 = __PAIR64__(LODWORD(v174), LODWORD(v387));
              *((float *)&v565 + 2) = v182;
              v566 = v385;
              *(_QWORD *)v567 = v405;
              *(_QWORD *)&v567[8] = v411;
              *(_WORD *)&v567[16] = v377;
              v567[18] = 0;
              *(_DWORD *)&v567[20] = v384;
              *(_DWORD *)&v567[24] = v383;
              v236 = (int8x16_t)v453;
              *(float32x4_t *)&v567[40] = v452;
              *(_OWORD *)&v567[56] = v453;
              *(_QWORD *)&v567[72] = v399;
              LOBYTE(v568) = 0;
              *(_QWORD *)&v571 = 0;
              LOBYTE(v572) = v381;
              v237 = v421;
              if ((v382 & 1) == 0)
              {
                v573 = v581;
                v574 = v582;
                v236 = (int8x16_t)v583;
                v575 = v583;
                v576 = v584;
              }
              v236.i32[0] = 0;
              v238 = vaddq_f32(v366, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v358, v404.f32[0]), v359, *(float32x2_t *)v404.f32, 1), v402, v404, 2));
              v239 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v238, 3);
              v240 = (int8x16_t)vdivq_f32(v238, v239);
              LOBYTE(v577) = v418;
              BYTE1(v577) = v409 & 1;
              BYTE2(v577) = BYTE1(v416) & 1;
              BYTE3(v577) = BYTE2(v409) & 1;
              BYTE4(v577) = (v409 & 0xFF000000) != 0;
              *(_WORD *)((char *)&v577 + 5) = v380;
              HIBYTE(v577) = v379;
              v239.i8[0] = *(_BYTE *)(v223 + 128);
              v241 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v239, v236), 0), (int8x16_t)0, v407);
              v578 = v241;
              v241.i8[0] = *(_BYTE *)(v223 + 128);
              *(int8x16_t *)v579 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v241, v236), 0), (int8x16_t)0, v240);
              v579[16] = *(_BYTE *)(v223 + 128);
              *(_WORD *)&v579[17] = *(_WORD *)(v223 + 129);
              v243 = *((_QWORD *)v421 + 13);
              v242 = *((_QWORD *)v421 + 14);
              if (v242 >= v243)
              {
                v244 = v242 + 1;
                if (v243 < v242 + 1)
                {
                  if (*((_QWORD *)v421 + 12))
                  {
                    v245 = 2 * v243;
                    if (!v243)
                      v245 = 8;
                    if (v245 <= v244)
                      v246 = v244;
                    else
                      v246 = v245;
                    re::DynamicArray<re::StencilPortal>::setCapacity((_QWORD *)v421 + 12, v246);
                  }
                  else
                  {
                    re::DynamicArray<re::StencilPortal>::setCapacity((_QWORD *)v421 + 12, v244);
                    ++*((_DWORD *)v421 + 30);
                  }
                  v237 = v421;
                  v37 = v409;
                }
                v242 = *((_QWORD *)v237 + 14);
              }
              v268 = *((_QWORD *)v237 + 16);
              v269 = v268 + 736 * v242;
              v270 = v540[0];
              *(_QWORD *)v269 = *(_QWORD *)v269 & 0xFFFFFFFFFFFFFFFELL | v540[0] & 1;
              *(_QWORD *)v269 = *(_QWORD *)&v540[0] & 0xFFFFFFFFFFFFFFFELL | v270 & 1;
              *(_QWORD *)(v269 + 8) = *((_QWORD *)&v540[0] + 1);
              *((_QWORD *)&v540[0] + 1) = &str_110;
              *(_QWORD *)&v540[0] = 0;
              *(_QWORD *)(v269 + 16) = *(_QWORD *)&v540[1];
              v271 = v549;
              v272 = v550;
              v273 = v552;
              *(_OWORD *)(v269 + 192) = v551;
              *(_OWORD *)(v269 + 208) = v273;
              *(_OWORD *)(v269 + 160) = v271;
              *(_OWORD *)(v269 + 176) = v272;
              v274 = v545;
              v275 = v546;
              v276 = v548;
              *(_OWORD *)(v269 + 128) = v547;
              *(simd_float3 *)(v269 + 144) = v276;
              *(_OWORD *)(v269 + 96) = v274;
              *(simd_float3 *)(v269 + 112) = v275;
              v277 = v541;
              v278 = v542;
              v279 = v544;
              *(float32x4_t *)(v269 + 64) = v543;
              *(_OWORD *)(v269 + 80) = v279;
              *(_OWORD *)(v269 + 32) = v277;
              *(_OWORD *)(v269 + 48) = v278;
              v280 = v553;
              v281 = v554;
              v282 = v556;
              *(_OWORD *)(v269 + 256) = v555;
              *(_OWORD *)(v269 + 272) = v282;
              *(_OWORD *)(v269 + 224) = v280;
              *(_OWORD *)(v269 + 240) = v281;
              *(_OWORD *)(v269 + 320) = 0u;
              *(_OWORD *)(v269 + 336) = 0u;
              *(_OWORD *)(v269 + 288) = 0u;
              *(_OWORD *)(v269 + 304) = 0u;
              v283 = *(_QWORD *)(v269 + 344);
              *(_QWORD *)(v269 + 344) = *((_QWORD *)&v561 + 1);
              *((_QWORD *)&v561 + 1) = v283;
              v284 = *(_QWORD *)(v269 + 288);
              *(_QWORD *)(v269 + 288) = v557;
              v557 = v284;
              v285 = *(_QWORD *)(v269 + 296);
              *(_QWORD *)(v269 + 296) = v558;
              v558 = v285;
              v286 = *(_QWORD *)(v269 + 304);
              *(_QWORD *)(v269 + 304) = v559;
              *(_QWORD *)&v559 = v286;
              v287 = *(_QWORD *)(v269 + 328);
              *(_QWORD *)(v269 + 328) = *((_QWORD *)&v560 + 1);
              *((_QWORD *)&v560 + 1) = v287;
              v288 = *(_QWORD *)(v269 + 336);
              *(_QWORD *)(v269 + 336) = v561;
              *(_QWORD *)&v561 = v288;
              v289 = *(_QWORD *)(v269 + 312);
              *(_QWORD *)(v269 + 312) = *((_QWORD *)&v559 + 1);
              *((_QWORD *)&v559 + 1) = v289;
              v290 = *(_QWORD *)(v269 + 320);
              *(_QWORD *)(v269 + 320) = v560;
              *(_QWORD *)&v560 = v290;
              *(_DWORD *)(v269 + 352) = v562;
              LODWORD(v290) = BYTE8(v562);
              *(_BYTE *)(v269 + 360) = BYTE8(v562);
              if ((_DWORD)v290)
                *(_QWORD *)(v268 + 736 * v242 + 368) = v563;
              v291 = v268 + 736 * v242;
              *(_OWORD *)(v291 + 376) = *(_OWORD *)v564;
              v292 = *(_OWORD *)&v564[16];
              v293 = v565;
              v294 = *(_OWORD *)v567;
              *(_OWORD *)(v291 + 424) = v566;
              *(_OWORD *)(v291 + 440) = v294;
              *(_OWORD *)(v291 + 392) = v292;
              *(_OWORD *)(v291 + 408) = v293;
              v295 = *(_OWORD *)&v567[16];
              v296 = *(_OWORD *)&v567[32];
              v297 = *(_OWORD *)&v567[64];
              *(_OWORD *)(v291 + 488) = *(_OWORD *)&v567[48];
              *(_OWORD *)(v291 + 504) = v297;
              *(_OWORD *)(v291 + 456) = v295;
              *(_OWORD *)(v291 + 472) = v296;
              v298 = v568;
              *(_BYTE *)(v291 + 528) = v568;
              if (v298)
              {
                v299 = v570;
                v300 = v268 + 736 * v242;
                *(_OWORD *)(v300 + 544) = v569;
                *(_OWORD *)(v300 + 560) = v299;
              }
              v301 = v268 + 736 * v242;
              *(_QWORD *)(v301 + 576) = v571;
              v302 = v572;
              *(_BYTE *)(v301 + 592) = v572;
              if (v302)
              {
                v303 = (_OWORD *)(v268 + 736 * v242);
                v304 = v573;
                v305 = v574;
                v306 = v576;
                v303[40] = v575;
                v303[41] = v306;
                v303[38] = v304;
                v303[39] = v305;
              }
              v307 = v268 + 736 * v242;
              *(_QWORD *)(v307 + 672) = v577;
              v308 = v578;
              v309 = *(_OWORD *)v579;
              *(_DWORD *)(v307 + 719) = *(_DWORD *)&v579[15];
              *(int8x16_t *)(v307 + 688) = v308;
              *(_OWORD *)(v307 + 704) = v309;
              ++*((_QWORD *)v237 + 14);
              ++*((_DWORD *)v237 + 30);
              if (*((_QWORD *)&v561 + 1))
              {
                if (v558)
                  v558 = 0;
                if (v557)
                {
                  (*(void (**)(void))(**((_QWORD **)&v561 + 1) + 40))();
                  v557 = 0;
                }
                v560 = 0u;
                v561 = 0u;
                v559 = 0u;
              }
              re::StringID::destroyString((re::StringID *)v540);
              if (v484)
              {
                if (*(_QWORD *)&v481[8])
                  *(_QWORD *)&v481[8] = 0;
                if (*(_QWORD *)v481)
                  (*(void (**)(void))(*(_QWORD *)v484 + 40))();
              }
              re::StringID::destroyString((re::StringID *)&v438);
              var0 = 0;
              *(_BYTE *)&v438.var0 = 0;
LABEL_365:
              v249 = v386;
              goto LABEL_366;
            }
          }
          else
          {
LABEL_309:
            re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)v540);
          }
        }
      }
      v66 = v367;
LABEL_393:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v460);
    }
    while ((_QWORD)v460 != v66 || WORD4(v460) != 0xFFFF || WORD5(v460) != 0xFFFF);
  }
  v314 = v468;
  if (v468)
  {
    v315 = 0;
    v316 = (_DWORD *)(v467 + 8);
    while ((*v316 & 0x80000000) == 0)
    {
      v316 += 64;
      if (v468 == ++v315)
      {
        LODWORD(v315) = v468;
        break;
      }
    }
  }
  else
  {
    LODWORD(v315) = 0;
  }
  if (v468 != (_DWORD)v315)
  {
    v317 = (re::RenderFrame *)((char *)v423 + 264);
    v318 = v315;
    v319 = v467;
    do
    {
      v320 = v319 + (v318 << 8);
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v422, *(const re::ecs2::Scene **)(v320 + 16), (re::DynamicString **)v423, &v580);
      if (*(_QWORD *)(v320 + 40))
      {
        *(_QWORD *)&v540[0] = v580 >> 1;
        v321 = re::RenderFrameData::stream(v317, (const re::WeakStringID *)v540);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v321 + 48) + 536))(*(_QWORD *)(v321 + 48), v320 + 24);
      }
      if (*(_QWORD *)(v320 + 104))
      {
        *(_QWORD *)&v540[0] = v580 >> 1;
        v322 = re::RenderFrameData::stream(v317, (const re::WeakStringID *)v540);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v322 + 48) + 576))(*(_QWORD *)(v322 + 48), v320 + 64);
      }
      v323 = v319 + (v318 << 8);
      if (*(_QWORD *)(v323 + 136))
      {
        *(_QWORD *)&v540[0] = v580 >> 1;
        v324 = re::RenderFrameData::stream(v317, (const re::WeakStringID *)v540);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v324 + 48) + 816))(*(_QWORD *)(v324 + 48), v323 + 120);
      }
      *(_QWORD *)&v438.var0 = v580 >> 1;
      v325 = re::RenderFrameData::stream(v317, (const re::WeakStringID *)&v438);
      v326 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v325, (uint64_t *)&v454);
      if (!v326)
      {
        v327 = *(_QWORD *)(*(_QWORD *)(v325 + 48) + 8);
        v328 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v327 + 32))(v327, 56, 8);
        *(_QWORD *)v328 = 0;
        *(_QWORD *)(v328 + 8) = 0;
        *(_DWORD *)(v328 + 16) = 1;
        *(_QWORD *)(v328 + 32) = 0;
        *(_QWORD *)(v328 + 40) = 0;
        *(_QWORD *)(v328 + 24) = 0;
        *(_DWORD *)(v328 + 48) = 0;
        v329 = (re *)re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::init(v328, v327, 1uLL);
        *((_QWORD *)&v540[0] + 1) = v328;
        *(_QWORD *)&v540[0] = std::__any_imp::_SmallHandler<re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul> *>::__handle[abi:nn180100];
        *((_QWORD *)&v542 + 1) = re::globalAllocators(v329)[2];
        v543.i64[0] = 0;
        v326 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v325, (uint64_t *)&v454, (re *)v540);
        if (v543.i64[0])
        {
          *(_QWORD *)v481 = v540;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v543.i64[0] + 16))(v543.i64[0], v481);
          if (v543.i64[0])
          {
            (**(void (***)(uint64_t))v543.i64[0])(v543.i64[0]);
            if ((__int128 *)v543.i64[0] != &v541)
              (*(void (**)(_QWORD))(**((_QWORD **)&v542 + 1) + 40))(*((_QWORD *)&v542 + 1));
            v543.i64[0] = 0;
          }
        }
        if (*(_QWORD *)&v540[0])
          (*(void (**)(int))&v540[0])(0);
      }
      v37 = *v330;
      v117 = *(unsigned __int8 *)(v323 + 160);
      v332 = *(_QWORD *)(*v330 + 40);
      i = *(_QWORD *)(*v330 + 8);
      if (v332 + 1 > 4 * i)
      {
        re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::setBucketsCapacity((_QWORD *)*v330, (v332 + 4) >> 2);
        i = *(_QWORD *)(v37 + 8);
      }
      v82 = v332 >> 2;
      if (i <= v332 >> 2)
        goto LABEL_456;
      if ((*(_BYTE *)(v37 + 16) & 1) != 0)
        v333 = (_QWORD *)(v37 + 24);
      else
        v333 = *(_QWORD **)(v37 + 32);
      v334 = v333[v82];
      v335 = *(_QWORD *)(v37 + 40);
      *(_QWORD *)(v37 + 40) = v335 + 1;
      ++*(_DWORD *)(v37 + 48);
      *(_BYTE *)(v334 + (v332 & 3)) = v117;
      if (v335 == -1)
        goto LABEL_457;
      if (i <= v335 >> 2)
        goto LABEL_458;
      *(_QWORD *)&v540[0] = v580 >> 1;
      v336 = re::RenderFrameData::stream(v317, (const re::WeakStringID *)v540);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v336 + 48) + 440))(*(_QWORD *)(v336 + 48), v319 + (v318 << 8) + 168);
      re::StringID::destroyString((re::StringID *)&v580);
      v319 = v467;
      if (v468 <= (int)v315 + 1)
        v337 = v315 + 1;
      else
        v337 = v468;
      while (1)
      {
        v318 = (v315 + 1);
        if (v337 - 1 == (_DWORD)v315)
          break;
        LODWORD(v315) = v315 + 1;
        v338 = v318;
        if ((*(_DWORD *)(v467 + (v318 << 8) + 8) & 0x80000000) != 0)
          goto LABEL_433;
      }
      v338 = v337;
LABEL_433:
      LODWORD(v315) = v338;
    }
    while (v314 != v338);
  }
  v339 = v464;
  if (v464)
  {
    v340 = 0;
    v341 = (int *)(v463 + 8);
    v342 = v367;
    v343 = v422;
    v344 = v360;
    v345 = v423;
    while (1)
    {
      v346 = *v341;
      v341 += 18;
      if (v346 < 0)
        break;
      if (v464 == ++v340)
      {
        LODWORD(v340) = v464;
        break;
      }
    }
  }
  else
  {
    LODWORD(v340) = 0;
    v342 = v367;
    v343 = v422;
    v344 = v360;
    v345 = v423;
  }
  if (v464 != (_DWORD)v340)
  {
    v347 = v340;
    v348 = v463;
    v349 = v464;
    do
    {
      if (*(_DWORD *)(v348 + 72 * v347 + 52))
      {
        v350 = v348 + 72 * v347;
        v351 = v350 + 24;
        re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v343, *(const re::ecs2::Scene **)(v350 + 16), (re::DynamicString **)v345, v540);
        (*(void (**)(_anonymous_namespace_ *, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v344 + 40))(v344, v540, *((_QWORD *)v345 + 46), v351);
        re::StringID::destroyString((re::StringID *)v540);
        v349 = v464;
        v348 = v463;
      }
      if (v349 <= (int)v340 + 1)
        v352 = v340 + 1;
      else
        v352 = v349;
      while (1)
      {
        v347 = (v340 + 1);
        if (v352 - 1 == (_DWORD)v340)
          break;
        LODWORD(v340) = v340 + 1;
        v353 = v347;
        if ((*(_DWORD *)(v348 + 72 * v347 + 8) & 0x80000000) != 0)
          goto LABEL_451;
      }
      v353 = v352;
LABEL_451:
      LODWORD(v340) = v353;
    }
    while (v339 != v353);
  }
  v354 = *(_DWORD *)(v342 + 40) != 0;
  re::StringID::destroyString((re::StringID *)v461);
  re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v462);
  re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v466);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v470);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v473);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v476);
  return v354;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + (v3 << 8) + 16) != a2)
  {
    while (1)
    {
      v3 = *(_DWORD *)(v5 + (v3 << 8) + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + (v3 << 8) + 16) == a2)
        return v5 + (v3 << 8) + 24;
    }
    return 0;
  }
  return v5 + (v3 << 8) + 24;
}

unint64_t re::ecs2::MeshComponentHelper::clippingDataForMeshScene(uint64_t a1, const re::ecs2::MeshComponent *a2, float32x4_t *a3, uint64_t a4)
{
  re::ecs2 *v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v16;

  v16 = a1;
  if (a4)
  {
    v7 = *(re::ecs2 **)(a1 + 176);
    if (v7)
      v8 = re::ecs2::containsShaderGraphMaterialWithModelPositionOffset(v7, a2);
    else
      v8 = 0;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    v14 = (float32x4_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v13, &v16);
    v9 = re::ecs2::MeshComponentHelper::clippingDataForClippingParameterData(v14, (uint64_t)a2, a3, a4, v8);
    v10 = v9 >> 16;
    v11 = BYTE4(v9);
    v12 = BYTE5(v9);
  }
  else
  {
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    v11 = 0;
    v12 = 0;
  }
  return ((unint64_t)v11 << 32) | (v12 << 40) | ((unint64_t)(unsigned __int16)v10 << 16) | (unsigned __int16)v9;
}

float re::ecs2::MeshComponentHelper::environmentLightingWeightForMeshScene(unint64_t a1, uint64_t a2)
{
  float v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = 1.0;
  if (a2)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    if (*(_QWORD *)v4)
    {
      v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
      v6 = *(unsigned int *)(*(_QWORD *)(v4 + 8) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(v4 + 24)));
      if ((_DWORD)v6 != 0x7FFFFFFF)
      {
        v7 = *(_QWORD *)(v4 + 16);
        if (*(_QWORD *)(v7 + 32 * v6 + 16) == a1)
        {
          return *(float *)(v7 + 32 * v6 + 24);
        }
        else
        {
          while (1)
          {
            v6 = *(_DWORD *)(v7 + 32 * v6 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v6 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v7 + 32 * v6 + 16) == a1)
              return *(float *)(v7 + 32 * v6 + 24);
          }
        }
      }
    }
  }
  return v2;
}

uint64_t re::ecs2::MeshComponentHelper::renderPassGroupDataForMeshScene(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v15 = a1;
  if (!a3)
    return 0;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v12 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v11, &v15);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 56))(a3, v15, a5, a6, 0, a4)|| v12 == 0)
  {
    return 0;
  }
  if ((a2 & 1) != 0)
    return 0;
  return *(_QWORD *)v12;
}

unint64_t re::ecs2::MeshComponentHelper::generateSceneForPortalCrossing@<X0>(unint64_t result@<X0>, float32x4_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  float32x2_t *v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32_t v20;
  float32x4_t v21;
  const re::ecs2::MeshComponent *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t *v27;
  re::ecs2 *v28;
  char v29;
  re::ecs2::MeshComponentHelper *v30;
  float32x4_t *v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  __int128 v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  float32x4_t v77;
  __int128 v78;
  __int128 v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char v88;
  float v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD v95[6];
  BOOL v96;
  char v97;
  float32x4_t v98[2];
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[80];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  unsigned __int8 v121;
  uint64_t v122;
  _BYTE v123[32];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[48];
  char v129;
  float32x4_t v130;
  float32x4_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  simd_float3x3 v140;
  simd_float3x3 v141;

  v139 = *MEMORY[0x24BDAC8D0];
  if (!(*a2)[8].i8[3])
    goto LABEL_17;
  v5 = result;
  v6 = (*a2)[1].i64[0];
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v6, (const re::ecs2::Entity *)1, &v100);
  v7 = (float32x2_t *)*a2;
  v140.columns[0] = (simd_float3)v100;
  v140.columns[1] = (simd_float3)v101;
  v140.columns[2] = (simd_float3)v102;
  v82 = vaddq_f32(v103, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, COERCE_FLOAT(*(_OWORD *)&(*a2)[6])), v101, *(float32x2_t *)(*a2)[6].f32, 1), v102, (*a2)[6], 2));
  v80 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3);
  v141 = __invert_f3(v140);
  v8 = vdupq_laneq_s32((int32x4_t)v141.columns[1], 2);
  v9 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v141.columns[0], (int32x4_t)v141.columns[2]), (int32x4_t)v141.columns[1]);
  v141.columns[1] = (simd_float3)vtrn2q_s32((int32x4_t)v141.columns[0], (int32x4_t)v141.columns[1]);
  v141.columns[1].i32[2] = v141.columns[2].i32[1];
  v10 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(*(_OWORD *)v7[14].f32)), (float32x4_t)v141.columns[1], v7[14], 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v141.columns[0], (int32x4_t)v141.columns[2]), v8), *(float32x4_t *)v7[14].f32, 2);
  v141.columns[1] = (simd_float3)vmulq_f32(v10, v10);
  LODWORD(v11) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v141.columns[1], 2), vaddq_f32((float32x4_t)v141.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.columns[1].f32, 1))).u32[0];
  if (fabsf(v11) < 1.0e-10)
  {
    v15 = (float32x4_t)xmmword_2260E5F40;
  }
  else
  {
    v12 = v11;
    v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
    v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
    v15 = vmulq_n_f32(v10, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
  }
  v16 = vdivq_f32(v82, v80);
  v17 = vnegq_f32(v15);
  v18 = a2[2];
  if (!v18->i8[0])
    v18->i8[0] = 1;
  v19 = vmulq_f32(v16, v15);
  v81 = v16;
  v83 = v15;
  v18[1] = v16;
  v18[2] = v17;
  v20 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
  v21 = v15;
  v21.f32[3] = v20;
  v99 = v21;
  re::AABB::transform(*(float32x4_t **)(v5 + 232), *(float32x4_t **)(v5 + 248), (uint64_t)v98);
  result = re::AABB::intersects(v98, &v99);
  if ((result & 0xFFFFFFFD) == 0)
    goto LABEL_17;
  v23 = *(_QWORD *)(v5 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(v5 + 40);
    v25 = *a2;
    v26 = *(_QWORD *)(v5 + 232);
    v27 = *(float32x4_t **)(v5 + 248);
    v28 = *(re::ecs2 **)(v24 + 176);
    if (v28)
      v29 = re::ecs2::containsShaderGraphMaterialWithModelPositionOffset(v28, v22);
    else
      v29 = 0;
    v31 = (float32x4_t *)(*(uint64_t (**)(uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v23 + 24))(v23, v24, v25);
    result = re::ecs2::MeshComponentHelper::clippingDataForClippingParameterData(v31, v26, v27, v23, v29);
    if (!BYTE5(result))
    {
      LODWORD(v23) = result;
      v30 = (re::ecs2::MeshComponentHelper *)(HIDWORD(result) & 1);
      goto LABEL_15;
    }
LABEL_17:
    *(_BYTE *)a3 = 0;
    return result;
  }
  v30 = 0;
LABEL_15:
  v32 = *(_QWORD *)(v5 + 24);
  if (v32)
  {
    LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v6);
    v35 = v34;
    v36 = v33;
  }
  else
  {
    v35 = 0;
    v36 = 1.0;
  }
  v37 = v36 * *(float *)(v5 + 256);
  v38 = *(_QWORD *)(v5 + 264);
  v39 = re::ecs2::MeshComponentHelper::renderPassGroupDataForMeshScene(v6, *(_BYTE *)(v5 + 448), *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 450), *(_QWORD *)(v5 + 296), *(_QWORD *)(v5 + 304));
  if (!*(_BYTE *)(v5 + 448))
  {
    v41 = *(_QWORD *)(v5 + 288);
    v42 = *(_BYTE *)(v5 + 449) != 0;
    if (!v41)
    {
      v42 = v40;
      v41 = v39;
    }
    if (v38)
      v43 = v38;
    else
      v43 = v35;
    v44 = a2[1];
    v95[0] = *(_QWORD *)(v5 + 464);
    v95[1] = v44;
    v45 = *(_QWORD *)(v5 + 248);
    v95[2] = *(_QWORD *)(v5 + 232);
    v95[3] = v45;
    v95[4] = v43;
    v95[5] = v41;
    v96 = v42;
    v97 = *(_BYTE *)(v5 + 450);
    re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable((uint64_t)v95);
  }
  v46 = re::ecs2::MeshComponentHelper::techniqueMappingOverlayNameHashForMeshScene(v30, v37);
  v47 = re::ecs2::MeshComponentHelper::environmentLightingWeightForMeshScene(*(_QWORD *)(v5 + 40), *(_QWORD *)v5);
  v84 = *(_OWORD *)(v5 + 40);
  v85 = *(_QWORD *)(v5 + 56);
  v86 = *(_DWORD *)(v5 + 360);
  v87 = *(_QWORD *)(v5 + 72);
  v88 = *(_BYTE *)(v5 + 80);
  v89 = v47;
  v90 = 1;
  v91 = *(_QWORD *)(v5 + 32);
  re::ecs2::MeshComponentHelper::dynamicFunctionConstantsForMeshScene((uint64_t)&v92, (uint64_t)&v84);
  v48 = *(_OWORD *)(v5 + 104);
  v104 = *(_OWORD *)(v5 + 88);
  v105 = v48;
  *(_QWORD *)&v106 = *(_QWORD *)(v5 + 120);
  v49 = *(__int128 **)(v5 + 248);
  v51 = v49[2];
  v50 = v49[3];
  v52 = v49[1];
  v107 = *v49;
  v108 = v52;
  v109 = v51;
  v110 = v50;
  v113 = 0u;
  v114 = 0u;
  v53 = *(_OWORD *)(v5 + 144);
  v111 = *(_OWORD *)(v5 + 128);
  v112 = 0u;
  *(_OWORD *)&v115[8] = v53;
  v54 = *(_OWORD *)(v5 + 176);
  *(_OWORD *)&v115[24] = *(_OWORD *)(v5 + 160);
  *(_OWORD *)&v115[40] = v54;
  *(_OWORD *)&v115[56] = *(_OWORD *)(v5 + 192);
  *(_QWORD *)&v115[72] = *(_QWORD *)(v5 + 208);
  v115[0] = 0;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v116, &v92);
  v120 = v23;
  v121 = *(_BYTE *)(v5 + 328);
  v55 = v121;
  if (v121)
    v122 = *(_QWORD *)(v5 + 336);
  v123[0] = *(_BYTE *)(v5 + 344);
  *(_OWORD *)&v123[8] = *(_OWORD *)*(_QWORD *)(v5 + 352);
  *(_QWORD *)&v123[24] = v46;
  *(float *)&v124 = v37;
  DWORD1(v124) = *(_DWORD *)(v5 + 272);
  *((float *)&v124 + 2) = v47;
  v125 = *(_OWORD *)(v5 + 216);
  *(_QWORD *)&v126 = *(_QWORD *)(v5 + 316);
  *((_QWORD *)&v126 + 1) = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 296);
  LOWORD(v127) = *(_WORD *)(v5 + 284);
  BYTE2(v127) = 0;
  DWORD1(v127) = *(_DWORD *)(v5 + 280);
  DWORD2(v127) = *(_DWORD *)(v5 + 276);
  v56 = *(_OWORD **)(v5 + 232);
  v57 = *(_QWORD *)(v5 + 240);
  v58 = v56[1];
  *(_OWORD *)&v128[8] = *v56;
  *(_OWORD *)&v128[24] = v58;
  *(_QWORD *)&v128[40] = v57;
  v129 = 1;
  v130 = v81;
  v131 = v83;
  v59 = *(_QWORD *)(v6 + 296);
  v132 = v59;
  v133 = *(_BYTE *)(v5 + 368);
  v60 = v133;
  if (v133)
  {
    v61 = *(_OWORD *)(v5 + 400);
    v134 = *(_OWORD *)(v5 + 384);
    v135 = v61;
    v62 = *(_OWORD *)(v5 + 432);
    v136 = *(_OWORD *)(v5 + 416);
    v137 = v62;
  }
  LOBYTE(v138) = *(_BYTE *)(v5 + 457);
  *(_DWORD *)((char *)&v138 + 1) = *(_DWORD *)(v5 + 452);
  BYTE5(v138) = *(_BYTE *)(v5 + 456);
  BYTE6(v138) = *(_BYTE *)(v5 + 448);
  HIBYTE(v138) = *(_BYTE *)(v5 + 458);
  *(_BYTE *)a3 = 1;
  v63 = *(_OWORD *)&v115[32];
  *(_OWORD *)(a3 + 208) = *(_OWORD *)&v115[16];
  *(_OWORD *)(a3 + 224) = v63;
  v64 = *(_OWORD *)&v115[64];
  *(_OWORD *)(a3 + 240) = *(_OWORD *)&v115[48];
  *(_OWORD *)(a3 + 256) = v64;
  v65 = v113;
  *(_OWORD *)(a3 + 144) = v112;
  *(_OWORD *)(a3 + 160) = v65;
  v66 = *(_OWORD *)v115;
  *(_OWORD *)(a3 + 176) = v114;
  *(_OWORD *)(a3 + 192) = v66;
  v67 = v109;
  *(_OWORD *)(a3 + 80) = v108;
  *(_OWORD *)(a3 + 96) = v67;
  v68 = v111;
  *(_OWORD *)(a3 + 112) = v110;
  *(_OWORD *)(a3 + 128) = v68;
  v69 = v105;
  *(_OWORD *)(a3 + 16) = v104;
  *(_OWORD *)(a3 + 32) = v69;
  v70 = v107;
  *(_OWORD *)(a3 + 48) = v106;
  *(_OWORD *)(a3 + 64) = v70;
  v71 = *((_QWORD *)&v119 + 1);
  *(_QWORD *)(a3 + 320) = v119;
  *(_QWORD *)(a3 + 328) = v71;
  v72 = v117;
  *(_OWORD *)(a3 + 272) = v116;
  *(_OWORD *)(a3 + 288) = v72;
  v116 = 0u;
  v117 = 0u;
  *(_OWORD *)(a3 + 304) = v118;
  v118 = 0u;
  v119 = 0u;
  *(_DWORD *)(a3 + 336) = v23;
  *(_BYTE *)(a3 + 344) = v55;
  if (v55)
    *(_QWORD *)(a3 + 352) = v122;
  v73 = *(_OWORD *)&v128[16];
  *(_OWORD *)(a3 + 456) = *(_OWORD *)v128;
  *(_OWORD *)(a3 + 472) = v73;
  *(_OWORD *)(a3 + 488) = *(_OWORD *)&v128[32];
  v74 = v125;
  *(_OWORD *)(a3 + 392) = v124;
  *(_OWORD *)(a3 + 408) = v74;
  v75 = v127;
  *(_OWORD *)(a3 + 424) = v126;
  *(_OWORD *)(a3 + 440) = v75;
  v76 = *(_OWORD *)&v123[16];
  *(_OWORD *)(a3 + 360) = *(_OWORD *)v123;
  *(_OWORD *)(a3 + 376) = v76;
  *(_BYTE *)(a3 + 512) = 1;
  v77 = v131;
  *(float32x4_t *)(a3 + 528) = v130;
  *(float32x4_t *)(a3 + 544) = v77;
  *(_QWORD *)(a3 + 560) = v59;
  *(_BYTE *)(a3 + 576) = v60;
  if (v60)
  {
    v78 = v135;
    *(_OWORD *)(a3 + 592) = v134;
    *(_OWORD *)(a3 + 608) = v78;
    v79 = v137;
    *(_OWORD *)(a3 + 624) = v136;
    *(_OWORD *)(a3 + 640) = v79;
  }
  *(_QWORD *)(a3 + 656) = v138;
  result = v94;
  if (v94)
  {
    if (v93)
      v93 = 0;
    if (v92)
      return (*(uint64_t (**)(void))(*(_QWORD *)v94 + 40))();
  }
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 120;
      do
      {
        v6 = a1[2];
        v7 = v6 + v5;
        v8 = *(_DWORD *)(v6 + v5 - 112);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 - 112) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 88);
          v10 = (_QWORD *)(v7 + 88);
          v9 = v11;
          if (v11)
          {
            v12 = v6 + v5;
            if (*(_QWORD *)(v6 + v5 + 120))
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            *(_QWORD *)(v12 + 120) = 0;
            v10[1] = 0;
            v10[2] = 0;
            *v10 = 0;
            ++*(_DWORD *)(v12 + 112);
          }
          v13 = *(v10 - 5);
          if (v13)
          {
            v14 = v6 + v5;
            if (*(_QWORD *)(v6 + v5 + 80))
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
            *(_QWORD *)(v14 + 80) = 0;
            *(v10 - 4) = 0;
            *(v10 - 3) = 0;
            *(v10 - 5) = 0;
            ++*(_DWORD *)(v14 + 72);
          }
          v15 = v6 + v5;
          re::DynamicArray<re::StencilPortal>::deinit(v15);
          v15 -= 56;
          re::BucketArray<re::MeshDeformation,8ul>::deinit(v15);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v15);
          re::DynamicArray<re::MeshScene>::deinit((uint64_t)(v10 - 23));
          v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 256;
      }
      while (v4 < v3);
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::ecs2::MeshComponentStateImpl::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 40, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v9 + 72 * v7 + 16) != v3)
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 72 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v9 + 72 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 72 * v10 + 8) = *(_DWORD *)(v9 + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 72 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 72 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v12 + 72 * v7;
  v16 = *(_DWORD *)(v13 + 8);
  v15 = (int *)(v13 + 8);
  v14 = v16;
  if (v16 < 0)
  {
    *v15 = v14 & 0x7FFFFFFF;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v12 + 72 * v7 + 24));
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 72 * v7 + 8);
  }
  v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 72 * v7 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

uint64_t re::ecs2::MeshComponentHelper::clippingDataForClippingParameterData(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int32 v8;
  uint64_t v9;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int32x4_t v19;
  float32x4_t v20;
  unsigned int v21;
  uint64_t v23[2];

  if (a1)
  {
    v6 = a1[9].i64[1];
    if (v6)
    {
      if ((a5 & 1) != 0)
      {
        v7 = 0;
        v6 = 1;
      }
      else
      {
        v23[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
        v23[1] = v12;
        v21 = re::determineClippingNeeds((uint64_t)&a1[9], v23, a1[11].u16[6], a1 + 7, a2, a3, v13, v14, v15, v16, v17, v18, v19, v20);
        v6 = v21 == 0;
        v7 = v21 == 3;
        if (v21 > 1)
        {
          LOWORD(v8) = 0;
          v9 = 0;
          return (v6 << 32) | (v7 << 40) | (v9 << 16) | (unsigned __int16)v8;
        }
      }
      v8 = a1[11].u32[2];
      v9 = HIWORD(v8);
    }
    else
    {
      LOWORD(v8) = 0;
      v9 = 0;
      v7 = 0;
    }
  }
  else
  {
    LOWORD(v8) = 0;
    v9 = 0;
    v6 = 0;
    v7 = 0;
  }
  return (v6 << 32) | (v7 << 40) | (v9 << 16) | (unsigned __int16)v8;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 224 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 224 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 224 * v4 + 16) == v2)
        return v6 + 224 * v4 + 32;
    }
    return 0;
  }
  return v6 + 224 * v4 + 32;
}

uint64_t re::ecs2::MeshSystem::willAddSystemToECSService(re::ecs2::MeshSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  const char *v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 80) = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 81) = re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 82) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 83) = re::ServiceLocator::serviceOrNull<re::ecs2::TintService>(v5);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 86) = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v6);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 84) = re::ServiceLocator::serviceOrNull<re::ecs2::EnvironmentLightingService>(v7);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 87) = re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(v8);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 85) = re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(v9);
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 88) = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v10);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 90) = re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(v11);
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v12);
  *((_QWORD *)this + 91) = result;
  if (*((_QWORD *)this + 15))
  {
    re::Defaults::BOOLValue((re::Defaults *)"renderMissingMaterials", v14, v23);
    if (!v23[0] || v23[1])
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 15) + 8))(&v24, *((_QWORD *)this + 15), "engine:missingMaterial.rematerial");
      v18 = *((_OWORD *)this + 10);
      *((_OWORD *)this + 10) = v24;
      v24 = v18;
      v19 = *((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v25;
      v25 = v19;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 15) + 8))(&v24, *((_QWORD *)this + 15), "engine:emptyMaterial.rematerial");
      v20 = *(_OWORD *)((char *)this + 184);
      *(_OWORD *)((char *)this + 184) = v24;
      v24 = v20;
      v21 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = v25;
      v25 = v21;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      v17 = 1;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 15) + 8))(&v24, *((_QWORD *)this + 15), "engine:emptyMaterial.rematerial");
      v15 = *((_OWORD *)this + 10);
      *((_OWORD *)this + 10) = v24;
      v24 = v15;
      v16 = *((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v25;
      v25 = v16;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      re::AssetHandle::operator=((uint64_t *)this + 23, (uint64_t *)this + 20);
      v17 = 0;
    }
    *((_BYTE *)this + 256) = v17;
    re::AssetHandle::loadAsync((re::ecs2::MeshSystem *)((char *)this + 160));
    re::AssetHandle::loadAsync((re::ecs2::MeshSystem *)((char *)this + 184));
    MurmurHash3_x64_128((uint64_t)"SFBPassthroughDownsample2D", 26, 0, (unint64_t *)&v24);
    *((_QWORD *)this + 26) = (*((_QWORD *)&v24 + 1)
                            + ((_QWORD)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"SFBCopyTextureBilinear", 22, 0, (unint64_t *)&v24);
    *((_QWORD *)this + 27) = (*((_QWORD *)&v24 + 1)
                            + ((_QWORD)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"Opaque", 6, 0, (unint64_t *)&v24);
    *((_QWORD *)this + 28) = (*((_QWORD *)&v24 + 1)
                            + ((_QWORD)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"Transparent", 11, 0, (unint64_t *)&v24);
    *((_QWORD *)this + 29) = (*((_QWORD *)&v24 + 1)
                            + ((_QWORD)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"StencilIncrement", 16, 0, (unint64_t *)&v24);
    *((_QWORD *)this + 30) = (*((_QWORD *)&v24 + 1)
                            + ((_QWORD)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    MurmurHash3_x64_128((uint64_t)"Occlusion", 9, 0, (unint64_t *)&v24);
    *((_QWORD *)this + 31) = (*((_QWORD *)&v24 + 1)
                            + ((_QWORD)v24 << 6)
                            + ((unint64_t)v24 >> 2)
                            - 0x61C8864680B583E9) ^ v24;
    v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    result = re::ServiceLocator::serviceOrNull<re::FrameAnalysisService>(v22);
    if (result)
      *((_QWORD *)this + 89) = result;
  }
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::TintService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::TintService>(void)::info = re::ecs2::introspect_TintService(0);
  }
  v3 = re::introspect<re::ecs2::TintService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::EnvironmentLightingService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::EnvironmentLightingService>(void)::info = re::ecs2::introspect_EnvironmentLightingService(0);
  }
  v3 = re::introspect<re::ecs2::EnvironmentLightingService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::MaterialParametersService>(void)::info = re::introspect_MaterialParametersService(0);
  }
  v3 = re::introspect<re::MaterialParametersService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::FrameAnalysisService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::FrameAnalysisService>(void)::info = re::introspect_FrameAnalysisService(0);
  }
  v3 = re::introspect<re::FrameAnalysisService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

double re::ecs2::MeshSystem::willRemoveSystemFromECSService(re::ecs2::MeshSystem *this)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v2 = *((_OWORD *)this + 10);
  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  v7 = v2;
  v8 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  v4 = *(_OWORD *)((char *)this + 184);
  v5 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 23) = 0;
  v7 = v4;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  result = 0.0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 90) = 0;
  return result;
}

void re::ecs2::MeshSystem::willAddSceneToECSService(re::ecs2::MeshSystem *this, re::EventBus **a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  re::ecs2::System *v40;
  unint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  re::EventBus *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  re::ecs2::Scene *v53;
  re::ecs2::Scene *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[18];
  __int16 v64;
  unint64_t v65;
  __int16 v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 264;
  v53 = (re::ecs2::Scene *)a2;
  v5 = (re::ecs2::MeshSystem *)((char *)this + 384);
  v6 = *((_QWORD *)this + 49);
  v7 = *((_DWORD *)this + 100);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 408);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 52);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 408);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 52);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v55 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 384, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v55);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSystem *)((char *)this + 320), &v53, (uint64_t *)&v55);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v55);
    v15 = (char *)this + 432;
    v16 = v55;
    goto LABEL_49;
  }
LABEL_17:
  v62 = 0u;
  v55 = 0u;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = -1;
  v57 = 0u;
  v58 = 0u;
  v59 = 0;
  v60 = 1;
  v61 = 0uLL;
  v17 = *((_QWORD *)this + 38);
  *(_QWORD *)&v62 = 0;
  v18 = *((_QWORD *)this + 34);
  DWORD2(v62) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 33, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 34);
  }
  if (v18 <= v17 >> 2)
  {
    v54 = 0;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 858;
    v64 = 2048;
    v65 = v17 >> 2;
    v66 = 2048;
    v67 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_77;
  }
  if ((*((_BYTE *)this + 280) & 1) != 0)
    v19 = (char *)this + 288;
  else
    v19 = (char *)*((_QWORD *)this + 37);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 38);
  ++*((_DWORD *)this + 78);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v55;
  v23 = v56;
  v24 = v57;
  *(_QWORD *)(v21 + 48) = v58;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v58 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v55);
  v26 = *((_QWORD *)this + 38);
  if (!v26)
  {
LABEL_77:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v53, v54);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::init(v27, (uint64_t)v4, (uint64_t)v53);
  *(_QWORD *)&v68 = *((_QWORD *)this + 38) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSystem *)((char *)this + 320), &v53, (uint64_t *)&v68);
  v28 = *((_QWORD *)this + 38);
  v29 = *((_QWORD *)this + 53);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 53) = v28;
  *(_QWORD *)&v55 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v55);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 53) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 400) & 1) != 0)
      v33 = (char *)this + 408;
    else
      v33 = (char *)*((_QWORD *)this + 52);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 49) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 38);
  v35 = *((_QWORD *)this + 59);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 59) = v34;
  *(_QWORD *)&v55 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MeshSystem *)((char *)this + 432), v36, &v55);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 59) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 448) & 1) != 0)
      v39 = (char *)this + 456;
    else
      v39 = (char *)*((_QWORD *)this + 58);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 55) - 8] &= v37;
  }
  v16 = v68;
  v15 = (char *)this + 432;
LABEL_49:
  v40 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 496))
    goto LABEL_67;
  v41 = *((_QWORD *)this + 55);
  v42 = *((_DWORD *)this + 112);
  if (v41 >= 0xB)
  {
    if ((v42 & 1) != 0)
      v43 = (_QWORD *)((char *)this + 456);
    else
      v43 = (_QWORD *)*((_QWORD *)this + 58);
    v45 = 8 * v41;
    while (!*v43)
    {
      ++v43;
      v45 -= 8;
      if (!v45)
        goto LABEL_67;
    }
LABEL_65:
    v40 = (re::ecs2::System *)*((_QWORD *)this + 60);
    if (!*((_BYTE *)v40 + 86))
      re::ecs2::System::queueToRun(v40, 0.0);
    goto LABEL_67;
  }
  if ((v42 & 1) != 0)
  {
    v44 = (uint64_t *)((char *)this + 456);
    if (!v41)
      goto LABEL_67;
  }
  else
  {
    v44 = (uint64_t *)*((_QWORD *)this + 58);
    if (!v41)
      goto LABEL_67;
  }
  v46 = 0;
  v47 = 8 * v41;
  do
  {
    v48 = *v44++;
    v46 |= v48;
    v47 -= 8;
  }
  while (v47);
  if (v46)
    goto LABEL_65;
LABEL_67:
  v54 = (re::ecs2::Scene *)a2;
  v49 = a2[36];
  if (v49)
  {
    v50 = re::globalAllocators(v40)[2];
    *((_QWORD *)&v56 + 1) = v50;
    v51 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 32, 0);
    *v51 = &off_24ED5ED38;
    v51[1] = (char *)this + 504;
    v51[2] = re::ecs2::MeshComponentStateImpl::handleSceneEntityWillRemove;
    v51[3] = 0;
    *(_QWORD *)&v57 = v51;
    *((_QWORD *)&v69 + 1) = v50;
    *(_QWORD *)&v70 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v68, (uint64_t)&v55);
    *(_QWORD *)v63 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v49, (uint64_t)&v68, 0, 0);
    *(_QWORD *)&v63[8] = v52;
    if ((_QWORD)v70)
    {
      (**(void (***)(_QWORD))v70)(v70);
      if ((__int128 *)v70 != &v68)
        (*(void (**)(_QWORD))(**((_QWORD **)&v69 + 1) + 40))(*((_QWORD *)&v69 + 1));
      *(_QWORD *)&v70 = 0;
    }
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 592, (uint64_t *)&v54, v63);
    if ((_QWORD)v57)
    {
      (**(void (***)(_QWORD))v57)(v57);
      if ((__int128 *)v57 != &v55)
        (*(void (**)(_QWORD))(**((_QWORD **)&v56 + 1) + 40))(*((_QWORD *)&v56 + 1));
    }
  }
}

uint64_t re::ecs2::MeshSystem::willRemoveSceneFromECSService(re::ecs2::MeshSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::ComponentBucketsBase *v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::Scene *v20;

  v20 = a2;
  v4 = (uint64_t *)((char *)this + 320);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 40, &v20);
  if (v5 != -1)
  {
    v6 = *((_QWORD *)this + 41) + 16 * v5;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 384, *(_QWORD *)(v6 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 432, *(_QWORD *)(v6 + 8));
    v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 264, *(_QWORD *)(v6 + 8));
    if (*v7)
    {
      v8 = v7;
      *v7 = 0;
      v9 = v7 + 1;
      v10 = *(_QWORD *)(v7[1] + 288);
      if (v10)
      {
        v11 = v7[12];
        if (v11)
        {
          for (i = 0; i != v11; ++i)
          {
            v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
            re::EventBus::unsubscribe(v10, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
      v14 = 0;
      v15 = v8 + 3;
      do
      {
        v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
        if (*(_QWORD *)v16)
          re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
        v15[v14++] = -1;
      }
      while (v14 != 4);
      *v9 = 0;
      v9[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v4, &v20);
  }
  v20 = a2;
  v17 = *((_QWORD *)a2 + 36);
  if (v17)
  {
    v18 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 592, (uint64_t *)&v20);
    if (v18)
      re::EventBus::unsubscribe(v17, *(_QWORD *)v18, *(_QWORD *)(v18 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 592, (uint64_t *)&v20);
  return re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 544, (uint64_t *)&v20);
}

uint64_t re::ecs2::MeshSystem::updateScenes(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *isStatisticCollectionEnabled;
  uint64_t v14;
  int64x2_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  re::ecs2::System *v58;
  _QWORD *v59;
  uint64_t v60;
  _BYTE v61[16];
  uint64_t v62[2];
  _QWORD v63[2];
  _OWORD v64[2];
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v63[0] = a3;
  v63[1] = a4;
  v4 = *(_QWORD *)(result + 104);
  if (v4 && (*(_BYTE *)(v4 + 424) & 0x10) != 0)
  {
    v6 = result;
    v7 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v62);
    v8 = a2[1];
    v59 = a2;
    v9 = 0;
    if (v8)
    {
      v10 = *a2;
      v11 = 8 * v8;
      do
      {
        v7 = (uint64_t *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v7)
          v12 = v7[3];
        else
          v12 = 0;
        v9 += v12;
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v7);
    if ((isStatisticCollectionEnabled & 1) != 0)
    {
      v14 = re::profilerThreadContext(isStatisticCollectionEnabled);
      v15 = *(int64x2_t **)(v14 + 152);
      if (v15)
      {
        v16 = v15[380].u64[0];
        if (v16 >= v9)
          v16 = v9;
        v15[380].i64[0] = v16;
        v17 = v15[380].u64[1];
        if (v17 <= v9)
          v17 = v9;
        v15[380].i64[1] = v17;
        v18 = vdupq_n_s64(1uLL);
        v18.i64[0] = v9;
        v15[381] = vaddq_s64(v15[381], v18);
        *(_BYTE *)(v14 + 184) = 0;
      }
    }
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v61, 3011, v6);
    v60 = v6 + 264;
    v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 512) + 144) + 16))(*(_QWORD *)(*(_QWORD *)(v6 + 512) + 144));
    v65 = 0;
    memset(v64, 0, sizeof(v64));
    v66 = 0x7FFFFFFFLL;
    v19 = *(unsigned int *)(v6 + 576);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = (int *)(*(_QWORD *)(v6 + 560) + 8);
      while (1)
      {
        v22 = *v21;
        v21 += 18;
        if (v22 < 0)
          break;
        if (v19 == ++v20)
        {
          LODWORD(v20) = *(_DWORD *)(v6 + 576);
          break;
        }
      }
    }
    else
    {
      LODWORD(v20) = 0;
    }
    if ((_DWORD)v19 != (_DWORD)v20)
    {
      v23 = v20;
      do
      {
        v24 = *(_QWORD *)(v6 + 560) + 72 * v23;
        v25 = v24 + 24;
        v68 = *(_QWORD *)(v24 + 16);
        v26 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 320), &v68);
        if (v26 != -1)
        {
          v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v60, *(_QWORD *)(*(_QWORD *)(v6 + 328) + 16 * v26 + 8));
          v28 = *(unsigned int *)(v25 + 32);
          if ((_DWORD)v28)
          {
            v29 = 0;
            v30 = (int *)(*(_QWORD *)(v25 + 16) + 8);
            while (1)
            {
              v31 = *v30;
              v30 += 6;
              if (v31 < 0)
                break;
              if (v28 == ++v29)
              {
                LODWORD(v29) = *(_DWORD *)(v25 + 32);
                break;
              }
            }
          }
          else
          {
            LODWORD(v29) = 0;
          }
          if ((_DWORD)v28 != (_DWORD)v29)
          {
            v32 = v29;
            do
            {
              re::ecs2::MeshComponentStateImpl::checkRenderOptionChanges(v27, *(_QWORD **)(*(_QWORD *)(v25 + 16) + 24 * v32 + 16), (re::ecs2::RenderOptions *)&v67, (uint64_t)v64);
              if (*(_DWORD *)(v25 + 32) <= (v29 + 1))
                v33 = v29 + 1;
              else
                v33 = *(_DWORD *)(v25 + 32);
              v34 = v29;
              while (1)
              {
                v32 = (v34 + 1);
                if (v33 - 1 == v34)
                  break;
                ++v34;
                LODWORD(v29) = v32;
                if ((*(_DWORD *)(*(_QWORD *)(v25 + 16) + 24 * v32 + 8) & 0x80000000) != 0)
                  goto LABEL_41;
              }
              LODWORD(v29) = v33;
LABEL_41:
              ;
            }
            while ((_DWORD)v28 != (_DWORD)v29);
          }
        }
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v25);
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v64);
        if (*(_DWORD *)(v6 + 576) <= (v20 + 1))
          v35 = v20 + 1;
        else
          v35 = *(_DWORD *)(v6 + 576);
        while (1)
        {
          v23 = (v20 + 1);
          if (v35 - 1 == (_DWORD)v20)
            break;
          LODWORD(v20) = v20 + 1;
          v36 = v23;
          if ((*(_DWORD *)(*(_QWORD *)(v6 + 560) + 72 * v23 + 8) & 0x80000000) != 0)
            goto LABEL_49;
        }
        v36 = v35;
LABEL_49:
        LODWORD(v20) = v36;
      }
      while ((_DWORD)v19 != v36);
    }
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v64);
    v37 = v59[1];
    if (v37)
    {
      v38 = (_QWORD *)*v59;
      v39 = *v59 + 8 * v37;
      while (1)
      {
        *(_QWORD *)&v64[0] = *v38;
        v40 = *(_QWORD *)(*(_QWORD *)(v6 + 328)
                        + 16
                        * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 320), v64)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(v6 + 432, v40);
        v41 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v60, v40);
        v42 = *(_QWORD *)(*v41 + 224);
        v43 = v41[3];
        v44 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v41[2] + 8, v43);
        if (*(_DWORD *)(v44 + 40))
          v45 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v42 + 24))(v42, v63, v41, v43, v44, 0);
        else
          v45 = 0;
        v46 = v41[5];
        v47 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v41[2] + 8, v46);
        if (*(_DWORD *)(v47 + 40))
          v45 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, v63, v41, v46, v47, 0);
        v48 = v41[6];
        v49 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v41[2] + 8, v48);
        if (*(_DWORD *)(v49 + 40))
          break;
        if (v45)
          goto LABEL_59;
LABEL_60:
        if (*(_BYTE *)(v6 + 496))
        {
          v50 = *(_QWORD *)(v6 + 440);
          v51 = *(_DWORD *)(v6 + 448);
          if (v50 < 0xB)
          {
            v54 = (uint64_t *)(v6 + 456);
            if ((v51 & 1) == 0)
              v54 = *(uint64_t **)(v6 + 464);
            if (!v50)
              goto LABEL_78;
            v55 = 0;
            v56 = 8 * v50;
            do
            {
              v57 = *v54++;
              v55 |= v57;
              v56 -= 8;
            }
            while (v56);
            if (!v55)
              goto LABEL_78;
          }
          else
          {
            v52 = (_QWORD *)(v6 + 456);
            if ((v51 & 1) == 0)
              v52 = *(_QWORD **)(v6 + 464);
            v53 = 8 * v50;
            while (!*v52)
            {
              ++v52;
              v53 -= 8;
              if (!v53)
                goto LABEL_78;
            }
          }
          v58 = *(re::ecs2::System **)(v6 + 480);
          if (!*((_BYTE *)v58 + 86))
            re::ecs2::System::queueToRun(v58, 0.0);
        }
LABEL_78:
        if (++v38 == (_QWORD *)v39)
          goto LABEL_79;
      }
      if (((v45 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v42 + 40))(v42, v63, v41, v48, v49, 0)) & 1) == 0)goto LABEL_60;
LABEL_59:
      re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 432, v40);
      goto LABEL_60;
    }
LABEL_79:
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v61);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v62);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_MeshComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C5F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C5F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C680, 0);
    *(uint64_t *)((char *)&qword_25410C690 + 6) = 0;
    qword_25410C690 = 0;
    qword_25410C6A0 = 0;
    qword_25410C6A8 = 0xFFFFFFFFLL;
    qword_25410C680 = (uint64_t)&off_24ED7DAA8;
    qword_25410C6B0 = (uint64_t)"MeshComponent";
    dword_25410C6B8 = 0;
    xmmword_25410C6C0 = 0u;
    unk_25410C6D0 = 0u;
    xmmword_25410C6E0 = 0u;
    qword_25410C6F0 = 0;
    __cxa_guard_release(&qword_25410C5F0);
  }
  return &qword_25410C680;
}

void re::ecs2::initInfo_MeshComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[2];
  __int128 v26;

  v25[0] = 0xDD4C76EC162562E0;
  v25[1] = "MeshComponent";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C5F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C5F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C618 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "materials";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410C620 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "mesh";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410C628 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_float((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "boundsMargin";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x6000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410C630 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityHandle>>::get((uint64_t)v21, v22);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "materialParameters";
      *(_QWORD *)(v23 + 16) = &qword_25410C640;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x6800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_25410C638 = v23;
      __cxa_guard_release(&qword_25410C5F8);
    }
  }
  *((_QWORD *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25410C618;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v24 = v26;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityHandle>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_25410C610);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25410C610))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_25410C640);
    qword_25410C640 = (uint64_t)&off_24ED5EF30;
    __cxa_guard_release(&qword_25410C610);
  }
  if ((byte_25410C4E9 & 1) == 0)
  {
    v3 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, a2);
    if ((byte_25410C4E9 & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_25410C4E9 = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C640, 0);
      qword_25410C650 = 0x2800000003;
      dword_25410C658 = v5;
      word_25410C65C = 0;
      *(_QWORD *)&xmmword_25410C660 = 0;
      *((_QWORD *)&xmmword_25410C660 + 1) = 0xFFFFFFFFLL;
      qword_25410C670 = v4;
      unk_25410C678 = 0;
      qword_25410C640 = (uint64_t)&off_24ED5EF30;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25410C640, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginListType((uint64_t)&v16, v14, 1, 0x28uLL, 8uLL, &v15);
        re::TypeBuilder::setConstructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v16, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v16, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v16, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_25410C660 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

id *re::internal::defaultConstruct<re::ecs2::MeshComponent>(int a1, int a2, id *this)
{
  return re::ecs2::MeshComponent::MeshComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshComponent>, this);
}

uint64_t *re::ecs2::allocInfo_MeshSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C600);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C600))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C6F8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410C708 = 0;
    qword_25410C718 = 0;
    qword_25410C720 = 0xFFFFFFFFLL;
    qword_25410C6F8 = (uint64_t)&off_24ED7DAA8;
    qword_25410C728 = (uint64_t)"MeshSystem";
    dword_25410C730 = 0;
    xmmword_25410C738 = 0u;
    unk_25410C748 = 0u;
    xmmword_25410C758 = 0u;
    qword_25410C768 = 0;
    __cxa_guard_release(&qword_25410C600);
  }
  return &qword_25410C6F8;
}

void re::ecs2::initInfo_MeshSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xF19CF6A8ED538;
  v5[1] = "MeshSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x2E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MeshSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::MeshSystem *re::internal::defaultConstruct<re::ecs2::MeshSystem>(int a1, int a2, re::ecs2::MeshSystem *this)
{
  return re::ecs2::MeshSystem::MeshSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MeshSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v4;
  uint64_t v5;

  a3[63] = (uint64_t)&off_24ED5EC40;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 74);
  v4 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a3 + 68);
  v5 = a3[65];
  if (v5)
  {
    if (a3[66])
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v5 + 40))(v5, a3[67], v4);
      a3[66] = 0;
      a3[67] = 0;
    }
    a3[65] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 33);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 23));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 20));
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshSystem>(uint64_t *a1)
{
  double v2;
  uint64_t v3;

  a1[63] = (uint64_t)&off_24ED5EC40;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 74);
  v2 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 68);
  v3 = a1[65];
  if (v3)
  {
    if (a1[66])
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v3 + 40))(v3, a1[67], v2);
      a1[66] = 0;
      a1[67] = 0;
    }
    a1[65] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 33);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 23));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 20));
  *a1 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSystem>, this);
}

uint64_t re::ecs2::MeshComponentStateImpl::dependsOnComponents(re::ecs2::MeshComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

void re::ecs2::MeshSystem::~MeshSystem(re::ecs2::MeshSystem *this)
{
  double v2;
  uint64_t v3;

  *((_QWORD *)this + 63) = &off_24ED5EC40;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 74);
  v2 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 68);
  v3 = *((_QWORD *)this + 65);
  if (v3)
  {
    if (*((_QWORD *)this + 66))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 67), v2);
      *((_QWORD *)this + 66) = 0;
      *((_QWORD *)this + 67) = 0;
    }
    *((_QWORD *)this + 65) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 33);
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 184));
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 160));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  double v2;
  uint64_t v3;

  *((_QWORD *)this + 63) = &off_24ED5EC40;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 74);
  v2 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 68);
  v3 = *((_QWORD *)this + 65);
  if (v3)
  {
    if (*((_QWORD *)this + 66))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 67), v2);
      *((_QWORD *)this + 66) = 0;
      *((_QWORD *)this + 67) = 0;
    }
    *((_QWORD *)this + 65) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 33);
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 184));
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSystem *)((char *)this + 160));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MeshSystem::typeInfo(re::ecs2::MeshSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSystem>, 0);
}

_QWORD *re::FixedArray<re::ArgumentBufferTextureRecord>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (id *)result[2];
      v5 = 32 * v2;
      do
      {
        re::ArgumentBufferTextureRecord::~ArgumentBufferTextureRecord(v4);
        v4 = (id *)(v6 + 32);
        v5 -= 32;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 72 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 72 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 72 * v4 + 16) == v2)
        return v6 + 72 * v4 + 24;
    }
    return 0;
  }
  return v6 + 72 * v4 + 24;
}

_QWORD *re::DynamicArray<re::BlurPlaneData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 144 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::BlurPlaneData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::BucketArray<re::MeshDeformation,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::MeshDeformation,8ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::MeshDeformation,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 104 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 104 * (a2 & 7);
}

void `anonymous namespace'::getPerceptualBlendingMode(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  BOOL v2;
  char v3;
  _BYTE v4[4];
  int v5;

  re::Defaults::intValue((re::Defaults *)"perceptualBlendingMode", a2, (uint64_t)v4);
  if (v4[0])
    v2 = v5 == 0;
  else
    v2 = 1;
  v3 = !v2;
  re::internal::perceptual_alpha::never_use_this::g_enablePerceptualAlpha = v3;
}

uint64_t re::DebugSettingsManager::getWithErrorCode<int>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (!*(_BYTE *)(a1 + 112))
    return 3;
  if (!a3)
    return 4;
  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = re::DebugSettingsManager::contains<int>(a1, a2);
  if (!(_DWORD)v7)
  {
    v8 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a1)
    {
      v9 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if ((_DWORD)v10 != 0x7FFFFFFF)
      {
        v11 = *(_QWORD *)(a1 + 16);
        v8 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((_QWORD *)(v11 + 40 * v10 + 8), a2))
        {
          v10 = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        v8 = v10;
      }
    }
LABEL_13:
    v12 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v12 + 40 * v8 + 24))
    {
      v13 = *(_QWORD *)(v12 + 40 * v8 + 28);
      if (!HIDWORD(v13))
        *a3 = v13;
      v7 = HIDWORD(v13) != 0;
    }
    else
    {
      v7 = 5;
    }
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::DebugSettingsManager::contains<int>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 112))
    return 3;
  v2 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1, a2);
  if (!v2)
    return 1;
  if (*(_BYTE *)v2 && *(_DWORD *)(v2 + 8))
    return 2;
  return 0;
}

void re::FixedArray<re::DeformationInputData>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0x186186186186187)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 168, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 168 * a3;
  v6 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 168 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 168);
    v8 += v5 - 168;
  }
  *((_QWORD *)v8 + 20) = 0;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
}

uint64_t *re::BucketArray<re::MeshDeformation,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 832, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::MeshDeformation,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshDeformation,8ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5ED38;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5ED38;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshComponentStateImpl,REEventHandlerResult (re::ecs2::MeshComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v18 = *a2;
  *(_DWORD *)(v18 + 8) = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v18);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(a2 + 8) ^ ((unint64_t)*(unsigned int *)(a2 + 8) >> 30));
  v5 = v3 ^ *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v4 ^ (v4 >> 27))) >> 31))
                                      - 0x61C8864680B583E9);
  *(_QWORD *)(result + 40) = v5;
  *(_QWORD *)(result + 48) = v6;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd((_anonymous_namespace_ *)v22, (_QWORD *)(*(_QWORD *)(v20[0] + 8) + 16 * v10), (_DWORD *)(*(_QWORD *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v10 = v21;
      }
      while (v21 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v12 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  result = *((_QWORD *)&v22[3] + 1);
  v13 = v22[0];
  v14 = v22[1];
  *(_QWORD *)&v22[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v22[0] = *a1;
  *((_QWORD *)&v22[0] + 1) = v16;
  v17 = v22[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v22[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  LODWORD(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v17);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

_QWORD *re::DynamicArray<re::TextureHandle>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TextureHandle>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureHandle>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TextureHandle>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::TextureHandle *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TextureHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_21;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_21:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::TextureHandle *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 16 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = 0;
          v12 = *(_QWORD *)v8;
          if (*((_QWORD *)v8 + 1))
            v13 = v12 == 0;
          else
            v13 = 1;
          if (!v13)
          {
            *v11 = v12;
            v11[1] = *((_QWORD *)v8 + 1);
            *((_QWORD *)v8 + 1) = 0;
          }
          re::TextureHandle::invalidate(v8);
          v8 = (re::TextureHandle *)((char *)v8 + 16);
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
        v8 = (re::TextureHandle *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::TextureHandle *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 7);
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::FixedArray<re::AABB>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 32 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 24) = 0u;
  v14 += 24;
  *(_DWORD *)(v14 + 32) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::DynamicArray<re::StencilPortal>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 736 * v4;
        do
        {
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v3 + 288);
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 736);
          v5 -= 736;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 8), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v36, 0, 36);
          *(_QWORD *)&v36[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v36, v14, v13);
          v16 = *(_OWORD *)v36;
          *(_OWORD *)v36 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v36[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v36[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v36[24];
          *(_OWORD *)&v36[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v36[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              v22 += 256;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::ecs2::MeshComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent> *,re::ecs2::ComponentBuckets<re::ecs2::MeshComponent>::BucketIteration,void *)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v36);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + (v10 << 8) + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + (v10 << 8) + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + (v10 << 8) + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 8) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 8) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 8)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 8) + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + (v10 << 8);
  *(_QWORD *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v27 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v27;
  v28 = *(_QWORD *)(v26 + 56);
  *(_QWORD *)(v26 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v28;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v26 + 48);
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  v26 += 64;
  *(_DWORD *)(v26 + 16) = 1;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v26, a5 + 40);
  *(_QWORD *)(v26 + 88) = 0;
  *(_DWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 56) = 0;
  *(_QWORD *)(v26 + 56) = *(_QWORD *)(a5 + 96);
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(v26 + 64) = *(_QWORD *)(a5 + 104);
  *(_QWORD *)(a5 + 104) = 0;
  v29 = *(_QWORD *)(v26 + 72);
  *(_QWORD *)(v26 + 72) = *(_QWORD *)(a5 + 112);
  *(_QWORD *)(a5 + 112) = v29;
  v30 = *(_QWORD *)(v26 + 88);
  *(_QWORD *)(v26 + 88) = *(_QWORD *)(a5 + 128);
  *(_QWORD *)(a5 + 128) = v30;
  ++*(_DWORD *)(a5 + 120);
  ++*(_DWORD *)(v26 + 80);
  *(_BYTE *)(v26 + 96) = *(_BYTE *)(a5 + 136);
  *(_QWORD *)(v26 + 136) = 0;
  *(_QWORD *)(v26 + 112) = 0;
  *(_QWORD *)(v26 + 120) = 0;
  *(_QWORD *)(v26 + 104) = 0;
  *(_DWORD *)(v26 + 128) = 0;
  *(_QWORD *)(v26 + 104) = *(_QWORD *)(a5 + 144);
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(v26 + 112) = *(_QWORD *)(a5 + 152);
  *(_QWORD *)(a5 + 152) = 0;
  v31 = *(_QWORD *)(v26 + 120);
  *(_QWORD *)(v26 + 120) = *(_QWORD *)(a5 + 160);
  *(_QWORD *)(a5 + 160) = v31;
  v32 = *(_QWORD *)(v26 + 136);
  *(_QWORD *)(v26 + 136) = *(_QWORD *)(a5 + 176);
  *(_QWORD *)(a5 + 176) = v32;
  ++*(_DWORD *)(a5 + 168);
  ++*(_DWORD *)(v26 + 128);
  *(_QWORD *)(v26 + 176) = 0;
  *(_QWORD *)(v26 + 152) = 0;
  *(_QWORD *)(v26 + 160) = 0;
  *(_QWORD *)(v26 + 144) = 0;
  *(_DWORD *)(v26 + 168) = 0;
  *(_QWORD *)(v26 + 144) = *(_QWORD *)(a5 + 184);
  *(_QWORD *)(a5 + 184) = 0;
  *(_QWORD *)(v26 + 152) = *(_QWORD *)(a5 + 192);
  *(_QWORD *)(a5 + 192) = 0;
  v33 = *(_QWORD *)(v26 + 160);
  *(_QWORD *)(v26 + 160) = *(_QWORD *)(a5 + 200);
  *(_QWORD *)(a5 + 200) = v33;
  v34 = *(_QWORD *)(v26 + 176);
  *(_QWORD *)(v26 + 176) = *(_QWORD *)(a5 + 216);
  *(_QWORD *)(a5 + 216) = v34;
  ++*(_DWORD *)(a5 + 208);
  ++*(_DWORD *)(v26 + 168);
  *(_WORD *)(v26 + 184) = *(_WORD *)(a5 + 224);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

_QWORD *re::DynamicArray<re::StencilPortal>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::StencilPortal>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x2E0uLL))
        {
          v2 = 736 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 736 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 736, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[92 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v13 = v8[2];
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v11[2] = v13;
          v14 = *((_OWORD *)v8 + 10);
          v15 = *((_OWORD *)v8 + 11);
          v16 = *((_OWORD *)v8 + 13);
          *((_OWORD *)v11 + 12) = *((_OWORD *)v8 + 12);
          *((_OWORD *)v11 + 13) = v16;
          *((_OWORD *)v11 + 10) = v14;
          *((_OWORD *)v11 + 11) = v15;
          v17 = *((_OWORD *)v8 + 6);
          v18 = *((_OWORD *)v8 + 7);
          v19 = *((_OWORD *)v8 + 9);
          *((_OWORD *)v11 + 8) = *((_OWORD *)v8 + 8);
          *((_OWORD *)v11 + 9) = v19;
          *((_OWORD *)v11 + 6) = v17;
          *((_OWORD *)v11 + 7) = v18;
          v20 = *((_OWORD *)v8 + 2);
          v21 = *((_OWORD *)v8 + 3);
          v22 = *((_OWORD *)v8 + 5);
          *((_OWORD *)v11 + 4) = *((_OWORD *)v8 + 4);
          *((_OWORD *)v11 + 5) = v22;
          *((_OWORD *)v11 + 2) = v20;
          *((_OWORD *)v11 + 3) = v21;
          v23 = *((_OWORD *)v8 + 14);
          v24 = *((_OWORD *)v8 + 15);
          v25 = *((_OWORD *)v8 + 17);
          *((_OWORD *)v11 + 16) = *((_OWORD *)v8 + 16);
          *((_OWORD *)v11 + 17) = v25;
          *((_OWORD *)v11 + 14) = v23;
          *((_OWORD *)v11 + 15) = v24;
          *((_OWORD *)v11 + 20) = 0u;
          *((_OWORD *)v11 + 21) = 0u;
          *((_OWORD *)v11 + 18) = 0u;
          *((_OWORD *)v11 + 19) = 0u;
          v26 = v8 + 36;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)v11 + 36, v8 + 36);
          *((_DWORD *)v11 + 88) = *((_DWORD *)v8 + 88);
          v27 = *((unsigned __int8 *)v8 + 360);
          *((_BYTE *)v11 + 360) = v27;
          if (v27)
            v11[46] = v8[46];
          *(_OWORD *)(v11 + 47) = *(_OWORD *)(v8 + 47);
          v28 = *(_OWORD *)(v8 + 49);
          v29 = *(_OWORD *)(v8 + 51);
          v30 = *(_OWORD *)(v8 + 53);
          *(_OWORD *)(v11 + 55) = *(_OWORD *)(v8 + 55);
          *(_OWORD *)(v11 + 53) = v30;
          *(_OWORD *)(v11 + 51) = v29;
          *(_OWORD *)(v11 + 49) = v28;
          v31 = *(_OWORD *)(v8 + 57);
          v32 = *(_OWORD *)(v8 + 59);
          v33 = *(_OWORD *)(v8 + 61);
          *(_OWORD *)(v11 + 63) = *(_OWORD *)(v8 + 63);
          *(_OWORD *)(v11 + 61) = v33;
          *(_OWORD *)(v11 + 59) = v32;
          *(_OWORD *)(v11 + 57) = v31;
          v34 = *((unsigned __int8 *)v8 + 528);
          *((_BYTE *)v11 + 528) = v34;
          if (v34)
          {
            v35 = *((_OWORD *)v8 + 35);
            *((_OWORD *)v11 + 34) = *((_OWORD *)v8 + 34);
            *((_OWORD *)v11 + 35) = v35;
          }
          v11[72] = v8[72];
          v36 = *((unsigned __int8 *)v8 + 592);
          *((_BYTE *)v11 + 592) = v36;
          if (v36)
          {
            v37 = *((_OWORD *)v8 + 38);
            v38 = *((_OWORD *)v8 + 39);
            v39 = *((_OWORD *)v8 + 41);
            *((_OWORD *)v11 + 40) = *((_OWORD *)v8 + 40);
            *((_OWORD *)v11 + 41) = v39;
            *((_OWORD *)v11 + 38) = v37;
            *((_OWORD *)v11 + 39) = v38;
          }
          v11[84] = v8[84];
          v40 = *((_OWORD *)v8 + 43);
          v41 = *((_OWORD *)v8 + 44);
          *(_DWORD *)((char *)v11 + 719) = *(_DWORD *)((char *)v8 + 719);
          *((_OWORD *)v11 + 43) = v40;
          *((_OWORD *)v11 + 44) = v41;
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(v8 + 36));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 92;
          v11 += 92;
        }
        while (v26 + 56 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2[7];
  if (v4)
  {
    re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((_QWORD *)a1, v4, a2[3]);
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  uint64_t i;

  v2 = result;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 6) = 0;
  v3 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    v4 = 0;
    *(_QWORD *)&v5 = -1;
    *((_QWORD *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(_QWORD *)result + 16 * v4++) = v5;
    while (v4 < *((_QWORD *)result + 2) >> 4);
  }
  v13[0] = a2;
  v6 = a2[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a2;
    v9 = v6 >> 4;
    while (1)
    {
      v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        return result;
    }
    v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; v11 = i)
    {
      v12 = *(_OWORD *)(*(_QWORD *)(v13[0] + 8) + 16 * v11);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(v2, &v12, (_DWORD *)&v12 + 2);
      result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
  return result;
}

_QWORD *re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 4, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::GlobalDirectionalLightRenderFrameData,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2256774A4()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5EDD0;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5EE28;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5EE80;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5EED8;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5EDD0;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5EE28;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5EE80;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5EED8;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 176);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EDD0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EDD0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EE28;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EE28;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EE80;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EE80;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5EED8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5EED8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::EntityHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::EntityHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::EntityHandle>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  re::IntrospectionBase *v9;
  id location[3];

  objc_initWeak(location, 0);
  location[1] = 0;
  location[2] = 0;
  re::ecs2::EntityHandle::reset(location);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::EntityHandle>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  re::ecs2::EntityHandle::EntityHandle(*(_QWORD *)(a4 + 32) + 24 * v8, (uint64_t)location);
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::ecs2::EntityHandle::reset(location);
  objc_destroyWeak(location);
  v9 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 24 * *(_QWORD *)(a4 + 16) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (id *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 24 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ecs2::EntityHandle::EntityHandle(v11, (uint64_t)v8);
          re::ecs2::EntityHandle::reset(v8);
          objc_destroyWeak(v8);
          *v8 = 0;
          v8 += 3;
          v11 += 24;
          v10 -= 24;
        }
        while (v10);
        v8 = (id *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, id *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::EntityHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 24 * a2;
    v9 = a2;
    do
    {
      v10 = (id *)(*(_QWORD *)(a1 + 32) + v8);
      re::ecs2::EntityHandle::reset(v10);
      objc_destroyWeak(v10);
      *v10 = 0;
      ++v9;
      v8 += 24;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        objc_initWeak((id *)v7, 0);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        re::ecs2::EntityHandle::reset((id *)v7);
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::ecs2::EntityHandle>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::EntityHandle>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::EntityHandle>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityHandle>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::EntityHandle>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::EntityHandle>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::EntityHandle>::clear(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(id **)(a1 + 32);
    v4 = 24 * v2;
    do
    {
      re::ecs2::EntityHandle::reset(v3);
      objc_destroyWeak(v3);
      *v3 = 0;
      v3 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

id re::internal::defaultRetain<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_PortalComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_209);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_209))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C7E8, 0);
    *(uint64_t *)((char *)&qword_25410C7F8 + 6) = 0;
    qword_25410C7F8 = 0;
    qword_25410C808 = 0;
    qword_25410C810 = 0xFFFFFFFFLL;
    qword_25410C7E8 = (uint64_t)&off_24ED7DAA8;
    qword_25410C818 = (uint64_t)"PortalComponent";
    dword_25410C820 = 0;
    unk_25410C828 = 0u;
    unk_25410C838 = 0u;
    unk_25410C848 = 0u;
    qword_25410C858 = 0;
    __cxa_guard_release(&_MergedGlobals_209);
  }
  return &qword_25410C7E8;
}

void re::ecs2::initInfo_PortalComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  re *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0x5CCB8BD8A8704BA2;
  v49[1] = "PortalComponent";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C778);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C778);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C780 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "clipPlanePosition";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x4000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410C788 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 5;
      *((_QWORD *)v13 + 1) = "planePosition";
      *((_QWORD *)v13 + 2) = "clipPlanePosition";
      qword_25410C790 = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "clipPlaneNormal";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x5000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410C798 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 24, 8);
      *(_DWORD *)v18 = 5;
      *((_QWORD *)v18 + 1) = "planeNormal";
      *((_QWORD *)v18 + 2) = "clipPlaneNormal";
      qword_25410C7A0 = (uint64_t)v18;
      v19 = re::introspectionAllocator(v18);
      v20 = re::ecs2::introspect_WorldRootToken((re::IntrospectionBase **)1);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "worldRootToken";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x2000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25410C7A8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_BOOL((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "useClipPlane";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x8000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25410C7B0 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_BOOL((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "inheritsIBL";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x8100000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25410C7B8 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "inheritsProbeLighting";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x8200000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_25410C7C0 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_BOOL((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "allowsCrossing";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x830000000ALL;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_25410C7C8 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "targetWorldEntity";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x280000000BLL;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_25410C7D0 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v43 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "crossPlanePosition";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x600000000CLL;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_25410C7D8 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v46 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "crossPlaneNormal";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x700000000DLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_25410C7E0 = v47;
      __cxa_guard_release(&qword_25410C778);
    }
  }
  *((_QWORD *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((_QWORD *)this + 8) = &qword_25410C780;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PortalComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PortalComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PortalComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PortalComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

uint64_t re::internal::defaultConstruct<re::ecs2::PortalComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PortalComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PortalComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;

  v4 = (id *)(a3 + 144);
  re::ecs2::EntityHandle::reset((id *)(a3 + 144));
  objc_destroyWeak(v4);
  *(_QWORD *)(a3 + 144) = 0;
  re::ecs2::EntityHandle::reset((id *)(a3 + 40));
  objc_destroyWeak((id *)(a3 + 40));
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::PortalComponent>(uint64_t a1)
{
  id *v2;

  v2 = (id *)(a1 + 144);
  re::ecs2::EntityHandle::reset((id *)(a1 + 144));
  objc_destroyWeak(v2);
  *(_QWORD *)(a1 + 144) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 40));
  objc_destroyWeak((id *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_PortalComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalComponent>, this);
}

char *re::ecs2::PortalComponent::targetWorldRootToken(uint64_t a1, uint64_t a2)
{
  char *result;

  result = *(char **)(a1 + 32);
  if ((unint64_t)(result - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    result = re::ecs2::EntityHandle::resolve((id *)(a1 + 40), a2);
    if (result)
    {
      result = (char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (result)
        return (char *)*((_QWORD *)result + 4);
    }
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::PortalComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  id *v4;

  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v2 = (id *)(a1 + 144);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57408;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = (id *)(v3 + 40);
  objc_initWeak((id *)(v3 + 40), 0);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  re::ecs2::EntityHandle::reset(v4);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = xmmword_2260E5F40;
  *(_DWORD *)(a1 + 128) = 0x1000000;
  *(_QWORD *)(a1 + 136) = 0;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  re::ecs2::EntityHandle::reset(v2);
  return a1;
}

void re::ecs2::ARSegmentationSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::DynamicString **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  re *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[3];
  id v35[2];
  id v36[2];
  void *v37;
  _OWORD *v38;
  _BYTE v39[18];
  __int16 v40;
  _BYTE v41[20];
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 104);
  if (!v5 || (*(_BYTE *)(v5 + 424) & 0x10) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = 8 * v6;
      while (1)
      {
        v9 = *(_QWORD *)(a1 + 112);
        if (!v9)
          break;
        v10 = *v7;
        v11 = *(_QWORD *)(v9 + 104);
        if (v11)
          v12 = (re::DynamicString **)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
        else
          v12 = 0;
        v2 = v10 + 200;
        v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v13 && *(_QWORD *)(v13 + 24))
        {
          v14 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (!v14)
            goto LABEL_48;
          v16 = *(_QWORD *)(v14 + 24);
          if (!v16)
            goto LABEL_48;
          v2 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 8 * v16 - 8);
          a2 = v2 + 32;
          if (*(_QWORD *)(v2 + 32))
          {
            if (*(_QWORD *)(v2 + 48))
            {
              v3 = v2 + 56;
              if (*(_QWORD *)(v2 + 56))
              {
                v34[2] = &off_24ED5F058;
                *(_OWORD *)v35 = 0u;
                *(_OWORD *)v36 = 0u;
                NS::SharedPtr<MTL::Texture>::operator=(v35, (void **)a2);
                NS::SharedPtr<MTL::Texture>::operator=(&v35[1], (void **)(v2 + 40));
                NS::SharedPtr<MTL::Texture>::operator=(v36, (void **)(v2 + 48));
                NS::SharedPtr<MTL::Texture>::operator=(&v36[1], (void **)(v2 + 56));
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v10, 0, v12, v34);
                v33 = v34[0] >> 1;
                v17 = re::RenderFrameData::stream((re::RenderFrameData *)(v12 + 33), (const re::WeakStringID *)&v33);
                v18 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v17, (uint64_t *)&v37);
                if (!v18)
                {
                  v27 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8);
                  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 32))(v27, 56, 8);
                  *(_QWORD *)v28 = 0;
                  *(_QWORD *)(v28 + 8) = 0;
                  *(_DWORD *)(v28 + 16) = 1;
                  *(_QWORD *)(v28 + 32) = 0;
                  *(_QWORD *)(v28 + 40) = 0;
                  *(_QWORD *)(v28 + 24) = 0;
                  *(_DWORD *)(v28 + 48) = 0;
                  v29 = (re *)re::BucketArray<re::ARSegmentationInputData,4ul>::init(v28, v27, 1uLL);
                  v30 = re::globalAllocators(v29)[2];
                  *(_QWORD *)v39 = &off_24ED5F0C8;
                  *(_QWORD *)&v39[8] = v27;
                  *(_QWORD *)&v41[4] = v30;
                  *(_QWORD *)&v41[12] = v39;
                  *(_QWORD *)&v42[0] = std::__any_imp::_SmallHandler<re::BucketArray<re::ARSegmentationInputData,4ul> *>::__handle[abi:nn180100];
                  *((_QWORD *)&v42[0] + 1) = v28;
                  *((_QWORD *)&v44 + 1) = v30;
                  *(_QWORD *)&v45 = 0;
                  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v43, (uint64_t)v39);
                  v18 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v17, (uint64_t *)&v37, (re *)v42);
                  if ((_QWORD)v45)
                  {
                    v38 = v42;
                    (*(void (**)(_QWORD, _OWORD **))(*(_QWORD *)v45 + 16))(v45, &v38);
                    if ((_QWORD)v45)
                    {
                      (**(void (***)(_QWORD))v45)(v45);
                      if ((__int128 *)v45 != &v43)
                        (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 40))(*((_QWORD *)&v44 + 1));
                      *(_QWORD *)&v45 = 0;
                    }
                  }
                  if (*(_QWORD *)&v42[0])
                    (*(void (**)(_QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))&v42[0])(0, v42, 0, 0, 0);
                  if (*(_QWORD *)&v41[12])
                  {
                    (***(void (****)(_QWORD))&v41[12])(*(_QWORD *)&v41[12]);
                    if (*(_BYTE **)&v41[12] != v39)
                      (*(void (**)(_QWORD))(**(_QWORD **)&v41[4] + 40))(*(_QWORD *)&v41[4]);
                  }
                }
                v20 = *(_OWORD *)v35;
                v21 = *(_OWORD *)v36;
                *(_OWORD *)v35 = 0u;
                *(_OWORD *)v36 = 0u;
                v22 = *(_QWORD *)(v19 + 40);
                v3 = *(_QWORD *)(v19 + 8);
                if (v22 + 1 > 4 * v3)
                {
                  v31 = v21;
                  v32 = v20;
                  re::BucketArray<re::ARSegmentationInputData,4ul>::setBucketsCapacity((_QWORD *)v19, (v22 + 4) >> 2);
                  v21 = v31;
                  v20 = v32;
                  v3 = *(_QWORD *)(v19 + 8);
                }
                v2 = v22 >> 2;
                if (v3 <= v22 >> 2)
                  goto LABEL_46;
                if ((*(_BYTE *)(v19 + 16) & 1) != 0)
                  v23 = v19 + 24;
                else
                  v23 = *(_QWORD *)(v19 + 32);
                v24 = *(_QWORD *)(v23 + 8 * v2);
                v25 = *(_QWORD *)(v19 + 40);
                *(_QWORD *)(v19 + 40) = v25 + 1;
                ++*(_DWORD *)(v19 + 48);
                v26 = v24 + 40 * (v22 & 3);
                *(_QWORD *)v26 = &off_24ED5F058;
                *(_OWORD *)(v26 + 8) = v20;
                *(_OWORD *)(v26 + 24) = v21;
                if (v25 == -1)
                  goto LABEL_47;
                re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v19, v25);
                re::StringID::destroyString((re::StringID *)v34);
                if (v36[1])
                {

                  v36[1] = 0;
                }
                if (v36[0])
                {

                  v36[0] = 0;
                }
                if (v35[1])
                {

                  v35[1] = 0;
                }
                if (v35[0])

              }
            }
          }
        }
        ++v7;
        v8 -= 8;
        if (!v8)
          return;
      }
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 40);
      _os_crash();
      __break(1u);
LABEL_46:
      v38 = 0;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      memset(v42, 0, sizeof(v42));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v39 = 136315906;
      *(_QWORD *)&v39[4] = "operator[]";
      *(_WORD *)&v39[12] = 1024;
      *(_DWORD *)&v39[14] = 858;
      v40 = 2048;
      *(_QWORD *)v41 = v2;
      *(_WORD *)&v41[8] = 2048;
      *(_QWORD *)&v41[10] = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_47:
      re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
LABEL_48:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "last", 233);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ARSegmentationInputData::~ARSegmentationInputData(re::ARSegmentationInputData *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {

    *((_QWORD *)this + 2) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {

    *((_QWORD *)this + 1) = 0;
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {

    *((_QWORD *)this + 2) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {

    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::allocInfo_ARSegmentationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_210);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_210))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C880, 0);
    *(uint64_t *)((char *)&qword_25410C890 + 6) = 0;
    qword_25410C890 = 0;
    qword_25410C8A0 = 0;
    qword_25410C8A8 = 0xFFFFFFFFLL;
    qword_25410C880 = (uint64_t)&off_24ED7DAA8;
    qword_25410C8B0 = (uint64_t)"ARSegmentationComponent";
    dword_25410C8B8 = 0;
    xmmword_25410C8C0 = 0u;
    unk_25410C8D0 = 0u;
    xmmword_25410C8E0 = 0u;
    qword_25410C8F0 = 0;
    __cxa_guard_release(&_MergedGlobals_210);
  }
  return &qword_25410C880;
}

void re::ecs2::initInfo_ARSegmentationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x6DFB8A95934C1F94;
  v10[1] = "ARSegmentationComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C870);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C870);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C868 = v8;
      __cxa_guard_release(&qword_25410C870);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410C868;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ARSegmentationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ARSegmentationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ARSegmentationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ARSegmentationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::ecs2::ARSegmentationComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57488;
  result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ARSegmentationComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = (void *)a3[7];
  if (v4)
  {

    a3[7] = 0;
  }
  v5 = (void *)a3[6];
  if (v5)
  {

    a3[6] = 0;
  }
  v6 = (void *)a3[5];
  if (v6)
  {

    a3[5] = 0;
  }
  v7 = (void *)a3[4];
  if (v7)
  {

    a3[4] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ARSegmentationComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57488;
  result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ARSegmentationComponent>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[7];
  if (v2)
  {

    a1[7] = 0;
  }
  v3 = (void *)a1[6];
  if (v3)
  {

    a1[6] = 0;
  }
  v4 = (void *)a1[5];
  if (v4)
  {

    a1[5] = 0;
  }
  v5 = (void *)a1[4];
  if (v5)
  {

    a1[4] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ARSegmentationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ARSegmentationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ARSegmentationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ARSegmentationComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ARSegmentationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C878);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C878))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C8F8, 0);
    *(uint64_t *)((char *)&qword_25410C908 + 6) = 0;
    qword_25410C908 = 0;
    qword_25410C918 = 0;
    qword_25410C920 = 0xFFFFFFFFLL;
    qword_25410C8F8 = (uint64_t)&off_24ED7DAA8;
    qword_25410C928 = (uint64_t)"ARSegmentationSystem";
    dword_25410C930 = 0;
    xmmword_25410C938 = 0u;
    unk_25410C948 = 0u;
    xmmword_25410C958 = 0u;
    qword_25410C968 = 0;
    __cxa_guard_release(&qword_25410C878);
  }
  return &qword_25410C8F8;
}

void re::ecs2::initInfo_ARSegmentationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x65F0A673CEC7504;
  v5[1] = "ARSegmentationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ARSegmentationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ARSegmentationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ARSegmentationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ARSegmentationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ARSegmentationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ARSegmentationSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED5EFC8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ARSegmentationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ARSegmentationSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED5EFC8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ARSegmentationSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ARSegmentationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ARSegmentationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ARSegmentationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ARSegmentationSystem>, this);
}

void re::ecs2::ARSegmentationSystem::~ARSegmentationSystem(re::ecs2::ARSegmentationSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ARSegmentationSystem::typeInfo(re::ecs2::ARSegmentationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ARSegmentationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ARSegmentationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ARSegmentationSystem>, 0);
}

_QWORD *re::BucketArray<re::ARSegmentationInputData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ARSegmentationInputData,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ARSegmentationInputData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::ARSegmentationInputData,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22567AAC4()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = (_QWORD *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, i);
        v8 = (void *)v7[4];
        if (v8)
        {

          v7[4] = 0;
        }
        v9 = (void *)v7[3];
        if (v9)
        {

          v7[3] = 0;
        }
        v10 = (void *)v7[2];
        if (v10)
        {

          v7[2] = 0;
        }
        v11 = (void *)v7[1];
        if (v11)
        {

          v7[1] = 0;
        }
      }
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5F0C8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5F0C8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::ARSegmentationInputData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

id re::internal::defaultRetain<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ARSegmentationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_VoiceComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_211);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_211))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410C998, 0);
    *(uint64_t *)((char *)&qword_25410C9A8 + 6) = 0;
    qword_25410C9A8 = 0;
    qword_25410C9B8 = 0;
    qword_25410C9C0 = 0xFFFFFFFFLL;
    qword_25410C998 = (uint64_t)&off_24ED7DAA8;
    qword_25410C9C8 = (uint64_t)"VoiceComponent";
    dword_25410C9D0 = 0;
    unk_25410C9D8 = 0u;
    unk_25410C9E8 = 0u;
    unk_25410C9F8 = 0u;
    qword_25410CA08 = 0;
    __cxa_guard_release(&_MergedGlobals_211);
  }
  return &qword_25410C998;
}

void re::ecs2::initInfo_VoiceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x733EBDF91934C016;
  v13[1] = "VoiceComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_25410C978);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410C978);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410C988 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_AudioSourceSyncState((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "syncState";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410C990 = v11;
      __cxa_guard_release(&qword_25410C978);
    }
  }
  *((_QWORD *)this + 2) = 0x48000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410C988;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VoiceComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VoiceComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VoiceComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VoiceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

re::ecs2::VoiceComponent *re::internal::defaultConstruct<re::ecs2::VoiceComponent>(int a1, int a2, re::ecs2::VoiceComponent *this)
{
  return re::ecs2::VoiceComponent::VoiceComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VoiceComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VoiceComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VoiceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VoiceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VoiceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VoiceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VoiceComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VoiceSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410C980);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410C980))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CA10, 0);
    *(uint64_t *)((char *)&qword_25410CA20 + 6) = 0;
    qword_25410CA20 = 0;
    qword_25410CA30 = 0;
    qword_25410CA38 = 0xFFFFFFFFLL;
    qword_25410CA10 = (uint64_t)&off_24ED7DAA8;
    qword_25410CA40 = (uint64_t)"VoiceSystem";
    dword_25410CA48 = 0;
    xmmword_25410CA50 = 0u;
    unk_25410CA60 = 0u;
    xmmword_25410CA70 = 0u;
    qword_25410CA80 = 0;
    __cxa_guard_release(&qword_25410C980);
  }
  return &qword_25410CA10;
}

void re::ecs2::initInfo_VoiceSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x20A5B5EC05173C2;
  v5[1] = "VoiceSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VoiceSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VoiceSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VoiceSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VoiceSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VoiceSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::VoiceSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 1, 1);
  *v3 = &off_24ED5F170;
}

void *re::internal::defaultDestruct<re::ecs2::VoiceSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::VoiceSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 1, 1);
  *v1 = &off_24ED5F170;
}

void *re::internal::defaultDestructV2<re::ecs2::VoiceSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VoiceSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VoiceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VoiceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VoiceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VoiceSystem>, this);
}

re::ecs2::VoiceComponent *re::ecs2::VoiceComponent::VoiceComponent(re::ecs2::VoiceComponent *this)
{
  uint64_t v2;
  _QWORD *v8;
  _anonymous_namespace_ *v9;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED5F120;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 9;
  *(_DWORD *)(v2 + 72) = 1065353216;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 100) = 1065353216;
  *(_BYTE *)(v2 + 108) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v2 + 112) = _D0;
  *(_DWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 136) = 1065353216;
  *(_BYTE *)(v2 + 144) = 0;
  *(_BYTE *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  v8 = (_QWORD *)(v2 + 192);
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v8, 0);
  *((_DWORD *)this + 56) = 1;
  *(_QWORD *)((char *)this + 228) = 0x3E051EB800000000;
  *((_DWORD *)this + 59) = 1106247680;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 32, 0);
  *((_WORD *)this + 144) = 0;
  re::AudioSourceState::AudioSourceState((re::ecs2::VoiceComponent *)((char *)this + 304));
  *((_WORD *)this + 560) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  return this;
}

void re::ecs2::VoiceComponent::~VoiceComponent(re::ecs2::VoiceComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED5F120;
  re::AudioSourceState::~AudioSourceState((re::ecs2::VoiceComponent *)((char *)this + 304));
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    if ((*((_BYTE *)this + 264) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 34));
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
  }
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if ((*((_BYTE *)this + 200) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 26));
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
  }
  if (*((_BYTE *)this + 144))
  {
    v4 = *((_QWORD *)this + 19);
    if (v4)
    {
      if ((*((_BYTE *)this + 160) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 21));
      *(_OWORD *)((char *)this + 152) = 0u;
      *(_OWORD *)((char *)this + 168) = 0u;
    }
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VoiceComponent *)((char *)this + 40));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::VoiceComponent::~VoiceComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::VoiceSystem::~VoiceSystem(re::ecs2::VoiceSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VoiceSystem::typeInfo(re::ecs2::VoiceSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VoiceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VoiceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VoiceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VoiceSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VoiceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_EnvironmentLightingConfigurationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_212);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_212))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CAA8, 0);
    *(uint64_t *)((char *)&qword_25410CAB8 + 6) = 0;
    qword_25410CAB8 = 0;
    qword_25410CAC8 = 0;
    qword_25410CAD0 = 0xFFFFFFFFLL;
    qword_25410CAA8 = (uint64_t)&off_24ED7DAA8;
    qword_25410CAD8 = (uint64_t)"EnvironmentLightingConfigurationComponent";
    dword_25410CAE0 = 0;
    xmmword_25410CAE8 = 0u;
    unk_25410CAF8 = 0u;
    xmmword_25410CB08 = 0u;
    qword_25410CB18 = 0;
    __cxa_guard_release(&_MergedGlobals_212);
  }
  return &qword_25410CAA8;
}

void re::ecs2::initInfo_EnvironmentLightingConfigurationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x7F1E61447B892B4CLL;
  v14[1] = "EnvironmentLightingConfigurationComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410CA90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410CA90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410CA98 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "environmentLightingWeight";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410CAA0 = v12;
      __cxa_guard_release(&qword_25410CA90);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410CA98;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::EnvironmentLightingConfigurationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::EnvironmentLightingConfigurationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::EnvironmentLightingConfigurationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::EnvironmentLightingConfigurationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::EnvironmentLightingConfigurationComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57508;
  *(_DWORD *)(v3 + 28) = 1065353216;
}

uint64_t re::internal::defaultDestruct<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::EnvironmentLightingConfigurationComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57508;
  *(_DWORD *)(v1 + 28) = 1065353216;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_EnvironmentLightingConfigurationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EnvironmentLightingConfigurationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EnvironmentLightingConfigurationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EnvironmentLightingConfigurationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EnvironmentLightingConfigurationComponent>, this);
}

float *CameraHelper<re::ecs2::PerspectiveCameraComponent>::moveCameraToLookAtAABB(float *result, float32x4_t *a2)
{
  float *v2;
  float32x4_t v3;
  uint32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  re::ecs2::EntityComponentCollection *v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  re::ecs2::TransformComponent **v14;
  int32x4_t v15;
  float v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __int128 v29;
  int32x4_t v30;
  __int128 v31;

  if (result)
  {
    v2 = result;
    v3 = a2[1];
    v4 = (uint32x4_t)vcgtq_f32(*a2, v3);
    v4.i32[3] = v4.i32[2];
    v27 = v3;
    v28 = *a2;
    if ((vmaxvq_u32(v4) & 0x80000000) != 0)
    {
      v6 = 0uLL;
    }
    else
    {
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
      v6 = vmulq_f32(vaddq_f32(*a2, v3), v5);
    }
    v26 = v6;
    v7 = (re::ecs2::EntityComponentCollection *)(result + 8);
    result = (float *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 8), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v8 = vsubq_f32(v27, v28);
      v9 = vmulq_f32(v8, v8);
      v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
      re::ecs2::PerspectiveCameraComponent::calculateProjection(result, (uint64_t)&v29, 1.0);
      v11 = atan2f((float)(*(float *)&v30.i32[1] - *(float *)&v30.i32[2]) * 0.5, *((float *)&v29 + 1));
      v12 = v11 + v11;
      v13 = *((_QWORD *)v2 + 30);
      if (!v13)
        v13 = re::ecs2::EntityComponentCollection::add(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v14 = *(re::ecs2::TransformComponent ***)(v13 + 16);
      if (v14)
      {
        re::ecs2::TransformComponent::worldSRT(v14, (const re::ecs2::Entity *)1, (uint64_t)&v29);
      }
      else
      {
        v15 = *(int32x4_t *)(v13 + 48);
        v29 = *(_OWORD *)(v13 + 32);
        v30 = v15;
        v31 = *(_OWORD *)(v13 + 64);
      }
      v16 = tanf(v12 * 0.5);
      v17.i64[0] = 0;
      v17.i32[3] = 0;
      *(float *)&v17.i32[2] = (float)((float)(v10 * 0.5) * 0.1) + (float)((float)(v10 * 0.5) / v16);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
      v19 = vnegq_f32((float32x4_t)v30);
      v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v19), (float32x4_t)v17, v18);
      v21 = (int8x16_t)vaddq_f32(v20, v20);
      v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
      v23 = vaddq_f32((float32x4_t)v17, vmulq_laneq_f32(v22, (float32x4_t)v30, 3));
      v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v19), v22, v18);
      v25 = vaddq_f32(v26, vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL)));
      re::ecs2::TransformComponent::setWorldPosition((_QWORD *)v13, v25.i64[0], v25.i64[1]);
      return (float *)re::ecs2::Component::markDirty((_QWORD *)v13);
    }
  }
  return result;
}

void re::ecs2::PerspectiveCameraComponent::getRealTimeProjection(re::ecs2::PerspectiveCameraComponent *this@<X0>, re::ecs2::Entity *a2@<X1>, re::RenderManager *a3@<X2>, float a4@<S0>, uint64_t a5@<X8>)
{
  re::ecs2::EntityComponentCollection *v7;
  re::ecs2::CameraViewDescriptorsComponent *v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  _BYTE *v13;
  uint64_t i;
  _OWORD *v15;
  uint64_t j;
  _QWORD *v17;
  re::ecs2::CameraViewDescriptorsComponent *v18;
  uint64_t ViewDescriptor;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  float v35;
  float v36;
  uint64_t v37;
  id v38;
  float v39;
  float v40;
  unsigned int v41;
  re::DrawingManager *v42;
  uint64_t v43;
  void *v44;
  float v45;
  void *v46;
  void *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x2_t v53;
  float v54;
  float v55;
  float v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float *v69;
  float *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  float v76;
  uint64_t v77;
  id v78;
  float v79;
  float v80;
  unsigned int v81;
  re::DrawingManager *v82;
  uint64_t v83;
  void *v84;
  float v85;
  void *v86;
  void *v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float32x2_t v93;
  float v94;
  float v95;
  float v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _OWORD *v100;
  _OWORD *v101;
  __int128 *v102;
  __int128 *v103;
  uint64_t v104;
  double v105;
  re::DrawingManager *v106;
  float v107;
  re::DrawingManager *v108;
  float v109;
  float v110;
  float v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  _OWORD *v118;
  _OWORD *v119;
  __int128 *v120;
  __int128 *v121;
  float v122;
  float v123;
  float32x4_t v124;
  float32x4_t v125;
  float v126;
  float v127;
  float v128;
  uint64_t v129;
  _OWORD *v130;
  _OWORD *v131;
  __int128 *v132;
  __int128 *v133;
  unint64_t *v134;
  char v135;
  uint64_t v136;
  unsigned int v137;
  re::ecs2::CameraViewDescriptorsComponent *v138;
  uint64_t v139;
  float *v140;
  uint64_t v141;
  uint64_t v142;
  re::ecs2::CameraViewDescriptorsComponent *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float *v153;
  float *v154;
  float *v155;
  float *v156;
  float *v157;
  float *v158;
  float *v159;
  float *v160;
  float *v161;
  float *v162;
  float *v163;
  float *v164;
  _OWORD v165[2];
  _BYTE v166[2];
  _OWORD v167[2];
  _OWORD v168[2];
  _OWORD v169[2];
  _OWORD v170[2];
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _OWORD v175[8];
  _BYTE v176[32];
  __int128 v177;
  __int128 v178;
  _BYTE v179[32];
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  unint64_t v186[2];
  _OWORD v187[18];
  char v188;
  uint64_t v189;

  v135 = (char)a3;
  v189 = *MEMORY[0x24BDAC8D0];
  v7 = (re::ecs2::PerspectiveCameraComponent *)((char *)this + 32);
  v8 = (re::ecs2::CameraViewDescriptorsComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::PerspectiveCameraComponent *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v9 = re::ecs2::EntityComponentCollection::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v11 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 240) = 0;
  v134 = (unint64_t *)(a5 + 240);
  *(_DWORD *)(a5 + 248) = 0;
  v12 = (float32x4_t)xmmword_2260E5F40;
  v136 = a5;
  *(_BYTE *)(a5 + 544) = 0;
  do
  {
    v13 = &v176[v11];
    *(_DWORD *)v13 = 0;
    *(_OWORD *)(v13 + 4) = xmmword_226117740;
    *(_QWORD *)(v13 + 20) = 0xBDCCCCCD3DCCCCCDLL;
    v13[28] = 0;
    *((_OWORD *)v13 + 2) = xmmword_2260E5F40;
    *((_DWORD *)v13 + 12) = 1;
    v11 += 64;
    *((_QWORD *)v13 + 7) = 0;
  }
  while (v11 != 128);
  for (i = 0; i != 8; i += 4)
  {
    v15 = &v175[i];
    *(_DWORD *)v15 = 0;
    *(_OWORD *)((char *)v15 + 4) = xmmword_226117740;
    *(_QWORD *)((char *)v15 + 20) = 0xBDCCCCCD3DCCCCCDLL;
    *((_BYTE *)v15 + 28) = 0;
    v15[2] = xmmword_2260E5F40;
    *((_DWORD *)v15 + 12) = 1;
    *((_QWORD *)v15 + 7) = 0;
  }
  v140 = (float *)v9;
  for (j = 0; j != 64; j += 32)
  {
    v17 = (_QWORD *)((char *)&v171 + j);
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = 0x3F80000000000000;
  }
  *(_OWORD *)&v176[12] = xmmword_22611D9A0;
  *(_OWORD *)&v179[12] = xmmword_22611D9A0;
  v175[2] = v177;
  v175[3] = v178;
  v175[0] = *(_OWORD *)v176;
  v175[1] = *(_OWORD *)&v176[16];
  v175[6] = v180;
  v175[7] = v181;
  v175[4] = *(_OWORD *)v179;
  v175[5] = *(_OWORD *)&v179[16];
  v143 = v8;
  if (*((_QWORD *)v8 + 27))
  {
    v18 = 0;
    do
    {
      v138 = v18;
      ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v8, v18);
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)v176 = v182;
      *(_OWORD *)&v176[16] = v183;
      v177 = v184;
      v178 = v185;
      re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 1, (uint64_t)v170);
      v171 = v170[0];
      v172 = v170[1];
      if (*(_BYTE *)(ViewDescriptor + 192))
      {
        re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
        *(_OWORD *)v179 = v182;
        *(_OWORD *)&v179[16] = v183;
        v180 = v184;
        v181 = v185;
        re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 2, (uint64_t)v169);
        v173 = v169[0];
        v174 = v169[1];
        v20 = 2;
      }
      else
      {
        v20 = 1;
      }
      v141 = v20;
      v21 = 0;
      v22 = 0;
      v23 = *(_QWORD *)(ViewDescriptor + 304);
      v24 = 32;
      v25 = 80;
      do
      {
        if (!v23)
          goto LABEL_36;
        v26 = 0;
        v27 = ViewDescriptor + 16 * v22;
        v28 = (unint64_t)&v176[64 * v22];
        v161 = (float *)(v27 + 208);
        v163 = (float *)(v27 + 204);
        v29 = (float *)(v28 | 0xC);
        v30 = (float *)(v28 + 16);
        v146 = v24;
        v148 = v22;
        v31 = (unint64_t)&v175[4 * v22];
        v155 = (float *)(v31 | 0xC);
        v153 = (float *)(v31 + 24);
        v144 = v25;
        v150 = v21;
        v157 = (float *)(v28 + 24);
        v159 = (float *)(v28 + 20);
        do
        {
          v32 = ViewDescriptor;
          v33 = *(_QWORD *)(ViewDescriptor + 320);
          re::AssetHandle::AssetHandle((re::AssetHandle *)&v182, (const re::AssetHandle *)(v33 + v24));
          v35 = *v163;
          v36 = *v161;
          if (*((_QWORD *)&v182 + 1))
          {
            v37 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v182);
            if (*(_DWORD *)(v37 + 240))
LABEL_113:
              std::__throw_bad_variant_access[abi:nn180100]();
            v38 = *(id *)(v37 + 160);
            v39 = (float)(unint64_t)objc_msgSend(v38, sel_width);
            v40 = v39 / (float)(unint64_t)objc_msgSend(v38, sel_height);
            if (v38)

          }
          else
          {
            v41 = *(_DWORD *)(v33 + v25);
            if (v41 == -1)
            {
              v43 = v33 + v21;
              v44 = *(void **)(v43 + 88);
              if (v44)
              {
                v45 = (float)(unint64_t)objc_msgSend(v44, sel_width);
                v46 = *(void **)(v43 + 88);
LABEL_26:
                v40 = v45 / (float)(unint64_t)objc_msgSend(v46, sel_height, v134);
                goto LABEL_28;
              }
              v47 = *(void **)(v43 + 104);
              if (v47)
              {
                v45 = (float)(unint64_t)objc_msgSend(v47, sel_width, v134);
                v46 = *(void **)(v43 + 104);
                goto LABEL_26;
              }
            }
            else
            {
              v42 = (re::DrawingManager *)*((_QWORD *)a2 + 13);
              if (v42)
              {
                v40 = re::DrawingManager::layerAspect(v42, v41, v34);
                goto LABEL_28;
              }
            }
            v40 = 1.0;
          }
LABEL_28:
          ViewDescriptor = v32;
          v48 = (float)(*v29 + *v30) * 0.5;
          v49 = *v159;
          v50 = *v157;
          v51 = (float)(*v159 - *v157) * 0.5;
          v52 = (float)((float)(v35 / v36) * v40) * v51;
          v53.f32[0] = v48 + v52;
          v54 = v48 - v52;
          if (a4 > 0.0)
          {
            v55 = (float)(v54 + v53.f32[0]) * 0.5;
            v56 = v51 * a4;
            v53.f32[0] = v56 + v55;
            v54 = v55 - v56;
          }
          if (v54 > *v155)
            v54 = *v155;
          *v29 = v54;
          v53.f32[1] = v49;
          *(int8x8_t *)v30 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v31 + 16), v53), *(int8x8_t *)(v31 + 16), (int8x8_t)v53);
          if (v50 > *v153)
            v50 = *v153;
          *v157 = v50;
          v57 = *(_OWORD *)(v28 + 16);
          *(_OWORD *)v31 = *(_OWORD *)v28;
          *(_OWORD *)(v31 + 16) = v57;
          v58 = *(_OWORD *)(v28 + 48);
          *(_OWORD *)(v31 + 32) = *(_OWORD *)(v28 + 32);
          *(_OWORD *)(v31 + 48) = v58;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v182);
          ++v26;
          v23 = *(_QWORD *)(v32 + 304);
          v21 += 136;
          v25 += 136;
          v24 += 136;
        }
        while (v23 > v26);
        v8 = v143;
        v25 = v144;
        v22 = v148;
        v21 = v150;
        v24 = v146;
LABEL_36:
        ++v22;
        v21 += 8;
        v25 += 4;
        v24 += 24;
      }
      while (v22 != v141);
      v18 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v138 + 1);
    }
    while (*((_QWORD *)v8 + 27) > (unint64_t)v138 + 1);
  }
  if (!*((_QWORD *)v8 + 32))
  {
    v137 = 1;
    goto LABEL_71;
  }
  v59 = 0;
  v137 = 1;
  do
  {
    v139 = v59;
    v60 = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v8, (re::ecs2::CameraViewDescriptorsComponent *)(v59 + 0x10000));
    re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
    *(_OWORD *)v176 = v182;
    *(_OWORD *)&v176[16] = v183;
    v177 = v184;
    v178 = v185;
    re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 1, (uint64_t)v168);
    v171 = v168[0];
    v172 = v168[1];
    if (*(_BYTE *)(v60 + 192))
    {
      v142 = 2;
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)v179 = v182;
      *(_OWORD *)&v179[16] = v183;
      v180 = v184;
      v181 = v185;
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)v179 = v182;
      *(_OWORD *)&v179[16] = v183;
      v180 = v184;
      v181 = v185;
      re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 2, (uint64_t)v167);
      v173 = v167[0];
      v174 = v167[1];
      v137 = 2;
    }
    else
    {
      v142 = 1;
    }
    v61 = 0;
    v62 = 0;
    v63 = *(_QWORD *)(v60 + 304);
    v64 = 32;
    v65 = 80;
    do
    {
      if (!v63)
        goto LABEL_67;
      v66 = 0;
      v67 = v60 + 16 * v62;
      v68 = (unint64_t)&v176[64 * v62];
      v162 = (float *)(v67 + 208);
      v164 = (float *)(v67 + 204);
      v69 = (float *)(v68 | 0xC);
      v70 = (float *)(v68 + 16);
      v147 = v64;
      v149 = v62;
      v71 = (unint64_t)&v175[4 * v62];
      v156 = (float *)(v71 | 0xC);
      v154 = (float *)(v71 + 24);
      v145 = v65;
      v151 = v61;
      v158 = (float *)(v68 + 24);
      v160 = (float *)(v68 + 20);
      do
      {
        v72 = v60;
        v73 = *(_QWORD *)(v60 + 320);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v182, (const re::AssetHandle *)(v73 + v64));
        v75 = *v164;
        v76 = *v162;
        if (!*((_QWORD *)&v182 + 1))
        {
          v81 = *(_DWORD *)(v73 + v65);
          if (v81 != -1)
          {
            v82 = (re::DrawingManager *)*((_QWORD *)a2 + 13);
            if (v82)
            {
              v80 = re::DrawingManager::layerAspect(v82, v81, v74);
              goto LABEL_59;
            }
            goto LABEL_58;
          }
          v83 = v73 + v61;
          v84 = *(void **)(v83 + 88);
          if (v84)
          {
            v85 = (float)(unint64_t)objc_msgSend(v84, sel_width);
            v86 = *(void **)(v83 + 88);
          }
          else
          {
            v87 = *(void **)(v83 + 104);
            if (!v87)
            {
LABEL_58:
              v80 = 1.0;
              goto LABEL_59;
            }
            v85 = (float)(unint64_t)objc_msgSend(v87, sel_width);
            v86 = *(void **)(v83 + 104);
          }
          v80 = v85 / (float)(unint64_t)objc_msgSend(v86, sel_height, v134);
          goto LABEL_59;
        }
        v77 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v182);
        if (*(_DWORD *)(v77 + 240))
          goto LABEL_113;
        v78 = *(id *)(v77 + 160);
        v79 = (float)(unint64_t)objc_msgSend(v78, sel_width);
        v80 = v79 / (float)(unint64_t)objc_msgSend(v78, sel_height);
        if (v78)

LABEL_59:
        v60 = v72;
        v88 = (float)(*v69 + *v70) * 0.5;
        v89 = *v160;
        v90 = *v158;
        v91 = (float)(*v160 - *v158) * 0.5;
        v92 = (float)((float)(v75 / v76) * v80) * v91;
        v93.f32[0] = v88 + v92;
        v94 = v88 - v92;
        if (a4 > 0.0)
        {
          v95 = (float)(v94 + v93.f32[0]) * 0.5;
          v96 = v91 * a4;
          v93.f32[0] = v96 + v95;
          v94 = v95 - v96;
        }
        if (v94 > *v156)
          v94 = *v156;
        *v69 = v94;
        v93.f32[1] = v89;
        *(int8x8_t *)v70 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v71 + 16), v93), *(int8x8_t *)(v71 + 16), (int8x8_t)v93);
        if (v90 > *v154)
          v90 = *v154;
        *v158 = v90;
        v97 = *(_OWORD *)(v68 + 16);
        *(_OWORD *)v71 = *(_OWORD *)v68;
        *(_OWORD *)(v71 + 16) = v97;
        v98 = *(_OWORD *)(v68 + 48);
        *(_OWORD *)(v71 + 32) = *(_OWORD *)(v68 + 32);
        *(_OWORD *)(v71 + 48) = v98;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v182);
        ++v66;
        v63 = *(_QWORD *)(v72 + 304);
        v61 += 136;
        v65 += 136;
        v64 += 136;
      }
      while (v63 > v66);
      v8 = v143;
      v65 = v145;
      v62 = v149;
      v61 = v151;
      v64 = v147;
LABEL_67:
      ++v62;
      v61 += 8;
      v65 += 4;
      v64 += 24;
    }
    while (v62 != v142);
    v59 = v139 + 1;
  }
  while (*((_QWORD *)v8 + 32) > (unint64_t)(v139 + 1));
LABEL_71:
  v166[0] = v135;
  v166[1] = 0;
  re::buildCullingFrustum((uint64_t)&v171, v176, v137, v166, (uint64_t)&v182, v12, v10);
  v99 = v136;
  if (&v182 != (__int128 *)v136)
  {
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)v136, (unint64_t *)&v182);
    ++*(_DWORD *)(v136 + 8);
    re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(v134, v186);
    v99 = v136;
    ++*(_DWORD *)(v136 + 248);
  }
  *(_BYTE *)(v99 + 544) = v188;
  if (v186[0])
  {
    v100 = v187;
    v101 = &v187[9 * v186[0]];
    do
    {
      *(_QWORD *)v100 = 0;
      ++*((_DWORD *)v100 + 2);
      v100 += 9;
    }
    while (v100 != v101);
  }
  if ((_QWORD)v182)
  {
    v102 = &v183;
    v103 = &v183 + 7 * v182;
    do
    {
      *(_QWORD *)v102 = 0;
      ++*((_DWORD *)v102 + 2);
      v102 += 7;
    }
    while (v102 != v103);
  }
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v140, 0, (uint64_t)v165);
  v171 = v165[0];
  v172 = v165[1];
  v104 = *((_QWORD *)v8 + 27);
  if (v104)
  {
LABEL_80:
    if (v104 == 1
      && !*((_QWORD *)v8 + 32)
      && !*(_QWORD *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v8, 0) + 304))
    {
      v106 = (re::DrawingManager *)*((_QWORD *)a2 + 13);
      if (v106)
        v107 = re::DrawingManager::layerAspect(v106, 0, v105);
      else
        v107 = 1.0;
      re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
      *(_OWORD *)v176 = v182;
      *(_OWORD *)&v176[16] = v183;
      v177 = v184;
      v178 = v185;
      v122 = (float)(*((float *)&v182 + 3) + *(float *)&v183) * 0.5;
      v123 = (float)(*((float *)&v183 + 1) - *((float *)&v183 + 2)) * 0.5;
      v124.f32[0] = v107 * v123;
      v125.f32[0] = v122 + (float)(v107 * v123);
      v126 = v122 - (float)(v107 * v123);
      *(_DWORD *)&v176[16] = v125.i32[0];
      *(float *)&v176[12] = v126;
      if (a4 > 0.0)
      {
        v127 = (float)(v126 + v125.f32[0]) * 0.5;
        v128 = v123 * a4;
        v125.f32[0] = v128 + v127;
        *(float *)&v176[16] = v128 + v127;
        *(float *)&v176[12] = v127 - v128;
      }
      re::buildCullingFrustum((uint64_t)&v171, v176, 1u, v166, (uint64_t)&v182, v125, v124);
      v129 = v136;
      if (&v182 != (__int128 *)v136)
      {
        re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)v136, (unint64_t *)&v182);
        ++*(_DWORD *)(v136 + 8);
        re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(v134, v186);
        v129 = v136;
        ++*(_DWORD *)(v136 + 248);
      }
      *(_BYTE *)(v129 + 544) = v188;
      if (v186[0])
      {
        v130 = v187;
        v131 = &v187[9 * v186[0]];
        do
        {
          *(_QWORD *)v130 = 0;
          ++*((_DWORD *)v130 + 2);
          v130 += 9;
        }
        while (v130 != v131);
      }
      if ((_QWORD)v182)
      {
        v132 = &v183;
        v133 = &v183 + 7 * v182;
        do
        {
          *(_QWORD *)v132 = 0;
          ++*((_DWORD *)v132 + 2);
          v132 += 7;
        }
        while (v132 != v133);
      }
    }
  }
  else if (!*((_QWORD *)v8 + 32))
  {
    v108 = (re::DrawingManager *)*((_QWORD *)a2 + 13);
    if (v108)
      v109 = re::DrawingManager::layerAspect(v108, 0, *(double *)v165);
    else
      v109 = 1.0;
    re::ecs2::PerspectiveCameraComponent::calculateProjection(v140, (uint64_t)&v182, 1.0);
    *(_OWORD *)v176 = v182;
    *(_OWORD *)&v176[16] = v183;
    v177 = v184;
    v178 = v185;
    v110 = (float)(*((float *)&v182 + 3) + *(float *)&v183) * 0.5;
    v111 = (float)(*((float *)&v183 + 1) - *((float *)&v183 + 2)) * 0.5;
    v112.f32[0] = v109 * v111;
    v113.f32[0] = v110 + (float)(v109 * v111);
    v114 = v110 - (float)(v109 * v111);
    *(_DWORD *)&v176[16] = v113.i32[0];
    *(float *)&v176[12] = v114;
    if (a4 > 0.0)
    {
      v115 = (float)(v114 + v113.f32[0]) * 0.5;
      v116 = v111 * a4;
      v113.f32[0] = v116 + v115;
      *(float *)&v176[16] = v116 + v115;
      *(float *)&v176[12] = v115 - v116;
    }
    re::buildCullingFrustum((uint64_t)&v171, v176, 1u, v166, (uint64_t)&v182, v113, v112);
    v117 = v136;
    if (&v182 != (__int128 *)v136)
    {
      re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move((unint64_t *)v136, (unint64_t *)&v182);
      ++*(_DWORD *)(v136 + 8);
      re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(v134, v186);
      v117 = v136;
      ++*(_DWORD *)(v136 + 248);
    }
    *(_BYTE *)(v117 + 544) = v188;
    if (v186[0])
    {
      v118 = v187;
      v119 = &v187[9 * v186[0]];
      do
      {
        *(_QWORD *)v118 = 0;
        ++*((_DWORD *)v118 + 2);
        v118 += 9;
      }
      while (v118 != v119);
    }
    if ((_QWORD)v182)
    {
      v120 = &v183;
      v121 = &v183 + 7 * v182;
      do
      {
        *(_QWORD *)v120 = 0;
        ++*((_DWORD *)v120 + 2);
        v120 += 7;
      }
      while (v120 != v121);
    }
    v104 = *((_QWORD *)v8 + 27);
    goto LABEL_80;
  }
}

float *CameraHelper<re::ecs2::OrthographicCameraComponent>::moveCameraToLookAtAABB(float *result, float32x4_t *a2)
{
  float *v2;
  float32x4_t v3;
  uint32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  re::ecs2::EntityComponentCollection *v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  re::ecs2::TransformComponent **v14;
  int32x4_t v15;
  float v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __int128 v29;
  int32x4_t v30;
  __int128 v31;

  if (result)
  {
    v2 = result;
    v3 = a2[1];
    v4 = (uint32x4_t)vcgtq_f32(*a2, v3);
    v4.i32[3] = v4.i32[2];
    v27 = v3;
    v28 = *a2;
    if ((vmaxvq_u32(v4) & 0x80000000) != 0)
    {
      v6 = 0uLL;
    }
    else
    {
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
      v6 = vmulq_f32(vaddq_f32(*a2, v3), v5);
    }
    v26 = v6;
    v7 = (re::ecs2::EntityComponentCollection *)(result + 8);
    result = (float *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 8), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v8 = vsubq_f32(v27, v28);
      v9 = vmulq_f32(v8, v8);
      v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
      re::ecs2::OrthographicCameraComponent::calculateProjection(result, (uint64_t)&v29, 1.0);
      v11 = atan2f((float)(*(float *)&v30.i32[1] - *(float *)&v30.i32[2]) * 0.5, *((float *)&v29 + 1));
      v12 = v11 + v11;
      v13 = *((_QWORD *)v2 + 30);
      if (!v13)
        v13 = re::ecs2::EntityComponentCollection::add(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v14 = *(re::ecs2::TransformComponent ***)(v13 + 16);
      if (v14)
      {
        re::ecs2::TransformComponent::worldSRT(v14, (const re::ecs2::Entity *)1, (uint64_t)&v29);
      }
      else
      {
        v15 = *(int32x4_t *)(v13 + 48);
        v29 = *(_OWORD *)(v13 + 32);
        v30 = v15;
        v31 = *(_OWORD *)(v13 + 64);
      }
      v16 = tanf(v12 * 0.5);
      v17.i64[0] = 0;
      v17.i32[3] = 0;
      *(float *)&v17.i32[2] = (float)((float)(v10 * 0.5) * 0.1) + (float)((float)(v10 * 0.5) / v16);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
      v19 = vnegq_f32((float32x4_t)v30);
      v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v19), (float32x4_t)v17, v18);
      v21 = (int8x16_t)vaddq_f32(v20, v20);
      v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
      v23 = vaddq_f32((float32x4_t)v17, vmulq_laneq_f32(v22, (float32x4_t)v30, 3));
      v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v19), v22, v18);
      v25 = vaddq_f32(v26, vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL)));
      re::ecs2::TransformComponent::setWorldPosition((_QWORD *)v13, v25.i64[0], v25.i64[1]);
      return (float *)re::ecs2::Component::markDirty((_QWORD *)v13);
    }
  }
  return result;
}

_QWORD *CameraHelper<re::ecs2::CustomMatrixCameraComponent>::moveCameraToLookAtAABB(_QWORD *result, float32x4_t *a2)
{
  _QWORD *v2;
  float32x4_t v3;
  uint32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  re::ecs2::EntityComponentCollection *v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  re::ecs2::TransformComponent **v14;
  __int128 v15;
  float v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  _BYTE v29[32];
  __int128 v30;
  int v31;
  uint64_t v32;

  if (result)
  {
    v2 = result;
    v3 = a2[1];
    v4 = (uint32x4_t)vcgtq_f32(*a2, v3);
    v4.i32[3] = v4.i32[2];
    v27 = v3;
    v28 = *a2;
    if ((vmaxvq_u32(v4) & 0x80000000) != 0)
    {
      v6 = 0uLL;
    }
    else
    {
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
      v6 = vmulq_f32(vaddq_f32(*a2, v3), v5);
    }
    v26 = v6;
    v7 = (re::ecs2::EntityComponentCollection *)(result + 4);
    result = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v8 = vsubq_f32(v27, v28);
      v9 = vmulq_f32(v8, v8);
      v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
      *(_DWORD *)v29 = 0;
      *(_OWORD *)&v29[4] = xmmword_226117740;
      *(_QWORD *)&v29[20] = 0xBDCCCCCD3DCCCCCDLL;
      v29[28] = 0;
      v30 = xmmword_2260E5F40;
      v31 = 1;
      v32 = 0;
      re::Projection::setFromMatrix4x4F((uint64_t)v29, (uint64_t)(result + 32));
      v11 = atan2f((float)(*(float *)&v29[20] - *(float *)&v29[24]) * 0.5, *(float *)&v29[4]);
      v12 = v11 + v11;
      v13 = v2[30];
      if (!v13)
        v13 = re::ecs2::EntityComponentCollection::add(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v14 = *(re::ecs2::TransformComponent ***)(v13 + 16);
      if (v14)
      {
        re::ecs2::TransformComponent::worldSRT(v14, (const re::ecs2::Entity *)1, (uint64_t)v29);
      }
      else
      {
        v15 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)v29 = *(_OWORD *)(v13 + 32);
        *(_OWORD *)&v29[16] = v15;
        v30 = *(_OWORD *)(v13 + 64);
      }
      v16 = tanf(v12 * 0.5);
      v17.i64[0] = 0;
      v17.i32[3] = 0;
      *(float *)&v17.i32[2] = (float)((float)(v10 * 0.5) * 0.1) + (float)((float)(v10 * 0.5) / v16);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)&v29[16], *(int32x4_t *)&v29[16]), *(int8x16_t *)&v29[16], 0xCuLL);
      v19 = vnegq_f32(*(float32x4_t *)&v29[16]);
      v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), v19), (float32x4_t)v17, v18);
      v21 = (int8x16_t)vaddq_f32(v20, v20);
      v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
      v23 = vaddq_f32((float32x4_t)v17, vmulq_laneq_f32(v22, *(float32x4_t *)&v29[16], 3));
      v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v19), v22, v18);
      v25 = vaddq_f32(v26, vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL)));
      re::ecs2::TransformComponent::setWorldPosition((_QWORD *)v13, v25.i64[0], v25.i64[1]);
      return re::ecs2::Component::markDirty((_QWORD *)v13);
    }
  }
  return result;
}

unint64_t *re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move(unint64_t *a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v4 = (uint64_t *)(a2 + 2);
  v5 = *a2;
  v6 = (uint64_t)(a1 + 2);
  if (*a2 >= *a1)
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[14 * *a1], v6);
    if (*a1 != v5)
    {
      v10 = 14 * *a1;
      v11 = (unint64_t *)&v4[v10];
      v12 = v6 + v10 * 8;
      v13 = -112 * *a1 + 112 * v5;
      do
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        result = re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v12, v11);
        v11 += 14;
        v12 += 112;
        v13 -= 112;
      }
      while (v13);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[14 * v5], v6);
    if (v5 != *a1)
    {
      v8 = v6 + 112 * *a1;
      v9 = v6 + 112 * v5;
      do
      {
        *(_QWORD *)v9 = 0;
        ++*(_DWORD *)(v9 + 8);
        v9 += 112;
      }
      while (v9 != v8);
    }
  }
  *a1 = v5;
  if (*a2)
  {
    v14 = &v4[14 * *a2];
    do
    {
      *v4 = 0;
      ++*((_DWORD *)v4 + 2);
      v4 += 14;
    }
    while (v4 != v14);
  }
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,re::DynamicInlineArray<re::PlaneF,6ul> *,0>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (v4 != (unint64_t *)a3)
      {
        re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)a3, v4);
        ++*(_DWORD *)(a3 + 8);
      }
      v4 += 14;
      a3 += 112;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

unint64_t *re::DynamicInlineArray<re::PlaneF,6ul>::move(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = *a2;
  v5 = *result;
  if (*a2 >= *result)
  {
    v6 = (uint64_t *)(a2 + 2);
    v7 = (uint64_t)&a2[2 * v5 + 2];
    v8 = result + 2;
    if (v5)
      memmove(result + 2, a2 + 2, 16 * v5);
    result = (unint64_t *)memcpy(&v8[2 * v5], &a2[2 * v5 + 2], (size_t)&v6[2 * v4] - v7);
  }
  else if (v4)
  {
    result = (unint64_t *)memmove(result + 2, a2 + 2, 16 * v4);
  }
  *v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(unint64_t *a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = (uint64_t *)(a2 + 2);
  v5 = *a2;
  v6 = (uint64_t)(a1 + 2);
  if (*a2 >= *a1)
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[18 * *a1], v6);
    if (*a1 != v5)
    {
      v10 = (unint64_t *)&v4[18 * *a1];
      v11 = v6 + 144 * *a1;
      v12 = 144 * v5 - 144 * *a1;
      do
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        result = re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v11, v10);
        v10 += 18;
        v11 += 144;
        v12 -= 144;
      }
      while (v12);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,0>((unint64_t *)v4, (unint64_t *)&v4[18 * v5], v6);
    if (v5 != *a1)
    {
      v8 = v6 + 144 * *a1;
      v9 = v6 + 144 * v5;
      do
      {
        *(_QWORD *)v9 = 0;
        ++*(_DWORD *)(v9 + 8);
        v9 += 144;
      }
      while (v9 != v8);
    }
  }
  *a1 = v5;
  if (*a2)
  {
    v13 = &v4[18 * *a2];
    do
    {
      *v4 = 0;
      ++*((_DWORD *)v4 + 2);
      v4 += 18;
    }
    while (v4 != v13);
  }
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,re::DynamicInlineArray<re::Vector4<float>,8ul> *,0>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (v4 != (unint64_t *)a3)
      {
        re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)a3, v4);
        ++*(_DWORD *)(a3 + 8);
      }
      v4 += 18;
      a3 += 144;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

BOOL re::ecs2::AnchorComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v18, a5, 0);
  v8 = v18;
  v9 = v19;
  v18 = a4;
  v19 = v8;
  v20 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = *(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v19);
      *(_DWORD *)(v14 + 44) = *(_QWORD *)(a1 + 32);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a1 + 16), v14 + 48);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v19);
    }
    while (v19 != a5 || (unsigned __int16)v20 != 0xFFFF || WORD1(v20) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AnchorSystem::updateScenes(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  re::RenderManager *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  re::ecs2::System *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45[2];
  _QWORD v46[2];

  v46[0] = a3;
  v46[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v45);
  v6 = *(re::RenderManager **)(a1 + 112);
  if (v6 && *((_QWORD *)v6 + 13))
  {
    v7 = (_anonymous_namespace_ *)(a1 + 416);
    v8 = re::RenderManager::perFrameAllocator(v6);
    v9 = a2[1];
    if (v9)
    {
      v10 = 0;
      v11 = (_QWORD *)*a2;
      v12 = 8 * v9;
      do
      {
        v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*v11 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v13)
          v14 = *(_QWORD *)(v13 + 24);
        else
          LODWORD(v14) = 0;
        v10 += v14;
        ++v11;
        v12 -= 8;
      }
      while (v12);
      v15 = (v10 + 1);
      v7 = (_anonymous_namespace_ *)(a1 + 416);
    }
    else
    {
      v15 = 1;
    }
    *(_QWORD *)&v43 = 0;
    *(_QWORD *)&v42 = 0;
    DWORD2(v42) = 0;
    v41 = (unint64_t)v8;
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity(&v41, v15);
    ++DWORD2(v42);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v7, (uint64_t)&v41);
    if ((_QWORD)v41 && (_QWORD)v43)
      (*(void (**)(void))(*(_QWORD *)v41 + 40))();
    v41 = xmmword_2260E5F10;
    v42 = xmmword_2260E5F20;
    v43 = xmmword_2260E5F40;
    v44 = xmmword_2260E5D70;
    v39 = (uint64_t)v7;
    re::DynamicArray<re::Matrix4x4<float>>::add(v7, (uint64_t)&v41);
    v16 = a2[1];
    if (v16)
    {
      v17 = (_QWORD *)*a2;
      v40 = *a2 + 8 * v16;
      while (1)
      {
        *(_QWORD *)&v41 = *v17;
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 224)
                        + 16
                        * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 216), &v41)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 328, v18);
        v19 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, v18);
        v20 = *(_QWORD *)(*v19 + 224);
        v21 = v19[3];
        v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v19[2] + 8, v21);
        if (*(_DWORD *)(v22 + 40))
          v23 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v20 + 24))(v20, v46, v19, v21, v22, 0);
        else
          v23 = 0;
        v24 = v19[5];
        v25 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v19[2] + 8, v24);
        if (*(_DWORD *)(v25 + 40))
          v23 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, v46, v19, v24, v25, 0);
        v26 = v19[6];
        v27 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v19[2] + 8, v26);
        if (*(_DWORD *)(v27 + 40))
          break;
        if (v23)
          goto LABEL_23;
LABEL_24:
        if (*(_BYTE *)(a1 + 392))
        {
          v28 = *(_QWORD *)(a1 + 336);
          v29 = *(_DWORD *)(a1 + 344);
          if (v28 < 0xB)
          {
            v32 = (uint64_t *)(a1 + 352);
            if ((v29 & 1) == 0)
              v32 = *(uint64_t **)(a1 + 360);
            if (!v28)
              goto LABEL_42;
            v33 = 0;
            v34 = 8 * v28;
            do
            {
              v35 = *v32++;
              v33 |= v35;
              v34 -= 8;
            }
            while (v34);
            if (!v33)
              goto LABEL_42;
          }
          else
          {
            v30 = (_QWORD *)(a1 + 352);
            if ((v29 & 1) == 0)
              v30 = *(_QWORD **)(a1 + 360);
            v31 = 8 * v28;
            while (!*v30)
            {
              ++v30;
              v31 -= 8;
              if (!v31)
                goto LABEL_42;
            }
          }
          v36 = *(re::ecs2::System **)(a1 + 376);
          if (!*((_BYTE *)v36 + 86))
            re::ecs2::System::queueToRun(v36, 0.0);
        }
LABEL_42:
        if (++v17 == (_QWORD *)v40)
          goto LABEL_43;
      }
      if (((v23 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v20 + 40))(v20, v46, v19, v26, v27, 0)) & 1) == 0)goto LABEL_24;
LABEL_23:
      re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 328, v18);
      goto LABEL_24;
    }
LABEL_43:
    v37 = re::RenderFrameBox::get(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 104) + 344, 0xFFFFFFFFFFFFFFFuLL);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v37 + 320) + 1072))(*(_QWORD *)(v37 + 320), v39);
    *(_QWORD *)&v43 = 0;
    *(_QWORD *)&v42 = 0;
    v41 = 0uLL;
    DWORD2(v42) = 0;
    re::DynamicArray<re::RigComponentConstraint>::operator=(v39, (uint64_t)&v41);
    if ((_QWORD)v41 && (_QWORD)v43)
      (*(void (**)(void))(*(_QWORD *)v41 + 40))();
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v45);
}

double re::ecs2::AnchorSystem::willRemoveSystemFromECSService(re::ecs2::AnchorSystem *this)
{
  double result;

  *((_QWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::AnchorSystem::willAddSceneToECSService(re::ecs2::AnchorSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::AnchorSystem *)((char *)this + 280);
  v6 = *((_QWORD *)this + 36);
  v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 304);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 39);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 304);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 39);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AnchorSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 328;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 25);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 176) & 1) != 0)
    v19 = (char *)this + 184;
  else
    v19 = (char *)*((_QWORD *)this + 24);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 25);
  ++*((_DWORD *)this + 52);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AnchorSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 25);
  v29 = *((_QWORD *)this + 40);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 40) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 296) & 1) != 0)
      v33 = (char *)this + 304;
    else
      v33 = (char *)*((_QWORD *)this + 39);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 36) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 25);
  v35 = *((_QWORD *)this + 46);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 46) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::AnchorSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 344) & 1) != 0)
      v39 = (char *)this + 352;
    else
      v39 = (char *)*((_QWORD *)this + 45);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 42) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 392))
    return;
  v40 = *((_QWORD *)this + 42);
  v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 352);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 45);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 47);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 352);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 45);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::AnchorSystem::willRemoveSceneFromECSService(re::ecs2::AnchorSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 216);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 27, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 28) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_AnchorSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_213);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_213))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CB28, 0);
    *(uint64_t *)((char *)&qword_25410CB38 + 6) = 0;
    qword_25410CB38 = 0;
    qword_25410CB48 = 0;
    qword_25410CB50 = 0xFFFFFFFFLL;
    qword_25410CB28 = (uint64_t)&off_24ED7DAA8;
    qword_25410CB58 = (uint64_t)"AnchorSystem";
    dword_25410CB60 = 0;
    unk_25410CB68 = 0u;
    unk_25410CB78 = 0u;
    unk_25410CB88 = 0u;
    qword_25410CB98 = 0;
    __cxa_guard_release(&_MergedGlobals_213);
  }
  return &qword_25410CB28;
}

void re::ecs2::initInfo_AnchorSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x306AD891A07BB2C8;
  v5[1] = "AnchorSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AnchorSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchorSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchorSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchorSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnchorSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AnchorSystem *re::internal::defaultConstruct<re::ecs2::AnchorSystem>(int a1, int a2, re::ecs2::AnchorSystem *this)
{
  return re::ecs2::AnchorSystem::AnchorSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AnchorSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(a3 + 400) = &off_24ED5F228;
  v4 = *(_QWORD *)(a3 + 456);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 464))
    {
      v5 = (_QWORD *)(a3 + 464);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 472));
      *v5 = 0;
      *(_QWORD *)(a3 + 472) = 0;
    }
    *(_QWORD *)(a3 + 456) = 0;
  }
  v6 = *(_QWORD *)(a3 + 416);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 448))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 448) = 0;
    *(_QWORD *)(a3 + 424) = 0;
    *(_QWORD *)(a3 + 432) = 0;
    *(_QWORD *)(a3 + 416) = 0;
    ++*(_DWORD *)(a3 + 440);
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)(a3 + 160));
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::AnchorSystem>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 400) = &off_24ED5F228;
  v2 = *(_QWORD *)(a1 + 456);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 464))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 472));
      *(_QWORD *)(a1 + 464) = 0;
      *(_QWORD *)(a1 + 472) = 0;
    }
    *(_QWORD *)(a1 + 456) = 0;
  }
  v3 = *(_QWORD *)(a1 + 416);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 448))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 416) = 0;
    ++*(_DWORD *)(a1 + 440);
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)(a1 + 160));
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_AnchorSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorSystem>, this);
}

uint64_t re::ecs2::AnchorComponentStateImpl::dependsOnComponents(re::ecs2::AnchorComponentStateImpl *this)
{
  return *((_QWORD *)this + 9);
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::AnchorComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::Component *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v3 = *(re::ecs2::Component **)(a3 + 128);
  if (v3)
  {
    v5 = 24;
    v6 = 0xFFFFFFFFLL;
    do
    {
      v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v5), v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        v10 = v7;
        v6 = v8;
        goto LABEL_11;
      }
      v5 += 8;
    }
    while (v5 != 56);
    v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v10, v6);
  }
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnchorComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnchorComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::AnchorSystem::~AnchorSystem(re::ecs2::AnchorSystem *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 50) = &off_24ED5F228;
  v2 = *((_QWORD *)this + 57);
  if (v2)
  {
    if (*((_QWORD *)this + 58))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 59));
      *((_QWORD *)this + 58) = 0;
      *((_QWORD *)this + 59) = 0;
    }
    *((_QWORD *)this + 57) = 0;
  }
  v3 = *((_QWORD *)this + 52);
  if (v3)
  {
    if (*((_QWORD *)this + 56))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 52) = 0;
    ++*((_DWORD *)this + 110);
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 50) = &off_24ED5F228;
  v2 = *((_QWORD *)this + 57);
  if (v2)
  {
    if (*((_QWORD *)this + 58))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 59));
      *((_QWORD *)this + 58) = 0;
      *((_QWORD *)this + 59) = 0;
    }
    *((_QWORD *)this + 57) = 0;
  }
  v3 = *((_QWORD *)this + 52);
  if (v3)
  {
    if (*((_QWORD *)this + 56))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 52) = 0;
    ++*((_DWORD *)this + 110);
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnchorSystem::typeInfo(re::ecs2::AnchorSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorSystem>, 0);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5F320;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5F378;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5F3D0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5F428;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5F320;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5F378;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5F3D0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5F428;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 128);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F320;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F320;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F378;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F378;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F3D0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F3D0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F428;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F428;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AnchorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_ClippingPrimitiveComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410CBB0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410CBB0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CC40, 0);
    *(uint64_t *)((char *)&qword_25410CC50 + 6) = 0;
    qword_25410CC50 = 0;
    qword_25410CC60 = 0;
    qword_25410CC68 = 0xFFFFFFFFLL;
    qword_25410CC40 = (uint64_t)&off_24ED7DAA8;
    qword_25410CC70 = (uint64_t)"ClippingPrimitiveComponent";
    dword_25410CC78 = 0;
    xmmword_25410CC80 = 0u;
    unk_25410CC90 = 0u;
    xmmword_25410CCA0 = 0u;
    qword_25410CCB0 = 0;
    __cxa_guard_release(&qword_25410CBB0);
  }
  return &qword_25410CC40;
}

void re::ecs2::initInfo_ClippingPrimitiveComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  const re::IntrospectionBase *v25;
  re::IntrospectionRegistry *v26;
  const re::IntrospectionBase *v27;
  const char *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const char *v38;
  uint64_t v39[2];

  *(_QWORD *)&v37 = 0x175D00AB0A0458B0;
  *((_QWORD *)&v37 + 1) = "ClippingPrimitiveComponent";
  re::StringID::destroyString((re::StringID *)&v37);
  *((_OWORD *)this + 2) = v35;
  v4 = atomic_load((unsigned __int8 *)&qword_25410CBA8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410CBA8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410CBC0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_localBoundsMin";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410CBC8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "m_localBoundsMax";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x3000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_25410CBD0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "m_clipChildren";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x6400000005;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_25410CBD8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_BOOL((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "m_clipSelf";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x6500000008;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_25410CBE0 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v24 = atomic_load((unsigned __int8 *)&qword_25410CBB8);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_25410CBB8))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410CBF8);
        __cxa_guard_release(&qword_25410CBB8);
      }
      if ((_MergedGlobals_214 & 1) == 0)
      {
        _MergedGlobals_214 = 1;
        v25 = (const re::IntrospectionBase *)re::introspect_Vector3F((re::IntrospectionBase **)1);
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_25410CBF8, v25, 2);
        re::IntrospectionRegistry::add(v26, v27);
        re::getPrettyTypeName((re *)&unk_25410CBF8, (const re::IntrospectionBase *)&v37);
        if ((BYTE8(v37) & 1) != 0)
          v28 = v38;
        else
          v28 = (char *)&v37 + 9;
        if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
        v37 = *((_OWORD *)v25 + 2);
        xmmword_25410CC18 = v36;
        re::StringID::destroyString((re::StringID *)v39);
      }
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "m_featherIntervalFractionPerEdge";
      *(_QWORD *)(v29 + 16) = &unk_25410CBF8;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x4000000009;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25410CBE8 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_float((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "m_featherFalloffBehavior";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x600000000ALL;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_25410CBF0 = v33;
      __cxa_guard_release(&qword_25410CBA8);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_25410CBC0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClippingPrimitiveComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ClippingPrimitiveComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClippingPrimitiveComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClippingPrimitiveComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v35;
}

double re::internal::defaultConstruct<re::ecs2::ClippingPrimitiveComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57588;
  *(_QWORD *)(v3 + 32) = 0xBF000000BF000000;
  *(_QWORD *)(v3 + 40) = 3204448256;
  *(_QWORD *)(v3 + 48) = 0x3F0000003F000000;
  *(_QWORD *)(v3 + 56) = 1056964608;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 93) = 0;
  *(_BYTE *)(v3 + 101) = 1;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ClippingPrimitiveComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ClippingPrimitiveComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57588;
  *(_QWORD *)(v1 + 32) = 0xBF000000BF000000;
  *(_QWORD *)(v1 + 40) = 3204448256;
  *(_QWORD *)(v1 + 48) = 0x3F0000003F000000;
  *(_QWORD *)(v1 + 56) = 1056964608;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 93) = 0;
  *(_BYTE *)(v1 + 101) = 1;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ClippingPrimitiveComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClippingPrimitiveComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClippingPrimitiveComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClippingPrimitiveComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClippingPrimitiveComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClippingPrimitiveComponent>, this);
}

id *re::ecs2::MeshSmoothComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id *v8;
  void *v9;
  re *inited;
  uint64_t v11;
  _QWORD *v12;
  id location;
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = (id *)(a1 + 136);
  if (a2)
    v9 = (void *)(a2 + 8);
  else
    v9 = 0;
  inited = (re *)objc_initWeak(&location, v9);
  memset(v15, 0, sizeof(v15));
  v16 = re::globalAllocators(inited)[2];
  v17 = 0;
  re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v15);
  if (v17)
  {
    (*(void (**)(_QWORD *))*v17)(v17);
    if (v17 != v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
  objc_destroyWeak(&location);
  if (a5)
  {
    v11 = 168 * a5;
    v12 = (_QWORD *)(a4 + 112);
    do
    {
      ++*((_BYTE *)v12 - 101);
      *v12 = 0;
      v12 += 21;
      v11 -= 168;
    }
    while (v11);
  }
  return v8;
}

BOOL re::ecs2::MeshSmoothComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v8 = *(_QWORD **)(a1 + 8);
  v9 = v8[16];
  v35 = v8[15];
  v36 = v8[14];
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
  else
    v10 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v39, a5, 0);
  v11 = v39;
  v12 = v40;
  v39 = a4;
  v40 = v11;
  v41 = v12;
  v13 = (unsigned __int16)v12;
  v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    do
    {
      v17 = (uint64_t *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v40);
      v18 = *v17;
      v19 = *(_QWORD *)(*v17 + 16);
      v20 = *(_QWORD *)(v19 + 184);
      v21 = (unint64_t *)(a3 + 32);
      if (v20)
      {
        v22 = *(_QWORD **)(v18 + 144);
        if (v22)
        {
          v23 = *(_QWORD *)(v20 + 248) != *v22 || v10 == 0;
          if (!v23 && v22[1] == v10)
            goto LABEL_25;
          v17 = (uint64_t *)re::ecs2::MeshSmoothComponent::resetDeformerInputs(*v17, *(_QWORD *)(v36 + 136), 0, *(_QWORD *)(*(_QWORD *)(v20 + 392) + 96), *(_QWORD *)(*(_QWORD *)(v20 + 392) + 88));
        }
        v24 = *(_QWORD *)(v19 + 176);
        v21 = (unint64_t *)(a3 + 32);
        if (v24)
        {
          v21 = (unint64_t *)(a3 + 32);
          if (*(_QWORD *)(v24 + 40))
          {
            v21 = (unint64_t *)(a3 + 40);
            if (!*(_QWORD *)(v18 + 120))
            {
              v25 = re::globalAllocators((re *)v17);
              v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 40, 8);
              *(_OWORD *)v26 = 0u;
              *(_OWORD *)(v26 + 16) = 0u;
              *(_QWORD *)(v26 + 32) = 0;
              re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)v26, 0);
              ++*(_DWORD *)(v26 + 24);
              v21 = (unint64_t *)(a3 + 40);
              if (v35)
              {
                v27 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v35 + 416))(&v37, v35, v26, v27, 0, 0, 0);
                v28 = *(_OWORD *)(v18 + 112);
                *(_OWORD *)(v18 + 112) = v37;
                v37 = v28;
                v29 = *(_QWORD *)(v18 + 128);
                *(_QWORD *)(v18 + 128) = v38;
                v38 = v29;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
                v21 = (unint64_t *)(a3 + 40);
              }
            }
          }
        }
      }
      v30 = v39;
      v31 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v40);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v30, v31, *v21);
LABEL_25:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v40);
    }
    while (v40 != a5 || (unsigned __int16)v41 != 0xFFFF || WORD1(v41) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::MeshSmoothComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::AssetHandle *v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  re::ecs2::ComponentBucketsBase *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _anonymous_namespace_ *v34;
  uint64_t *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  re *v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  unsigned int v46;
  int started;
  unint64_t v48;
  re::ecs2::MeshDeformationComponent *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  re::ecs2::MeshComponent *v71;
  re *v72;
  re::DeformedMeshAssetsMap *v73;
  _QWORD v74[2];
  unint64_t v75;
  __int128 v76;
  uint64_t v77;
  _BYTE v78[12];
  __int16 v79;
  int v80;
  __int16 v81;
  unint64_t v82;
  __int16 v83;
  _BYTE v84[10];
  re *v85;
  _BYTE v86[18];
  __int16 v87;
  unint64_t v88;
  __int16 v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 8);
  v66 = *(_QWORD *)(v7 + 112);
  v8 = *(_QWORD *)(v7 + 128);
  if (v8)
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
  else
    v65 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v91, a5, 0);
  v75 = a4;
  v76 = v91;
  if ((_QWORD)v91 != a5 || WORD4(v91) != 0xFFFFLL || (DWORD2(v91) & 0xFFFF0000) != 4294901760)
  {
    v11 = (unint64_t)&v76;
    v69 = a5;
    while (1)
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v76);
      v13 = *(_QWORD *)v12;
      v14 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      v15 = *(_QWORD **)(v14 + 176);
      v16 = (re::AssetHandle *)(v15 + 4);
      v17 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v15 + 4));
      if (!v17)
        break;
      v18 = v17;
      v16 = (re::AssetHandle *)(v13 + 112);
      v19 = (re *)re::AssetHandle::loadedAsset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(v13 + 112));
      v72 = v19;
      if (!v19)
      {
        v22 = *(_QWORD *)(v13 + 120);
        if (!v22)
          goto LABEL_21;
        goto LABEL_19;
      }
      v20 = v15[5];
      if (v20)
        v21 = *(_QWORD *)(v20 + 664);
      else
        v21 = 0;
      v28 = *(_QWORD *)(v13 + 120);
      v71 = (re::ecs2::MeshComponent *)v15;
      if (v28)
        v29 = *(_QWORD *)(v28 + 664);
      else
        v29 = 0;
      v73 = (re::DeformedMeshAssetsMap *)(v13 + 272);
      v30 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v20 ^ (v20 >> 30))) >> 27));
      v31 = v21 ^ (v30 >> 31) ^ v30;
      v32 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
      v33 = ((v31 << 6) + (v31 >> 2) + (v29 ^ (v32 >> 31) ^ v32) - 0x61C8864680B583E9) ^ v31;
      if (*(_QWORD *)(v13 + 280) != v33)
      {
        v67 = v33;
        v68 = v14;
        v34 = (_anonymous_namespace_ *)re::DeformedMeshAssetsMap::clear(v73);
        *(_QWORD *)(v13 + 208) = 0;
        ++*(_DWORD *)(v13 + 216);
        *(_QWORD *)(v13 + 248) = 0;
        ++*(_DWORD *)(v13 + 256);
        v35 = *(uint64_t **)(v13 + 272);
        if (!v35)
        {
          *(_QWORD *)(v13 + 280) = -1;
        }
        v36 = v18 + 448;
        re::FixedArray<int>::init<>((uint64_t *)(v13 + 312), (uint64_t)v35, *(unsigned int *)(v18 + 664));
        if (*(_DWORD *)(v18 + 664))
        {
          v37 = 0;
          v38 = 0;
          while (1)
          {
            v39 = *(_QWORD *)(v13 + 320);
            if (v39 <= v38)
              break;
            *(_DWORD *)(*(_QWORD *)(v13 + 328) + 4 * v38) = v37;
            v37 += re::MeshNameMap::meshPartInstanceCount((re::MeshNameMap *)(v18 + 448), v38++);
            if (v38 >= *(unsigned int *)(v18 + 664))
              goto LABEL_33;
          }
LABEL_77:
          *(_QWORD *)v86 = 0;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v91 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v78 = 136315906;
          *(_QWORD *)&v78[4] = "operator[]";
          v79 = 1024;
          v80 = 468;
          v81 = 2048;
          v82 = v38;
          v83 = 2048;
          *(_QWORD *)v84 = v39;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_33:
        v40 = *(_QWORD *)(v18 + 784);
        if (v40)
          v41 = *(unsigned int *)(*(_QWORD *)(v18 + 792) + 4 * v40 - 4);
        else
          v41 = 0;
        v42 = v72;
        v43 = *(_QWORD *)(v13 + 272);
        LODWORD(v91) = -1;
        v19 = (re *)re::FixedArray<unsigned int>::init<int>((_QWORD *)(v13 + 288), v43, v41, &v91);
        if (*((_QWORD *)v72 + 2))
        {
          v39 = 0;
          v11 = 0;
          while (1)
          {
            re::MeshNameMap::meshInstancePartsForIdentifier(v18 + 448, (unsigned __int8 *)(*((_QWORD *)v42 + 4) + 40 * v11), v78);
            if (*(_QWORD *)v78)
              break;
LABEL_43:
            v19 = v85;
            if (v85)
            {
              v19 = (re *)(**(uint64_t (***)(re *))v85)(v85);
              if (v85 != (re *)&v78[8])
                v19 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v84[2] + 40))(*(_QWORD *)&v84[2]);
            }
            if (++v11 >= *((_QWORD *)v42 + 2))
              goto LABEL_47;
          }
          v44 = 0;
          while (1)
          {
            *(_QWORD *)&v91 = v44;
            (*(void (**)(re *, __int128 *))(*(_QWORD *)v85 + 16))(v85, &v91);
            *(_QWORD *)&v91 = v44;
            (*(void (**)(re *, __int128 *))(*(_QWORD *)v85 + 16))(v85, &v91);
            LODWORD(v91) = 10;
            re::DynamicArray<int>::add((_QWORD *)(v13 + 192), &v91);
            LODWORD(v91) = 1056964608;
            v45 = re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 232), (float *)&v91);
            *(_QWORD *)&v91 = v44;
            v46 = (*(uint64_t (**)(re *, __int128 *, float))(*(_QWORD *)v85 + 16))(v85, &v91, v45);
            started = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)(v18 + 448), v46);
            *(_QWORD *)&v91 = v44;
            v38 = started
                + (unsigned __int16)((unint64_t)(*(uint64_t (**)(re *, __int128 *))(*(_QWORD *)v85 + 16))(v85, &v91) >> 32);
            v48 = *(_QWORD *)(v13 + 296);
            if (v48 <= v38)
              break;
            *(_DWORD *)(*(_QWORD *)(v13 + 304) + 4 * v38) = v39 + v44++;
            if (v44 == *(_QWORD *)v78)
            {
              v39 = (v39 + v44);
              v42 = v72;
              goto LABEL_43;
            }
          }
          v74[0] = 0;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v91 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v86 = 136315906;
          *(_QWORD *)&v86[4] = "operator[]";
          *(_WORD *)&v86[12] = 1024;
          *(_DWORD *)&v86[14] = 468;
          v87 = 2048;
          v88 = v38;
          v89 = 2048;
          v90 = v48;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_73:
          v77 = 0;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v91 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v78 = 136315906;
          *(_QWORD *)&v78[4] = "operator[]";
          v79 = 1024;
          v80 = 789;
          v81 = 2048;
          v82 = v39;
          v83 = 2048;
          *(_QWORD *)v84 = v48;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_74:
          v77 = 0;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v91 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v78 = 136315906;
          *(_QWORD *)&v78[4] = "operator[]";
          v79 = 1024;
          v80 = 789;
          v81 = 2048;
          v82 = v39;
          v83 = 2048;
          *(_QWORD *)v84 = v48;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_75:
          v77 = 0;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v91 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v78 = 136315906;
          *(_QWORD *)&v78[4] = "operator[]";
          v79 = 1024;
          v80 = 468;
          v81 = 2048;
          v82 = v11;
          v83 = 2048;
          *(_QWORD *)v84 = v48;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v36);
          _os_crash();
          __break(1u);
          goto LABEL_77;
        }
LABEL_47:
        v14 = v68;
        *(_QWORD *)(v13 + 280) = v67;
        v11 = (unint64_t)&v76;
        a5 = v69;
      }
      v49 = *(re::ecs2::MeshDeformationComponent **)(v14 + 184);
      if (*((_QWORD *)v49 + 30))
      {
        v50 = *(_QWORD **)(v13 + 144);
        if (!v50 || *((_QWORD *)v49 + 31) != *v50)
        {
          v51 = *((_QWORD *)v49 + 49);
          v36 = *(_QWORD *)(v51 + 88);
          v52 = *(_QWORD *)(v51 + 96);
          v53 = re::globalAllocators(v19);
          v54 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53[2] + 32))(v53[2], 40, 8);
          *v54 = *((_QWORD *)v49 + 31);
          v54[1] = v65;
          v54[3] = 0;
          v54[4] = 0;
          v54[2] = 0;
          v38 = (unint64_t)re::ecs2::MeshSmoothComponent::resetDeformerInputs(v13, *(_QWORD *)(v66 + 136), v54, v52, v36);
          if (*(_QWORD *)(v13 + 48) && *(_QWORD *)(v13 + 88))
          {
            re::DynamicArray<float>::operator=(v13 + 192, (uint64_t *)(v13 + 32));
            re::DynamicArray<float>::operator=(v13 + 232, (uint64_t *)(v13 + 72));
          }
          v74[0] = (char *)v49 + 232;
          v74[1] = 11;
          *(_QWORD *)v86 = (char *)v49 + 232;
          *(_QWORD *)&v86[8] = 11;
          *(_WORD *)&v86[16] = 0;
          while (1)
          {
            re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v74, (uint64_t)&v91);
            if (*(_DWORD *)&v86[12] == HIDWORD(v91) && *(unsigned __int16 *)&v86[16] == (unsigned __int16)v92)
              break;
            v55 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v86);
            v56 = re::DeformedMeshAssetsMap::deformedIndex(v73, v55, WORD2(v55));
            if (v56 != -1)
            {
              v57 = v56;
              v58 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v86);
              v39 = v57;
              v48 = *(_QWORD *)(v13 + 208);
              if (v48 <= v57)
                goto LABEL_73;
              v48 = *(_QWORD *)(v13 + 248);
              if (v48 <= v57)
                goto LABEL_74;
              v11 = v58;
              v60 = *(_QWORD **)(v38 + 8);
              v48 = v60[3];
              if (v48 <= v58)
                goto LABEL_75;
              v61 = *(_DWORD *)(*(_QWORD *)(v13 + 264) + 4 * v57);
              v62 = (_DWORD *)(v60[4] + 8 * v58);
              *v62 = *(_DWORD *)(*(_QWORD *)(v13 + 224) + 4 * v57);
              v62[1] = v61;
              if (v36 <= v58)
                goto LABEL_76;
              v63 = v52 + 168 * v58;
              ++*(_BYTE *)(v63 + 11);
              *(_QWORD *)(v63 + 112) = v62;
            }
            re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)v86);
          }
          v11 = (unint64_t)&v76;
          a5 = v69;
        }
        if (re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v49, v71))
        {
          v24 = v75;
          v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v76);
          v26 = (re::ecs2::ComponentBucketsBase *)a3[2];
          v27 = a3[6];
LABEL_67:
          re::ecs2::ComponentBucketsBase::moveComponent(v26, v24, v25, v27);
        }
      }
LABEL_68:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v76);
      if ((_QWORD)v76 == a5 && WORD4(v76) == 0xFFFF && WORD5(v76) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    v22 = v15[5];
    if (!v22)
      goto LABEL_21;
LABEL_19:
    v23 = atomic_load((unsigned int *)(v22 + 704));
    if (v23 != 3)
    {
LABEL_21:
      re::AssetHandle::loadAsync(v16);
      goto LABEL_68;
    }
    v24 = v75;
    v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v76);
    v26 = (re::ecs2::ComponentBucketsBase *)a3[2];
    v27 = a3[4];
    goto LABEL_67;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::AssetHandle::loadedAsset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(re::AssetHandle *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

unsigned int *re::MeshDeformationRuntimeData::MeshDeformationIteration::end@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  v3 = this[2];
  if (*(_QWORD *)(*(_QWORD *)this + 136) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 96 * v3 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_WORD *)(a2 + 16) = 0;
  return this;
}

unint64_t re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex(re::MeshDeformationRuntimeData::MeshDeformationIterator *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((unsigned int *)this + 2);
  if (*(_QWORD *)(*(_QWORD *)this + 136) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(*(_QWORD *)this + 144);
  v3 = v2 + 96 * v1;
  v4 = *((unsigned int *)this + 3);
  if (*(_QWORD *)(v3 + 8) <= v4)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (*(_QWORD *)(v2 + 96 * v1 + 32) <= v4)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  v5 = v2 + 96 * v1;
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4) + *((unsigned __int16 *)this + 8);
  if (*(_QWORD *)(v5 + 56) <= v6)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(v2 + 96 * v1 + 80) <= v6)
    goto LABEL_11;
  return *(unsigned __int16 *)(*(_QWORD *)(v3 + 16) + 2 * v4) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v2 + 96 * v1 + 64) + 2 * v6) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 + 96 * v1 + 88) + v6) << 48);
}

uint64_t re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex(re::MeshDeformationRuntimeData::MeshDeformationIterator *this)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v2 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex(this);
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)(*(_QWORD *)this + 64) <= (unint64_t)v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_DWORD *)(v3[9] + 4 * v2) + WORD2(v2);
  if (v3[14] <= v4)
    goto LABEL_5;
  return *(unsigned int *)(v3[15] + 4 * v4);
}

uint64_t re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unsigned __int16 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)(*(_QWORD *)result + 136) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(*(_QWORD *)result + 144);
  v3 = *(_WORD *)(result + 16) + 1;
  *(_WORD *)(result + 16) = v3;
  v4 = *(unsigned int *)(result + 12);
  v5 = (v4 + 1);
  v6 = *(_QWORD *)(v2 + 96 * v1 + 32);
  if (v6 <= v5)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v6 <= v4)
    goto LABEL_9;
  v7 = *(_QWORD *)(v2 + 96 * v1 + 40);
  if ((unsigned __int16)(*(_DWORD *)(v7 + 4 * v5) - *(_DWORD *)(v7 + 4 * v4)) <= v3)
  {
    *(_DWORD *)(result + 12) = v5;
    *(_WORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t re::ecs2::MeshSmoothSystem::willAddSystemToECSService(re::ecs2::MeshSmoothSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 15) = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v5);
  *((_QWORD *)this + 16) = result;
  return result;
}

double re::ecs2::MeshSmoothSystem::willRemoveSystemFromECSService(re::ecs2::MeshSmoothSystem *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::MeshSmoothSystem::willAddSceneToECSService(re::ecs2::MeshSmoothSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 176;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::MeshSmoothSystem *)((char *)this + 296);
  v6 = *((_QWORD *)this + 38);
  v7 = *((_DWORD *)this + 78);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 320);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 41);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 320);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 41);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 296, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSmoothSystem *)((char *)this + 232), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 344;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 27);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 23);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 22, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 23);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 192) & 1) != 0)
    v19 = (char *)this + 200;
  else
    v19 = (char *)*((_QWORD *)this + 26);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 27);
  ++*((_DWORD *)this + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 27);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 27) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSmoothSystem *)((char *)this + 232), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 27);
  v29 = *((_QWORD *)this + 42);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 42) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 42) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 312) & 1) != 0)
      v33 = (char *)this + 320;
    else
      v33 = (char *)*((_QWORD *)this + 41);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 38) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 27);
  v35 = *((_QWORD *)this + 48);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 48) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MeshSmoothSystem *)((char *)this + 344), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 48) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 360) & 1) != 0)
      v39 = (char *)this + 368;
    else
      v39 = (char *)*((_QWORD *)this + 47);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 44) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 344;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 408))
    return;
  v40 = *((_QWORD *)this + 44);
  v41 = *((_DWORD *)this + 90);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 368);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 47);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 49);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 368);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 47);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::MeshSmoothSystem::willRemoveSceneFromECSService(re::ecs2::MeshSmoothSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 232);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 29, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 30) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 296, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 344, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 176, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t re::ecs2::MeshSmoothSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  re::ecs2::System *v34;
  _BYTE v36[16];
  uint64_t v37[2];
  _QWORD v38[2];
  uint64_t v39;

  v38[0] = a3;
  v38[1] = a4;
  v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v37);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
    v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      v12 = v11[452].u64[0];
      if (v12 >= v10)
        v12 = v10;
      v11[452].i64[0] = v12;
      v13 = v11[452].u64[1];
      if (v13 <= v10)
        v13 = v10;
      v11[452].i64[1] = v13;
      v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[453] = vaddq_s64(v11[453], v14);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36, 3041, a1);
  v15 = *(_QWORD *)(a1 + 104);
  if (v15 && (*(_BYTE *)(v15 + 424) & 0x10) == 0)
    goto LABEL_41;
  v39 = a2;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 240)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 232), &v39)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 344, v16);
  v17 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 176, v16);
  v18 = *(_QWORD *)(*v17 + 224);
  v19 = v17[3];
  v20 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v17[2] + 8, v19);
  if (*(_DWORD *)(v20 + 40))
    v21 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v18 + 24))(v18, v38, v17, v19, v20, 0);
  else
    v21 = 0;
  v22 = v17[5];
  v23 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v17[2] + 8, v22);
  if (*(_DWORD *)(v23 + 40))
    v21 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, v38, v17, v22, v23, 0);
  v24 = v17[6];
  v25 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v17[2] + 8, v24);
  if (!*(_DWORD *)(v25 + 40))
  {
    if (!v21)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (((v21 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, v38, v17, v24, v25, 0)) & 1) != 0)LABEL_20:re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 344, v16);
LABEL_21:
  if (!*(_BYTE *)(a1 + 408))
    goto LABEL_41;
  v26 = *(_QWORD *)(a1 + 352);
  v27 = *(_DWORD *)(a1 + 360);
  if (v26 >= 0xB)
  {
    if ((v27 & 1) != 0)
      v28 = (_QWORD *)(a1 + 368);
    else
      v28 = *(_QWORD **)(a1 + 376);
    v30 = 8 * v26;
    while (!*v28)
    {
      ++v28;
      v30 -= 8;
      if (!v30)
        goto LABEL_41;
    }
LABEL_39:
    v34 = *(re::ecs2::System **)(a1 + 392);
    if (!*((_BYTE *)v34 + 86))
      re::ecs2::System::queueToRun(v34, 0.0);
    goto LABEL_41;
  }
  if ((v27 & 1) != 0)
  {
    v29 = (uint64_t *)(a1 + 368);
    if (!v26)
      goto LABEL_41;
  }
  else
  {
    v29 = *(uint64_t **)(a1 + 376);
    if (!v26)
      goto LABEL_41;
  }
  v31 = 0;
  v32 = 8 * v26;
  do
  {
    v33 = *v29++;
    v31 |= v33;
    v32 -= 8;
  }
  while (v32);
  if (v31)
    goto LABEL_39;
LABEL_41:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v37);
}

uint64_t *re::ecs2::allocInfo_MeshSmoothAttributes(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_215);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_215))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CD10, 0);
    *(uint64_t *)((char *)&qword_25410CD20 + 6) = 0;
    qword_25410CD20 = 0;
    qword_25410CD30 = 0;
    qword_25410CD38 = 0xFFFFFFFFLL;
    qword_25410CD10 = (uint64_t)&off_24ED7DAA8;
    qword_25410CD40 = (uint64_t)"MeshSmoothAttributes";
    dword_25410CD48 = 0;
    *(_OWORD *)&algn_25410CD4C[4] = 0u;
    *(_OWORD *)&algn_25410CD4C[20] = 0u;
    *(_OWORD *)&algn_25410CD4C[36] = 0u;
    qword_25410CD80 = 0;
    __cxa_guard_release(&_MergedGlobals_215);
  }
  return &qword_25410CD10;
}

void re::ecs2::initInfo_MeshSmoothAttributes(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xC51B688E53129BA4;
  v15[1] = "MeshSmoothAttributes";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_25410CCC0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410CCC0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicArray<unsigned int>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "iterations";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25410CCE8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "lambdas";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410CCF0 = v13;
      __cxa_guard_release(&qword_25410CCC0);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410CCE8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSmoothAttributes>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSmoothAttributes>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSmoothAttributes>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSmoothAttributes>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

double re::internal::defaultConstruct<re::ecs2::MeshSmoothAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshSmoothAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a3 + 40);
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 72))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 72) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 64);
  }
  result = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (*(_QWORD *)(a3 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    ++*(_DWORD *)(a3 + 24);
  }
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::MeshSmoothAttributes>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshSmoothAttributes>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 72))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 72) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 64);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_MeshSmoothComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410CCD0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410CCD0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CD88, 0);
    *(uint64_t *)((char *)&qword_25410CD98 + 6) = 0;
    qword_25410CD98 = 0;
    qword_25410CDA8 = 0;
    qword_25410CDB0 = 0xFFFFFFFFLL;
    qword_25410CD88 = (uint64_t)&off_24ED7DAA8;
    qword_25410CDB8 = (uint64_t)"MeshSmoothComponent";
    dword_25410CDC0 = 0;
    unk_25410CDC8 = 0u;
    xmmword_25410CDD8 = 0u;
    unk_25410CDE8 = 0u;
    qword_25410CDF8 = 0;
    __cxa_guard_release(&qword_25410CCD0);
  }
  return &qword_25410CD88;
}

void re::ecs2::initInfo_MeshSmoothComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x92BED4AA627EFA44;
  v19[1] = "MeshSmoothComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_25410CCD8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410CCD8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410CCF8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)qword_25410CCC8;
      if (!qword_25410CCC8)
      {
        v11 = re::ecs2::allocInfo_MeshSmoothAttributes((re::ecs2 *)v9);
        qword_25410CCC8 = (uint64_t)v11;
        re::ecs2::initInfo_MeshSmoothAttributes((re::ecs2 *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "attributes";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410CD00 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_AssetHandle((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "assignedMeshDeformation";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x7000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25410CD08 = v17;
      __cxa_guard_release(&qword_25410CCD8);
    }
  }
  *((_QWORD *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410CCF8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSmoothComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSmoothComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSmoothComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSmoothComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

uint64_t re::internal::defaultConstruct<re::ecs2::MeshSmoothComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshSmoothComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshSmoothComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshSmoothComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshSmoothComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSmoothComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSmoothComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSmoothComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSmoothComponent>, this);
}

uint64_t *re::ecs2::allocInfo_MeshSmoothSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410CCE0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410CCE0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CE00, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410CE10 = 0;
    qword_25410CE20 = 0;
    qword_25410CE28 = 0xFFFFFFFFLL;
    qword_25410CE00 = (uint64_t)&off_24ED7DAA8;
    qword_25410CE30 = (uint64_t)"MeshSmoothSystem";
    dword_25410CE38 = 0;
    xmmword_25410CE40 = 0u;
    unk_25410CE50 = 0u;
    xmmword_25410CE60 = 0u;
    qword_25410CE70 = 0;
    __cxa_guard_release(&qword_25410CCE0);
  }
  return &qword_25410CE00;
}

void re::ecs2::initInfo_MeshSmoothSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD08070BBCBB71854;
  v5[1] = "MeshSmoothSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1A000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MeshSmoothSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSmoothSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSmoothSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSmoothSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSmoothSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::MeshSmoothSystem *re::internal::defaultConstruct<re::ecs2::MeshSmoothSystem>(uint64_t a1, uint64_t a2, re::ecs2::MeshSmoothSystem *a3)
{
  return re::ecs2::MeshSmoothSystem::MeshSmoothSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::MeshSmoothSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 22);
  a3[17] = &off_24ED5F480;
  v4 = a3[19];
  if (v4)
  {
    if (a3[20])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[21]);
      a3[20] = 0;
      a3[21] = 0;
    }
    a3[19] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshSmoothSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 22);
  a1[17] = &off_24ED5F480;
  v2 = a1[19];
  if (v2)
  {
    if (a1[20])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[21]);
      a1[20] = 0;
      a1[21] = 0;
    }
    a1[19] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshSmoothSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSmoothSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSmoothSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSmoothSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSmoothSystem>, this);
}

uint64_t re::ecs2::MeshSmoothComponentStateImpl::dependsOnComponents(re::ecs2::MeshSmoothComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshSmoothComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshSmoothComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::MeshSmoothSystem::~MeshSmoothSystem(re::ecs2::MeshSmoothSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 22);
  *((_QWORD *)this + 17) = &off_24ED5F480;
  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    if (*((_QWORD *)this + 20))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 21));
      *((_QWORD *)this + 20) = 0;
      *((_QWORD *)this + 21) = 0;
    }
    *((_QWORD *)this + 19) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 22);
  *((_QWORD *)this + 17) = &off_24ED5F480;
  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    if (*((_QWORD *)this + 20))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 21));
      *((_QWORD *)this + 20) = 0;
      *((_QWORD *)this + 21) = 0;
    }
    *((_QWORD *)this + 19) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MeshSmoothSystem::typeInfo(re::ecs2::MeshSmoothSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSmoothSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSmoothSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSmoothSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSmoothSystem>, 0);
}

_QWORD *re::FixedArray<unsigned int>::init<int>(_QWORD *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 4 * a3, 4);
  v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)result = *a4;
      result = (_QWORD *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)result = *a4;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5F570;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5F5C8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5F620;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5F678;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5F570;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5F5C8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5F620;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5F678;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F570;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F570;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F5C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F5C8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F620;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F620;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5F678;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5F678;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::add(uint64_t a1, _QWORD *a2)
{
  _anonymous_namespace_ *result;
  uint64_t v5;
  uint64_t v6;

  result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v5 = a1 + 24;
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *a2;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = *((_QWORD *)result + 1);
    if ((*((_BYTE *)result + 16) & 1) != 0)
      v3 = 2;
    else
      v3 = *((_QWORD *)result + 3);
    if (v2 >= v3)
      return re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::growCapacity(result, v2 + 1);
  }
  else
  {
    v4 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    if (a2 <= 2)
      return result;
    v5 = 4;
  }
  else
  {
    v4 = *((_QWORD *)result + 3);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(result, a2);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::MeshSmoothComponent>(uint64_t a1)
{
  uint64_t v2;
  re *inited;

  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED438E0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  inited = (re *)objc_initWeak((id *)(v2 + 136), 0);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 176) = re::globalAllocators(inited)[2];
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

re::ecs2::MeshSmoothSystem *re::ecs2::MeshSmoothSystem::MeshSmoothSystem(re::ecs2::MeshSmoothSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED5F4E8;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 136) = &off_24ED5F480;
  v3 = v2 + 136;
  *(_QWORD *)(v2 + 144) = v2;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 152), (uint64_t)v9);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 1;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 78) = 1;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 1;
  *(_OWORD *)((char *)this + 393) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 37, 0);
  *((_DWORD *)this + 78) += 2;
  *((_QWORD *)this + 42) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 43, 0);
  *((_DWORD *)this + 90) += 2;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = this;
  *((_QWORD *)this + 50) = v3;
  *((_BYTE *)this + 408) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

id re::internal::defaultRetain<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void ___ZN2re19CARESortingDefaults15normalThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  float v2;
  _BYTE v3[4];
  float v4;

  re::Defaults::floatValue((re::Defaults *)"CASortingNormalThreshold", a2, (uint64_t)v3);
  v2 = v4;
  if (!v3[0])
    v2 = 0.0001;
  re::CARESortingDefaults::normalThreshold(void)::sortingNormalThreshold = LODWORD(v2);
}

void ___ZN2re19CARESortingDefaults17distanceThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  float v2;
  _BYTE v3[4];
  float v4;

  re::Defaults::floatValue((re::Defaults *)"CASortingDistanceThreshold", a2, (uint64_t)v3);
  v2 = v4;
  if (!v3[0])
    v2 = 0.0005;
  re::CARESortingDefaults::distanceThreshold(void)::sortingDistanceThreshold = LODWORD(v2);
}

void ___ZN2re19CARESortingDefaults29displacementOrderingThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  float v2;
  _BYTE v3[4];
  float v4;

  re::Defaults::floatValue((re::Defaults *)"CASortingDisplacementOrderingThreshold", a2, (uint64_t)v3);
  v2 = v4;
  if (!v3[0])
    v2 = 0.0001;
  re::CARESortingDefaults::displacementOrderingThreshold(void)::sortingDisplacementOrderingThreshold = LODWORD(v2);
}

void ___ZN2re19CARESortingDefaults28enableDrawLayerSortingGroupsEv_block_invoke(uint64_t a1, const char *a2)
{
  re *v2;
  char v3;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"CAREEnableDrawLayerSortingGroups", a2, (char *)&v6);
  if ((_BYTE)v6)
    v3 = BYTE1(v6);
  else
    v3 = 0;
  re::gEnableDrawLayerSortingGroups = v3;
  v4 = *re::sortingLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (re::gEnableDrawLayerSortingGroups)
      v5 = "enabled";
    else
      v5 = "disabled";
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "DrawLayerSortingGroups is now %s.", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t *re::ecs2::allocInfo_SubsceneComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410CE80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410CE80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CE98, 0);
    *(uint64_t *)((char *)&qword_25410CEA8 + 6) = 0;
    qword_25410CEA8 = 0;
    qword_25410CEB8 = 0;
    qword_25410CEC0 = 0xFFFFFFFFLL;
    qword_25410CE98 = (uint64_t)&off_24ED7DAA8;
    qword_25410CEC8 = (uint64_t)"SubsceneComponent";
    dword_25410CED0 = 0;
    unk_25410CED8 = 0u;
    unk_25410CEE8 = 0u;
    unk_25410CEF8 = 0u;
    qword_25410CF08 = 0;
    __cxa_guard_release(&qword_25410CE80);
  }
  return &qword_25410CE98;
}

void re::ecs2::initInfo_SubsceneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x88FEEDB7C0BE1FE2;
  v14[1] = "SubsceneComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_216);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_216);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410CE88 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "m_subscene";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410CE90 = v12;
      __cxa_guard_release(&_MergedGlobals_216);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410CE88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SubsceneComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SubsceneComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SubsceneComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SubsceneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::SubsceneComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57608;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::SubsceneComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::SubsceneComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57608;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::SubsceneComponent>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SubsceneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SubsceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SubsceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SubsceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SubsceneComponent>, this);
}

uint64_t re::ecs2::SubsceneComponent::setSubscene(uint64_t a1, uint64_t *a2)
{
  re::ecs2::ECSSerialization *v4;
  uint64_t result;
  const re::AssetHandle *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  AssetService *v10;

  v4 = *(re::ecs2::ECSSerialization **)(a1 + 16);
  (*(void (**)(_QWORD *))(*((_QWORD *)v4 + 38) + 16))((_QWORD *)v4 + 38);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)v4 + 312);
  result = (uint64_t)re::AssetHandle::operator=((uint64_t *)(a1 + 32), a2);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    v8 = atomic_load((unsigned int *)(v7 + 704));
    if (v8 == 2)
    {
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        v10 = *(AssetService **)(v9 + 24);
      else
        v10 = 0;
      result = re::ecs2::ECSSerialization::loadFromAsset(v4, v10, (AssetService *)(a1 + 32), v6);
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_LinkedTLEComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_217);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_217))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CF28, 0);
    *(uint64_t *)((char *)&qword_25410CF38 + 6) = 0;
    qword_25410CF38 = 0;
    qword_25410CF48 = 0;
    qword_25410CF50 = 0xFFFFFFFFLL;
    qword_25410CF28 = (uint64_t)&off_24ED7DAA8;
    qword_25410CF58 = (uint64_t)"LinkedTLEComponent";
    dword_25410CF60 = 0;
    unk_25410CF68 = 0u;
    unk_25410CF78 = 0u;
    unk_25410CF88 = 0u;
    qword_25410CF98 = 0;
    __cxa_guard_release(&_MergedGlobals_217);
  }
  return &qword_25410CF28;
}

void re::ecs2::initInfo_LinkedTLEComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x181663CBD41226D2;
  v10[1] = "LinkedTLEComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410CF20);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410CF20);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410CF18 = v8;
      __cxa_guard_release(&qword_25410CF20);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410CF18;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::LinkedTLEComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::LinkedTLEComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LinkedTLEComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LinkedTLEComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::LinkedTLEComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57688;
}

uint64_t re::internal::defaultDestruct<re::ecs2::LinkedTLEComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::LinkedTLEComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57688;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::LinkedTLEComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_LinkedTLEComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LinkedTLEComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LinkedTLEComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LinkedTLEComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LinkedTLEComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ColliderComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_218);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_218))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410CFE0, 0);
    *(uint64_t *)((char *)&qword_25410CFF0 + 6) = 0;
    qword_25410CFF0 = 0;
    qword_25410D000 = 0;
    qword_25410D008 = 0xFFFFFFFFLL;
    qword_25410CFE0 = (uint64_t)&off_24ED7DAA8;
    qword_25410D010 = (uint64_t)"ColliderComponent";
    dword_25410D018 = 0;
    xmmword_25410D020 = 0u;
    unk_25410D030 = 0u;
    xmmword_25410D040 = 0u;
    qword_25410D050 = 0;
    __cxa_guard_release(&_MergedGlobals_218);
  }
  return &qword_25410CFE0;
}

void re::ecs2::initInfo_ColliderComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;

  v30[0] = 0x92DE29B139D12E92;
  v30[1] = "ColliderComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  v4 = atomic_load((unsigned __int8 *)&qword_25410CFA8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410CFA8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410CFB0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "shape";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410CFB8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_CollisionObjectType((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "type";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x3800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410CFC0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint32_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "group";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x4000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410CFC8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint32_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "mask";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x4400000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25410CFD0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_uint32_t((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "interactionType";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x3C00000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_25410CFD8 = v28;
      __cxa_guard_release(&qword_25410CFA8);
    }
  }
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_25410CFB0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ColliderComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ColliderComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ColliderComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ColliderComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v29 = v31;
}

uint64_t re::internal::defaultConstruct<re::ecs2::ColliderComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ColliderComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ColliderComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ColliderComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ColliderComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ColliderComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ColliderComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ColliderComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ColliderComponent>, this);
}

void re::ecs2::ColliderComponent::removeFromSimulation(re::ecs2::ColliderComponent *this)
{
  id *v2;
  _QWORD *WeakRetained;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re::CollisionObject *v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 12))
  {
    v2 = (id *)((char *)this + 160);
    WeakRetained = objc_loadWeakRetained((id *)this + 20);
    if (WeakRetained)
    {
      v4 = WeakRetained;
      v5 = *((_QWORD *)this + 12);
      v6 = *((_QWORD *)this + 13);
      v10[3] = v10;
      v10[0] = &off_24ED5F838;
      v10[1] = v6;
      v9 = 0;
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)this + 15, v5);
      std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)this + 16, (uint64_t)v10);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v9);
      v7 = v4[6];
      v8 = (re::CollisionObject *)*((_QWORD *)this + 12);
      re::ContactSetCollection::remove(*(_QWORD *)(v7 + 128) + 72, v8);
      (*(void (**)(_QWORD, re::CollisionObject *))(**(_QWORD **)(v7 + 128) + 200))(*(_QWORD *)(v7 + 128), v8);
      *((_QWORD *)v8 + 7) = 0;
      objc_destroyWeak(v2);
      *((_QWORD *)this + 20) = 0;

    }
    *((_QWORD *)this + 12) = 0;
  }
}

re::CollisionObject **re::ecs2::ColliderComponent::setUnmanagedCollisionObject(re::CollisionObject **this, re::CollisionObject *a2)
{
  uint64_t *v3;

  if (this[12] != a2)
  {
    v3 = (uint64_t *)this;
    re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)this);
    v3[12] = (uint64_t)a2;
    return (re::CollisionObject **)re::AssetHandle::operator=(v3 + 9, v3 + 4);
  }
  return this;
}

uint64_t re::AssetHandle::asset<re::CollisionShapeAsset>(re::CollisionShapeAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::CollisionShapeAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

BOOL re::ecs2::ColliderComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __int16 *v20;
  int16x8_t v21;
  int16x8_t *v22;
  int v23;
  int16x8_t *v24;
  uint64_t v25;
  uint16x8_t v26;
  unint64_t v27;
  unint64_t v28;
  re::ecs2::ComponentBucketsBase *v29;
  unint64_t v30;
  const __int16 *v31;
  int16x8_t v32;
  int v33;
  uint16x8_t v34;
  NSObject *v35;
  re::ecs2::PhysicsSimulationData *v36;
  uint64_t v37;
  unint64_t v39;
  unint64_t v40;
  char *WeakRetained;
  char *v42;
  _BOOL8 v43;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49[2];
  _BYTE v50[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v49[0] = v12,
        (v49[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v46, a5, 0);
    v15 = v46;
    v14 = v47;
    v46 = a4;
    v47 = v15;
    v48 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v16 = (re *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v47);
        v17 = *(_QWORD *)v16;
        v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
        v19 = *(unsigned __int16 *)(v18 + 82);
        if (!*(_WORD *)(v18 + 82))
          goto LABEL_20;
        v20 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v21 = vld1q_dup_s16(v20);
        v22 = *(int16x8_t **)(v18 + 88);
        v23 = 1;
        v24 = v22;
        v25 = *(unsigned __int16 *)(v18 + 82);
        while (1)
        {
          v26 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v21, *v24), (int8x16_t)xmmword_2260F1E80);
          v26.i16[0] = vmaxvq_u16(v26);
          if (v26.i32[0])
            break;
          v23 -= 8;
          ++v24;
          if (!--v25)
            goto LABEL_13;
        }
        if (v26.u16[0] - v23 < *(unsigned __int16 *)(v18 + 80))
        {
          v27 = v46;
          v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v47);
          v29 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
          v30 = *(_QWORD *)(a3 + 32);
          goto LABEL_36;
        }
LABEL_13:
        v31 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v32 = vld1q_dup_s16(v31);
        v33 = 1;
        while (1)
        {
          v34 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v32, *v22), (int8x16_t)xmmword_2260F1E80);
          v34.i16[0] = vmaxvq_u16(v34);
          if (v34.i32[0])
            break;
          v33 -= 8;
          ++v22;
          if (!--v19)
            goto LABEL_20;
        }
        if (v34.u16[0] - v33 < *(unsigned __int16 *)(v18 + 80))
        {
          v35 = *re::ecsComponentsLogObjects(v16);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            v45 = 0;
            _os_log_error_impl(&dword_224FE9000, v35, OS_LOG_TYPE_ERROR, "Collider component cannot exist on the same entity that contains a character controller component. Deactivating collider component.", (uint8_t *)&v45, 2u);
          }
        }
        else
        {
LABEL_20:
          v36 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v49, v18);
          if (v36)
            v37 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v36);
          else
            v37 = 0;
          if ((*(_BYTE *)(v18 + 288) & 1) != 0 && *(_QWORD *)(v17 + 40) && v37 != 0)
          {
            WeakRetained = (char *)objc_loadWeakRetained((id *)(v17 + 160));
            if (WeakRetained)
            {
              v42 = WeakRetained - 8;

            }
            else
            {
              v42 = 0;
            }
            if (v42 != (char *)v37)
              re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
            v27 = v46;
            v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v47);
            v29 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
            v30 = *(_QWORD *)(a3 + 40);
LABEL_36:
            re::ecs2::ComponentBucketsBase::moveComponent(v29, v27, v28, v30);
            goto LABEL_37;
          }
        }
        v39 = v46;
        v40 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v47);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v39, v40, *(_QWORD *)(a3 + 32));
        re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
LABEL_37:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v47);
      }
      while (v47 != a5 || (unsigned __int16)v48 != 0xFFFF || WORD1(v48) != 0xFFFF);
    }
    v43 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v43 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50);
  return v43;
}

BOOL re::ecs2::ColliderComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;
  uint64_t v17;
  re::CollisionShapeAsset *v18;
  uint64_t v19;
  re::ecs2::TransformComponent **v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  float32x4_t *v25;
  re *v26;
  __int128 v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float v31;
  NSObject *v32;
  unint64_t v33;
  unint64_t v34;
  _anonymous_namespace_ *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD v46[4];
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  _BYTE v51[16];
  __int128 v52;
  float32x4_t v53;
  uint8_t buf[16];
  float32x4_t v55;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v51, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (!v9
    || (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v50[0] = v12,
        (v50[1] = v13) == 0))
  {
    v14 = 0;
    goto LABEL_8;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v47 = a4;
  v48 = *(_QWORD *)buf;
  v49 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v48);
      v17 = *(_QWORD *)v16;
      v18 = (re::CollisionShapeAsset *)(*(_QWORD *)v16 + 32);
      v19 = *(_QWORD *)(*(_QWORD *)v16 + 40);
      if (v19
        && (v20 = *(re::ecs2::TransformComponent ***)(v17 + 16), v21 = atomic_load((unsigned int *)(v19 + 704)),
                                                                 v21 == 2))
      {
        v22 = *(_QWORD *)(v17 + 96);
        if (!v22
          || ((v23 = *(_DWORD *)(v22 + 88), *(_QWORD *)(v17 + 80) == *(_QWORD *)(v17 + 40))
            ? (v24 = v23 == *(_DWORD *)(v17 + 60))
            : (v24 = 0),
              !v24))
        {
          v25 = (float32x4_t *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v50, *(_QWORD *)(v17 + 16));
          re::ecs2::TransformComponent::worldMatrix4x4F(v20, (const re::ecs2::Entity *)1, buf);
          re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v25, (uint64_t)buf, v46);
          *(_OWORD *)buf = 0u;
          v52 = 0u;
          v53 = (float32x4_t)xmmword_2260E5D70;
          v26 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)v46, (int32x4_t *)buf, &v53, &v52);
          v27 = v52;
          v28.i64[0] = __PAIR64__(v52, DWORD1(v52));
          v28.i64[1] = __PAIR64__(*(unsigned int *)buf, DWORD2(v52));
          if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(v28), (int8x16_t)vcgezq_f32(v28)))) & 0xF) != 0|| (v29 = v53, v30 = (int8x16_t)vmulq_f32(v53, v53), v31 = vaddv_f32(vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))), v31 != 1.0)&& fabsf(v31 + -1.0) > 0.00001)
          {
            v32 = *re::ecsComponentsLogObjects(v26);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "NaN or non-unit rotation detected in transform (Collider). Skipping.", buf, 2u);
            }
            re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
            v33 = v47;
            v34 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v48);
            re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v33, v34, *(_QWORD *)(a3 + 32));
            goto LABEL_23;
          }
          v45 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation((re::ecs2::PhysicsSimulationData *)v25);
          re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
          v36 = *(_QWORD *)(re::AssetHandle::asset<re::CollisionShapeAsset>(v18) + 8);
          re::AssetHandle::operator=((uint64_t *)(v17 + 72), (uint64_t *)v18);
          v37 = *(_QWORD *)(v17 + 120);
          v44 = v36;
          v38 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) >> 27));
          v39 = 0xBF58476D1CE4E5B9
              * (*(unsigned int *)(v17 + 60) ^ ((unint64_t)*(unsigned int *)(v17 + 60) >> 30));
          v40 = (((v38 ^ (v38 >> 31)) << 6)
               + ((v38 ^ (v38 >> 31)) >> 2)
               + ((0x94D049BB133111EBLL * (v39 ^ (v39 >> 27))) ^ ((0x94D049BB133111EBLL * (v39 ^ (v39 >> 27))) >> 31))
               - 0x61C8864680B583E9) ^ v38 ^ (v38 >> 31);
          if (v37 && v40 == *(_QWORD *)(v17 + 112))
          {
            *(_QWORD *)(v17 + 120) = 0;
          }
          else
          {
            std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v17 + 120), 0);
            *(_OWORD *)buf = v27;
            v55 = v29;
          }
          *(_QWORD *)(v17 + 96) = v37;
          *(_QWORD *)(v17 + 112) = v40;
          *(_QWORD *)(v37 + 40) = *(_QWORD *)(v17 + 16);
          objc_storeWeak((id *)(v17 + 160), (id)(v45 + 8));
          v41 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 128);
          *(_QWORD *)(*(_QWORD *)(v17 + 96) + 56) = v41;
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 192))(v41);
          re::AssetHandle::operator=((uint64_t *)(v17 + 72), (uint64_t *)v18);
        }
        v42 = v47;
        v43 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v48);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v42, v43, *(_QWORD *)(a3 + 48));
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(*(_QWORD *)v16 + 32));
        re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
      }
LABEL_23:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v48);
    }
    while (v48 != a5 || (unsigned __int16)v49 != 0xFFFF || WORD1(v49) != 0xFFFF);
  }
  v14 = *(_DWORD *)(a5 + 40) != 0;
LABEL_8:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v51);
  return v14;
}

BOOL re::ecs2::ColliderComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  re::ecs2::ColliderComponent *v18;
  re::ecs2::TransformComponent **v19;
  re::ecs2::PhysicsSimulationData *v20;
  float32x4_t *v21;
  re *v22;
  float32x4_t v23;
  int8x16_t v24;
  float v25;
  NSObject *v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  float32x4_t v30;
  _QWORD *v31;
  uint64_t v32;
  _OWORD v34[4];
  unint64_t v35;
  float32x4_t v36;
  uint64_t v37[2];
  _BYTE v38[16];
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42[4];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v38, 3047, a1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (v11
    && (v12 = v11,
        v13 = *(_QWORD *)(a3 + 8),
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11),
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v13),
        v37[0] = v14,
        (v37[1] = v15) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v42, a5, 0);
    v35 = a4;
    v36 = v42[0];
    if (v42[0].i64[0] != a5 || v42[0].u16[4] != 0xFFFFLL || (v42[0].i32[2] & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v17 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v36);
        v18 = *(re::ecs2::ColliderComponent **)v17;
        v19 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v17 + 16);
        v20 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v37, (uint64_t)v19);
        v21 = (float32x4_t *)v20;
        if (!a6 || re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v20) == a6)
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v19, (const re::ecs2::Entity *)1, v42);
          re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v21, (uint64_t)v42, v34);
          v41 = 0u;
          v39 = 0u;
          v40 = (float32x4_t)xmmword_2260E5D70;
          v22 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)v34, (int32x4_t *)&v41, &v40, &v39);
          v42[0] = v41;
          v42[1] = v40;
          v42[2] = v39;
          v23.i64[0] = __PAIR64__(v39.u32[0], v39.u32[1]);
          v23.i64[1] = __PAIR64__(v41.u32[0], v39.u32[2]);
          if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23)))) & 0xF) == 0&& ((v24 = (int8x16_t)vmulq_f32(v40, v40), v25 = vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))), v25 == 1.0)|| fabsf(v25 + -1.0) <= 0.00001))
          {
            v34[0] = v39;
            v34[1] = v40;
            v29 = *(_OWORD **)(*((_QWORD *)v18 + 12) + 16);
            v30 = v40;
            v29[1] = v39;
            v29[2] = v30;
            (*(void (**)(_OWORD *, _OWORD *))(*(_QWORD *)v29 + 64))(v29, v34);
            re::CollisionObject::setScale(*((_QWORD *)v18 + 12), v42);
            v31 = (_QWORD *)*((_QWORD *)v18 + 12);
            v32 = *((_QWORD *)v18 + 8);
            if (v31[4] != v32)
            {
              v31[4] = v32;
              (*(void (**)(_QWORD *))(*v31 + 80))(v31);
            }
          }
          else
          {
            v26 = *re::ecsComponentsLogObjects(v22);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v34[0]) = 0;
              _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "NaN or non-unit rotation detected in transform (PhysicsSystem_Collider). Skipping.", (uint8_t *)v34, 2u);
            }
            re::ecs2::ColliderComponent::removeFromSimulation(v18);
            v27 = v35;
            v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v36);
            re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v27, v28, *(_QWORD *)(a3 + 32));
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v36);
      }
      while (v36.i64[0] != a5 || v36.u16[4] != 0xFFFF || v36.u16[5] != 0xFFFF);
    }
    v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v38);
  return v16;
}

uint64_t re::ecs2::ColliderComponentStateImpl::dependsOnComponents(re::ecs2::ColliderComponentStateImpl *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ColliderComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::ColliderComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  v2 = (id *)(a1 + 160);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED43658;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 60) = 0x100000000;
  *(_DWORD *)(v3 + 68) = -1;
  *(_QWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  objc_initWeak(v2, 0);
  return a1;
}

void std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED5F838;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED5F838;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::operator()(uint64_t result, _QWORD *a2)
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = (void (***)(_QWORD))*a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    (**v2)(*a2);
    return (*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::target_type()
{
}

__n128 re::ecs2::VideoProxyComponent::impl::deinitPixelBufferGroup(uint64_t a1, uint64_t a2, int a3)
{
  re::VideoAsset *v5;
  re::VideoAsset *v6;
  re::VideoAsset *v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  __n128 result;

  if (*(_QWORD *)(a1 + 160))
  {
    v5 = (re::VideoAsset *)(a1 + 152);
    if (a3 == 1)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)(a1 + 152));
      ++*(_DWORD *)(*(_QWORD *)(a1 + 160) + 260);
      v7 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>(v5);
      if (!v7)
        goto LABEL_9;
      re::VideoAsset::clearFutureUserProvidedVideoPixelBuffers(v7);
      goto LABEL_8;
    }
    if (!a3)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)(a1 + 152));
      ++*(_DWORD *)(*(_QWORD *)(a1 + 160) + 260);
      v6 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>(v5);
      if (v6)
      {
        re::VideoAsset::clearCurrentUserProvidedVideoPixelBuffers(v6);
LABEL_8:
        v8 = *(_QWORD *)(a1 + 160);
        *(_BYTE *)(v8 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v8);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(*(re::internal::AssetEntry **)(a1 + 160));
      }
    }
  }
LABEL_9:
  if (*(_QWORD *)a2)
  {
    v9 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 8 * v9++ + 16));
    while (v9 < *(_QWORD *)a2);
  }
  *(_QWORD *)a2 = 0;
  ++*(_DWORD *)(a2 + 8);
  v10 = *(const void **)(a2 + 32);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(a2 + 32) = 0;
  v11 = MEMORY[0x24BDC0D40];
  result = *(__n128 *)MEMORY[0x24BDC0D40];
  *(_OWORD *)(a2 + 44) = *MEMORY[0x24BDC0D40];
  *(_QWORD *)(a2 + 60) = *(_QWORD *)(v11 + 16);
  return result;
}

uint64_t re::ecs2::VideoProxyComponent::impl::generateAsset(re::ecs2::VideoProxyComponent::impl *this, re::AssetManager *a2)
{
  uint64_t *v3;
  uint64_t v4;
  re::VideoAsset *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  int v14;
  _OWORD v15[3];
  int v16;
  uint64_t v17;
  int v18;
  _OWORD v19[3];
  int v20;

  re::VideoAsset::makeVideoMutableMemoryAsset(v12, a2, (AssetService *)a2);
  v3 = re::AssetHandle::operator=((uint64_t *)this + 19, v12);
  re::AssetHandle::mutateAssetCommon((re::AssetHandle *)v3);
  ++*(_DWORD *)(*((_QWORD *)this + 20) + 260);
  v4 = re::AssetHandle::asset<re::VideoAsset>((re::ecs2::VideoProxyComponent::impl *)((char *)this + 152));
  if (v4)
  {
    v5 = (re::VideoAsset *)v4;
    v18 = 0;
    v6 = *((_QWORD *)this + 1);
    memcpy(v19, (char *)this + 24, 8 * v6);
    v17 = v6;
    v7 = *(_OWORD *)((char *)this + 56);
    v19[1] = *(_OWORD *)((char *)this + 40);
    v19[2] = v7;
    v20 = *((_DWORD *)this + 18);
    re::VideoAsset::setCurrentUserProvidedVideoPixelBuffers(v5, (uint64_t)&v17);
    v17 = 0;
    ++v18;
    v14 = 0;
    v8 = *((_QWORD *)this + 10);
    memcpy(v15, (char *)this + 96, 8 * v8);
    v13 = v8;
    v9 = *((_OWORD *)this + 8);
    v15[1] = *((_OWORD *)this + 7);
    v15[2] = v9;
    v16 = *((_DWORD *)this + 36);
    re::VideoAsset::setFutureUserProvidedVideoPixelBuffers(v5, (uint64_t)&v13);
    *((_QWORD *)v5 + 27) = 0;
    v10 = *((_QWORD *)this + 20);
    *(_BYTE *)(v10 + 256) = 1;
    re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v10);
    re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(*((re::internal::AssetEntry **)this + 20));
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::ecs2::VideoProxyComponent::impl *)((char *)this + 152));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return (uint64_t)this + 152;
}

void re::ecs2::VideoProxyComponent::impl::addAttachmentsToVideoComponent(re::ecs2::VideoProxyComponent::impl *this, re::ecs2::VideoComponent *a2)
{
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  StringID v11;
  _QWORD v12[2];
  StringID v13;
  _QWORD v14[2];
  StringID v15;
  _QWORD v16[2];
  StringID v17;
  _QWORD v18[2];
  StringID v19;
  _QWORD v20[2];
  StringID v21;
  _QWORD v22[2];
  StringID v23;
  _QWORD v24[2];
  StringID v25;
  _QWORD v26[2];
  StringID v27;
  _QWORD v28[2];

  *(_QWORD *)&v27.var0 = 0xFFB9D6614348A962;
  v27.var1 = "REVideoAttachmentChannelID1TexturePlane0";
  v28[0] = 0;
  v28[1] = &str_110;
  a2 = (re::ecs2::VideoComponent *)((char *)a2 + 80);
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v27);
  re::StringID::destroyString((re::StringID *)v28);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v25.var0 = 0xFFB9D6614348A964;
  v25.var1 = "REVideoAttachmentChannelID1TexturePlane1";
  v26[0] = 0;
  v26[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v25);
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v25);
  *(_QWORD *)&v23.var0 = 0xFFB9D6614348A966;
  v23.var1 = "REVideoAttachmentChannelID1TexturePlane2";
  v24[0] = 0;
  v24[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v23);
  re::StringID::destroyString((re::StringID *)v24);
  re::StringID::destroyString((re::StringID *)&v23);
  *(_QWORD *)&v21.var0 = 0xA572F05B07043CA0;
  v21.var1 = "REVideoAttachmentChannelID2TexturePlane0";
  v22[0] = 0;
  v22[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v21);
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)&v21);
  *(_QWORD *)&v19.var0 = 0xA572F05B07043CA2;
  v19.var1 = "REVideoAttachmentChannelID2TexturePlane1";
  v20[0] = 0;
  v20[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v19);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v17.var0 = 0xA572F05B07043CA4;
  v17.var1 = "REVideoAttachmentChannelID2TexturePlane2";
  v18[0] = 0;
  v18[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v17);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)&v17);
  *(_QWORD *)&v15.var0 = 0x83807E236D5174B2;
  v15.var1 = "REVideoAttachmentConstantYCbCrMatrix";
  v16[0] = 0;
  v16[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v15);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)&v15);
  *(_QWORD *)&v13.var0 = 0x652E145D102D3908;
  v13.var1 = "REVideoAttachmentConstantImageFunction";
  v14[0] = 0;
  v14[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v13);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)&v13);
  *(_QWORD *)&v11.var0 = 0x963DA5D75AB5D342;
  v11.var1 = "REVideoAttachmentSpill";
  v12[0] = 0;
  v12[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v11);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)&v11);
}

uint64_t *re::ecs2::VideoProxyComponent::impl::update(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  re::ecs2::VideoProxyComponent::impl *v8;
  uint64_t *v9;
  uint64_t v10[3];

  if (a2 && a5)
  {
    v7 = result;
    if (!*(_BYTE *)result)
    {
      v8 = (re::ecs2::VideoProxyComponent::impl *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      *(_BYTE *)v7 = 1;
      re::ecs2::VideoProxyComponent::impl::addAttachmentsToVideoComponent(v8, v8);
    }
    result = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      v9 = result;
      *((_BYTE *)result + 267) = 1;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)(v7 + 19));
      re::AssetHandle::operator=(v9 + 21, v10);
      *((_BYTE *)v9 + 73) = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
      result = re::AssetHandle::operator=(v9 + 4, (uint64_t *)(a3 + 32));
      *((_BYTE *)v9 + 284) = *(_BYTE *)(*(_QWORD *)(a3 + 56) + 192);
    }
  }
  return result;
}

float32x2_t re::ecs2::VideoProxyComponent::impl::postBufferRetrievalUpdate(float32x2_t *this, float32x2_t result, re::ecs2::Entity *a3, re::AssetManager *a4)
{
  re::ecs2::EntityComponentCollection *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  float32x2_t v15;
  float32x2_t v16;

  if (a3)
  {
    if (a4)
    {
      v5 = (re::ecs2::Entity *)((char *)a3 + 32);
      v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v6)
      {
        v7 = v6;
        v8 = re::ecs2::EntityComponentCollection::getOrAdd(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v8)
        {
          v9 = (float32x2_t *)v8;
          v10 = *(_QWORD *)(v7 + 56);
          if (*(_QWORD *)(v10 + 160)
            && (v11 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v10 + 152))) != 0)
          {
            v12 = *(_QWORD *)(v11 + 192);
            if (v12)
              v13 = *(float *)(v12 + 2496);
            else
              v13 = 0.0;
            if (fabsf(v13) < 0.000001)
              v14 = 1;
            else
              v14 = 2;
          }
          else
          {
            v14 = 1;
          }
          v15 = this[22];
          v16 = this[23];
          v9[28] = v15;
          v9[29] = v16;
          result = vmul_f32(vadd_f32(v15, v16), (float32x2_t)0x3F0000003F000000);
          v9[30] = result;
          v9[31].i32[0] = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_VideoProxyComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_219);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_219))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D070, 0);
    *(uint64_t *)((char *)&qword_25410D080 + 6) = 0;
    qword_25410D080 = 0;
    qword_25410D090 = 0;
    qword_25410D098 = 0xFFFFFFFFLL;
    qword_25410D070 = (uint64_t)&off_24ED7DAA8;
    qword_25410D0A0 = (uint64_t)"VideoProxyComponent";
    dword_25410D0A8 = 0;
    unk_25410D0B0 = 0u;
    unk_25410D0C0 = 0u;
    unk_25410D0D0 = 0u;
    qword_25410D0E0 = 0;
    __cxa_guard_release(&_MergedGlobals_219);
  }
  return &qword_25410D070;
}

void re::ecs2::initInfo_VideoProxyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x6B0AC0336B6E06D4;
  v10[1] = "VideoProxyComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410D068);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410D068);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410D060 = v8;
      __cxa_guard_release(&qword_25410D068);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410D060;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoProxyComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoProxyComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoProxyComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoProxyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::ecs2::VideoProxyComponent *re::internal::defaultConstruct<re::ecs2::VideoProxyComponent>(int a1, int a2, re::ecs2::VideoProxyComponent *this)
{
  return re::ecs2::VideoProxyComponent::VideoProxyComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoProxyComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoProxyComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoProxyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoProxyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoProxyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoProxyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoProxyComponent>, this);
}

re::ecs2::VideoProxyComponent *re::ecs2::VideoProxyComponent::VideoProxyComponent(re::ecs2::VideoProxyComponent *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED5F8C8;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = re::globalAllocators((re *)v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 200, 8);
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 48) = -1;
  v5 = (__int128 *)MEMORY[0x24BDC0D40];
  *(_DWORD *)(v4 + 120) = -1;
  *(_QWORD *)(v4 + 184) = 0x3F8000003F800000;
  *(_QWORD *)(v4 + 192) = 0;
  v6 = *v5;
  *(_OWORD *)(v4 + 52) = *v5;
  v7 = *((_QWORD *)v5 + 2);
  *(_QWORD *)(v4 + 68) = v7;
  *(_QWORD *)(v4 + 140) = v7;
  *(_OWORD *)(v4 + 124) = v6;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *((_QWORD *)this + 7) = v4;
  return this;
}

void re::ecs2::VideoProxyComponent::~VideoProxyComponent(re::ecs2::VideoProxyComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED5F8C8;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = re::globalAllocators(this)[2];
    re::ecs2::VideoProxyComponent::impl::deinitPixelBufferGroup(v2, v2 + 8, 0);
    re::ecs2::VideoProxyComponent::impl::deinitPixelBufferGroup(v2, v2 + 80, 1);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 + 152));
    *(_QWORD *)(v2 + 80) = 0;
    ++*(_DWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 8) = 0;
    ++*(_DWORD *)(v2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VideoProxyComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::VideoProxyComponent::~VideoProxyComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::VideoProxyComponent::update(uint64_t a1, uint64_t a2, const re::AssetHandle *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[24];

  v7 = *(uint64_t **)(a1 + 56);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v9, a3);
  re::ecs2::VideoProxyComponent::impl::update(v7, a2, a1, v8, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::AssetHandle::asset<re::VideoAsset>(re::VideoAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = re::VideoAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = v4;
      v7 = re::AssetHandle::assetInfo(a1);
      if ((v7[17] & 1) != 0)
        v8 = (char *)v7[18];
      else
        v8 = (char *)v7 + 137;
      v9 = 136315138;
      v10 = v8;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);

    }
  }
  return v3;
}

uint64_t *re::ecs2::allocInfo_AnimationSceneService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_220);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_220))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D0F0, 0);
    *(uint64_t *)((char *)&qword_25410D100 + 6) = 0;
    qword_25410D100 = 0;
    qword_25410D110 = 0;
    qword_25410D118 = 0xFFFFFFFFLL;
    qword_25410D0F0 = (uint64_t)&off_24ED7DAA8;
    qword_25410D120 = (uint64_t)"AnimationSceneService";
    dword_25410D128 = 0;
    unk_25410D130 = 0u;
    unk_25410D140 = 0u;
    unk_25410D150 = 0u;
    qword_25410D160 = 0;
    __cxa_guard_release(&_MergedGlobals_220);
  }
  return &qword_25410D0F0;
}

void re::ecs2::initInfo_AnimationSceneService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x7787547DA612D41ALL;
  v5[1] = "AnimationSceneService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AnimationSceneService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_AnimationSceneService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSceneService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationSceneService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationSceneService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationSceneService>, this);
}

void re::ecs2::CARESortingDebugging::dumpSorting(re::ecs2::CARESortingDebugging *this, __CFString *a2, const re::ecs2::CARESortingManager *a3)
{
  __CFString *v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  void *v68;
  void *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  id *v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t i;
  void *v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t j;
  __CFString *v89;
  void *v90;
  uint64_t v91;
  int *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  __CFString *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  int v110;
  int v111;
  uint64_t v112;
  int *v113;
  __CFString *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  int v128;
  int v129;
  int v130;
  int v131;
  const re::ecs2::CARESortingManager *v132;
  uint64_t v133;
  uint64_t v134;
  int *v135;
  __CFString *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  id v153;
  void *v154;
  void *v155;
  __CFString *obj;
  id obja;
  id objb;
  uint64_t v159;
  void *v160;
  void *v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t *v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  const re::ecs2::CARESortingManager *v171;
  id v172;
  __CFString *v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __n128 v184[8];
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;

  v190 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 2, "");
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  v185 = 0;
  v186 = 0;
  v187 = 1;
  v188 = 0;
  v189 = 0;
  *(_QWORD *)&v180 = &v185;
  obj = v4;
  v159 = *((unsigned int *)a3 + 22);
  v5 = 0;
  if ((_DWORD)v159)
  {
    v6 = (int *)(*((_QWORD *)a3 + 9) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 46;
      if (v7 < 0)
        break;
      if (v159 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)a3 + 22);
        break;
      }
    }
  }
  v171 = a3;
  if ((_DWORD)v159 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *((_DWORD *)a3 + 22);
    do
    {
      v162 = v5;
      v10 = *((_QWORD *)a3 + 9) + 184 * v8;
      v11 = v10 + 24;
      v172 = (id)*(unsigned int *)(v10 + 56);
      v12 = 0;
      if ((_DWORD)v172)
      {
        v13 = (int *)(*(_QWORD *)(v10 + 40) + 8);
        while (1)
        {
          v14 = *v13;
          v13 += 6;
          if (v14 < 0)
            break;
          if (v172 == (id)++v12)
          {
            LODWORD(v12) = (_DWORD)v172;
            break;
          }
        }
      }
      if ((_DWORD)v172 != (_DWORD)v12)
      {
        v15 = v12;
        v168 = v11;
        do
        {
          v16 = *(_QWORD *)(v11 + 16) + 24 * v15;
          v19 = *(_QWORD *)(v16 + 16);
          v17 = (uint64_t *)(v16 + 16);
          v18 = v19;
          v20 = *(unsigned int *)(v19 + 232);
          if ((_DWORD)v20)
          {
            v21 = 0;
            v22 = (int *)(*(_QWORD *)(v18 + 216) + 8);
            while (1)
            {
              v23 = *v22;
              v22 += 6;
              if (v23 < 0)
                break;
              if (v20 == ++v21)
              {
                LODWORD(v21) = v20;
                break;
              }
            }
          }
          else
          {
            LODWORD(v21) = 0;
          }
          if ((_DWORD)v20 != (_DWORD)v21)
          {
            v165 = v17;
            v24 = v21;
            do
            {
              v25 = *(_QWORD *)(v18 + 216) + 24 * v24;
              v28 = *(_QWORD *)(v25 + 16);
              v27 = v25 + 16;
              v26 = v28;
              if (*(_DWORD *)(v28 + 300))
              {
                v29 = *(unsigned int *)(v26 + 304);
                if ((_DWORD)v29)
                {
                  v30 = 0;
                  v31 = (int *)(*(_QWORD *)(v26 + 288) + 8);
                  while (1)
                  {
                    v32 = *v31;
                    v31 += 6;
                    if (v32 < 0)
                      break;
                    if (v29 == ++v30)
                    {
                      LODWORD(v30) = *(_DWORD *)(v26 + 304);
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v30) = 0;
                }
                if ((_DWORD)v29 != (_DWORD)v30)
                {
                  v33 = v30;
                  do
                  {
                    re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()((uint64_t *)&v180, *(_QWORD *)(*(_QWORD *)(v26 + 288) + 24 * v33 + 16));
                    if (*(_DWORD *)(v26 + 304) <= (v30 + 1))
                      v34 = v30 + 1;
                    else
                      v34 = *(_DWORD *)(v26 + 304);
                    v35 = v30;
                    while (1)
                    {
                      v33 = (v35 + 1);
                      if (v34 - 1 == v35)
                        break;
                      ++v35;
                      LODWORD(v30) = v33;
                      if ((*(_DWORD *)(*(_QWORD *)(v26 + 288) + 24 * v33 + 8) & 0x80000000) != 0)
                        goto LABEL_40;
                    }
                    LODWORD(v30) = v34;
LABEL_40:
                    ;
                  }
                  while ((_DWORD)v29 != (_DWORD)v30);
                  v26 = *(_QWORD *)v27;
                  LODWORD(v29) = *(_DWORD *)(*(_QWORD *)v27 + 304);
                }
                v36 = 0;
                if ((_DWORD)v29)
                {
                  v37 = (int *)(*(_QWORD *)(v26 + 288) + 8);
                  while (1)
                  {
                    v38 = *v37;
                    v37 += 6;
                    if (v38 < 0)
                      break;
                    if (v29 == ++v36)
                    {
                      LODWORD(v36) = v29;
                      break;
                    }
                  }
                }
                if ((_DWORD)v29 == (_DWORD)v36)
                {
                  v39 = 0;
                }
                else
                {
                  v40 = v36;
                  while (1)
                  {
                    v41 = *(_QWORD *)(*(_QWORD *)(v26 + 288) + 24 * v40 + 16);
                    re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()((uint64_t *)&v180, v41);
                    v42 = *(_QWORD *)(v41 + 208);
                    if (v42)
                    {
                      if (*(_QWORD *)(v42 + 32))
                        break;
                    }
                    if (*(_DWORD *)(v26 + 304) <= (v36 + 1))
                      v43 = v36 + 1;
                    else
                      v43 = *(_DWORD *)(v26 + 304);
                    while (1)
                    {
                      v40 = (v36 + 1);
                      if (v43 - 1 == (_DWORD)v36)
                        break;
                      LODWORD(v36) = v36 + 1;
                      v44 = v40;
                      if ((*(_DWORD *)(*(_QWORD *)(v26 + 288) + 24 * v40 + 8) & 0x80000000) != 0)
                        goto LABEL_59;
                    }
                    v44 = v43;
LABEL_59:
                    LODWORD(v36) = v44;
                    if ((_DWORD)v29 == v44)
                    {
                      v39 = 0;
                      goto LABEL_62;
                    }
                  }
                  v39 = 1;
LABEL_62:
                  v26 = *(_QWORD *)v27;
                  LODWORD(v29) = *(_DWORD *)(*(_QWORD *)v27 + 304);
                }
                v45 = *(_QWORD *)(v26 + 288);
                v46 = 0;
                if ((_DWORD)v29)
                {
                  v47 = (int *)(v45 + 8);
                  while (1)
                  {
                    v48 = *v47;
                    v47 += 6;
                    if (v48 < 0)
                      break;
                    if (v29 == ++v46)
                    {
                      LODWORD(v46) = v29;
                      break;
                    }
                  }
                }
                v49 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v45 + 24 * v46 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v49)
                  v50 = v39;
                else
                  v50 = 0;
                if (v50 == 1)
                {
                  v52 = *(_QWORD *)(v49 + 176);
                  v51 = v49 + 176;
                  v53 = v52 ? v51 : v51 - 144;
                  if (!*(_BYTE *)(v53 + 9))
                  {
                    v184[0].n128_u64[0] = (unint64_t)CFSTR("Portals z-fighting");
                    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("MeshSortingGroup %llu contains portals but does not use depth bias. Potential z-fighting."), *(_QWORD *)v53);
                    v184[0].n128_u64[1] = objc_claimAutoreleasedReturnValue();
                    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add((uint64_t)&v185, v184);

                  }
                }
              }
              if (*(_DWORD *)(v18 + 232) <= (v21 + 1))
                v54 = v21 + 1;
              else
                v54 = *(_DWORD *)(v18 + 232);
              while (1)
              {
                v24 = (v21 + 1);
                if (v54 - 1 == (_DWORD)v21)
                  break;
                LODWORD(v21) = v21 + 1;
                v55 = v24;
                if ((*(_DWORD *)(*(_QWORD *)(v18 + 216) + 24 * v24 + 8) & 0x80000000) != 0)
                  goto LABEL_84;
              }
              v55 = v54;
LABEL_84:
              LODWORD(v21) = v55;
            }
            while ((_DWORD)v20 != v55);
            v18 = *v165;
          }
          v56 = *(unsigned int *)(v18 + 280);
          a3 = v171;
          v57 = 0;
          if ((_DWORD)v56)
          {
            v58 = (int *)(*(_QWORD *)(v18 + 264) + 8);
            while (1)
            {
              v59 = *v58;
              v58 += 6;
              if (v59 < 0)
                break;
              if (v56 == ++v57)
              {
                LODWORD(v57) = *(_DWORD *)(v18 + 280);
                break;
              }
            }
          }
          if ((_DWORD)v56 != (_DWORD)v57)
          {
            v60 = v57;
            do
            {
              re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()((uint64_t *)&v180, *(_QWORD *)(*(_QWORD *)(v18 + 264) + 24 * v60 + 16));
              if (*(_DWORD *)(v18 + 280) <= (v57 + 1))
                v61 = v57 + 1;
              else
                v61 = *(_DWORD *)(v18 + 280);
              v62 = v57;
              while (1)
              {
                v60 = (v62 + 1);
                if (v61 - 1 == v62)
                  break;
                ++v62;
                LODWORD(v57) = v60;
                if ((*(_DWORD *)(*(_QWORD *)(v18 + 264) + 24 * v60 + 8) & 0x80000000) != 0)
                  goto LABEL_101;
              }
              LODWORD(v57) = v61;
LABEL_101:
              ;
            }
            while ((_DWORD)v56 != (_DWORD)v57);
          }
          v11 = v168;
          if (*(_DWORD *)(v168 + 32) <= (v12 + 1))
            v63 = v12 + 1;
          else
            v63 = *(_DWORD *)(v168 + 32);
          while (1)
          {
            v15 = (v12 + 1);
            if (v63 - 1 == (_DWORD)v12)
              break;
            LODWORD(v12) = v12 + 1;
            v64 = v15;
            if ((*(_DWORD *)(*(_QWORD *)(v168 + 16) + 24 * v15 + 8) & 0x80000000) != 0)
              goto LABEL_109;
          }
          v64 = v63;
LABEL_109:
          LODWORD(v12) = v64;
        }
        while ((_DWORD)v172 != v64);
        v9 = *((_DWORD *)v171 + 22);
      }
      v65 = v162;
      if (v9 <= v162 + 1)
        v66 = v162 + 1;
      else
        v66 = v9;
      while (1)
      {
        v8 = (v65 + 1);
        if (v66 - 1 == v65)
          break;
        ++v65;
        v67 = v8;
        if ((*(_DWORD *)(*((_QWORD *)a3 + 9) + 184 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_118;
      }
      v67 = v66;
LABEL_118:
      LODWORD(v5) = v67;
    }
    while ((_DWORD)v159 != v67);
  }
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 2, "");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 4, "");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if (v186)
  {
    -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@Warnings: \n"), v68);
    v70 = (v187 & 1) != 0 ? &v188 : v189;
    if (v186)
    {
      v71 = &v70[2 * v186];
      do
      {
        v72 = *v70;
        v73 = v70[1];
        v70 += 2;
        -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@⚠️ %@: %@\n"), v69, v72, v73);
      }
      while (v70 != v71);
    }
  }

  if (v185)
  {
    if (v186)
    {
      v74 = v189;
      if ((v187 & 1) != 0)
        v74 = &v188;
      v75 = 16 * v186;
      v76 = (id *)(v74 + 1);
      do
      {

        v76 += 2;
        v75 -= 16;
      }
      while (v75);
    }
    if ((v187 & 1) == 0)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v185 + 40))(v185, v189);
  }

  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@DirtyEntities count: %d\n"), v155, *((unsigned int *)a3 + 45));
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@InactiveEntities count: %d\n"), v155, *((unsigned int *)a3 + 57));
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@DirtyTransformEntities count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@HierarchicalDirtiedTransformEntities count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@DirtyAnchorEntities count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@DirtyInactiveEntities count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_dirtyInactiveEntities);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@Cached EntityWorldTransforms count: %d\n"), v155, *((unsigned int *)a3 + 119));
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@EntitiesRemovedFromSortGroups count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@EntitiesAddedToSortGroups count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@SortGroupsResorted count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_sortGroupsResorted);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@CodirGroupsWithDirtyEntities count: %d\n"), v155, re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@SortGroupsRecalculatedOverrides count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_sortGroupsRecalculatedOverrides);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@EntitiesRecalculatedOverrides count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@EntitiesRecalculatedOverridesMeshSortingComponentDirtied count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@HighestPriorityInGroup: %u\n"), v155, re::ecs2::CARESortingDebugging::m_highestPriorityInGroup);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@HighestPriorityGroupId: %llu\n"), v155, re::ecs2::CARESortingDebugging::m_highestPriorityGroupId);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@EntitiesActivated count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_entitiesActivated);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@EntitiesDeactivated count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_entitiesDeactivated);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@UISortingComponentActivated count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated);
  -[__CFString appendFormat:](obj, "appendFormat:", CFSTR("%@UISortingComponentDeactivated count: %d\n"), v155, re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated);
  v173 = obj;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 2, "");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 4, "");
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 6, "");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  if (qword_25410D190 != -1)
    dispatch_once(&qword_25410D190, &__block_literal_global_20);
  v79 = (id)qword_25410D188;
  if (objc_msgSend(v79, "count"))
  {
    v154 = v77;
    -[__CFString appendFormat:](v173, "appendFormat:", CFSTR("%@Graph:\n"), v77);
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v153 = v79;
    obja = v79;
    v166 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v180, &v185, 16);
    if (v166)
    {
      v163 = *(_QWORD *)v181;
      do
      {
        for (i = 0; i != v166; ++i)
        {
          if (*(_QWORD *)v181 != v163)
            objc_enumerationMutation(obja);
          v81 = *(void **)(*((_QWORD *)&v180 + 1) + 8 * i);
          objc_msgSend(v81, "objectForKey:", CFSTR("action"));
          v82 = objc_claimAutoreleasedReturnValue();
          v83 = (void *)v82;
          if (v82)
            -[__CFString appendFormat:](v173, "appendFormat:", CFSTR("%@%@:\n"), v160, v82);
          v169 = v83;
          v178 = 0u;
          v179 = 0u;
          v176 = 0u;
          v177 = 0u;
          v84 = v81;
          v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v176, v184, 16);
          if (v85)
          {
            v86 = v85;
            v87 = *(_QWORD *)v177;
            do
            {
              for (j = 0; j != v86; ++j)
              {
                if (*(_QWORD *)v177 != v87)
                  objc_enumerationMutation(v84);
                v89 = *(__CFString **)(*((_QWORD *)&v176 + 1) + 8 * j);
                if (v89 != CFSTR("action"))
                {
                  objc_msgSend(v84, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v176 + 1) + 8 * j));
                  v90 = (void *)objc_claimAutoreleasedReturnValue();
                  -[__CFString appendFormat:](v173, "appendFormat:", CFSTR("%@%@: %@\n"), v78, v89, v90);

                }
              }
              v86 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v176, v184, 16);
            }
            while (v86);
          }

        }
        v166 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v180, &v185, 16);
      }
      while (v166);
    }

    a3 = v171;
    v79 = v153;
    v77 = v154;
  }

  -[__CFString appendString:](v173, "appendString:", CFSTR("\n"));
  -[__CFString appendFormat:](v173, "appendFormat:", CFSTR("World states: %u\n"), *((unsigned int *)a3 + 21));
  objb = (id)*((unsigned int *)a3 + 22);
  v91 = 0;
  if ((_DWORD)objb)
  {
    v92 = (int *)(*((_QWORD *)a3 + 9) + 8);
    while (1)
    {
      v93 = *v92;
      v92 += 46;
      if (v93 < 0)
        break;
      if (objb == (id)++v91)
      {
        LODWORD(v91) = *((_DWORD *)a3 + 22);
        break;
      }
    }
  }
  if ((_DWORD)objb != (_DWORD)v91)
  {
    v94 = 0;
    v95 = v91;
    while (1)
    {
      v96 = *((_QWORD *)a3 + 9) + 184 * v95;
      v97 = v96 + 24;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 2, "");
      v98 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 4, "");
      v99 = objc_claimAutoreleasedReturnValue();
      -[__CFString appendFormat:](v173, "appendFormat:", CFSTR("%@[%u] World root id: %llu\n"), v98, v94, *(_QWORD *)(v96 + 16));
      v167 = (void *)v99;
      -[__CFString appendFormat:](v173, "appendFormat:", CFSTR("%@Codirectional Groups (aka CAMeshCodirectionalGroup): %u\n"), v99, *(unsigned int *)(v96 + 52));
      v100 = *(unsigned int *)(v96 + 56);
      v161 = (void *)v98;
      v164 = v94;
      v101 = 0;
      if ((_DWORD)v100)
      {
        v102 = (int *)(*(_QWORD *)(v97 + 16) + 8);
        v103 = v173;
        while (1)
        {
          v104 = *v102;
          v102 += 6;
          if (v104 < 0)
            break;
          if (v100 == ++v101)
          {
            LODWORD(v101) = v100;
            break;
          }
        }
      }
      else
      {
        v103 = v173;
      }
      if ((_DWORD)v100 != (_DWORD)v101)
      {
        v105 = 0;
        v106 = v101;
        do
        {
          v107 = *(_QWORD *)(*(_QWORD *)(v97 + 16) + 24 * v106 + 16);
          if (v107)
          {
            v108 = (id)(v107 + 8);
            v175 = v107;
            v109 = (id)(v107 + 8);
            re::ecs2::CARESortingDebugging::dumpCodirectionalGroup(v173, &v175, v105, (uint64_t)v171);

            v175 = 0;
            -[__CFString appendString:](v173, "appendString:", CFSTR("\n"));

          }
          else
          {
            v175 = 0;
            re::ecs2::CARESortingDebugging::dumpCodirectionalGroup(v173, &v175, v105, (uint64_t)v171);
            -[__CFString appendString:](v173, "appendString:", CFSTR("\n"));
          }
          v105 = (v105 + 1);
          if (*(_DWORD *)(v97 + 32) <= (v101 + 1))
            v110 = v101 + 1;
          else
            v110 = *(_DWORD *)(v97 + 32);
          v103 = v173;
          while (1)
          {
            v106 = (v101 + 1);
            if (v110 - 1 == (_DWORD)v101)
              break;
            LODWORD(v101) = v101 + 1;
            v111 = v106;
            if ((*(_DWORD *)(*(_QWORD *)(v97 + 16) + 24 * v106 + 8) & 0x80000000) != 0)
              goto LABEL_182;
          }
          v111 = v110;
LABEL_182:
          LODWORD(v101) = v111;
        }
        while ((_DWORD)v100 != v111);
      }
      -[__CFString appendFormat:](v103, "appendFormat:", CFSTR("%@CoplanarOverlapping Groups (aka CAMeshSortGroup):\n"), v167);
      v170 = *(unsigned int *)(v97 + 32);
      v112 = 0;
      if ((_DWORD)v170)
      {
        v113 = (int *)(*(_QWORD *)(v97 + 16) + 8);
        v114 = v173;
        while (1)
        {
          v115 = *v113;
          v113 += 6;
          if (v115 < 0)
            break;
          if (v170 == ++v112)
          {
            LODWORD(v112) = *(_DWORD *)(v97 + 32);
            break;
          }
        }
      }
      else
      {
        v114 = v173;
      }
      if ((_DWORD)v170 != (_DWORD)v112)
      {
        v116 = 0;
        v117 = v112;
        while (1)
        {
          v118 = *(_QWORD *)(*(_QWORD *)(v97 + 16) + 24 * v117 + 16);
          if (v118)
            v119 = (id)(v118 + 8);
          v120 = *(unsigned int *)(v118 + 232);
          if ((_DWORD)v120)
          {
            v121 = 0;
            v122 = (int *)(*(_QWORD *)(v118 + 216) + 8);
            while (1)
            {
              v123 = *v122;
              v122 += 6;
              if (v123 < 0)
                break;
              if (v120 == ++v121)
              {
                LODWORD(v121) = *(_DWORD *)(v118 + 232);
                break;
              }
            }
          }
          else
          {
            LODWORD(v121) = 0;
          }
          if ((_DWORD)v120 != (_DWORD)v121)
            break;
          if (v118)
            goto LABEL_214;
LABEL_215:
          if (*(_DWORD *)(v97 + 32) <= (v112 + 1))
            v130 = v112 + 1;
          else
            v130 = *(_DWORD *)(v97 + 32);
          v114 = v173;
          while (1)
          {
            v117 = (v112 + 1);
            if (v130 - 1 == (_DWORD)v112)
              break;
            LODWORD(v112) = v112 + 1;
            v131 = v117;
            if ((*(_DWORD *)(*(_QWORD *)(v97 + 16) + 24 * v117 + 8) & 0x80000000) != 0)
              goto LABEL_223;
          }
          v131 = v130;
LABEL_223:
          LODWORD(v112) = v131;
          if ((_DWORD)v170 == v131)
            goto LABEL_224;
        }
        v124 = v121;
        do
        {
          v125 = *(_QWORD *)(*(_QWORD *)(v118 + 216) + 24 * v124 + 16);
          v174 = v125;
          if (v125)
          {
            v126 = (void *)(v125 + 8);
            v127 = (id)(v125 + 8);
            re::ecs2::CARESortingDebugging::dumpSortingGroup(v173, &v174, v116, v171);

            v174 = 0;
          }
          else
          {
            re::ecs2::CARESortingDebugging::dumpSortingGroup(v173, &v174, v116, v171);
          }
          -[__CFString appendString:](v173, "appendString:", CFSTR("\n"));
          v116 = (v116 + 1);
          if (*(_DWORD *)(v118 + 232) <= (v121 + 1))
            v128 = v121 + 1;
          else
            v128 = *(_DWORD *)(v118 + 232);
          while (1)
          {
            v124 = (v121 + 1);
            if (v128 - 1 == (_DWORD)v121)
              break;
            LODWORD(v121) = v121 + 1;
            v129 = v124;
            if ((*(_DWORD *)(*(_QWORD *)(v118 + 216) + 24 * v124 + 8) & 0x80000000) != 0)
              goto LABEL_213;
          }
          v129 = v128;
LABEL_213:
          LODWORD(v121) = v129;
        }
        while ((_DWORD)v120 != v129);
LABEL_214:

        goto LABEL_215;
      }
LABEL_224:
      -[__CFString appendFormat:](v114, "appendFormat:", CFSTR("%@Not in CoplanaOverlapping (aka unsortedPlanarEntities):\n"), v167);
      v133 = *(unsigned int *)(v97 + 32);
      if ((_DWORD)v133)
      {
        v134 = 0;
        v135 = (int *)(*(_QWORD *)(v97 + 16) + 8);
        v136 = v173;
        while (1)
        {
          v137 = *v135;
          v135 += 6;
          if (v137 < 0)
            break;
          if (v133 == ++v134)
          {
            LODWORD(v134) = *(_DWORD *)(v97 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v134) = 0;
        v136 = v173;
      }
      if ((_DWORD)v133 != (_DWORD)v134)
        break;
LABEL_263:
      v94 = (v164 + 1);
      -[__CFString appendString:](v136, "appendString:", CFSTR("\n"));

      a3 = v171;
      if (*((_DWORD *)v171 + 22) <= (v91 + 1))
        v151 = v91 + 1;
      else
        v151 = *((_DWORD *)v171 + 22);
      while (1)
      {
        v95 = (v91 + 1);
        if (v151 - 1 == (_DWORD)v91)
          break;
        LODWORD(v91) = v91 + 1;
        v152 = v95;
        if ((*(_DWORD *)(*((_QWORD *)v171 + 9) + 184 * v95 + 8) & 0x80000000) != 0)
          goto LABEL_270;
      }
      v152 = v151;
LABEL_270:
      LODWORD(v91) = v152;
      if ((_DWORD)objb == v152)
        goto LABEL_271;
    }
    v138 = 0;
    v139 = v134;
    while (1)
    {
      v140 = *(_QWORD *)(*(_QWORD *)(v97 + 16) + 24 * v139 + 16);
      if (v140)
        v141 = (id)(v140 + 8);
      v142 = *(unsigned int *)(v140 + 280);
      if ((_DWORD)v142)
      {
        v143 = 0;
        v144 = (int *)(*(_QWORD *)(v140 + 264) + 8);
        while (1)
        {
          v145 = *v144;
          v144 += 6;
          if (v145 < 0)
            break;
          if (v142 == ++v143)
          {
            LODWORD(v143) = *(_DWORD *)(v140 + 280);
            break;
          }
        }
      }
      else
      {
        LODWORD(v143) = 0;
      }
      if ((_DWORD)v142 != (_DWORD)v143)
        break;
      if (v140)
        goto LABEL_253;
LABEL_254:
      if (*(_DWORD *)(v97 + 32) <= (v134 + 1))
        v149 = v134 + 1;
      else
        v149 = *(_DWORD *)(v97 + 32);
      v136 = v173;
      while (1)
      {
        v139 = (v134 + 1);
        if (v149 - 1 == (_DWORD)v134)
          break;
        LODWORD(v134) = v134 + 1;
        v150 = v139;
        if ((*(_DWORD *)(*(_QWORD *)(v97 + 16) + 24 * v139 + 8) & 0x80000000) != 0)
          goto LABEL_262;
      }
      v150 = v149;
LABEL_262:
      LODWORD(v134) = v150;
      if ((_DWORD)v133 == v150)
        goto LABEL_263;
    }
    v146 = v143;
    do
    {
      re::ecs2::CARESortingDebugging::dumpEntity((re::ecs2::CARESortingDebugging *)v173, *(NSMutableString **)(*(_QWORD *)(v140 + 264) + 24 * v146 + 16), (const re::ecs2::Entity *)3, v138, (uint64_t)v171, v132);
      -[__CFString appendString:](v173, "appendString:", CFSTR("\n"));
      v138 = (v138 + 1);
      if (*(_DWORD *)(v140 + 280) <= (v143 + 1))
        v147 = v143 + 1;
      else
        v147 = *(_DWORD *)(v140 + 280);
      v148 = v143;
      while (1)
      {
        v146 = (v148 + 1);
        if (v147 - 1 == v148)
          break;
        ++v148;
        LODWORD(v143) = v146;
        if ((*(_DWORD *)(*(_QWORD *)(v140 + 264) + 24 * v146 + 8) & 0x80000000) != 0)
          goto LABEL_252;
      }
      LODWORD(v143) = v147;
LABEL_252:
      ;
    }
    while ((_DWORD)v142 != (_DWORD)v143);
LABEL_253:

    goto LABEL_254;
  }
LABEL_271:

}

id `anonymous namespace'::getIndentString(_anonymous_namespace_ *this)
{
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), (2 * (_DWORD)this), "");
  return (id)objc_claimAutoreleasedReturnValue();
}

void re::ecs2::CARESortingDebugging::dumpCodirectionalGroup(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  const re::ecs2::CARESortingManager *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  id v19;

  v19 = a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 6, "");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 8, "");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "appendFormat:", CFSTR("%@[%u] CAMeshCodirectionalGroup ID: %llu\n"), v7, a3, *(_QWORD *)(*a2 + 16));
  objc_msgSend(v19, "appendFormat:", CFSTR("%@averagePosition: (%f, %f, %f)\n"), v8, *(float *)(*a2 + 128), *(float *)(*a2 + 132), *(float *)(*a2 + 136));
  objc_msgSend(v19, "appendFormat:", CFSTR("%@averageNormal: (%f, %f, %f)\n"), v8, *(float *)(*a2 + 112), *(float *)(*a2 + 116), *(float *)(*a2 + 120));
  objc_msgSend(v19, "appendFormat:", CFSTR("%@initialPosition: (%f, %f, %f)\n"), v8, *(float *)(*a2 + 96), *(float *)(*a2 + 100), *(float *)(*a2 + 104));
  objc_msgSend(v19, "appendFormat:", CFSTR("%@initialNormal: (%f, %f, %f)\n"), v8, *(float *)(*a2 + 80), *(float *)(*a2 + 84), *(float *)(*a2 + 88));
  objc_msgSend(v19, "appendFormat:", CFSTR("%@entities count: %d\n"), v8, *(unsigned int *)(*a2 + 52));
  v10 = *a2;
  v11 = *(unsigned int *)(*a2 + 56);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (int *)(*(_QWORD *)(v10 + 40) + 8);
    while (1)
    {
      v14 = *v13;
      v13 += 6;
      if (v14 < 0)
        break;
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(*a2 + 56);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if ((_DWORD)v11 != (_DWORD)v12)
  {
    v15 = 0;
    v16 = v12;
    do
    {
      re::ecs2::CARESortingDebugging::dumpEntity((re::ecs2::CARESortingDebugging *)v19, *(NSMutableString **)(*(_QWORD *)(v10 + 40) + 24 * v16 + 16), (const re::ecs2::Entity *)5, v15, a4, v9);
      v15 = (v15 + 1);
      if (*(_DWORD *)(v10 + 56) <= (v12 + 1))
        v17 = v12 + 1;
      else
        v17 = *(_DWORD *)(v10 + 56);
      v18 = v12;
      while (1)
      {
        v16 = (v18 + 1);
        if (v17 - 1 == v18)
          break;
        ++v18;
        LODWORD(v12) = v16;
        if ((*(_DWORD *)(*(_QWORD *)(v10 + 40) + 24 * v16 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v12) = v17;
LABEL_17:
      ;
    }
    while ((_DWORD)v11 != (_DWORD)v12);
  }

}

void re::ecs2::CARESortingDebugging::dumpSortingGroup(void *a1, uint64_t *a2, uint64_t a3, re::ecs2::CARESortingManager *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  double v20;
  float32x4_t *v21;
  const __CFString *v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  void *v44;
  float32x4_t *v45;
  float32x4_t v46;
  const re::ecs2::CARESortingManager *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t *v59;
  const __CFString *v60;
  uint64_t v61;
  float32x4_t v62;
  void *v63;
  void *v64;
  float32x4_t *v65;
  uint64_t v66;
  __n128 v67;
  char v68;
  float32x4_t v69;
  char v70;
  char v71;

  v7 = a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 6, "");
  v8 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%*s"), 8, "");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v67.n128_u64[0] = 0;
  v67.n128_u16[4] = 0;
  v68 = 0;
  v70 = 0;
  v71 = 0;
  v10 = *(unsigned int *)(*a2 + 304);
  v11 = *(_QWORD *)(*a2 + 288);
  v12 = 0;
  if ((_DWORD)v10)
  {
    v13 = (int *)(v11 + 8);
    while (1)
    {
      v14 = *v13;
      v13 += 6;
      if (v14 < 0)
        break;
      if (v10 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(*a2 + 304);
        break;
      }
    }
  }
  v15 = *(_QWORD *)(v11 + 24 * v12 + 16);
  v64 = (void *)v8;
  if (!v15)
  {
    v63 = 0;
    v21 = 0;
    v22 = CFSTR("false");
    v23 = CFSTR("undefined");
    goto LABEL_53;
  }
  v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 176);
    v17 = (__n128 *)(v16 + 176);
    if (v18)
      v19 = v17;
    else
      v19 = v17 - 9;
    *(_QWORD *)&v20 = re::ecs2::MeshSortGroupToken::operator=(&v67, v19).n128_u64[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%llu"), v20, v67.n128_u64[0]);
    v60 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v67.n128_u64[0]);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    re::ecs2::CARESortingManager::tryGetCodirectionalGroupForEntity(a4, (const re::ecs2::Entity *)v15, (uint64_t *)&v65);
    v21 = v65;
  }
  else
  {
    v21 = 0;
    v63 = 0;
    v60 = CFSTR("undefined");
  }
  v24 = v15;
  do
  {
    v25 = v24;
    v24 = *(_QWORD *)(v24 + 24);
  }
  while (v24);
  if (!*(_QWORD *)(v25 + 16))
  {
    v22 = CFSTR("false");
LABEL_32:
    v23 = (__CFString *)v60;
    goto LABEL_53;
  }
  v26 = v15;
  do
  {
    v27 = v26;
    v26 = *(_QWORD *)(v26 + 24);
  }
  while (v26);
  v22 = CFSTR("false");
  if (!*(_QWORD *)(*(_QWORD *)(v27 + 16) + 56))
    goto LABEL_32;
  v28 = v15;
  do
  {
    v29 = v28;
    v28 = *(_QWORD *)(v28 + 24);
  }
  while (v28);
  v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v29 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v29 + 16) + 56));
  v31 = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v30);
  v58 = a3;
  v59 = v21;
  if (!v31)
    goto LABEL_35;
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  (*(void (**)(float32x4_t **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 8))(&v65, v32, v15);
  v33 = (_BYTE)v65 ? v66 : 0;
  v61 = v33;
  v34 = *a2;
  v35 = *(unsigned int *)(*a2 + 304);
  if ((_DWORD)v35)
  {
    v36 = 0;
    v37 = (int *)(*(_QWORD *)(v34 + 288) + 8);
    while (1)
    {
      v38 = *v37;
      v37 += 6;
      if (v38 < 0)
        break;
      if (v35 == ++v36)
      {
        LODWORD(v36) = *(_DWORD *)(*a2 + 304);
        break;
      }
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if ((_DWORD)v35 != (_DWORD)v36)
  {
    v39 = 0;
    v40 = v36;
    while (1)
    {
      (*(void (**)(float32x4_t **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v32 + 8))(&v65, v32, *(_QWORD *)(*(_QWORD *)(v34 + 288) + 24 * v40 + 16));
      v41 = (_BYTE)v65 ? v66 : 0;
      if (v41 != v61)
        break;
      if (*(_DWORD *)(v34 + 304) <= (v36 + 1))
        v42 = v36 + 1;
      else
        v42 = *(_DWORD *)(v34 + 304);
      while (1)
      {
        v40 = (v36 + 1);
        if (v42 - 1 == (_DWORD)v36)
          break;
        LODWORD(v36) = v36 + 1;
        v43 = v40;
        if ((*(_DWORD *)(*(_QWORD *)(v34 + 288) + 24 * v40 + 8) & 0x80000000) != 0)
          goto LABEL_49;
      }
      v43 = v42;
LABEL_49:
      LODWORD(v36) = v43;
      if ((_DWORD)v35 == v43)
        goto LABEL_50;
    }
    v39 = 1;
  }
  else
  {
LABEL_35:
    v39 = 0;
  }
LABEL_50:
  v22 = CFSTR("false");
  if ((v39 & 1) != 0)
    v22 = CFSTR("true");
  v8 = (uint64_t)v64;
  v21 = v59;
  v23 = (__CFString *)v60;
  a3 = v58;
LABEL_53:
  objc_msgSend(v7, "appendFormat:", CFSTR("%@[%u] CAMeshSortGroup ID: %@\n"), v8, a3, v23);
  objc_msgSend(v7, "appendFormat:", CFSTR("%@containsMixedWorlds: %@\n"), v9, v22);
  objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupPosition: (%f, %f, %f)\n"), v9, *(float *)(*a2 + 32), *(float *)(*a2 + 36), *(float *)(*a2 + 40));
  objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupNormal: (%f, %f, %f)\n"), v9, *(float *)(*a2 + 16), *(float *)(*a2 + 20), *(float *)(*a2 + 24));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupSortingConfiguration: %@\n"), v9, v44);

  if (v67.n128_u8[8] == 5 && v68)
  {
    v62 = v69;
    objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupSortPointOverride: (%f, %f, %f)\n"), v9, v69.f32[0], v69.f32[1], v69.f32[2]);
    if (v21)
    {
      v45 = v21;
      v46 = vmulq_f32(vsubq_f32(v62, v21[8]), v21[7]);
      objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupSortPointOverrideDisplacement: %f\n"), v9, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
    }
    else
    {
      objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupSortPointOverrideDisplacement: None\n"), v9);
      v45 = 0;
    }
  }
  else
  {
    v45 = v21;
    objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupSortPointOverride: None\n"), v9);
    objc_msgSend(v7, "appendFormat:", CFSTR("%@sortGroupSortPointOverrideDisplacement: None\n"), v9, v57);
  }
  objc_msgSend(v7, "appendFormat:", CFSTR("%@entities count: %d\n"), v9, *(unsigned int *)(*a2 + 300));
  v48 = *a2;
  v49 = *(unsigned int *)(*a2 + 304);
  if ((_DWORD)v49)
  {
    v50 = 0;
    v51 = (int *)(*(_QWORD *)(v48 + 288) + 8);
    while (1)
    {
      v52 = *v51;
      v51 += 6;
      if (v52 < 0)
        break;
      if (v49 == ++v50)
      {
        LODWORD(v50) = *(_DWORD *)(*a2 + 304);
        break;
      }
    }
  }
  else
  {
    LODWORD(v50) = 0;
  }
  if ((_DWORD)v49 != (_DWORD)v50)
  {
    v53 = 0;
    v54 = v50;
    do
    {
      re::ecs2::CARESortingDebugging::dumpEntity((re::ecs2::CARESortingDebugging *)v7, *(NSMutableString **)(*(_QWORD *)(v48 + 288) + 24 * v54 + 16), (const re::ecs2::Entity *)5, v53, (uint64_t)a4, v47);
      v53 = (v53 + 1);
      if (*(_DWORD *)(v48 + 304) <= (v50 + 1))
        v55 = v50 + 1;
      else
        v55 = *(_DWORD *)(v48 + 304);
      v56 = v50;
      while (1)
      {
        v54 = (v56 + 1);
        if (v55 - 1 == v56)
          break;
        ++v56;
        LODWORD(v50) = v54;
        if ((*(_DWORD *)(*(_QWORD *)(v48 + 288) + 24 * v54 + 8) & 0x80000000) != 0)
          goto LABEL_74;
      }
      LODWORD(v50) = v55;
LABEL_74:
      ;
    }
    while ((_DWORD)v49 != (_DWORD)v50);
  }
  if (v45)

}

void re::ecs2::CARESortingDebugging::dumpEntity(re::ecs2::CARESortingDebugging *this, NSMutableString *a2, const re::ecs2::Entity *a3, uint64_t a4, uint64_t a5, const re::ecs2::CARESortingManager *a6)
{
  re::ecs2::CARESortingDebugging *v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  int v14;
  _BYTE *super;
  NSMutableString *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _BYTE *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  re::ecs2::TransformComponent *v33;
  _anonymous_namespace_ *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  re::ecs2::TransformComponent *v38;
  re::ecs2::TransformComponent *v39;
  re::ecs2::TransformComponent *v40;
  re::ecs2::TransformComponent *v41;
  re::ecs2::TransformComponent *v42;
  re::ecs2::TransformComponent *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  re::ecs2::CARESortingDebugging *v52;
  uint64_t v53;
  void *v54;
  float32x4_t v55;
  float32x4_t v56;
  uint32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  int32x2_t v61;
  uint64_t v62;
  float *v63;
  uint32x4_t v64;
  float v65;
  float32x4_t v66;
  uint32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  double v73;
  uint64_t v74;
  unsigned __int8 v75;
  void *v76;
  void *v77;
  void *v78;
  const __CFString *v79;
  const __CFString *v80;
  float32x4_t *v81;
  re::ecs2::CARESortingDebugging *v82;
  uint64_t v83;
  void *v84;
  _anonymous_namespace_ *v85;
  void *v86;
  float32x4_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  float32x4_t *v92;
  float32x4_t v93;
  void *v94;
  const __CFString *v95;
  unsigned int v96;
  float32x4_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  re::ecs2::CARESortingDebugging *v101;
  void *v102;
  void *v103;
  float32x4_t *v104;
  void *v105;
  uint32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  float32x4_t v124;
  int v125;
  void *v126;
  int v127;
  float32x4_t v128;
  void *v129;
  re::ecs2::TransformComponent *v130;
  void *v131;
  uint64_t v132;
  float32x4_t v133;
  unsigned int v134;
  void *v135;
  float32x4_t *v136;
  float v137[16];
  float32x4_t v138;
  float32x4_t v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v10 = this;
  v11 = objc_claimAutoreleasedReturnValue();
  v127 = (int)a3;
  v12 = objc_claimAutoreleasedReturnValue();
  v129 = (void *)v11;
  -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@[%u] Entity ID: %llu\n"), v11, a4, a2[37].super);
  -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@name: %s\n"), v12, a2[35].super);
  v131 = (void *)v12;
  *(_QWORD *)&v146 = 0;
  *((_QWORD *)&v144 + 1) = 0;
  *(_QWORD *)&v145 = 0;
  DWORD2(v145) = 0;
  v13 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v144, 0x40uLL);
  v14 = ++DWORD2(v145);
  super = a2[3].super;
  if (super)
  {
    v16 = a2;
    do
    {
      if ((super[288] & 0x80) != 0)
        break;
      v17 = v145;
      if ((unint64_t)v145 >= *((_QWORD *)&v144 + 1))
      {
        v18 = v145 + 1;
        if (*((_QWORD *)&v144 + 1) < (unint64_t)(v145 + 1))
        {
          if ((_QWORD)v144)
          {
            v19 = 2 * *((_QWORD *)&v144 + 1);
            if (!*((_QWORD *)&v144 + 1))
              v19 = 8;
            if (v19 <= v18)
              v20 = v145 + 1;
            else
              v20 = v19;
            v13 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v144, v20);
            v14 = DWORD2(v145);
          }
          else
          {
            v13 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v144, v18);
            v14 = DWORD2(v145) + 1;
          }
        }
        v17 = v145;
      }
      *(_QWORD *)(v146 + 8 * v17) = v16;
      *(_QWORD *)&v145 = v17 + 1;
      DWORD2(v145) = ++v14;
      v21 = v16[3].super;
      if (v21)
        v16 = (v21[288] & 0x80) != 0 ? 0 : (NSMutableString *)v16[3].super;
      else
        v16 = 0;
      super = v16[3].super;
    }
    while (super);
  }
  v132 = a5;
  v130 = (re::ecs2::TransformComponent *)a2;
  objc_msgSend(MEMORY[0x24BDD16A8], "stringWithCapacity:", 256);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "appendString:", CFSTR("/"));
  if ((_QWORD)v145)
  {
    v23 = 8 * v145;
    v24 = v146 - 8;
    do
    {
      v25 = *(_QWORD **)(v24 + v23);
      v26 = v25[34];
      if (v26 >= 0xFFFFFFFFFFFFFFFELL && (v25[34] & 1) == 0)
      {
        v28 = (_BYTE *)v25[35];
      }
      else
      {
        v28 = (_BYTE *)v25[35];
        if (v26 > 1 || !v28)
          goto LABEL_32;
      }
      if (!*v28)
      {
        objc_msgSend(v22, "appendFormat:", CFSTR("%llu/"), v25[37]);
        goto LABEL_34;
      }
LABEL_32:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v28, 4);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "stringByReplacingOccurrencesOfString:withString:", CFSTR("/"), &stru_24EDA2070);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "appendFormat:", CFSTR("%@/"), v30);

LABEL_34:
      v23 -= 8;
    }
    while (v23);
  }
  objc_msgSend(v22, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\\n"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if ((_QWORD)v144 && (_QWORD)v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
  v32 = v131;
  -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@path: %@\n"), v131, v31);

  -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@worldMatrix:\n"), v131);
  v33 = v130;
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v130, (const re::ecs2::Entity *)1, v137);
  v34 = (_anonymous_namespace_ *)(v127 + 2);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[re::ecs2::CARESortingDebugging appendString:](v10, "appendString:", v35);

  if (!*(_QWORD *)(v132 + 448))
    goto LABEL_40;
  v36 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)v130 ^ ((unint64_t)v130 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)v130 ^ ((unint64_t)v130 >> 30))) >> 27));
  v37 = *(unsigned int *)(*(_QWORD *)(v132 + 456) + 4 * ((v36 ^ (v36 >> 31)) % *(unsigned int *)(v132 + 472)));
  if ((_DWORD)v37 == 0x7FFFFFFF)
    goto LABEL_40;
  v62 = *(_QWORD *)(v132 + 464);
  if (*(re::ecs2::TransformComponent **)(v62 + 160 * v37 + 16) != v130)
  {
    while (1)
    {
      LODWORD(v37) = *(_DWORD *)(v62 + 160 * v37 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v37 == 0x7FFFFFFF)
        break;
      if (*(re::ecs2::TransformComponent **)(v62 + 160 * v37 + 16) == v130)
        goto LABEL_69;
    }
LABEL_40:
    -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@cached worldMatrix: none\n"), v131);
    goto LABEL_41;
  }
LABEL_69:
  v63 = (float *)(v62 + 160 * v37 + 32);
  if (re::areAlmostEqual<float>(v137, v63))
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@cached worldMatrix: up to date\n"), v131);
  }
  else
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@cached worldMatrix: outdated\n"), v131);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    -[re::ecs2::CARESortingDebugging appendString:](v10, "appendString:", v98);

  }
LABEL_41:
  v38 = v130;
  do
  {
    v39 = v38;
    v38 = (re::ecs2::TransformComponent *)*((_QWORD *)v38 + 3);
  }
  while (v38);
  if (*((_QWORD *)v39 + 2))
  {
    v40 = v130;
    do
    {
      v41 = v40;
      v40 = (re::ecs2::TransformComponent *)*((_QWORD *)v40 + 3);
    }
    while (v40);
    if (*(_QWORD *)(*((_QWORD *)v41 + 2) + 56))
    {
      v42 = v130;
      do
      {
        v43 = v42;
        v42 = (re::ecs2::TransformComponent *)*((_QWORD *)v42 + 3);
      }
      while (v42);
      v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v43 + 2) + 56) + 32))(*(_QWORD *)(*((_QWORD *)v43 + 2) + 56));
      v45 = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v44);
      if (v45)
      {
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
        (*(void (**)(__int128 *__return_ptr, uint64_t, re::ecs2::TransformComponent *))(*(_QWORD *)v46 + 8))(&v144, v46, v130);
        if ((_BYTE)v144)
          v47 = *((_QWORD *)&v144 + 1);
        else
          v47 = 0;
        -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@worldRootId: %llu\n"), v131, v47);
      }
    }
  }
  v48 = *((_QWORD *)v130 + 26);
  if (v48)
  {
    if (*(_QWORD *)(v48 + 32))
      v49 = CFSTR("true");
    else
      v49 = CFSTR("false");
  }
  else
  {
    v49 = CFSTR("false");
  }
  -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@isPortal: %@\n"), v131, v49);
  re::ecs2::CARESortingManager::tryGetCodirectionalGroupForEntity((re::ecs2::CARESortingManager *)v132, v130, (uint64_t *)&v136);
  v50 = v136;
  if (v136)
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@CAMeshCodirectionalGroupId: %llu\n"), v131, v136[1].i64[0]);
    -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@averageNormal: (%f, %f, %f)\n"), v131, v50[7].f32[0], v50[7].f32[1], v50[7].f32[2]);
    -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@averagePosition: (%f, %f, %f)\n"), v131, v50[8].f32[0], v50[8].f32[1], v50[8].f32[2]);
  }
  else
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@CodirectionalGroup: none\n"), v131, v110, v114, v116);
  }
  -[re::ecs2::CARESortingDebugging appendFormat:](v10, "appendFormat:", CFSTR("%@UISortingComponent:\n"), v131);
  v51 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::TransformComponent *)((char *)v130 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v52 = v10;
  v53 = objc_claimAutoreleasedReturnValue();
  v54 = (void *)v53;
  if (v51)
  {
    v55 = v51[3];
    v56 = v51[4];
    v57 = (uint32x4_t)vcgtq_f32(v55, v56);
    v57.i32[3] = v57.i32[2];
    if ((vmaxvq_u32(v57) & 0x80000000) != 0)
    {
      v60 = v51[2].f32[2];
      v61.i32[0] = v51[2].i32[1];
      v61.i32[1] = v51[2].i32[0];
    }
    else
    {
      v58 = vsubq_f32(v56, v55);
      v58.i32[3] = 0;
      v59 = vmaxnmq_f32(v58, (float32x4_t)0);
      v60 = v59.f32[2];
      v61 = vrev64_s32(*(int32x2_t *)v59.f32);
    }
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@extends: (%f, %f, %f)\n"), v53, *(float *)&v61.i32[1], *(float *)v61.i32, v60);
    v64 = (uint32x4_t)vcgtq_f32(v51[3], v51[4]);
    v64.i32[3] = v64.i32[2];
    if ((vmaxvq_u32(v64) & 0x80000000) != 0)
      v65 = v51[2].f32[2] * 0.5;
    else
      LODWORD(v65) = v51[4].i64[1];
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@halfZExtent: %f\n"), v54, v65);
    v66 = v51[3];
    v133 = v51[4];
    v67 = (uint32x4_t)vcgtq_f32(v66, v133);
    v67.i32[3] = v67.i32[2];
    if ((vmaxvq_u32(v67) & 0x80000000) != 0)
    {
      v68 = v51[2];
      v69.i64[0] = 0xBF000000BF000000;
      v69.i64[1] = 0xBF000000BF000000;
      v66 = vmulq_f32(v68, v69);
      v69.i64[0] = 0x3F0000003F000000;
      v69.i64[1] = 0x3F0000003F000000;
      v133 = vmulq_f32(v68, v69);
    }
    v124 = v66;
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@AABB min: (%f, %f, %f)\n"), v54, v66.f32[0], v66.f32[1], v66.f32[2]);
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@AABB max: (%f, %f, %f)\n"), v54, v133.f32[0], v133.f32[1], v133.f32[2]);
    v70 = (uint32x4_t)vcgtq_f32(v124, v133);
    v70.i32[3] = v70.i32[2];
    if ((vmaxvq_u32(v70) & 0x80000000) != 0)
    {
      v72 = 0uLL;
      v73 = 0.0;
    }
    else
    {
      v71 = vaddq_f32(v133, v124);
      v72 = (int8x16_t)vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v71.f32), (float32x2_t)0x3F0000003F000000));
      v73 = vmuls_lane_f32(0.5, v71, 2);
    }
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@AABB center: (%f, %f, %f)\n"), v54, vextq_s8(v72, v72, 8uLL), *(_QWORD *)&v73);
    v74 = v51[5].u32[0];
    v75 = atomic_load((unsigned __int8 *)&qword_25410D180);
    if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_25410D180))
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 4294967293);
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      v138.i64[0] = (uint64_t)v135;
      *(_QWORD *)&v144 = CFSTR("kSortCategoryMin");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 4294967294);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v138.i64[1] = (uint64_t)v126;
      *((_QWORD *)&v144 + 1) = CFSTR("kBackDecoration");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 0xFFFFFFFFLL);
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      v139.i64[0] = (uint64_t)v123;
      *(_QWORD *)&v145 = CFSTR("kBehindUIContent");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 0);
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      v139.i64[1] = (uint64_t)v122;
      *((_QWORD *)&v145 + 1) = CFSTR("kUIContent");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 1);
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      v140 = v121;
      *(_QWORD *)&v146 = CFSTR("kAboveUIContent");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 2);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      v141 = v120;
      *((_QWORD *)&v146 + 1) = CFSTR("kFrontDecoration");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 3);
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      v142 = v119;
      *(_QWORD *)&v147 = CFSTR("kServerCARE");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), 4);
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      v143 = v118;
      *((_QWORD *)&v147 + 1) = CFSTR("kSortCategoryMax");
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v144, &v138, 8);
      qword_25410D178 = objc_claimAutoreleasedReturnValue();

      __cxa_guard_release(&qword_25410D180);
    }
    v76 = (void *)qword_25410D178;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u"), v74);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "valueForKey:", v77);
    v78 = (void *)objc_claimAutoreleasedReturnValue();

    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@sortCategory: %@\n"), v54, v78);
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@sortPriorityHint: %d\n"), v54, v51[5].u32[1]);
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@caSortOrder: %d\n"), v54, v51[5].u32[2]);
    if (v51[5].i8[12])
      v79 = CFSTR("true");
    else
      v79 = CFSTR("false");
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@isCaLayer: %@\n"), v54, v79);
    if (v51[5].i8[13])
      v80 = CFSTR("true");
    else
      v80 = CFSTR("false");
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@doesCaLayerNeedMesh: %@\n"), v54, v80);
    v34 = (_anonymous_namespace_ *)(v127 + 2);
  }
  else
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@None\n"), v53);
  }

  -[re::ecs2::CARESortingDebugging appendFormat:](v52, "appendFormat:", CFSTR("%@MeshSortingComponent:\n"), v131);
  v81 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::TransformComponent *)((char *)v130 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v82 = v52;
  v134 = v34;
  v83 = objc_claimAutoreleasedReturnValue();
  v84 = (void *)v83;
  if (v81)
  {
    v85 = (_anonymous_namespace_ *)(v127 + 3);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = v81 + 11;
    v88 = 11;
    if (!v81[11].i64[0])
    {
      v88 = 2;
      v87 = v81 + 2;
    }
    v89 = v81[v88].i64[0];
    v90 = v87->u8[8];
    v91 = v87->u8[9];
    v125 = v87[1].u8[0];
    v128 = v87[2];
    -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@groupId: %llu\n"), v84, v89);
    -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@priorityInGroup: %d\n"), v84, v81[10].u32[0]);
    -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@depthPriorityInGroup: %d\n"), v84, v81[10].u32[1]);
    -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@sortPointOverride: (%f, %f, %f)\n"), v84, v81[19].f32[0], v81[19].f32[1], v81[19].f32[2]);
    v92 = v136;
    if (v136)
    {
      v93 = vmulq_f32(vsubq_f32(v81[19], v136[8]), v136[7]);
      -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@sortPointOverrideDisplacement: %f\n"), v84, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1))).f32[0]);
    }
    else
    {
      -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@sortPointOverrideDisplacement: None\n"), v84, v112);
    }
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@sortConfiguration: %@\n"), v84, v94);

    v95 = CFSTR("false");
    if (v91)
      v95 = CFSTR("true");
    -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@useDepthBias: %@\n"), v84, v95);
    if (v89)
    {
      -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@sortGroupData:\n"), v84);
      if (v90 == 5 && v125)
      {
        v96 = 5;
        -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@perMeshGroupSortPointOverride: (%f, %f, %f)\n"), v86, v128.f32[0], v128.f32[1], v128.f32[2]);
        if (v92)
        {
          v97 = vmulq_f32(vsubq_f32(v128, v92[8]), v92[7]);
          -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@perMeshGroupSortPointOverrideDisplacement: %f\n"), v86, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2), vaddq_f32(v97, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1))).f32[0]);
        }
        else
        {
          -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@perMeshGroupSortPointOverrideDisplacement: None\n"), v86, v113);
        }
      }
      else
      {
        v96 = v90;
        -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@perMeshGroupSortPointOverride: None\n"), v86, v111);
      }
      v33 = v130;
      v32 = v131;
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@perMeshSortGroupConfiguration: %@\n"), v86, v99);

    }
    else
    {
      -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@sortGroupData: not-in-mesh-sort-group\n"), v84);
      v33 = v130;
      v32 = v131;
    }

  }
  else
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@None\n"), v83);
    v85 = (_anonymous_namespace_ *)(v127 + 3);
  }

  -[re::ecs2::CARESortingDebugging appendFormat:](v82, "appendFormat:", CFSTR("%@MeshComponent:\n"), v32);
  v100 = *((_QWORD *)v33 + 22);
  v101 = v82;
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  if (v100)
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v101, "appendFormat:", CFSTR("%@MeshAsset:\n"), v102);
    v104 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v100 + 32));
    v105 = v129;
    if (v104)
    {
      v144 = xmmword_2260E5F10;
      v145 = xmmword_2260E5F20;
      v146 = xmmword_2260E5F40;
      v147 = xmmword_2260E5D70;
      re::MeshAsset::aabbFromMesh(v104, (float32x4_t *)&v144, (uint64_t)&v138);
      -[re::ecs2::CARESortingDebugging appendFormat:](v101, "appendFormat:", CFSTR("%@AABB min: (%f, %f, %f)\n"), v103, v138.f32[0], v138.f32[1], v138.f32[2]);
      -[re::ecs2::CARESortingDebugging appendFormat:](v101, "appendFormat:", CFSTR("%@AABB max: (%f, %f, %f)\n"), v103, v139.f32[0], v139.f32[1], v139.f32[2]);
      v106 = (uint32x4_t)vcgtq_f32(v138, v139);
      v106.i32[3] = v106.i32[2];
      if ((vmaxvq_u32(v106) & 0x80000000) != 0)
      {
        v108 = 0uLL;
        v109 = 0.0;
      }
      else
      {
        v107 = vaddq_f32(v138, v139);
        v108 = (int8x16_t)vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v107.f32), (float32x2_t)0x3F0000003F000000));
        v109 = vmuls_lane_f32(0.5, v107, 2);
      }
      -[re::ecs2::CARESortingDebugging appendFormat:](v101, "appendFormat:", CFSTR("%@AABB center: (%f, %f, %f)\n"), v103, vextq_s8(v108, v108, 8uLL), *(_QWORD *)&v109);
    }
    else
    {
      -[re::ecs2::CARESortingDebugging appendFormat:](v101, "appendFormat:", CFSTR("%@Not Loaded\n"), v103, v111, v115, v117);
    }
  }
  else
  {
    -[re::ecs2::CARESortingDebugging appendFormat:](v101, "appendFormat:", CFSTR("%@None\n"), v102);
    v105 = v129;
  }

  if (v136)
}

id `anonymous namespace'::stringifyMeshSortingConfiguration(unsigned int a1)
{
  unsigned __int8 v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[6];
  _QWORD v16[7];

  v16[6] = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25410D170);
  v2 = 0x24BDD1000uLL;
  if ((v1 & 1) == 0)
  {
    v7 = a1;
    v8 = __cxa_guard_acquire(&qword_25410D170);
    a1 = v7;
    if (v8)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%hhu"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v16[0] = CFSTR("kCentroid");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%hhu"), 1, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v15[1] = v10;
      v16[1] = CFSTR("kFurthestRadial");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%hhu"), 2);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15[2] = v11;
      v16[2] = CFSTR("kNearestRadial");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%hhu"), 3);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15[3] = v12;
      v16[3] = CFSTR("kFurthestOBB");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%hhu"), 4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15[4] = v13;
      v16[4] = CFSTR("kNearestOBB");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%hhu"), 5);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15[5] = v14;
      v16[5] = CFSTR("kCentroidWithOverride");
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, v15, 6);
      _MergedGlobals_221 = objc_claimAutoreleasedReturnValue();

      v2 = 0x24BDD1000;
      __cxa_guard_release(&qword_25410D170);
      a1 = v7;
    }
  }
  v3 = (void *)_MergedGlobals_221;
  objc_msgSend(*(id *)(v2 + 1992), "stringWithFormat:", CFSTR("%hhu"), a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id `anonymous namespace'::stringifyMatrix4x4(float *a1, _anonymous_namespace_ *this)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@[%.5f, %.5f, %.5f, %.5f]\n%@[%.5f, %.5f, %.5f, %.5f]\n%@[%.5f, %.5f, %.5f, %.5f]\n%@[%.5f, %.5f, %.5f, %.5f]\n"), v3, *a1, a1[1], a1[2], a1[3], v3, a1[4], a1[5], a1[6], a1[7], v3, a1[8], a1[9], a1[10], a1[11], v3,
    a1[12],
    a1[13],
    a1[14],
    a1[15]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  uint32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  BOOL v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  int8x16_t v25;
  __n128 v26;
  float32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;

  v4 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    v5 = v4[3];
    v6 = v4[4];
    v7 = (uint32x4_t)vcgtq_f32(v5, v6);
    v7.i32[3] = v7.i32[2];
    if ((vmaxvq_u32(v7) & 0x80000000) != 0)
    {
      v8 = v4[2];
      v9.i64[0] = 0xBF000000BF000000;
      v9.i64[1] = 0xBF000000BF000000;
      v5 = vmulq_f32(v8, v9);
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      v6 = vmulq_f32(v8, v10);
    }
    v11 = vsubq_f32(v6, v5);
    v11.i32[3] = 0;
    v12 = vmaxnmq_f32(v11, (float32x4_t)0).u64[0];
    if (fabsf(*(float *)&v12) < 0.00001 || fabsf(*((float *)&v12 + 1)) < 0.00001)
    {
      v13 = *a1;
      v27.i64[0] = (uint64_t)CFSTR("Zero area");
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("UISortingComponent with a zero XY area in entity #%llu."), *(_QWORD *)(a2 + 296));
      v27.i64[1] = objc_claimAutoreleasedReturnValue();
      re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(v13, (__n128 *)&v27);

    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)a2, (const re::ecs2::Entity *)1, &v27);
  v14 = (float32x4_t)v29;
  v15 = vmulq_f32(v27, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), v29, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v29, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL), (int8x16_t)v28, 8uLL)));
  v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0] <= 0.0;
  v17 = -1.0;
  if (!v16)
    v17 = 1.0;
  v18 = vmulq_f32(v27, v27);
  v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)));
  v20 = vmulq_f32((float32x4_t)v28, (float32x4_t)v28);
  v19.f32[0] = sqrtf(v19.f32[0]);
  v19.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]);
  v21 = vmulq_n_f32(v19, v17).u64[0];
  if (fabsf(*(float *)&v21) < 0.00001 || fabsf(*((float *)&v21 + 1)) < 0.00001)
  {
    v22 = *a1;
    v26.n128_u64[0] = (unint64_t)CFSTR("Zero area");
    v25 = v29;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Transform with a zero XY area in entity #%llu."), *(_QWORD *)(a2 + 296));
    v26.n128_u64[1] = objc_claimAutoreleasedReturnValue();
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(v22, &v26);

    v14 = (float32x4_t)v25;
  }
  v23 = vmulq_f32(v14, v14);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]) < 1.0e-10)
  {
    v24 = *a1;
    v26.n128_u64[0] = (unint64_t)CFSTR("Zero normal");
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Almost-zero normal in entity #%llu."), *(_QWORD *)(a2 + 296));
    v26.n128_u64[1] = objc_claimAutoreleasedReturnValue();
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(v24, &v26);

  }
}

__n128 re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;

  if (!*(_QWORD *)a1)
  {
    v10 = *(_QWORD *)(a1 + 8) + 1;
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity((_QWORD *)a1, v10);
    v11 = *(_DWORD *)(a1 + 16) + 2;
    *(_DWORD *)(a1 + 16) = v11;
    if ((v11 & 1) == 0)
      goto LABEL_12;
LABEL_18:
    v12 = a1 + 24;
    goto LABEL_19;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v8 = v4 >= v6;
    v7 = v4 + 1;
    v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v7 = v4 + 1;
  if (v7 < 2)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
  v9 = 2;
LABEL_14:
  if (v9 <= v7)
    v13 = v7;
  else
    v13 = v9;
  re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity((_QWORD *)a1, v13);
  if ((*(_DWORD *)(a1 + 16) & 1) != 0)
    goto LABEL_18;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 32);
LABEL_19:
  v14 = *(_QWORD *)(a1 + 8);
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(__n128 *)(v12 + 16 * v14) = result;
  *(_QWORD *)(a1 + 8) = v14 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void ___ZN12_GLOBAL__N_123ensureGraphCurrentFrameEv_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_25410D188;
  qword_25410D188 = v0;

}

void re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  id *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;

  v5 = *a1;
  if (a2 && !v5)
  {
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 1;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 1 || (v7 & 1) == 0))
    {
      if (a2 < 2)
      {
        v15 = a1[4];
        if (v9)
        {
          if ((v7 & 1) != 0)
            v16 = (id *)(a1 + 3);
          else
            v16 = (id *)a1[4];
          v17 = *(_OWORD *)v16;
          *v16 = 0;
          v16[1] = 0;
          *(_OWORD *)(a1 + 3) = v17;

          v5 = *a1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 16 * a2;
        v10 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 16 * a2, 8);
        if (v10)
        {
          v12 = v10;
          v13 = *((_DWORD *)a1 + 4);
          if ((v13 & 1) != 0)
            v14 = a1 + 3;
          else
            v14 = (_QWORD *)a1[4];
          v18 = a1[1];
          if (v18)
          {
            v19 = &v14[2 * v18];
            v20 = (_OWORD *)v10;
            do
            {
              v21 = *(_OWORD *)v14;
              *v14 = 0;
              v14[1] = 0;
              *v20++ = v21;

              v22 = (void *)*v14;
              v14 += 2;

            }
            while (v14 != v19);
            v13 = *((_DWORD *)a1 + 4);
          }
          if ((v13 & 1) == 0)
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v13 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v13 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v12;
          return;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::ecs2::ComponentStatePayload::lightArraysForEntity(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t *v5;
  unint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 v70;
  int v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  __int128 v76;
  int v77;
  __int128 v78;
  __int128 v79;
  int v80;
  __int128 v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint8_t buf[16];
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;
  __int128 v104;
  __int128 v105;
  int v106;
  __int128 v107;
  __int128 v108;
  int v109;
  uint64_t v110;

  v87 = 0;
  v88 = a2;
  v5 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(_QWORD *)(a1 + 32), &v88);
  if (v5)
  {
    v6 = *v5;
    v87 = *v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = (re *)(*(_QWORD *(**)(uint8_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 8))(buf, *a3, v88);
  if (buf[0])
    v9 = *(_QWORD *)&buf[8];
  else
    v9 = 0;
  *(_QWORD *)&v85 = v6;
  *((_QWORD *)&v85 + 1) = v9;
  v86 = ((v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9 + v9) ^ v6;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_DWORD *)(v10 + 4412);
  if (v11)
  {
    if (*(_QWORD *)(v10 + 4384))
    {
      v12 = *(unsigned int *)(*(_QWORD *)(v10 + 4392)
                            + 4
                            * ((((v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9 + v9) ^ v6) % *(unsigned int *)(v10 + 4408)));
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)(v10 + 4400);
        v14 = v13 + 280 * v12;
        v16 = *(_QWORD *)(v14 + 8);
        v15 = *(_QWORD *)(v14 + 16);
        if (v16 == v6 && v15 == v9)
          return v13 + 280 * v12 + 32;
        while (1)
        {
          LODWORD(v12) = *(_DWORD *)(v13 + 280 * v12) & 0x7FFFFFFF;
          if ((_DWORD)v12 == 0x7FFFFFFF)
            break;
          v18 = v13 + 280 * v12;
          v20 = *(_QWORD *)(v18 + 8);
          v19 = *(_QWORD *)(v18 + 16);
          if (v20 == v6 && v19 == v9)
            return v13 + 280 * v12 + 32;
        }
      }
    }
  }
  else
  {
    v23 = *(_QWORD *)(v10 + 16);
    if (v23)
    {
      v22 = (_WORD *)(v10 + 56);
      v24 = 272 * v23;
      while (*((_QWORD *)v22 - 3) != v6 || *((_QWORD *)v22 - 2) != v9)
      {
        v22 += 136;
        v24 -= 272;
        if (!v24)
          goto LABEL_26;
      }
      return (uint64_t)v22;
    }
  }
LABEL_26:
  if (*(_DWORD *)(a1 + 24) >= 0x10000u)
  {
    do
      v25 = __ldaxr((unsigned __int8 *)&re::ecs2::ComponentStatePayload::lightArraysForEntity(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::ComponentStatePayload::lightArraysForEntity(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged));
    if ((v25 & 1) == 0)
    {
      v26 = *re::graphicsLogObjects(v7);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, "LightSystem: lightContextId is exceeding 16 bit, some lights will not be visible", buf, 2u);
      }
    }
    return 0;
  }
  LOWORD(v65) = 0;
  v67 = 0uLL;
  v66 = 0;
  v68 = 0;
  v84 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0;
  v72 = 0u;
  v73 = 0u;
  v74 = 0;
  v75 = 0u;
  v76 = 0u;
  v77 = 0;
  v78 = 0u;
  v79 = 0u;
  v80 = 0;
  v83 = 0;
  v82 = 0u;
  v81 = 0u;
  if (v11)
  {
    v27 = v10 + 4384;
LABEL_34:
    v22 = (_WORD *)re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addNew(v27, (uint64_t)&v85, (uint64_t)&v65);
    goto LABEL_66;
  }
  v29 = (uint64_t *)(v10 + 16);
  v28 = *(_QWORD *)(v10 + 16);
  v30 = v10 + 32;
  if (v28)
  {
    v31 = 0;
    do
    {
      if (*(_QWORD *)(v10 + v31 + 32) == v6 && *(_QWORD *)(v10 + v31 + 40) == v9)
      {
        v22 = (_WORD *)(v10 + v31 + 56);
        goto LABEL_66;
      }
      v31 += 272;
    }
    while (272 * v28 != v31);
    if ((v28 & 0xFFFFFFF0) != 0)
    {
      if (!*(_QWORD *)(v10 + 4384))
      {
        v32 = *(uint64_t **)v10;
        if (!*(_QWORD *)v10)
        {
        }
        re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::init(v10 + 4384, (uint64_t)v32, 32);
        v28 = *v29;
        if (!*v29)
        {
LABEL_58:
          re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear(v10 + 16);
          v27 = v10 + 4384;
          goto LABEL_34;
        }
      }
      v33 = v30 + 272 * v28;
      while (1)
      {
        v34 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v10 + 4384))
        {
          v35 = v34 % *(unsigned int *)(v10 + 4408);
          v36 = *(unsigned int *)(*(_QWORD *)(v10 + 4392) + 4 * v35);
          if ((_DWORD)v36 != 0x7FFFFFFF)
          {
            v37 = *(_QWORD *)(v10 + 4400);
            do
            {
              v38 = v37 + 280 * v36;
              v40 = *(_QWORD *)(v38 + 8);
              v39 = *(_QWORD *)(v38 + 16);
              if (v40 == *(_QWORD *)v30 && v39 == *(_QWORD *)(v30 + 8))
                goto LABEL_57;
              LODWORD(v36) = *(_DWORD *)(v37 + 280 * v36) & 0x7FFFFFFF;
            }
            while ((_DWORD)v36 != 0x7FFFFFFF);
          }
        }
        else
        {
          LODWORD(v35) = 0;
        }
        re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(v10 + 4384, v35, v34, (__int128 *)v30, v30 + 24);
        ++*(_DWORD *)(v10 + 4424);
LABEL_57:
        v30 += 272;
        if (v30 == v33)
          goto LABEL_58;
      }
    }
  }
  *(_OWORD *)buf = v85;
  v90 = v86;
  v91 = 0;
  v92 = 0;
  v66 = 0;
  v93 = 0u;
  v67 = 0u;
  v68 = 1;
  v94 = 1;
  v69 = 0u;
  v95 = 0u;
  v96 = 0u;
  v70 = 0u;
  v71 = 1;
  v98 = 0u;
  v99 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 1;
  v97 = 1;
  v100 = 1;
  v75 = 0u;
  v101 = 0u;
  v102 = 0u;
  v76 = 0u;
  v77 = 1;
  v104 = 0u;
  v105 = 0u;
  v78 = 0u;
  v79 = 0u;
  v103 = 1;
  v106 = 1;
  v81 = 0u;
  v107 = 0u;
  v108 = v82;
  v82 = 0u;
  v110 = 0;
  v84 = 0;
  v80 = 1;
  ++v83;
  v109 = 1;
  if ((unint64_t)*v29 < 0x10)
  {
    v42 = v30 + 272 * *v29;
    *(_OWORD *)v42 = v85;
    *(_QWORD *)(v42 + 16) = v86;
    *(_WORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    *(_DWORD *)(v42 + 56) = 0;
    *(_QWORD *)(v42 + 32) = v92;
    v92 = 0;
    *(_QWORD *)(v42 + 40) = v93;
    *(_QWORD *)&v93 = 0;
    v43 = *(_QWORD *)(v42 + 48);
    *(_QWORD *)(v42 + 48) = *((_QWORD *)&v93 + 1);
    *((_QWORD *)&v93 + 1) = v43;
    *(_QWORD *)(v42 + 64) = v95;
    *(_QWORD *)&v95 = 0;
    ++v94;
    ++*(_DWORD *)(v42 + 56);
    *(_QWORD *)(v42 + 80) = 0;
    *(_QWORD *)(v42 + 88) = 0;
    *(_DWORD *)(v42 + 96) = 0;
    *(_QWORD *)(v42 + 72) = *((_QWORD *)&v95 + 1);
    *((_QWORD *)&v95 + 1) = 0;
    *(_QWORD *)(v42 + 80) = v96;
    *(_QWORD *)&v96 = 0;
    v44 = *(_QWORD *)(v42 + 88);
    *(_QWORD *)(v42 + 88) = *((_QWORD *)&v96 + 1);
    *((_QWORD *)&v96 + 1) = v44;
    *(_QWORD *)(v42 + 104) = v98;
    *(_QWORD *)&v98 = 0;
    ++v97;
    ++*(_DWORD *)(v42 + 96);
    *(_QWORD *)(v42 + 120) = 0;
    *(_QWORD *)(v42 + 128) = 0;
    *(_DWORD *)(v42 + 136) = 0;
    *(_QWORD *)(v42 + 112) = *((_QWORD *)&v98 + 1);
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)&v99 = 0;
    v45 = *(_QWORD *)(v42 + 128);
    *(_QWORD *)(v42 + 128) = 0;
    *((_QWORD *)&v99 + 1) = v45;
    *(_QWORD *)(v42 + 144) = 0;
    *(_QWORD *)&v101 = 0;
    v100 = 2;
    ++*(_DWORD *)(v42 + 136);
    *(_QWORD *)(v42 + 160) = 0;
    *(_QWORD *)(v42 + 168) = 0;
    *(_QWORD *)(v42 + 152) = 0;
    *(_DWORD *)(v42 + 176) = 0;
    *((_QWORD *)&v101 + 1) = 0;
    *(_QWORD *)&v102 = 0;
    v46 = *(_QWORD *)(v42 + 168);
    *(_QWORD *)(v42 + 168) = 0;
    *((_QWORD *)&v102 + 1) = v46;
    *(_QWORD *)(v42 + 184) = 0;
    *(_QWORD *)&v104 = 0;
    v103 = 2;
    ++*(_DWORD *)(v42 + 176);
    *(_DWORD *)(v42 + 216) = 0;
    *(_QWORD *)(v42 + 200) = 0;
    *(_QWORD *)(v42 + 208) = 0;
    *(_QWORD *)(v42 + 192) = *((_QWORD *)&v104 + 1);
    *((_QWORD *)&v104 + 1) = 0;
    *(_QWORD *)(v42 + 200) = v105;
    *(_QWORD *)&v105 = 0;
    v47 = *(_QWORD *)(v42 + 208);
    *(_QWORD *)(v42 + 208) = *((_QWORD *)&v105 + 1);
    *((_QWORD *)&v105 + 1) = v47;
    *(_QWORD *)(v42 + 224) = v107;
    *(_QWORD *)&v107 = 0;
    ++v106;
    ++*(_DWORD *)(v42 + 216);
    *(_QWORD *)(v42 + 240) = 0;
    *(_QWORD *)(v42 + 248) = 0;
    *(_DWORD *)(v42 + 256) = 0;
    *(_QWORD *)(v42 + 232) = *((_QWORD *)&v107 + 1);
    *((_QWORD *)&v107 + 1) = 0;
    *(_QWORD *)(v42 + 240) = v108;
    *(_QWORD *)&v108 = 0;
    v48 = *(_QWORD *)(v42 + 248);
    *(_QWORD *)(v42 + 248) = *((_QWORD *)&v108 + 1);
    *((_QWORD *)&v108 + 1) = v48;
    *(_QWORD *)(v42 + 264) = v110;
    v110 = 0;
    ++v109;
    ++*(_DWORD *)(v42 + 256);
    ++*(_QWORD *)(v10 + 16);
    ++*(_DWORD *)(v10 + 24);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v107 + 8);
    re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v104 + 8);
    re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v101 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v98 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v95 + 8);
    if (v92)
    {
      v49 = v95;
      if ((_QWORD)v95)
        (*(void (**)(void))(*(_QWORD *)v92 + 40))();
    }
    if (!*v29)
    {
      re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, *v29 - 1, 0, v65);
      _os_crash();
      __break(1u);
LABEL_90:
      re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v62, 0);
      _os_crash();
      __break(1u);
      goto LABEL_91;
    }
    v22 = (_WORD *)(v30 + 272 * (*v29 - 1) + 24);
LABEL_66:
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v81 + 8);
    re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v78 + 8);
    re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v75 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v72 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v69 + 8);
    if (v66)
    {
      v50 = v69;
      if ((_QWORD)v69)
        (*(void (**)(void))(*(_QWORD *)v66 + 40))();
    }
    v51 = *(_DWORD *)(a1 + 24);
    if (v6)
      v52 = *(_DWORD *)(a1 + 24);
    else
      v52 = 0;
    *v22 = v52;
    *(_DWORD *)(a1 + 24) = v51 + 1;
    v53 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(v53 + 316))
    {
      v54 = v53 + 288;
LABEL_74:
      re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v54, (uint64_t *)&v87, v22);
      return (uint64_t)v22;
    }
    v55 = v53 + 32;
    v56 = *(_QWORD *)(v53 + 16);
    v57 = v87;
    if (v56)
    {
      v58 = 0;
      while (*(_QWORD *)(v53 + v58 + 32) != v87)
      {
        v58 += 16;
        if (16 * v56 == v58)
        {
          if ((v56 & 0xFFFFFFF0) == 0)
            goto LABEL_87;
          if (*(_QWORD *)(v53 + 288))
            goto LABEL_84;
          v59 = *(uint64_t **)v53;
          if (!*(_QWORD *)v53)
          {
          }
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v53 + 288, (uint64_t)v59, 32);
          v56 = *(_QWORD *)(v53 + 16);
          if (v56)
          {
LABEL_84:
            v60 = v55 + 16 * v56;
            do
            {
              re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v53 + 288, (uint64_t *)v55, (_WORD *)(v55 + 8));
              v55 += 16;
            }
            while (v55 != v60);
          }
          *(_QWORD *)(v53 + 16) = 0;
          ++*(_DWORD *)(v53 + 24);
          v54 = v53 + 288;
          goto LABEL_74;
        }
      }
      return (uint64_t)v22;
    }
LABEL_87:
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(v56, v50);
    v62 = *(_QWORD *)(v53 + 16);
    v63 = v55 + 16 * v62;
    *(_QWORD *)v63 = v57;
    *(_WORD *)(v63 + 8) = v52;
    ++*(_DWORD *)(v53 + 24);
    *(_QWORD *)(v53 + 16) = v62 + 1;
    if (v62 != -1)
      return (uint64_t)v22;
    goto LABEL_90;
  }
LABEL_91:
  re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

re::DynamicString *re::DynamicArray<re::DirectionalLightInfo>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  uint64_t v5;
  re::DynamicString *result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DirectionalLightInfo>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  result = re::DynamicString::DynamicString((re::DynamicString *)(v5 + 144 * v4), a2);
  v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)result + 3) = v7;
  v8 = *((_OWORD *)a2 + 4);
  v9 = *((_OWORD *)a2 + 5);
  v10 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)result + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)result + 5) = v9;
  *((_OWORD *)result + 6) = v10;
  *((_OWORD *)result + 4) = v8;
  *(_QWORD *)((char *)result + 124) = *(_QWORD *)((char *)a2 + 124);
  v11 = *((unsigned __int8 *)a2 + 132);
  *((_BYTE *)result + 132) = v11;
  if (v11)
    *(_BYTE *)(v5 + 144 * v4 + 133) = *((_BYTE *)a2 + 133);
  v12 = v5 + 144 * v4;
  v13 = *(_QWORD *)((char *)a2 + 134);
  *(_WORD *)(v12 + 142) = *((_WORD *)a2 + 71);
  *(_QWORD *)(v12 + 134) = v13;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

re::DynamicString *re::DynamicArray<re::SpotLightInfo>::add(uint64_t a1, re::DynamicString *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  re::DynamicString *result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int16 v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::SpotLightInfo>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::SpotLightInfo>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32);
  result = re::DynamicString::DynamicString((re::DynamicString *)(v11 + 240 * v5), a2);
  v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)result + 3) = v13;
  v14 = *((_OWORD *)a2 + 4);
  v15 = *((_OWORD *)a2 + 5);
  v16 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)result + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)result + 5) = v15;
  *((_OWORD *)result + 6) = v16;
  *((_OWORD *)result + 4) = v14;
  v18 = *((_OWORD *)a2 + 11);
  v17 = *((_OWORD *)a2 + 12);
  v19 = *((_OWORD *)a2 + 10);
  *(_OWORD *)((char *)result + 204) = *(_OWORD *)((char *)a2 + 204);
  *((_OWORD *)result + 11) = v18;
  *((_OWORD *)result + 12) = v17;
  *((_OWORD *)result + 10) = v19;
  v20 = *((_OWORD *)a2 + 9);
  *((_OWORD *)result + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)result + 9) = v20;
  v21 = *((unsigned __int8 *)a2 + 220);
  *((_BYTE *)result + 220) = v21;
  if (v21)
    *(_BYTE *)(v11 + 240 * v5 + 221) = *((_BYTE *)a2 + 221);
  v22 = v11 + 240 * v5;
  v23 = *((_WORD *)a2 + 111);
  *(_BYTE *)(v22 + 224) = *((_BYTE *)a2 + 224);
  *(_WORD *)(v22 + 222) = v23;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re::DynamicString *re::DynamicArray<re::PointLightInfo>::add(uint64_t a1, re::DynamicString *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  re::DynamicString *result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::PointLightInfo>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::PointLightInfo>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32);
  result = re::DynamicString::DynamicString((re::DynamicString *)(v11 + 224 * v5), a2);
  v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)result + 3) = v13;
  v14 = *((_OWORD *)a2 + 4);
  v15 = *((_OWORD *)a2 + 5);
  v16 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)result + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)result + 5) = v15;
  *((_OWORD *)result + 6) = v16;
  *((_OWORD *)result + 4) = v14;
  v18 = *((_OWORD *)a2 + 11);
  v17 = *((_OWORD *)a2 + 12);
  v19 = *((_OWORD *)a2 + 10);
  *((_DWORD *)result + 52) = *((_DWORD *)a2 + 52);
  *((_OWORD *)result + 11) = v18;
  *((_OWORD *)result + 12) = v17;
  *((_OWORD *)result + 10) = v19;
  v20 = *((_OWORD *)a2 + 9);
  *((_OWORD *)result + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)result + 9) = v20;
  v21 = *((unsigned __int8 *)a2 + 212);
  *((_BYTE *)result + 212) = v21;
  if (v21)
    *(_BYTE *)(v11 + 224 * v5 + 213) = *((_BYTE *)a2 + 213);
  *(_WORD *)(v11 + 224 * v5 + 214) = *((_WORD *)a2 + 107);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__n128 re::DynamicArray<re::RectAreaLightInfo>::add(uint64_t a1, re::DynamicString *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  re::DynamicString *v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::RectAreaLightInfo>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RectAreaLightInfo>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 32) + 144 * v5), a2);
  v12 = *((_OWORD *)a2 + 3);
  *((_OWORD *)v11 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)v11 + 3) = v12;
  result = *((__n128 *)a2 + 4);
  v14 = *((_OWORD *)a2 + 5);
  v15 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)v11 + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)v11 + 5) = v14;
  *((_OWORD *)v11 + 6) = v15;
  *((__n128 *)v11 + 4) = result;
  v16 = *((_QWORD *)a2 + 16);
  *((_BYTE *)v11 + 136) = *((_BYTE *)a2 + 136);
  *((_QWORD *)v11 + 16) = v16;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__n128 re::DynamicArray<re::AmbientLightInfo>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __n128 result;
  __int128 v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::AABB>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::AABB>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 32 * v5);
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  *v11 = *(_OWORD *)a2;
  v11[1] = v13;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re::ecs2::PointLightComponentStateImpl *re::ecs2::PointLightComponentStateImpl::PointLightComponentStateImpl(re::ecs2::PointLightComponentStateImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v5;

  v2 = (_QWORD *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *v2 = off_24ED5F968;
  v3 = (uint64_t)(v2 + 13);
  v5 = re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  v5 = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24ED5FDE8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

double `anonymous namespace'::updateProjectionPointLightInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double result)
{
  float v6;
  BOOL v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float *v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;

  *(_BYTE *)(a1 + 215) = (a2 | a3) != 0;
  if (!(a2 | a3))
  {
    *(_DWORD *)(a1 + 208) = 0;
    if (!a4)
      return result;
    v8 = *(float *)(a1 + 116);
    v9 = *(float *)(a1 + 120);
    goto LABEL_34;
  }
  LODWORD(result) = *(_DWORD *)(a1 + 116);
  v6 = *(float *)(a1 + 120);
  if (a2)
  {
    if (*(_BYTE *)(a1 + 212))
      v7 = 0;
    else
      v7 = *(_BYTE *)(a2 + 32) == 0;
    if (!v7)
    {
      if (!*(_BYTE *)(a1 + 212) || *(_BYTE *)(a2 + 32))
      {
        if (!*(_BYTE *)(a1 + 212) && *(_BYTE *)(a2 + 32))
          *(_BYTE *)(a1 + 212) = 1;
        *(_BYTE *)(a1 + 213) = *(_BYTE *)(a2 + 33);
      }
      else
      {
        *(_BYTE *)(a1 + 212) = 0;
      }
    }
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 28);
    if (*(_BYTE *)(a2 + 36))
      v11 = (float *)(a2 + 40);
    else
      v11 = (float *)&kDefaultLightShadowNearPlane;
    v8 = *v11;
    v12 = (float *)(a1 + 200);
    if (*(_BYTE *)(a2 + 44))
      v12 = (float *)(a2 + 48);
    v9 = *v12;
  }
  else
  {
    if (a3)
      v10 = *(float *)(a3 + 28);
    else
      v10 = 1.0;
    *(float *)(a1 + 208) = v10;
    v9 = v6;
    v8 = *(float *)&result;
  }
  if (*(float *)(a1 + 200) <= v9)
    v9 = *(float *)(a1 + 200);
  if ((a4 & 1) != 0 || (v8 == *(float *)&result ? (v13 = v9 == v6) : (v13 = 0), !v13))
  {
    *(float *)(a1 + 116) = v8;
    *(float *)(a1 + 120) = v9;
LABEL_34:
    re::Projection::makePerspectiveFieldOfViewReverseDepth(1.5708, 1.0, v8, v9, v16);
    v14 = v16[1];
    *(_OWORD *)(a1 + 128) = v16[0];
    *(_OWORD *)(a1 + 144) = v14;
    result = *(double *)&v17;
    v15 = v18;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v15;
  }
  return result;
}

void `anonymous namespace'::getAnchorScale(_anonymous_namespace_ *this, const re::ecs2::Entity *a2)
{
  float32x4_t *v2;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  unsigned __int8 v17;
  NSObject *v18;
  _BOOL4 v19;
  __int32 v20;
  uint8_t buf[16];

  *(_BYTE *)this = 0;
  if (a2)
  {
    v2 = (float32x4_t *)*((_QWORD *)a2 + 17);
    if (v2)
    {
      v4 = v2[3];
      v5 = v2[4];
      v6 = v2[5];
      v7 = vmulq_f32(v4, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL), (int8x16_t)v6, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL)));
      v8 = -1.0;
      v9 = vmulq_f32(v4, v4);
      v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0] > 0.0)v8 = 1.0;
      v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, v10));
      v11.f32[0] = sqrtf(v11.f32[0]);
      v12 = vmulq_f32(v5, v5);
      v13 = vmulq_f32(v6, v6);
      v11.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
      v11.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
      v14 = vmulq_n_f32(v11, v8);
      v15 = v14.f32[1];
      v16 = v14.f32[2];
      if ((v14.f32[0] == v14.f32[1]
         || vabds_f32(v14.f32[0], v14.f32[1]) < (float)((float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[1])) + 1.0)
                                                      * 0.00001))
        && (v14.f32[0] == v14.f32[2]
         || vabds_f32(v14.f32[0], v14.f32[2]) < (float)((float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[2])) + 1.0)
                                                      * 0.00001)))
      {
        goto LABEL_14;
      }
      do
      if ((v17 & 1) == 0)
      {
        v20 = v14.i32[0];
        v18 = *re::graphicsLogObjects(this);
        v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        v14.i32[0] = v20;
        if (v19)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "LightSystem: non uniform system scale detected in AnchorComponent", buf, 2u);
          v14.i32[0] = v20;
        }
      }
      v14.f32[0] = fmaxf(fmaxf(v14.f32[0], v16), v15);
      if (!*(_BYTE *)this)
LABEL_14:
        *(_BYTE *)this = 1;
      *((_DWORD *)this + 1) = v14.i32[0];
    }
  }
}

re::ecs2::SpotLightComponentStateImpl *re::ecs2::SpotLightComponentStateImpl::SpotLightComponentStateImpl(re::ecs2::SpotLightComponentStateImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v5;

  v2 = (_QWORD *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *v2 = off_24ED5F9A8;
  v3 = (uint64_t)(v2 + 13);
  v5 = re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  v5 = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24ED5FDA8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

double `anonymous namespace'::updateProjectionSpotLightInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double result)
{
  float v6;
  BOOL v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float *v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;

  *(_BYTE *)(a1 + 224) = (a2 | a3) != 0;
  if (!(a2 | a3))
  {
    *(_DWORD *)(a1 + 216) = 0;
    if (!a4)
      return result;
    v8 = *(float *)(a1 + 116);
    v9 = *(float *)(a1 + 120);
    goto LABEL_34;
  }
  LODWORD(result) = *(_DWORD *)(a1 + 116);
  v6 = *(float *)(a1 + 120);
  if (a2)
  {
    if (*(_BYTE *)(a1 + 220))
      v7 = 0;
    else
      v7 = *(_BYTE *)(a2 + 32) == 0;
    if (!v7)
    {
      if (!*(_BYTE *)(a1 + 220) || *(_BYTE *)(a2 + 32))
      {
        if (!*(_BYTE *)(a1 + 220) && *(_BYTE *)(a2 + 32))
          *(_BYTE *)(a1 + 220) = 1;
        *(_BYTE *)(a1 + 221) = *(_BYTE *)(a2 + 33);
      }
      else
      {
        *(_BYTE *)(a1 + 220) = 0;
      }
    }
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 28);
    if (*(_BYTE *)(a2 + 36))
      v11 = (float *)(a2 + 40);
    else
      v11 = (float *)&kDefaultLightShadowNearPlane;
    v8 = *v11;
    v12 = (float *)(a1 + 200);
    if (*(_BYTE *)(a2 + 44))
      v12 = (float *)(a2 + 48);
    v9 = *v12;
  }
  else
  {
    if (a3)
      v10 = *(float *)(a3 + 28);
    else
      v10 = 1.0;
    *(float *)(a1 + 216) = v10;
    v9 = v6;
    v8 = *(float *)&result;
  }
  if (*(float *)(a1 + 200) <= v9)
    v9 = *(float *)(a1 + 200);
  if ((a4 & 1) != 0 || (v8 == *(float *)&result ? (v13 = v9 == v6) : (v13 = 0), !v13))
  {
    *(float *)(a1 + 116) = v8;
    *(float *)(a1 + 120) = v9;
LABEL_34:
    re::Projection::makePerspectiveFieldOfViewReverseDepth(*(float *)(a1 + 208), 1.0, v8, v9, v16);
    v14 = v16[1];
    *(_OWORD *)(a1 + 128) = v16[0];
    *(_OWORD *)(a1 + 144) = v14;
    result = *(double *)&v17;
    v15 = v18;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v15;
  }
  return result;
}

re::ecs2::DirectionalLightComponentStateImpl *re::ecs2::DirectionalLightComponentStateImpl::DirectionalLightComponentStateImpl(re::ecs2::DirectionalLightComponentStateImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v5;

  v2 = (_QWORD *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *v2 = off_24ED5F9E8;
  v3 = (uint64_t)(v2 + 13);
  v5 = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24ED5FD68;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

re::ecs2::FrustumLightComponentStateImpl *re::ecs2::FrustumLightComponentStateImpl::FrustumLightComponentStateImpl(re::ecs2::FrustumLightComponentStateImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v5;

  v2 = (_QWORD *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *v2 = off_24ED5FA28;
  v3 = (uint64_t)(v2 + 13);
  v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  v5 = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24ED5FCA8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

uint64_t re::MeshAsset::partCountForModel(re::MeshAsset *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 416;
  if (!*((_BYTE *)this + 952))
    v2 = 24;
  if (*(_QWORD *)((char *)this + v2) <= a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "modelIndex < modelCount()", "partCountForModel", 139);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "meshManager != nullptr", "partCountForModel", 142);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (!*((_BYTE *)this + 952))
  {
    if (*((_QWORD *)this + 3) > a2)
    {
      v4 = *((_QWORD *)this + 5) + (a2 << 9) + 208;
      return *(_QWORD *)v4;
    }
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *((_QWORD *)this + 55);
  if (!v3)
    goto LABEL_12;
  if (*((_QWORD *)this + 52) <= a2)
  {
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  v4 = re::DataArray<re::MeshModel>::get(v3 + 8, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * a2)) + 56;
  return *(_QWORD *)v4;
}

__n128 re::MeshAsset::boundingBoxForPartOnModel@<Q0>(re::MeshAsset *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;

  if (re::MeshAsset::partCountForModel(this, a2) <= a3)
  {
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "partIndex < partCountForModel(modelIndex)", "boundingBoxForPartOnModel", 253);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "meshManager != nullptr", "boundingBoxForPartOnModel", 256);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (!*((_BYTE *)this + 952))
  {
    if (*((_QWORD *)this + 3) > a2)
    {
      v12 = *((_QWORD *)this + 5) + (a2 << 9);
      if (*(_QWORD *)(v12 + 208) > a3)
      {
        v11 = *(_QWORD *)(v12 + 224) + (a3 << 8) + 96;
        goto LABEL_10;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v9 = *((_QWORD *)this + 55);
  if (!v9)
    goto LABEL_12;
  if (*((_QWORD *)this + 52) <= a2)
  {
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  v10 = re::DataArray<re::MeshModel>::get(v9 + 8, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * a2));
  if (*(_QWORD *)(v10 + 56) <= a3)
  {
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(v10 + 64) + 560 * a3 + 432;
LABEL_10:
  result = *(__n128 *)v11;
  v14 = *(_OWORD *)(v11 + 16);
  *a4 = *(_OWORD *)v11;
  a4[1] = v14;
  return result;
}

void re::ecs2::LightSystem::updateScenes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = a2[1];
    if (v4)
    {
      v5 = *a2;
      v6 = 8 * v4;
      do
      {
        v5 += 8;
        re::ecs2::LightSystem::updateSceneInternal(a1);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

void re::ecs2::LightSystem::updateSceneInternal(uint64_t a1)
{
  __int8 v1;
  __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::ecs2::RenderingSubsystem *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  float32x4_t *v83;
  float32x4_t *v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  float32x4_t *v92;
  __int8 *v93;
  uint64_t v94;
  uint64_t (**v95)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int32 v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  float32x4_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  re *v130;
  uint64_t v131;
  BOOL v132;
  uint64_t isStatisticCollectionEnabled;
  int64x2_t *v134;
  unint64_t v135;
  unint64_t v136;
  int64x2_t v137;
  uint64_t v138;
  int64x2_t *v139;
  unint64_t v140;
  unint64_t v141;
  int64x2_t v142;
  uint64_t v143;
  int64x2_t *v144;
  unint64_t v145;
  unint64_t v146;
  int64x2_t v147;
  uint64_t v148;
  int64x2_t *v149;
  unint64_t v150;
  unint64_t v151;
  int64x2_t v152;
  unint64_t v153;
  uint64_t v154;
  int64x2_t *v155;
  unint64_t v156;
  unint64_t v157;
  int64x2_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int64x2_t *v162;
  unint64_t v163;
  unint64_t v164;
  int64x2_t v165;
  unint64_t v166;
  re *v167;
  uint64_t v168;
  int64x2_t *v169;
  unint64_t v170;
  unint64_t v171;
  int64x2_t v172;
  _anonymous_namespace_ *v173;
  re::RenderManager ***v174;
  uint64_t v175;
  float32x4_t **v176;
  uint64_t v177;
  float32x4_t **v178;
  float32x4_t *v183;
  uint64_t v184;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v193;
  uint64_t v194;
  float32x4_t v195;
  uint64_t v196;
  unsigned int v197;
  float v198;
  uint64_t v199;
  __int128 v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  _QWORD *v205;
  float v206;
  float v207;
  float v208;
  int32x4_t v209;
  float32x2_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int32x4_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  int32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float *v228;
  float v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  re::MeshAsset *v236;
  uint64_t *v237;
  re::MeshAsset *v238;
  unint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  unint64_t v242;
  float32x4_t *v243;
  float32x4_t v244;
  _QWORD *v245;
  __int128 v246;
  uint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  re::RenderManager **v261;
  re::MaterialParameterBlock *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unint64_t v269;
  int v270;
  uint64_t v271;
  int *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int *v289;
  int v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int *v307;
  int v308;
  uint64_t v309;
  int v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int *v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int *v325;
  int v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int *v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int *v343;
  int v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  int *v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int *v361;
  int v362;
  uint64_t v363;
  int v364;
  int v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  int *v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int *v379;
  int v380;
  uint64_t v381;
  int v382;
  int v383;
  int v384;
  int v385;
  unint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  int v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  int v397;
  _QWORD *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  re::ecs2::System *v404;
  unint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  int v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  int v416;
  _QWORD *v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  re::ecs2::System *v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  int v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  int v435;
  _QWORD *v436;
  uint64_t *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  re::ecs2::System *v442;
  unint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  int v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  int v454;
  _QWORD *v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  re::ecs2::System *v461;
  unint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  int v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  int v473;
  _QWORD *v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  re::ecs2::System *v480;
  unint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  int v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  int v490;
  _QWORD *v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  float32x4_t **v497;
  int32x4_t v498;
  int v499;
  uint64_t v500;
  float32x4_t *v501;
  int v502;
  int v503;
  float32x4_t v504;
  float32x4_t v505;
  re::RenderFrameData *v506;
  re::DynamicString **v507;
  uint64_t v508;
  float32x4_t v509;
  uint64_t v510;
  float32x4_t v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  float v524;
  uint64_t *v525;
  uint64_t v526;
  int v527;
  unint64_t v528;
  uint64_t v529;
  re::ecs2::RenderingSubsystem *v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  _BYTE v534[16];
  uint64_t v535[2];
  _QWORD v536[2];
  _OWORD v537[2];
  _QWORD v538[3];
  _QWORD v539[2];
  uint64_t v540[3];
  _BYTE v541[32];
  _BYTE v542[32];
  uint64_t v543;
  _BYTE v544[44];
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  char v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  _QWORD v564[4];
  char v565;
  char v566;
  __int128 v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  __int128 v571;
  _QWORD v572[5];
  int32x4_t v573;
  __int128 v574;
  uint64_t v575;
  char v576;
  uint64_t v577;
  char v578;
  uint64_t v579;
  __int128 v580;
  __int128 v581;
  int v582;
  uint64_t v583;
  _BYTE v584[48];
  __int128 v585;
  _BYTE *v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  __int128 v613;
  uint64_t v614;

  MEMORY[0x24BDAC7A8](a1);
  v614 = *MEMORY[0x24BDAC8D0];
  v536[0] = v4;
  v536[1] = v5;
  v530 = v6;
  if (!v6)
    return;
  v7 = v3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v535);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v534, 3025, v7);
  if (!*(_QWORD *)(v7 + 120))
    goto LABEL_670;
  if (!*(_QWORD *)(v7 + 112))
  {
LABEL_671:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 1441);
    _os_crash();
    __break(1u);
LABEL_672:
    re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v33, 0);
    _os_crash();
    __break(1u);
  }
  v500 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 136) + 24))(*(_QWORD *)(v7 + 136));
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)v500 + 16))();
  v10 = *(_DWORD *)(v9 + 124);
  if (!v10)
    v10 = *(_DWORD *)(v9 + 16);
  v499 = v10;
  v11 = *(_QWORD *)(v7 + 112);
  v12 = *(_QWORD *)(v11 + 104);
  if (v12)
  {
    v507 = (re::DynamicString **)re::RenderFrameBox::get(v12 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v11 = *(_QWORD *)(v7 + 112);
  }
  else
  {
    v507 = 0;
  }
  v527 = *(unsigned __int8 *)(v11 + 274);
  v545.i64[0] = 0;
  v545.i32[2] = 0;
  v546.i64[0] = 0;
  v546.i32[2] = 0;
  v580 = 0u;
  v581 = 0u;
  v582 = 0;
  v583 = 0x7FFFFFFFLL;
  v13 = *(char **)(v11 + 152);
  v538[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 144) + 16))(*(_QWORD *)(v7 + 144));
  v14 = *(_QWORD *)(*(_QWORD *)(v7 + 112) + 88);
  if (v14)
  {
    v609.i8[0] = 0;
    *(_QWORD *)v584 = 0xFB51CF9FCBD130BALL;
    *(_QWORD *)&v584[8] = "overrides:enableshadows";
    v15 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v14, v584, &v609) == 0;
    re::StringID::destroyString((re::StringID *)v584);
    v1 = v609.i8[0];
    *(_QWORD *)v584 = 0x556F25DBCF9A2F18;
    *(_QWORD *)&v584[8] = "overrides:enablelightspill";
    v16 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v14, v584, &v609) == 0;
    re::StringID::destroyString((re::StringID *)v584);
    v2 = v609.i8[0];
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 40))(*(_QWORD *)(v7 + 160));
  v19 = v17;
  if (*(_DWORD *)(v17 + 316))
  {
    v20 = *(unsigned int *)(v17 + 312);
    if ((_DWORD)v20)
      memset_pattern16(*(void **)(v17 + 296), &unk_2260EB7B0, 4 * v20);
    v21 = *(unsigned int *)(v19 + 320);
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = 24 * v21;
      do
      {
        v24 = *(_QWORD *)(v19 + 304);
        v25 = *(_DWORD *)(v24 + v22);
        if (v25 < 0)
          *(_DWORD *)(v24 + v22) = v25 & 0x7FFFFFFF;
        v22 += 24;
      }
      while (v23 != v22);
    }
    *(_DWORD *)(v19 + 324) = 0x7FFFFFFF;
    *(_QWORD *)(v19 + 316) = 0;
    v26 = (_DWORD *)(v19 + 328);
  }
  else
  {
    *(_QWORD *)(v17 + 16) = 0;
    v26 = (_DWORD *)(v17 + 24);
  }
  ++*v26;
  *(_WORD *)v584 = 0;
  v27 = v19 + 32;
  v28 = *(_QWORD *)(v19 + 16);
  if (!v28)
    goto LABEL_34;
  v29 = 0;
  do
  {
    if (!*(_QWORD *)(v19 + v29 + 32))
      goto LABEL_35;
    v29 += 16;
  }
  while (16 * v28 != v29);
  if ((v28 & 0xFFFFFFF0) != 0)
  {
    if (*(_QWORD *)(v19 + 288))
      goto LABEL_31;
    v30 = *(uint64_t **)v19;
    if (!*(_QWORD *)v19)
    {
    }
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v19 + 288, (uint64_t)v30, 32);
    v28 = *(_QWORD *)(v19 + 16);
    if (v28)
    {
LABEL_31:
      v31 = v27 + 16 * v28;
      do
      {
        re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v19 + 288, (uint64_t *)v27, (_WORD *)(v27 + 8));
        v27 += 16;
      }
      while (v27 != v31);
    }
    *(_QWORD *)(v19 + 16) = 0;
    ++*(_DWORD *)(v19 + 24);
    re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v19 + 288, &re::kInvalidLightGroupId, v584);
  }
  else
  {
LABEL_34:
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(v28, v18);
    v33 = *(_QWORD *)(v19 + 16);
    v34 = v27 + 16 * v33;
    *(_QWORD *)v34 = 0;
    *(_WORD *)(v34 + 8) = 0;
    ++*(_DWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 16) = v33 + 1;
    if (v33 == -1)
      goto LABEL_672;
  }
LABEL_35:
  if (v13)
    v35 = *v13;
  else
    v35 = 0;
  v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 32))(*(_QWORD *)(v7 + 160));
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 40))(*(_QWORD *)(v7 + 160));
  *(_QWORD *)v541 = v7;
  *(_QWORD *)&v541[8] = v538;
  v541[16] = v15;
  if (v15)
    v541[17] = v1;
  v541[18] = v16;
  if (v16)
    v541[19] = v2;
  v541[20] = v35;
  *(_QWORD *)v542 = v36;
  *(_QWORD *)&v542[8] = v37;
  *(_QWORD *)&v542[16] = &v545;
  v38 = *(_DWORD *)(v37 + 316);
  if (!v38)
    v38 = *(_DWORD *)(v37 + 16);
  *(_DWORD *)&v541[24] = v38;
  v531 = v7 + 2088;
  memset(v584, 0, 36);
  *(_QWORD *)&v584[36] = 0x7FFFFFFFLL;
  v39 = *(unsigned int *)(v7 + 1936);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = (int *)(*(_QWORD *)(v7 + 1920) + 8);
    while (1)
    {
      v42 = *v41;
      v41 += 18;
      if (v42 < 0)
        break;
      if (v39 == ++v40)
      {
        LODWORD(v40) = *(_DWORD *)(v7 + 1936);
        break;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if ((_DWORD)v39 != (_DWORD)v40)
  {
    v43 = v40;
    do
    {
      v44 = *(_QWORD *)(v7 + 1920) + 72 * v43;
      v45 = v44 + 24;
      v609.i64[0] = *(_QWORD *)(v44 + 16);
      v46 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 2144), &v609);
      if (v46 != -1)
      {
        v47 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v531, *(_QWORD *)(*(_QWORD *)(v7 + 2152) + 16 * v46 + 8));
        v48 = *(unsigned int *)(v45 + 32);
        if ((_DWORD)v48)
        {
          v49 = 0;
          v50 = (int *)(*(_QWORD *)(v45 + 16) + 8);
          while (1)
          {
            v51 = *v50;
            v50 += 6;
            if (v51 < 0)
              break;
            if (v48 == ++v49)
            {
              LODWORD(v49) = *(_DWORD *)(v45 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v49) = 0;
        }
        if ((_DWORD)v48 != (_DWORD)v49)
        {
          v52 = v49;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::checkRenderOptionChanges(v47, *(_QWORD **)(*(_QWORD *)(v45 + 16) + 24 * v52 + 16), (re::ecs2::RenderOptions *)v538, (uint64_t)v584);
            if (*(_DWORD *)(v45 + 32) <= (v49 + 1))
              v53 = v49 + 1;
            else
              v53 = *(_DWORD *)(v45 + 32);
            v54 = v49;
            while (1)
            {
              v52 = (v54 + 1);
              if (v53 - 1 == v54)
                break;
              ++v54;
              LODWORD(v49) = v52;
              if ((*(_DWORD *)(*(_QWORD *)(v45 + 16) + 24 * v52 + 8) & 0x80000000) != 0)
                goto LABEL_69;
            }
            LODWORD(v49) = v53;
LABEL_69:
            ;
          }
          while ((_DWORD)v48 != (_DWORD)v49);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v45);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v584);
      if (*(_DWORD *)(v7 + 1936) <= (v40 + 1))
        v55 = v40 + 1;
      else
        v55 = *(_DWORD *)(v7 + 1936);
      while (1)
      {
        v43 = (v40 + 1);
        if (v55 - 1 == (_DWORD)v40)
          break;
        LODWORD(v40) = v40 + 1;
        v56 = v43;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 1920) + 72 * v43 + 8) & 0x80000000) != 0)
          goto LABEL_77;
      }
      v56 = v55;
LABEL_77:
      LODWORD(v40) = v56;
    }
    while ((_DWORD)v39 != v56);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v584);
  *(_QWORD *)v584 = v530;
  v57 = *(_QWORD *)(*(_QWORD *)(v7 + 2152)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 2144), v584)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 2256, v57);
  v58 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v531, v57);
  v59 = *(_QWORD *)(*v58 + 224);
  v60 = v58[3];
  v61 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v58[2] + 8, v60);
  if (*(_DWORD *)(v61 + 40))
    v62 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v59 + 24))(v59, v536, v58, v60, v61, v541);
  else
    v62 = 0;
  v63 = v58[5];
  v64 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v58[2] + 8, v63);
  if (*(_DWORD *)(v64 + 40))
    v62 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v59 + 32))(v59, v536, v58, v63, v64, v541);
  v65 = v58[6];
  v66 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v58[2] + 8, v65);
  if (*(_DWORD *)(v66 + 40))
  {
    v66 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, uint64_t, _BYTE *))(*(_QWORD *)v59 + 40))(v59, v536, v58, v65, v66, v541);
    if (((v62 | v66) & 1) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
  if (v62)
LABEL_85:
    v66 = re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 2256, v57);
LABEL_86:
  if (!*(_BYTE *)(v7 + 2320))
    goto LABEL_106;
  v68 = *(_QWORD *)(v7 + 2264);
  v69 = *(_DWORD *)(v7 + 2272);
  if (v68 >= 0xB)
  {
    if ((v69 & 1) != 0)
      v70 = (_QWORD *)(v7 + 2280);
    else
      v70 = *(_QWORD **)(v7 + 2288);
    v72 = 8 * v68;
    while (!*v70)
    {
      ++v70;
      v72 -= 8;
      if (!v72)
        goto LABEL_106;
    }
LABEL_104:
    v66 = *(_QWORD *)(v7 + 2304);
    if (!*(_BYTE *)(v66 + 86))
      re::ecs2::System::queueToRun((re::ecs2::System *)v66, 0.0);
    goto LABEL_106;
  }
  if ((v69 & 1) != 0)
  {
    v71 = (uint64_t *)(v7 + 2280);
    if (!v68)
      goto LABEL_106;
  }
  else
  {
    v71 = *(uint64_t **)(v7 + 2288);
    if (!v68)
      goto LABEL_106;
  }
  v73 = 0;
  v74 = 8 * v68;
  do
  {
    v75 = *v71++;
    v67 = v75;
    v73 |= v75;
    v74 -= 8;
  }
  while (v74);
  if (v73)
    goto LABEL_104;
LABEL_106:
  if (v527)
    goto LABEL_107;
  v514 = v7 + 360;
  memset(v584, 0, 36);
  *(_QWORD *)&v584[36] = 0x7FFFFFFFLL;
  v79 = *(unsigned int *)(v7 + 208);
  if ((_DWORD)v79)
  {
    v80 = 0;
    v81 = (int *)(*(_QWORD *)(v7 + 192) + 8);
    while (1)
    {
      v82 = *v81;
      v81 += 18;
      if (v82 < 0)
        break;
      if (v79 == ++v80)
      {
        LODWORD(v80) = *(_DWORD *)(v7 + 208);
        break;
      }
    }
  }
  else
  {
    LODWORD(v80) = 0;
  }
  if ((_DWORD)v79 != (_DWORD)v80)
  {
    v282 = v80;
    do
    {
      v283 = *(_QWORD *)(v7 + 192) + 72 * v282;
      v284 = v283 + 24;
      v609.i64[0] = *(_QWORD *)(v283 + 16);
      v285 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 416), &v609);
      if (v285 != -1)
      {
        v286 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v514, *(_QWORD *)(*(_QWORD *)(v7 + 424) + 16 * v285 + 8));
        v287 = *(unsigned int *)(v284 + 32);
        if ((_DWORD)v287)
        {
          v288 = 0;
          v289 = (int *)(*(_QWORD *)(v284 + 16) + 8);
          while (1)
          {
            v290 = *v289;
            v289 += 6;
            if (v290 < 0)
              break;
            if (v287 == ++v288)
            {
              LODWORD(v288) = *(_DWORD *)(v284 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v288) = 0;
        }
        if ((_DWORD)v287 != (_DWORD)v288)
        {
          v291 = v288;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::checkRenderOptionChanges(v286, *(_QWORD **)(*(_QWORD *)(v284 + 16) + 24 * v291 + 16), (re::ecs2::RenderOptions *)v538, (uint64_t)v584);
            if (*(_DWORD *)(v284 + 32) <= (v288 + 1))
              v292 = v288 + 1;
            else
              v292 = *(_DWORD *)(v284 + 32);
            v293 = v288;
            while (1)
            {
              v291 = (v293 + 1);
              if (v292 - 1 == v293)
                break;
              ++v293;
              LODWORD(v288) = v291;
              if ((*(_DWORD *)(*(_QWORD *)(v284 + 16) + 24 * v291 + 8) & 0x80000000) != 0)
                goto LABEL_320;
            }
            LODWORD(v288) = v292;
LABEL_320:
            ;
          }
          while ((_DWORD)v287 != (_DWORD)v288);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v284);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v584);
      if (*(_DWORD *)(v7 + 208) <= (v80 + 1))
        v294 = v80 + 1;
      else
        v294 = *(_DWORD *)(v7 + 208);
      while (1)
      {
        v282 = (v80 + 1);
        if (v294 - 1 == (_DWORD)v80)
          break;
        LODWORD(v80) = v80 + 1;
        v295 = v282;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 192) + 72 * v282 + 8) & 0x80000000) != 0)
          goto LABEL_328;
      }
      v295 = v294;
LABEL_328:
      LODWORD(v80) = v295;
    }
    while ((_DWORD)v79 != v295);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v584);
  v518 = v7 + 792;
  memset(v584, 0, 36);
  *(_QWORD *)&v584[36] = 0x7FFFFFFFLL;
  v296 = *(unsigned int *)(v7 + 640);
  if ((_DWORD)v296)
  {
    v297 = 0;
    v298 = (int *)(*(_QWORD *)(v7 + 624) + 8);
    while (1)
    {
      v299 = *v298;
      v298 += 18;
      if (v299 < 0)
        break;
      if (v296 == ++v297)
      {
        LODWORD(v297) = *(_DWORD *)(v7 + 640);
        break;
      }
    }
  }
  else
  {
    LODWORD(v297) = 0;
  }
  if ((_DWORD)v296 != (_DWORD)v297)
  {
    v300 = v297;
    do
    {
      v301 = *(_QWORD *)(v7 + 624) + 72 * v300;
      v302 = v301 + 24;
      v609.i64[0] = *(_QWORD *)(v301 + 16);
      v303 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 848), &v609);
      if (v303 != -1)
      {
        v304 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v518, *(_QWORD *)(*(_QWORD *)(v7 + 856) + 16 * v303 + 8));
        v305 = *(unsigned int *)(v302 + 32);
        if ((_DWORD)v305)
        {
          v306 = 0;
          v307 = (int *)(*(_QWORD *)(v302 + 16) + 8);
          while (1)
          {
            v308 = *v307;
            v307 += 6;
            if (v308 < 0)
              break;
            if (v305 == ++v306)
            {
              LODWORD(v306) = *(_DWORD *)(v302 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v306) = 0;
        }
        if ((_DWORD)v305 != (_DWORD)v306)
        {
          v309 = v306;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::checkRenderOptionChanges(v304, *(_QWORD **)(*(_QWORD *)(v302 + 16) + 24 * v309 + 16), (re::ecs2::RenderOptions *)v538, (uint64_t)v584);
            if (*(_DWORD *)(v302 + 32) <= (v306 + 1))
              v310 = v306 + 1;
            else
              v310 = *(_DWORD *)(v302 + 32);
            v311 = v306;
            while (1)
            {
              v309 = (v311 + 1);
              if (v310 - 1 == v311)
                break;
              ++v311;
              LODWORD(v306) = v309;
              if ((*(_DWORD *)(*(_QWORD *)(v302 + 16) + 24 * v309 + 8) & 0x80000000) != 0)
                goto LABEL_354;
            }
            LODWORD(v306) = v310;
LABEL_354:
            ;
          }
          while ((_DWORD)v305 != (_DWORD)v306);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v302);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v584);
      if (*(_DWORD *)(v7 + 640) <= (v297 + 1))
        v312 = v297 + 1;
      else
        v312 = *(_DWORD *)(v7 + 640);
      while (1)
      {
        v300 = (v297 + 1);
        if (v312 - 1 == (_DWORD)v297)
          break;
        LODWORD(v297) = v297 + 1;
        v313 = v300;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 624) + 72 * v300 + 8) & 0x80000000) != 0)
          goto LABEL_362;
      }
      v313 = v312;
LABEL_362:
      LODWORD(v297) = v313;
    }
    while ((_DWORD)v296 != v313);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v584);
  v521 = v7 + 1224;
  memset(v584, 0, 36);
  *(_QWORD *)&v584[36] = 0x7FFFFFFFLL;
  v314 = *(unsigned int *)(v7 + 1072);
  if ((_DWORD)v314)
  {
    v315 = 0;
    v316 = (int *)(*(_QWORD *)(v7 + 1056) + 8);
    while (1)
    {
      v317 = *v316;
      v316 += 18;
      if (v317 < 0)
        break;
      if (v314 == ++v315)
      {
        LODWORD(v315) = *(_DWORD *)(v7 + 1072);
        break;
      }
    }
  }
  else
  {
    LODWORD(v315) = 0;
  }
  if ((_DWORD)v314 != (_DWORD)v315)
  {
    v318 = v315;
    do
    {
      v319 = *(_QWORD *)(v7 + 1056) + 72 * v318;
      v320 = v319 + 24;
      v609.i64[0] = *(_QWORD *)(v319 + 16);
      v321 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 1280), &v609);
      if (v321 != -1)
      {
        v322 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v521, *(_QWORD *)(*(_QWORD *)(v7 + 1288) + 16 * v321 + 8));
        v323 = *(unsigned int *)(v320 + 32);
        if ((_DWORD)v323)
        {
          v324 = 0;
          v325 = (int *)(*(_QWORD *)(v320 + 16) + 8);
          while (1)
          {
            v326 = *v325;
            v325 += 6;
            if (v326 < 0)
              break;
            if (v323 == ++v324)
            {
              LODWORD(v324) = *(_DWORD *)(v320 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v324) = 0;
        }
        if ((_DWORD)v323 != (_DWORD)v324)
        {
          v327 = v324;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::checkRenderOptionChanges(v322, *(_QWORD **)(*(_QWORD *)(v320 + 16) + 24 * v327 + 16), (re::ecs2::RenderOptions *)v538, (uint64_t)v584);
            if (*(_DWORD *)(v320 + 32) <= (v324 + 1))
              v328 = v324 + 1;
            else
              v328 = *(_DWORD *)(v320 + 32);
            v329 = v324;
            while (1)
            {
              v327 = (v329 + 1);
              if (v328 - 1 == v329)
                break;
              ++v329;
              LODWORD(v324) = v327;
              if ((*(_DWORD *)(*(_QWORD *)(v320 + 16) + 24 * v327 + 8) & 0x80000000) != 0)
                goto LABEL_388;
            }
            LODWORD(v324) = v328;
LABEL_388:
            ;
          }
          while ((_DWORD)v323 != (_DWORD)v324);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v320);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v584);
      if (*(_DWORD *)(v7 + 1072) <= (v315 + 1))
        v330 = v315 + 1;
      else
        v330 = *(_DWORD *)(v7 + 1072);
      while (1)
      {
        v318 = (v315 + 1);
        if (v330 - 1 == (_DWORD)v315)
          break;
        LODWORD(v315) = v315 + 1;
        v331 = v318;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 1056) + 72 * v318 + 8) & 0x80000000) != 0)
          goto LABEL_396;
      }
      v331 = v330;
LABEL_396:
      LODWORD(v315) = v331;
    }
    while ((_DWORD)v314 != v331);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v584);
  v526 = v7 + 1656;
  memset(v584, 0, 36);
  *(_QWORD *)&v584[36] = 0x7FFFFFFFLL;
  v332 = *(unsigned int *)(v7 + 1504);
  if ((_DWORD)v332)
  {
    v333 = 0;
    v334 = (int *)(*(_QWORD *)(v7 + 1488) + 8);
    while (1)
    {
      v335 = *v334;
      v334 += 18;
      if (v335 < 0)
        break;
      if (v332 == ++v333)
      {
        LODWORD(v333) = *(_DWORD *)(v7 + 1504);
        break;
      }
    }
  }
  else
  {
    LODWORD(v333) = 0;
  }
  if ((_DWORD)v332 != (_DWORD)v333)
  {
    v336 = v333;
    do
    {
      v337 = *(_QWORD *)(v7 + 1488) + 72 * v336;
      v338 = v337 + 24;
      v609.i64[0] = *(_QWORD *)(v337 + 16);
      v339 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 1712), &v609);
      if (v339 != -1)
      {
        v340 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v526, *(_QWORD *)(*(_QWORD *)(v7 + 1720) + 16 * v339 + 8));
        v341 = *(unsigned int *)(v338 + 32);
        if ((_DWORD)v341)
        {
          v342 = 0;
          v343 = (int *)(*(_QWORD *)(v338 + 16) + 8);
          while (1)
          {
            v344 = *v343;
            v343 += 6;
            if (v344 < 0)
              break;
            if (v341 == ++v342)
            {
              LODWORD(v342) = *(_DWORD *)(v338 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v342) = 0;
        }
        if ((_DWORD)v341 != (_DWORD)v342)
        {
          v345 = v342;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::checkRenderOptionChanges(v340, *(_QWORD **)(*(_QWORD *)(v338 + 16) + 24 * v345 + 16), (re::ecs2::RenderOptions *)v538, (uint64_t)v584);
            if (*(_DWORD *)(v338 + 32) <= (v342 + 1))
              v346 = v342 + 1;
            else
              v346 = *(_DWORD *)(v338 + 32);
            v347 = v342;
            while (1)
            {
              v345 = (v347 + 1);
              if (v346 - 1 == v347)
                break;
              ++v347;
              LODWORD(v342) = v345;
              if ((*(_DWORD *)(*(_QWORD *)(v338 + 16) + 24 * v345 + 8) & 0x80000000) != 0)
                goto LABEL_422;
            }
            LODWORD(v342) = v346;
LABEL_422:
            ;
          }
          while ((_DWORD)v341 != (_DWORD)v342);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v338);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v584);
      if (*(_DWORD *)(v7 + 1504) <= (v333 + 1))
        v348 = v333 + 1;
      else
        v348 = *(_DWORD *)(v7 + 1504);
      while (1)
      {
        v336 = (v333 + 1);
        if (v348 - 1 == (_DWORD)v333)
          break;
        LODWORD(v333) = v333 + 1;
        v349 = v336;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 1488) + 72 * v336 + 8) & 0x80000000) != 0)
          goto LABEL_430;
      }
      v349 = v348;
LABEL_430:
      LODWORD(v333) = v349;
    }
    while ((_DWORD)v332 != v349);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v584);
  v529 = v7 + 2520;
  memset(v584, 0, 36);
  *(_QWORD *)&v584[36] = 0x7FFFFFFFLL;
  v350 = *(unsigned int *)(v7 + 2368);
  if ((_DWORD)v350)
  {
    v351 = 0;
    v352 = (int *)(*(_QWORD *)(v7 + 2352) + 8);
    while (1)
    {
      v353 = *v352;
      v352 += 18;
      if (v353 < 0)
        break;
      if (v350 == ++v351)
      {
        LODWORD(v351) = *(_DWORD *)(v7 + 2368);
        break;
      }
    }
  }
  else
  {
    LODWORD(v351) = 0;
  }
  if ((_DWORD)v350 != (_DWORD)v351)
  {
    v354 = v351;
    do
    {
      v355 = *(_QWORD *)(v7 + 2352) + 72 * v354;
      v356 = v355 + 24;
      v609.i64[0] = *(_QWORD *)(v355 + 16);
      v357 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 2576), &v609);
      if (v357 != -1)
      {
        v358 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v529, *(_QWORD *)(*(_QWORD *)(v7 + 2584) + 16 * v357 + 8));
        v359 = *(unsigned int *)(v356 + 32);
        if ((_DWORD)v359)
        {
          v360 = 0;
          v361 = (int *)(*(_QWORD *)(v356 + 16) + 8);
          while (1)
          {
            v362 = *v361;
            v361 += 6;
            if (v362 < 0)
              break;
            if (v359 == ++v360)
            {
              LODWORD(v360) = *(_DWORD *)(v356 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v360) = 0;
        }
        if ((_DWORD)v359 != (_DWORD)v360)
        {
          v363 = v360;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::checkRenderOptionChanges(v358, *(_QWORD **)(*(_QWORD *)(v356 + 16) + 24 * v363 + 16), (re::ecs2::RenderOptions *)v538, (uint64_t)v584);
            if (*(_DWORD *)(v356 + 32) <= (v360 + 1))
              v364 = v360 + 1;
            else
              v364 = *(_DWORD *)(v356 + 32);
            v365 = v360;
            while (1)
            {
              v363 = (v365 + 1);
              if (v364 - 1 == v365)
                break;
              ++v365;
              LODWORD(v360) = v363;
              if ((*(_DWORD *)(*(_QWORD *)(v356 + 16) + 24 * v363 + 8) & 0x80000000) != 0)
                goto LABEL_456;
            }
            LODWORD(v360) = v364;
LABEL_456:
            ;
          }
          while ((_DWORD)v359 != (_DWORD)v360);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v356);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v584);
      if (*(_DWORD *)(v7 + 2368) <= (v351 + 1))
        v366 = v351 + 1;
      else
        v366 = *(_DWORD *)(v7 + 2368);
      while (1)
      {
        v354 = (v351 + 1);
        if (v366 - 1 == (_DWORD)v351)
          break;
        LODWORD(v351) = v351 + 1;
        v367 = v354;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 2352) + 72 * v354 + 8) & 0x80000000) != 0)
          goto LABEL_464;
      }
      v367 = v366;
LABEL_464:
      LODWORD(v351) = v367;
    }
    while ((_DWORD)v350 != v367);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v584);
  v533 = v7 + 2952;
  memset(v584, 0, 36);
  *(_QWORD *)&v584[36] = 0x7FFFFFFFLL;
  v368 = *(unsigned int *)(v7 + 2800);
  if ((_DWORD)v368)
  {
    v369 = 0;
    v370 = (int *)(*(_QWORD *)(v7 + 2784) + 8);
    while (1)
    {
      v371 = *v370;
      v370 += 18;
      if (v371 < 0)
        break;
      if (v368 == ++v369)
      {
        LODWORD(v369) = *(_DWORD *)(v7 + 2800);
        break;
      }
    }
  }
  else
  {
    LODWORD(v369) = 0;
  }
  if ((_DWORD)v368 != (_DWORD)v369)
  {
    v372 = v369;
    do
    {
      v373 = *(_QWORD *)(v7 + 2784) + 72 * v372;
      v374 = v373 + 24;
      v609.i64[0] = *(_QWORD *)(v373 + 16);
      v375 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 3008), &v609);
      if (v375 != -1)
      {
        v376 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v533, *(_QWORD *)(*(_QWORD *)(v7 + 3016) + 16 * v375 + 8));
        v377 = *(unsigned int *)(v374 + 32);
        if ((_DWORD)v377)
        {
          v378 = 0;
          v379 = (int *)(*(_QWORD *)(v374 + 16) + 8);
          while (1)
          {
            v380 = *v379;
            v379 += 6;
            if (v380 < 0)
              break;
            if (v377 == ++v378)
            {
              LODWORD(v378) = *(_DWORD *)(v374 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v378) = 0;
        }
        if ((_DWORD)v377 != (_DWORD)v378)
        {
          v381 = v378;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::checkRenderOptionChanges(v376, *(_QWORD **)(*(_QWORD *)(v374 + 16) + 24 * v381 + 16), (re::ecs2::RenderOptions *)v538, (uint64_t)v584);
            if (*(_DWORD *)(v374 + 32) <= (v378 + 1))
              v382 = v378 + 1;
            else
              v382 = *(_DWORD *)(v374 + 32);
            v383 = v378;
            while (1)
            {
              v381 = (v383 + 1);
              if (v382 - 1 == v383)
                break;
              ++v383;
              LODWORD(v378) = v381;
              if ((*(_DWORD *)(*(_QWORD *)(v374 + 16) + 24 * v381 + 8) & 0x80000000) != 0)
                goto LABEL_490;
            }
            LODWORD(v378) = v382;
LABEL_490:
            ;
          }
          while ((_DWORD)v377 != (_DWORD)v378);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v374);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v584);
      if (*(_DWORD *)(v7 + 2800) <= (v369 + 1))
        v384 = v369 + 1;
      else
        v384 = *(_DWORD *)(v7 + 2800);
      while (1)
      {
        v372 = (v369 + 1);
        if (v384 - 1 == (_DWORD)v369)
          break;
        LODWORD(v369) = v369 + 1;
        v385 = v372;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 2784) + 72 * v372 + 8) & 0x80000000) != 0)
          goto LABEL_498;
      }
      v385 = v384;
LABEL_498:
      LODWORD(v369) = v385;
    }
    while ((_DWORD)v368 != v385);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v584);
  *(_QWORD *)v584 = v530;
  v386 = *(_QWORD *)(*(_QWORD *)(v7 + 424)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 416), v584)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 528, v386);
  v387 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v514, v386);
  v388 = *(_QWORD *)(*v387 + 224);
  v389 = v387[3];
  v390 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v387[2] + 8, v389);
  if (*(_DWORD *)(v390 + 40))
    v391 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v388 + 24))(v388, v536, v387, v389, v390, v541);
  else
    v391 = 0;
  v392 = v387[5];
  v393 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v387[2] + 8, v392);
  if (*(_DWORD *)(v393 + 40))
    v391 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v388 + 32))(v388, v536, v387, v392, v393, v541);
  v394 = v387[6];
  v395 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v387[2] + 8, v394);
  if (*(_DWORD *)(v395 + 40))
  {
    if (((v391 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v388 + 40))(v388, v536, v387, v394, v395, v541)) & 1) == 0)goto LABEL_507;
    goto LABEL_506;
  }
  if (v391)
LABEL_506:
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 528, v386);
LABEL_507:
  if (!*(_BYTE *)(v7 + 592))
    goto LABEL_527;
  v396 = *(_QWORD *)(v7 + 536);
  v397 = *(_DWORD *)(v7 + 544);
  if (v396 < 0xB)
  {
    if ((v397 & 1) != 0)
      v399 = (uint64_t *)(v7 + 552);
    else
      v399 = *(uint64_t **)(v7 + 560);
    if (!v396)
      goto LABEL_527;
    v401 = 0;
    v402 = 8 * v396;
    do
    {
      v403 = *v399++;
      v401 |= v403;
      v402 -= 8;
    }
    while (v402);
    if (!v401)
      goto LABEL_527;
  }
  else
  {
    if ((v397 & 1) != 0)
      v398 = (_QWORD *)(v7 + 552);
    else
      v398 = *(_QWORD **)(v7 + 560);
    v400 = 8 * v396;
    while (!*v398)
    {
      ++v398;
      v400 -= 8;
      if (!v400)
        goto LABEL_527;
    }
  }
  v404 = *(re::ecs2::System **)(v7 + 576);
  if (!*((_BYTE *)v404 + 86))
    re::ecs2::System::queueToRun(v404, 0.0);
LABEL_527:
  *(_QWORD *)v584 = v530;
  v405 = *(_QWORD *)(*(_QWORD *)(v7 + 856)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 848), v584)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 960, v405);
  v406 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v518, v405);
  v407 = *(_QWORD *)(*v406 + 224);
  v408 = v406[3];
  v409 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v406[2] + 8, v408);
  if (*(_DWORD *)(v409 + 40))
    v410 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v407 + 24))(v407, v536, v406, v408, v409, v541);
  else
    v410 = 0;
  v411 = v406[5];
  v412 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v406[2] + 8, v411);
  if (*(_DWORD *)(v412 + 40))
    v410 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v407 + 32))(v407, v536, v406, v411, v412, v541);
  v413 = v406[6];
  v414 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v406[2] + 8, v413);
  if (*(_DWORD *)(v414 + 40))
  {
    if (((v410 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v407 + 40))(v407, v536, v406, v413, v414, v541)) & 1) == 0)goto LABEL_535;
    goto LABEL_534;
  }
  if (v410)
LABEL_534:
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 960, v405);
LABEL_535:
  if (!*(_BYTE *)(v7 + 1024))
    goto LABEL_555;
  v415 = *(_QWORD *)(v7 + 968);
  v416 = *(_DWORD *)(v7 + 976);
  if (v415 < 0xB)
  {
    if ((v416 & 1) != 0)
      v418 = (uint64_t *)(v7 + 984);
    else
      v418 = *(uint64_t **)(v7 + 992);
    if (!v415)
      goto LABEL_555;
    v420 = 0;
    v421 = 8 * v415;
    do
    {
      v422 = *v418++;
      v420 |= v422;
      v421 -= 8;
    }
    while (v421);
    if (!v420)
      goto LABEL_555;
  }
  else
  {
    if ((v416 & 1) != 0)
      v417 = (_QWORD *)(v7 + 984);
    else
      v417 = *(_QWORD **)(v7 + 992);
    v419 = 8 * v415;
    while (!*v417)
    {
      ++v417;
      v419 -= 8;
      if (!v419)
        goto LABEL_555;
    }
  }
  v423 = *(re::ecs2::System **)(v7 + 1008);
  if (!*((_BYTE *)v423 + 86))
    re::ecs2::System::queueToRun(v423, 0.0);
LABEL_555:
  *(_QWORD *)v584 = v530;
  v424 = *(_QWORD *)(*(_QWORD *)(v7 + 1288)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 1280), v584)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 1392, v424);
  v425 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v521, v424);
  v426 = *(_QWORD *)(*v425 + 224);
  v427 = v425[3];
  v428 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v425[2] + 8, v427);
  if (*(_DWORD *)(v428 + 40))
    v429 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v426 + 24))(v426, v536, v425, v427, v428, v541);
  else
    v429 = 0;
  v430 = v425[5];
  v431 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v425[2] + 8, v430);
  if (*(_DWORD *)(v431 + 40))
    v429 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v426 + 32))(v426, v536, v425, v430, v431, v541);
  v432 = v425[6];
  v433 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v425[2] + 8, v432);
  if (*(_DWORD *)(v433 + 40))
  {
    if (((v429 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v426 + 40))(v426, v536, v425, v432, v433, v541)) & 1) == 0)goto LABEL_563;
    goto LABEL_562;
  }
  if (v429)
LABEL_562:
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 1392, v424);
LABEL_563:
  if (!*(_BYTE *)(v7 + 1456))
    goto LABEL_583;
  v434 = *(_QWORD *)(v7 + 1400);
  v435 = *(_DWORD *)(v7 + 1408);
  if (v434 < 0xB)
  {
    if ((v435 & 1) != 0)
      v437 = (uint64_t *)(v7 + 1416);
    else
      v437 = *(uint64_t **)(v7 + 1424);
    if (!v434)
      goto LABEL_583;
    v439 = 0;
    v440 = 8 * v434;
    do
    {
      v441 = *v437++;
      v439 |= v441;
      v440 -= 8;
    }
    while (v440);
    if (!v439)
      goto LABEL_583;
  }
  else
  {
    if ((v435 & 1) != 0)
      v436 = (_QWORD *)(v7 + 1416);
    else
      v436 = *(_QWORD **)(v7 + 1424);
    v438 = 8 * v434;
    while (!*v436)
    {
      ++v436;
      v438 -= 8;
      if (!v438)
        goto LABEL_583;
    }
  }
  v442 = *(re::ecs2::System **)(v7 + 1440);
  if (!*((_BYTE *)v442 + 86))
    re::ecs2::System::queueToRun(v442, 0.0);
LABEL_583:
  *(_QWORD *)v584 = v530;
  v443 = *(_QWORD *)(*(_QWORD *)(v7 + 1720)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 1712), v584)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 1824, v443);
  v444 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v526, v443);
  v445 = *(_QWORD *)(*v444 + 224);
  v446 = v444[3];
  v447 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v444[2] + 8, v446);
  if (*(_DWORD *)(v447 + 40))
    v448 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v445 + 24))(v445, v536, v444, v446, v447, v541);
  else
    v448 = 0;
  v449 = v444[5];
  v450 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v444[2] + 8, v449);
  if (*(_DWORD *)(v450 + 40))
    v448 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v445 + 32))(v445, v536, v444, v449, v450, v541);
  v451 = v444[6];
  v452 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v444[2] + 8, v451);
  if (*(_DWORD *)(v452 + 40))
  {
    if (((v448 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v445 + 40))(v445, v536, v444, v451, v452, v541)) & 1) == 0)goto LABEL_591;
    goto LABEL_590;
  }
  if (v448)
LABEL_590:
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 1824, v443);
LABEL_591:
  if (!*(_BYTE *)(v7 + 1888))
    goto LABEL_611;
  v453 = *(_QWORD *)(v7 + 1832);
  v454 = *(_DWORD *)(v7 + 1840);
  if (v453 < 0xB)
  {
    if ((v454 & 1) != 0)
      v456 = (uint64_t *)(v7 + 1848);
    else
      v456 = *(uint64_t **)(v7 + 1856);
    if (!v453)
      goto LABEL_611;
    v458 = 0;
    v459 = 8 * v453;
    do
    {
      v460 = *v456++;
      v458 |= v460;
      v459 -= 8;
    }
    while (v459);
    if (!v458)
      goto LABEL_611;
  }
  else
  {
    if ((v454 & 1) != 0)
      v455 = (_QWORD *)(v7 + 1848);
    else
      v455 = *(_QWORD **)(v7 + 1856);
    v457 = 8 * v453;
    while (!*v455)
    {
      ++v455;
      v457 -= 8;
      if (!v457)
        goto LABEL_611;
    }
  }
  v461 = *(re::ecs2::System **)(v7 + 1872);
  if (!*((_BYTE *)v461 + 86))
    re::ecs2::System::queueToRun(v461, 0.0);
LABEL_611:
  *(_QWORD *)v584 = v530;
  v462 = *(_QWORD *)(*(_QWORD *)(v7 + 2584)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 2576), v584)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 2688, v462);
  v463 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v529, v462);
  v464 = *(_QWORD *)(*v463 + 224);
  v465 = v463[3];
  v466 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v463[2] + 8, v465);
  if (*(_DWORD *)(v466 + 40))
    v467 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v464 + 24))(v464, v536, v463, v465, v466, v541);
  else
    v467 = 0;
  v468 = v463[5];
  v469 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v463[2] + 8, v468);
  if (*(_DWORD *)(v469 + 40))
    v467 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v464 + 32))(v464, v536, v463, v468, v469, v541);
  v470 = v463[6];
  v471 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v463[2] + 8, v470);
  if (*(_DWORD *)(v471 + 40))
  {
    if (((v467 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v464 + 40))(v464, v536, v463, v470, v471, v541)) & 1) == 0)goto LABEL_619;
    goto LABEL_618;
  }
  if (v467)
LABEL_618:
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 2688, v462);
LABEL_619:
  if (!*(_BYTE *)(v7 + 2752))
    goto LABEL_639;
  v472 = *(_QWORD *)(v7 + 2696);
  v473 = *(_DWORD *)(v7 + 2704);
  if (v472 < 0xB)
  {
    if ((v473 & 1) != 0)
      v475 = (uint64_t *)(v7 + 2712);
    else
      v475 = *(uint64_t **)(v7 + 2720);
    if (!v472)
      goto LABEL_639;
    v477 = 0;
    v478 = 8 * v472;
    do
    {
      v479 = *v475++;
      v477 |= v479;
      v478 -= 8;
    }
    while (v478);
    if (!v477)
      goto LABEL_639;
  }
  else
  {
    if ((v473 & 1) != 0)
      v474 = (_QWORD *)(v7 + 2712);
    else
      v474 = *(_QWORD **)(v7 + 2720);
    v476 = 8 * v472;
    while (!*v474)
    {
      ++v474;
      v476 -= 8;
      if (!v476)
        goto LABEL_639;
    }
  }
  v480 = *(re::ecs2::System **)(v7 + 2736);
  if (!*((_BYTE *)v480 + 86))
    re::ecs2::System::queueToRun(v480, 0.0);
LABEL_639:
  *(_QWORD *)v584 = v530;
  v481 = *(_QWORD *)(*(_QWORD *)(v7 + 3016)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 3008), v584)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 3120, v481);
  v482 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v533, v481);
  v483 = *(_QWORD *)(*v482 + 224);
  v484 = v482[3];
  v485 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v482[2] + 8, v484);
  if (*(_DWORD *)(v485 + 40))
    v486 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v483 + 24))(v483, v536, v482, v484, v485, v541);
  else
    v486 = 0;
  v487 = v482[5];
  v488 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v482[2] + 8, v487);
  if (*(_DWORD *)(v488 + 40))
    v486 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)v483 + 32))(v483, v536, v482, v487, v488, v541);
  v65 = v482[6];
  v66 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v482[2] + 8, v65);
  if (*(_DWORD *)(v66 + 40))
  {
    v66 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, uint64_t, _BYTE *))(*(_QWORD *)v483 + 40))(v483, v536, v482, v65, v66, v541);
    if (((v486 | v66) & 1) == 0)
      goto LABEL_647;
    goto LABEL_646;
  }
  if (v486)
LABEL_646:
    v66 = re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 3120, v481);
LABEL_647:
  if (!*(_BYTE *)(v7 + 3184))
    goto LABEL_107;
  v489 = *(_QWORD *)(v7 + 3128);
  v490 = *(_DWORD *)(v7 + 3136);
  if (v489 < 0xB)
  {
    if ((v490 & 1) != 0)
      v492 = (uint64_t *)(v7 + 3144);
    else
      v492 = *(uint64_t **)(v7 + 3152);
    if (!v489)
      goto LABEL_107;
    v494 = 0;
    v495 = 8 * v489;
    do
    {
      v496 = *v492++;
      v67 = v496;
      v494 |= v496;
      v495 -= 8;
    }
    while (v495);
    if (!v494)
      goto LABEL_107;
  }
  else
  {
    if ((v490 & 1) != 0)
      v491 = (_QWORD *)(v7 + 3144);
    else
      v491 = *(_QWORD **)(v7 + 3152);
    v493 = 8 * v489;
    while (!*v491)
    {
      ++v491;
      v493 -= 8;
      if (!v493)
        goto LABEL_107;
    }
  }
  v66 = *(_QWORD *)(v7 + 3168);
  if (!*(_BYTE *)(v66 + 86))
    re::ecs2::System::queueToRun((re::ecs2::System *)v66, 0.0);
LABEL_107:
  v506 = (re::RenderFrameData *)(v507 + 33);
  v76 = HIDWORD(v581);
  if (HIDWORD(v581))
  {
    v67 = v582;
    if (v582)
    {
      v77 = 0;
      v78 = (_DWORD *)v581;
      while ((*v78 & 0x80000000) == 0)
      {
        v78 += 70;
        if (v582 == ++v77)
        {
          LODWORD(v77) = v582;
          break;
        }
      }
      LODWORD(v65) = v77;
    }
    else
    {
      LODWORD(v65) = 0;
    }
    v83 = (float32x4_t *)&v580;
    v84 = (float32x4_t *)&v580;
  }
  else
  {
    v83 = &v547;
    v84 = &v547 + 17 * v546.i64[0];
  }
  v85 = v83 == v84;
  if (HIDWORD(v581))
    v85 = v67 == (_DWORD)v65;
  if (!v85)
  {
    v532 = 0;
    v90 = 0;
    v89 = 0;
    v88 = 0;
    v87 = 0;
    v86 = 0;
    v501 = v84;
    v503 = HIDWORD(v581);
    v502 = v67;
    while (1)
    {
      v528 = v87;
      v522 = v88;
      if (v76)
      {
        v91 = v83[1].i64[0] + 280 * v65;
        v92 = (float32x4_t *)(v91 + 8);
        v93 = (__int8 *)(v91 + 32);
      }
      else
      {
        v93 = &v83[1].i8[8];
        v92 = v83;
      }
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v530, (const re::ecs2::Scene *)v92->i64[1], v507, v537);
      v508 = *((_QWORD *)v93 + 3);
      v510 = *((_QWORD *)v93 + 8);
      v512 = *((_QWORD *)v93 + 13);
      v515 = *((_QWORD *)v93 + 18);
      v516 = *((_QWORD *)v93 + 23);
      v519 = *((_QWORD *)v93 + 28);
      v539[0] = *(_QWORD *)&v537[0] >> 1;
      v94 = re::RenderFrameData::stream(v506, (const re::WeakStringID *)v539);
      v95 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v94, v540);
      if (!v95)
      {
        v128 = *(_QWORD *)(*(_QWORD *)(v94 + 48) + 8);
        v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128 + 32))(v128, 56, 8);
        *(_QWORD *)v129 = 0;
        *(_QWORD *)(v129 + 8) = 0;
        *(_DWORD *)(v129 + 16) = 1;
        *(_QWORD *)(v129 + 32) = 0;
        *(_QWORD *)(v129 + 40) = 0;
        *(_QWORD *)(v129 + 24) = 0;
        *(_DWORD *)(v129 + 48) = 0;
        v130 = (re *)re::BucketArray<re::LightInfoArrays,4ul>::init(v129, v128, 1uLL);
        v131 = re::globalAllocators(v130)[2];
        v609.i64[0] = (uint64_t)&off_24ED60AB0;
        v609.i64[1] = v128;
        v610.i64[1] = v131;
        v611.i64[0] = (uint64_t)&v609;
        *(_QWORD *)&v584[8] = v129;
        *(_QWORD *)v584 = std::__any_imp::_SmallHandler<re::BucketArray<re::LightInfoArrays,4ul> *>::__handle[abi:nn180100];
        *((_QWORD *)&v585 + 1) = v131;
        v586 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v584[32], (uint64_t)&v609);
        v95 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v94, v540, (re *)v584);
        if (v586)
        {
          *(_QWORD *)v544 = v584;
          (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v586 + 16))(v586, v544);
          if (v586)
          {
            (**(void (***)(_BYTE *))v586)(v586);
            if (v586 != &v584[32])
              (*(void (**)(_QWORD))(**((_QWORD **)&v585 + 1) + 40))(*((_QWORD *)&v585 + 1));
            v586 = 0;
          }
        }
        if (*(_QWORD *)v584)
          (*(void (**)(int))v584)(0);
        if (v611.i64[0])
        {
          (**(void (***)(uint64_t))v611.i64[0])(v611.i64[0]);
          if ((float32x4_t *)v611.i64[0] != &v609)
            (*(void (**)(uint64_t))(*(_QWORD *)v610.i64[1] + 40))(v610.i64[1]);
        }
      }
      v97 = *(_WORD *)v93;
      v98 = *((_QWORD *)v93 + 2);
      *(_QWORD *)&v584[8] = *((_QWORD *)v93 + 1);
      *((_QWORD *)v93 + 1) = 0;
      *(_QWORD *)&v584[16] = v98;
      *((_QWORD *)v93 + 2) = 0;
      *(_QWORD *)&v584[24] = *((_QWORD *)v93 + 3);
      *((_QWORD *)v93 + 3) = 0;
      v99 = *((_QWORD *)v93 + 6);
      *(_QWORD *)&v584[40] = *((_QWORD *)v93 + 5);
      *((_QWORD *)v93 + 5) = 0;
      ++*((_DWORD *)v93 + 8);
      *(_DWORD *)&v584[32] = 1;
      *(_QWORD *)&v585 = v99;
      *((_QWORD *)v93 + 6) = 0;
      v100 = (_BYTE *)*((_QWORD *)v93 + 8);
      *((_QWORD *)&v585 + 1) = *((_QWORD *)v93 + 7);
      *((_QWORD *)v93 + 7) = 0;
      v586 = v100;
      *((_QWORD *)v93 + 8) = 0;
      v101 = *((_QWORD *)v93 + 11);
      v588 = *((_QWORD *)v93 + 10);
      *((_QWORD *)v93 + 10) = 0;
      ++*((_DWORD *)v93 + 18);
      v587 = 1;
      v589 = v101;
      *((_QWORD *)v93 + 11) = 0;
      v102 = *((_QWORD *)v93 + 13);
      v590 = *((_QWORD *)v93 + 12);
      *((_QWORD *)v93 + 12) = 0;
      v591 = v102;
      *((_QWORD *)v93 + 13) = 0;
      v103 = *((_QWORD *)v93 + 16);
      v593 = *((_QWORD *)v93 + 15);
      *((_QWORD *)v93 + 15) = 0;
      ++*((_DWORD *)v93 + 28);
      v592 = 1;
      v594 = v103;
      *((_QWORD *)v93 + 16) = 0;
      v104 = *((_QWORD *)v93 + 18);
      v595 = *((_QWORD *)v93 + 17);
      *((_QWORD *)v93 + 17) = 0;
      v596 = v104;
      *((_QWORD *)v93 + 18) = 0;
      v105 = *((_QWORD *)v93 + 21);
      v598 = *((_QWORD *)v93 + 20);
      *((_QWORD *)v93 + 20) = 0;
      ++*((_DWORD *)v93 + 38);
      v597 = 1;
      v599 = v105;
      *((_QWORD *)v93 + 21) = 0;
      v106 = *((_QWORD *)v93 + 23);
      v600 = *((_QWORD *)v93 + 22);
      *((_QWORD *)v93 + 22) = 0;
      v601 = v106;
      *((_QWORD *)v93 + 23) = 0;
      v107 = *((_QWORD *)v93 + 26);
      v603 = *((_QWORD *)v93 + 25);
      *((_QWORD *)v93 + 25) = 0;
      ++*((_DWORD *)v93 + 48);
      v602 = 1;
      v604 = v107;
      *((_QWORD *)v93 + 26) = 0;
      v108 = *((_QWORD *)v93 + 28);
      v605 = *((_QWORD *)v93 + 27);
      *((_QWORD *)v93 + 27) = 0;
      v606 = v108;
      *((_QWORD *)v93 + 28) = 0;
      v608 = *((_QWORD *)v93 + 30);
      *((_QWORD *)v93 + 30) = 0;
      ++*((_DWORD *)v93 + 58);
      v607 = 1;
      v109 = *(_QWORD *)(v96 + 40);
      v110 = *(_QWORD *)(v96 + 8);
      *(_WORD *)v584 = v97;
      if (v109 + 1 > 4 * v110)
      {
        re::BucketArray<re::LightInfoArrays,4ul>::setBucketsCapacity((_QWORD *)v96, (v109 + 4) >> 2);
        v110 = *(_QWORD *)(v96 + 8);
      }
      v111 = v109 >> 2;
      if (v110 <= v109 >> 2)
        goto LABEL_668;
      if ((*(_BYTE *)(v96 + 16) & 1) != 0)
        v112 = v96 + 24;
      else
        v112 = *(_QWORD *)(v96 + 32);
      v113 = *(_QWORD *)(v112 + 8 * v111);
      ++*(_QWORD *)(v96 + 40);
      ++*(_DWORD *)(v96 + 48);
      v114 = v113 + 248 * (v109 & 3);
      *(_WORD *)v114 = *(_WORD *)v584;
      *(_QWORD *)(v114 + 40) = 0;
      *(_QWORD *)(v114 + 16) = 0;
      *(_QWORD *)(v114 + 24) = 0;
      *(_QWORD *)(v114 + 8) = 0;
      *(_DWORD *)(v114 + 32) = 0;
      *(_QWORD *)(v114 + 8) = *(_QWORD *)&v584[8];
      *(_QWORD *)&v584[8] = 0;
      *(_QWORD *)(v114 + 16) = *(_QWORD *)&v584[16];
      *(_QWORD *)&v584[16] = 0;
      *(_QWORD *)(v114 + 24) = *(_QWORD *)&v584[24];
      *(_QWORD *)&v584[24] = 0;
      *(_QWORD *)(v114 + 40) = *(_QWORD *)&v584[40];
      *(_QWORD *)&v584[40] = 0;
      ++*(_DWORD *)&v584[32];
      ++*(_DWORD *)(v114 + 32);
      *(_QWORD *)(v114 + 80) = 0;
      *(_QWORD *)(v114 + 56) = 0;
      *(_QWORD *)(v114 + 64) = 0;
      *(_QWORD *)(v114 + 48) = 0;
      *(_DWORD *)(v114 + 72) = 0;
      *(_QWORD *)(v114 + 48) = v585;
      *(_QWORD *)&v585 = 0;
      *(_QWORD *)(v114 + 56) = *((_QWORD *)&v585 + 1);
      *((_QWORD *)&v585 + 1) = 0;
      *(_QWORD *)(v114 + 64) = v586;
      v586 = 0;
      *(_QWORD *)(v114 + 80) = v588;
      v588 = 0;
      ++v587;
      ++*(_DWORD *)(v114 + 72);
      *(_QWORD *)(v114 + 120) = 0;
      *(_QWORD *)(v114 + 96) = 0;
      *(_QWORD *)(v114 + 104) = 0;
      *(_QWORD *)(v114 + 88) = 0;
      *(_DWORD *)(v114 + 112) = 0;
      *(_QWORD *)(v114 + 88) = v589;
      v589 = 0;
      *(_QWORD *)(v114 + 96) = v590;
      v590 = 0;
      *(_QWORD *)(v114 + 104) = v591;
      v591 = 0;
      *(_QWORD *)(v114 + 120) = v593;
      v593 = 0;
      v592 = 2;
      ++*(_DWORD *)(v114 + 112);
      *(_QWORD *)(v114 + 160) = 0;
      *(_QWORD *)(v114 + 136) = 0;
      *(_QWORD *)(v114 + 144) = 0;
      *(_QWORD *)(v114 + 128) = 0;
      *(_DWORD *)(v114 + 152) = 0;
      *(_QWORD *)(v114 + 128) = v594;
      v594 = 0;
      *(_QWORD *)(v114 + 136) = v595;
      v595 = 0;
      *(_QWORD *)(v114 + 144) = v596;
      v596 = 0;
      *(_QWORD *)(v114 + 160) = v598;
      v598 = 0;
      v597 = 2;
      ++*(_DWORD *)(v114 + 152);
      *(_QWORD *)(v114 + 200) = 0;
      *(_QWORD *)(v114 + 176) = 0;
      *(_QWORD *)(v114 + 184) = 0;
      *(_QWORD *)(v114 + 168) = 0;
      *(_DWORD *)(v114 + 192) = 0;
      *(_QWORD *)(v114 + 168) = v599;
      v599 = 0;
      *(_QWORD *)(v114 + 176) = v600;
      v600 = 0;
      *(_QWORD *)(v114 + 184) = v601;
      v601 = 0;
      *(_QWORD *)(v114 + 200) = v603;
      v603 = 0;
      v602 = 2;
      ++*(_DWORD *)(v114 + 192);
      *(_QWORD *)(v114 + 240) = 0;
      *(_QWORD *)(v114 + 216) = 0;
      *(_QWORD *)(v114 + 224) = 0;
      *(_QWORD *)(v114 + 208) = 0;
      *(_DWORD *)(v114 + 232) = 0;
      *(_QWORD *)(v114 + 208) = v604;
      v604 = 0;
      *(_QWORD *)(v114 + 216) = v605;
      v605 = 0;
      *(_QWORD *)(v114 + 224) = v606;
      v606 = 0;
      *(_QWORD *)(v114 + 240) = v608;
      v608 = 0;
      v607 = 2;
      ++*(_DWORD *)(v114 + 232);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v604);
      re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v599);
      re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v594);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v589);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v585);
      if (*(_QWORD *)&v584[8])
      {
        v115 = *(_QWORD *)&v584[40];
        if (*(_QWORD *)&v584[40])
          (*(void (**)(void))(**(_QWORD **)&v584[8] + 40))();
      }
      v116 = *(_QWORD *)(v96 + 40);
      if (!v116)
        break;
      re::BucketArray<re::LightInfoArrays,4ul>::operator[](v96, v116 - 1);
      re::StringID::destroyString((re::StringID *)v537);
      v76 = v503;
      if (v503)
      {
        v117 = v65 + 1;
        v118 = 280 * (v65 + 1);
        v119 = v519;
        v120 = v522;
        v122 = v501;
        v121 = v502;
        v123 = v516;
        v66 = v512;
        v124 = v515;
        v125 = v510;
        v126 = v508;
        do
        {
          LODWORD(v65) = v117;
          if (v117 >= v83[2].i32[0])
            break;
          v127 = *(_DWORD *)(v83[1].i64[0] + v118);
          ++v117;
          v118 += 280;
        }
        while ((v127 & 0x80000000) == 0);
      }
      else
      {
        v83 += 17;
        v119 = v519;
        v120 = v522;
        v122 = v501;
        v121 = v502;
        v123 = v516;
        v66 = v512;
        v124 = v515;
        v125 = v510;
        v126 = v508;
      }
      v532 += v126;
      v90 += v125;
      v89 += v66;
      v88 = v124 + v120;
      v87 = v123 + v528;
      v86 += v119;
      v132 = v83 == v122;
      if (v503)
        v132 = v121 == (_DWORD)v65;
      if (v132)
        goto LABEL_160;
    }
LABEL_669:
    re::internal::assertLog((re::internal *)4, v115, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_670:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "m_assetService", "updateSceneInternal", 1440);
    _os_crash();
    __break(1u);
    goto LABEL_671;
  }
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v532 = 0;
LABEL_160:
  isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v66);
  if ((isStatisticCollectionEnabled & 1) != 0)
  {
    isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    v134 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
    if (v134)
    {
      v135 = v134[392].u64[0];
      if (v135 >= v532)
        v135 = v532;
      v134[392].i64[0] = v135;
      v136 = v134[392].u64[1];
      if (v136 <= v532)
        v136 = v532;
      v134[392].i64[1] = v136;
      v137 = vdupq_n_s64(1uLL);
      v137.i64[0] = v532;
      v134[393] = vaddq_s64(v134[393], v137);
      *(_BYTE *)(isStatisticCollectionEnabled + 184) = 0;
    }
  }
  v138 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if ((_DWORD)v138)
  {
    v138 = re::profilerThreadContext((re *)v138);
    v139 = *(int64x2_t **)(v138 + 152);
    if (v139)
    {
      v140 = v139[396].u64[0];
      if (v140 >= v90)
        v140 = v90;
      v139[396].i64[0] = v140;
      v141 = v139[396].u64[1];
      if (v141 <= v90)
        v141 = v90;
      v139[396].i64[1] = v141;
      v142 = vdupq_n_s64(1uLL);
      v142.i64[0] = v90;
      v139[397] = vaddq_s64(v139[397], v142);
      *(_BYTE *)(v138 + 184) = 0;
    }
  }
  v143 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v138);
  if ((_DWORD)v143)
  {
    v143 = re::profilerThreadContext((re *)v143);
    v144 = *(int64x2_t **)(v143 + 152);
    if (v144)
    {
      v145 = v144[416].u64[0];
      if (v145 >= v89)
        v145 = v89;
      v144[416].i64[0] = v145;
      v146 = v144[416].u64[1];
      if (v146 <= v89)
        v146 = v89;
      v144[416].i64[1] = v146;
      v147 = vdupq_n_s64(1uLL);
      v147.i64[0] = v89;
      v144[417] = vaddq_s64(v144[417], v147);
      *(_BYTE *)(v143 + 184) = 0;
    }
  }
  v148 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v143);
  if ((_DWORD)v148)
  {
    v148 = re::profilerThreadContext((re *)v148);
    v149 = *(int64x2_t **)(v148 + 152);
    if (v149)
    {
      v150 = v149[408].u64[0];
      if (v150 >= v88)
        v150 = v88;
      v149[408].i64[0] = v150;
      v151 = v149[408].u64[1];
      if (v151 <= v88)
        v151 = v88;
      v149[408].i64[1] = v151;
      v152 = vdupq_n_s64(1uLL);
      v152.i64[0] = v88;
      v149[409] = vaddq_s64(v149[409], v152);
      *(_BYTE *)(v148 + 184) = 0;
    }
  }
  v153 = v88 + v89;
  v154 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v148);
  if ((_DWORD)v154)
  {
    v154 = re::profilerThreadContext((re *)v154);
    v155 = *(int64x2_t **)(v154 + 152);
    if (v155)
    {
      v156 = v155[400].u64[0];
      if (v156 >= v87)
        v156 = v87;
      v155[400].i64[0] = v156;
      v157 = v155[400].u64[1];
      if (v157 <= v87)
        v157 = v87;
      v155[400].i64[1] = v157;
      v158 = vdupq_n_s64(1uLL);
      v158.i64[0] = v87;
      v155[401] = vaddq_s64(v155[401], v158);
      *(_BYTE *)(v154 + 184) = 0;
    }
  }
  v159 = v87 + v86 + v153;
  v161 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v154);
  if ((_DWORD)v161)
  {
    v161 = re::profilerThreadContext((re *)v161);
    v162 = *(int64x2_t **)(v161 + 152);
    if (v162)
    {
      v163 = v162[424].u64[0];
      if (v163 >= v86)
        v163 = v86;
      v162[424].i64[0] = v163;
      v164 = v162[424].u64[1];
      if (v164 <= v86)
        v164 = v86;
      v162[424].i64[1] = v164;
      v165 = vdupq_n_s64(1uLL);
      v165.i64[0] = v86;
      v162[425] = vaddq_s64(v162[425], v165);
      *(_BYTE *)(v161 + 184) = 0;
    }
  }
  v160 = v90 + v532;
  v166 = v159 + v90 + v532;
  v167 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v161);
  if ((_DWORD)v167)
  {
    v168 = re::profilerThreadContext(v167);
    v169 = *(int64x2_t **)(v168 + 152);
    if (v169)
    {
      v170 = v169[384].u64[0];
      if (v170 >= v166)
        v170 = v159 + v160;
      v169[384].i64[0] = v170;
      v171 = v169[384].u64[1];
      if (v171 <= v166)
        v171 = v159 + v160;
      v169[384].i64[1] = v171;
      v172 = vdupq_n_s64(1uLL);
      v172.i64[0] = v159 + v160;
      v169[385] = vaddq_s64(v169[385], v172);
      *(_BYTE *)(v168 + 184) = 0;
    }
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear((uint64_t)&v546);
  re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit((uint64_t *)&v580);
  v545.i64[0] = 0;
  v545.i32[2] = 0;
  re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit((uint64_t *)&v580);
  v173 = (_anonymous_namespace_ *)re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear((uint64_t)&v546);
  memset(v544, 0, 36);
  *(_QWORD *)&v544[36] = 0x7FFFFFFFLL;
  v174 = *(re::RenderManager ****)(v7 + 112);
  v520 = *(_QWORD *)(v7 + 120);
  v175 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v530 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v175)
  {
    v176 = *(float32x4_t ***)(v175 + 40);
    v177 = *(_QWORD *)(v175 + 24);
    v517 = (_QWORD *)re::RenderManager::perFrameAllocator((re::RenderManager *)v174);
    if (v177)
    {
      v178 = &v176[v177];
      __asm { FMOV            V10.2S, #1.0 }
      v498 = vdupq_n_s32(0x7F800000u);
      v497 = v178;
      do
      {
        v183 = *v176;
        v184 = (*v176)[1].i64[0];
        if (*v176)
          _ZF = *(_QWORD *)(v184 + 240) == 0;
        else
          _ZF = 1;
        if (!_ZF)
        {
          v186 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v184 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          v187 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v184 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v523 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v184 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v188 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v184 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v189 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v184 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v190 = xmmword_2260E5F20;
          v191 = xmmword_2260E5F10;
          if (v186 | v187 || v188 != 0)
          {
            v193 = v189;
            v194 = v183[2].i64[1];
            if (v194)
              goto LABEL_675;
            if (v186 | v187)
              (*(void (**)(float32x4_t *__return_ptr, uint64_t, const char *, __int128, __int128))(*(_QWORD *)v520 + 8))(&v545, v520, "engine:missingMaterial.rematerial", xmmword_2260E5F10, xmmword_2260E5F20);
            else
              (*(void (**)(float32x4_t *__return_ptr, uint64_t, const char *, __int128, __int128))(*(_QWORD *)v520 + 8))(&v545, v520, "engine:sphericalMissingMaterial.rematerial", xmmword_2260E5F10, xmmword_2260E5F20);
            v195 = v183[2];
            v183[2] = v545;
            v545 = v195;
            v196 = v183[3].i64[0];
            v183[3].i64[0] = v546.i64[0];
            v546.i64[0] = v196;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v545);
            v194 = v183[2].i64[1];
            v191 = xmmword_2260E5F10;
            v190 = xmmword_2260E5F20;
            if (v194)
            {
LABEL_675:
              v197 = atomic_load((unsigned int *)(v194 + 704));
              if (v197 == 2)
              {
                *(_OWORD *)v541 = v191;
                *(_OWORD *)&v541[16] = v190;
                *(_OWORD *)v542 = xmmword_2260E5F40;
                if (v186)
                {
                  v198 = *(float *)(v186 + 52) * 0.5;
                  v524 = v198 / tanf(*(float *)(v186 + 32) * 0.5);
                  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v184, (const re::ecs2::Entity *)1, &v609);
                  v199 = 0;
                  *(_QWORD *)&v200 = 0;
                  *((_QWORD *)&v200 + 1) = __PAIR64__(1.0, LODWORD(v524));
                  v201 = v609;
                  v202 = v610;
                  v203 = v611;
                  v204 = v612;
                  *(_OWORD *)v584 = xmmword_2260E5F10;
                  *(_OWORD *)&v584[16] = xmmword_2260E5F20;
                  *(_OWORD *)&v584[32] = xmmword_2260E5F40;
                  v585 = v200;
                  v205 = v517;
                  do
                  {
                    *(float32x4_t *)((char *)&v545 + v199) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v201, COERCE_FLOAT(*(_OWORD *)&v584[v199])), v202, *(float32x2_t *)&v584[v199], 1), v203, *(float32x4_t *)&v584[v199], 2), v204, *(float32x4_t *)&v584[v199], 3);
                    v199 += 16;
                  }
                  while (v199 != 64);
                  v504 = v547;
                  v505 = v546;
                  v509 = v545;
                  v511 = v548;
                  v206 = v524 + 0.00001;
                  v207 = *(float *)(v186 + 48);
                  v208 = *(float *)(v186 + 52);
LABEL_246:
                  *(_QWORD *)&v541[4] = 0;
                  *(_QWORD *)&v541[12] = 0;
                  *(_QWORD *)&v541[24] = 0;
                  *(_QWORD *)v542 = 0;
                  *(_QWORD *)&v542[12] = 0;
                  *(_QWORD *)&v542[20] = 0;
                  *(float *)v541 = v207;
                  *(float *)&v541[20] = v208;
                  *(float *)&v542[8] = v206;
                  *(_DWORD *)&v542[28] = 1065353216;
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v540, (const re::AssetHandle *)&v183[2]);
                  v539[0] = v540;
                  v539[1] = 1;
                  v230 = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v205 + 32))(v205, 24, 8);
                  v230[1] = 0;
                  v230[2] = 0;
                  *v230 = 0;
                  v231 = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v205 + 32))(v205, 24, 8);
                  v231[1] = 0;
                  v231[2] = 0;
                  *v231 = 0;
                  v232 = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v205 + 32))(v205, 24, 8);
                  v232[1] = 0;
                  v232[2] = 0;
                  *v232 = 0;
                  v233 = *(_QWORD *)(v184 + 192);
                  if (v233)
                  {
                    v234 = *(_QWORD *)(v233 + 104);
                    v235 = *(_QWORD *)(v233 + 88);
                    v545.i64[0] = v234;
                    v545.i64[1] = v235;
                    re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks(v205, v539, &v545, v230, v231);
                  }
                  v525 = v231;
                  v513 = v232;
                  re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles(v205, v539, 0, v230, v232);
                  v237 = re::MeshAsset::assetType(v236);
                  (*(void (**)(_QWORD *__return_ptr, uint64_t, const char *, uint64_t *))(*(_QWORD *)v520 + 32))(v538, v520, "sharedCubeMesh.compiledmesh", v237);
                  v110 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v538);
                  re::MeshAsset::boundingBoxForModel((re::MeshAsset *)v110, 0, &v545);
                  re::AABB::transform(&v545, (float32x4_t *)v541, (uint64_t)v537);
                  v238 = (re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v538);
                  v239 = re::MeshAsset::partCountForModel(v238, 0);
                  v240 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v205 + 32))(v205, 24, 8);
                  v240[1] = 0;
                  v240[2] = 0;
                  *v240 = 0;
                  re::FixedArray<re::AABB>::init<>((uint64_t)v240, (uint64_t)v205, v239);
                  if (v239)
                  {
                    v111 = 0;
                    v241 = 0;
                    while (1)
                    {
                      re::MeshAsset::boundingBoxForPartOnModel((re::MeshAsset *)v110, 0, v241, &v609);
                      v242 = v240[1];
                      if (v242 <= v241)
                        break;
                      v243 = (float32x4_t *)(v240[2] + v111);
                      v244 = v610;
                      *v243 = v609;
                      v243[1] = v244;
                      ++v241;
                      v111 += 32;
                      if (v239 == v241)
                        goto LABEL_252;
                    }
                    v543 = 0;
                    v548 = 0u;
                    v549 = 0u;
                    v546 = 0u;
                    v547 = 0u;
                    v545 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v584 = 136315906;
                    *(_QWORD *)&v584[4] = "operator[]";
                    *(_WORD *)&v584[12] = 1024;
                    *(_DWORD *)&v584[14] = 468;
                    *(_WORD *)&v584[18] = 2048;
                    *(_QWORD *)&v584[20] = v241;
                    *(_WORD *)&v584[28] = 2048;
                    *(_QWORD *)&v584[30] = v242;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_668:
                    v540[0] = 0;
                    v612 = 0u;
                    v613 = 0u;
                    v610 = 0u;
                    v611 = 0u;
                    v609 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v544 = 136315906;
                    *(_QWORD *)&v544[4] = "operator[]";
                    *(_WORD *)&v544[12] = 1024;
                    *(_DWORD *)&v544[14] = 858;
                    *(_WORD *)&v544[18] = 2048;
                    *(_QWORD *)&v544[20] = v111;
                    *(_WORD *)&v544[28] = 2048;
                    *(_QWORD *)&v544[30] = v110;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_669;
                  }
LABEL_252:
                  v565 = 0;
                  v566 = 0;
                  v567 = 0u;
                  v545 = 0u;
                  v546 = 0u;
                  v547.i64[0] = 0;
                  v548 = 0u;
                  v549 = 0u;
                  v550 = 0u;
                  v551 = 0u;
                  v552 = 0u;
                  v553 = 0u;
                  v554 = 0u;
                  v555 = 0u;
                  v556 = 0;
                  v557 = 0u;
                  v558 = 0u;
                  v559 = 0u;
                  v560 = 0u;
                  v561 = 0u;
                  v562 = 0u;
                  v563 = 0u;
                  memset(v564, 0, 28);
                  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                  v245 = v517;
                  v568 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                  v569 = _D10;
                  v570 = 1065353216;
                  v571 = 0u;
                  memset(v572, 0, 19);
                  *(_QWORD *)((char *)&v572[2] + 4) = 0xFFFFFFFF00000001;
                  v573 = v498;
                  *(_QWORD *)&v246 = 0x7F0000007FLL;
                  *((_QWORD *)&v246 + 1) = 0x7F0000007FLL;
                  v574 = v246;
                  v575 = 0;
                  v576 = 0;
                  v577 = 0;
                  v578 = 0;
                  v579 = 0x10100010001;
                  v247 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v538);
                  v248 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v245 + 32))(v245, 24, 8);
                  v249 = *(_QWORD *)(v247 + 376);
                  *(_QWORD *)v584 = *(_QWORD *)(v247 + 392);
                  *(_QWORD *)&v584[8] = v249;
                  v248[1] = 0;
                  v248[2] = 0;
                  *v248 = 0;
                  re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(v248, (uint64_t)v517, v249);
                  re::FixedArray<re::SkinningInfluence>::copy(v248, (uint64_t)v584);
                  v250 = v248[1];
                  v545.i64[0] = v248[2];
                  v545.i64[1] = v250;
                  *(_QWORD *)v584 = v537;
                  *(_QWORD *)&v584[8] = 1;
                  v251 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v245 + 32))(v245, 72, 8);
                  v546.i64[1] = re::MeshBoundingBoxes::MeshBoundingBoxes(v251, (uint64_t)v517, (const void **)v584, 1);
                  v252 = v240[1];
                  *(_QWORD *)v584 = v240[2];
                  *(_QWORD *)&v584[8] = v252;
                  v253 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v245 + 32))(v245, 72, 8);
                  v254 = re::MeshBoundingBoxes::MeshBoundingBoxes(v253, (uint64_t)v517, (const void **)v584, 1);
                  v255 = 0;
                  v547.i64[0] = v254;
                  v609 = *(float32x4_t *)v541;
                  v610 = *(float32x4_t *)&v541[16];
                  v611 = *(float32x4_t *)v542;
                  v612 = *(float32x4_t *)&v542[16];
                  do
                  {
                    *(float32x4_t *)&v584[v255] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v509, COERCE_FLOAT(*(_OWORD *)((char *)&v609 + v255))), v505, *(float32x2_t *)&v609.f32[v255 / 4], 1), v504, *(float32x4_t *)((char *)&v609 + v255), 2), v511, *(float32x4_t *)((char *)&v609 + v255), 3);
                    v255 += 16;
                  }
                  while (v255 != 64);
                  v548 = *(float32x4_t *)v584;
                  v549 = *(_OWORD *)&v584[16];
                  v550 = *(_OWORD *)&v584[32];
                  v551 = v585;
                  v256 = v230[1];
                  *(_QWORD *)&v552 = v230[2];
                  *((_QWORD *)&v552 + 1) = v256;
                  v257 = v525[1];
                  *(_QWORD *)&v557 = v525[2];
                  *((_QWORD *)&v557 + 1) = v257;
                  v258 = v513[1];
                  *(_QWORD *)&v558 = v513[2];
                  *((_QWORD *)&v558 + 1) = v258;
                  LODWORD(v259) = v572[0] & 0xFFFFFFF7;
                  HIDWORD(v259) = HIDWORD(v572[0]) | 8;
                  v260 = *(_QWORD *)(v184 + 296);
                  v572[0] = v259;
                  v573 = (int32x4_t)v537[0];
                  v574 = v537[1];
                  v572[1] = v260;
                  v575 = v254;
                  v261 = v174[3];
                  *(_QWORD *)v584 = *(_QWORD *)(v184 + 296);
                  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v261 + 129), (uint64_t *)v584))
                  {
                    v262 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v174[3], *(_QWORD *)(v184 + 296));
                    *(_QWORD *)&v561 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v262, v517);
                  }
                  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v500 + 8))(v584, v500, v184);
                  if (v584[0])
                    v263 = *(_QWORD *)&v584[8];
                  else
                    v263 = 0;
                  v609.i64[0] = v263;
                  *(_QWORD *)&v584[16] = 0;
                  *(_DWORD *)&v584[24] = 0;
                  *(_QWORD *)&v584[32] = 0;
                  *(_OWORD *)v584 = (unint64_t)v517;
                  re::DynamicArray<re::MeshScene>::setCapacity(v584, 0);
                  ++*(_DWORD *)&v584[24];
                  v264 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v263 ^ (v263 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v263 ^ (v263 >> 30))) >> 27));
                  v265 = v264 ^ (v264 >> 31);
                  if (*(_QWORD *)v544)
                  {
                    v266 = v265 % *(unsigned int *)&v544[24];
                    v267 = *(unsigned int *)(*(_QWORD *)&v544[8] + 4 * v266);
                    v178 = v497;
                    if ((_DWORD)v267 != 0x7FFFFFFF)
                    {
                      while (*(_QWORD *)(*(_QWORD *)&v544[16] + (v267 << 6) + 16) != v263)
                      {
                        v267 = *(_DWORD *)(*(_QWORD *)&v544[16] + (v267 << 6) + 8) & 0x7FFFFFFF;
                        if ((_DWORD)v267 == 0x7FFFFFFF)
                          goto LABEL_267;
                      }
                      v269 = *(_QWORD *)&v544[16] + (v267 << 6);
                      goto LABEL_269;
                    }
                  }
                  else
                  {
                    LODWORD(v266) = 0;
                    v178 = v497;
                  }
LABEL_267:
                  v268 = re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v544, v266, v265, &v609, (uint64_t)v584);
                  ++*(_DWORD *)&v544[40];
                  v269 = *(_QWORD *)&v544[16] + ((unint64_t)v268 << 6);
LABEL_269:
                  if (*(_QWORD *)(v269 + 24))
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)(v269 + 24), (__int128 *)&v545);
                  re::DynamicArray<re::MeshScene>::deinit((uint64_t)v584);
                  if (v564[2])
                  {
                    if ((_QWORD)v562)
                      *(_QWORD *)&v562 = 0;
                    if (*((_QWORD *)&v561 + 1))
                      (*(void (**)(void))(*(_QWORD *)v564[2] + 40))();
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v538);
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v540);
                  goto LABEL_277;
                }
                re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v184, (const re::ecs2::Entity *)1, &v545);
                v205 = v517;
                if (v187)
                {
                  v511 = v548;
                  v209 = (int32x4_t)vmulq_f32(v545, v545);
                  v209.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v209, 2), vadd_f32(*(float32x2_t *)v209.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v209.i8, 1))).u32[0];
                  v210 = vrsqrte_f32((float32x2_t)v209.u32[0]);
                  v211 = vmul_f32(v210, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v210, v210)));
                  v225 = vmulq_n_f32(v545, vmul_f32(v211, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v211, v211))).f32[0]);
                  v212 = vmulq_f32(v546, v225);
                  v213 = vmulq_f32(v225, v225);
                  v213.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v213, 2), vaddq_f32(v213, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v213.f32, 1))).f32[0];
                  v214 = vsubq_f32(v546, vmulq_n_f32(v225, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v212, 2), vaddq_f32(v212, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v212.f32, 1))).f32[0]/ v213.f32[0]));
                  v215 = (int32x4_t)vmulq_f32(v214, v214);
                  v215.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v215, 2), vadd_f32(*(float32x2_t *)v215.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.i8, 1))).u32[0];
                  v216 = vrsqrte_f32((float32x2_t)v215.u32[0]);
                  v217 = vmul_f32(v216, vrsqrts_f32((float32x2_t)v215.u32[0], vmul_f32(v216, v216)));
                  v215.i32[0] = vmul_f32(v217, vrsqrts_f32((float32x2_t)v215.u32[0], vmul_f32(v217, v217))).u32[0];
                  v218 = vmulq_f32(v547, v225);
                  v219 = vmulq_n_f32(v214, *(float *)v215.i32);
                  v220 = vsubq_f32(v547, vmulq_n_f32(v225, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v218, 2), vaddq_f32(v218, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v218.f32, 1))).f32[0]/ v213.f32[0]));
                  v221 = vmulq_f32(v547, v219);
                  v222 = vmulq_f32(v219, v219);
                  v223 = vsubq_f32(v220, vmulq_n_f32(v219, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v221, 2), vaddq_f32(v221, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v222, 2), vaddq_f32(v222, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 1))).f32[0]));
                  v224 = (int32x4_t)vmulq_f32(v223, v223);
                  v224.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v224, 2), vadd_f32(*(float32x2_t *)v224.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.i8, 1))).u32[0];
                  *(float32x2_t *)v222.f32 = vrsqrte_f32((float32x2_t)v224.u32[0]);
                  *(float32x2_t *)v222.f32 = vmul_f32(*(float32x2_t *)v222.f32, vrsqrts_f32((float32x2_t)v224.u32[0], vmul_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32)));
                  v226 = vmulq_n_f32(v223, vmul_f32(*(float32x2_t *)v222.f32, vrsqrts_f32((float32x2_t)v224.u32[0], vmul_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32))).f32[0]);
                  v225.i32[3] = v545.i32[3];
                  v219.i32[3] = v546.i32[3];
                  v505 = v219;
                  v226.i32[3] = v547.i32[3];
                  if (!v193)
                    goto LABEL_241;
LABEL_239:
                  if (*(_BYTE *)(v193 + 36))
                  {
                    v228 = (float *)(v193 + 40);
                    goto LABEL_244;
                  }
                }
                else
                {
                  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v184, (const re::ecs2::Entity *)1, &v545);
                  v227 = v548;
                  v227.i32[3] = 1.0;
                  v511 = v227;
                  v225 = (float32x4_t)xmmword_2260E5F10;
                  v505 = (float32x4_t)xmmword_2260E5F20;
                  v226 = (float32x4_t)xmmword_2260E5F40;
                  if (v193)
                    goto LABEL_239;
                }
LABEL_241:
                v229 = 0.01;
                if (v523 && *(_BYTE *)(v523 + 36))
                {
                  v228 = (float *)(v523 + 40);
LABEL_244:
                  v229 = *v228;
                }
                v504 = v226;
                v509 = v225;
                v207 = v229 + 0.00001;
                v208 = v207;
                v206 = v207;
                goto LABEL_246;
              }
            }
            re::AssetHandle::loadAsync((re::AssetHandle *)&v183[2]);
          }
        }
LABEL_277:
        ++v176;
      }
      while (v176 != v178);
    }
  }
  else
  {
    re::RenderManager::perFrameAllocator((re::RenderManager *)v174);
  }
  v270 = *(_DWORD *)&v544[32];
  if (*(_DWORD *)&v544[32])
  {
    v271 = 0;
    v272 = (int *)(*(_QWORD *)&v544[16] + 8);
    while (1)
    {
      v273 = *v272;
      v272 += 16;
      if (v273 < 0)
        break;
      if (*(unsigned int *)&v544[32] == ++v271)
      {
        LODWORD(v271) = *(_DWORD *)&v544[32];
        break;
      }
    }
  }
  else
  {
    LODWORD(v271) = 0;
  }
  if (*(_DWORD *)&v544[32] != (_DWORD)v271)
  {
    v274 = v271;
    v275 = *(_QWORD *)&v544[16];
    v276 = *(_DWORD *)&v544[32];
    do
    {
      v277 = v275 + (v274 << 6);
      if (*(_QWORD *)(v277 + 40))
      {
        v278 = v277 + 24;
        re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v530, *(const re::ecs2::Scene **)(v277 + 16), v507, &v545);
        *(_QWORD *)v584 = (unint64_t)v545.i64[0] >> 1;
        v279 = re::RenderFrameData::stream(v506, (const re::WeakStringID *)v584);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v279 + 48) + 848))(*(_QWORD *)(v279 + 48), v278);
        re::StringID::destroyString((re::StringID *)&v545);
        v276 = *(_DWORD *)&v544[32];
        v275 = *(_QWORD *)&v544[16];
      }
      if (v276 <= (int)v271 + 1)
        v280 = v271 + 1;
      else
        v280 = v276;
      while (1)
      {
        v274 = (v271 + 1);
        if (v280 - 1 == (_DWORD)v271)
          break;
        LODWORD(v271) = v271 + 1;
        v281 = v274;
        if ((*(_DWORD *)(v275 + (v274 << 6) + 8) & 0x80000000) != 0)
          goto LABEL_297;
      }
      v281 = v280;
LABEL_297:
      LODWORD(v271) = v281;
    }
    while (v270 != v281);
  }
  re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v544);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v534);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v535);
}

uint64_t re::ecs2::LightSystem::willAddSystemToECSService(re::ecs2::LightSystem *this)
{
  uint64_t v2;
  uint64_t result;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v2);
  *((_QWORD *)this + 20) = result;
  return result;
}

double re::ecs2::LightSystem::willRemoveSystemFromECSService(re::ecs2::LightSystem *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

uint64_t re::ecs2::LightSystem::willAddSceneToECSService(re::ecs2::LightSystem *this, re::EventBus **a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  unint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  int v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  re::ecs2::System *v90;
  unint64_t v91;
  int v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  int v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  re::ecs2::System *v132;
  unint64_t v133;
  int v134;
  _QWORD *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  int v167;
  _QWORD *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  re::ecs2::System *v174;
  unint64_t v175;
  int v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  re::ecs2::System *v216;
  unint64_t v217;
  int v218;
  _QWORD *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  unint64_t v250;
  int v251;
  _QWORD *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  re::ecs2::System *v258;
  unint64_t v259;
  int v260;
  _QWORD *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  re::ecs2::System *v292;
  unint64_t v293;
  int v294;
  _QWORD *v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  re::EventBus *v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  re::EventBus *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  re::EventBus *v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  re::EventBus *v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  re::EventBus *v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  re::EventBus *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  re::EventBus *v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t *v329;
  re::EventBus *v330;
  re *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  re *v336;
  re *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  re *v342;
  re *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  re *v348;
  re *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  re *v354;
  re *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  re *v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t result;
  re::ecs2::Scene *v367;
  re::ecs2::Scene *v368;
  re::ecs2::Scene *v369;
  _BYTE v370[24];
  uint64_t v371;
  _BYTE *v372;
  _BYTE v373[24];
  uint64_t v374;
  re *v375;
  _BYTE v376[24];
  uint64_t v377;
  re *v378;
  _BYTE v379[24];
  uint64_t v380;
  re *v381;
  _BYTE v382[24];
  uint64_t v383;
  re *v384;
  _BYTE v385[24];
  uint64_t v386;
  re *v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  uint64_t v394;
  __int128 v395;
  _BYTE v396[18];
  __int16 v397;
  unint64_t v398;
  __int16 v399;
  unint64_t v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  uint64_t v406;

  v406 = *MEMORY[0x24BDAC8D0];
  v367 = (re::ecs2::Scene *)a2;
  v4 = *((_QWORD *)this + 20);
  if (v4)
    (*(void (**)(uint64_t, re::EventBus **))(*(_QWORD *)v4 + 56))(v4, a2);
  v368 = (re::ecs2::Scene *)a2;
  v5 = *((_QWORD *)this + 61);
  v6 = *((_DWORD *)this + 124);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)((char *)this + 504);
    else
      v7 = (_QWORD *)*((_QWORD *)this + 64);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_19;
    }
    goto LABEL_18;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)((char *)this + 504);
    if (!v5)
      goto LABEL_19;
  }
  else
  {
    v8 = (uint64_t *)*((_QWORD *)this + 64);
    if (!v5)
      goto LABEL_19;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_18:
    *(_QWORD *)&v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 480, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 360, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::init(v13, (uint64_t)this + 360, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 416), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 480, v388);
    v14 = (char *)this + 528;
    v15 = v388;
    goto LABEL_51;
  }
LABEL_19:
  v392 = 0u;
  v395 = 0u;
  v388 = 0u;
  *(_QWORD *)&v389 = 0;
  v390 = 0u;
  v391 = 0u;
  *((_QWORD *)&v389 + 1) = -1;
  *(_QWORD *)&v392 = 0;
  DWORD2(v392) = 1;
  v393 = 0;
  v394 = 0;
  v16 = *((_QWORD *)this + 50);
  *(_QWORD *)&v395 = 0;
  v17 = *((_QWORD *)this + 46);
  DWORD2(v395) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 45, (v16 + 4) >> 2);
    v17 = *((_QWORD *)this + 46);
  }
  v18 = v16 >> 2;
  if (v17 <= v16 >> 2)
  {
    v369 = 0;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v401 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(_QWORD *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    v397 = 2048;
    v398 = v16 >> 2;
    v399 = 2048;
    v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_550:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_551:
    v369 = 0;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v401 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(_QWORD *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    v397 = 2048;
    v398 = v18;
    v399 = 2048;
    v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_552:
    re::internal::assertLog((re::internal *)4, v67, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_553:
    v369 = 0;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v401 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(_QWORD *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    v397 = 2048;
    v398 = v18;
    v399 = 2048;
    v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_554:
    re::internal::assertLog((re::internal *)4, v109, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_555:
    v369 = 0;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v401 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(_QWORD *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    v397 = 2048;
    v398 = v18;
    v399 = 2048;
    v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_556:
    re::internal::assertLog((re::internal *)4, v151, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_557:
    v369 = 0;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v401 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(_QWORD *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    v397 = 2048;
    v398 = v18;
    v399 = 2048;
    v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_558:
    re::internal::assertLog((re::internal *)4, v193, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_559:
    v369 = 0;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v401 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(_QWORD *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    v397 = 2048;
    v398 = v18;
    v399 = 2048;
    v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_560:
    re::internal::assertLog((re::internal *)4, v235, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_561:
    v369 = 0;
    v404 = 0u;
    v405 = 0u;
    v402 = 0u;
    v403 = 0u;
    v401 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(_QWORD *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    v397 = 2048;
    v398 = v18;
    v399 = 2048;
    v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_562;
  }
  if ((*((_BYTE *)this + 376) & 1) != 0)
    v19 = (char *)this + 384;
  else
    v19 = (char *)*((_QWORD *)this + 49);
  v20 = *(_QWORD *)&v19[8 * v18];
  ++*((_QWORD *)this + 50);
  ++*((_DWORD *)this + 102);
  v21 = v20 + 112 * (v16 & 3);
  v22 = v388;
  v23 = v389;
  v24 = v390;
  *(_QWORD *)(v21 + 48) = v391;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  v26 = *((_QWORD *)this + 50);
  if (!v26)
    goto LABEL_550;
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 360, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::init(v27, (uint64_t)this + 360, (uint64_t)v368);
  *(_QWORD *)&v401 = *((_QWORD *)this + 50) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 416), &v368, (uint64_t *)&v401);
  v28 = *((_QWORD *)this + 50);
  v29 = *((_QWORD *)this + 65);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 65) = v28;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 480), v30, &v388);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 65) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 496) & 1) != 0)
      v33 = (char *)this + 504;
    else
      v33 = (char *)*((_QWORD *)this + 64);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 61) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 50);
  v35 = *((_QWORD *)this + 71);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 71) = v34;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 528), v36, &v388);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 71) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 544) & 1) != 0)
      v39 = (char *)this + 552;
    else
      v39 = (char *)*((_QWORD *)this + 70);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 67) - 8] &= v37;
  }
  v15 = v401;
  v14 = (char *)this + 528;
LABEL_51:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v14, v15);
  if (!*((_BYTE *)this + 592))
    goto LABEL_69;
  v40 = *((_QWORD *)this + 67);
  v41 = *((_DWORD *)this + 136);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 552);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 70);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        goto LABEL_69;
    }
LABEL_67:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 72);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    goto LABEL_69;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 552);
    if (!v40)
      goto LABEL_69;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 70);
    if (!v40)
      goto LABEL_69;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_67;
LABEL_69:
  v368 = (re::ecs2::Scene *)a2;
  v49 = *((_QWORD *)this + 115);
  v50 = *((_DWORD *)this + 232);
  if (v49 >= 0xB)
  {
    if ((v50 & 1) != 0)
      v51 = (_QWORD *)((char *)this + 936);
    else
      v51 = (_QWORD *)*((_QWORD *)this + 118);
    v53 = 8 * v49;
    while (!*v51)
    {
      ++v51;
      v53 -= 8;
      if (!v53)
        goto LABEL_85;
    }
    goto LABEL_84;
  }
  if ((v50 & 1) != 0)
  {
    v52 = (uint64_t *)((char *)this + 936);
    if (!v49)
      goto LABEL_85;
  }
  else
  {
    v52 = (uint64_t *)*((_QWORD *)this + 118);
    if (!v49)
      goto LABEL_85;
  }
  v54 = 0;
  v55 = 8 * v49;
  do
  {
    v56 = *v52++;
    v54 |= v56;
    v55 -= 8;
  }
  while (v55);
  if (v54)
  {
LABEL_84:
    *(_QWORD *)&v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 912, 0);
    v57 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 792, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::init(v57, (uint64_t)this + 792, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 848), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 912, v388);
    v58 = (char *)this + 960;
    v59 = v388;
    goto LABEL_117;
  }
LABEL_85:
  v392 = 0u;
  v395 = 0u;
  v388 = 0u;
  *(_QWORD *)&v389 = 0;
  v390 = 0u;
  v391 = 0u;
  *((_QWORD *)&v389 + 1) = -1;
  *(_QWORD *)&v392 = 0;
  DWORD2(v392) = 1;
  v393 = 0;
  v394 = 0;
  v60 = *((_QWORD *)this + 104);
  *(_QWORD *)&v395 = 0;
  v17 = *((_QWORD *)this + 100);
  DWORD2(v395) = 0;
  if (v60 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 99, (v60 + 4) >> 2);
    v17 = *((_QWORD *)this + 100);
  }
  v18 = v60 >> 2;
  if (v17 <= v60 >> 2)
    goto LABEL_551;
  if ((*((_BYTE *)this + 808) & 1) != 0)
    v61 = (char *)this + 816;
  else
    v61 = (char *)*((_QWORD *)this + 103);
  v62 = *(_QWORD *)&v61[8 * v18];
  ++*((_QWORD *)this + 104);
  ++*((_DWORD *)this + 210);
  v63 = v62 + 112 * (v60 & 3);
  v64 = v388;
  v65 = v389;
  v66 = v390;
  *(_QWORD *)(v63 + 48) = v391;
  *(_OWORD *)(v63 + 16) = v65;
  *(_OWORD *)(v63 + 32) = v66;
  *(_OWORD *)v63 = v64;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v63 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  v68 = *((_QWORD *)this + 104);
  if (!v68)
    goto LABEL_552;
  v69 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 792, v68 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::init(v69, (uint64_t)this + 792, (uint64_t)v368);
  *(_QWORD *)&v401 = *((_QWORD *)this + 104) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 848), &v368, (uint64_t *)&v401);
  v70 = *((_QWORD *)this + 104);
  v71 = *((_QWORD *)this + 119);
  if ((v70 & 0x3F) != 0)
    v72 = (v70 >> 6) + 1;
  else
    v72 = v70 >> 6;
  *((_QWORD *)this + 119) = v70;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 912), v72, &v388);
  if (v70 && v71 > v70)
  {
    v73 = 63;
    v74 = *((_QWORD *)this + 119) & 0x3FLL;
    if (v74 && v74 != 63)
      v73 = ~(-1 << v74);
    if ((*((_BYTE *)this + 928) & 1) != 0)
      v75 = (char *)this + 936;
    else
      v75 = (char *)*((_QWORD *)this + 118);
    *(_QWORD *)&v75[8 * *((_QWORD *)this + 115) - 8] &= v73;
  }
  v76 = *((_QWORD *)this + 104);
  v77 = *((_QWORD *)this + 125);
  if ((v76 & 0x3F) != 0)
    v78 = (v76 >> 6) + 1;
  else
    v78 = v76 >> 6;
  *((_QWORD *)this + 125) = v76;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 960), v78, &v388);
  if (v76 && v77 > v76)
  {
    v79 = 63;
    v80 = *((_QWORD *)this + 125) & 0x3FLL;
    if (v80 && v80 != 63)
      v79 = ~(-1 << v80);
    if ((*((_BYTE *)this + 976) & 1) != 0)
      v81 = (char *)this + 984;
    else
      v81 = (char *)*((_QWORD *)this + 124);
    *(_QWORD *)&v81[8 * *((_QWORD *)this + 121) - 8] &= v79;
  }
  v59 = v401;
  v58 = (char *)this + 960;
LABEL_117:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v58, v59);
  if (!*((_BYTE *)this + 1024))
    goto LABEL_135;
  v82 = *((_QWORD *)this + 121);
  v83 = *((_DWORD *)this + 244);
  if (v82 >= 0xB)
  {
    if ((v83 & 1) != 0)
      v84 = (_QWORD *)((char *)this + 984);
    else
      v84 = (_QWORD *)*((_QWORD *)this + 124);
    v86 = 8 * v82;
    while (!*v84)
    {
      ++v84;
      v86 -= 8;
      if (!v86)
        goto LABEL_135;
    }
LABEL_133:
    v90 = (re::ecs2::System *)*((_QWORD *)this + 126);
    if (!*((_BYTE *)v90 + 86))
      re::ecs2::System::queueToRun(v90, 0.0);
    goto LABEL_135;
  }
  if ((v83 & 1) != 0)
  {
    v85 = (uint64_t *)((char *)this + 984);
    if (!v82)
      goto LABEL_135;
  }
  else
  {
    v85 = (uint64_t *)*((_QWORD *)this + 124);
    if (!v82)
      goto LABEL_135;
  }
  v87 = 0;
  v88 = 8 * v82;
  do
  {
    v89 = *v85++;
    v87 |= v89;
    v88 -= 8;
  }
  while (v88);
  if (v87)
    goto LABEL_133;
LABEL_135:
  v368 = (re::ecs2::Scene *)a2;
  v91 = *((_QWORD *)this + 169);
  v92 = *((_DWORD *)this + 340);
  if (v91 >= 0xB)
  {
    if ((v92 & 1) != 0)
      v93 = (_QWORD *)((char *)this + 1368);
    else
      v93 = (_QWORD *)*((_QWORD *)this + 172);
    v95 = 8 * v91;
    while (!*v93)
    {
      ++v93;
      v95 -= 8;
      if (!v95)
        goto LABEL_151;
    }
    goto LABEL_150;
  }
  if ((v92 & 1) != 0)
  {
    v94 = (uint64_t *)((char *)this + 1368);
    if (!v91)
      goto LABEL_151;
  }
  else
  {
    v94 = (uint64_t *)*((_QWORD *)this + 172);
    if (!v91)
      goto LABEL_151;
  }
  v96 = 0;
  v97 = 8 * v91;
  do
  {
    v98 = *v94++;
    v96 |= v98;
    v97 -= 8;
  }
  while (v97);
  if (v96)
  {
LABEL_150:
    *(_QWORD *)&v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 1344, 0);
    v99 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1224, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::init(v99, (uint64_t)this + 1224, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1280), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1344, v388);
    v100 = (char *)this + 1392;
    v101 = v388;
    goto LABEL_183;
  }
LABEL_151:
  v392 = 0u;
  v395 = 0u;
  v388 = 0u;
  *(_QWORD *)&v389 = 0;
  v390 = 0u;
  v391 = 0u;
  *((_QWORD *)&v389 + 1) = -1;
  *(_QWORD *)&v392 = 0;
  DWORD2(v392) = 1;
  v393 = 0;
  v394 = 0;
  v102 = *((_QWORD *)this + 158);
  *(_QWORD *)&v395 = 0;
  v17 = *((_QWORD *)this + 154);
  DWORD2(v395) = 0;
  if (v102 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 153, (v102 + 4) >> 2);
    v17 = *((_QWORD *)this + 154);
  }
  v18 = v102 >> 2;
  if (v17 <= v102 >> 2)
    goto LABEL_553;
  if ((*((_BYTE *)this + 1240) & 1) != 0)
    v103 = (char *)this + 1248;
  else
    v103 = (char *)*((_QWORD *)this + 157);
  v104 = *(_QWORD *)&v103[8 * v18];
  ++*((_QWORD *)this + 158);
  ++*((_DWORD *)this + 318);
  v105 = v104 + 112 * (v102 & 3);
  v106 = v388;
  v107 = v389;
  v108 = v390;
  *(_QWORD *)(v105 + 48) = v391;
  *(_OWORD *)(v105 + 16) = v107;
  *(_OWORD *)(v105 + 32) = v108;
  *(_OWORD *)v105 = v106;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v105 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  v110 = *((_QWORD *)this + 158);
  if (!v110)
    goto LABEL_554;
  v111 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1224, v110 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::init(v111, (uint64_t)this + 1224, (uint64_t)v368);
  *(_QWORD *)&v401 = *((_QWORD *)this + 158) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1280), &v368, (uint64_t *)&v401);
  v112 = *((_QWORD *)this + 158);
  v113 = *((_QWORD *)this + 173);
  if ((v112 & 0x3F) != 0)
    v114 = (v112 >> 6) + 1;
  else
    v114 = v112 >> 6;
  *((_QWORD *)this + 173) = v112;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1344), v114, &v388);
  if (v112 && v113 > v112)
  {
    v115 = 63;
    v116 = *((_QWORD *)this + 173) & 0x3FLL;
    if (v116 && v116 != 63)
      v115 = ~(-1 << v116);
    if ((*((_BYTE *)this + 1360) & 1) != 0)
      v117 = (char *)this + 1368;
    else
      v117 = (char *)*((_QWORD *)this + 172);
    *(_QWORD *)&v117[8 * *((_QWORD *)this + 169) - 8] &= v115;
  }
  v118 = *((_QWORD *)this + 158);
  v119 = *((_QWORD *)this + 179);
  if ((v118 & 0x3F) != 0)
    v120 = (v118 >> 6) + 1;
  else
    v120 = v118 >> 6;
  *((_QWORD *)this + 179) = v118;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1392), v120, &v388);
  if (v118 && v119 > v118)
  {
    v121 = 63;
    v122 = *((_QWORD *)this + 179) & 0x3FLL;
    if (v122 && v122 != 63)
      v121 = ~(-1 << v122);
    if ((*((_BYTE *)this + 1408) & 1) != 0)
      v123 = (char *)this + 1416;
    else
      v123 = (char *)*((_QWORD *)this + 178);
    *(_QWORD *)&v123[8 * *((_QWORD *)this + 175) - 8] &= v121;
  }
  v101 = v401;
  v100 = (char *)this + 1392;
LABEL_183:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v100, v101);
  if (!*((_BYTE *)this + 1456))
    goto LABEL_201;
  v124 = *((_QWORD *)this + 175);
  v125 = *((_DWORD *)this + 352);
  if (v124 >= 0xB)
  {
    if ((v125 & 1) != 0)
      v126 = (_QWORD *)((char *)this + 1416);
    else
      v126 = (_QWORD *)*((_QWORD *)this + 178);
    v128 = 8 * v124;
    while (!*v126)
    {
      ++v126;
      v128 -= 8;
      if (!v128)
        goto LABEL_201;
    }
LABEL_199:
    v132 = (re::ecs2::System *)*((_QWORD *)this + 180);
    if (!*((_BYTE *)v132 + 86))
      re::ecs2::System::queueToRun(v132, 0.0);
    goto LABEL_201;
  }
  if ((v125 & 1) != 0)
  {
    v127 = (uint64_t *)((char *)this + 1416);
    if (!v124)
      goto LABEL_201;
  }
  else
  {
    v127 = (uint64_t *)*((_QWORD *)this + 178);
    if (!v124)
      goto LABEL_201;
  }
  v129 = 0;
  v130 = 8 * v124;
  do
  {
    v131 = *v127++;
    v129 |= v131;
    v130 -= 8;
  }
  while (v130);
  if (v129)
    goto LABEL_199;
LABEL_201:
  v368 = (re::ecs2::Scene *)a2;
  v133 = *((_QWORD *)this + 223);
  v134 = *((_DWORD *)this + 448);
  if (v133 >= 0xB)
  {
    if ((v134 & 1) != 0)
      v135 = (_QWORD *)((char *)this + 1800);
    else
      v135 = (_QWORD *)*((_QWORD *)this + 226);
    v137 = 8 * v133;
    while (!*v135)
    {
      ++v135;
      v137 -= 8;
      if (!v137)
        goto LABEL_217;
    }
    goto LABEL_216;
  }
  if ((v134 & 1) != 0)
  {
    v136 = (uint64_t *)((char *)this + 1800);
    if (!v133)
      goto LABEL_217;
  }
  else
  {
    v136 = (uint64_t *)*((_QWORD *)this + 226);
    if (!v133)
      goto LABEL_217;
  }
  v138 = 0;
  v139 = 8 * v133;
  do
  {
    v140 = *v136++;
    v138 |= v140;
    v139 -= 8;
  }
  while (v139);
  if (v138)
  {
LABEL_216:
    *(_QWORD *)&v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 1776, 0);
    v141 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1656, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::init(v141, (uint64_t)this + 1656, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1712), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1776, v388);
    v142 = (char *)this + 1824;
    v143 = v388;
    goto LABEL_249;
  }
LABEL_217:
  v392 = 0u;
  v395 = 0u;
  v388 = 0u;
  *(_QWORD *)&v389 = 0;
  v390 = 0u;
  v391 = 0u;
  *((_QWORD *)&v389 + 1) = -1;
  *(_QWORD *)&v392 = 0;
  DWORD2(v392) = 1;
  v393 = 0;
  v394 = 0;
  v144 = *((_QWORD *)this + 212);
  *(_QWORD *)&v395 = 0;
  v17 = *((_QWORD *)this + 208);
  DWORD2(v395) = 0;
  if (v144 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 207, (v144 + 4) >> 2);
    v17 = *((_QWORD *)this + 208);
  }
  v18 = v144 >> 2;
  if (v17 <= v144 >> 2)
    goto LABEL_555;
  if ((*((_BYTE *)this + 1672) & 1) != 0)
    v145 = (char *)this + 1680;
  else
    v145 = (char *)*((_QWORD *)this + 211);
  v146 = *(_QWORD *)&v145[8 * v18];
  ++*((_QWORD *)this + 212);
  ++*((_DWORD *)this + 426);
  v147 = v146 + 112 * (v144 & 3);
  v148 = v388;
  v149 = v389;
  v150 = v390;
  *(_QWORD *)(v147 + 48) = v391;
  *(_OWORD *)(v147 + 16) = v149;
  *(_OWORD *)(v147 + 32) = v150;
  *(_OWORD *)v147 = v148;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v147 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  v152 = *((_QWORD *)this + 212);
  if (!v152)
    goto LABEL_556;
  v153 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1656, v152 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::init(v153, (uint64_t)this + 1656, (uint64_t)v368);
  *(_QWORD *)&v401 = *((_QWORD *)this + 212) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1712), &v368, (uint64_t *)&v401);
  v154 = *((_QWORD *)this + 212);
  v155 = *((_QWORD *)this + 227);
  if ((v154 & 0x3F) != 0)
    v156 = (v154 >> 6) + 1;
  else
    v156 = v154 >> 6;
  *((_QWORD *)this + 227) = v154;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1776), v156, &v388);
  if (v154 && v155 > v154)
  {
    v157 = 63;
    v158 = *((_QWORD *)this + 227) & 0x3FLL;
    if (v158 && v158 != 63)
      v157 = ~(-1 << v158);
    if ((*((_BYTE *)this + 1792) & 1) != 0)
      v159 = (char *)this + 1800;
    else
      v159 = (char *)*((_QWORD *)this + 226);
    *(_QWORD *)&v159[8 * *((_QWORD *)this + 223) - 8] &= v157;
  }
  v160 = *((_QWORD *)this + 212);
  v161 = *((_QWORD *)this + 233);
  if ((v160 & 0x3F) != 0)
    v162 = (v160 >> 6) + 1;
  else
    v162 = v160 >> 6;
  *((_QWORD *)this + 233) = v160;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1824), v162, &v388);
  if (v160 && v161 > v160)
  {
    v163 = 63;
    v164 = *((_QWORD *)this + 233) & 0x3FLL;
    if (v164 && v164 != 63)
      v163 = ~(-1 << v164);
    if ((*((_BYTE *)this + 1840) & 1) != 0)
      v165 = (char *)this + 1848;
    else
      v165 = (char *)*((_QWORD *)this + 232);
    *(_QWORD *)&v165[8 * *((_QWORD *)this + 229) - 8] &= v163;
  }
  v143 = v401;
  v142 = (char *)this + 1824;
LABEL_249:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v142, v143);
  if (!*((_BYTE *)this + 1888))
    goto LABEL_267;
  v166 = *((_QWORD *)this + 229);
  v167 = *((_DWORD *)this + 460);
  if (v166 >= 0xB)
  {
    if ((v167 & 1) != 0)
      v168 = (_QWORD *)((char *)this + 1848);
    else
      v168 = (_QWORD *)*((_QWORD *)this + 232);
    v170 = 8 * v166;
    while (!*v168)
    {
      ++v168;
      v170 -= 8;
      if (!v170)
        goto LABEL_267;
    }
LABEL_265:
    v174 = (re::ecs2::System *)*((_QWORD *)this + 234);
    if (!*((_BYTE *)v174 + 86))
      re::ecs2::System::queueToRun(v174, 0.0);
    goto LABEL_267;
  }
  if ((v167 & 1) != 0)
  {
    v169 = (uint64_t *)((char *)this + 1848);
    if (!v166)
      goto LABEL_267;
  }
  else
  {
    v169 = (uint64_t *)*((_QWORD *)this + 232);
    if (!v166)
      goto LABEL_267;
  }
  v171 = 0;
  v172 = 8 * v166;
  do
  {
    v173 = *v169++;
    v171 |= v173;
    v172 -= 8;
  }
  while (v172);
  if (v171)
    goto LABEL_265;
LABEL_267:
  v368 = (re::ecs2::Scene *)a2;
  v175 = *((_QWORD *)this + 277);
  v176 = *((_DWORD *)this + 556);
  if (v175 >= 0xB)
  {
    if ((v176 & 1) != 0)
      v177 = (_QWORD *)((char *)this + 2232);
    else
      v177 = (_QWORD *)*((_QWORD *)this + 280);
    v179 = 8 * v175;
    while (!*v177)
    {
      ++v177;
      v179 -= 8;
      if (!v179)
        goto LABEL_283;
    }
    goto LABEL_282;
  }
  if ((v176 & 1) != 0)
  {
    v178 = (uint64_t *)((char *)this + 2232);
    if (!v175)
      goto LABEL_283;
  }
  else
  {
    v178 = (uint64_t *)*((_QWORD *)this + 280);
    if (!v175)
      goto LABEL_283;
  }
  v180 = 0;
  v181 = 8 * v175;
  do
  {
    v182 = *v178++;
    v180 |= v182;
    v181 -= 8;
  }
  while (v181);
  if (v180)
  {
LABEL_282:
    *(_QWORD *)&v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 2208, 0);
    v183 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2088, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::init(v183, (uint64_t)this + 2088, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2144), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2208, v388);
    v184 = (char *)this + 2256;
    v185 = v388;
    goto LABEL_315;
  }
LABEL_283:
  v392 = 0u;
  v395 = 0u;
  v388 = 0u;
  *(_QWORD *)&v389 = 0;
  v390 = 0u;
  v391 = 0u;
  *((_QWORD *)&v389 + 1) = -1;
  *(_QWORD *)&v392 = 0;
  DWORD2(v392) = 1;
  v393 = 0;
  v394 = 0;
  v186 = *((_QWORD *)this + 266);
  *(_QWORD *)&v395 = 0;
  v17 = *((_QWORD *)this + 262);
  DWORD2(v395) = 0;
  if (v186 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 261, (v186 + 4) >> 2);
    v17 = *((_QWORD *)this + 262);
  }
  v18 = v186 >> 2;
  if (v17 <= v186 >> 2)
    goto LABEL_557;
  if ((*((_BYTE *)this + 2104) & 1) != 0)
    v187 = (char *)this + 2112;
  else
    v187 = (char *)*((_QWORD *)this + 265);
  v188 = *(_QWORD *)&v187[8 * v18];
  ++*((_QWORD *)this + 266);
  ++*((_DWORD *)this + 534);
  v189 = v188 + 112 * (v186 & 3);
  v190 = v388;
  v191 = v389;
  v192 = v390;
  *(_QWORD *)(v189 + 48) = v391;
  *(_OWORD *)(v189 + 16) = v191;
  *(_OWORD *)(v189 + 32) = v192;
  *(_OWORD *)v189 = v190;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v189 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  v194 = *((_QWORD *)this + 266);
  if (!v194)
    goto LABEL_558;
  v195 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2088, v194 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::init(v195, (uint64_t)this + 2088, (uint64_t)v368);
  *(_QWORD *)&v401 = *((_QWORD *)this + 266) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2144), &v368, (uint64_t *)&v401);
  v196 = *((_QWORD *)this + 266);
  v197 = *((_QWORD *)this + 281);
  if ((v196 & 0x3F) != 0)
    v198 = (v196 >> 6) + 1;
  else
    v198 = v196 >> 6;
  *((_QWORD *)this + 281) = v196;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2208), v198, &v388);
  if (v196 && v197 > v196)
  {
    v199 = 63;
    v200 = *((_QWORD *)this + 281) & 0x3FLL;
    if (v200 && v200 != 63)
      v199 = ~(-1 << v200);
    if ((*((_BYTE *)this + 2224) & 1) != 0)
      v201 = (char *)this + 2232;
    else
      v201 = (char *)*((_QWORD *)this + 280);
    *(_QWORD *)&v201[8 * *((_QWORD *)this + 277) - 8] &= v199;
  }
  v202 = *((_QWORD *)this + 266);
  v203 = *((_QWORD *)this + 287);
  if ((v202 & 0x3F) != 0)
    v204 = (v202 >> 6) + 1;
  else
    v204 = v202 >> 6;
  *((_QWORD *)this + 287) = v202;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2256), v204, &v388);
  if (v202 && v203 > v202)
  {
    v205 = 63;
    v206 = *((_QWORD *)this + 287) & 0x3FLL;
    if (v206 && v206 != 63)
      v205 = ~(-1 << v206);
    if ((*((_BYTE *)this + 2272) & 1) != 0)
      v207 = (char *)this + 2280;
    else
      v207 = (char *)*((_QWORD *)this + 286);
    *(_QWORD *)&v207[8 * *((_QWORD *)this + 283) - 8] &= v205;
  }
  v185 = v401;
  v184 = (char *)this + 2256;
LABEL_315:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v184, v185);
  if (!*((_BYTE *)this + 2320))
    goto LABEL_333;
  v208 = *((_QWORD *)this + 283);
  v209 = *((_DWORD *)this + 568);
  if (v208 >= 0xB)
  {
    if ((v209 & 1) != 0)
      v210 = (_QWORD *)((char *)this + 2280);
    else
      v210 = (_QWORD *)*((_QWORD *)this + 286);
    v212 = 8 * v208;
    while (!*v210)
    {
      ++v210;
      v212 -= 8;
      if (!v212)
        goto LABEL_333;
    }
LABEL_331:
    v216 = (re::ecs2::System *)*((_QWORD *)this + 288);
    if (!*((_BYTE *)v216 + 86))
      re::ecs2::System::queueToRun(v216, 0.0);
    goto LABEL_333;
  }
  if ((v209 & 1) != 0)
  {
    v211 = (uint64_t *)((char *)this + 2280);
    if (!v208)
      goto LABEL_333;
  }
  else
  {
    v211 = (uint64_t *)*((_QWORD *)this + 286);
    if (!v208)
      goto LABEL_333;
  }
  v213 = 0;
  v214 = 8 * v208;
  do
  {
    v215 = *v211++;
    v213 |= v215;
    v214 -= 8;
  }
  while (v214);
  if (v213)
    goto LABEL_331;
LABEL_333:
  v368 = (re::ecs2::Scene *)a2;
  v217 = *((_QWORD *)this + 331);
  v218 = *((_DWORD *)this + 664);
  if (v217 >= 0xB)
  {
    if ((v218 & 1) != 0)
      v219 = (_QWORD *)((char *)this + 2664);
    else
      v219 = (_QWORD *)*((_QWORD *)this + 334);
    v221 = 8 * v217;
    while (!*v219)
    {
      ++v219;
      v221 -= 8;
      if (!v221)
        goto LABEL_349;
    }
    goto LABEL_348;
  }
  if ((v218 & 1) != 0)
  {
    v220 = (uint64_t *)((char *)this + 2664);
    if (!v217)
      goto LABEL_349;
  }
  else
  {
    v220 = (uint64_t *)*((_QWORD *)this + 334);
    if (!v217)
      goto LABEL_349;
  }
  v222 = 0;
  v223 = 8 * v217;
  do
  {
    v224 = *v220++;
    v222 |= v224;
    v223 -= 8;
  }
  while (v223);
  if (v222)
  {
LABEL_348:
    *(_QWORD *)&v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 2640, 0);
    v225 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2520, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::init(v225, (uint64_t)this + 2520, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2576), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2640, v388);
    v226 = (char *)this + 2688;
    v227 = v388;
    goto LABEL_381;
  }
LABEL_349:
  v392 = 0u;
  v395 = 0u;
  v388 = 0u;
  *(_QWORD *)&v389 = 0;
  v390 = 0u;
  v391 = 0u;
  *((_QWORD *)&v389 + 1) = -1;
  *(_QWORD *)&v392 = 0;
  DWORD2(v392) = 1;
  v393 = 0;
  v394 = 0;
  v228 = *((_QWORD *)this + 320);
  *(_QWORD *)&v395 = 0;
  v17 = *((_QWORD *)this + 316);
  DWORD2(v395) = 0;
  if (v228 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 315, (v228 + 4) >> 2);
    v17 = *((_QWORD *)this + 316);
  }
  v18 = v228 >> 2;
  if (v17 <= v228 >> 2)
    goto LABEL_559;
  if ((*((_BYTE *)this + 2536) & 1) != 0)
    v229 = (char *)this + 2544;
  else
    v229 = (char *)*((_QWORD *)this + 319);
  v230 = *(_QWORD *)&v229[8 * v18];
  ++*((_QWORD *)this + 320);
  ++*((_DWORD *)this + 642);
  v231 = v230 + 112 * (v228 & 3);
  v232 = v388;
  v233 = v389;
  v234 = v390;
  *(_QWORD *)(v231 + 48) = v391;
  *(_OWORD *)(v231 + 16) = v233;
  *(_OWORD *)(v231 + 32) = v234;
  *(_OWORD *)v231 = v232;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v231 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  v236 = *((_QWORD *)this + 320);
  if (!v236)
    goto LABEL_560;
  v237 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2520, v236 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::init(v237, (uint64_t)this + 2520, (uint64_t)v368);
  *(_QWORD *)&v401 = *((_QWORD *)this + 320) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2576), &v368, (uint64_t *)&v401);
  v238 = *((_QWORD *)this + 320);
  v239 = *((_QWORD *)this + 335);
  if ((v238 & 0x3F) != 0)
    v240 = (v238 >> 6) + 1;
  else
    v240 = v238 >> 6;
  *((_QWORD *)this + 335) = v238;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2640), v240, &v388);
  if (v238 && v239 > v238)
  {
    v241 = 63;
    v242 = *((_QWORD *)this + 335) & 0x3FLL;
    if (v242 && v242 != 63)
      v241 = ~(-1 << v242);
    if ((*((_BYTE *)this + 2656) & 1) != 0)
      v243 = (char *)this + 2664;
    else
      v243 = (char *)*((_QWORD *)this + 334);
    *(_QWORD *)&v243[8 * *((_QWORD *)this + 331) - 8] &= v241;
  }
  v244 = *((_QWORD *)this + 320);
  v245 = *((_QWORD *)this + 341);
  if ((v244 & 0x3F) != 0)
    v246 = (v244 >> 6) + 1;
  else
    v246 = v244 >> 6;
  *((_QWORD *)this + 341) = v244;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2688), v246, &v388);
  if (v244 && v245 > v244)
  {
    v247 = 63;
    v248 = *((_QWORD *)this + 341) & 0x3FLL;
    if (v248 && v248 != 63)
      v247 = ~(-1 << v248);
    if ((*((_BYTE *)this + 2704) & 1) != 0)
      v249 = (char *)this + 2712;
    else
      v249 = (char *)*((_QWORD *)this + 340);
    *(_QWORD *)&v249[8 * *((_QWORD *)this + 337) - 8] &= v247;
  }
  v227 = v401;
  v226 = (char *)this + 2688;
LABEL_381:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v226, v227);
  if (!*((_BYTE *)this + 2752))
    goto LABEL_399;
  v250 = *((_QWORD *)this + 337);
  v251 = *((_DWORD *)this + 676);
  if (v250 >= 0xB)
  {
    if ((v251 & 1) != 0)
      v252 = (_QWORD *)((char *)this + 2712);
    else
      v252 = (_QWORD *)*((_QWORD *)this + 340);
    v254 = 8 * v250;
    while (!*v252)
    {
      ++v252;
      v254 -= 8;
      if (!v254)
        goto LABEL_399;
    }
LABEL_397:
    v258 = (re::ecs2::System *)*((_QWORD *)this + 342);
    if (!*((_BYTE *)v258 + 86))
      re::ecs2::System::queueToRun(v258, 0.0);
    goto LABEL_399;
  }
  if ((v251 & 1) != 0)
  {
    v253 = (uint64_t *)((char *)this + 2712);
    if (!v250)
      goto LABEL_399;
  }
  else
  {
    v253 = (uint64_t *)*((_QWORD *)this + 340);
    if (!v250)
      goto LABEL_399;
  }
  v255 = 0;
  v256 = 8 * v250;
  do
  {
    v257 = *v253++;
    v255 |= v257;
    v256 -= 8;
  }
  while (v256);
  if (v255)
    goto LABEL_397;
LABEL_399:
  v368 = (re::ecs2::Scene *)a2;
  v259 = *((_QWORD *)this + 385);
  v260 = *((_DWORD *)this + 772);
  if (v259 >= 0xB)
  {
    if ((v260 & 1) != 0)
      v261 = (_QWORD *)((char *)this + 3096);
    else
      v261 = (_QWORD *)*((_QWORD *)this + 388);
    v263 = 8 * v259;
    while (!*v261)
    {
      ++v261;
      v263 -= 8;
      if (!v263)
        goto LABEL_415;
    }
    goto LABEL_414;
  }
  if ((v260 & 1) != 0)
  {
    v262 = (uint64_t *)((char *)this + 3096);
    if (!v259)
      goto LABEL_415;
  }
  else
  {
    v262 = (uint64_t *)*((_QWORD *)this + 388);
    if (!v259)
      goto LABEL_415;
  }
  v264 = 0;
  v265 = 8 * v259;
  do
  {
    v266 = *v262++;
    v264 |= v266;
    v265 -= 8;
  }
  while (v265);
  if (v264)
  {
LABEL_414:
    *(_QWORD *)&v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 3072, 0);
    v267 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2952, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::init(v267, (uint64_t)this + 2952, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 3008), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 3072, v388);
    v268 = (char *)this + 3120;
    v269 = v388;
    goto LABEL_447;
  }
LABEL_415:
  v392 = 0u;
  v395 = 0u;
  v388 = 0u;
  *(_QWORD *)&v389 = 0;
  v390 = 0u;
  v391 = 0u;
  *((_QWORD *)&v389 + 1) = -1;
  *(_QWORD *)&v392 = 0;
  DWORD2(v392) = 1;
  v393 = 0;
  v394 = 0;
  v270 = *((_QWORD *)this + 374);
  *(_QWORD *)&v395 = 0;
  v17 = *((_QWORD *)this + 370);
  DWORD2(v395) = 0;
  if (v270 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 369, (v270 + 4) >> 2);
    v17 = *((_QWORD *)this + 370);
  }
  v18 = v270 >> 2;
  if (v17 <= v270 >> 2)
    goto LABEL_561;
  if ((*((_BYTE *)this + 2968) & 1) != 0)
    v271 = (char *)this + 2976;
  else
    v271 = (char *)*((_QWORD *)this + 373);
  v272 = *(_QWORD *)&v271[8 * v18];
  ++*((_QWORD *)this + 374);
  ++*((_DWORD *)this + 750);
  v273 = v272 + 112 * (v270 & 3);
  v274 = v388;
  v275 = v389;
  v276 = v390;
  *(_QWORD *)(v273 + 48) = v391;
  *(_OWORD *)(v273 + 16) = v275;
  *(_OWORD *)(v273 + 32) = v276;
  *(_OWORD *)v273 = v274;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v273 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  v278 = *((_QWORD *)this + 374);
  if (!v278)
  {
LABEL_562:
    re::internal::assertLog((re::internal *)4, v277, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v279 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2952, v278 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::init(v279, (uint64_t)this + 2952, (uint64_t)v368);
  *(_QWORD *)&v401 = *((_QWORD *)this + 374) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 3008), &v368, (uint64_t *)&v401);
  v280 = *((_QWORD *)this + 374);
  v281 = *((_QWORD *)this + 389);
  if ((v280 & 0x3F) != 0)
    v282 = (v280 >> 6) + 1;
  else
    v282 = v280 >> 6;
  *((_QWORD *)this + 389) = v280;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 3072), v282, &v388);
  if (v280 && v281 > v280)
  {
    v283 = 63;
    v284 = *((_QWORD *)this + 389) & 0x3FLL;
    if (v284 && v284 != 63)
      v283 = ~(-1 << v284);
    if ((*((_BYTE *)this + 3088) & 1) != 0)
      v285 = (char *)this + 3096;
    else
      v285 = (char *)*((_QWORD *)this + 388);
    *(_QWORD *)&v285[8 * *((_QWORD *)this + 385) - 8] &= v283;
  }
  v286 = *((_QWORD *)this + 374);
  v287 = *((_QWORD *)this + 395);
  if ((v286 & 0x3F) != 0)
    v288 = (v286 >> 6) + 1;
  else
    v288 = v286 >> 6;
  *((_QWORD *)this + 395) = v286;
  *(_QWORD *)&v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 3120), v288, &v388);
  if (v286 && v287 > v286)
  {
    v289 = 63;
    v290 = *((_QWORD *)this + 395) & 0x3FLL;
    if (v290 && v290 != 63)
      v289 = ~(-1 << v290);
    if ((*((_BYTE *)this + 3136) & 1) != 0)
      v291 = (char *)this + 3144;
    else
      v291 = (char *)*((_QWORD *)this + 394);
    *(_QWORD *)&v291[8 * *((_QWORD *)this + 391) - 8] &= v289;
  }
  v269 = v401;
  v268 = (char *)this + 3120;
LABEL_447:
  v292 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v268, v269);
  if (!*((_BYTE *)this + 3184))
    goto LABEL_465;
  v293 = *((_QWORD *)this + 391);
  v294 = *((_DWORD *)this + 784);
  if (v293 >= 0xB)
  {
    if ((v294 & 1) != 0)
      v295 = (_QWORD *)((char *)this + 3144);
    else
      v295 = (_QWORD *)*((_QWORD *)this + 394);
    v297 = 8 * v293;
    while (!*v295)
    {
      ++v295;
      v297 -= 8;
      if (!v297)
        goto LABEL_465;
    }
LABEL_463:
    v292 = (re::ecs2::System *)*((_QWORD *)this + 396);
    if (!*((_BYTE *)v292 + 86))
      re::ecs2::System::queueToRun(v292, 0.0);
    goto LABEL_465;
  }
  if ((v294 & 1) != 0)
  {
    v296 = (uint64_t *)((char *)this + 3144);
    if (!v293)
      goto LABEL_465;
  }
  else
  {
    v296 = (uint64_t *)*((_QWORD *)this + 394);
    if (!v293)
      goto LABEL_465;
  }
  v298 = 0;
  v299 = 8 * v293;
  do
  {
    v300 = *v296++;
    v298 |= v300;
    v299 -= 8;
  }
  while (v299);
  if (v298)
    goto LABEL_463;
LABEL_465:
  v369 = (re::ecs2::Scene *)a2;
  v301 = a2[36];
  if (v301)
  {
    v302 = re::globalAllocators(v292)[2];
    *((_QWORD *)&v389 + 1) = v302;
    v303 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v302 + 32))(v302, 32, 0);
    *v303 = &off_24ED60808;
    v303[1] = (char *)this + 168;
    v303[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::handleSceneEntityWillRemove;
    v303[3] = 0;
    *(_QWORD *)&v390 = v303;
    *((_QWORD *)&v402 + 1) = v302;
    *(_QWORD *)&v403 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
    *(_QWORD *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v301, (uint64_t)&v401, 0, 0);
    *(_QWORD *)&v396[8] = v304;
    if ((_QWORD)v403)
    {
      (**(void (***)(_QWORD))v403)(v403);
      if ((__int128 *)v403 != &v401)
        (*(void (**)(_QWORD))(**((_QWORD **)&v402 + 1) + 40))(*((_QWORD *)&v402 + 1));
      *(_QWORD *)&v403 = 0;
    }
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 224, (uint64_t *)&v369, v396);
    v292 = (re::ecs2::System *)v390;
    if ((_QWORD)v390)
    {
      v292 = (re::ecs2::System *)(**(uint64_t (***)(_QWORD))v390)(v390);
      if ((__int128 *)v390 != &v388)
        v292 = (re::ecs2::System *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v389 + 1) + 40))(*((_QWORD *)&v389 + 1));
    }
    v305 = a2[36];
    v369 = (re::ecs2::Scene *)a2;
    if (v305)
    {
      v306 = re::globalAllocators(v292)[2];
      *((_QWORD *)&v389 + 1) = v306;
      v307 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v306 + 32))(v306, 32, 0);
      *v307 = &off_24ED60860;
      v307[1] = (char *)this + 600;
      v307[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::handleSceneEntityWillRemove;
      v307[3] = 0;
      *(_QWORD *)&v390 = v307;
      *((_QWORD *)&v402 + 1) = v306;
      *(_QWORD *)&v403 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
      *(_QWORD *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v305, (uint64_t)&v401, 0, 0);
      *(_QWORD *)&v396[8] = v308;
      if ((_QWORD)v403)
      {
        (**(void (***)(_QWORD))v403)(v403);
        if ((__int128 *)v403 != &v401)
          (*(void (**)(_QWORD))(**((_QWORD **)&v402 + 1) + 40))(*((_QWORD *)&v402 + 1));
        *(_QWORD *)&v403 = 0;
      }
      re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 656, (uint64_t *)&v369, v396);
      v292 = (re::ecs2::System *)v390;
      if ((_QWORD)v390)
      {
        v292 = (re::ecs2::System *)(**(uint64_t (***)(_QWORD))v390)(v390);
        if ((__int128 *)v390 != &v388)
          v292 = (re::ecs2::System *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v389 + 1) + 40))(*((_QWORD *)&v389 + 1));
      }
      v309 = a2[36];
      v369 = (re::ecs2::Scene *)a2;
      if (v309)
      {
        v310 = re::globalAllocators(v292)[2];
        *((_QWORD *)&v389 + 1) = v310;
        v311 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v310 + 32))(v310, 32, 0);
        *v311 = &off_24ED608B8;
        v311[1] = (char *)this + 1032;
        v311[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::handleSceneEntityWillRemove;
        v311[3] = 0;
        *(_QWORD *)&v390 = v311;
        *((_QWORD *)&v402 + 1) = v310;
        *(_QWORD *)&v403 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
        *(_QWORD *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v309, (uint64_t)&v401, 0, 0);
        *(_QWORD *)&v396[8] = v312;
        if ((_QWORD)v403)
        {
          (**(void (***)(_QWORD))v403)(v403);
          if ((__int128 *)v403 != &v401)
            (*(void (**)(_QWORD))(**((_QWORD **)&v402 + 1) + 40))(*((_QWORD *)&v402 + 1));
          *(_QWORD *)&v403 = 0;
        }
        re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 1088, (uint64_t *)&v369, v396);
        v292 = (re::ecs2::System *)v390;
        if ((_QWORD)v390)
        {
          v292 = (re::ecs2::System *)(**(uint64_t (***)(_QWORD))v390)(v390);
          if ((__int128 *)v390 != &v388)
            v292 = (re::ecs2::System *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v389 + 1) + 40))(*((_QWORD *)&v389 + 1));
        }
        v313 = a2[36];
        v369 = (re::ecs2::Scene *)a2;
        if (v313)
        {
          v314 = re::globalAllocators(v292)[2];
          *((_QWORD *)&v389 + 1) = v314;
          v315 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v314 + 32))(v314, 32, 0);
          *v315 = &off_24ED60910;
          v315[1] = (char *)this + 1464;
          v315[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::handleSceneEntityWillRemove;
          v315[3] = 0;
          *(_QWORD *)&v390 = v315;
          *((_QWORD *)&v402 + 1) = v314;
          *(_QWORD *)&v403 = 0;
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
          *(_QWORD *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v313, (uint64_t)&v401, 0, 0);
          *(_QWORD *)&v396[8] = v316;
          if ((_QWORD)v403)
          {
            (**(void (***)(_QWORD))v403)(v403);
            if ((__int128 *)v403 != &v401)
              (*(void (**)(_QWORD))(**((_QWORD **)&v402 + 1) + 40))(*((_QWORD *)&v402 + 1));
            *(_QWORD *)&v403 = 0;
          }
          re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 1520, (uint64_t *)&v369, v396);
          v292 = (re::ecs2::System *)v390;
          if ((_QWORD)v390)
          {
            v292 = (re::ecs2::System *)(**(uint64_t (***)(_QWORD))v390)(v390);
            if ((__int128 *)v390 != &v388)
              v292 = (re::ecs2::System *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v389 + 1) + 40))(*((_QWORD *)&v389 + 1));
          }
          v317 = a2[36];
          v369 = (re::ecs2::Scene *)a2;
          if (v317)
          {
            v318 = re::globalAllocators(v292)[2];
            *((_QWORD *)&v389 + 1) = v318;
            v319 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v318 + 32))(v318, 32, 0);
            *v319 = &off_24ED60968;
            v319[1] = (char *)this + 1896;
            v319[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::handleSceneEntityWillRemove;
            v319[3] = 0;
            *(_QWORD *)&v390 = v319;
            *((_QWORD *)&v402 + 1) = v318;
            *(_QWORD *)&v403 = 0;
            re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
            *(_QWORD *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v317, (uint64_t)&v401, 0, 0);
            *(_QWORD *)&v396[8] = v320;
            if ((_QWORD)v403)
            {
              (**(void (***)(_QWORD))v403)(v403);
              if ((__int128 *)v403 != &v401)
                (*(void (**)(_QWORD))(**((_QWORD **)&v402 + 1) + 40))(*((_QWORD *)&v402 + 1));
              *(_QWORD *)&v403 = 0;
            }
            re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 1952, (uint64_t *)&v369, v396);
            v292 = (re::ecs2::System *)v390;
            if ((_QWORD)v390)
            {
              v292 = (re::ecs2::System *)(**(uint64_t (***)(_QWORD))v390)(v390);
              if ((__int128 *)v390 != &v388)
                v292 = (re::ecs2::System *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v389 + 1) + 40))(*((_QWORD *)&v389 + 1));
            }
            v321 = a2[36];
            v369 = (re::ecs2::Scene *)a2;
            if (v321)
            {
              v322 = re::globalAllocators(v292)[2];
              *((_QWORD *)&v389 + 1) = v322;
              v323 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v322 + 32))(v322, 32, 0);
              *v323 = &off_24ED609C0;
              v323[1] = (char *)this + 2328;
              v323[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::handleSceneEntityWillRemove;
              v323[3] = 0;
              *(_QWORD *)&v390 = v323;
              *((_QWORD *)&v402 + 1) = v322;
              *(_QWORD *)&v403 = 0;
              re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
              *(_QWORD *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v321, (uint64_t)&v401, 0, 0);
              *(_QWORD *)&v396[8] = v324;
              if ((_QWORD)v403)
              {
                (**(void (***)(_QWORD))v403)(v403);
                if ((__int128 *)v403 != &v401)
                  (*(void (**)(_QWORD))(**((_QWORD **)&v402 + 1) + 40))(*((_QWORD *)&v402 + 1));
                *(_QWORD *)&v403 = 0;
              }
              re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 2384, (uint64_t *)&v369, v396);
              v292 = (re::ecs2::System *)v390;
              if ((_QWORD)v390)
              {
                v292 = (re::ecs2::System *)(**(uint64_t (***)(_QWORD))v390)(v390);
                if ((__int128 *)v390 != &v388)
                  v292 = (re::ecs2::System *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v389 + 1) + 40))(*((_QWORD *)&v389 + 1));
              }
              v325 = a2[36];
              v369 = (re::ecs2::Scene *)a2;
              if (v325)
              {
                v326 = re::globalAllocators(v292)[2];
                *((_QWORD *)&v389 + 1) = v326;
                v327 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v326 + 32))(v326, 32, 0);
                *v327 = &off_24ED60A18;
                v327[1] = (char *)this + 2760;
                v327[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::handleSceneEntityWillRemove;
                v327[3] = 0;
                *(_QWORD *)&v390 = v327;
                *((_QWORD *)&v402 + 1) = v326;
                *(_QWORD *)&v403 = 0;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
                *(_QWORD *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v325, (uint64_t)&v401, 0, 0);
                *(_QWORD *)&v396[8] = v328;
                if ((_QWORD)v403)
                {
                  (**(void (***)(_QWORD))v403)(v403);
                  if ((__int128 *)v403 != &v401)
                    (*(void (**)(_QWORD))(**((_QWORD **)&v402 + 1) + 40))(*((_QWORD *)&v402 + 1));
                  *(_QWORD *)&v403 = 0;
                }
                re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 2816, (uint64_t *)&v369, v396);
                v292 = (re::ecs2::System *)v390;
                if ((_QWORD)v390)
                {
                  v292 = (re::ecs2::System *)(**(uint64_t (***)(_QWORD))v390)(v390);
                  if ((__int128 *)v390 != &v388)
                    v292 = (re::ecs2::System *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v389 + 1) + 40))(*((_QWORD *)&v389 + 1));
                }
              }
            }
          }
        }
      }
    }
  }
  v388 = 0uLL;
  LODWORD(v389) = 1;
  v390 = 0uLL;
  *((_QWORD *)&v389 + 1) = 0;
  LODWORD(v391) = 0;
  v330 = a2[36];
  v386 = re::globalAllocators((re *)v329)[2];
  v331 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v386 + 32))(v386, 32, 0);
  *(_QWORD *)v331 = &off_24ED5FBF8;
  *((_QWORD *)v331 + 1) = this;
  *((_QWORD *)v331 + 2) = re::ecs2::LightSystem::componentDidAactivateEventHandler;
  *((_QWORD *)v331 + 3) = 0;
  v387 = v331;
  v332 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v330, (uint64_t)v385, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v334 = v333;
  v335 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *v335 = v332;
  v335[1] = v334;
  v336 = v387;
  if (v387)
  {
    v336 = (re *)(**(uint64_t (***)(re *))v387)(v387);
    if (v387 != (re *)v385)
      v336 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v386 + 40))(v386);
    v387 = 0;
  }
  v383 = re::globalAllocators(v336)[2];
  v337 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v383 + 32))(v383, 32, 0);
  *(_QWORD *)v337 = &off_24ED5FC50;
  *((_QWORD *)v337 + 1) = this;
  *((_QWORD *)v337 + 2) = re::ecs2::LightSystem::componentWillDeactivateEventHandler;
  *((_QWORD *)v337 + 3) = 0;
  v384 = v337;
  v338 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v330, (uint64_t)v382, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v340 = v339;
  v341 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *v341 = v338;
  v341[1] = v340;
  v342 = v384;
  if (v384)
  {
    v342 = (re *)(**(uint64_t (***)(re *))v384)(v384);
    if (v384 != (re *)v382)
      v342 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v383 + 40))(v383);
    v384 = 0;
  }
  v380 = re::globalAllocators(v342)[2];
  v343 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v380 + 32))(v380, 32, 0);
  *(_QWORD *)v343 = &off_24ED5FBF8;
  *((_QWORD *)v343 + 1) = this;
  *((_QWORD *)v343 + 2) = re::ecs2::LightSystem::componentDidAactivateEventHandler;
  *((_QWORD *)v343 + 3) = 0;
  v381 = v343;
  v344 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v330, (uint64_t)v379, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v346 = v345;
  v347 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *v347 = v344;
  v347[1] = v346;
  v348 = v381;
  if (v381)
  {
    v348 = (re *)(**(uint64_t (***)(re *))v381)(v381);
    if (v381 != (re *)v379)
      v348 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v380 + 40))(v380);
    v381 = 0;
  }
  v377 = re::globalAllocators(v348)[2];
  v349 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v377 + 32))(v377, 32, 0);
  *(_QWORD *)v349 = &off_24ED5FC50;
  *((_QWORD *)v349 + 1) = this;
  *((_QWORD *)v349 + 2) = re::ecs2::LightSystem::componentWillDeactivateEventHandler;
  *((_QWORD *)v349 + 3) = 0;
  v378 = v349;
  v350 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v330, (uint64_t)v376, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v352 = v351;
  v353 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *v353 = v350;
  v353[1] = v352;
  v354 = v378;
  if (v378)
  {
    v354 = (re *)(**(uint64_t (***)(re *))v378)(v378);
    if (v378 != (re *)v376)
      v354 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v377 + 40))(v377);
    v378 = 0;
  }
  v374 = re::globalAllocators(v354)[2];
  v355 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v374 + 32))(v374, 32, 0);
  *(_QWORD *)v355 = &off_24ED5FBF8;
  *((_QWORD *)v355 + 1) = this;
  *((_QWORD *)v355 + 2) = re::ecs2::LightSystem::componentDidAactivateEventHandler;
  *((_QWORD *)v355 + 3) = 0;
  v375 = v355;
  v356 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v330, (uint64_t)v373, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v358 = v357;
  v359 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *v359 = v356;
  v359[1] = v358;
  v360 = v375;
  if (v375)
  {
    v360 = (re *)(**(uint64_t (***)(re *))v375)(v375);
    if (v375 != (re *)v373)
      v360 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v374 + 40))(v374);
    v375 = 0;
  }
  v371 = re::globalAllocators(v360)[2];
  v361 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v371 + 32))(v371, 32, 0);
  *v361 = &off_24ED5FC50;
  v361[1] = this;
  v361[2] = re::ecs2::LightSystem::componentWillDeactivateEventHandler;
  v361[3] = 0;
  v372 = v361;
  v362 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v330, (uint64_t)v370, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v364 = v363;
  v365 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *v365 = v362;
  v365[1] = v364;
  if (v372)
  {
    (**(void (***)(_BYTE *))v372)(v372);
    if (v372 != v370)
      (*(void (**)(uint64_t))(*(_QWORD *)v371 + 40))(v371);
    v372 = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 3192, (uint64_t *)&v367, (uint64_t)&v388);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v388);
  result = v388;
  if ((_QWORD)v388)
  {
    if ((v389 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v388 + 40))();
  }
  return result;
}

uint64_t re::ecs2::LightSystem::componentDidAactivateEventHandler(uint64_t a1, re::ecs2::ComponentTypeBase *a2, re::ecs2::LightSystem **a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)re::ecs2::LightSystem::lightComponentFromShadowMapComponentType(a3[1], a2, (re::ecs2::Entity *)a3);
  if (v3)
    re::ecs2::Component::markDirty(v3);
  return 0;
}

uint64_t re::ecs2::LightSystem::componentWillDeactivateEventHandler(uint64_t a1, re::ecs2::ComponentTypeBase *a2, re::ecs2::LightSystem **a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)re::ecs2::LightSystem::lightComponentFromShadowMapComponentType(a3[1], a2, (re::ecs2::Entity *)a3);
  if (v3)
    re::ecs2::Component::markDirty(v3);
  return 0;
}

uint64_t re::ecs2::LightSystem::willRemoveSceneFromECSService(re::ecs2::LightSystem *this, re::ecs2::Scene *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t j;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  re::ecs2::ComponentBucketsBase *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t k;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  re::ecs2::ComponentBucketsBase *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t m;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  re::ecs2::ComponentBucketsBase *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t n;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  re::ecs2::ComponentBucketsBase *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t ii;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  re::ecs2::ComponentBucketsBase *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t jj;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  re::ecs2::ComponentBucketsBase *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t kk;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  re::ecs2::ComponentBucketsBase *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t result;
  re::ecs2::Scene *v108;
  re::ecs2::Scene *v109;

  v108 = a2;
  v3 = (char *)this + 3192;
  v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 3192, (uint64_t *)&v108);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)(v4 + 40);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v5, i);
        if (*((_QWORD *)v108 + 36))
          re::EventBus::unsubscribe(*((_QWORD *)v108 + 36), *(_QWORD *)v8, *(_QWORD *)(v8 + 8));
      }
    }
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v108);
  v109 = v108;
  v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 52, &v109);
  if (v9 != -1)
  {
    v10 = *((_QWORD *)this + 53) + 16 * v9;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 480, *(_QWORD *)(v10 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 528, *(_QWORD *)(v10 + 8));
    v11 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 360, *(_QWORD *)(v10 + 8));
    if (*v11)
    {
      v12 = v11;
      *v11 = 0;
      v13 = v11 + 1;
      v14 = *(_QWORD *)(v11[1] + 288);
      if (v14)
      {
        v15 = v11[12];
        if (v15)
        {
          for (j = 0; j != v15; ++j)
          {
            v17 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v12 + 7), j);
            re::EventBus::unsubscribe(v14, *(_QWORD *)v17, *(_QWORD *)(v17 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v12 + 7));
      v18 = 0;
      v19 = v12 + 3;
      do
      {
        v20 = (re::ecs2::ComponentBucketsBase *)v12[2];
        if (*(_QWORD *)v20)
          re::ecs2::ComponentBucketsBase::removeBucket(v20, v19[v18]);
        v19[v18++] = -1;
      }
      while (v18 != 4);
      *v13 = 0;
      v13[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 52, &v109);
  }
  v109 = v108;
  v21 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 106, &v109);
  if (v21 != -1)
  {
    v22 = *((_QWORD *)this + 107) + 16 * v21;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 912, *(_QWORD *)(v22 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 960, *(_QWORD *)(v22 + 8));
    v23 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 792, *(_QWORD *)(v22 + 8));
    if (*v23)
    {
      v24 = v23;
      *v23 = 0;
      v25 = v23 + 1;
      v26 = *(_QWORD *)(v23[1] + 288);
      if (v26)
      {
        v27 = v23[12];
        if (v27)
        {
          for (k = 0; k != v27; ++k)
          {
            v29 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v24 + 7), k);
            re::EventBus::unsubscribe(v26, *(_QWORD *)v29, *(_QWORD *)(v29 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v24 + 7));
      v30 = 0;
      v31 = v24 + 3;
      do
      {
        v32 = (re::ecs2::ComponentBucketsBase *)v24[2];
        if (*(_QWORD *)v32)
          re::ecs2::ComponentBucketsBase::removeBucket(v32, v31[v30]);
        v31[v30++] = -1;
      }
      while (v30 != 4);
      *v25 = 0;
      v25[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 106, &v109);
  }
  v109 = v108;
  v33 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 160, &v109);
  if (v33 != -1)
  {
    v34 = *((_QWORD *)this + 161) + 16 * v33;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 1344, *(_QWORD *)(v34 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1392, *(_QWORD *)(v34 + 8));
    v35 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1224, *(_QWORD *)(v34 + 8));
    if (*v35)
    {
      v36 = v35;
      *v35 = 0;
      v37 = v35 + 1;
      v38 = *(_QWORD *)(v35[1] + 288);
      if (v38)
      {
        v39 = v35[12];
        if (v39)
        {
          for (m = 0; m != v39; ++m)
          {
            v41 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v36 + 7), m);
            re::EventBus::unsubscribe(v38, *(_QWORD *)v41, *(_QWORD *)(v41 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v36 + 7));
      v42 = 0;
      v43 = v36 + 3;
      do
      {
        v44 = (re::ecs2::ComponentBucketsBase *)v36[2];
        if (*(_QWORD *)v44)
          re::ecs2::ComponentBucketsBase::removeBucket(v44, v43[v42]);
        v43[v42++] = -1;
      }
      while (v42 != 4);
      *v37 = 0;
      v37[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 160, &v109);
  }
  v109 = v108;
  v45 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 214, &v109);
  if (v45 != -1)
  {
    v46 = *((_QWORD *)this + 215) + 16 * v45;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 1776, *(_QWORD *)(v46 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1824, *(_QWORD *)(v46 + 8));
    v47 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1656, *(_QWORD *)(v46 + 8));
    if (*v47)
    {
      v48 = v47;
      *v47 = 0;
      v49 = v47 + 1;
      v50 = *(_QWORD *)(v47[1] + 288);
      if (v50)
      {
        v51 = v47[12];
        if (v51)
        {
          for (n = 0; n != v51; ++n)
          {
            v53 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v48 + 7), n);
            re::EventBus::unsubscribe(v50, *(_QWORD *)v53, *(_QWORD *)(v53 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v48 + 7));
      v54 = 0;
      v55 = v48 + 3;
      do
      {
        v56 = (re::ecs2::ComponentBucketsBase *)v48[2];
        if (*(_QWORD *)v56)
          re::ecs2::ComponentBucketsBase::removeBucket(v56, v55[v54]);
        v55[v54++] = -1;
      }
      while (v54 != 4);
      *v49 = 0;
      v49[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 214, &v109);
  }
  v109 = v108;
  v57 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 268, &v109);
  if (v57 != -1)
  {
    v58 = *((_QWORD *)this + 269) + 16 * v57;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 2208, *(_QWORD *)(v58 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2256, *(_QWORD *)(v58 + 8));
    v59 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2088, *(_QWORD *)(v58 + 8));
    if (*v59)
    {
      v60 = v59;
      *v59 = 0;
      v61 = v59 + 1;
      v62 = *(_QWORD *)(v59[1] + 288);
      if (v62)
      {
        v63 = v59[12];
        if (v63)
        {
          for (ii = 0; ii != v63; ++ii)
          {
            v65 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v60 + 7), ii);
            re::EventBus::unsubscribe(v62, *(_QWORD *)v65, *(_QWORD *)(v65 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v60 + 7));
      v66 = 0;
      v67 = v60 + 3;
      do
      {
        v68 = (re::ecs2::ComponentBucketsBase *)v60[2];
        if (*(_QWORD *)v68)
          re::ecs2::ComponentBucketsBase::removeBucket(v68, v67[v66]);
        v67[v66++] = -1;
      }
      while (v66 != 4);
      *v61 = 0;
      v61[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 268, &v109);
  }
  v109 = v108;
  v69 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 322, &v109);
  if (v69 != -1)
  {
    v70 = *((_QWORD *)this + 323) + 16 * v69;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 2640, *(_QWORD *)(v70 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2688, *(_QWORD *)(v70 + 8));
    v71 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2520, *(_QWORD *)(v70 + 8));
    if (*v71)
    {
      v72 = v71;
      *v71 = 0;
      v73 = v71 + 1;
      v74 = *(_QWORD *)(v71[1] + 288);
      if (v74)
      {
        v75 = v71[12];
        if (v75)
        {
          for (jj = 0; jj != v75; ++jj)
          {
            v77 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v72 + 7), jj);
            re::EventBus::unsubscribe(v74, *(_QWORD *)v77, *(_QWORD *)(v77 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v72 + 7));
      v78 = 0;
      v79 = v72 + 3;
      do
      {
        v80 = (re::ecs2::ComponentBucketsBase *)v72[2];
        if (*(_QWORD *)v80)
          re::ecs2::ComponentBucketsBase::removeBucket(v80, v79[v78]);
        v79[v78++] = -1;
      }
      while (v78 != 4);
      *v73 = 0;
      v73[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 322, &v109);
  }
  v109 = v108;
  v81 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 376, &v109);
  if (v81 != -1)
  {
    v82 = *((_QWORD *)this + 377) + 16 * v81;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 3072, *(_QWORD *)(v82 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 3120, *(_QWORD *)(v82 + 8));
    v83 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2952, *(_QWORD *)(v82 + 8));
    if (*v83)
    {
      v84 = v83;
      *v83 = 0;
      v85 = v83 + 1;
      v86 = *(_QWORD *)(v83[1] + 288);
      if (v86)
      {
        v87 = v83[12];
        if (v87)
        {
          for (kk = 0; kk != v87; ++kk)
          {
            v89 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v84 + 7), kk);
            re::EventBus::unsubscribe(v86, *(_QWORD *)v89, *(_QWORD *)(v89 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v84 + 7));
      v90 = 0;
      v91 = v84 + 3;
      do
      {
        v92 = (re::ecs2::ComponentBucketsBase *)v84[2];
        if (*(_QWORD *)v92)
          re::ecs2::ComponentBucketsBase::removeBucket(v92, v91[v90]);
        v91[v90++] = -1;
      }
      while (v90 != 4);
      *v85 = 0;
      v85[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 376, &v109);
  }
  v109 = v108;
  v93 = *((_QWORD *)v108 + 36);
  if (v93)
  {
    v94 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 224, (uint64_t *)&v109);
    if (v94)
      re::EventBus::unsubscribe(v93, *(_QWORD *)v94, *(_QWORD *)(v94 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 224, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 176, (uint64_t *)&v109);
  v109 = v108;
  v95 = *((_QWORD *)v108 + 36);
  if (v95)
  {
    v96 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 656, (uint64_t *)&v109);
    if (v96)
      re::EventBus::unsubscribe(v95, *(_QWORD *)v96, *(_QWORD *)(v96 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 656, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 608, (uint64_t *)&v109);
  v109 = v108;
  v97 = *((_QWORD *)v108 + 36);
  if (v97)
  {
    v98 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 1088, (uint64_t *)&v109);
    if (v98)
      re::EventBus::unsubscribe(v97, *(_QWORD *)v98, *(_QWORD *)(v98 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1088, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1040, (uint64_t *)&v109);
  v109 = v108;
  v99 = *((_QWORD *)v108 + 36);
  if (v99)
  {
    v100 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 1520, (uint64_t *)&v109);
    if (v100)
      re::EventBus::unsubscribe(v99, *(_QWORD *)v100, *(_QWORD *)(v100 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1520, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1472, (uint64_t *)&v109);
  v109 = v108;
  v101 = *((_QWORD *)v108 + 36);
  if (v101)
  {
    v102 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 1952, (uint64_t *)&v109);
    if (v102)
      re::EventBus::unsubscribe(v101, *(_QWORD *)v102, *(_QWORD *)(v102 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1952, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1904, (uint64_t *)&v109);
  v109 = v108;
  v103 = *((_QWORD *)v108 + 36);
  if (v103)
  {
    v104 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 2384, (uint64_t *)&v109);
    if (v104)
      re::EventBus::unsubscribe(v103, *(_QWORD *)v104, *(_QWORD *)(v104 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2384, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2336, (uint64_t *)&v109);
  v109 = v108;
  v105 = *((_QWORD *)v108 + 36);
  if (v105)
  {
    v106 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 2816, (uint64_t *)&v109);
    if (v106)
      re::EventBus::unsubscribe(v105, *(_QWORD *)v106, *(_QWORD *)(v106 + 8));
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2816, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2768, (uint64_t *)&v109);
  result = *((_QWORD *)this + 20);
  if (result)
    return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)result + 64))(result, v108);
  return result;
}

uint64_t re::ecs2::LightSystem::lightComponentFromShadowMapComponentType(re::ecs2::LightSystem *this, re::ecs2::ComponentTypeBase *a2, re::ecs2::Entity *a3)
{
  const re::ecs2::ComponentTypeBase **v4;

  if (re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)this)
  {
    v4 = (const re::ecs2::ComponentTypeBase **)&re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)this)
  {
    v4 = (const re::ecs2::ComponentTypeBase **)&re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  else
  {
    if (re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this)
      return 0;
    v4 = (const re::ecs2::ComponentTypeBase **)&re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  return re::ecs2::EntityComponentCollection::get((re::ecs2::ComponentTypeBase *)((char *)a2 + 32), *v4);
}

uint64_t *re::ecs2::allocInfo_LightSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410D1A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410D1A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410D1A8, 0);
    *(uint64_t *)((char *)&qword_25410D1B8 + 6) = 0;
    qword_25410D1B8 = 0;
    qword_25410D1C8 = 0;
    qword_25410D1D0 = 0xFFFFFFFFLL;
    qword_25410D1A8 = (uint64_t)&off_24ED7DAA8;
    qword_25410D1D8 = (uint64_t)"LightSystem";
    dword_25410D1E0 = 0;
    unk_25410D1E8 = 0u;
    unk_25410D1F8 = 0u;
    unk_25410D208 = 0u;
    qword_25410D218 = 0;
    __cxa_guard_release(&qword_25410D1A0);
  }
  return &qword_25410D1A8;
}

void re::ecs2::initInfo_LightSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x1CEFB079BB7258ALL;
  v5[1] = "LightSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xCA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_LightSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::LightSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::LightSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LightSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LightSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::LightSystem *re::internal::defaultConstruct<re::ecs2::LightSystem>(int a1, int a2, re::ecs2::LightSystem *this)
{
  return re::ecs2::LightSystem::LightSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::LightSystem>(uint64_t a1, uint64_t a2, re::ecs2::LightSystem *a3)
{
  re::ecs2::LightSystem::~LightSystem(a3);
}

uint64_t re::ecs2::introspect_LightSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightSystem>, this);
}

void re::ecs2::LightSystem::~LightSystem(re::ecs2::LightSystem *this)
{
  re::ecs2::LightSystem::~LightSystem(this);
  JUMPOUT(0x2276933B8);
}

{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 399);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2952);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 3008);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3072);
  *((_QWORD *)this + 389) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3120);
  *((_QWORD *)this + 396) = 0;
  *((_QWORD *)this + 395) = 0;
  *((_QWORD *)this + 397) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3120);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3072);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 3008);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2952);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2952);
  *((_QWORD *)this + 345) = off_24ED5FCA8;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2864);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 352);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 346);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2520);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2576);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2640);
  *((_QWORD *)this + 335) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2688);
  *((_QWORD *)this + 342) = 0;
  *((_QWORD *)this + 341) = 0;
  *((_QWORD *)this + 343) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2688);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2640);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2576);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2520);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2520);
  *((_QWORD *)this + 291) = off_24ED5FCE8;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2432);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 298);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 292);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2088);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2144);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2208);
  *((_QWORD *)this + 281) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2256);
  *((_QWORD *)this + 288) = 0;
  *((_QWORD *)this + 287) = 0;
  *((_QWORD *)this + 289) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2256);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2208);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2144);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2088);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2088);
  *((_QWORD *)this + 237) = off_24ED5FD28;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2000);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 244);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 238);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1656);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1712);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1776);
  *((_QWORD *)this + 227) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1824);
  *((_QWORD *)this + 234) = 0;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 235) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1824);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1776);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1712);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1656);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1656);
  *((_QWORD *)this + 183) = off_24ED5FD68;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1568);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 190);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 184);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1224);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1280);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1344);
  *((_QWORD *)this + 173) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1392);
  *((_QWORD *)this + 180) = 0;
  *((_QWORD *)this + 179) = 0;
  *((_QWORD *)this + 181) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1392);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1344);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1280);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1224);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1224);
  *((_QWORD *)this + 129) = off_24ED5FDA8;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1136);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 136);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 130);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 792);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 848);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 912);
  *((_QWORD *)this + 119) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 960);
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 127) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 960);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 912);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 848);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 792);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 792);
  *((_QWORD *)this + 75) = off_24ED5FDE8;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 704);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 82);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 76);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 360);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 416);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 480);
  *((_QWORD *)this + 65) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 528);
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 73) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 528);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 480);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 416);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 360);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 360);
  *((_QWORD *)this + 21) = off_24ED5FE28;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 272);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 28);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 22);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::LightSystem::typeInfo(re::ecs2::LightSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightSystem>, 0);
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 128;
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return *(_QWORD *)(a1 + 136);
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  re::ecs2::EntityComponentCollection *v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  char v37;
  char v38;
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v24 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  {
    v23 = *(_QWORD *)(a2 + 8);
    v26 = 0u;
    memset(v25, 0, sizeof(v25));
    DWORD1(v26) = 0x7FFFFFFF;
    v22 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 8, &v23, (uint64_t *)v25);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v25);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v22, &v24);
  }
  else
  {
    v5 = (re::ecs2::EntityComponentCollection *)(a3 + 32);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
      v7 = re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4;
    else
      v7 = 0;
    if (v7)
    {
      v8 = result;
      v9 = re::ecs2::EntityComponentCollection::get(v5, a4);
      re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)(v8 + 48));
      v10 = *(_OWORD *)(v8 + 128);
      v28 = *(_OWORD *)(v8 + 112);
      v29 = v10;
      v30[0] = *(_OWORD *)(v8 + 144);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(v8 + 156);
      v11 = *(_OWORD *)(v8 + 96);
      v26 = *(_OWORD *)(v8 + 80);
      v27 = v11;
      v12 = *(_OWORD *)(v8 + 208);
      v13 = *(_OWORD *)(v8 + 224);
      v36 = *(_DWORD *)(v8 + 256);
      v33 = v12;
      v34 = v13;
      v35 = *(_OWORD *)(v8 + 240);
      v14 = *(_OWORD *)(v8 + 176);
      v15 = *(_OWORD *)(v8 + 192);
      v31 = v14;
      v32 = v15;
      v37 = *(_BYTE *)(v8 + 260);
      if (v37)
        v38 = *(_BYTE *)(v8 + 261);
      v39 = *(_WORD *)(v8 + 262);
      re::DynamicString::operator=((re::DynamicString *)(v8 + 48), (re::DynamicString *)v25);
      v16 = v27;
      *(_OWORD *)(v8 + 80) = v26;
      *(_OWORD *)(v8 + 96) = v16;
      *(_OWORD *)(v8 + 156) = *(_OWORD *)((char *)v30 + 12);
      v17 = v30[0];
      v18 = v28;
      *(_OWORD *)(v8 + 128) = v29;
      *(_OWORD *)(v8 + 144) = v17;
      *(_OWORD *)(v8 + 112) = v18;
      v19 = v32;
      *(_OWORD *)(v8 + 176) = v31;
      *(_OWORD *)(v8 + 192) = v19;
      *(_DWORD *)(v8 + 256) = v36;
      v20 = v35;
      v21 = v33;
      *(_OWORD *)(v8 + 224) = v34;
      *(_OWORD *)(v8 + 240) = v20;
      *(_OWORD *)(v8 + 208) = v21;
      if (*(_BYTE *)(v8 + 260) || v37)
      {
        if (!*(_BYTE *)(v8 + 260) || v37)
        {
          if (!*(_BYTE *)(v8 + 260) && v37)
            *(_BYTE *)(v8 + 260) = 1;
          *(_BYTE *)(v8 + 261) = v38;
        }
        else
        {
          *(_BYTE *)(v8 + 260) = 0;
        }
      }
      *(_WORD *)(v8 + 262) = v39;
      result = *(_QWORD *)&v25[0];
      if (*(_QWORD *)&v25[0])
      {
        if ((BYTE8(v25[0]) & 1) != 0)
          return (*(uint64_t (**)(void))(**(_QWORD **)&v25[0] + 40))();
      }
    }
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  re::ecs2::RenderOptions *v9;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  int v18;
  re::ecs2::EntityComponentCollection *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  unint64_t v30;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[28];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[21];
  char v47;
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v9 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v36, a5, 0);
  v33 = v36[0];
  if (*(_QWORD *)&v36[0] != a5 || WORD4(v36[0]) != 0xFFFFLL || (DWORD2(v36[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v33);
      if (*(_BYTE *)re::ecs2::RenderOptions::forEntity(v9, *(_QWORD *)(*(_QWORD *)v12 + 16)))
      {
        v13 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v33);
        v14 = *(_QWORD *)v13;
        v15 = *(_QWORD **)(*(_QWORD *)v13 + 16);
        memset(v36, 0, sizeof(v36));
        re::DynamicString::setCapacity(v36, 0);
        v40 = 0u;
        memset(v41, 0, 20);
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        *(_QWORD *)&v41[20] = 0x412000003C23D70ALL;
        v48 = 0;
        v45 = 0u;
        memset(v46, 0, sizeof(v46));
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        *(_QWORD *)v46 = v15[37];
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v34, v15[35], *(_QWORD *)v46);
        re::DynamicString::operator=((re::DynamicString *)v36, (re::DynamicString *)&v34);
        if (v34 && (v35 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v34 + 40))();
        v16 = *(unsigned int *)(v14 + 280) | ((unint64_t)*(unsigned __int8 *)(v14 + 288) << 32);
        v34 = *(_QWORD *)(v14 + 272);
        v35 = v16;
        *(_QWORD *)&v17 = re::ColorGamut3F::as(&v34, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v17) = v18;
        *(_OWORD *)v41 = v17;
        *(_DWORD *)&v41[16] = *(_DWORD *)(v14 + 28);
        *(_QWORD *)&v46[8] = *(_QWORD *)(v14 + 32);
        *(_DWORD *)&v41[20] = 1008981770;
        *(_DWORD *)&v41[24] = *(_DWORD *)&v46[8];
        v19 = (re::ecs2::EntityComponentCollection *)(v15 + 4);
        v20 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v21 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        LOBYTE(v48) = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
        if (HIBYTE(v48) && *(_BYTE *)(a6 + 16))
          HIBYTE(v48) = *(_BYTE *)(a6 + 17);
        if ((_BYTE)v48 && *(_BYTE *)(a6 + 18))
          LOBYTE(v48) = *(_BYTE *)(a6 + 19);
        re::DynamicString::operator=((re::DynamicString *)(v14 + 48), (re::DynamicString *)v36);
        v23 = v38;
        *(_OWORD *)(v14 + 80) = v37;
        *(_OWORD *)(v14 + 96) = v23;
        *(_OWORD *)(v14 + 156) = *(_OWORD *)&v41[12];
        v24 = *(_OWORD *)v41;
        v25 = v39;
        *(_OWORD *)(v14 + 128) = v40;
        *(_OWORD *)(v14 + 144) = v24;
        *(_OWORD *)(v14 + 112) = v25;
        *(_DWORD *)(v14 + 256) = *(_DWORD *)&v46[16];
        v26 = *(_OWORD *)v46;
        v27 = v44;
        *(_OWORD *)(v14 + 224) = v45;
        *(_OWORD *)(v14 + 240) = v26;
        v28 = v42;
        *(_OWORD *)(v14 + 192) = v43;
        *(_OWORD *)(v14 + 208) = v27;
        *(_OWORD *)(v14 + 176) = v28;
        if (*(_BYTE *)(v14 + 260) || v46[20])
        {
          if (!*(_BYTE *)(v14 + 260) || v46[20])
          {
            if (!*(_BYTE *)(v14 + 260) && v46[20])
              *(_BYTE *)(v14 + 260) = 1;
            *(_BYTE *)(v14 + 261) = v47;
          }
          else
          {
            *(_BYTE *)(v14 + 260) = 0;
          }
        }
        *(_WORD *)(v14 + 262) = v48;
        if (*(_QWORD *)&v36[0] && (BYTE8(v36[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v36[0] + 40))();
        v29 = 3;
      }
      else
      {
        v29 = 1;
      }
      v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v33);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a3, a4, v30, v29);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v33);
    }
    while ((_QWORD)v33 != a5 || WORD4(v33) != 0xFFFF || WORD5(v33) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PointLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  re::ecs2::TransformComponent **v13;
  float32x4_t v14;
  __int128 v15;
  re *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  float v21;
  float v22;
  uint64_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unsigned __int8 v28;
  NSObject *v29;
  int32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  unint64_t v50;
  float32x4_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[4];
  float v59;
  uint8_t buf[16];
  float32x4_t v61;
  float32x4_t v62;
  __int128 v63;
  _OWORD v64[4];

  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 136) + 24))(*(_QWORD *)(*(_QWORD *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v55 = *(_QWORD *)buf;
  v56 = *(_QWORD *)&buf[8];
  v54 = a5;
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    v52 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v55);
      v12 = *(_QWORD *)v11;
      v13 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v11 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v13, (const re::ecs2::Entity *)1, buf);
      v14 = v61;
      *(_OWORD *)(v12 + 80) = *(_OWORD *)buf;
      *(float32x4_t *)(v12 + 96) = v14;
      v15 = v63;
      *(float32x4_t *)(v12 + 112) = v62;
      *(_OWORD *)(v12 + 128) = v15;
      if (v58[0])
      {
        v21 = v59;
        v22 = *(float *)(v12 + 36);
        *(float *)(v12 + 248) = v59 * *(float *)(v12 + 32);
        *(float *)(v12 + 160) = *(float *)(v12 + 28) * powf(v21, v22);
      }
      v23 = 0;
      v17.i64[0] = *(_QWORD *)(v12 + 80);
      LODWORD(v20) = *(_DWORD *)(v12 + 88);
      v18.i64[0] = *(_QWORD *)(v12 + 96);
      v19.i64[0] = *(_QWORD *)(v12 + 112);
      v24 = vzip1q_s32((int32x4_t)v17, (int32x4_t)v19);
      v17.i32[2] = v20;
      DWORD1(v20) = *(_DWORD *)(v12 + 104);
      DWORD2(v20) = *(_DWORD *)(v12 + 120);
      v64[0] = vzip1q_s32(v24, (int32x4_t)v18);
      v64[1] = vzip2q_s32(v24, vdupq_lane_s32(*(int32x2_t *)v18.f32, 1));
      v64[2] = v20;
      v18.i32[2] = DWORD1(v20);
      v19.i32[2] = DWORD2(v20);
      do
      {
        *(float32x4_t *)&buf[v23 * 16] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(v64[v23])), v18, *(float32x2_t *)&v64[v23], 1), v19, (float32x4_t)v64[v23], 2);
        ++v23;
      }
      while (v23 != 3);
      v25.i32[3] = v62.i32[3];
      v26 = (float32x4_t)vcgeq_f32(v52, vabdq_f32((float32x4_t)xmmword_2260E5F40, v62));
      v27 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v52, vabdq_f32((float32x4_t)xmmword_2260E5F20, v61)), (int8x16_t)vcgeq_f32(v52, vabdq_f32((float32x4_t)xmmword_2260E5F10, *(float32x4_t *)buf))), (int8x16_t)v26);
      v27.i32[3] = v27.i32[2];
      if ((vminvq_u32((uint32x4_t)v27) & 0x80000000) == 0)
      {
        do
          v28 = __ldaxr((unsigned __int8 *)&re::ecs2::PointLightComponentStateImpl::processUpdatingComponent(re::ecs2::PointLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged);
        while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::PointLightComponentStateImpl::processUpdatingComponent(re::ecs2::PointLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged));
        if ((v28 & 1) == 0)
        {
          v29 = *re::ecsComponentsLogObjects(v16);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v29, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
          }
        }
        v27.i64[0] = *(_QWORD *)(v12 + 80);
        v25.i64[0] = *(_QWORD *)(v12 + 96);
        v26.i64[0] = *(_QWORD *)(v12 + 112);
        v27.i32[2] = *(_DWORD *)(v12 + 88);
        v25.i32[2] = *(_DWORD *)(v12 + 104);
        v26.i32[2] = *(_DWORD *)(v12 + 120);
        v30 = (int32x4_t)vmulq_f32(v27, v27);
        v30.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))).u32[0];
        v31 = vrsqrte_f32((float32x2_t)v30.u32[0]);
        v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v31, v31)));
        v33 = vmulq_n_f32(v27, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v32, v32))).f32[0]);
        v34 = vmulq_f32(v25, v33);
        v35 = vmulq_f32(v33, v33);
        v35.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0];
        v36 = vsubq_f32(v25, vmulq_n_f32(v33, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]/ v35.f32[0]));
        v37 = (int32x4_t)vmulq_f32(v36, v36);
        v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
        v38 = vrsqrte_f32((float32x2_t)v37.u32[0]);
        v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v38, v38)));
        v40 = vmulq_n_f32(v36, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v39, v39))).f32[0]);
        v41 = vmulq_f32(v26, v33);
        v42 = vmulq_n_f32(v33, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]/ v35.f32[0]);
        v43 = vmulq_f32(v26, v40);
        v44 = vsubq_f32(v26, v42);
        v42.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0];
        v45 = vmulq_f32(v40, v40);
        v46 = vsubq_f32(v44, vmulq_n_f32(v40, v42.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]));
        v47 = (int32x4_t)vmulq_f32(v46, v46);
        v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
        *(float32x2_t *)v45.f32 = vrsqrte_f32((float32x2_t)v47.u32[0]);
        *(float32x2_t *)v45.f32 = vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)));
        *(_QWORD *)(v12 + 80) = v33.i64[0];
        *(_DWORD *)(v12 + 88) = v33.i32[2];
        *(_QWORD *)(v12 + 96) = v40.i64[0];
        *(_DWORD *)(v12 + 104) = v40.i32[2];
        v48 = vmulq_n_f32(v46, vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32))).f32[0]);
        *(_QWORD *)(v12 + 112) = v48.i64[0];
        *(_DWORD *)(v12 + 120) = v48.i32[2];
      }
      v49 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v13, &v57);
      if (v49)
        re::DynamicArray<re::PointLightInfo>::add(v49 + 168, (re::DynamicString *)(v12 + 48));
      v50 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v55);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v50, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v55);
    }
    while (v55 != v54 || (unsigned __int16)v56 != 0xFFFF || WORD1(v56) != 0xFFFF);
  }
  return *(_DWORD *)(v54 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 128;
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return *(_QWORD *)(a1 + 136);
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  re::ecs2::EntityComponentCollection *v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[28];
  char v36;
  char v37;
  __int16 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v24 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  {
    v23 = *(_QWORD *)(a2 + 8);
    v26 = 0u;
    memset(v25, 0, sizeof(v25));
    DWORD1(v26) = 0x7FFFFFFF;
    v22 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 8, &v23, (uint64_t *)v25);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v25);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v22, &v24);
  }
  else
  {
    v5 = (re::ecs2::EntityComponentCollection *)(a3 + 32);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
      v7 = re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4;
    else
      v7 = 0;
    if (v7)
    {
      v8 = result;
      v9 = re::ecs2::EntityComponentCollection::get(v5, a4);
      re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)(v8 + 48));
      v10 = *(_OWORD *)(v8 + 128);
      v28 = *(_OWORD *)(v8 + 112);
      v29 = v10;
      v30[0] = *(_OWORD *)(v8 + 144);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(v8 + 156);
      v11 = *(_OWORD *)(v8 + 96);
      v26 = *(_OWORD *)(v8 + 80);
      v27 = v11;
      v12 = *(_OWORD *)(v8 + 208);
      v13 = *(_OWORD *)(v8 + 224);
      *(_OWORD *)&v35[12] = *(_OWORD *)(v8 + 252);
      v33 = v12;
      v34 = v13;
      *(_OWORD *)v35 = *(_OWORD *)(v8 + 240);
      v14 = *(_OWORD *)(v8 + 176);
      v15 = *(_OWORD *)(v8 + 192);
      v31 = v14;
      v32 = v15;
      v36 = *(_BYTE *)(v8 + 268);
      if (v36)
        v37 = *(_BYTE *)(v8 + 269);
      v38 = *(_WORD *)(v8 + 270);
      v39 = *(_BYTE *)(v8 + 272);
      re::DynamicString::operator=((re::DynamicString *)(v8 + 48), (re::DynamicString *)v25);
      v16 = v27;
      *(_OWORD *)(v8 + 80) = v26;
      *(_OWORD *)(v8 + 96) = v16;
      *(_OWORD *)(v8 + 156) = *(_OWORD *)((char *)v30 + 12);
      v17 = v30[0];
      v18 = v28;
      *(_OWORD *)(v8 + 128) = v29;
      *(_OWORD *)(v8 + 144) = v17;
      *(_OWORD *)(v8 + 112) = v18;
      v19 = v32;
      *(_OWORD *)(v8 + 176) = v31;
      *(_OWORD *)(v8 + 192) = v19;
      *(_OWORD *)(v8 + 252) = *(_OWORD *)&v35[12];
      v20 = *(_OWORD *)v35;
      v21 = v33;
      *(_OWORD *)(v8 + 224) = v34;
      *(_OWORD *)(v8 + 240) = v20;
      *(_OWORD *)(v8 + 208) = v21;
      if (*(_BYTE *)(v8 + 268) || v36)
      {
        if (!*(_BYTE *)(v8 + 268) || v36)
        {
          if (!*(_BYTE *)(v8 + 268) && v36)
            *(_BYTE *)(v8 + 268) = 1;
          *(_BYTE *)(v8 + 269) = v37;
        }
        else
        {
          *(_BYTE *)(v8 + 268) = 0;
        }
      }
      *(_WORD *)(v8 + 270) = v38;
      *(_BYTE *)(v8 + 272) = v39;
      result = *(_QWORD *)&v25[0];
      if (*(_QWORD *)&v25[0])
      {
        if ((BYTE8(v25[0]) & 1) != 0)
          return (*(uint64_t (**)(void))(**(_QWORD **)&v25[0] + 40))();
      }
    }
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  int v17;
  int8x16_t v18;
  re::ecs2::EntityComponentCollection *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  unint64_t v30;
  re::ecs2::RenderOptions *v32;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[28];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[29];
  char v48;
  __int16 v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v32 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v37, a5, 0);
  v34 = v37[0];
  if (*(_QWORD *)&v37[0] != a5 || WORD4(v37[0]) != 0xFFFFLL || (DWORD2(v37[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
      if (*(_BYTE *)re::ecs2::RenderOptions::forEntity(v32, *(_QWORD *)(*(_QWORD *)v11 + 16)))
      {
        v12 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
        v13 = *(_QWORD *)v12;
        v14 = *(_QWORD **)(*(_QWORD *)v12 + 16);
        memset(v37, 0, sizeof(v37));
        re::DynamicString::setCapacity(v37, 0);
        v41 = 0u;
        memset(v42, 0, 20);
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
        *(_QWORD *)&v42[20] = 0x412000003C23D70ALL;
        v49 = 0;
        v50 = 0;
        v46 = 0u;
        memset(v47, 0, sizeof(v47));
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        *(_QWORD *)v47 = v14[37];
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v35, v14[35], *(_QWORD *)v47);
        re::DynamicString::operator=((re::DynamicString *)v37, (re::DynamicString *)&v35);
        if (v35 && (v36 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v35 + 40))();
        v15 = *(unsigned int *)(v13 + 296) | ((unint64_t)*(unsigned __int8 *)(v13 + 304) << 32);
        v35 = *(_QWORD *)(v13 + 288);
        v36 = v15;
        *(_QWORD *)&v16 = re::ColorGamut3F::as(&v35, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v16) = v17;
        *(_OWORD *)v42 = v16;
        *(_DWORD *)&v42[16] = *(_DWORD *)(v13 + 28);
        v18 = *(int8x16_t *)(v13 + 32);
        *(int8x16_t *)&v47[8] = vextq_s8(v18, v18, 8uLL);
        *(_DWORD *)&v42[20] = 1008981770;
        *(_DWORD *)&v42[24] = v18.i32[2];
        LOBYTE(v49) = 0;
        v19 = (re::ecs2::EntityComponentCollection *)(v14 + 4);
        v20 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v21 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        HIBYTE(v49) = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
        if (v50 && *(_BYTE *)(a6 + 16))
          v50 = *(_BYTE *)(a6 + 17);
        if (HIBYTE(v49) && *(_BYTE *)(a6 + 18))
          HIBYTE(v49) = *(_BYTE *)(a6 + 19);
        re::DynamicString::operator=((re::DynamicString *)(v13 + 48), (re::DynamicString *)v37);
        v23 = v39;
        *(_OWORD *)(v13 + 80) = v38;
        *(_OWORD *)(v13 + 96) = v23;
        *(_OWORD *)(v13 + 156) = *(_OWORD *)&v42[12];
        v24 = *(_OWORD *)v42;
        v25 = v40;
        *(_OWORD *)(v13 + 128) = v41;
        *(_OWORD *)(v13 + 144) = v24;
        *(_OWORD *)(v13 + 112) = v25;
        *(_OWORD *)(v13 + 252) = *(_OWORD *)&v47[12];
        v26 = *(_OWORD *)v47;
        v27 = v45;
        *(_OWORD *)(v13 + 224) = v46;
        *(_OWORD *)(v13 + 240) = v26;
        v28 = v43;
        *(_OWORD *)(v13 + 192) = v44;
        *(_OWORD *)(v13 + 208) = v27;
        *(_OWORD *)(v13 + 176) = v28;
        if (*(_BYTE *)(v13 + 268) || v47[28])
        {
          if (!*(_BYTE *)(v13 + 268) || v47[28])
          {
            if (!*(_BYTE *)(v13 + 268) && v47[28])
              *(_BYTE *)(v13 + 268) = 1;
            *(_BYTE *)(v13 + 269) = v48;
          }
          else
          {
            *(_BYTE *)(v13 + 268) = 0;
          }
        }
        *(_WORD *)(v13 + 270) = v49;
        *(_BYTE *)(v13 + 272) = v50;
        if (*(_QWORD *)&v37[0] && (BYTE8(v37[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v37[0] + 40))();
        v29 = 3;
      }
      else
      {
        v29 = 1;
      }
      v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v34);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a3, a4, v30, v29);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v34);
    }
    while ((_QWORD)v34 != a5 || WORD4(v34) != 0xFFFF || WORD5(v34) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SpotLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  re::ecs2::TransformComponent **v13;
  float32x4_t v14;
  float32x4_t v15;
  re *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  float v21;
  float v22;
  float32x4_t v23;
  uint64_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  unsigned __int8 v29;
  NSObject *v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  unint64_t v51;
  float32x4_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[4];
  float v60;
  uint8_t buf[16];
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  _OWORD v65[4];

  v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 136) + 24))(*(_QWORD *)(*(_QWORD *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v56 = *(_QWORD *)buf;
  v57 = *(_QWORD *)&buf[8];
  v55 = a5;
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    v53 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v56);
      v12 = *(_QWORD *)v11;
      v13 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v11 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v13, (const re::ecs2::Entity *)1, buf);
      v14 = v62;
      *(_OWORD *)(v12 + 80) = *(_OWORD *)buf;
      *(float32x4_t *)(v12 + 96) = v14;
      v15 = v64;
      *(float32x4_t *)(v12 + 112) = v63;
      *(float32x4_t *)(v12 + 128) = v15;
      if (v59[0])
      {
        v21 = v60;
        v22 = *(float *)(v12 + 44);
        *(float *)(v12 + 248) = v60 * *(float *)(v12 + 40);
        *(float *)(v12 + 160) = *(float *)(v12 + 28) * powf(v21, v22);
        re::Projection::makePerspectiveFieldOfViewReverseDepth(*(float *)(v12 + 256), 1.0, v21 * *(float *)(v12 + 164), v21 * *(float *)(v12 + 168), buf);
        v23 = v62;
        *(_OWORD *)(v12 + 176) = *(_OWORD *)buf;
        *(float32x4_t *)(v12 + 192) = v23;
        v17.i64[1] = v63.i64[1];
        v18 = v64;
        *(float32x4_t *)(v12 + 208) = v63;
        *(float32x4_t *)(v12 + 224) = v18;
      }
      v24 = 0;
      v17.i64[0] = *(_QWORD *)(v12 + 80);
      LODWORD(v20) = *(_DWORD *)(v12 + 88);
      v18.i64[0] = *(_QWORD *)(v12 + 96);
      v19.i64[0] = *(_QWORD *)(v12 + 112);
      v25 = vzip1q_s32((int32x4_t)v17, (int32x4_t)v19);
      v17.i32[2] = v20;
      DWORD1(v20) = *(_DWORD *)(v12 + 104);
      DWORD2(v20) = *(_DWORD *)(v12 + 120);
      v65[0] = vzip1q_s32(v25, (int32x4_t)v18);
      v65[1] = vzip2q_s32(v25, vdupq_lane_s32(*(int32x2_t *)v18.f32, 1));
      v65[2] = v20;
      v18.i32[2] = DWORD1(v20);
      v19.i32[2] = DWORD2(v20);
      do
      {
        *(float32x4_t *)&buf[v24 * 16] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(v65[v24])), v18, *(float32x2_t *)&v65[v24], 1), v19, (float32x4_t)v65[v24], 2);
        ++v24;
      }
      while (v24 != 3);
      v26.i32[3] = v63.i32[3];
      v27 = (float32x4_t)vcgeq_f32(v53, vabdq_f32((float32x4_t)xmmword_2260E5F40, v63));
      v28 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v53, vabdq_f32((float32x4_t)xmmword_2260E5F20, v62)), (int8x16_t)vcgeq_f32(v53, vabdq_f32((float32x4_t)xmmword_2260E5F10, *(float32x4_t *)buf))), (int8x16_t)v27);
      v28.i32[3] = v28.i32[2];
      if ((vminvq_u32((uint32x4_t)v28) & 0x80000000) == 0)
      {
        do
          v29 = __ldaxr((unsigned __int8 *)&re::ecs2::SpotLightComponentStateImpl::processUpdatingComponent(re::ecs2::SpotLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged);
        while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::SpotLightComponentStateImpl::processUpdatingComponent(re::ecs2::SpotLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged));
        if ((v29 & 1) == 0)
        {
          v30 = *re::ecsComponentsLogObjects(v16);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
          }
        }
        v28.i64[0] = *(_QWORD *)(v12 + 80);
        v26.i64[0] = *(_QWORD *)(v12 + 96);
        v27.i64[0] = *(_QWORD *)(v12 + 112);
        v28.i32[2] = *(_DWORD *)(v12 + 88);
        v26.i32[2] = *(_DWORD *)(v12 + 104);
        v27.i32[2] = *(_DWORD *)(v12 + 120);
        v31 = (int32x4_t)vmulq_f32(v28, v28);
        v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
        v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
        v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
        v34 = vmulq_n_f32(v28, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).f32[0]);
        v35 = vmulq_f32(v26, v34);
        v36 = vmulq_f32(v34, v34);
        v36.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0];
        v37 = vsubq_f32(v26, vmulq_n_f32(v34, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0]/ v36.f32[0]));
        v38 = (int32x4_t)vmulq_f32(v37, v37);
        v38.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
        v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
        v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
        v41 = vmulq_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
        v42 = vmulq_f32(v27, v34);
        v43 = vmulq_n_f32(v34, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]/ v36.f32[0]);
        v44 = vmulq_f32(v27, v41);
        v45 = vsubq_f32(v27, v43);
        v43.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0];
        v46 = vmulq_f32(v41, v41);
        v47 = vsubq_f32(v45, vmulq_n_f32(v41, v43.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]));
        v48 = (int32x4_t)vmulq_f32(v47, v47);
        v48.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
        *(float32x2_t *)v46.f32 = vrsqrte_f32((float32x2_t)v48.u32[0]);
        *(float32x2_t *)v46.f32 = vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32)));
        *(_QWORD *)(v12 + 80) = v34.i64[0];
        *(_DWORD *)(v12 + 88) = v34.i32[2];
        *(_QWORD *)(v12 + 96) = v41.i64[0];
        *(_DWORD *)(v12 + 104) = v41.i32[2];
        v49 = vmulq_n_f32(v47, vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32))).f32[0]);
        *(_QWORD *)(v12 + 112) = v49.i64[0];
        *(_DWORD *)(v12 + 120) = v49.i32[2];
      }
      v50 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v13, &v58);
      if (v50)
        re::DynamicArray<re::SpotLightInfo>::add(v50 + 128, (re::DynamicString *)(v12 + 48));
      v51 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v56);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v51, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v56);
    }
    while (v56 != v55 || (unsigned __int16)v57 != 0xFFFF || WORD1(v57) != 0xFFFF);
  }
  return *(_DWORD *)(v55 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 128;
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return *(_QWORD *)(a1 + 136);
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  re::ecs2::EntityComponentCollection *v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[28];
  int32x2_t v29;
  char v30;
  char v31;
  _BYTE v32[10];

  v22 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  {
    v21 = *(_QWORD *)(a2 + 8);
    v24 = 0u;
    memset(v23, 0, sizeof(v23));
    DWORD1(v24) = 0x7FFFFFFF;
    v12 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 8, &v21, (uint64_t *)v23);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v12, &v22);
  }
  else
  {
    v5 = (re::ecs2::EntityComponentCollection *)(a3 + 32);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
      v7 = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4;
    else
      v7 = 0;
    if (v7)
    {
      v8 = result;
      v9 = re::ecs2::EntityComponentCollection::get(v5, a4);
      if (*(_BYTE *)(v8 + 32))
      {
        re::DynamicString::DynamicString((re::DynamicString *)v23, (const re::DynamicString *)(v8 + 192));
        v10 = *(_OWORD *)(v8 + 272);
        v26 = *(_OWORD *)(v8 + 256);
        v27 = v10;
        *(_OWORD *)v28 = *(_OWORD *)(v8 + 288);
        *(_OWORD *)&v28[12] = *(_OWORD *)(v8 + 300);
        v11 = *(_OWORD *)(v8 + 240);
        v24 = *(_OWORD *)(v8 + 224);
        v25 = v11;
        v30 = *(_BYTE *)(v8 + 324);
        if (v30)
          v31 = *(_BYTE *)(v8 + 325);
        *(_WORD *)v32 = *(_WORD *)(v8 + 326);
        v29 = vrev64_s32(*(int32x2_t *)(v9 + 28));
        if (v30 || *(_BYTE *)(v9 + 36))
        {
          if (!v30 || *(_BYTE *)(v9 + 36))
          {
            if (!v30)
              v30 = *(_BYTE *)(v9 + 36) != 0;
            v31 = *(_BYTE *)(v9 + 37);
          }
          else
          {
            v30 = 0;
          }
        }
        *(_QWORD *)&v28[20] = *(_QWORD *)(v9 + 40);
        *(_DWORD *)&v32[2] = *(_DWORD *)(v9 + 48);
        v32[0] = *(_BYTE *)(v9 + 38);
        v32[6] = *(_BYTE *)(v9 + 52);
        re::DynamicString::operator=((re::DynamicString *)(v8 + 192), (re::DynamicString *)v23);
        v15 = v25;
        *(_OWORD *)(v8 + 224) = v24;
        *(_OWORD *)(v8 + 240) = v15;
        *(_OWORD *)(v8 + 300) = *(_OWORD *)&v28[12];
        v16 = *(_OWORD *)v28;
        v17 = v26;
        *(_OWORD *)(v8 + 272) = v27;
        *(_OWORD *)(v8 + 288) = v16;
        *(_OWORD *)(v8 + 256) = v17;
        *(int32x2_t *)(v8 + 316) = v29;
        if (*(_BYTE *)(v8 + 324) || v30)
        {
          if (!*(_BYTE *)(v8 + 324) || v30)
          {
            if (!*(_BYTE *)(v8 + 324) && v30)
              *(_BYTE *)(v8 + 324) = 1;
            *(_BYTE *)(v8 + 325) = v31;
          }
          else
          {
            *(_BYTE *)(v8 + 324) = 0;
          }
        }
        *(_DWORD *)(v8 + 326) = *(_DWORD *)v32;
        *(_DWORD *)(v8 + 329) = *(_DWORD *)&v32[3];
      }
      else
      {
        re::DynamicString::DynamicString((re::DynamicString *)v23, (const re::DynamicString *)(v8 + 48));
        v13 = *(_OWORD *)(v8 + 128);
        v26 = *(_OWORD *)(v8 + 112);
        v27 = v13;
        *(_OWORD *)v28 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)&v28[12] = *(_OWORD *)(v8 + 156);
        v14 = *(_OWORD *)(v8 + 96);
        v24 = *(_OWORD *)(v8 + 80);
        v25 = v14;
        v30 = *(_BYTE *)(v8 + 180);
        if (v30)
          v31 = *(_BYTE *)(v8 + 181);
        *(_DWORD *)v32 = *(_DWORD *)(v8 + 182);
        *(_WORD *)&v32[4] = *(_WORD *)(v8 + 186);
        v29 = vrev64_s32(*(int32x2_t *)(v9 + 28));
        if (v30 || *(_BYTE *)(v9 + 36))
        {
          if (!v30 || *(_BYTE *)(v9 + 36))
          {
            if (!v30)
              v30 = *(_BYTE *)(v9 + 36) != 0;
            v31 = *(_BYTE *)(v9 + 37);
          }
          else
          {
            v30 = 0;
          }
        }
        *(_QWORD *)&v28[20] = *(_QWORD *)(v9 + 40);
        *(_DWORD *)&v32[6] = *(_DWORD *)(v9 + 48);
        v32[2] = *(_BYTE *)(v9 + 38);
        v32[3] = *(_BYTE *)(v9 + 52);
        re::DynamicString::operator=((re::DynamicString *)(v8 + 48), (re::DynamicString *)v23);
        v18 = *(_OWORD *)&v28[12];
        v19 = v27;
        *(_OWORD *)(v8 + 112) = v26;
        *(_OWORD *)(v8 + 128) = v19;
        *(_OWORD *)(v8 + 144) = *(_OWORD *)v28;
        *(_OWORD *)(v8 + 156) = v18;
        v20 = v25;
        *(_OWORD *)(v8 + 80) = v24;
        *(_OWORD *)(v8 + 96) = v20;
        *(int32x2_t *)(v8 + 172) = v29;
        if (*(_BYTE *)(v8 + 180) || v30)
        {
          if (!*(_BYTE *)(v8 + 180) || v30)
          {
            if (!*(_BYTE *)(v8 + 180) && v30)
              *(_BYTE *)(v8 + 180) = 1;
            *(_BYTE *)(v8 + 181) = v31;
          }
          else
          {
            *(_BYTE *)(v8 + 180) = 0;
          }
        }
        *(_QWORD *)(v8 + 182) = *(_QWORD *)v32;
        *(_WORD *)(v8 + 190) = *(_WORD *)&v32[8];
      }
      result = *(_QWORD *)&v23[0];
      if (*(_QWORD *)&v23[0])
      {
        if ((BYTE8(v23[0]) & 1) != 0)
          return (*(uint64_t (**)(void))(**(_QWORD **)&v23[0] + 40))();
      }
    }
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  unint64_t v17;
  __int128 v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  __int128 v22;
  int v23;
  int32x2_t v24;
  int32x2_t v25;
  re::DynamicString *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  re::ecs2::RenderOptions *v35;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[28];
  int32x2_t v47;
  BOOL v48;
  char v49;
  _BYTE v50[10];

  v35 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v40, a5, 0);
  v37 = v40;
  if ((_QWORD)v40 != a5 || WORD4(v40) != 0xFFFFLL || (DWORD2(v40) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
      if (*(_BYTE *)re::ecs2::RenderOptions::forEntity(v35, *(_QWORD *)(*(_QWORD *)v10 + 16)))
      {
        v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
        v12 = *(_QWORD *)v11;
        v13 = *(_QWORD **)(*(_QWORD *)v11 + 16);
        v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v15 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v16 = v15;
        if (*(_BYTE *)(v12 + 32))
        {
          v40 = 0u;
          v41 = 0u;
          re::DynamicString::setCapacity(&v40, 0);
          v45 = 0u;
          memset(v46, 0, 20);
          v43 = 0u;
          v44 = 0u;
          v42 = 0u;
          *(_QWORD *)&v46[20] = 0x412000003C23D70ALL;
          v47 = 0;
          v48 = 0;
          v50[0] = 1;
          *(_DWORD *)&v50[2] = 1065353216;
          v50[6] = 1;
          re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v38, v13[35], v13[37]);
          re::DynamicString::operator=((re::DynamicString *)&v40, (re::DynamicString *)&v38);
          if (v38 && (v39 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v38 + 40))();
          v17 = *(unsigned int *)(v12 + 344) | ((unint64_t)*(unsigned __int8 *)(v12 + 352) << 32);
          v38 = *(_QWORD *)(v12 + 336);
          v39 = v17;
          *(_QWORD *)&v18 = re::ColorGamut3F::as(&v38, *(unsigned __int8 *)(a6 + 20), 1);
          DWORD2(v18) = v19;
          *(_OWORD *)v46 = v18;
          *(_DWORD *)&v46[16] = *(_DWORD *)(v12 + 28);
          if ((unint64_t)v16 | v14)
          {
            if (v14)
            {
              v47 = vrev64_s32(*(int32x2_t *)(v14 + 28));
              if (v48 || *(_BYTE *)(v14 + 36))
              {
                if (!v48 || *(_BYTE *)(v14 + 36))
                {
                  if (!v48)
                    v48 = *(_BYTE *)(v14 + 36) != 0;
                  v49 = *(_BYTE *)(v14 + 37);
                }
                else
                {
                  v48 = 0;
                }
              }
              *(_QWORD *)&v46[20] = *(_QWORD *)(v14 + 40);
              v50[0] = *(_BYTE *)(v14 + 38);
              *(_DWORD *)&v50[2] = *(_DWORD *)(v14 + 48);
              v50[6] = *(_BYTE *)(v14 + 52);
            }
            else
            {
              v24 = (int32x2_t)0x40A000003F800000;
              if (v16)
                v24 = *(int32x2_t *)((char *)v16 + 28);
              v47 = vrev64_s32(v24);
            }
          }
          else
          {
            v47 = 0;
          }
          v26 = re::DynamicString::operator=((re::DynamicString *)(v12 + 192), (re::DynamicString *)&v40);
          v27 = v45;
          *(_OWORD *)(v12 + 256) = v44;
          *(_OWORD *)(v12 + 272) = v27;
          *(_OWORD *)(v12 + 288) = *(_OWORD *)v46;
          *(_OWORD *)((char *)v26 + 108) = *(_OWORD *)&v46[12];
          v28 = v43;
          *(_OWORD *)(v12 + 224) = v42;
          *(_OWORD *)(v12 + 240) = v28;
          *(int32x2_t *)((char *)v26 + 124) = v47;
          if (*(_BYTE *)(v12 + 324) || v48)
          {
            if (!*(_BYTE *)(v12 + 324) || v48)
            {
              if (!*(_BYTE *)(v12 + 324) && v48)
                *(_BYTE *)(v12 + 324) = 1;
              *(_BYTE *)(v12 + 325) = v49;
            }
            else
            {
              *(_BYTE *)(v12 + 324) = 0;
            }
          }
          *(_DWORD *)(v12 + 326) = *(_DWORD *)v50;
          *(_DWORD *)(v12 + 329) = *(_DWORD *)&v50[3];
        }
        else
        {
          v40 = 0u;
          v41 = 0u;
          re::DynamicString::setCapacity(&v40, 0);
          v45 = 0u;
          memset(v46, 0, 20);
          v43 = 0u;
          v44 = 0u;
          v42 = 0u;
          *(_QWORD *)&v46[20] = 0x412000003C23D70ALL;
          v47 = 0;
          v48 = 0;
          *(_DWORD *)v50 = 16842752;
          *(_DWORD *)&v50[6] = 1065353216;
          re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v38, v13[35], v13[37]);
          re::DynamicString::operator=((re::DynamicString *)&v40, (re::DynamicString *)&v38);
          if (v38 && (v39 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v38 + 40))();
          v21 = *(unsigned int *)(v12 + 344) | ((unint64_t)*(unsigned __int8 *)(v12 + 352) << 32);
          v38 = *(_QWORD *)(v12 + 336);
          v39 = v21;
          *(_QWORD *)&v22 = re::ColorGamut3F::as(&v38, *(unsigned __int8 *)(a6 + 20), 1);
          DWORD2(v22) = v23;
          *(_OWORD *)v46 = v22;
          *(_DWORD *)&v46[16] = *(_DWORD *)(v12 + 28);
          v50[0] = ((unint64_t)v16 | v14) != 0;
          if ((unint64_t)v16 | v14)
          {
            if (v14)
            {
              v47 = vrev64_s32(*(int32x2_t *)(v14 + 28));
              if (v48 || *(_BYTE *)(v14 + 36))
              {
                if (!v48 || *(_BYTE *)(v14 + 36))
                {
                  if (!v48)
                    v48 = *(_BYTE *)(v14 + 36) != 0;
                  v49 = *(_BYTE *)(v14 + 37);
                }
                else
                {
                  v48 = 0;
                }
              }
              *(_QWORD *)&v46[20] = *(_QWORD *)(v14 + 40);
              v50[2] = *(_BYTE *)(v14 + 38);
              *(_DWORD *)&v50[6] = *(_DWORD *)(v14 + 48);
              v50[3] = *(_BYTE *)(v14 + 52);
            }
            else
            {
              v25 = (int32x2_t)0x40A000003F800000;
              if (v16)
                v25 = *(int32x2_t *)((char *)v16 + 28);
              v47 = vrev64_s32(v25);
            }
            if (*(_BYTE *)(a6 + 16))
              v50[0] = *(_BYTE *)(a6 + 17);
          }
          else
          {
            v47 = 0;
          }
          re::DynamicString::operator=((re::DynamicString *)(v12 + 48), (re::DynamicString *)&v40);
          v29 = *(_OWORD *)&v46[12];
          v30 = v45;
          *(_OWORD *)(v12 + 112) = v44;
          *(_OWORD *)(v12 + 128) = v30;
          *(_OWORD *)(v12 + 144) = *(_OWORD *)v46;
          *(_OWORD *)(v12 + 156) = v29;
          v31 = v43;
          *(_OWORD *)(v12 + 80) = v42;
          *(_OWORD *)(v12 + 96) = v31;
          *(int32x2_t *)(v12 + 172) = v47;
          if (*(_BYTE *)(v12 + 180) || v48)
          {
            if (!*(_BYTE *)(v12 + 180) || v48)
            {
              if (!*(_BYTE *)(v12 + 180) && v48)
                *(_BYTE *)(v12 + 180) = 1;
              *(_BYTE *)(v12 + 181) = v49;
            }
            else
            {
              *(_BYTE *)(v12 + 180) = 0;
            }
          }
          *(_QWORD *)(v12 + 182) = *(_QWORD *)v50;
          *(_WORD *)(v12 + 190) = *(_WORD *)&v50[8];
        }
        if ((_QWORD)v40 && (BYTE8(v40) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v40 + 40))();
        v20 = 3;
      }
      else
      {
        v20 = 1;
      }
      v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v37);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a3, a4, v32, v20);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v37);
    }
    while ((_QWORD)v37 != a5 || WORD4(v37) != 0xFFFF || WORD5(v37) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DirectionalLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  re::ecs2::TransformComponent **v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  float32x4_t v17;
  __int128 v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned __int8 v26;
  NSObject *v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  re *v53;
  uint64_t v54;
  float32x4_t v55;
  __int128 v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned __int8 v64;
  NSObject *v65;
  int32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  uint64_t v85;
  re::DynamicString *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  float32x4_t v96;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t buf[16];
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  __int128 v108;

  v101 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 136) + 24))(*(_QWORD *)(*(_QWORD *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v99 = *(_QWORD *)buf;
  v100 = *(_QWORD *)&buf[8];
  v8 = *(_QWORD *)buf == a5 && *(unsigned __int16 *)&buf[8] == 0xFFFFLL;
  if (!v8 || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    v96 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v99);
      v11 = *(_QWORD *)v10;
      v12 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v10 + 16);
      v13 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v12, &v101);
      if (v13)
      {
        v14 = v13;
        if (*(_BYTE *)(v11 + 32))
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v12, (const re::ecs2::Entity *)1, buf);
          v16 = 0;
          v17 = v103;
          *(_OWORD *)(v11 + 224) = *(_OWORD *)buf;
          *(float32x4_t *)(v11 + 240) = v17;
          v20.i64[1] = v104.i64[1];
          v21 = v105;
          *(float32x4_t *)(v11 + 256) = v104;
          *(float32x4_t *)(v11 + 272) = v21;
          v20.i64[0] = *(_QWORD *)(v11 + 224);
          LODWORD(v18) = *(_DWORD *)(v11 + 232);
          v21.i64[0] = *(_QWORD *)(v11 + 240);
          v22.i64[0] = *(_QWORD *)(v11 + 256);
          v19 = vzip1q_s32((int32x4_t)v20, (int32x4_t)v22);
          v20.i32[2] = v18;
          DWORD1(v18) = *(_DWORD *)(v11 + 248);
          DWORD2(v18) = *(_DWORD *)(v11 + 264);
          v106 = vzip1q_s32(v19, (int32x4_t)v21);
          v107 = vzip2q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v21.f32, 1));
          v108 = v18;
          v21.i32[2] = DWORD1(v18);
          v22.i32[2] = DWORD2(v18);
          do
          {
            *(float32x4_t *)&buf[v16] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)((char *)&v106 + v16))), v21, *(float32x2_t *)&v106.i8[v16], 1), v22, *(float32x4_t *)((char *)&v106 + v16), 2);
            v16 += 16;
          }
          while (v16 != 48);
          v23.i32[3] = v104.i32[3];
          v24 = (float32x4_t)vcgeq_f32(v96, vabdq_f32((float32x4_t)xmmword_2260E5F40, v104));
          v25 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v96, vabdq_f32((float32x4_t)xmmword_2260E5F20, v103)), (int8x16_t)vcgeq_f32(v96, vabdq_f32((float32x4_t)xmmword_2260E5F10, *(float32x4_t *)buf))), (int8x16_t)v24);
          v25.i32[3] = v25.i32[2];
          if ((vminvq_u32((uint32x4_t)v25) & 0x80000000) == 0)
          {
            do
              v26 = __ldaxr((unsigned __int8 *)&_MergedGlobals_222);
            while (__stlxr(1u, (unsigned __int8 *)&_MergedGlobals_222));
            if ((v26 & 1) == 0)
            {
              v27 = *re::ecsComponentsLogObjects((re *)v15);
              v15 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
              if (v15)
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
              }
            }
            v25.i64[0] = *(_QWORD *)(v11 + 224);
            v23.i64[0] = *(_QWORD *)(v11 + 240);
            v24.i64[0] = *(_QWORD *)(v11 + 256);
            v25.i32[2] = *(_DWORD *)(v11 + 232);
            v23.i32[2] = *(_DWORD *)(v11 + 248);
            v24.i32[2] = *(_DWORD *)(v11 + 264);
            v28 = (int32x4_t)vmulq_f32(v25, v25);
            v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2), vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1))).u32[0];
            v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
            v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)));
            v31 = vmulq_n_f32(v25, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
            v32 = vmulq_f32(v23, v31);
            v33 = vmulq_f32(v31, v31);
            v33.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0];
            v34 = vsubq_f32(v23, vmulq_n_f32(v31, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]/ v33.f32[0]));
            v35 = (int32x4_t)vmulq_f32(v34, v34);
            v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
            v36 = vrsqrte_f32((float32x2_t)v35.u32[0]);
            v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v36, v36)));
            v38 = vmulq_n_f32(v34, vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37))).f32[0]);
            v39 = vmulq_f32(v24, v31);
            v40 = vmulq_n_f32(v31, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]/ v33.f32[0]);
            v41 = vmulq_f32(v24, v38);
            v42 = vsubq_f32(v24, v40);
            v40.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
            v43 = vmulq_f32(v38, v38);
            v44 = vsubq_f32(v42, vmulq_n_f32(v38, v40.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]));
            v45 = (int32x4_t)vmulq_f32(v44, v44);
            v45.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1))).u32[0];
            *(float32x2_t *)v43.f32 = vrsqrte_f32((float32x2_t)v45.u32[0]);
            *(float32x2_t *)v43.f32 = vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)));
            *(_QWORD *)(v11 + 224) = v31.i64[0];
            *(_DWORD *)(v11 + 232) = v31.i32[2];
            *(_QWORD *)(v11 + 240) = v38.i64[0];
            *(_DWORD *)(v11 + 248) = v38.i32[2];
            v46 = vmulq_n_f32(v44, vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32))).f32[0]);
            *(_QWORD *)(v11 + 256) = v46.i64[0];
            *(_DWORD *)(v11 + 264) = v46.i32[2];
          }
          v47 = *(_QWORD *)(v14 + 96);
          v48 = *(_QWORD *)(v14 + 104);
          if (v48 >= v47)
          {
            v49 = v48 + 1;
            if (v47 < v49)
            {
              if (*(_QWORD *)(v14 + 88))
              {
                v50 = 2 * v47;
                v8 = v47 == 0;
                v51 = 8;
                if (!v8)
                  v51 = v50;
                if (v51 <= v49)
                  v52 = v49;
                else
                  v52 = v51;
                re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity((_QWORD *)(v14 + 88), v52);
              }
              else
              {
                re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity((_QWORD *)(v14 + 88), v49);
                ++*(_DWORD *)(v14 + 112);
              }
            }
            v48 = *(_QWORD *)(v14 + 104);
          }
          v85 = *(_QWORD *)(v14 + 120);
          v86 = re::DynamicString::DynamicString((re::DynamicString *)(v85 + 144 * v48), (const re::DynamicString *)(v11 + 192));
          v87 = *(_OWORD *)(v11 + 240);
          *((_OWORD *)v86 + 2) = *(_OWORD *)(v11 + 224);
          *((_OWORD *)v86 + 3) = v87;
          v88 = *(_OWORD *)(v11 + 256);
          v89 = *(_OWORD *)(v11 + 272);
          v90 = *(_OWORD *)(v11 + 288);
          *(_OWORD *)((char *)v86 + 108) = *(_OWORD *)(v11 + 300);
          *((_OWORD *)v86 + 5) = v89;
          *((_OWORD *)v86 + 6) = v90;
          *((_OWORD *)v86 + 4) = v88;
          *(_QWORD *)((char *)v86 + 124) = *(_QWORD *)(v11 + 316);
          v91 = *(unsigned __int8 *)(v11 + 324);
          *((_BYTE *)v86 + 132) = v91;
          if (v91)
            *(_BYTE *)(v85 + 144 * v48 + 133) = *(_BYTE *)(v11 + 325);
          v92 = v85 + 144 * v48;
          v93 = *(_DWORD *)(v11 + 326);
          *(_DWORD *)(v92 + 137) = *(_DWORD *)(v11 + 329);
          *(_DWORD *)(v92 + 134) = v93;
          ++*(_QWORD *)(v14 + 104);
          ++*(_DWORD *)(v14 + 112);
        }
        else
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v12, (const re::ecs2::Entity *)1, buf);
          v54 = 0;
          v55 = v103;
          *(_OWORD *)(v11 + 80) = *(_OWORD *)buf;
          *(float32x4_t *)(v11 + 96) = v55;
          v58.i64[1] = v104.i64[1];
          v59 = v105;
          *(float32x4_t *)(v11 + 112) = v104;
          *(float32x4_t *)(v11 + 128) = v59;
          v58.i64[0] = *(_QWORD *)(v11 + 80);
          LODWORD(v56) = *(_DWORD *)(v11 + 88);
          v59.i64[0] = *(_QWORD *)(v11 + 96);
          v60.i64[0] = *(_QWORD *)(v11 + 112);
          v57 = vzip1q_s32((int32x4_t)v58, (int32x4_t)v60);
          v58.i32[2] = v56;
          DWORD1(v56) = *(_DWORD *)(v11 + 104);
          DWORD2(v56) = *(_DWORD *)(v11 + 120);
          v106 = vzip1q_s32(v57, (int32x4_t)v59);
          v107 = vzip2q_s32(v57, vdupq_lane_s32(*(int32x2_t *)v59.f32, 1));
          v108 = v56;
          v59.i32[2] = DWORD1(v56);
          v60.i32[2] = DWORD2(v56);
          do
          {
            *(float32x4_t *)&buf[v54] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(_OWORD *)((char *)&v106 + v54))), v59, *(float32x2_t *)&v106.i8[v54], 1), v60, *(float32x4_t *)((char *)&v106 + v54), 2);
            v54 += 16;
          }
          while (v54 != 48);
          v61.i32[3] = v104.i32[3];
          v62 = (float32x4_t)vcgeq_f32(v96, vabdq_f32((float32x4_t)xmmword_2260E5F40, v104));
          v63 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v96, vabdq_f32((float32x4_t)xmmword_2260E5F20, v103)), (int8x16_t)vcgeq_f32(v96, vabdq_f32((float32x4_t)xmmword_2260E5F10, *(float32x4_t *)buf))), (int8x16_t)v62);
          v63.i32[3] = v63.i32[2];
          if ((vminvq_u32((uint32x4_t)v63) & 0x80000000) == 0)
          {
            do
              v64 = __ldaxr(byte_25410D199);
            while (__stlxr(1u, byte_25410D199));
            if ((v64 & 1) == 0)
            {
              v65 = *re::ecsComponentsLogObjects(v53);
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_224FE9000, v65, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
              }
            }
            v63.i64[0] = *(_QWORD *)(v11 + 80);
            v61.i64[0] = *(_QWORD *)(v11 + 96);
            v62.i64[0] = *(_QWORD *)(v11 + 112);
            v63.i32[2] = *(_DWORD *)(v11 + 88);
            v61.i32[2] = *(_DWORD *)(v11 + 104);
            v62.i32[2] = *(_DWORD *)(v11 + 120);
            v66 = (int32x4_t)vmulq_f32(v63, v63);
            v66.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v66, 2), vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1))).u32[0];
            v67 = vrsqrte_f32((float32x2_t)v66.u32[0]);
            v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(v67, v67)));
            v69 = vmulq_n_f32(v63, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(v68, v68))).f32[0]);
            v70 = vmulq_f32(v61, v69);
            v71 = vmulq_f32(v69, v69);
            v71.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0];
            v72 = vsubq_f32(v61, vmulq_n_f32(v69, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).f32[0]/ v71.f32[0]));
            v73 = (int32x4_t)vmulq_f32(v72, v72);
            v73.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v73, 2), vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1))).u32[0];
            v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
            v75 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74)));
            v76 = vmulq_n_f32(v72, vmul_f32(v75, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v75, v75))).f32[0]);
            v77 = vmulq_f32(v62, v69);
            v78 = vmulq_n_f32(v69, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1))).f32[0]/ v71.f32[0]);
            v79 = vmulq_f32(v62, v76);
            v80 = vsubq_f32(v62, v78);
            v78.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0];
            v81 = vmulq_f32(v76, v76);
            v82 = vsubq_f32(v80, vmulq_n_f32(v76, v78.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0]));
            v83 = (int32x4_t)vmulq_f32(v82, v82);
            v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
            *(float32x2_t *)v81.f32 = vrsqrte_f32((float32x2_t)v83.u32[0]);
            *(float32x2_t *)v81.f32 = vmul_f32(*(float32x2_t *)v81.f32, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32)));
            *(_QWORD *)(v11 + 80) = v69.i64[0];
            *(_DWORD *)(v11 + 88) = v69.i32[2];
            *(_QWORD *)(v11 + 96) = v76.i64[0];
            *(_DWORD *)(v11 + 104) = v76.i32[2];
            v84 = vmulq_n_f32(v82, vmul_f32(*(float32x2_t *)v81.f32, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32))).f32[0]);
            *(_QWORD *)(v11 + 112) = v84.i64[0];
            *(_DWORD *)(v11 + 120) = v84.i32[2];
          }
          re::DynamicArray<re::DirectionalLightInfo>::add((_anonymous_namespace_ *)(v14 + 48), (re::DynamicString *)(v11 + 48));
        }
      }
      v94 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v99);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v94, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v99);
    }
    while (v99 != a5 || (unsigned __int16)v100 != 0xFFFF || WORD1(v100) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 128;
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return *(_QWORD *)(a1 + 136);
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  re::ecs2::RenderOptions *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  float v18;
  _anonymous_namespace_ *v19;
  float v20;
  unint64_t v21;
  __int128 v22;
  int v23;
  re::ecs2::EntityComponentCollection *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  re::DynamicString *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v38;
  _OWORD v39[4];
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[28];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[29];
  char v51;
  __int16 v52;
  BOOL v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v9 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v40, a5, 0);
  v38 = v40[0];
  if (*(_QWORD *)&v40[0] != a5 || WORD4(v40[0]) != 0xFFFFLL || (DWORD2(v40[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v38);
      if (*(_BYTE *)re::ecs2::RenderOptions::forEntity(v9, *(_QWORD *)(*(_QWORD *)v12 + 16)))
      {
        v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v38);
        v14 = *(_QWORD *)v13;
        v15 = *(_QWORD **)(*(_QWORD *)v13 + 16);
        v16 = *(float *)(*(_QWORD *)v13 + 48);
        v17 = *(float *)(*(_QWORD *)v13 + 52);
        v18 = tanf(*(float *)(*(_QWORD *)v13 + 32) * 0.5);
        memset(v40, 0, sizeof(v40));
        re::DynamicString::setCapacity(v40, 0);
        v44 = 0u;
        memset(v45, 0, 20);
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        *(_QWORD *)&v45[20] = 0x412000003C23D70ALL;
        v52 = 0;
        v53 = 0;
        v49 = 0u;
        memset(v50, 0, sizeof(v50));
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        *(_QWORD *)v50 = v15[37];
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)v39, v15[35], *(_QWORD *)v50);
        re::DynamicString::operator=((re::DynamicString *)v40, (re::DynamicString *)v39);
        if (*(_QWORD *)&v39[0] && (BYTE8(v39[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v39[0] + 40))();
        v20 = v16 / v17;
        v21 = *(unsigned int *)(v14 + 312) | ((unint64_t)*(unsigned __int8 *)(v14 + 320) << 32);
        *(_QWORD *)&v39[0] = *(_QWORD *)(v14 + 304);
        *((_QWORD *)&v39[0] + 1) = v21;
        *(_QWORD *)&v22 = re::ColorGamut3F::as((uint64_t *)v39, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v22) = v23;
        *(_OWORD *)v45 = v22;
        *(_DWORD *)&v45[16] = *(_DWORD *)(v14 + 28);
        *(_DWORD *)&v50[8] = *(_DWORD *)(v14 + 40);
        *(float *)&v45[20] = (float)(v17 * 0.5) / v18;
        LOBYTE(v52) = 1;
        v24 = (re::ecs2::EntityComponentCollection *)(v15 + 4);
        v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v26 = re::ecs2::EntityComponentCollection::get(v24, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v53 = v25 != 0;
        HIBYTE(v52) = v26 != 0;
        if (v25)
          *(_DWORD *)&v50[24] = *(_DWORD *)(v25 + 28);
        else
          *(_DWORD *)&v50[24] = 0;
        re::Projection::makePerspectiveFieldOfViewReverseDepth(*(float *)(v14 + 32), v20, *(float *)&v45[20], *(float *)&v45[20] + *(float *)(v14 + 40), v39);
        v46 = v39[0];
        v47 = v39[1];
        v48 = v39[2];
        v49 = v39[3];
        v28 = re::DynamicString::operator=((re::DynamicString *)(v14 + 64), (re::DynamicString *)v40);
        v29 = v42;
        *(_OWORD *)(v14 + 96) = v41;
        *(_OWORD *)(v14 + 112) = v29;
        *(_OWORD *)(v14 + 172) = *(_OWORD *)&v45[12];
        v30 = *(_OWORD *)v45;
        v31 = v43;
        *(_OWORD *)(v14 + 144) = v44;
        *(_OWORD *)(v14 + 160) = v30;
        *(_OWORD *)(v14 + 128) = v31;
        *(_OWORD *)((char *)v28 + 204) = *(_OWORD *)&v50[12];
        v32 = *(_OWORD *)v50;
        v33 = v48;
        *(_OWORD *)(v14 + 240) = v49;
        *(_OWORD *)(v14 + 256) = v32;
        v34 = v46;
        *(_OWORD *)(v14 + 208) = v47;
        *(_OWORD *)(v14 + 224) = v33;
        *(_OWORD *)(v14 + 192) = v34;
        if (*(_BYTE *)(v14 + 284) || v50[28])
        {
          if (!*(_BYTE *)(v14 + 284) || v50[28])
          {
            if (!*(_BYTE *)(v14 + 284) && v50[28])
              *(_BYTE *)(v14 + 284) = 1;
            *(_BYTE *)(v14 + 285) = v51;
          }
          else
          {
            *(_BYTE *)(v14 + 284) = 0;
          }
        }
        *(_WORD *)(v14 + 286) = v52;
        *(_BYTE *)(v14 + 288) = v53;
        if (*(_QWORD *)&v40[0] && (BYTE8(v40[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v40[0] + 40))();
        v27 = 3;
      }
      else
      {
        v27 = 1;
      }
      v35 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a3, a4, v35, v27);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v38);
    }
    while ((_QWORD)v38 != a5 || WORD4(v38) != 0xFFFF || WORD5(v38) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::FrustumLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  re::ecs2::TransformComponent **v13;
  re *v14;
  uint64_t v15;
  __int128 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unsigned __int8 v30;
  NSObject *v31;
  int32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  unint64_t v52;
  float32x4_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[4];
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  __int128 v63;
  uint8_t buf[16];
  float32x4_t v65;
  float32x4_t v66;
  __int128 v67;

  v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 136) + 24))(*(_QWORD *)(*(_QWORD *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v56 = *(_QWORD *)buf;
  v57 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    v54 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v56);
      v12 = *(_QWORD *)v11;
      v13 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v11 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v13, (const re::ecs2::Entity *)1, v59);
      v15 = 0;
      *(_QWORD *)&v16 = 0;
      DWORD2(v16) = *(_DWORD *)(v12 + 180);
      HIDWORD(v16) = 1.0;
      v17 = (float32x4_t)v59[0];
      v18 = (float32x4_t)v59[1];
      v19 = (float32x4_t)v59[2];
      v20 = (float32x4_t)v59[3];
      v60 = (int32x4_t)xmmword_2260E5F10;
      v61 = (int32x4_t)xmmword_2260E5F20;
      v62 = (int32x4_t)xmmword_2260E5F40;
      v63 = v16;
      do
      {
        *(float32x4_t *)&buf[v15] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)((char *)&v60 + v15))), v18, *(float32x2_t *)&v60.i8[v15], 1), v19, *(float32x4_t *)((char *)&v60 + v15), 2), v20, *(float32x4_t *)((char *)&v60 + v15), 3);
        v15 += 16;
      }
      while (v15 != 64);
      v21 = 0;
      v22 = *(float32x4_t *)buf;
      v23 = v65;
      v24 = v66;
      v25 = v67;
      *(_OWORD *)(v12 + 96) = *(_OWORD *)buf;
      *(float32x4_t *)(v12 + 112) = v23;
      *(float32x4_t *)(v12 + 128) = v24;
      *(_OWORD *)(v12 + 144) = v25;
      v26 = vzip1q_s32((int32x4_t)v22, (int32x4_t)v24);
      v60 = vzip1q_s32(v26, (int32x4_t)v23);
      v61 = vzip2q_s32(v26, vdupq_lane_s32(*(int32x2_t *)v23.f32, 1));
      v62 = vzip1q_s32(vzip2q_s32((int32x4_t)v22, (int32x4_t)v24), vdupq_laneq_s32((int32x4_t)v23, 2));
      do
      {
        *(float32x4_t *)&buf[v21] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)((char *)&v60 + v21))), v23, *(float32x2_t *)&v60.i8[v21], 1), v24, *(float32x4_t *)((char *)&v60 + v21), 2);
        v21 += 16;
      }
      while (v21 != 48);
      v27.i32[3] = v66.i32[3];
      v28 = (float32x4_t)vcgeq_f32(v54, vabdq_f32((float32x4_t)xmmword_2260E5F40, v66));
      v29 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v54, vabdq_f32((float32x4_t)xmmword_2260E5F20, v65)), (int8x16_t)vcgeq_f32(v54, vabdq_f32((float32x4_t)xmmword_2260E5F10, *(float32x4_t *)buf))), (int8x16_t)v28);
      v29.i32[3] = v29.i32[2];
      if ((vminvq_u32((uint32x4_t)v29) & 0x80000000) == 0)
      {
        do
          v30 = __ldaxr(re::ecs2::FrustumLightComponentStateImpl::processUpdatingComponent(re::ecs2::FrustumLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged);
        while (__stlxr(1u, re::ecs2::FrustumLightComponentStateImpl::processUpdatingComponent(re::ecs2::FrustumLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged));
        if ((v30 & 1) == 0)
        {
          v31 = *re::ecsComponentsLogObjects(v14);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v31, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
          }
        }
        v29.i64[0] = *(_QWORD *)(v12 + 96);
        v27.i64[0] = *(_QWORD *)(v12 + 112);
        v28.i64[0] = *(_QWORD *)(v12 + 128);
        v29.i32[2] = *(_DWORD *)(v12 + 104);
        v27.i32[2] = *(_DWORD *)(v12 + 120);
        v28.i32[2] = *(_DWORD *)(v12 + 136);
        v32 = (int32x4_t)vmulq_f32(v29, v29);
        v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
        v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
        v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
        v35 = vmulq_n_f32(v29, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
        v36 = vmulq_f32(v27, v35);
        v37 = vmulq_f32(v35, v35);
        v37.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0];
        v38 = vsubq_f32(v27, vmulq_n_f32(v35, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]/ v37.f32[0]));
        v39 = (int32x4_t)vmulq_f32(v38, v38);
        v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
        v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
        v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
        v42 = vmulq_n_f32(v38, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]);
        v43 = vmulq_f32(v28, v35);
        v44 = vmulq_n_f32(v35, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]/ v37.f32[0]);
        v45 = vmulq_f32(v28, v42);
        v46 = vsubq_f32(v28, v44);
        v44.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0];
        v47 = vmulq_f32(v42, v42);
        v48 = vsubq_f32(v46, vmulq_n_f32(v42, v44.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0]));
        v49 = (int32x4_t)vmulq_f32(v48, v48);
        v49.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v49, 2), vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1))).u32[0];
        *(float32x2_t *)v47.f32 = vrsqrte_f32((float32x2_t)v49.u32[0]);
        *(float32x2_t *)v47.f32 = vmul_f32(*(float32x2_t *)v47.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32)));
        *(_QWORD *)(v12 + 96) = v35.i64[0];
        *(_DWORD *)(v12 + 104) = v35.i32[2];
        *(_QWORD *)(v12 + 112) = v42.i64[0];
        *(_DWORD *)(v12 + 120) = v42.i32[2];
        v50 = vmulq_n_f32(v48, vmul_f32(*(float32x2_t *)v47.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32))).f32[0]);
        *(_QWORD *)(v12 + 128) = v50.i64[0];
        *(_DWORD *)(v12 + 136) = v50.i32[2];
      }
      v51 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v13, &v58);
      if (v51)
        re::DynamicArray<re::SpotLightInfo>::add(v51 + 128, (re::DynamicString *)(v12 + 64));
      v52 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v56);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v52, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v56);
    }
    while (v56 != a5 || (unsigned __int16)v57 != 0xFFFF || WORD1(v57) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addNew(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_15;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_15:
    v20 = re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(a1, v7, v6, (__int128 *)a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 16) + 280 * v20;
    return v19 + 32;
  }
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = v9 + 280 * v8;
  v13 = *(_QWORD *)(v11 + 8);
  v12 = *(_QWORD *)(v11 + 16);
  if (v13 != *(_QWORD *)a2 || v12 != v10)
  {
    do
    {
      LODWORD(v8) = *(_DWORD *)(v9 + 280 * v8) & 0x7FFFFFFF;
      if ((_DWORD)v8 == 0x7FFFFFFF)
        goto LABEL_15;
      v15 = v9 + 280 * v8;
      v17 = *(_QWORD *)(v15 + 8);
      v16 = *(_QWORD *)(v15 + 16);
    }
    while (v17 != *(_QWORD *)a2 || v16 != v10);
  }
  v19 = v9 + 280 * v8;
  return v19 + 32;
}

void re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 280 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = 0;
    v3 = 272 * *(_QWORD *)result;
    do
    {
      v4 = (_QWORD *)(v1 + v2);
      re::DynamicArray<re::RectAreaLightInfo>::deinit(v1 + v2 + 248);
      re::DynamicArray<re::PointLightInfo>::deinit(v1 + v2 + 208);
      re::DynamicArray<re::SpotLightInfo>::deinit(v1 + v2 + 168);
      re::DynamicArray<re::RectAreaLightInfo>::deinit(v1 + v2 + 128);
      re::DynamicArray<re::RectAreaLightInfo>::deinit(v1 + v2 + 88);
      result = *(_QWORD *)(v1 + v2 + 48);
      if (result)
      {
        if (v4[10])
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        v4[10] = 0;
        v4[7] = 0;
        v4[8] = 0;
        v4[6] = 0;
        ++*(_DWORD *)(v1 + v2 + 72);
      }
      v2 += 272;
    }
    while (v3 != v2);
  }
  *(_QWORD *)v1 = 0;
  ++*(_DWORD *)(v1 + 8);
  return result;
}

uint64_t re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::init((uint64_t)v30, v14, v13);
          v16 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v30[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 32;
            do
            {
              if ((*(_DWORD *)(v22 - 32) & 0x80000000) != 0)
                re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(a1, *(_QWORD *)(v22 - 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 8), v22 - 24, v22);
              v22 += 280;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 280 * v9);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 280 * v9);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 280 * v9;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  v27 = *(_QWORD *)(a1 + 16) + v26;
  v28 = *a4;
  *(_QWORD *)(v27 + 24) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v27 + 8) = v28;
  re::LightInfoArrays::LightInfoArrays(*(_QWORD *)(a1 + 16) + v26 + 32, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 120;
      do
      {
        v5 = a1[2];
        v6 = v5 + v4;
        v7 = *(_DWORD *)(v5 + v4 - 120);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 - 120) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::RectAreaLightInfo>::deinit(v6 + 120);
          re::DynamicArray<re::PointLightInfo>::deinit(v6 + 80);
          re::DynamicArray<re::SpotLightInfo>::deinit(v6 + 40);
          re::DynamicArray<re::RectAreaLightInfo>::deinit(v5 + v4);
          re::DynamicArray<re::RectAreaLightInfo>::deinit(v6 - 40);
          v10 = *(_QWORD *)(v6 - 80);
          v9 = (_QWORD *)(v6 - 80);
          v8 = v10;
          if (v10)
          {
            v11 = v5 + v4;
            if (*(_QWORD *)(v11 - 48))
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(_QWORD *)(v11 - 48) = 0;
            v9[1] = 0;
            v9[2] = 0;
            *v9 = 0;
            ++*(_DWORD *)(v11 - 56);
          }
        }
        ++v3;
        v4 += 280;
      }
      while (v3 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::LightInfoArrays::LightInfoArrays(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_WORD *)result = *(_WORD *)a2;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  v4 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  ++*(_DWORD *)(a2 + 32);
  ++*(_DWORD *)(result + 32);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v5;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = *(_QWORD *)(result + 64);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v6;
  v7 = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v7;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(result + 72);
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 112) = 0;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v8;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v9 = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v9;
  v10 = *(_QWORD *)(result + 120);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v10;
  ++*(_DWORD *)(a2 + 112);
  ++*(_DWORD *)(result + 112);
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 152) = 0;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 136) = v11;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v12 = *(_QWORD *)(result + 144);
  *(_QWORD *)(result + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v12;
  v13 = *(_QWORD *)(result + 160);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v13;
  ++*(_DWORD *)(a2 + 152);
  ++*(_DWORD *)(result + 152);
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_DWORD *)(result + 192) = 0;
  v14 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(result + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(result + 176) = v14;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v15 = *(_QWORD *)(result + 184);
  *(_QWORD *)(result + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = v15;
  v16 = *(_QWORD *)(result + 200);
  *(_QWORD *)(result + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = v16;
  ++*(_DWORD *)(a2 + 192);
  ++*(_DWORD *)(result + 192);
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_DWORD *)(result + 232) = 0;
  v17 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(result + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(result + 216) = v17;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  v18 = *(_QWORD *)(result + 224);
  *(_QWORD *)(result + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = v18;
  v19 = *(_QWORD *)(result + 240);
  *(_QWORD *)(result + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = v19;
  ++*(_DWORD *)(a2 + 232);
  ++*(_DWORD *)(result + 232);
  return result;
}

uint64_t re::DynamicArray<re::RectAreaLightInfo>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 144 * v4;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 += 9;
          v5 -= 144;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PointLightInfo>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 224 * v4;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 += 14;
          v5 -= 224;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SpotLightInfo>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 240 * v4;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 += 15;
          v5 -= 240;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, _WORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v17 + 24 * v10 + 8) == v6)
        return;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v17 + 24 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v17 + 24 * v10 + 8) == v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 24 * v11);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 24 * v11);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  v15 = 24 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  v16 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v15) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11) & 0x80000000 | *(_DWORD *)(v16 + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 8) = v6;
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 16) = *a3;
  *(_DWORD *)(v16 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t result, uint64_t *a2, _WORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 24 * v10 + 8) == v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 24 * v10 + 8) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  signed int v15;
  _BYTE v16[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(_QWORD *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v16, v4, a2);
      v5 = *(_OWORD *)v16;
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v16[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v16[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = (_QWORD *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * (*v12 ^ (*v12 >> 30));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, v12, v12 + 1);
          }
          ++v11;
          v12 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2)
      v15 = a2;
    else
      v15 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _WORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

unint64_t re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 0xF)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5FBF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5FBF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5FC50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5FC50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  re::ecs2::RenderOptions *v10;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  unint64_t v24;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[28];
  uint64_t v35;
  char v36;

  v10 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v29, a5, 0);
  v26 = v29[0];
  if (*(_QWORD *)&v29[0] != a5 || WORD4(v29[0]) != 0xFFFFLL || (DWORD2(v29[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
      if (*(_BYTE *)re::ecs2::RenderOptions::forEntity(v10, *(_QWORD *)(*(_QWORD *)v13 + 16)))
      {
        v14 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
        v15 = *(_QWORD *)v14;
        v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
        memset(v29, 0, sizeof(v29));
        re::DynamicString::setCapacity(v29, 0);
        v33 = 0u;
        memset(v34, 0, 20);
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        *(_QWORD *)&v34[20] = 0x412000003C23D70ALL;
        v35 = 0;
        v36 = 0;
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v27, *(_QWORD *)(v16 + 280), *(_QWORD *)(v16 + 296));
        re::DynamicString::operator=((re::DynamicString *)v29, (re::DynamicString *)&v27);
        if (v27 && (v28 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v27 + 40))();
        v17 = *(unsigned int *)(v15 + 200) | ((unint64_t)*(unsigned __int8 *)(v15 + 208) << 32);
        v27 = *(_QWORD *)(v15 + 192);
        v28 = v17;
        *(_QWORD *)&v18 = re::ColorGamut3F::as(&v27, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v18) = v19;
        *(_OWORD *)v34 = v18;
        *(_DWORD *)&v34[16] = *(_DWORD *)(v15 + 28);
        v35 = *(_QWORD *)(v15 + 32);
        v36 = *(_BYTE *)(v15 + 40);
        re::DynamicString::operator=((re::DynamicString *)(v15 + 48), (re::DynamicString *)v29);
        v20 = *(_OWORD *)&v34[12];
        v21 = v33;
        *(_OWORD *)(v15 + 112) = v32;
        *(_OWORD *)(v15 + 128) = v21;
        *(_OWORD *)(v15 + 144) = *(_OWORD *)v34;
        *(_OWORD *)(v15 + 156) = v20;
        v22 = v31;
        *(_OWORD *)(v15 + 80) = v30;
        *(_OWORD *)(v15 + 96) = v22;
        *(_QWORD *)(v15 + 176) = v35;
        *(_BYTE *)(v15 + 184) = v36;
        if (*(_QWORD *)&v29[0] && (BYTE8(v29[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v29[0] + 40))();
        v23 = 3;
      }
      else
      {
        v23 = 1;
      }
      v24 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v26);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a3, a4, v24, v23);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
    }
    while ((_QWORD)v26 != a5 || WORD4(v26) != 0xFFFF || WORD5(v26) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _OWORD *v13;
  re::ecs2::TransformComponent **v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[4];

  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 136) + 24))(*(_QWORD *)(*(_QWORD *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v22, a5, 0);
  v20 = v22[0];
  if (*(_QWORD *)&v22[0] != a5 || WORD4(v22[0]) != 0xFFFFLL || (DWORD2(v22[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v20);
      v13 = *(_OWORD **)v12;
      v14 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v12 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v14, (const re::ecs2::Entity *)1, v22);
      v15 = v22[1];
      v13[5] = v22[0];
      v13[6] = v15;
      v16 = v22[3];
      v13[7] = v22[2];
      v13[8] = v16;
      v17 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v14, &v21);
      if (v17)
        re::DynamicArray<re::RectAreaLightInfo>::add(v17 + 208, (re::DynamicString *)(v13 + 3));
      v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v18, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while ((_QWORD)v20 != a5 || WORD4(v20) != 0xFFFF || WORD5(v20) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  re::ecs2::RenderOptions *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31[2];

  v10 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v28, a5, 0);
  v11 = v28;
  v12 = v29;
  v28 = a4;
  v29 = v11;
  v30 = v12;
  v13 = (unsigned __int16)v12;
  v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    do
    {
      v17 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
      if (*(_BYTE *)re::ecs2::RenderOptions::forEntity(v10, *(_QWORD *)(*(_QWORD *)v17 + 16)))
      {
        v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
        v19 = *(_QWORD *)v18;
        v20 = *(unsigned int *)(*(_QWORD *)v18 + 72) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v18 + 80) << 32);
        v31[0] = *(_QWORD *)(*(_QWORD *)v18 + 64);
        v31[1] = v20;
        *(_QWORD *)&v21 = re::ColorGamut3F::as(v31, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v21) = v22;
        v23 = *(_DWORD *)(v19 + 28);
        *(_OWORD *)(v19 + 32) = v21;
        *(_DWORD *)(v19 + 48) = v23;
        v24 = 3;
      }
      else
      {
        v24 = 1;
      }
      v25 = v28;
      v26 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v29);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a3, v25, v26, v24);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
    }
    while (v29 != a5 || (unsigned __int16)v30 != 0xFFFF || WORD1(v30) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 136) + 24))(*(_QWORD *)(*(_QWORD *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  v10 = v22;
  v11 = v23;
  v22 = a4;
  v23 = v10;
  v24 = v11;
  v12 = (unsigned __int16)v11;
  v13 = v11 & 0xFFFF0000;
  if (v10 != a5 || v12 != 0xFFFF || v13 != 4294901760)
  {
    do
    {
      v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      v17 = *(_QWORD *)v16;
      v18 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, *(_QWORD *)(*(_QWORD *)v16 + 16), &v25);
      if (v18)
        re::DynamicArray<re::AmbientLightInfo>::add(v18 + 8, v17 + 32);
      v19 = v22;
      v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  re::ecs2::RenderOptions *v9;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  double v20;
  __int128 v21;
  float v22;
  float v23;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28;
  float v29;
  re::DynamicString *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float v35;
  re::DynamicString *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  re::DynamicString *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  _BOOL8 result;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[28];
  _BYTE v65[20];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[29];
  char v70;
  __int16 v71;
  BOOL v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v9 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v58, a5, 0);
  v51 = v58;
  if ((_QWORD)v58 != a5 || WORD4(v58) != 0xFFFFLL || (DWORD2(v58) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v51);
      if (*(_BYTE *)re::ecs2::RenderOptions::forEntity(v9, *(_QWORD *)(*(_QWORD *)v12 + 16)))
      {
        v13 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v51);
        v14 = *(_QWORD *)v13;
        v15 = *(_QWORD *)(*(_QWORD *)v13 + 16);
        v16 = *(const char **)(v15 + 280);
        v17 = *(unsigned int *)(v14 + 856) | ((unint64_t)*(unsigned __int8 *)(v14 + 864) << 32);
        *(_QWORD *)&v58 = *(_QWORD *)(v14 + 848);
        *((_QWORD *)&v58 + 1) = v17;
        v18 = (_anonymous_namespace_ *)re::ColorGamut3F::as((uint64_t *)&v58, *(unsigned __int8 *)(a6 + 20), 1);
        LODWORD(v20) = v19;
        *(_QWORD *)&v21 = v18;
        DWORD2(v21) = v19;
        v22 = *(float *)(v14 + 32);
        switch(*(_DWORD *)(v14 + 28))
        {
          case 0:
          case 1:
            v59 = 0u;
            v58 = 0u;
            v47 = v21;
            re::DynamicString::setCapacity(&v58, 0);
            v63 = 0u;
            memset(v64, 0, 20);
            v61 = 0u;
            v62 = 0u;
            v60 = 0u;
            *(_QWORD *)&v64[20] = 0x412000003C23D70ALL;
            *(_QWORD *)v65 = 0;
            v65[8] = 0;
            *(_DWORD *)&v65[10] = 16842752;
            *(_DWORD *)&v65[16] = 1065353216;
            re::DynamicString::operator=((re::DynamicString *)&v58, (re::DynamicString *)&v56);
            *(_OWORD *)v64 = v47;
            *(float *)&v64[16] = v22;
            v23 = *(float *)(v14 + 40);
            if (v23 < 0.0)
              v23 = 0.0;
            *(float *)v65 = v23;
            *(_DWORD *)&v65[4] = *(_DWORD *)(v14 + 60);
            v25 = v23 != 0.0 && *(_DWORD *)(v14 + 28) == 0;
            v65[10] = v25;
            re::DynamicString::operator=((re::DynamicString *)(v14 + 64), (re::DynamicString *)&v58);
            v26 = v63;
            *(_OWORD *)(v14 + 128) = v62;
            *(_OWORD *)(v14 + 144) = v26;
            *(_OWORD *)(v14 + 160) = *(_OWORD *)v64;
            *(_OWORD *)(v14 + 172) = *(_OWORD *)&v64[12];
            v27 = v61;
            *(_OWORD *)(v14 + 96) = v60;
            *(_OWORD *)(v14 + 112) = v27;
            *(_QWORD *)(v14 + 188) = *(_QWORD *)v65;
            if (*(_BYTE *)(v14 + 196) || v65[8])
            {
              if (!*(_BYTE *)(v14 + 196) || v65[8])
              {
                if (!*(_BYTE *)(v14 + 196) && v65[8])
                  *(_BYTE *)(v14 + 196) = 1;
                *(_BYTE *)(v14 + 197) = v65[9];
              }
              else
              {
                *(_BYTE *)(v14 + 196) = 0;
              }
            }
            *(_QWORD *)(v14 + 198) = *(_QWORD *)&v65[10];
            *(_WORD *)(v14 + 206) = *(_WORD *)&v65[18];
            goto LABEL_55;
          case 2:
          case 3:
            v59 = 0u;
            v58 = 0u;
            v48 = v21;
            re::DynamicString::setCapacity(&v58, 0);
            v63 = 0u;
            memset(v64, 0, 20);
            v61 = 0u;
            v62 = 0u;
            v60 = 0u;
            *(_QWORD *)&v64[20] = 0x412000003C23D70ALL;
            *(_WORD *)&v69[22] = 0;
            *(_OWORD *)&v65[4] = 0u;
            v66 = 0u;
            v67 = 0u;
            v68 = 0u;
            memset(v69, 0, 21);
            re::DynamicString::operator=((re::DynamicString *)&v58, (re::DynamicString *)&v56);
            *(_OWORD *)v64 = v48;
            *(float *)&v64[16] = v22;
            re::Projection::makePerspectiveFieldOfViewReverseDepth(1.5708, 1.0, 0.01, *(float *)(v14 + 40), &v52);
            *(_OWORD *)&v65[4] = v52;
            v66 = v53;
            v67 = v54;
            v68 = v55;
            *(_QWORD *)v69 = *(_QWORD *)(v15 + 296);
            v29 = *(float *)(v14 + 40);
            if (v29 < 0.0)
              v29 = 0.0;
            *(float *)&v69[8] = v29;
            *(_DWORD *)&v69[16] = *(_DWORD *)(v14 + 60);
            v69[22] = 0;
            v69[23] = *(_DWORD *)(v14 + 28) == 2;
            v30 = re::DynamicString::operator=((re::DynamicString *)(v14 + 448), (re::DynamicString *)&v58);
            v31 = v63;
            *(_OWORD *)(v14 + 512) = v62;
            *(_OWORD *)(v14 + 528) = v31;
            *(_OWORD *)(v14 + 544) = *(_OWORD *)v64;
            *(_OWORD *)((char *)v30 + 108) = *(_OWORD *)&v64[12];
            v32 = v61;
            *(_OWORD *)(v14 + 480) = v60;
            *(_OWORD *)(v14 + 496) = v32;
            v33 = v68;
            *(_OWORD *)(v14 + 608) = v67;
            *(_OWORD *)(v14 + 624) = v33;
            *(_OWORD *)(v14 + 640) = *(_OWORD *)v69;
            *(_DWORD *)(v14 + 656) = *(_DWORD *)&v69[16];
            v34 = v66;
            *(_OWORD *)(v14 + 576) = *(_OWORD *)&v65[4];
            *(_OWORD *)(v14 + 592) = v34;
            if (*(_BYTE *)(v14 + 660) || v69[20])
            {
              if (!*(_BYTE *)(v14 + 660) || v69[20])
              {
                if (!*(_BYTE *)(v14 + 660) && v69[20])
                  *(_BYTE *)(v14 + 660) = 1;
                *(_BYTE *)(v14 + 661) = v69[21];
              }
              else
              {
                *(_BYTE *)(v14 + 660) = 0;
              }
            }
            *(_WORD *)(v14 + 662) = *(_WORD *)&v69[22];
            goto LABEL_55;
          case 4:
          case 5:
            v59 = 0u;
            v58 = 0u;
            v49 = v21;
            re::DynamicString::setCapacity(&v58, 0);
            v63 = 0u;
            memset(v64, 0, 20);
            v61 = 0u;
            v62 = 0u;
            v60 = 0u;
            *(_QWORD *)&v64[20] = 0x412000003C23D70ALL;
            v71 = 0;
            v72 = 0;
            *(_OWORD *)&v65[4] = 0u;
            v66 = 0u;
            v67 = 0u;
            v68 = 0u;
            memset(v69, 0, sizeof(v69));
            re::DynamicString::operator=((re::DynamicString *)&v58, (re::DynamicString *)&v56);
            *(_OWORD *)v64 = v49;
            *(float *)&v64[16] = v22;
            re::Projection::makePerspectiveFieldOfViewReverseDepth((float)(*(float *)(v14 + 36) * 3.1416) / 180.0, 1.0, 0.01, *(float *)(v14 + 40), &v52);
            *(_OWORD *)&v65[4] = v52;
            v66 = v53;
            v67 = v54;
            v68 = v55;
            *(_QWORD *)v69 = *(_QWORD *)(v15 + 296);
            v35 = *(float *)(v14 + 40);
            if (v35 < 0.0)
              v35 = 0.0;
            *(float *)&v69[8] = v35;
            *(_DWORD *)&v69[24] = *(_DWORD *)(v14 + 60);
            HIBYTE(v71) = 0;
            v72 = *(_DWORD *)(v14 + 28) == 4;
            v36 = re::DynamicString::operator=((re::DynamicString *)(v14 + 208), (re::DynamicString *)&v58);
            v37 = v63;
            *(_OWORD *)(v14 + 272) = v62;
            *(_OWORD *)(v14 + 288) = v37;
            *(_OWORD *)(v14 + 304) = *(_OWORD *)v64;
            *(_OWORD *)((char *)v36 + 108) = *(_OWORD *)&v64[12];
            v38 = v61;
            *(_OWORD *)(v14 + 240) = v60;
            *(_OWORD *)(v14 + 256) = v38;
            v39 = v68;
            *(_OWORD *)(v14 + 368) = v67;
            *(_OWORD *)(v14 + 384) = v39;
            *(_OWORD *)(v14 + 400) = *(_OWORD *)v69;
            *(_OWORD *)((char *)v36 + 204) = *(_OWORD *)&v69[12];
            v40 = v66;
            *(_OWORD *)(v14 + 336) = *(_OWORD *)&v65[4];
            *(_OWORD *)(v14 + 352) = v40;
            if (*(_BYTE *)(v14 + 428) || v69[28])
            {
              if (!*(_BYTE *)(v14 + 428) || v69[28])
              {
                if (!*(_BYTE *)(v14 + 428) && v69[28])
                  *(_BYTE *)(v14 + 428) = 1;
                *(_BYTE *)(v14 + 429) = v70;
              }
              else
              {
                *(_BYTE *)(v14 + 428) = 0;
              }
            }
            *(_WORD *)(v14 + 430) = v71;
            *(_BYTE *)(v14 + 432) = v72;
            goto LABEL_55;
          case 6:
            *(_OWORD *)(v14 + 816) = v21;
            *(float *)(v14 + 832) = v22 * 683.0;
            goto LABEL_58;
          case 7:
            v59 = 0u;
            v58 = 0u;
            v50 = v21;
            re::DynamicString::setCapacity(&v58, 0);
            v63 = 0u;
            memset(v64, 0, 20);
            v61 = 0u;
            v62 = 0u;
            v60 = 0u;
            *(_QWORD *)&v64[20] = 0x412000003C23D70ALL;
            *(_QWORD *)&v65[4] = 0;
            v65[12] = 0;
            re::DynamicString::operator=((re::DynamicString *)&v58, (re::DynamicString *)&v56);
            *(_OWORD *)v64 = v50;
            *(float *)&v64[16] = v22;
            *(_QWORD *)&v65[4] = *(_QWORD *)(v14 + 48);
            v65[12] = *(_BYTE *)(v14 + 56);
            v41 = re::DynamicString::operator=((re::DynamicString *)(v14 + 672), (re::DynamicString *)&v58);
            v42 = v63;
            *(_OWORD *)(v14 + 736) = v62;
            *(_OWORD *)(v14 + 752) = v42;
            *(_OWORD *)(v14 + 768) = *(_OWORD *)v64;
            *(_OWORD *)((char *)v41 + 108) = *(_OWORD *)&v64[12];
            v43 = v61;
            *(_OWORD *)(v14 + 704) = v60;
            *(_OWORD *)(v14 + 720) = v43;
            *(_QWORD *)(v14 + 800) = *(_QWORD *)&v65[4];
            *(_BYTE *)(v14 + 808) = v65[12];
LABEL_55:
            if ((_QWORD)v58 && (BYTE8(v58) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v58 + 40))();
LABEL_58:
            if (v56 && (v57 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v56 + 40))();
            v28 = 3;
            break;
          default:
            re::internal::assertLog((re::internal *)5, v19, v20, *(double *)&v18, "assertion failure: '%s' (%s:line %i) Invalid light type %d.", "!\"Unreachable code\"", "processDirtyComponent", 569, *(unsigned int *)(v14 + 28));
            _os_crash();
            __break(1u);
            return result;
        }
      }
      else
      {
        v28 = 1;
      }
      v44 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v51);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a3, a4, v44, v28);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v51);
    }
    while ((_QWORD)v51 != a5 || WORD4(v51) != 0xFFFF || WORD5(v51) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  re::ecs2::TransformComponent **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 136) + 24))(*(_QWORD *)(*(_QWORD *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v30, a5, 0);
  v28 = v30;
  if ((_QWORD)v30 != a5 || WORD4(v30) != 0xFFFFLL || (DWORD2(v30) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
      v13 = *(_QWORD *)v12;
      v14 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v12 + 16);
      v15 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v14, &v29);
      if (v15)
      {
        v16 = v15;
        re::ecs2::TransformComponent::worldMatrix4x4F(v14, (const re::ecs2::Entity *)1, &v30);
        switch(*(_DWORD *)(v13 + 28))
        {
          case 0:
          case 1:
            v18 = v31;
            *(_OWORD *)(v13 + 96) = v30;
            *(_OWORD *)(v13 + 112) = v18;
            v19 = v33;
            *(_OWORD *)(v13 + 128) = v32;
            *(_OWORD *)(v13 + 144) = v19;
            re::DynamicArray<re::DirectionalLightInfo>::add((_anonymous_namespace_ *)(v16 + 48), (re::DynamicString *)(v13 + 64));
            break;
          case 2:
          case 3:
            v20 = v31;
            *(_OWORD *)(v13 + 480) = v30;
            *(_OWORD *)(v13 + 496) = v20;
            v21 = v33;
            *(_OWORD *)(v13 + 512) = v32;
            *(_OWORD *)(v13 + 528) = v21;
            re::DynamicArray<re::PointLightInfo>::add(v16 + 168, (re::DynamicString *)(v13 + 448));
            break;
          case 4:
          case 5:
            v22 = v31;
            *(_OWORD *)(v13 + 240) = v30;
            *(_OWORD *)(v13 + 256) = v22;
            v23 = v33;
            *(_OWORD *)(v13 + 272) = v32;
            *(_OWORD *)(v13 + 288) = v23;
            re::DynamicArray<re::SpotLightInfo>::add(v16 + 128, (re::DynamicString *)(v13 + 208));
            break;
          case 6:
            re::DynamicArray<re::AmbientLightInfo>::add(v16 + 8, v13 + 816);
            break;
          case 7:
            v24 = v31;
            *(_OWORD *)(v13 + 704) = v30;
            *(_OWORD *)(v13 + 720) = v24;
            v25 = v33;
            *(_OWORD *)(v13 + 736) = v32;
            *(_OWORD *)(v13 + 752) = v25;
            re::DynamicArray<re::RectAreaLightInfo>::add(v16 + 208, (re::DynamicString *)(v13 + 672));
            break;
          default:
            re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) Invalid light type %d.", "!\"Unreachable code\"", "processUpdatingComponent", 470, *(unsigned int *)(v13 + 28));
            _os_crash();
            __break(1u);
            JUMPOUT(0x22569832CLL);
        }
      }
      v26 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v26, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
    }
    while ((_QWORD)v28 != a5 || WORD4(v28) != 0xFFFF || WORD5(v28) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

_QWORD *re::DynamicArray<re::DirectionalLightInfo>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DirectionalLightInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DirectionalLightInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::DirectionalLightInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DirectionalLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 144 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          v19 = *(_OWORD *)(v8 + v10 + 64);
          v20 = *(_OWORD *)(v8 + v10 + 80);
          v21 = *(_OWORD *)(v8 + v10 + 96);
          *(_OWORD *)((char *)v13 + 108) = *(_OWORD *)(v8 + v10 + 108);
          *((_OWORD *)v13 + 5) = v20;
          *((_OWORD *)v13 + 6) = v21;
          *((_OWORD *)v13 + 4) = v19;
          v22 = *(_OWORD *)(v8 + v10 + 48);
          *((_OWORD *)v13 + 2) = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v13 + 3) = v22;
          *(_QWORD *)((char *)v13 + 124) = *(_QWORD *)(v8 + v10 + 124);
          LODWORD(v16) = *(unsigned __int8 *)(v8 + v10 + 132);
          *((_BYTE *)v13 + 132) = v16;
          if ((_DWORD)v16)
            *((_BYTE *)v13 + 133) = *((_BYTE *)v14 + 133);
          v23 = *(_QWORD *)((char *)v14 + 134);
          *((_WORD *)v13 + 71) = *((_WORD *)v14 + 71);
          *(_QWORD *)((char *)v13 + 134) = v23;
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 144;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::SpotLightInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SpotLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF0uLL))
        {
          v2 = 240 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 240 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 240, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 240 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          v19 = *(_OWORD *)(v8 + v10 + 64);
          v20 = *(_OWORD *)(v8 + v10 + 80);
          v21 = *(_OWORD *)(v8 + v10 + 96);
          *(_OWORD *)((char *)v13 + 108) = *(_OWORD *)(v8 + v10 + 108);
          *((_OWORD *)v13 + 5) = v20;
          *((_OWORD *)v13 + 6) = v21;
          *((_OWORD *)v13 + 4) = v19;
          v22 = *(_OWORD *)(v8 + v10 + 48);
          *((_OWORD *)v13 + 2) = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v13 + 3) = v22;
          v24 = *(_OWORD *)(v8 + v10 + 176);
          v23 = *(_OWORD *)(v8 + v10 + 192);
          v25 = *(_OWORD *)(v8 + v10 + 160);
          *(_OWORD *)((char *)v13 + 204) = *(_OWORD *)(v8 + v10 + 204);
          *((_OWORD *)v13 + 11) = v24;
          *((_OWORD *)v13 + 12) = v23;
          *((_OWORD *)v13 + 10) = v25;
          v26 = *(_OWORD *)(v8 + v10 + 144);
          *((_OWORD *)v13 + 8) = *(_OWORD *)(v8 + v10 + 128);
          *((_OWORD *)v13 + 9) = v26;
          LODWORD(v16) = *(unsigned __int8 *)(v8 + v10 + 220);
          *((_BYTE *)v13 + 220) = v16;
          if ((_DWORD)v16)
            *((_BYTE *)v13 + 221) = *((_BYTE *)v14 + 221);
          v27 = *((_WORD *)v14 + 111);
          *((_BYTE *)v13 + 224) = *((_BYTE *)v14 + 224);
          *((_WORD *)v13 + 111) = v27;
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 240;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PointLightInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PointLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          v2 = 224 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 224 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          v19 = *(_OWORD *)(v8 + v10 + 64);
          v20 = *(_OWORD *)(v8 + v10 + 80);
          v21 = *(_OWORD *)(v8 + v10 + 96);
          *(_OWORD *)((char *)v13 + 108) = *(_OWORD *)(v8 + v10 + 108);
          *((_OWORD *)v13 + 5) = v20;
          *((_OWORD *)v13 + 6) = v21;
          *((_OWORD *)v13 + 4) = v19;
          v22 = *(_OWORD *)(v8 + v10 + 48);
          *((_OWORD *)v13 + 2) = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v13 + 3) = v22;
          v24 = *(_OWORD *)(v8 + v10 + 176);
          v23 = *(_OWORD *)(v8 + v10 + 192);
          v25 = *(_OWORD *)(v8 + v10 + 160);
          *((_DWORD *)v13 + 52) = *(_DWORD *)(v8 + v10 + 208);
          *((_OWORD *)v13 + 11) = v24;
          *((_OWORD *)v13 + 12) = v23;
          *((_OWORD *)v13 + 10) = v25;
          v26 = *(_OWORD *)(v8 + v10 + 144);
          *((_OWORD *)v13 + 8) = *(_OWORD *)(v8 + v10 + 128);
          *((_OWORD *)v13 + 9) = v26;
          LODWORD(v16) = *(unsigned __int8 *)(v8 + v10 + 212);
          *((_BYTE *)v13 + 212) = v16;
          if ((_DWORD)v16)
            *((_BYTE *)v13 + 213) = *((_BYTE *)v14 + 213);
          *((_WORD *)v13 + 107) = *((_WORD *)v14 + 107);
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 224;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RectAreaLightInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RectAreaLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 144 * v9;
        v11 = 0uLL;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = v11;
          *((_OWORD *)v12 + 1) = v11;
          v12[3] = v8[3];
          v13 = v8[1];
          *v12 = *v8;
          *v8 = 0;
          v14 = v8[2];
          v8[3] = 0;
          v16 = v12[1];
          v15 = v12[2];
          v12[1] = v13;
          v12[2] = v14;
          v8[1] = v16;
          v8[2] = v15;
          v17 = *((_OWORD *)v8 + 4);
          v18 = *((_OWORD *)v8 + 5);
          v19 = *((_OWORD *)v8 + 6);
          *(_OWORD *)((char *)v12 + 108) = *(_OWORD *)((char *)v8 + 108);
          *((_OWORD *)v12 + 5) = v18;
          *((_OWORD *)v12 + 6) = v19;
          *((_OWORD *)v12 + 4) = v17;
          v20 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v12 + 2) = *((_OWORD *)v8 + 2);
          *((_OWORD *)v12 + 3) = v20;
          v21 = v8[16];
          *((_BYTE *)v12 + 136) = *((_BYTE *)v8 + 136);
          v12[16] = v21;
          if (*v8)
          {
            if ((v8[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 40))(*v8, v8[2]);
              v11 = 0uLL;
            }
            *(_OWORD *)v8 = v11;
            *((_OWORD *)v8 + 1) = v11;
          }
          v8 += 18;
          v12 += 18;
          v10 -= 144;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::copy((char *)a1, 0, *(char **)a2, v4);
      re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::resize((_anonymous_namespace_ *)a1, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else if (v4)
  {
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((_QWORD *)a1, v4);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::copy((char *)a1, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    result = re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::reserve(result, a2);
    v5 = *((_QWORD *)v3 + 1);
    if (v5 < a2)
    {
      do
      {
        v6 = (char *)v3 + 24;
        if ((*((_BYTE *)v3 + 16) & 1) == 0)
          v6 = (char *)*((_QWORD *)v3 + 4);
        *(_QWORD *)&v6[8 * v5++] = 0;
      }
      while (a2 != v5);
    }
  }
  *((_QWORD *)v3 + 1) = a2;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

char *re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::copy(char *result, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;

  if (!a4)
    return result;
  v6 = result;
  v7 = *((_QWORD *)result + 1);
  if (v7 + 1 <= a2)
  {
    v17 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v18) = 136315906;
    *(_QWORD *)((char *)&v18 + 4) = "copy";
    WORD6(v18) = 1024;
    HIWORD(v18) = 678;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 682, v7, a2, v4, v17, v18);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_21;
  if (v7 >= v8)
  {
    if ((result[16] & 1) != 0)
      v14 = result + 24;
    else
      v14 = (char *)*((_QWORD *)result + 4);
    result = (char *)memmove(&v14[8 * a2], __src, 8 * a4);
  }
  else
  {
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::growCapacity((_anonymous_namespace_ *)result, a2 + a4);
    v10 = v6[1];
    v11 = v10 - a2;
    v12 = *((_DWORD *)v6 + 4);
    if ((v12 & 1) != 0)
      v13 = (char *)(v6 + 3);
    else
      v13 = (char *)v6[4];
    v15 = &__src[8 * v11];
    if (v10 != a2)
    {
      memmove(&v13[8 * a2], __src, 8 * v11);
      v12 = *((_DWORD *)v6 + 4);
    }
    if ((v12 & 1) != 0)
      v16 = (char *)(v6 + 3);
    else
      v16 = (char *)v6[4];
    result = (char *)memcpy(&v16[8 * v6[1]], v15, &__src[8 * v4] - v15);
    v6[1] = v8;
  }
  *((_DWORD *)v6 + 4) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::reserve(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  int v5;

  v3 = result;
  if (*(_QWORD *)result)
  {
    if ((*((_DWORD *)result + 4) & 1) == 0)
    {
LABEL_3:
      v4 = *((_QWORD *)v3 + 3);
      goto LABEL_6;
    }
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, a2);
    v5 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v5;
    if ((v5 & 1) == 0)
      goto LABEL_3;
  }
  v4 = 8;
LABEL_6:
  if (v4 < a2)
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, a2);
  return result;
}

_QWORD *re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 144 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          v19 = *(_OWORD *)(v8 + v10 + 64);
          v20 = *(_OWORD *)(v8 + v10 + 80);
          v21 = *(_OWORD *)(v8 + v10 + 96);
          *(_OWORD *)((char *)v13 + 108) = *(_OWORD *)(v8 + v10 + 108);
          *((_OWORD *)v13 + 5) = v20;
          *((_OWORD *)v13 + 6) = v21;
          *((_OWORD *)v13 + 4) = v19;
          v22 = *(_OWORD *)(v8 + v10 + 48);
          *((_OWORD *)v13 + 2) = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v13 + 3) = v22;
          *(_QWORD *)((char *)v13 + 124) = *(_QWORD *)(v8 + v10 + 124);
          LODWORD(v16) = *(unsigned __int8 *)(v8 + v10 + 132);
          *((_BYTE *)v13 + 132) = v16;
          if ((_DWORD)v16)
            *((_BYTE *)v13 + 133) = *((_BYTE *)v14 + 133);
          v23 = *(_DWORD *)((char *)v14 + 134);
          *(_DWORD *)((char *)v13 + 137) = *(_DWORD *)((char *)v14 + 137);
          *(_DWORD *)((char *)v13 + 134) = v23;
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 144;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5FE68;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5FEC0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5FF18;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5FF70;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5FE68;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5FEC0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5FF18;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5FF70;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5FE68;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5FE68;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5FEC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5FEC0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5FF18;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5FF18;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5FF70;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5FF70;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5FFC8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED60020;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED60078;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED600D0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5FFC8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED60020;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED60078;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED600D0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5FFC8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5FFC8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60020;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60020;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60078;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60078;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED600D0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED600D0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED60128;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED60180;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED601D8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED60230;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED60128;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED60180;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED601D8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED60230;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60128;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60128;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60180;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60180;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED601D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED601D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60230;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60230;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED60288;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED602E0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED60338;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED60390;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED60288;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED602E0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED60338;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED60390;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60288;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60288;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED602E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED602E0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60338;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60338;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60390;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60390;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED603E8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED60440;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED60498;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED604F0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED603E8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED60440;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED60498;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED604F0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED603E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED603E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60440;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60440;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60498;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60498;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED604F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED604F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED60548;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED605A0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED605F8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED60650;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED60548;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED605A0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED605F8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED60650;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60548;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60548;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED605A0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED605A0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED605F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED605F8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60650;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60650;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED606A8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED60700;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED60758;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED607B0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED606A8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED60700;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED60758;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED607B0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED606A8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED606A8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60700;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60700;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60758;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60758;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED607B0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED607B0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60808;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60808;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60860;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60860;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED608B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED608B8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60910;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60910;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60968;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60968;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED609C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED609C0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3)
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED60A18;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED60A18;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::Component *)result;
      v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = 24;
      while (1)
      {
        result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0)
          break;
        v11 += 8;
        if (v11 == 56)
        {
          result = -1;
          break;
        }
      }
      if (v10 != (*(_QWORD *)(a1 + 32) != result))
      {
        v14 = 24;
        v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            v19 = v16;
            v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        v19 = -1;
LABEL_20:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    v20 = a2[41];
    if (v20)
    {
      v21 = (uint64_t *)a2[43];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::Component *)result;
      v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = 24;
      while (1)
      {
        result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0)
          break;
        v11 += 8;
        if (v11 == 56)
        {
          result = -1;
          break;
        }
      }
      if (v10 != (*(_QWORD *)(a1 + 32) != result))
      {
        v14 = 24;
        v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            v19 = v16;
            v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        v19 = -1;
LABEL_20:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    v20 = a2[41];
    if (v20)
    {
      v21 = (uint64_t *)a2[43];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::Component *)result;
      v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = 24;
      while (1)
      {
        result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0)
          break;
        v11 += 8;
        if (v11 == 56)
        {
          result = -1;
          break;
        }
      }
      if (v10 != (*(_QWORD *)(a1 + 32) != result))
      {
        v14 = 24;
        v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            v19 = v16;
            v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        v19 = -1;
LABEL_20:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    v20 = a2[41];
    if (v20)
    {
      v21 = (uint64_t *)a2[43];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::Component *)result;
      v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = 24;
      while (1)
      {
        result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0)
          break;
        v11 += 8;
        if (v11 == 56)
        {
          result = -1;
          break;
        }
      }
      if (v10 != (*(_QWORD *)(a1 + 32) != result))
      {
        v14 = 24;
        v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            v19 = v16;
            v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        v19 = -1;
LABEL_20:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    v20 = a2[41];
    if (v20)
    {
      v21 = (uint64_t *)a2[43];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::Component *)result;
      v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = 24;
      while (1)
      {
        result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0)
          break;
        v11 += 8;
        if (v11 == 56)
        {
          result = -1;
          break;
        }
      }
      if (v10 != (*(_QWORD *)(a1 + 32) != result))
      {
        v14 = 24;
        v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            v19 = v16;
            v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        v19 = -1;
LABEL_20:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    v20 = a2[41];
    if (v20)
    {
      v21 = (uint64_t *)a2[43];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::Component *)result;
      v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = 24;
      while (1)
      {
        result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0)
          break;
        v11 += 8;
        if (v11 == 56)
        {
          result = -1;
          break;
        }
      }
      if (v10 != (*(_QWORD *)(a1 + 32) != result))
      {
        v14 = 24;
        v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            v19 = v16;
            v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        v19 = -1;
LABEL_20:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    v20 = a2[41];
    if (v20)
    {
      v21 = (uint64_t *)a2[43];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, _QWORD *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t result;
  re::ecs2::Component *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2[37];
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      v9 = (re::ecs2::Component *)result;
      v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      v11 = 24;
      while (1)
      {
        result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0)
          break;
        v11 += 8;
        if (v11 == 56)
        {
          result = -1;
          break;
        }
      }
      if (v10 != (*(_QWORD *)(a1 + 32) != result))
      {
        v14 = 24;
        v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            v19 = v16;
            v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        v19 = -1;
LABEL_20:
        result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    v20 = a2[41];
    if (v20)
    {
      v21 = (uint64_t *)a2[43];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

_QWORD *re::BucketArray<re::LightInfoArrays,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::LightInfoArrays,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::LightInfoArrays,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 992, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::LightInfoArrays,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2256A2480()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = re::BucketArray<re::LightInfoArrays,4ul>::operator[](v4, i);
        re::DynamicArray<re::RectAreaLightInfo>::deinit(v7 + 208);
        re::DynamicArray<re::PointLightInfo>::deinit(v7 + 168);
        re::DynamicArray<re::SpotLightInfo>::deinit(v7 + 128);
        re::DynamicArray<re::RectAreaLightInfo>::deinit(v7 + 88);
        re::DynamicArray<re::RectAreaLightInfo>::deinit(v7 + 48);
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (*(_QWORD *)(v7 + 40))
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
          *(_QWORD *)(v7 + 40) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 8) = 0;
          ++*(_DWORD *)(v7 + 32);
        }
      }
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED60AB0;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED60AB0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::LightInfoArrays,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 248 * (a2 & 3);
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24ED5FE28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24ED5FD28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  _QWORD v3[2];
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24ED5FCE8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

id re::internal::defaultRetain<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void re::ecs2::introspect_ParticleLifetimeOpacity(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  StringID v44;
  _QWORD v45[2];
  _QWORD v46[61];

  v2 = atomic_load((unsigned __int8 *)&qword_255833250);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_255833250);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "LinearFadeOut";
      qword_255833430 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "LinearFadeIn";
      qword_255833438 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "GradualFadeInOut";
      qword_255833440 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "QuickFadeInOut";
      qword_255833448 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "EaseFadeIn";
      qword_255833450 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 5;
      *((_QWORD *)v38 + 2) = "EaseFadeOut";
      qword_255833458 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = 6;
      *(_QWORD *)(v40 + 16) = "Constant";
      qword_255833460 = v40;
      __cxa_guard_release(&qword_255833250);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255833258);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255833258))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2558335B8, "ParticleLifetimeOpacity", 4, 4, 1, 1);
    qword_2558335B8 = (uint64_t)&off_24ED7D9E8;
    qword_2558335F8 = (uint64_t)&re::ecs2::introspect_ParticleLifetimeOpacity(BOOL)::enumTable;
    dword_2558335C8 = 9;
    __cxa_guard_release(&qword_255833258);
  }
  if ((byte_255833213 & 1) == 0)
  {
    byte_255833213 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558335B8, a2);
    v42 = 0x72D293C0BFE398F8;
    v43 = "ParticleLifetimeOpacity";
    v46[0] = 208862;
    v46[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v46);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v46);
      v6 = (unsigned int *)qword_2558335F8;
      v45[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v46, &v42, 1, 1, (uint64_t)v45);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v44.var0 = 2 * v12;
            v44.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v16, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v44.var0 = 2 * v20;
              v44.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v24, &v44);
              re::StringID::destroyString((re::StringID *)&v44);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v25);
      xmmword_2558335D8 = (__int128)v44;
      re::StringID::destroyString((re::StringID *)&v42);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v46);
      re::internal::assertLog((re::internal *)5, v41, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleLifetimeOpacity", v42, v43);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_BillboardMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_255833270);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_255833270);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Billboard";
      qword_255833360 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Free";
      qword_255833368 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "BillboardYAligned";
      qword_255833370 = v32;
      __cxa_guard_release(&qword_255833270);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255833278);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255833278))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255833648, "BillboardMode", 4, 4, 1, 1);
    qword_255833648 = (uint64_t)&off_24ED7D9E8;
    qword_255833688 = (uint64_t)&re::ecs2::introspect_BillboardMode(BOOL)::enumTable;
    dword_255833658 = 9;
    __cxa_guard_release(&qword_255833278);
  }
  if ((byte_255833215 & 1) == 0)
  {
    byte_255833215 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833648, a2);
    v34 = 0xEF7B4D464AB6BAC4;
    v35 = "BillboardMode";
    v38[0] = 208862;
    v38[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_255833688;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_255833668 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BillboardMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleSortOrder(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  StringID v44;
  _QWORD v45[2];
  _QWORD v46[61];

  v2 = atomic_load((unsigned __int8 *)&qword_255833280);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_255833280);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "IncreasingDepth";
      qword_255833468 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "DecreasingDepth";
      qword_255833470 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "IncreasingID";
      qword_255833478 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "DecreasingID";
      qword_255833480 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "IncreasingAge";
      qword_255833488 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 5;
      *((_QWORD *)v38 + 2) = "DecreasingAge";
      qword_255833490 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = 6;
      *(_QWORD *)(v40 + 16) = "Unsorted";
      qword_255833498 = v40;
      __cxa_guard_release(&qword_255833280);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255833288);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255833288))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255833690, "ParticleSortOrder", 4, 4, 1, 1);
    qword_255833690 = (uint64_t)&off_24ED7D9E8;
    qword_2558336D0 = (uint64_t)&re::ecs2::introspect_ParticleSortOrder(BOOL)::enumTable;
    dword_2558336A0 = 9;
    __cxa_guard_release(&qword_255833288);
  }
  if ((byte_255833216 & 1) == 0)
  {
    byte_255833216 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833690, a2);
    v42 = 0x7B9E2BB4FC9CB894;
    v43 = "ParticleSortOrder";
    v46[0] = 208862;
    v46[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v46);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v46);
      v6 = (unsigned int *)qword_2558336D0;
      v45[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v46, &v42, 1, 1, (uint64_t)v45);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v44.var0 = 2 * v12;
            v44.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v16, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v44.var0 = 2 * v20;
              v44.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v24, &v44);
              re::StringID::destroyString((re::StringID *)&v44);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v25);
      xmmword_2558336B0 = (__int128)v44;
      re::StringID::destroyString((re::StringID *)&v42);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v46);
      re::internal::assertLog((re::internal *)5, v41, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleSortOrder", v42, v43);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleBlendMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_255833290);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_255833290);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Alpha";
      qword_255833378 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Opaque";
      qword_255833380 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Additive";
      qword_255833388 = v32;
      __cxa_guard_release(&qword_255833290);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_255833298);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255833298))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2558336D8, "ParticleBlendMode", 4, 4, 1, 1);
    qword_2558336D8 = (uint64_t)&off_24ED7D9E8;
    qword_255833718 = (uint64_t)&re::ecs2::introspect_ParticleBlendMode(BOOL)::enumTable;
    dword_2558336E8 = 9;
    __cxa_guard_release(&qword_255833298);
  }
  if ((byte_255833217 & 1) == 0)
  {
    byte_255833217 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558336D8, a2);
    v34 = 0x7B9E11296A914B1CLL;
    v35 = "ParticleBlendMode";
    v38[0] = 208862;
    v38[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_255833718;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_2558336F8 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleBlendMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleAnimationRepeatMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2558332A0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2558332A0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "PlayOnce";
      qword_255833390 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Looping";
      qword_255833398 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "AutoReverse";
      qword_2558333A0 = v32;
      __cxa_guard_release(&qword_2558332A0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2558332A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2558332A8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255833720, "ParticleAnimationRepeatMode", 4, 4, 1, 1);
    qword_255833720 = (uint64_t)&off_24ED7D9E8;
    qword_255833760 = (uint64_t)&re::ecs2::introspect_ParticleAnimationRepeatMode(BOOL)::enumTable;
    dword_255833730 = 9;
    __cxa_guard_release(&qword_2558332A8);
  }
  if ((byte_255833218 & 1) == 0)
  {
    byte_255833218 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833720, a2);
    v34 = 0x53F15E65CD4D5FF8;
    v35 = "ParticleAnimationRepeatMode";
    v38[0] = 208862;
    v38[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_255833760;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_255833740 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleAnimationRepeatMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_ParticleEmitter(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2558332C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2558332C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558337B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2558337C0 = 0;
    qword_2558337D0 = 0;
    qword_2558337D8 = 0xFFFFFFFFLL;
    qword_2558337B0 = (uint64_t)&off_24ED7DAA8;
    qword_2558337E0 = (uint64_t)"ParticleEmitter";
    dword_2558337E8 = 0;
    xmmword_2558337F0 = 0u;
    xmmword_255833800 = 0u;
    xmmword_255833810 = 0u;
    qword_255833820 = 0;
    __cxa_guard_release(&qword_2558332C0);
  }
  return &qword_2558337B0;
}

void re::ecs2::initInfo_ParticleEmitter(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  const re::IntrospectionBase *v48;
  void *v49;
  uint64_t v50;
  uint64_t *v51;
  const re::IntrospectionBase *v52;
  void *v53;
  uint64_t v54;
  uint64_t *v55;
  const re::IntrospectionBase *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  const re::IntrospectionBase *v60;
  void *v61;
  uint64_t v62;
  uint64_t *v63;
  const re::IntrospectionBase *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  const re::IntrospectionBase *v68;
  void *v69;
  uint64_t v70;
  uint64_t *v71;
  const re::IntrospectionBase *v72;
  void *v73;
  uint64_t v74;
  uint64_t *v75;
  const re::IntrospectionBase *v76;
  void *v77;
  uint64_t v78;
  uint64_t *v79;
  const re::IntrospectionBase *v80;
  void *v81;
  uint64_t v82;
  uint64_t *v83;
  const re::IntrospectionBase *v84;
  uint64_t v85;
  uint64_t *v86;
  const re::IntrospectionBase *v87;
  void *v88;
  uint64_t v89;
  uint64_t *v90;
  const re::IntrospectionBase *v91;
  void *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  const re::IntrospectionBase *v101;
  void *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  const re::IntrospectionBase *v111;
  void *v112;
  uint64_t v113;
  uint64_t *v114;
  const re::IntrospectionBase *v115;
  void *v116;
  uint64_t v117;
  uint64_t *v118;
  const re::IntrospectionBase *v119;
  void *v120;
  uint64_t v121;
  uint64_t *v122;
  const re::IntrospectionBase *v123;
  void *v124;
  uint64_t v125;
  uint64_t *v126;
  const re::IntrospectionBase *v127;
  void *v128;
  uint64_t v129;
  uint64_t *v130;
  const re::IntrospectionBase *v131;
  void *v132;
  uint64_t v133;
  uint64_t *v134;
  const re::IntrospectionBase *v135;
  void *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  const re::IntrospectionBase *v142;
  void *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  const re::IntrospectionBase *v149;
  void *v150;
  uint64_t v151;
  uint64_t *v152;
  const re::IntrospectionBase *v153;
  void *v154;
  uint64_t v155;
  uint64_t *v156;
  const re::IntrospectionBase *v157;
  uint64_t v158;
  uint64_t *v159;
  const re::IntrospectionBase *v160;
  uint64_t v161;
  uint64_t *v162;
  const re::IntrospectionBase *v163;
  void *v164;
  uint64_t v165;
  uint64_t *v166;
  const re::IntrospectionBase *v167;
  void *v168;
  uint64_t v169;
  uint64_t *v170;
  const re::IntrospectionBase *v171;
  void *v172;
  uint64_t v173;
  uint64_t *v174;
  const re::IntrospectionBase *v175;
  void *v176;
  uint64_t v177;
  uint64_t *v178;
  const re::IntrospectionBase *v179;
  void *v180;
  uint64_t v181;
  uint64_t *v182;
  const re::IntrospectionBase *v183;
  void *v184;
  uint64_t v185;
  uint64_t *v186;
  const re::IntrospectionBase *v187;
  void *v188;
  uint64_t v189;
  uint64_t *v190;
  const re::IntrospectionBase *v191;
  void *v192;
  uint64_t v193;
  uint64_t *v194;
  const re::IntrospectionBase *v195;
  uint64_t v196;
  uint64_t *v197;
  const re::IntrospectionBase *v198;
  void *v199;
  uint64_t v200;
  __int128 v201;
  _QWORD v202[2];
  __int128 v203;

  v202[0] = 0x4CD9458CE2D0B3D0;
  v202[1] = "ParticleEmitter";
  re::StringID::destroyString((re::StringID *)v202);
  *((_OWORD *)this + 2) = v203;
  v4 = atomic_load((unsigned __int8 *)&qword_2558332C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2558332C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "birthRate";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_255833AA8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "birthRateVariation";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_255833AB0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "dampingFactor";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_255833AB8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "spreadingAngle";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255833AC0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v23 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "acceleration";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255833AC8 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_float((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "particleSize";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x2000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255833AD0 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_float((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "particleSizeVariation";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x2400000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255833AD8 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      re::ecs2::introspect_BillboardMode((re::ecs2 *)v33, v34);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "billboardMode";
      *(_QWORD *)(v35 + 16) = &qword_255833648;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x2800000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_255833AE0 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v37 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "billboardAxis";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x3000000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_255833AE8 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::introspect_float((re *)1, v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = "axisVariation";
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0x400000000ALL;
      *(_DWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_255833AF0 = v42;
      v43 = re::introspectionAllocator((re *)v42);
      v45 = re::introspect_float((re *)1, v44);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = "particleMass";
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0x440000000BLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = 0;
      *(_QWORD *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_255833AF8 = v46;
      v47 = re::introspectionAllocator((re *)v46);
      v49 = re::introspect_float((re *)1, v48);
      v50 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
      *(_DWORD *)v50 = 1;
      *(_QWORD *)(v50 + 8) = "particleMassVariation";
      *(_QWORD *)(v50 + 16) = v49;
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 32) = 0x480000000CLL;
      *(_DWORD *)(v50 + 40) = 0;
      *(_QWORD *)(v50 + 48) = 0;
      *(_QWORD *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_255833B00 = v50;
      v51 = re::introspectionAllocator((re *)v50);
      v53 = re::introspect_double((re *)1, v52);
      v54 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v51 + 32))(v51, 72, 8);
      *(_DWORD *)v54 = 1;
      *(_QWORD *)(v54 + 8) = "particleLifeSpan";
      *(_QWORD *)(v54 + 16) = v53;
      *(_QWORD *)(v54 + 24) = 0;
      *(_QWORD *)(v54 + 32) = 0x500000000DLL;
      *(_DWORD *)(v54 + 40) = 0;
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_255833B08 = v54;
      v55 = re::introspectionAllocator((re *)v54);
      v57 = re::introspect_double((re *)1, v56);
      v58 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 72, 8);
      *(_DWORD *)v58 = 1;
      *(_QWORD *)(v58 + 8) = "particleLifeSpanVariation";
      *(_QWORD *)(v58 + 16) = v57;
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v58 + 32) = 0x580000000ELL;
      *(_DWORD *)(v58 + 40) = 0;
      *(_QWORD *)(v58 + 48) = 0;
      *(_QWORD *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_255833B10 = v58;
      v59 = re::introspectionAllocator((re *)v58);
      v61 = re::introspect_float((re *)1, v60);
      v62 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v59 + 32))(v59, 72, 8);
      *(_DWORD *)v62 = 1;
      *(_QWORD *)(v62 + 8) = "particleAngle";
      *(_QWORD *)(v62 + 16) = v61;
      *(_QWORD *)(v62 + 24) = 0;
      *(_QWORD *)(v62 + 32) = 0x600000000FLL;
      *(_DWORD *)(v62 + 40) = 0;
      *(_QWORD *)(v62 + 48) = 0;
      *(_QWORD *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_255833B18 = v62;
      v63 = re::introspectionAllocator((re *)v62);
      v65 = re::introspect_float((re *)1, v64);
      v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v63 + 32))(v63, 72, 8);
      *(_DWORD *)v66 = 1;
      *(_QWORD *)(v66 + 8) = "particleAngleVariation";
      *(_QWORD *)(v66 + 16) = v65;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0x6400000010;
      *(_DWORD *)(v66 + 40) = 0;
      *(_QWORD *)(v66 + 48) = 0;
      *(_QWORD *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_255833B20 = v66;
      v67 = re::introspectionAllocator((re *)v66);
      v69 = re::introspect_float((re *)1, v68);
      v70 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 72, 8);
      *(_DWORD *)v70 = 1;
      *(_QWORD *)(v70 + 8) = "particleAngularVelocity";
      *(_QWORD *)(v70 + 16) = v69;
      *(_QWORD *)(v70 + 24) = 0;
      *(_QWORD *)(v70 + 32) = 0x6800000011;
      *(_DWORD *)(v70 + 40) = 0;
      *(_QWORD *)(v70 + 48) = 0;
      *(_QWORD *)(v70 + 56) = 0;
      *(_DWORD *)(v70 + 64) = 0;
      qword_255833B28 = v70;
      v71 = re::introspectionAllocator((re *)v70);
      v73 = re::introspect_float((re *)1, v72);
      v74 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v71 + 32))(v71, 72, 8);
      *(_DWORD *)v74 = 1;
      *(_QWORD *)(v74 + 8) = "particleAngularVelocityVariation";
      *(_QWORD *)(v74 + 16) = v73;
      *(_QWORD *)(v74 + 24) = 0;
      *(_QWORD *)(v74 + 32) = 0x6C00000012;
      *(_DWORD *)(v74 + 40) = 0;
      *(_QWORD *)(v74 + 48) = 0;
      *(_QWORD *)(v74 + 56) = 0;
      *(_DWORD *)(v74 + 64) = 0;
      qword_255833B30 = v74;
      v75 = re::introspectionAllocator((re *)v74);
      v77 = re::introspect_float((re *)1, v76);
      v78 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v75 + 32))(v75, 72, 8);
      *(_DWORD *)v78 = 1;
      *(_QWORD *)(v78 + 8) = "particleBounce";
      *(_QWORD *)(v78 + 16) = v77;
      *(_QWORD *)(v78 + 24) = 0;
      *(_QWORD *)(v78 + 32) = 0x7000000013;
      *(_DWORD *)(v78 + 40) = 0;
      *(_QWORD *)(v78 + 48) = 0;
      *(_QWORD *)(v78 + 56) = 0;
      *(_DWORD *)(v78 + 64) = 0;
      qword_255833B38 = v78;
      v79 = re::introspectionAllocator((re *)v78);
      v81 = re::introspect_float((re *)1, v80);
      v82 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v79 + 32))(v79, 72, 8);
      *(_DWORD *)v82 = 1;
      *(_QWORD *)(v82 + 8) = "particleFriction";
      *(_QWORD *)(v82 + 16) = v81;
      *(_QWORD *)(v82 + 24) = 0;
      *(_QWORD *)(v82 + 32) = 0x7400000014;
      *(_DWORD *)(v82 + 40) = 0;
      *(_QWORD *)(v82 + 48) = 0;
      *(_QWORD *)(v82 + 56) = 0;
      *(_DWORD *)(v82 + 64) = 0;
      qword_255833B40 = v82;
      v83 = re::introspectionAllocator((re *)v82);
      re::ecs2::introspect_ParticleLifetimeOpacity((re::ecs2 *)v83, v84);
      v85 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v83 + 32))(v83, 72, 8);
      *(_DWORD *)v85 = 1;
      *(_QWORD *)(v85 + 8) = "opacityOverLife";
      *(_QWORD *)(v85 + 16) = &qword_2558335B8;
      *(_QWORD *)(v85 + 24) = 0;
      *(_QWORD *)(v85 + 32) = 0x7800000015;
      *(_DWORD *)(v85 + 40) = 0;
      *(_QWORD *)(v85 + 48) = 0;
      *(_QWORD *)(v85 + 56) = 0;
      *(_DWORD *)(v85 + 64) = 0;
      qword_255833B48 = v85;
      v86 = re::introspectionAllocator((re *)v85);
      v88 = re::introspect_float((re *)1, v87);
      v89 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v86 + 32))(v86, 72, 8);
      *(_DWORD *)v89 = 1;
      *(_QWORD *)(v89 + 8) = "sizeMultiplierAtEndOfLifespan";
      *(_QWORD *)(v89 + 16) = v88;
      *(_QWORD *)(v89 + 24) = 0;
      *(_QWORD *)(v89 + 32) = 0x7C00000016;
      *(_DWORD *)(v89 + 40) = 0;
      *(_QWORD *)(v89 + 48) = 0;
      *(_QWORD *)(v89 + 56) = 0;
      *(_DWORD *)(v89 + 64) = 0;
      qword_255833B50 = v89;
      v90 = re::introspectionAllocator((re *)v89);
      v92 = re::introspect_float((re *)1, v91);
      v93 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v90 + 32))(v90, 72, 8);
      *(_DWORD *)v93 = 1;
      *(_QWORD *)(v93 + 8) = "sizeMultiplierAtEndOfLifespanPower";
      *(_QWORD *)(v93 + 16) = v92;
      *(_QWORD *)(v93 + 24) = 0;
      *(_QWORD *)(v93 + 32) = 0x8000000017;
      *(_DWORD *)(v93 + 40) = 0;
      *(_QWORD *)(v93 + 48) = 0;
      *(_QWORD *)(v93 + 56) = 0;
      *(_DWORD *)(v93 + 64) = 0;
      qword_255833B58 = v93;
      v94 = re::introspectionAllocator((re *)v93);
      v95 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v96 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 72, 8);
      *(_DWORD *)v96 = 1;
      *(_QWORD *)(v96 + 8) = "startColorA";
      *(_QWORD *)(v96 + 16) = v95;
      *(_QWORD *)(v96 + 24) = 0;
      *(_QWORD *)(v96 + 32) = 0x9000000018;
      *(_DWORD *)(v96 + 40) = 0;
      *(_QWORD *)(v96 + 48) = 0;
      *(_QWORD *)(v96 + 56) = 0;
      *(_DWORD *)(v96 + 64) = 0;
      qword_255833B60 = v96;
      v97 = re::introspectionAllocator((re *)v96);
      v98 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v99 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v97 + 32))(v97, 72, 8);
      *(_DWORD *)v99 = 1;
      *(_QWORD *)(v99 + 8) = "startColorB";
      *(_QWORD *)(v99 + 16) = v98;
      *(_QWORD *)(v99 + 24) = 0;
      *(_QWORD *)(v99 + 32) = 0xA000000019;
      *(_DWORD *)(v99 + 40) = 0;
      *(_QWORD *)(v99 + 48) = 0;
      *(_QWORD *)(v99 + 56) = 0;
      *(_DWORD *)(v99 + 64) = 0;
      qword_255833B68 = v99;
      v100 = re::introspectionAllocator((re *)v99);
      v102 = re::introspect_BOOL((re *)1, v101);
      v103 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v100 + 32))(v100, 72, 8);
      *(_DWORD *)v103 = 1;
      *(_QWORD *)(v103 + 8) = "useStartColorRange";
      *(_QWORD *)(v103 + 16) = v102;
      *(_QWORD *)(v103 + 24) = 0;
      *(_QWORD *)(v103 + 32) = 0xB00000001ALL;
      *(_DWORD *)(v103 + 40) = 0;
      *(_QWORD *)(v103 + 48) = 0;
      *(_QWORD *)(v103 + 56) = 0;
      *(_DWORD *)(v103 + 64) = 0;
      qword_255833B70 = v103;
      v104 = re::introspectionAllocator((re *)v103);
      v105 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v106 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v104 + 32))(v104, 72, 8);
      *(_DWORD *)v106 = 1;
      *(_QWORD *)(v106 + 8) = "endColorA";
      *(_QWORD *)(v106 + 16) = v105;
      *(_QWORD *)(v106 + 24) = 0;
      *(_QWORD *)(v106 + 32) = 0xC00000001BLL;
      *(_DWORD *)(v106 + 40) = 0;
      *(_QWORD *)(v106 + 48) = 0;
      *(_QWORD *)(v106 + 56) = 0;
      *(_DWORD *)(v106 + 64) = 0;
      qword_255833B78 = v106;
      v107 = re::introspectionAllocator((re *)v106);
      v108 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v109 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v107 + 32))(v107, 72, 8);
      *(_DWORD *)v109 = 1;
      *(_QWORD *)(v109 + 8) = "endColorB";
      *(_QWORD *)(v109 + 16) = v108;
      *(_QWORD *)(v109 + 24) = 0;
      *(_QWORD *)(v109 + 32) = 0xD00000001CLL;
      *(_DWORD *)(v109 + 40) = 0;
      *(_QWORD *)(v109 + 48) = 0;
      *(_QWORD *)(v109 + 56) = 0;
      *(_DWORD *)(v109 + 64) = 0;
      qword_255833B80 = v109;
      v110 = re::introspectionAllocator((re *)v109);
      v112 = re::introspect_BOOL((re *)1, v111);
      v113 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 72, 8);
      *(_DWORD *)v113 = 1;
      *(_QWORD *)(v113 + 8) = "useEndColorRange";
      *(_QWORD *)(v113 + 16) = v112;
      *(_QWORD *)(v113 + 24) = 0;
      *(_QWORD *)(v113 + 32) = 0xE00000001DLL;
      *(_DWORD *)(v113 + 40) = 0;
      *(_QWORD *)(v113 + 48) = 0;
      *(_QWORD *)(v113 + 56) = 0;
      *(_DWORD *)(v113 + 64) = 0;
      qword_255833B88 = v113;
      v114 = re::introspectionAllocator((re *)v113);
      v116 = re::introspect_BOOL((re *)1, v115);
      v117 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 72, 8);
      *(_DWORD *)v117 = 1;
      *(_QWORD *)(v117 + 8) = "useEndColor";
      *(_QWORD *)(v117 + 16) = v116;
      *(_QWORD *)(v117 + 24) = 0;
      *(_QWORD *)(v117 + 32) = 0xE10000001ELL;
      *(_DWORD *)(v117 + 40) = 0;
      *(_QWORD *)(v117 + 48) = 0;
      *(_QWORD *)(v117 + 56) = 0;
      *(_DWORD *)(v117 + 64) = 0;
      qword_255833B90 = v117;
      v118 = re::introspectionAllocator((re *)v117);
      v120 = re::introspect_float((re *)1, v119);
      v121 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v118 + 32))(v118, 72, 8);
      *(_DWORD *)v121 = 1;
      *(_QWORD *)(v121 + 8) = "colorEvolutionPower";
      *(_QWORD *)(v121 + 16) = v120;
      *(_QWORD *)(v121 + 24) = 0;
      *(_QWORD *)(v121 + 32) = 0xE40000001FLL;
      *(_DWORD *)(v121 + 40) = 0;
      *(_QWORD *)(v121 + 48) = 0;
      *(_QWORD *)(v121 + 56) = 0;
      *(_DWORD *)(v121 + 64) = 0;
      qword_255833B98 = v121;
      v122 = re::introspectionAllocator((re *)v121);
      v124 = re::introspect_float((re *)1, v123);
      v125 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v122 + 32))(v122, 72, 8);
      *(_DWORD *)v125 = 1;
      *(_QWORD *)(v125 + 8) = "noiseStrength";
      *(_QWORD *)(v125 + 16) = v124;
      *(_QWORD *)(v125 + 24) = 0;
      *(_QWORD *)(v125 + 32) = 0xE800000020;
      *(_DWORD *)(v125 + 40) = 0;
      *(_QWORD *)(v125 + 48) = 0;
      *(_QWORD *)(v125 + 56) = 0;
      *(_DWORD *)(v125 + 64) = 0;
      qword_255833BA0 = v125;
      v126 = re::introspectionAllocator((re *)v125);
      v128 = re::introspect_float((re *)1, v127);
      v129 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v126 + 32))(v126, 72, 8);
      *(_DWORD *)v129 = 1;
      *(_QWORD *)(v129 + 8) = "noiseScale";
      *(_QWORD *)(v129 + 16) = v128;
      *(_QWORD *)(v129 + 24) = 0;
      *(_QWORD *)(v129 + 32) = 0xEC00000021;
      *(_DWORD *)(v129 + 40) = 0;
      *(_QWORD *)(v129 + 48) = 0;
      *(_QWORD *)(v129 + 56) = 0;
      *(_DWORD *)(v129 + 64) = 0;
      qword_255833BA8 = v129;
      v130 = re::introspectionAllocator((re *)v129);
      v132 = re::introspect_float((re *)1, v131);
      v133 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v130 + 32))(v130, 72, 8);
      *(_DWORD *)v133 = 1;
      *(_QWORD *)(v133 + 8) = "noiseAnimationSpeed";
      *(_QWORD *)(v133 + 16) = v132;
      *(_QWORD *)(v133 + 24) = 0;
      *(_QWORD *)(v133 + 32) = 0xF000000022;
      *(_DWORD *)(v133 + 40) = 0;
      *(_QWORD *)(v133 + 48) = 0;
      *(_QWORD *)(v133 + 56) = 0;
      *(_DWORD *)(v133 + 64) = 0;
      qword_255833BB0 = v133;
      v134 = re::introspectionAllocator((re *)v133);
      v136 = re::introspect_float((re *)1, v135);
      v137 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 72, 8);
      *(_DWORD *)v137 = 1;
      *(_QWORD *)(v137 + 8) = "radialGravityStrength";
      *(_QWORD *)(v137 + 16) = v136;
      *(_QWORD *)(v137 + 24) = 0;
      *(_QWORD *)(v137 + 32) = 0xF400000023;
      *(_DWORD *)(v137 + 40) = 0;
      *(_QWORD *)(v137 + 48) = 0;
      *(_QWORD *)(v137 + 56) = 0;
      *(_DWORD *)(v137 + 64) = 0;
      qword_255833BB8 = v137;
      v138 = re::introspectionAllocator((re *)v137);
      v139 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v140 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v138 + 32))(v138, 72, 8);
      *(_DWORD *)v140 = 1;
      *(_QWORD *)(v140 + 8) = "radialGravityCenter";
      *(_QWORD *)(v140 + 16) = v139;
      *(_QWORD *)(v140 + 24) = 0;
      *(_QWORD *)(v140 + 32) = 0x10000000024;
      *(_DWORD *)(v140 + 40) = 0;
      *(_QWORD *)(v140 + 48) = 0;
      *(_QWORD *)(v140 + 56) = 0;
      *(_DWORD *)(v140 + 64) = 0;
      qword_255833BC0 = v140;
      v141 = re::introspectionAllocator((re *)v140);
      v143 = re::introspect_float((re *)1, v142);
      v144 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v141 + 32))(v141, 72, 8);
      *(_DWORD *)v144 = 1;
      *(_QWORD *)(v144 + 8) = "vortexStrength";
      *(_QWORD *)(v144 + 16) = v143;
      *(_QWORD *)(v144 + 24) = 0;
      *(_QWORD *)(v144 + 32) = 0x11000000025;
      *(_DWORD *)(v144 + 40) = 0;
      *(_QWORD *)(v144 + 48) = 0;
      *(_QWORD *)(v144 + 56) = 0;
      *(_DWORD *)(v144 + 64) = 0;
      qword_255833BC8 = v144;
      v145 = re::introspectionAllocator((re *)v144);
      v146 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v147 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v145 + 32))(v145, 72, 8);
      *(_DWORD *)v147 = 1;
      *(_QWORD *)(v147 + 8) = "vortexDirection";
      *(_QWORD *)(v147 + 16) = v146;
      *(_QWORD *)(v147 + 24) = 0;
      *(_QWORD *)(v147 + 32) = 0x12000000026;
      *(_DWORD *)(v147 + 40) = 0;
      *(_QWORD *)(v147 + 48) = 0;
      *(_QWORD *)(v147 + 56) = 0;
      *(_DWORD *)(v147 + 64) = 0;
      qword_255833BD0 = v147;
      v148 = re::introspectionAllocator((re *)v147);
      v150 = re::introspect_BOOL((re *)1, v149);
      v151 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v148 + 32))(v148, 72, 8);
      *(_DWORD *)v151 = 1;
      *(_QWORD *)(v151 + 8) = "isLightingEnabled";
      *(_QWORD *)(v151 + 16) = v150;
      *(_QWORD *)(v151 + 24) = 0;
      *(_QWORD *)(v151 + 32) = 0x13000000027;
      *(_DWORD *)(v151 + 40) = 0;
      *(_QWORD *)(v151 + 48) = 0;
      *(_QWORD *)(v151 + 56) = 0;
      *(_DWORD *)(v151 + 64) = 0;
      qword_255833BD8 = v151;
      v152 = re::introspectionAllocator((re *)v151);
      v154 = re::introspect_float((re *)1, v153);
      v155 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v152 + 32))(v152, 72, 8);
      *(_DWORD *)v155 = 1;
      *(_QWORD *)(v155 + 8) = "stretchFactor";
      *(_QWORD *)(v155 + 16) = v154;
      *(_QWORD *)(v155 + 24) = 0;
      *(_QWORD *)(v155 + 32) = 0x13400000028;
      *(_DWORD *)(v155 + 40) = 0;
      *(_QWORD *)(v155 + 48) = 0;
      *(_QWORD *)(v155 + 56) = 0;
      *(_DWORD *)(v155 + 64) = 0;
      qword_255833BE0 = v155;
      v156 = re::introspectionAllocator((re *)v155);
      re::ecs2::introspect_ParticleSortOrder((re::ecs2 *)v156, v157);
      v158 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v156 + 32))(v156, 72, 8);
      *(_DWORD *)v158 = 1;
      *(_QWORD *)(v158 + 8) = "sortOrder";
      *(_QWORD *)(v158 + 16) = &qword_255833690;
      *(_QWORD *)(v158 + 24) = 0;
      *(_QWORD *)(v158 + 32) = 0x13800000029;
      *(_DWORD *)(v158 + 40) = 0;
      *(_QWORD *)(v158 + 48) = 0;
      *(_QWORD *)(v158 + 56) = 0;
      *(_DWORD *)(v158 + 64) = 0;
      qword_255833BE8 = v158;
      v159 = re::introspectionAllocator((re *)v158);
      re::ecs2::introspect_ParticleBlendMode((re::ecs2 *)v159, v160);
      v161 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v159 + 32))(v159, 72, 8);
      *(_DWORD *)v161 = 1;
      *(_QWORD *)(v161 + 8) = "blendMode";
      *(_QWORD *)(v161 + 16) = &qword_2558336D8;
      *(_QWORD *)(v161 + 24) = 0;
      *(_QWORD *)(v161 + 32) = 0x13C0000002ALL;
      *(_DWORD *)(v161 + 40) = 0;
      *(_QWORD *)(v161 + 48) = 0;
      *(_QWORD *)(v161 + 56) = 0;
      *(_DWORD *)(v161 + 64) = 0;
      qword_255833BF0 = v161;
      v162 = re::introspectionAllocator((re *)v161);
      v164 = re::introspect_AssetHandle((re *)1, v163);
      v165 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v162 + 32))(v162, 72, 8);
      *(_DWORD *)v165 = 1;
      *(_QWORD *)(v165 + 8) = "particleImage";
      *(_QWORD *)(v165 + 16) = v164;
      *(_QWORD *)(v165 + 24) = 0;
      *(_QWORD *)(v165 + 32) = 0x1400000002BLL;
      *(_DWORD *)(v165 + 40) = 0;
      *(_QWORD *)(v165 + 48) = 0;
      *(_QWORD *)(v165 + 56) = 0;
      *(_DWORD *)(v165 + 64) = 0;
      qword_255833BF8 = v165;
      v166 = re::introspectionAllocator((re *)v165);
      v168 = re::introspect_BOOL((re *)1, v167);
      v169 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v166 + 32))(v166, 72, 8);
      *(_DWORD *)v169 = 1;
      *(_QWORD *)(v169 + 8) = "isAnimated";
      *(_QWORD *)(v169 + 16) = v168;
      *(_QWORD *)(v169 + 24) = 0;
      *(_QWORD *)(v169 + 32) = 0x1580000002CLL;
      *(_DWORD *)(v169 + 40) = 0;
      *(_QWORD *)(v169 + 48) = 0;
      *(_QWORD *)(v169 + 56) = 0;
      *(_DWORD *)(v169 + 64) = 0;
      qword_255833C00 = v169;
      v170 = re::introspectionAllocator((re *)v169);
      v172 = re::introspect_int64_t((re *)1, v171);
      v173 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v170 + 32))(v170, 72, 8);
      *(_DWORD *)v173 = 1;
      *(_QWORD *)(v173 + 8) = "rowCount";
      *(_QWORD *)(v173 + 16) = v172;
      *(_QWORD *)(v173 + 24) = 0;
      *(_QWORD *)(v173 + 32) = 0x1600000002DLL;
      *(_DWORD *)(v173 + 40) = 0;
      *(_QWORD *)(v173 + 48) = 0;
      *(_QWORD *)(v173 + 56) = 0;
      *(_DWORD *)(v173 + 64) = 0;
      qword_255833C08 = v173;
      v174 = re::introspectionAllocator((re *)v173);
      v176 = re::introspect_int64_t((re *)1, v175);
      v177 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v174 + 32))(v174, 72, 8);
      *(_DWORD *)v177 = 1;
      *(_QWORD *)(v177 + 8) = "columnCount";
      *(_QWORD *)(v177 + 16) = v176;
      *(_QWORD *)(v177 + 24) = 0;
      *(_QWORD *)(v177 + 32) = 0x1680000002ELL;
      *(_DWORD *)(v177 + 40) = 0;
      *(_QWORD *)(v177 + 48) = 0;
      *(_QWORD *)(v177 + 56) = 0;
      *(_DWORD *)(v177 + 64) = 0;
      qword_255833C10 = v177;
      v178 = re::introspectionAllocator((re *)v177);
      v180 = re::introspect_int64_t((re *)1, v179);
      v181 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v178 + 32))(v178, 72, 8);
      *(_DWORD *)v181 = 1;
      *(_QWORD *)(v181 + 8) = "initialFrame";
      *(_QWORD *)(v181 + 16) = v180;
      *(_QWORD *)(v181 + 24) = 0;
      *(_QWORD *)(v181 + 32) = 0x1700000002FLL;
      *(_DWORD *)(v181 + 40) = 0;
      *(_QWORD *)(v181 + 48) = 0;
      *(_QWORD *)(v181 + 56) = 0;
      *(_DWORD *)(v181 + 64) = 0;
      qword_255833C18 = v181;
      v182 = re::introspectionAllocator((re *)v181);
      v184 = re::introspect_int64_t((re *)1, v183);
      v185 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v182 + 32))(v182, 72, 8);
      *(_DWORD *)v185 = 1;
      *(_QWORD *)(v185 + 8) = "initialFrameVariation";
      *(_QWORD *)(v185 + 16) = v184;
      *(_QWORD *)(v185 + 24) = 0;
      *(_QWORD *)(v185 + 32) = 0x17800000030;
      *(_DWORD *)(v185 + 40) = 0;
      *(_QWORD *)(v185 + 48) = 0;
      *(_QWORD *)(v185 + 56) = 0;
      *(_DWORD *)(v185 + 64) = 0;
      qword_255833C20 = v185;
      v186 = re::introspectionAllocator((re *)v185);
      v188 = re::introspect_float((re *)1, v187);
      v189 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v186 + 32))(v186, 72, 8);
      *(_DWORD *)v189 = 1;
      *(_QWORD *)(v189 + 8) = "frameRate";
      *(_QWORD *)(v189 + 16) = v188;
      *(_QWORD *)(v189 + 24) = 0;
      *(_QWORD *)(v189 + 32) = 0x18000000031;
      *(_DWORD *)(v189 + 40) = 0;
      *(_QWORD *)(v189 + 48) = 0;
      *(_QWORD *)(v189 + 56) = 0;
      *(_DWORD *)(v189 + 64) = 0;
      qword_255833C28 = v189;
      v190 = re::introspectionAllocator((re *)v189);
      v192 = re::introspect_float((re *)1, v191);
      v193 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v190 + 32))(v190, 72, 8);
      *(_DWORD *)v193 = 1;
      *(_QWORD *)(v193 + 8) = "frameRateVariation";
      *(_QWORD *)(v193 + 16) = v192;
      *(_QWORD *)(v193 + 24) = 0;
      *(_QWORD *)(v193 + 32) = 0x18400000032;
      *(_DWORD *)(v193 + 40) = 0;
      *(_QWORD *)(v193 + 48) = 0;
      *(_QWORD *)(v193 + 56) = 0;
      *(_DWORD *)(v193 + 64) = 0;
      qword_255833C30 = v193;
      v194 = re::introspectionAllocator((re *)v193);
      re::ecs2::introspect_ParticleAnimationRepeatMode((re::ecs2 *)v194, v195);
      v196 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v194 + 32))(v194, 72, 8);
      *(_DWORD *)v196 = 1;
      *(_QWORD *)(v196 + 8) = "animationRepeatMode";
      *(_QWORD *)(v196 + 16) = &qword_255833720;
      *(_QWORD *)(v196 + 24) = 0;
      *(_QWORD *)(v196 + 32) = 0x18800000033;
      *(_DWORD *)(v196 + 40) = 0;
      *(_QWORD *)(v196 + 48) = 0;
      *(_QWORD *)(v196 + 56) = 0;
      *(_DWORD *)(v196 + 64) = 0;
      qword_255833C38 = v196;
      v197 = re::introspectionAllocator((re *)v196);
      v199 = re::introspect_BOOL((re *)1, v198);
      v200 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v197 + 32))(v197, 72, 8);
      *(_DWORD *)v200 = 1;
      *(_QWORD *)(v200 + 8) = "collisions";
      *(_QWORD *)(v200 + 16) = v199;
      *(_QWORD *)(v200 + 24) = 0;
      *(_QWORD *)(v200 + 32) = 0x18C00000034;
      *(_DWORD *)(v200 + 40) = 0;
      *(_QWORD *)(v200 + 48) = 0;
      *(_QWORD *)(v200 + 56) = 0;
      *(_DWORD *)(v200 + 64) = 0;
      qword_255833C40 = v200;
      __cxa_guard_release(&qword_2558332C8);
    }
  }
  *((_QWORD *)this + 2) = 0x19000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 52;
  *((_QWORD *)this + 8) = &qword_255833AA8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ParticleEmitter>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ParticleEmitter>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ParticleEmitter>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ParticleEmitter>;
  re::IntrospectionRegistry::add(this, v3);
  v201 = v203;
}

double re::internal::defaultConstruct<re::ecs2::ParticleEmitter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = 1120403456;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 20) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  *(_QWORD *)(a3 + 32) = 1017370378;
  *(_DWORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_2260E5F20;
  *(_QWORD *)(a3 + 64) = 0x3F80000000000000;
  *(_DWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = xmmword_226120530;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 1050253722;
  *(_DWORD *)(a3 + 120) = 3;
  *(_QWORD *)(a3 + 124) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)(a3 + 144) = xmmword_226120540;
  *(_OWORD *)(a3 + 160) = xmmword_226120550;
  *(_BYTE *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 192) = xmmword_226120560;
  *(_OWORD *)(a3 + 208) = xmmword_226120570;
  *(_WORD *)(a3 + 224) = 256;
  *(_OWORD *)(a3 + 228) = xmmword_226120580;
  *(_DWORD *)(a3 + 244) = 0;
  *(_OWORD *)(a3 + 256) = xmmword_2260FD430;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 288) = xmmword_2260E5F20;
  *(_BYTE *)(a3 + 304) = 0;
  *(_QWORD *)(a3 + 337) = 0;
  *(_OWORD *)(a3 + 308) = 0u;
  *(_OWORD *)(a3 + 324) = 0u;
  *(int64x2_t *)(a3 + 352) = vdupq_n_s64(3uLL);
  *(_QWORD *)(a3 + 368) = 0;
  *(_QWORD *)(a3 + 376) = 0;
  *(_QWORD *)&result = 1091567616;
  *(_QWORD *)(a3 + 384) = 1091567616;
  *(_DWORD *)(a3 + 392) = 1;
  *(_BYTE *)(a3 + 396) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::ParticleEmitter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 320));
}

double re::internal::defaultConstructV2<re::ecs2::ParticleEmitter>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 1120403456;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = 1017370378;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_2260E5F20;
  *(_QWORD *)(a1 + 64) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_226120530;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 1050253722;
  *(_DWORD *)(a1 + 120) = 3;
  *(_QWORD *)(a1 + 124) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)(a1 + 144) = xmmword_226120540;
  *(_OWORD *)(a1 + 160) = xmmword_226120550;
  *(_BYTE *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_226120560;
  *(_OWORD *)(a1 + 208) = xmmword_226120570;
  *(_WORD *)(a1 + 224) = 256;
  *(_OWORD *)(a1 + 228) = xmmword_226120580;
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_2260FD430;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 288) = xmmword_2260E5F20;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 337) = 0;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(int64x2_t *)(a1 + 352) = vdupq_n_s64(3uLL);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)&result = 1091567616;
  *(_QWORD *)(a1 + 384) = 1091567616;
  *(_DWORD *)(a1 + 392) = 1;
  *(_BYTE *)(a1 + 396) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::ParticleEmitter>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 320));
}

double re::internal::defaultConstruct<re::ecs2::VFXEmitterComponentState>(int a1, int a2, re::ecs2::VFXEmitterComponentState *this)
{
  return re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState(this);
}

void re::internal::defaultDestruct<re::ecs2::VFXEmitterComponentState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 + 1040);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 1072))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 1072) = 0;
    *(_QWORD *)(a3 + 1048) = 0;
    *(_QWORD *)(a3 + 1056) = 0;
    *(_QWORD *)(a3 + 1040) = 0;
    ++*(_DWORD *)(a3 + 1064);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 960));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 560));
}

void re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponentState>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 1040);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 1072))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 1072) = 0;
    *(_QWORD *)(a1 + 1048) = 0;
    *(_QWORD *)(a1 + 1056) = 0;
    *(_QWORD *)(a1 + 1040) = 0;
    ++*(_DWORD *)(a1 + 1064);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 960));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 560));
}

double re::internal::defaultConstruct<re::ecs2::ParticleEmitterCollisionPlane>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_QWORD *)(a3 + 80) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::ParticleEmitterCollisionPlane>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t *re::ecs2::allocInfo_VFXEmitterComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255833310);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255833310))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255833918, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_255833928 = 0;
    qword_255833938 = 0;
    qword_255833940 = 0xFFFFFFFFLL;
    qword_255833918 = (uint64_t)&off_24ED7DAA8;
    qword_255833948 = (uint64_t)"VFXEmitterComponent";
    dword_255833950 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_255833988 = 0;
    __cxa_guard_release(&qword_255833310);
  }
  return &qword_255833918;
}

void re::ecs2::initInfo_VFXEmitterComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  re *v17;
  uint64_t *v18;
  unint64_t mm;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  void *v41;
  uint64_t v42;
  const re::IntrospectionBase *v43;
  uint64_t *v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  __guard *v47;
  void **v48;
  unsigned int *v49;
  _anonymous_namespace_ *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const re::IntrospectionBase *v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int *v73;
  _anonymous_namespace_ *v74;
  unint64_t v75;
  unint64_t jj;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  unint64_t kk;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char v88;
  unsigned __int8 *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  const re::IntrospectionBase *v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int *v102;
  _anonymous_namespace_ *v103;
  unint64_t v104;
  unint64_t n;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char v109;
  unsigned __int8 *v110;
  int v111;
  uint64_t v112;
  unint64_t ii;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char v117;
  unsigned __int8 *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  const re::IntrospectionBase *v127;
  void *v128;
  uint64_t v129;
  uint64_t *v130;
  const re::IntrospectionBase *v131;
  void *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  const re::IntrospectionBase *v138;
  void *v139;
  uint64_t v140;
  const re::IntrospectionBase *v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  __guard *v144;
  uint64_t *v145;
  uint64_t v146;
  unsigned int *v147;
  _anonymous_namespace_ *v148;
  unint64_t v149;
  unint64_t i;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char v154;
  unsigned __int8 *v155;
  int v156;
  uint64_t v157;
  unint64_t j;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char v162;
  unsigned __int8 *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  const re::IntrospectionBase *v169;
  void *v170;
  uint64_t v171;
  uint64_t *v172;
  const re::IntrospectionBase *v173;
  void *v174;
  uint64_t v175;
  uint64_t *v176;
  const re::IntrospectionBase *v177;
  void *v178;
  uint64_t v179;
  uint64_t *v180;
  const re::IntrospectionBase *v181;
  void *v182;
  uint64_t v183;
  uint64_t *v184;
  const re::IntrospectionBase *v185;
  void *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  re::IntrospectionBase *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  re::IntrospectionBase *v196;
  uint64_t v197;
  const re::IntrospectionBase *v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  uint64_t *v201;
  uint64_t v202;
  unsigned int *v203;
  _anonymous_namespace_ *v204;
  unint64_t v205;
  unint64_t k;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char v210;
  unsigned __int8 *v211;
  int v212;
  uint64_t v213;
  unint64_t m;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char v218;
  unsigned __int8 *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  const re::IntrospectionBase *v225;
  void *v226;
  uint64_t v227;
  uint64_t *v228;
  const re::IntrospectionBase *v229;
  void *v230;
  uint64_t v231;
  uint64_t *v232;
  const re::IntrospectionBase *v233;
  void *v234;
  uint64_t v235;
  uint64_t *v236;
  const re::IntrospectionBase *v237;
  void *v238;
  uint64_t v239;
  uint64_t *v240;
  const re::IntrospectionBase *v241;
  void *v242;
  uint64_t v243;
  uint64_t *v244;
  const re::IntrospectionBase *v245;
  void *v246;
  uint64_t v247;
  uint64_t *v248;
  const re::IntrospectionBase *v249;
  void *v250;
  uint64_t v251;
  uint64_t *v252;
  const re::IntrospectionBase *v253;
  void *v254;
  uint64_t v255;
  uint64_t *v256;
  const re::IntrospectionBase *v257;
  void *v258;
  uint64_t v259;
  unsigned __int8 v260;
  uint64_t *v261;
  unsigned __int8 v262;
  const re::IntrospectionBase *v263;
  unsigned __int8 v264;
  int v265;
  re::IntrospectionRegistry *v266;
  const re::IntrospectionBase *v267;
  const char *v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  const re::IntrospectionBase *v274;
  void *v275;
  uint64_t v276;
  re *v277;
  uint64_t *v278;
  re *v279;
  uint64_t *v280;
  re *v281;
  uint64_t *v282;
  re *v283;
  uint64_t *v284;
  re *v285;
  uint64_t *v286;
  re *v287;
  uint64_t *v288;
  re *v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  re *v293;
  uint64_t *v294;
  re *v295;
  uint64_t *v296;
  re *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  re *v301;
  uint64_t *v302;
  re *v303;
  uint64_t *v304;
  re *v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  re *v309;
  uint64_t *v310;
  re *v311;
  uint64_t *v312;
  re *v313;
  uint64_t *v314;
  re *v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  re *v319;
  uint64_t *v320;
  re *v321;
  uint64_t *v322;
  re *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  re *v329;
  uint64_t *v330;
  const re::IntrospectionBase *v331;
  void *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  StringID v345;
  __int128 v346;
  __int128 v347;
  const char *v348;

  *(_QWORD *)&v347 = 0x1AEFD3A8FE0F79EELL;
  *((_QWORD *)&v347 + 1) = "VFXEmitterComponent";
  re::StringID::destroyString((re::StringID *)&v347);
  *((_OWORD *)this + 2) = v341;
  v4 = atomic_load((unsigned __int8 *)&qword_255833308);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_255833308);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_255833320 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = (uint64_t *)qword_2558332E8;
      if (qword_2558332E8)
      {
LABEL_8:
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "currentState";
        *(_QWORD *)(v15 + 16) = v10;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 0x3000000001;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_255833328 = v15;
        __cxa_guard_release(&qword_255833308);
        goto LABEL_2;
      }
      v11 = atomic_load((unsigned __int8 *)&qword_2558332D8);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2558332D8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255833828, 0);
        *(_QWORD *)(v16 + 22) = 0;
        qword_255833838 = 0;
        *(_QWORD *)&xmmword_255833848 = 0;
        *((_QWORD *)&xmmword_255833848 + 1) = 0xFFFFFFFFLL;
        qword_255833828 = (uint64_t)&off_24ED7DAA8;
        qword_255833858 = (uint64_t)"VFXEmitterComponentState";
        dword_255833860 = 0;
        xmmword_255833868 = 0u;
        xmmword_255833878 = 0u;
        xmmword_255833888 = 0u;
        qword_255833898 = 0;
        __cxa_guard_release(&qword_2558332D8);
      }
      qword_2558332E8 = (uint64_t)&qword_255833828;
      *(_QWORD *)&v347 = 0x915BBEAE8D6533B4;
      *((_QWORD *)&v347 + 1) = "VFXEmitterComponentState";
      re::StringID::destroyString((re::StringID *)&v347);
      xmmword_255833848 = v342;
      v14 = atomic_load((unsigned __int8 *)&qword_2558332E0);
      if ((v14 & 1) != 0 || (v17 = (re *)__cxa_guard_acquire(&qword_2558332E0), !(_DWORD)v17))
      {
LABEL_7:
        v10 = &qword_255833828;
        qword_255833838 = 0x44000000008;
        dword_255833840 = 16;
        word_255833844 = 0;
        dword_255833860 = 35;
        *(_QWORD *)&xmmword_255833868 = &qword_255833990;
        *((_QWORD *)&xmmword_255833868 + 1) = re::internal::defaultConstruct<re::ecs2::VFXEmitterComponentState>;
        *(_QWORD *)&xmmword_255833878 = re::internal::defaultDestruct<re::ecs2::VFXEmitterComponentState>;
        *((_QWORD *)&xmmword_255833878 + 1) = 0;
        *(_QWORD *)&xmmword_255833888 = 0;
        *((_QWORD *)&xmmword_255833888 + 1) = re::internal::defaultConstructV2<re::ecs2::VFXEmitterComponentState>;
        qword_255833898 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponentState>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833828, v13);
        v347 = v342;
        goto LABEL_8;
      }
      v18 = re::introspectionAllocator(v17);
      LOWORD(mm) = 1;
      v21 = re::introspect_double((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "emissionDuration";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 1;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_255833990 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_double((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "emissionDurationVariation";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x800000002;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_255833998 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_double((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "idleDuration";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x1000000003;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2558339A0 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::introspect_double((re *)1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "idleDurationVariation";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x1800000004;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_2558339A8 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::introspect_double((re *)1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "warmupDuration";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x2000000005;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2558339B0 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::introspect_BOOL((re *)1, v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = "loops";
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0x2800000006;
      *(_DWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_2558339B8 = v42;
      v44 = re::introspectionAllocator((re *)v42);
      v45 = atomic_load((unsigned __int8 *)&qword_255833220);
      if ((v45 & 1) == 0)
      {
        v277 = (re *)__cxa_guard_acquire(&qword_255833220);
        if ((_DWORD)v277)
        {
          v278 = re::introspectionAllocator(v277);
          v279 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v278 + 32))(v278, 24, 8);
          LOWORD(mm) = 1;
          *(_DWORD *)v279 = 1;
          *((_QWORD *)v279 + 1) = 0;
          *((_QWORD *)v279 + 2) = "Point";
          qword_2558333F8 = (uint64_t)v279;
          v280 = re::introspectionAllocator(v279);
          v281 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v280 + 32))(v280, 24, 8);
          *(_DWORD *)v281 = 1;
          *((_QWORD *)v281 + 1) = 1;
          *((_QWORD *)v281 + 2) = "Sphere";
          qword_255833400 = (uint64_t)v281;
          v282 = re::introspectionAllocator(v281);
          v283 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v282 + 32))(v282, 24, 8);
          *(_DWORD *)v283 = 1;
          *((_QWORD *)v283 + 1) = 2;
          *((_QWORD *)v283 + 2) = "Box";
          qword_255833408 = (uint64_t)v283;
          v284 = re::introspectionAllocator(v283);
          v285 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v284 + 32))(v284, 24, 8);
          *(_DWORD *)v285 = 1;
          *((_QWORD *)v285 + 1) = 3;
          *((_QWORD *)v285 + 2) = "Cylinder";
          qword_255833410 = (uint64_t)v285;
          v286 = re::introspectionAllocator(v285);
          v287 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v286 + 32))(v286, 24, 8);
          *(_DWORD *)v287 = 1;
          *((_QWORD *)v287 + 1) = 4;
          *((_QWORD *)v287 + 2) = "Plane";
          qword_255833418 = (uint64_t)v287;
          v288 = re::introspectionAllocator(v287);
          v289 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v288 + 32))(v288, 24, 8);
          *(_DWORD *)v289 = 1;
          *((_QWORD *)v289 + 1) = 5;
          *((_QWORD *)v289 + 2) = "Torus";
          qword_255833420 = (uint64_t)v289;
          v290 = re::introspectionAllocator(v289);
          v291 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v290 + 32))(v290, 24, 8);
          *(_DWORD *)v291 = 1;
          *(_QWORD *)(v291 + 8) = 6;
          *(_QWORD *)(v291 + 16) = "Cone";
          qword_255833428 = v291;
          __cxa_guard_release(&qword_255833220);
        }
      }
      v46 = atomic_load((unsigned __int8 *)&qword_255833228);
      if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255833228))
      {
        re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2558334E0, "EmitterShape", 4, 4, 1, 1);
        qword_2558334E0 = (uint64_t)&off_24ED7D9E8;
        qword_255833520 = (uint64_t)&_MergedGlobals_9;
        dword_2558334F0 = 9;
        __cxa_guard_release(&qword_255833228);
      }
      if ((_MergedGlobals_237 & 1) == 0)
      {
        _MergedGlobals_237 = 1;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558334E0, v43);
        v47 = (__guard *)"EmitterShape";
        *(_QWORD *)&v344 = 0x333860152317D9E6;
        *((_QWORD *)&v344 + 1) = "EmitterShape";
        *(_QWORD *)&v347 = 208862;
        *((_QWORD *)&v347 + 1) = "int";
        v48 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v347);
        if (!v48)
        {
          re::StringID::destroyString((re::StringID *)&v347);
          re::internal::assertLog((re::internal *)5, v292, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "EmitterShape");
          _os_crash();
          __break(1u);
LABEL_183:
          v293 = (re *)__cxa_guard_acquire(v47);
          if ((_DWORD)v293)
          {
            v294 = re::introspectionAllocator(v293);
            v295 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v294 + 32))(v294, 24, 8);
            LOWORD(mm) = 1;
            *(_DWORD *)v295 = 1;
            *((_QWORD *)v295 + 1) = 0;
            *((_QWORD *)v295 + 2) = "Surface";
            v47[32] = (__guard)v295;
            v296 = re::introspectionAllocator(v295);
            v297 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v296 + 32))(v296, 24, 8);
            *(_DWORD *)v297 = 1;
            *((_QWORD *)v297 + 1) = 1;
            *((_QWORD *)v297 + 2) = "Volume";
            v47[33] = (__guard)v297;
            v298 = re::introspectionAllocator(v297);
            v299 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v298 + 32))(v298, 24, 8);
            *(_DWORD *)v299 = 1;
            *(_QWORD *)(v299 + 8) = 2;
            *(_QWORD *)(v299 + 16) = "Vertices";
            v47[34] = v299;
            __cxa_guard_release(v47);
          }
LABEL_42:
          v70 = atomic_load((unsigned __int8 *)&qword_255833238);
          if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_255833238))
          {
            re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255833528, "BirthLocation", 4, 4, 1, 1);
            qword_255833528 = (uint64_t)&off_24ED7D9E8;
            qword_255833568 = (uint64_t)&unk_2540F7C20;
            dword_255833538 = 9;
            __cxa_guard_release(&qword_255833238);
          }
          if ((byte_255833211 & 1) == 0)
          {
            byte_255833211 = 1;
            re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833528, v68);
            *(_QWORD *)&v344 = 0xEF9FC6F8AB74F2E8;
            *((_QWORD *)&v344 + 1) = "BirthLocation";
            *(_QWORD *)&v347 = 208862;
            *((_QWORD *)&v347 + 1) = "int";
            v71 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v347);
            if (!v71)
            {
              re::StringID::destroyString((re::StringID *)&v347);
              re::internal::assertLog((re::internal *)5, v300, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BirthLocation");
              _os_crash();
              __break(1u);
LABEL_188:
              v301 = (re *)__cxa_guard_acquire(&qword_255833240);
              if ((_DWORD)v301)
              {
                v302 = re::introspectionAllocator(v301);
                v303 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v302 + 32))(v302, 24, 8);
                LOWORD(mm) = 1;
                *(_DWORD *)v303 = 1;
                *((_QWORD *)v303 + 1) = 0;
                *((_QWORD *)v303 + 2) = "Constant";
                qword_255833348 = (uint64_t)v303;
                v304 = re::introspectionAllocator(v303);
                v305 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v304 + 32))(v304, 24, 8);
                *(_DWORD *)v305 = 1;
                *((_QWORD *)v305 + 1) = 1;
                *((_QWORD *)v305 + 2) = "Local";
                qword_255833350 = (uint64_t)v305;
                v306 = re::introspectionAllocator(v305);
                v307 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v306 + 32))(v306, 24, 8);
                *(_DWORD *)v307 = 1;
                *(_QWORD *)(v307 + 8) = 2;
                *(_QWORD *)(v307 + 16) = "Normal";
                qword_255833358 = v307;
                __cxa_guard_release(&qword_255833240);
              }
LABEL_71:
              v99 = atomic_load((unsigned __int8 *)&qword_255833248);
              if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_255833248))
              {
                re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255833570, "BirthDirection", 4, 4, 1, 1);
                qword_255833570 = (uint64_t)&off_24ED7D9E8;
                qword_2558335B0 = (uint64_t)&unk_2540F7C30;
                dword_255833580 = 9;
                __cxa_guard_release(&qword_255833248);
              }
              if ((byte_255833212 & 1) == 0)
              {
                byte_255833212 = 1;
                re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833570, v97);
                *(_QWORD *)&v344 = 0x4590B6CDF20CB40;
                *((_QWORD *)&v344 + 1) = "BirthDirection";
                *(_QWORD *)&v347 = 208862;
                *((_QWORD *)&v347 + 1) = "int";
                v100 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v347);
                if (!v100)
                {
                  re::StringID::destroyString((re::StringID *)&v347);
                  re::internal::assertLog((re::internal *)5, v308, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BirthDirection");
                  _os_crash();
                  __break(1u);
LABEL_193:
                  v309 = (re *)__cxa_guard_acquire(&qword_255833260);
                  if ((_DWORD)v309)
                  {
                    v310 = re::introspectionAllocator(v309);
                    v311 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v310 + 32))(v310, 24, 8);
                    LOWORD(mm) = 1;
                    *(_DWORD *)v311 = 1;
                    *((_QWORD *)v311 + 1) = 0;
                    *((_QWORD *)v311 + 2) = "OnBirth";
                    qword_2558333D8 = (uint64_t)v311;
                    v312 = re::introspectionAllocator(v311);
                    v313 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v312 + 32))(v312, 24, 8);
                    *(_DWORD *)v313 = 1;
                    *((_QWORD *)v313 + 1) = 2;
                    *((_QWORD *)v313 + 2) = "OnUpdate";
                    qword_2558333E0 = (uint64_t)v313;
                    v314 = re::introspectionAllocator(v313);
                    v315 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v314 + 32))(v314, 24, 8);
                    *(_DWORD *)v315 = 1;
                    *((_QWORD *)v315 + 1) = 1;
                    *((_QWORD *)v315 + 2) = "OnDeath";
                    qword_2558333E8 = (uint64_t)v315;
                    v316 = re::introspectionAllocator(v315);
                    v317 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v316 + 32))(v316, 24, 8);
                    *(_DWORD *)v317 = 1;
                    *(_QWORD *)(v317 + 8) = 3;
                    *(_QWORD *)(v317 + 16) = "OnCollide";
                    qword_2558333F0 = v317;
                    __cxa_guard_release(&qword_255833260);
                  }
LABEL_100:
                  v143 = atomic_load((unsigned __int8 *)&qword_255833268);
                  if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_255833268))
                  {
                    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255833600, "SpawnOccasion", 4, 4, 1, 1);
                    qword_255833600 = (uint64_t)&off_24ED7D9E8;
                    qword_255833640 = (uint64_t)&unk_2540F7C40;
                    dword_255833610 = 9;
                    __cxa_guard_release(&qword_255833268);
                  }
                  if ((byte_255833214 & 1) == 0)
                  {
                    byte_255833214 = 1;
                    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833600, v141);
                    v144 = (__guard *)"SpawnOccasion";
                    *(_QWORD *)&v344 = 0x67D4B61924D18EC4;
                    *((_QWORD *)&v344 + 1) = "SpawnOccasion";
                    *(_QWORD *)&v347 = 208862;
                    *((_QWORD *)&v347 + 1) = "int";
                    v145 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v347);
                    if (!v145)
                    {
                      re::StringID::destroyString((re::StringID *)&v347);
                      re::internal::assertLog((re::internal *)5, v318, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SpawnOccasion");
                      _os_crash();
                      __break(1u);
                      goto LABEL_198;
                    }
                    v146 = *v145;
                    re::StringID::destroyString((re::StringID *)&v347);
                    v147 = (unsigned int *)qword_255833640;
                    *((_QWORD *)&v346 + 1) = v146;
                    re::TypeBuilder::beginEnumType((uint64_t)&v347, (uint64_t *)&v344, 1, 1, (uint64_t)&v346);
                    v149 = *v147;
                    if ((_DWORD)v149)
                    {
                      for (i = 0; i < v149; ++i)
                      {
                        v151 = *(_QWORD *)(*((_QWORD *)v147 + 1) + 8 * i);
                        if (*(_DWORD *)v151 == 1)
                        {
                          v152 = *(char **)(v151 + 16);
                          if (v152)
                          {
                            v153 = *v152;
                            if (*v152)
                            {
                              v154 = v152[1];
                              if (v154)
                              {
                                v155 = (unsigned __int8 *)(v152 + 2);
                                do
                                {
                                  v153 = 31 * v153 + v154;
                                  v156 = *v155++;
                                  v154 = v156;
                                }
                                while (v156);
                              }
                            }
                          }
                          else
                          {
                            v153 = 0;
                          }
                          v157 = *(_QWORD *)(v151 + 8);
                          *(_QWORD *)&v345.var0 = 2 * v153;
                          v345.var1 = v152;
                          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v347, v157, &v345);
                          re::StringID::destroyString((re::StringID *)&v345);
                          v149 = *v147;
                        }
                      }
                      if (v149)
                      {
                        for (j = 0; j < v149; ++j)
                        {
                          v159 = *(_QWORD *)(*((_QWORD *)v147 + 1) + 8 * j);
                          if (*(_DWORD *)v159 == 2)
                          {
                            v160 = *(char **)(v159 + 16);
                            if (v160)
                            {
                              v161 = *v160;
                              if (*v160)
                              {
                                v162 = v160[1];
                                if (v162)
                                {
                                  v163 = (unsigned __int8 *)(v160 + 2);
                                  do
                                  {
                                    v161 = 31 * v161 + v162;
                                    v164 = *v163++;
                                    v162 = v164;
                                  }
                                  while (v164);
                                }
                              }
                            }
                            else
                            {
                              v161 = 0;
                            }
                            v165 = *(_QWORD *)(v159 + 8);
                            *(_QWORD *)&v345.var0 = 2 * v161;
                            v345.var1 = v160;
                            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v347, v165, &v345);
                            re::StringID::destroyString((re::StringID *)&v345);
                            v149 = *v147;
                          }
                        }
                      }
                    }
                    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v347, v166);
                    xmmword_255833620 = (__int128)v345;
                    re::StringID::destroyString((re::StringID *)&v344);
                  }
                  v167 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
                  LOWORD(mm) = 1;
                  *(_DWORD *)v167 = 1;
                  *(_QWORD *)(v167 + 8) = "spawnOccasion";
                  *(_QWORD *)(v167 + 16) = &qword_255833600;
                  *(_QWORD *)(v167 + 24) = 0;
                  *(_QWORD *)(v167 + 32) = 0x9000000010;
                  *(_DWORD *)(v167 + 40) = 0;
                  *(_QWORD *)(v167 + 48) = 0;
                  *(_QWORD *)(v167 + 56) = 0;
                  *(_DWORD *)(v167 + 64) = 0;
                  qword_255833A08 = v167;
                  v168 = re::introspectionAllocator((re *)v167);
                  v170 = re::introspect_BOOL((re *)1, v169);
                  v171 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v168 + 32))(v168, 72, 8);
                  *(_DWORD *)v171 = 1;
                  *(_QWORD *)(v171 + 8) = "isSpawningEnabled";
                  *(_QWORD *)(v171 + 16) = v170;
                  *(_QWORD *)(v171 + 24) = 0;
                  *(_QWORD *)(v171 + 32) = 0xCC00000011;
                  *(_DWORD *)(v171 + 40) = 0;
                  *(_QWORD *)(v171 + 48) = 0;
                  *(_QWORD *)(v171 + 56) = 0;
                  *(_DWORD *)(v171 + 64) = 0;
                  qword_255833A10 = v171;
                  v172 = re::introspectionAllocator((re *)v171);
                  v174 = re::introspect_float((re *)1, v173);
                  v175 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v172 + 32))(v172, 72, 8);
                  *(_DWORD *)v175 = 1;
                  *(_QWORD *)(v175 + 8) = "spawnVelocityFactor";
                  *(_QWORD *)(v175 + 16) = v174;
                  *(_QWORD *)(v175 + 24) = 0;
                  *(_QWORD *)(v175 + 32) = 0xD000000012;
                  *(_DWORD *)(v175 + 40) = 0;
                  *(_QWORD *)(v175 + 48) = 0;
                  *(_QWORD *)(v175 + 56) = 0;
                  *(_DWORD *)(v175 + 64) = 0;
                  qword_255833A18 = v175;
                  v176 = re::introspectionAllocator((re *)v175);
                  v178 = re::introspect_float((re *)1, v177);
                  v179 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v176 + 32))(v176, 72, 8);
                  *(_DWORD *)v179 = 1;
                  *(_QWORD *)(v179 + 8) = "spawnSpreadFactor";
                  *(_QWORD *)(v179 + 16) = v178;
                  *(_QWORD *)(v179 + 24) = 0;
                  *(_QWORD *)(v179 + 32) = 0xD400000013;
                  *(_DWORD *)(v179 + 40) = 0;
                  *(_QWORD *)(v179 + 48) = 0;
                  *(_QWORD *)(v179 + 56) = 0;
                  *(_DWORD *)(v179 + 64) = 0;
                  qword_255833A20 = v179;
                  v180 = re::introspectionAllocator((re *)v179);
                  v182 = re::introspect_float((re *)1, v181);
                  v183 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v180 + 32))(v180, 72, 8);
                  *(_DWORD *)v183 = 1;
                  *(_QWORD *)(v183 + 8) = "spawnSpreadFactorVariation";
                  *(_QWORD *)(v183 + 16) = v182;
                  *(_QWORD *)(v183 + 24) = 0;
                  *(_QWORD *)(v183 + 32) = 0xD800000014;
                  *(_DWORD *)(v183 + 40) = 0;
                  *(_QWORD *)(v183 + 48) = 0;
                  *(_QWORD *)(v183 + 56) = 0;
                  *(_DWORD *)(v183 + 64) = 0;
                  qword_255833A28 = v183;
                  v184 = re::introspectionAllocator((re *)v183);
                  v186 = re::introspect_BOOL((re *)1, v185);
                  v187 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v184 + 32))(v184, 72, 8);
                  *(_DWORD *)v187 = 1;
                  *(_QWORD *)(v187 + 8) = "spawnInheritParentColor";
                  *(_QWORD *)(v187 + 16) = v186;
                  *(_QWORD *)(v187 + 24) = 0;
                  *(_QWORD *)(v187 + 32) = 0xDC00000015;
                  *(_DWORD *)(v187 + 40) = 0;
                  *(_QWORD *)(v187 + 48) = 0;
                  *(_QWORD *)(v187 + 56) = 0;
                  *(_DWORD *)(v187 + 64) = 0;
                  qword_255833A30 = v187;
                  v188 = re::introspectionAllocator((re *)v187);
                  v189 = v188;
                  v190 = (uint64_t *)qword_2558332D0;
                  if (!qword_2558332D0)
                  {
                    v190 = re::ecs2::allocInfo_ParticleEmitter((re::ecs2 *)v188);
                    qword_2558332D0 = (uint64_t)v190;
                    re::ecs2::initInfo_ParticleEmitter((re::ecs2 *)v190, v191);
                  }
                  v192 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v189 + 32))(v189, 72, 8);
                  *(_DWORD *)v192 = 1;
                  *(_QWORD *)(v192 + 8) = "mainEmitter";
                  *(_QWORD *)(v192 + 16) = v190;
                  *(_QWORD *)(v192 + 24) = 0;
                  *(_QWORD *)(v192 + 32) = 0xF000000016;
                  *(_DWORD *)(v192 + 40) = 0;
                  *(_QWORD *)(v192 + 48) = 0;
                  *(_QWORD *)(v192 + 56) = 0;
                  *(_DWORD *)(v192 + 64) = 0;
                  qword_255833A38 = v192;
                  v193 = re::introspectionAllocator((re *)v192);
                  v194 = v193;
                  v195 = (uint64_t *)qword_2558332D0;
                  if (!qword_2558332D0)
                  {
                    v195 = re::ecs2::allocInfo_ParticleEmitter((re::ecs2 *)v193);
                    qword_2558332D0 = (uint64_t)v195;
                    re::ecs2::initInfo_ParticleEmitter((re::ecs2 *)v195, v196);
                  }
                  v197 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v194 + 32))(v194, 72, 8);
                  *(_DWORD *)v197 = 1;
                  *(_QWORD *)(v197 + 8) = "spawnedEmitter";
                  *(_QWORD *)(v197 + 16) = v195;
                  *(_QWORD *)(v197 + 24) = 0;
                  *(_QWORD *)(v197 + 32) = 0x28000000017;
                  *(_DWORD *)(v197 + 40) = 0;
                  *(_QWORD *)(v197 + 48) = 0;
                  *(_QWORD *)(v197 + 56) = 0;
                  *(_DWORD *)(v197 + 64) = 0;
                  v144 = (__guard *)byte_2558332B0;
                  qword_255833A40 = v197;
                  v44 = re::introspectionAllocator((re *)v197);
                  v199 = atomic_load(byte_2558332B0);
                  if ((v199 & 1) != 0)
                  {
LABEL_133:
                    v200 = atomic_load((unsigned __int8 *)&qword_2558332B8);
                    if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_2558332B8))
                    {
                      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_255833768, "ParticleSimulationState", 4, 4, 1, 1);
                      qword_255833768 = (uint64_t)&off_24ED7D9E8;
                      qword_2558337A8 = (uint64_t)&unk_2540F7C50;
                      dword_255833778 = 9;
                      __cxa_guard_release(&qword_2558332B8);
                    }
                    if ((byte_255833219 & 1) == 0)
                    {
                      byte_255833219 = 1;
                      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255833768, v198);
                      *(_QWORD *)&v344 = 0x90DAEB79A467BE88;
                      *((_QWORD *)&v344 + 1) = "ParticleSimulationState";
                      *(_QWORD *)&v347 = 208862;
                      *((_QWORD *)&v347 + 1) = "int";
                      v201 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v347);
                      if (!v201)
                      {
                        re::StringID::destroyString((re::StringID *)&v347);
                        re::internal::assertLog((re::internal *)5, v326, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleSimulationState");
                        _os_crash();
                        __break(1u);
                        goto LABEL_203;
                      }
                      v202 = *v201;
                      re::StringID::destroyString((re::StringID *)&v347);
                      v203 = (unsigned int *)qword_2558337A8;
                      *((_QWORD *)&v346 + 1) = v202;
                      re::TypeBuilder::beginEnumType((uint64_t)&v347, (uint64_t *)&v344, 1, 1, (uint64_t)&v346);
                      v205 = *v203;
                      if ((_DWORD)v205)
                      {
                        for (k = 0; k < v205; ++k)
                        {
                          v207 = *(_QWORD *)(*((_QWORD *)v203 + 1) + 8 * k);
                          if (*(_DWORD *)v207 == 1)
                          {
                            v208 = *(char **)(v207 + 16);
                            if (v208)
                            {
                              v209 = *v208;
                              if (*v208)
                              {
                                v210 = v208[1];
                                if (v210)
                                {
                                  v211 = (unsigned __int8 *)(v208 + 2);
                                  do
                                  {
                                    v209 = 31 * v209 + v210;
                                    v212 = *v211++;
                                    v210 = v212;
                                  }
                                  while (v212);
                                }
                              }
                            }
                            else
                            {
                              v209 = 0;
                            }
                            v213 = *(_QWORD *)(v207 + 8);
                            *(_QWORD *)&v345.var0 = 2 * v209;
                            v345.var1 = v208;
                            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v347, v213, &v345);
                            re::StringID::destroyString((re::StringID *)&v345);
                            v205 = *v203;
                          }
                        }
                        if (v205)
                        {
                          for (m = 0; m < v205; ++m)
                          {
                            v215 = *(_QWORD *)(*((_QWORD *)v203 + 1) + 8 * m);
                            if (*(_DWORD *)v215 == 2)
                            {
                              v216 = *(char **)(v215 + 16);
                              if (v216)
                              {
                                v217 = *v216;
                                if (*v216)
                                {
                                  v218 = v216[1];
                                  if (v218)
                                  {
                                    v219 = (unsigned __int8 *)(v216 + 2);
                                    do
                                    {
                                      v217 = 31 * v217 + v218;
                                      v220 = *v219++;
                                      v218 = v220;
                                    }
                                    while (v220);
                                  }
                                }
                              }
                              else
                              {
                                v217 = 0;
                              }
                              v221 = *(_QWORD *)(v215 + 8);
                              *(_QWORD *)&v345.var0 = 2 * v217;
                              v345.var1 = v216;
                              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v347, v221, &v345);
                              re::StringID::destroyString((re::StringID *)&v345);
                              v205 = *v203;
                            }
                          }
                        }
                      }
                      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v347, v222);
                      xmmword_255833788 = (__int128)v345;
                      re::StringID::destroyString((re::StringID *)&v344);
                    }
                    v223 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
                    LOWORD(mm) = 1;
                    *(_DWORD *)v223 = 1;
                    *(_QWORD *)(v223 + 8) = "simulationState";
                    *(_QWORD *)(v223 + 16) = &qword_255833768;
                    *(_QWORD *)(v223 + 24) = 0;
                    *(_QWORD *)(v223 + 32) = 0x9800000018;
                    *(_DWORD *)(v223 + 40) = 0;
                    *(_QWORD *)(v223 + 48) = 0;
                    *(_QWORD *)(v223 + 56) = 0;
                    *(_DWORD *)(v223 + 64) = 0;
                    qword_255833A48 = v223;
                    v224 = re::introspectionAllocator((re *)v223);
                    v226 = re::introspect_int64_t((re *)1, v225);
                    v227 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v224 + 32))(v224, 72, 8);
                    *(_DWORD *)v227 = 1;
                    *(_QWORD *)(v227 + 8) = "restartCount";
                    *(_QWORD *)(v227 + 16) = v226;
                    *(_QWORD *)(v227 + 24) = 0;
                    *(_QWORD *)(v227 + 32) = 0xA000000019;
                    *(_DWORD *)(v227 + 40) = 0;
                    *(_QWORD *)(v227 + 48) = 0;
                    *(_QWORD *)(v227 + 56) = 0;
                    *(_DWORD *)(v227 + 64) = 0;
                    qword_255833A50 = v227;
                    v228 = re::introspectionAllocator((re *)v227);
                    v230 = re::introspect_int64_t((re *)1, v229);
                    v231 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v228 + 32))(v228, 72, 8);
                    *(_DWORD *)v231 = 1;
                    *(_QWORD *)(v231 + 8) = "burstCount";
                    *(_QWORD *)(v231 + 16) = v230;
                    *(_QWORD *)(v231 + 24) = 0;
                    *(_QWORD *)(v231 + 32) = 0xB00000001ALL;
                    *(_DWORD *)(v231 + 40) = 0;
                    *(_QWORD *)(v231 + 48) = 0;
                    *(_QWORD *)(v231 + 56) = 0;
                    *(_DWORD *)(v231 + 64) = 0;
                    qword_255833A58 = v231;
                    v232 = re::introspectionAllocator((re *)v231);
                    v234 = re::introspect_int64_t((re *)1, v233);
                    v235 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v232 + 32))(v232, 72, 8);
                    *(_DWORD *)v235 = 1;
                    *(_QWORD *)(v235 + 8) = "burstCountVariation";
                    *(_QWORD *)(v235 + 16) = v234;
                    *(_QWORD *)(v235 + 24) = 0;
                    *(_QWORD *)(v235 + 32) = 0xB80000001BLL;
                    *(_DWORD *)(v235 + 40) = 0;
                    *(_QWORD *)(v235 + 48) = 0;
                    *(_QWORD *)(v235 + 56) = 0;
                    *(_DWORD *)(v235 + 64) = 0;
                    qword_255833A60 = v235;
                    v236 = re::introspectionAllocator((re *)v235);
                    v238 = re::introspect_int64_t((re *)1, v237);
                    v239 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v236 + 32))(v236, 72, 8);
                    *(_DWORD *)v239 = 1;
                    *(_QWORD *)(v239 + 8) = "burstRestart";
                    *(_QWORD *)(v239 + 16) = v238;
                    *(_QWORD *)(v239 + 24) = 0;
                    *(_QWORD *)(v239 + 32) = 0xC00000001CLL;
                    *(_DWORD *)(v239 + 40) = 0;
                    *(_QWORD *)(v239 + 48) = 0;
                    *(_QWORD *)(v239 + 56) = 0;
                    *(_DWORD *)(v239 + 64) = 0;
                    qword_255833A68 = v239;
                    v240 = re::introspectionAllocator((re *)v239);
                    v242 = re::introspect_BOOL((re *)1, v241);
                    v243 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v240 + 32))(v240, 72, 8);
                    *(_DWORD *)v243 = 1;
                    *(_QWORD *)(v243 + 8) = "isEmitting";
                    *(_QWORD *)(v243 + 16) = v242;
                    *(_QWORD *)(v243 + 24) = 0;
                    *(_QWORD *)(v243 + 32) = 0xA80000001DLL;
                    *(_DWORD *)(v243 + 40) = 0;
                    *(_QWORD *)(v243 + 48) = 0;
                    *(_QWORD *)(v243 + 56) = 0;
                    *(_DWORD *)(v243 + 64) = 0;
                    qword_255833A70 = v243;
                    v244 = re::introspectionAllocator((re *)v243);
                    v246 = re::introspect_float((re *)1, v245);
                    v247 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v244 + 32))(v244, 72, 8);
                    *(_DWORD *)v247 = 1;
                    *(_QWORD *)(v247 + 8) = "radialAmount";
                    *(_QWORD *)(v247 + 16) = v246;
                    *(_QWORD *)(v247 + 24) = 0;
                    *(_QWORD *)(v247 + 32) = 0x800000001ELL;
                    *(_DWORD *)(v247 + 40) = 0;
                    *(_QWORD *)(v247 + 48) = 0;
                    *(_QWORD *)(v247 + 56) = 0;
                    *(_DWORD *)(v247 + 64) = 0;
                    qword_255833A78 = v247;
                    v248 = re::introspectionAllocator((re *)v247);
                    v250 = re::introspect_float((re *)1, v249);
                    v251 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v248 + 32))(v248, 72, 8);
                    *(_DWORD *)v251 = 1;
                    *(_QWORD *)(v251 + 8) = "torusInnerRadius";
                    *(_QWORD *)(v251 + 16) = v250;
                    *(_QWORD *)(v251 + 24) = 0;
                    *(_QWORD *)(v251 + 32) = 0x840000001FLL;
                    *(_DWORD *)(v251 + 40) = 0;
                    *(_QWORD *)(v251 + 48) = 0;
                    *(_QWORD *)(v251 + 56) = 0;
                    *(_DWORD *)(v251 + 64) = 0;
                    qword_255833A80 = v251;
                    v252 = re::introspectionAllocator((re *)v251);
                    v254 = re::introspect_BOOL((re *)1, v253);
                    v255 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v252 + 32))(v252, 72, 8);
                    *(_DWORD *)v255 = 1;
                    *(_QWORD *)(v255 + 8) = "isLocalFields";
                    *(_QWORD *)(v255 + 16) = v254;
                    *(_QWORD *)(v255 + 24) = 0;
                    *(_QWORD *)(v255 + 32) = 0x9500000020;
                    *(_DWORD *)(v255 + 40) = 0;
                    *(_QWORD *)(v255 + 48) = 0;
                    *(_QWORD *)(v255 + 56) = 0;
                    *(_DWORD *)(v255 + 64) = 0;
                    qword_255833A88 = v255;
                    v256 = re::introspectionAllocator((re *)v255);
                    v258 = re::introspect_float((re *)1, v257);
                    v259 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v256 + 32))(v256, 72, 8);
                    *(_DWORD *)v259 = 1;
                    *(_QWORD *)(v259 + 8) = "simulationRate";
                    *(_QWORD *)(v259 + 16) = v258;
                    *(_QWORD *)(v259 + 24) = 0;
                    *(_QWORD *)(v259 + 32) = 0xC800000021;
                    *(_DWORD *)(v259 + 40) = 0;
                    *(_QWORD *)(v259 + 48) = 0;
                    *(_QWORD *)(v259 + 56) = 0;
                    *(_DWORD *)(v259 + 64) = 0;
                    qword_255833A90 = v259;
                    v12 = re::introspectionAllocator((re *)v259);
                    v260 = atomic_load((unsigned __int8 *)&qword_255833318);
                    if ((v260 & 1) != 0)
                    {
LABEL_162:
                      if ((byte_25583321A & 1) == 0)
                      {
                        v261 = (uint64_t *)qword_255833300;
                        if (qword_255833300)
                          goto LABEL_167;
                        v262 = atomic_load((unsigned __int8 *)&qword_2558332F0);
                        if ((v262 & 1) == 0 && __cxa_guard_acquire(&qword_2558332F0))
                        {
                          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558338A0, 0);
                          *(_QWORD *)(v328 + 22) = 0;
                          qword_2558338B0 = 0;
                          *(_QWORD *)&xmmword_2558338C0 = 0;
                          *((_QWORD *)&xmmword_2558338C0 + 1) = 0xFFFFFFFFLL;
                          qword_2558338A0 = (uint64_t)&off_24ED7DAA8;
                          qword_2558338D0 = (uint64_t)"ParticleEmitterCollisionPlane";
                          dword_2558338D8 = 0;
                          xmmword_2558338E0 = 0u;
                          xmmword_2558338F0 = 0u;
                          xmmword_255833900 = 0u;
                          qword_255833910 = 0;
                          __cxa_guard_release(&qword_2558332F0);
                        }
                        qword_255833300 = (uint64_t)&qword_2558338A0;
                        *(_QWORD *)&v346 = 0x4B80C63683AA04A4;
                        *((_QWORD *)&v346 + 1) = "ParticleEmitterCollisionPlane";
                        re::StringID::destroyString((re::StringID *)&v346);
                        xmmword_2558338C0 = v347;
                        v264 = atomic_load((unsigned __int8 *)&qword_2558332F8);
                        if ((v264 & 1) == 0)
                        {
                          v329 = (re *)__cxa_guard_acquire(&qword_2558332F8);
                          if ((_DWORD)v329)
                          {
                            v330 = re::introspectionAllocator(v329);
                            v332 = re::introspect_int64_t((re *)1, v331);
                            v333 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v330 + 32))(v330, 72, 8);
                            *(_DWORD *)v333 = 1;
                            *(_QWORD *)(v333 + 8) = "handle";
                            *(_QWORD *)(v333 + 16) = v332;
                            *(_QWORD *)(v333 + 24) = 0;
                            *(_QWORD *)(v333 + 32) = 0x5000000001;
                            *(_DWORD *)(v333 + 40) = 0;
                            *(_QWORD *)(v333 + 48) = 0;
                            *(_QWORD *)(v333 + 56) = 0;
                            *(_DWORD *)(v333 + 64) = 0;
                            qword_2558333C0 = v333;
                            v334 = re::introspectionAllocator((re *)v333);
                            v335 = re::introspect_Vector2F((re::IntrospectionBase **)1);
                            v336 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v334 + 32))(v334, 72, 8);
                            *(_DWORD *)v336 = 1;
                            *(_QWORD *)(v336 + 8) = "extent";
                            *(_QWORD *)(v336 + 16) = v335;
                            *(_QWORD *)(v336 + 24) = 0;
                            *(_QWORD *)(v336 + 32) = 2;
                            *(_DWORD *)(v336 + 40) = 0;
                            *(_QWORD *)(v336 + 48) = 0;
                            *(_QWORD *)(v336 + 56) = 0;
                            *(_DWORD *)(v336 + 64) = 0;
                            qword_2558333C8 = v336;
                            v337 = re::introspectionAllocator((re *)v336);
                            v338 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
                            v339 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v337 + 32))(v337, 72, 8);
                            *(_DWORD *)v339 = 1;
                            *(_QWORD *)(v339 + 8) = "transform";
                            *(_QWORD *)(v339 + 16) = v338;
                            *(_QWORD *)(v339 + 24) = 0;
                            *(_QWORD *)(v339 + 32) = 0x1000000003;
                            *(_DWORD *)(v339 + 40) = 0;
                            *(_QWORD *)(v339 + 48) = 0;
                            *(_QWORD *)(v339 + 56) = 0;
                            *(_DWORD *)(v339 + 64) = 0;
                            qword_2558333D0 = v339;
                            __cxa_guard_release(&qword_2558332F8);
                          }
                        }
                        qword_2558338B0 = 0x6000000008;
                        v261 = &qword_2558338A0;
                        dword_2558338B8 = 16;
                        word_2558338BC = mm;
                        dword_2558338D8 = 3;
                        *(_QWORD *)&xmmword_2558338E0 = &qword_2558333C0;
                        *((_QWORD *)&xmmword_2558338E0 + 1) = re::internal::defaultConstruct<re::ecs2::ParticleEmitterCollisionPlane>;
                        *(_QWORD *)&xmmword_2558338F0 = re::internal::defaultDestruct<re::ecs2::ParticleEmitterCollisionPlane>;
                        *(_QWORD *)&xmmword_255833900 = 0;
                        *((_QWORD *)&xmmword_2558338F0 + 1) = 0;
                        *((_QWORD *)&xmmword_255833900 + 1) = re::internal::defaultConstructV2<re::ecs2::ParticleEmitterCollisionPlane>;
                        qword_255833910 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::ParticleEmitterCollisionPlane>;
                        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558338A0, v263);
                        v346 = v347;
                        if ((byte_25583321A & 1) == 0)
                        {
LABEL_167:
                          byte_25583321A = 1;
                          v265 = *((_DWORD *)v261 + 6);
                          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558334A0, 0);
                          qword_2558334B0 = 0x2800000003;
                          dword_2558334B8 = v265;
                          word_2558334BC = 0;
                          *(_QWORD *)&xmmword_2558334C0 = 0;
                          *((_QWORD *)&xmmword_2558334C0 + 1) = 0xFFFFFFFFLL;
                          qword_2558334D0 = (uint64_t)v261;
                          qword_2558334D8 = 0;
                          qword_2558334A0 = (uint64_t)&off_24ED61BF0;
                          re::IntrospectionRegistry::add(v266, v267);
                          re::getPrettyTypeName((re *)&qword_2558334A0, (const re::IntrospectionBase *)&v347);
                          if ((BYTE8(v347) & 1) != 0)
                            v268 = v348;
                          else
                            v268 = (char *)&v347 + 9;
                          if ((_QWORD)v347 && (BYTE8(v347) & 1) != 0)
                            (*(void (**)(void))(*(_QWORD *)v347 + 40))();
                          v344 = *((_OWORD *)v261 + 2);
                          v269 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v345);
                          if (v269)
                          {
                            v270 = *v269;
                            *((_QWORD *)&v343 + 1) = v270;
                          }
                          else
                          {
                            v346 = v344;
                            re::TypeBuilder::beginListType((uint64_t)&v347, (uint64_t *)&v345, 1, 0x28uLL, 8uLL, &v346);
                            re::TypeBuilder::setConstructor((uint64_t)&v347, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
                            re::TypeBuilder::setDestructor((uint64_t)&v347, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
                            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v347, 1);
                            re::TypeBuilder::setListAccessors((uint64_t)&v347, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
                            re::TypeBuilder::setListIndexer((uint64_t)&v347, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
                            re::TypeBuilder::setListIterator((uint64_t)&v347, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
                            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v347, v271);
                          }
                          xmmword_2558334C0 = v343;
                          re::StringID::destroyString((re::StringID *)&v345);
                        }
                      }
                      v272 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
                      *(_DWORD *)v272 = 1;
                      *(_QWORD *)(v272 + 8) = "collisionPlanes";
                      *(_QWORD *)(v272 + 16) = &qword_2558334A0;
                      *(_QWORD *)(v272 + 24) = 0;
                      *(_QWORD *)(v272 + 32) = 0x41000000022;
                      *(_DWORD *)(v272 + 40) = 0;
                      *(_QWORD *)(v272 + 48) = 0;
                      *(_QWORD *)(v272 + 56) = 0;
                      *(_DWORD *)(v272 + 64) = 0;
                      qword_255833A98 = v272;
                      v273 = re::introspectionAllocator((re *)v272);
                      v275 = re::introspect_int64_t((re *)1, v274);
                      v276 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v273 + 32))(v273, 72, 8);
                      *(_DWORD *)v276 = 1;
                      *(_QWORD *)(v276 + 8) = "resetVersion";
                      *(_QWORD *)(v276 + 16) = v275;
                      *(_QWORD *)(v276 + 24) = 0;
                      *(_QWORD *)(v276 + 32) = 0xE000000023;
                      *(_DWORD *)(v276 + 40) = 0;
                      *(_QWORD *)(v276 + 48) = 0;
                      *(_QWORD *)(v276 + 56) = 0;
                      *(_DWORD *)(v276 + 64) = 0;
                      qword_255833AA0 = v276;
                      __cxa_guard_release(&qword_2558332E0);
                      goto LABEL_7;
                    }
LABEL_203:
                    if (__cxa_guard_acquire(&qword_255833318))
                    {
                      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558334A0, 0);
                      *(_QWORD *)(v327 + 22) = 0;
                      qword_2558334B0 = 0;
                      *(_QWORD *)&xmmword_2558334C0 = 0;
                      *((_QWORD *)&xmmword_2558334C0 + 1) = 0xFFFFFFFFLL;
                      qword_2558334A0 = (uint64_t)&off_24ED1FA08;
                      qword_2558334D8 = 0;
                      re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2558334D0);
                      qword_2558334A0 = (uint64_t)&off_24ED61BF0;
                      __cxa_guard_release(&qword_255833318);
                    }
                    goto LABEL_162;
                  }
LABEL_198:
                  v319 = (re *)__cxa_guard_acquire(v144);
                  if ((_DWORD)v319)
                  {
                    v320 = re::introspectionAllocator(v319);
                    v321 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v320 + 32))(v320, 24, 8);
                    LOWORD(mm) = 1;
                    *(_DWORD *)v321 = 1;
                    *((_QWORD *)v321 + 1) = 0;
                    *((_QWORD *)v321 + 2) = "Playing";
                    v144[31] = (__guard)v321;
                    v322 = re::introspectionAllocator(v321);
                    v323 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v322 + 32))(v322, 24, 8);
                    *(_DWORD *)v323 = 1;
                    *((_QWORD *)v323 + 1) = 1;
                    *((_QWORD *)v323 + 2) = "Paused";
                    v144[32] = (__guard)v323;
                    v324 = re::introspectionAllocator(v323);
                    v325 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v324 + 32))(v324, 24, 8);
                    *(_DWORD *)v325 = 1;
                    *(_QWORD *)(v325 + 8) = 2;
                    *(_QWORD *)(v325 + 16) = "Stop";
                    v144[33] = v325;
                    __cxa_guard_release(v144);
                  }
                  goto LABEL_133;
                }
                v101 = *v100;
                re::StringID::destroyString((re::StringID *)&v347);
                v102 = (unsigned int *)qword_2558335B0;
                *((_QWORD *)&v346 + 1) = v101;
                re::TypeBuilder::beginEnumType((uint64_t)&v347, (uint64_t *)&v344, 1, 1, (uint64_t)&v346);
                v104 = *v102;
                if ((_DWORD)v104)
                {
                  for (n = 0; n < v104; ++n)
                  {
                    v106 = *(_QWORD *)(*((_QWORD *)v102 + 1) + 8 * n);
                    if (*(_DWORD *)v106 == 1)
                    {
                      v107 = *(char **)(v106 + 16);
                      if (v107)
                      {
                        v108 = *v107;
                        if (*v107)
                        {
                          v109 = v107[1];
                          if (v109)
                          {
                            v110 = (unsigned __int8 *)(v107 + 2);
                            do
                            {
                              v108 = 31 * v108 + v109;
                              v111 = *v110++;
                              v109 = v111;
                            }
                            while (v111);
                          }
                        }
                      }
                      else
                      {
                        v108 = 0;
                      }
                      v112 = *(_QWORD *)(v106 + 8);
                      *(_QWORD *)&v345.var0 = 2 * v108;
                      v345.var1 = v107;
                      re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v347, v112, &v345);
                      re::StringID::destroyString((re::StringID *)&v345);
                      v104 = *v102;
                    }
                  }
                  if (v104)
                  {
                    for (ii = 0; ii < v104; ++ii)
                    {
                      v114 = *(_QWORD *)(*((_QWORD *)v102 + 1) + 8 * ii);
                      if (*(_DWORD *)v114 == 2)
                      {
                        v115 = *(char **)(v114 + 16);
                        if (v115)
                        {
                          v116 = *v115;
                          if (*v115)
                          {
                            v117 = v115[1];
                            if (v117)
                            {
                              v118 = (unsigned __int8 *)(v115 + 2);
                              do
                              {
                                v116 = 31 * v116 + v117;
                                v119 = *v118++;
                                v117 = v119;
                              }
                              while (v119);
                            }
                          }
                        }
                        else
                        {
                          v116 = 0;
                        }
                        v120 = *(_QWORD *)(v114 + 8);
                        *(_QWORD *)&v345.var0 = 2 * v116;
                        v345.var1 = v115;
                        re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v347, v120, &v345);
                        re::StringID::destroyString((re::StringID *)&v345);
                        v104 = *v102;
                      }
                    }
                  }
                }
                re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v347, v121);
                xmmword_255833590 = (__int128)v345;
                re::StringID::destroyString((re::StringID *)&v344);
              }
              v122 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
              *(_DWORD *)v122 = 1;
              mm = (unint64_t)&qword_255833260;
              *(_QWORD *)(v122 + 8) = "birthDirection";
              *(_QWORD *)(v122 + 16) = &qword_255833570;
              *(_QWORD *)(v122 + 24) = 0;
              *(_QWORD *)(v122 + 32) = 0x500000000ALL;
              *(_DWORD *)(v122 + 40) = 0;
              *(_QWORD *)(v122 + 48) = 0;
              *(_QWORD *)(v122 + 56) = 0;
              *(_DWORD *)(v122 + 64) = 0;
              qword_2558339D8 = v122;
              v123 = re::introspectionAllocator((re *)v122);
              v124 = re::introspect_Vector3F((re::IntrospectionBase **)1);
              v125 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v123 + 32))(v123, 72, 8);
              *(_DWORD *)v125 = 1;
              *(_QWORD *)(v125 + 8) = "shapeSize";
              *(_QWORD *)(v125 + 16) = v124;
              *(_QWORD *)(v125 + 24) = 0;
              *(_QWORD *)(v125 + 32) = 0x700000000BLL;
              *(_DWORD *)(v125 + 40) = 0;
              *(_QWORD *)(v125 + 48) = 0;
              *(_QWORD *)(v125 + 56) = 0;
              *(_DWORD *)(v125 + 64) = 0;
              qword_2558339E0 = v125;
              v126 = re::introspectionAllocator((re *)v125);
              v128 = re::introspect_float((re *)1, v127);
              v129 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v126 + 32))(v126, 72, 8);
              *(_DWORD *)v129 = 1;
              *(_QWORD *)(v129 + 8) = "particleSpeed";
              *(_QWORD *)(v129 + 16) = v128;
              *(_QWORD *)(v129 + 24) = 0;
              *(_QWORD *)(v129 + 32) = 0x880000000CLL;
              *(_DWORD *)(v129 + 40) = 0;
              *(_QWORD *)(v129 + 48) = 0;
              *(_QWORD *)(v129 + 56) = 0;
              *(_DWORD *)(v129 + 64) = 0;
              qword_2558339E8 = v129;
              v130 = re::introspectionAllocator((re *)v129);
              v132 = re::introspect_float((re *)1, v131);
              v133 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v130 + 32))(v130, 72, 8);
              *(_DWORD *)v133 = 1;
              *(_QWORD *)(v133 + 8) = "particleSpeedVariation";
              *(_QWORD *)(v133 + 16) = v132;
              *(_QWORD *)(v133 + 24) = 0;
              *(_QWORD *)(v133 + 32) = 0x8C0000000DLL;
              *(_DWORD *)(v133 + 40) = 0;
              *(_QWORD *)(v133 + 48) = 0;
              *(_QWORD *)(v133 + 56) = 0;
              *(_DWORD *)(v133 + 64) = 0;
              qword_2558339F0 = v133;
              v134 = re::introspectionAllocator((re *)v133);
              v135 = re::introspect_Vector3F((re::IntrospectionBase **)1);
              v136 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 72, 8);
              *(_DWORD *)v136 = 1;
              *(_QWORD *)(v136 + 8) = "emissionDirection";
              *(_QWORD *)(v136 + 16) = v135;
              *(_QWORD *)(v136 + 24) = 0;
              *(_QWORD *)(v136 + 32) = 0x600000000ELL;
              *(_DWORD *)(v136 + 40) = 0;
              *(_QWORD *)(v136 + 48) = 0;
              *(_QWORD *)(v136 + 56) = 0;
              *(_DWORD *)(v136 + 64) = 0;
              qword_2558339F8 = v136;
              v137 = re::introspectionAllocator((re *)v136);
              v139 = re::introspect_BOOL((re *)1, v138);
              v140 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v137 + 32))(v137, 72, 8);
              *(_DWORD *)v140 = 1;
              *(_QWORD *)(v140 + 8) = "isLocal";
              *(_QWORD *)(v140 + 16) = v139;
              *(_QWORD *)(v140 + 24) = 0;
              *(_QWORD *)(v140 + 32) = 0x940000000FLL;
              *(_DWORD *)(v140 + 40) = 0;
              *(_QWORD *)(v140 + 48) = 0;
              *(_QWORD *)(v140 + 56) = 0;
              *(_DWORD *)(v140 + 64) = 0;
              qword_255833A00 = v140;
              v44 = re::introspectionAllocator((re *)v140);
              v142 = atomic_load((unsigned __int8 *)&qword_255833260);
              if ((v142 & 1) != 0)
                goto LABEL_100;
              goto LABEL_193;
            }
            v72 = *v71;
            re::StringID::destroyString((re::StringID *)&v347);
            v73 = (unsigned int *)qword_255833568;
            *((_QWORD *)&v346 + 1) = v72;
            re::TypeBuilder::beginEnumType((uint64_t)&v347, (uint64_t *)&v344, 1, 1, (uint64_t)&v346);
            v75 = *v73;
            if ((_DWORD)v75)
            {
              for (jj = 0; jj < v75; ++jj)
              {
                v77 = *(_QWORD *)(*((_QWORD *)v73 + 1) + 8 * jj);
                if (*(_DWORD *)v77 == 1)
                {
                  v78 = *(char **)(v77 + 16);
                  if (v78)
                  {
                    v79 = *v78;
                    if (*v78)
                    {
                      v80 = v78[1];
                      if (v80)
                      {
                        v81 = (unsigned __int8 *)(v78 + 2);
                        do
                        {
                          v79 = 31 * v79 + v80;
                          v82 = *v81++;
                          v80 = v82;
                        }
                        while (v82);
                      }
                    }
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v83 = *(_QWORD *)(v77 + 8);
                  *(_QWORD *)&v345.var0 = 2 * v79;
                  v345.var1 = v78;
                  re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v347, v83, &v345);
                  re::StringID::destroyString((re::StringID *)&v345);
                  v75 = *v73;
                }
              }
              if (v75)
              {
                for (kk = 0; kk < v75; ++kk)
                {
                  v85 = *(_QWORD *)(*((_QWORD *)v73 + 1) + 8 * kk);
                  if (*(_DWORD *)v85 == 2)
                  {
                    v86 = *(char **)(v85 + 16);
                    if (v86)
                    {
                      v87 = *v86;
                      if (*v86)
                      {
                        v88 = v86[1];
                        if (v88)
                        {
                          v89 = (unsigned __int8 *)(v86 + 2);
                          do
                          {
                            v87 = 31 * v87 + v88;
                            v90 = *v89++;
                            v88 = v90;
                          }
                          while (v90);
                        }
                      }
                    }
                    else
                    {
                      v87 = 0;
                    }
                    v91 = *(_QWORD *)(v85 + 8);
                    *(_QWORD *)&v345.var0 = 2 * v87;
                    v345.var1 = v86;
                    re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v347, v91, &v345);
                    re::StringID::destroyString((re::StringID *)&v345);
                    v75 = *v73;
                  }
                }
              }
            }
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v347, v92);
            xmmword_255833548 = (__int128)v345;
            re::StringID::destroyString((re::StringID *)&v344);
          }
          v93 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
          LOWORD(mm) = 1;
          *(_DWORD *)v93 = 1;
          *(_QWORD *)(v93 + 8) = "birthLocation";
          *(_QWORD *)(v93 + 16) = &qword_255833528;
          *(_QWORD *)(v93 + 24) = 0;
          *(_QWORD *)(v93 + 32) = 0x3000000008;
          *(_DWORD *)(v93 + 40) = 0;
          *(_QWORD *)(v93 + 48) = 0;
          *(_QWORD *)(v93 + 56) = 0;
          *(_DWORD *)(v93 + 64) = 0;
          qword_2558339C8 = v93;
          v94 = re::introspectionAllocator((re *)v93);
          v95 = re::introspect_Vector3F((re::IntrospectionBase **)1);
          v96 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 72, 8);
          *(_DWORD *)v96 = 1;
          *(_QWORD *)(v96 + 8) = "birthLocationVertex";
          *(_QWORD *)(v96 + 16) = v95;
          *(_QWORD *)(v96 + 24) = 0;
          *(_QWORD *)(v96 + 32) = 0x4000000009;
          *(_DWORD *)(v96 + 40) = 0;
          *(_QWORD *)(v96 + 48) = 0;
          *(_QWORD *)(v96 + 56) = 0;
          *(_DWORD *)(v96 + 64) = 0;
          qword_2558339D0 = v96;
          v44 = re::introspectionAllocator((re *)v96);
          v98 = atomic_load((unsigned __int8 *)&qword_255833240);
          if ((v98 & 1) != 0)
            goto LABEL_71;
          goto LABEL_188;
        }
        mm = (unint64_t)*v48;
        re::StringID::destroyString((re::StringID *)&v347);
        v49 = (unsigned int *)qword_255833520;
        *((_QWORD *)&v346 + 1) = mm;
        re::TypeBuilder::beginEnumType((uint64_t)&v347, (uint64_t *)&v344, 1, 1, (uint64_t)&v346);
        v51 = *v49;
        if ((_DWORD)v51)
        {
          for (mm = 0; mm < v51; ++mm)
          {
            v52 = *(_QWORD *)(*((_QWORD *)v49 + 1) + 8 * mm);
            if (*(_DWORD *)v52 == 1)
            {
              v53 = *(char **)(v52 + 16);
              if (v53)
              {
                v54 = *v53;
                if (*v53)
                {
                  v55 = v53[1];
                  if (v55)
                  {
                    v56 = (unsigned __int8 *)(v53 + 2);
                    do
                    {
                      v54 = 31 * v54 + v55;
                      v57 = *v56++;
                      v55 = v57;
                    }
                    while (v57);
                  }
                }
              }
              else
              {
                v54 = 0;
              }
              v58 = *(_QWORD *)(v52 + 8);
              *(_QWORD *)&v345.var0 = 2 * v54;
              v345.var1 = v53;
              re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v347, v58, &v345);
              re::StringID::destroyString((re::StringID *)&v345);
              v51 = *v49;
            }
          }
          if (v51)
          {
            for (mm = 0; mm < v51; ++mm)
            {
              v59 = *(_QWORD *)(*((_QWORD *)v49 + 1) + 8 * mm);
              if (*(_DWORD *)v59 == 2)
              {
                v60 = *(char **)(v59 + 16);
                if (v60)
                {
                  v61 = *v60;
                  if (*v60)
                  {
                    v62 = v60[1];
                    if (v62)
                    {
                      v63 = (unsigned __int8 *)(v60 + 2);
                      do
                      {
                        v61 = 31 * v61 + v62;
                        v64 = *v63++;
                        v62 = v64;
                      }
                      while (v64);
                    }
                  }
                }
                else
                {
                  v61 = 0;
                }
                v65 = *(_QWORD *)(v59 + 8);
                *(_QWORD *)&v345.var0 = 2 * v61;
                v345.var1 = v60;
                re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v347, v65, &v345);
                re::StringID::destroyString((re::StringID *)&v345);
                v51 = *v49;
              }
            }
          }
        }
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v347, v66);
        xmmword_255833500 = (__int128)v345;
        re::StringID::destroyString((re::StringID *)&v344);
      }
      v67 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v67 = 1;
      v47 = (__guard *)byte_255833230;
      *(_QWORD *)(v67 + 8) = "emitterShape";
      *(_QWORD *)(v67 + 16) = &qword_2558334E0;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0x2C00000007;
      *(_DWORD *)(v67 + 40) = 0;
      *(_QWORD *)(v67 + 48) = 0;
      *(_QWORD *)(v67 + 56) = 0;
      *(_DWORD *)(v67 + 64) = 0;
      qword_2558339C0 = v67;
      v44 = re::introspectionAllocator((re *)v67);
      v69 = atomic_load(byte_255833230);
      if ((v69 & 1) != 0)
        goto LABEL_42;
      goto LABEL_183;
    }
  }
LABEL_2:
  *((_QWORD *)this + 2) = 0x8E000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_255833320;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXEmitterComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXEmitterComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXEmitterComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v340 = v341;
}

uint64_t re::internal::defaultConstruct<re::ecs2::VFXEmitterComponent>(int a1, int a2, re::ecs2::VFXEmitterComponent *this)
{
  return re::ecs2::VFXEmitterComponent::VFXEmitterComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXEmitterComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXEmitterComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXEmitterComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXEmitterComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXEmitterComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXEmitterComponent>, this);
}

unint64_t re::ecs2::ParticleEmitter::hash(re::ecs2::ParticleEmitter *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v137;

  v1 = *((_QWORD *)this + 41);
  if (v1)
    v137 = *(_QWORD *)(v1 + 664);
  else
    v137 = 0;
  v2 = (0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 74) ^ ((unint64_t)*((unsigned int *)this + 74) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 74) ^ ((unint64_t)*((unsigned int *)this + 74) >> 30))) >> 27);
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 73) ^ ((unint64_t)*((unsigned int *)this + 73) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 73) ^ ((unint64_t)*((unsigned int *)this + 73) >> 30))) >> 27));
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 72) ^ ((unint64_t)*((unsigned int *)this + 72) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 72) ^ ((unint64_t)*((unsigned int *)this + 72) >> 30))) >> 27));
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 66) ^ ((unint64_t)*((unsigned int *)this + 66) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 66) ^ ((unint64_t)*((unsigned int *)this + 66) >> 30))) >> 27));
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 65) ^ ((unint64_t)*((unsigned int *)this + 65) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 65) ^ ((unint64_t)*((unsigned int *)this + 65) >> 30))) >> 27));
  v7 = ((v5 ^ (v5 >> 31)) + ((v6 ^ (v6 >> 31)) << 6) + ((v6 ^ (v6 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v6 ^ (v6 >> 31);
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 64) ^ ((unint64_t)*((unsigned int *)this + 64) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 64) ^ ((unint64_t)*((unsigned int *)this + 64) >> 30))) >> 27));
  v9 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) >> 27));
  v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 52) ^ ((unint64_t)*((unsigned int *)this + 52) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 52) ^ ((unint64_t)*((unsigned int *)this + 52) >> 30))) >> 27));
  v11 = ((v9 ^ (v9 >> 31)) + ((v10 ^ (v10 >> 31)) << 6) + ((v10 ^ (v10 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v10 ^ (v10 >> 31);
  v12 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 55) ^ ((unint64_t)*((unsigned int *)this + 55) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 55) ^ ((unint64_t)*((unsigned int *)this + 55) >> 30))) >> 27));
  v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 54) ^ ((unint64_t)*((unsigned int *)this + 54) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 54) ^ ((unint64_t)*((unsigned int *)this + 54) >> 30))) >> 27));
  v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 49) ^ ((unint64_t)*((unsigned int *)this + 49) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 49) ^ ((unint64_t)*((unsigned int *)this + 49) >> 30))) >> 27));
  v15 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 48) ^ ((unint64_t)*((unsigned int *)this + 48) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 48) ^ ((unint64_t)*((unsigned int *)this + 48) >> 30))) >> 27));
  v16 = ((v14 ^ (v14 >> 31)) + ((v15 ^ (v15 >> 31)) << 6) + ((v15 ^ (v15 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v15 ^ (v15 >> 31);
  v17 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 51) ^ ((unint64_t)*((unsigned int *)this + 51) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 51) ^ ((unint64_t)*((unsigned int *)this + 51) >> 30))) >> 27));
  v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 50) ^ ((unint64_t)*((unsigned int *)this + 50) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 50) ^ ((unint64_t)*((unsigned int *)this + 50) >> 30))) >> 27));
  v19 = ((v16 << 6)
       + (v16 >> 2)
       + (((v17 ^ (v17 >> 31)) + ((v18 ^ (v18 >> 31)) << 6) + ((v18 ^ (v18 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v18 ^ (v18 >> 31))
       - 0x61C8864680B583E9) ^ v16;
  v20 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 41) ^ ((unint64_t)*((unsigned int *)this + 41) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 41) ^ ((unint64_t)*((unsigned int *)this + 41) >> 30))) >> 27));
  v21 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 40) ^ ((unint64_t)*((unsigned int *)this + 40) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 40) ^ ((unint64_t)*((unsigned int *)this + 40) >> 30))) >> 27));
  v22 = ((v20 ^ (v20 >> 31)) + ((v21 ^ (v21 >> 31)) << 6) + ((v21 ^ (v21 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v21 ^ (v21 >> 31);
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 43) ^ ((unint64_t)*((unsigned int *)this + 43) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 43) ^ ((unint64_t)*((unsigned int *)this + 43) >> 30))) >> 27));
  v24 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 42) ^ ((unint64_t)*((unsigned int *)this + 42) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 42) ^ ((unint64_t)*((unsigned int *)this + 42) >> 30))) >> 27));
  v25 = ((v22 << 6)
       + (v22 >> 2)
       + (((v23 ^ (v23 >> 31)) + ((v24 ^ (v24 >> 31)) << 6) + ((v24 ^ (v24 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v24 ^ (v24 >> 31))
       - 0x61C8864680B583E9) ^ v22;
  v26 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 37) ^ ((unint64_t)*((unsigned int *)this + 37) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 37) ^ ((unint64_t)*((unsigned int *)this + 37) >> 30))) >> 27));
  v27 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 36) ^ ((unint64_t)*((unsigned int *)this + 36) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 36) ^ ((unint64_t)*((unsigned int *)this + 36) >> 30))) >> 27));
  v28 = ((v26 ^ (v26 >> 31)) + ((v27 ^ (v27 >> 31)) << 6) + ((v27 ^ (v27 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v27 ^ (v27 >> 31);
  v29 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 39) ^ ((unint64_t)*((unsigned int *)this + 39) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 39) ^ ((unint64_t)*((unsigned int *)this + 39) >> 30))) >> 27));
  v30 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 38) ^ ((unint64_t)*((unsigned int *)this + 38) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 38) ^ ((unint64_t)*((unsigned int *)this + 38) >> 30))) >> 27));
  v31 = ((v28 << 6)
       + (v28 >> 2)
       + (((v29 ^ (v29 >> 31)) + ((v30 ^ (v30 >> 31)) << 6) + ((v30 ^ (v30 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v30 ^ (v30 >> 31))
       - 0x61C8864680B583E9) ^ v28;
  v32 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 14) ^ ((unint64_t)*((unsigned int *)this + 14) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 14) ^ ((unint64_t)*((unsigned int *)this + 14) >> 30))) >> 27));
  v33 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 13) ^ ((unint64_t)*((unsigned int *)this + 13) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 13) ^ ((unint64_t)*((unsigned int *)this + 13) >> 30))) >> 27));
  v34 = ((v32 ^ (v32 >> 31)) + ((v33 ^ (v33 >> 31)) << 6) + ((v33 ^ (v33 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v33 ^ (v33 >> 31);
  v35 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 12) ^ ((unint64_t)*((unsigned int *)this + 12) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 12) ^ ((unint64_t)*((unsigned int *)this + 12) >> 30))) >> 27));
  v36 = (((v35 ^ (v35 >> 31)) << 6) + ((v35 ^ (v35 >> 31)) >> 2) - 0x61C8864680B583E9 + v34) ^ v35 ^ (v35 >> 31);
  v37 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 6) ^ ((unint64_t)*((unsigned int *)this + 6) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 6) ^ ((unint64_t)*((unsigned int *)this + 6) >> 30))) >> 27));
  v38 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 5) ^ ((unint64_t)*((unsigned int *)this + 5) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 5) ^ ((unint64_t)*((unsigned int *)this + 5) >> 30))) >> 27));
  v39 = ((v37 ^ (v37 >> 31)) + ((v38 ^ (v38 >> 31)) << 6) + ((v38 ^ (v38 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v38 ^ (v38 >> 31);
  v40 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 4) ^ ((unint64_t)*((unsigned int *)this + 4) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 4) ^ ((unint64_t)*((unsigned int *)this + 4) >> 30))) >> 27));
  v41 = (((v40 ^ (v40 >> 31)) << 6) + ((v40 ^ (v40 >> 31)) >> 2) - 0x61C8864680B583E9 + v39) ^ v40 ^ (v40 >> 31);
  v42 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 1) ^ ((unint64_t)*((unsigned int *)this + 1) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 1) ^ ((unint64_t)*((unsigned int *)this + 1) >> 30))) >> 27));
  v43 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*(unsigned int *)this ^ ((unint64_t)*(unsigned int *)this >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(unsigned int *)this ^ ((unint64_t)*(unsigned int *)this >> 30))) >> 27));
  v44 = ((v42 ^ (v42 >> 31))
       + (((v43 ^ (v43 >> 31)) - 0x61C8864680B583E9) << 6)
       + (((v43 ^ (v43 >> 31)) - 0x61C8864680B583E9) >> 2)
       - 0x61C8864680B583E9) ^ ((v43 ^ (v43 >> 31)) - 0x61C8864680B583E9);
  v45 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 2) ^ ((unint64_t)*((unsigned int *)this + 2) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 2) ^ ((unint64_t)*((unsigned int *)this + 2) >> 30))) >> 27));
  v46 = ((v45 ^ (v45 >> 31)) + (v44 << 6) + (v44 >> 2) - 0x61C8864680B583E9) ^ v44;
  v47 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 3) ^ ((unint64_t)*((unsigned int *)this + 3) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 3) ^ ((unint64_t)*((unsigned int *)this + 3) >> 30))) >> 27));
  v48 = (v47 ^ (v47 >> 31)) + (v46 << 6) + (v46 >> 2) - 0x61C8864680B583E9;
  v49 = (v41 + ((v48 ^ v46) << 6) + ((v48 ^ v46) >> 2) - 0x61C8864680B583E9) ^ v48 ^ v46;
  v50 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 8) ^ ((unint64_t)*((unsigned int *)this + 8) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 8) ^ ((unint64_t)*((unsigned int *)this + 8) >> 30))) >> 27));
  v51 = ((v50 ^ (v50 >> 31)) + (v49 << 6) + (v49 >> 2) - 0x61C8864680B583E9) ^ v49;
  v52 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 9) ^ ((unint64_t)*((unsigned int *)this + 9) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 9) ^ ((unint64_t)*((unsigned int *)this + 9) >> 30))) >> 27));
  v53 = ((v52 ^ (v52 >> 31)) + (v51 << 6) + (v51 >> 2) - 0x61C8864680B583E9) ^ v51;
  v54 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((int *)this + 10) ^ ((unint64_t)*((int *)this + 10) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 10) ^ ((unint64_t)*((int *)this + 10) >> 30))) >> 27));
  v55 = (v54 ^ (v54 >> 31)) + (v53 << 6) + (v53 >> 2) - 0x61C8864680B583E9;
  v56 = (v36 + ((v55 ^ v53) << 6) + ((v55 ^ v53) >> 2) - 0x61C8864680B583E9) ^ v55 ^ v53;
  v57 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 16) ^ ((unint64_t)*((unsigned int *)this + 16) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 16) ^ ((unint64_t)*((unsigned int *)this + 16) >> 30))) >> 27));
  v58 = ((v57 ^ (v57 >> 31)) + (v56 << 6) + (v56 >> 2) - 0x61C8864680B583E9) ^ v56;
  v59 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 17) ^ ((unint64_t)*((unsigned int *)this + 17) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 17) ^ ((unint64_t)*((unsigned int *)this + 17) >> 30))) >> 27));
  v60 = ((v59 ^ (v59 >> 31)) + (v58 << 6) + (v58 >> 2) - 0x61C8864680B583E9) ^ v58;
  v61 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 18) ^ ((unint64_t)*((unsigned int *)this + 18) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 18) ^ ((unint64_t)*((unsigned int *)this + 18) >> 30))) >> 27));
  v62 = ((v61 ^ (v61 >> 31)) + (v60 << 6) + (v60 >> 2) - 0x61C8864680B583E9) ^ v60;
  v63 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 10) ^ (*((_QWORD *)this + 10) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * (*((_QWORD *)this + 10) ^ (*((_QWORD *)this + 10) >> 30))) >> 27));
  v64 = ((v63 ^ (v63 >> 31)) + (v62 << 6) + (v62 >> 2) - 0x61C8864680B583E9) ^ v62;
  v65 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 11) ^ (*((_QWORD *)this + 11) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * (*((_QWORD *)this + 11) ^ (*((_QWORD *)this + 11) >> 30))) >> 27));
  v66 = ((v65 ^ (v65 >> 31)) + (v64 << 6) + (v64 >> 2) - 0x61C8864680B583E9) ^ v64;
  v67 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 24) ^ ((unint64_t)*((unsigned int *)this + 24) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 24) ^ ((unint64_t)*((unsigned int *)this + 24) >> 30))) >> 27));
  v68 = ((v67 ^ (v67 >> 31)) + (v66 << 6) + (v66 >> 2) - 0x61C8864680B583E9) ^ v66;
  v69 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 25) ^ ((unint64_t)*((unsigned int *)this + 25) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 25) ^ ((unint64_t)*((unsigned int *)this + 25) >> 30))) >> 27));
  v70 = ((v69 ^ (v69 >> 31)) + (v68 << 6) + (v68 >> 2) - 0x61C8864680B583E9) ^ v68;
  v71 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 26) ^ ((unint64_t)*((unsigned int *)this + 26) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 26) ^ ((unint64_t)*((unsigned int *)this + 26) >> 30))) >> 27));
  v72 = ((v71 ^ (v71 >> 31)) + (v70 << 6) + (v70 >> 2) - 0x61C8864680B583E9) ^ v70;
  v73 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 27) ^ ((unint64_t)*((unsigned int *)this + 27) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 27) ^ ((unint64_t)*((unsigned int *)this + 27) >> 30))) >> 27));
  v74 = ((v73 ^ (v73 >> 31)) + (v72 << 6) + (v72 >> 2) - 0x61C8864680B583E9) ^ v72;
  v75 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 28) ^ ((unint64_t)*((unsigned int *)this + 28) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 28) ^ ((unint64_t)*((unsigned int *)this + 28) >> 30))) >> 27));
  v76 = ((v75 ^ (v75 >> 31)) + (v74 << 6) + (v74 >> 2) - 0x61C8864680B583E9) ^ v74;
  v77 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 29) ^ ((unint64_t)*((unsigned int *)this + 29) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 29) ^ ((unint64_t)*((unsigned int *)this + 29) >> 30))) >> 27));
  v78 = ((v77 ^ (v77 >> 31)) + (v76 << 6) + (v76 >> 2) - 0x61C8864680B583E9) ^ v76;
  v79 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((int *)this + 30) ^ ((unint64_t)*((int *)this + 30) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 30) ^ ((unint64_t)*((int *)this + 30) >> 30))) >> 27));
  v80 = ((v79 ^ (v79 >> 31)) + (v78 << 6) + (v78 >> 2) - 0x61C8864680B583E9) ^ v78;
  v81 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 31) ^ ((unint64_t)*((unsigned int *)this + 31) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 31) ^ ((unint64_t)*((unsigned int *)this + 31) >> 30))) >> 27));
  v82 = ((v81 ^ (v81 >> 31)) + (v80 << 6) + (v80 >> 2) - 0x61C8864680B583E9) ^ v80;
  v83 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 32) ^ ((unint64_t)*((unsigned int *)this + 32) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 32) ^ ((unint64_t)*((unsigned int *)this + 32) >> 30))) >> 27));
  v84 = ((v83 ^ (v83 >> 31)) + (v82 << 6) + (v82 >> 2) - 0x61C8864680B583E9) ^ v82;
  v85 = (v31 + (v84 << 6) + (v84 >> 2) - 0x61C8864680B583E9) ^ v84;
  v86 = (v25 + (v85 << 6) + (v85 >> 2) - 0x61C8864680B583E9) ^ v85;
  v87 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 176)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 176)) >> 27));
  v88 = ((v87 ^ (v87 >> 31)) + (v86 << 6) + (v86 >> 2) - 0x61C8864680B583E9) ^ v86;
  v89 = (v19 + (v88 << 6) + (v88 >> 2) - 0x61C8864680B583E9) ^ v88;
  v90 = ((((v11 << 6)
         + (v11 >> 2)
         + (((v12 ^ (v12 >> 31)) + ((v13 ^ (v13 >> 31)) << 6) + ((v13 ^ (v13 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v13 ^ (v13 >> 31))
         - 0x61C8864680B583E9) ^ v11)
       + (v89 << 6)
       + (v89 >> 2)
       - 0x61C8864680B583E9) ^ v89;
  v91 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 224)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 224)) >> 27));
  v92 = ((v91 ^ (v91 >> 31)) + (v90 << 6) + (v90 >> 2) - 0x61C8864680B583E9) ^ v90;
  v93 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 225)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 225)) >> 27));
  v94 = ((v93 ^ (v93 >> 31)) + (v92 << 6) + (v92 >> 2) - 0x61C8864680B583E9) ^ v92;
  v95 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 57) ^ ((unint64_t)*((unsigned int *)this + 57) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 57) ^ ((unint64_t)*((unsigned int *)this + 57) >> 30))) >> 27));
  v96 = ((v95 ^ (v95 >> 31)) + (v94 << 6) + (v94 >> 2) - 0x61C8864680B583E9) ^ v94;
  v97 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 58) ^ ((unint64_t)*((unsigned int *)this + 58) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 58) ^ ((unint64_t)*((unsigned int *)this + 58) >> 30))) >> 27));
  v98 = ((v97 ^ (v97 >> 31)) + (v96 << 6) + (v96 >> 2) - 0x61C8864680B583E9) ^ v96;
  v99 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 59) ^ ((unint64_t)*((unsigned int *)this + 59) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 59) ^ ((unint64_t)*((unsigned int *)this + 59) >> 30))) >> 27));
  v100 = ((v99 ^ (v99 >> 31)) + (v98 << 6) + (v98 >> 2) - 0x61C8864680B583E9) ^ v98;
  v101 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 60) ^ ((unint64_t)*((unsigned int *)this + 60) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 60) ^ ((unint64_t)*((unsigned int *)this + 60) >> 30))) >> 27));
  v102 = ((v101 ^ (v101 >> 31)) + (v100 << 6) + (v100 >> 2) - 0x61C8864680B583E9) ^ v100;
  v103 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 61) ^ ((unint64_t)*((unsigned int *)this + 61) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 61) ^ ((unint64_t)*((unsigned int *)this + 61) >> 30))) >> 27));
  v104 = ((v103 ^ (v103 >> 31)) + (v102 << 6) + (v102 >> 2) - 0x61C8864680B583E9) ^ v102;
  v105 = (((((v8 ^ (v8 >> 31)) << 6) + ((v8 ^ (v8 >> 31)) >> 2) - 0x61C8864680B583E9 + v7) ^ v8 ^ (v8 >> 31))
        + (v104 << 6)
        + (v104 >> 2)
        - 0x61C8864680B583E9) ^ v104;
  v106 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 68) ^ ((unint64_t)*((unsigned int *)this + 68) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 68) ^ ((unint64_t)*((unsigned int *)this + 68) >> 30))) >> 27));
  v107 = ((v106 ^ (v106 >> 31)) + (v105 << 6) + (v105 >> 2) - 0x61C8864680B583E9) ^ v105;
  v108 = (((((v4 ^ (v4 >> 31)) << 6)
          + ((v4 ^ (v4 >> 31)) >> 2)
          - 0x61C8864680B583E9
          + ((((0x94D049BB133111EBLL * v2) ^ ((0x94D049BB133111EBLL * v2) >> 31))
            + ((v3 ^ (v3 >> 31)) << 6)
            + ((v3 ^ (v3 >> 31)) >> 2)
            - 0x61C8864680B583E9) ^ v3 ^ (v3 >> 31))) ^ v4 ^ (v4 >> 31))
        + (v107 << 6)
        + (v107 >> 2)
        - 0x61C8864680B583E9) ^ v107;
  v109 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 304)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 304)) >> 27));
  v110 = ((v109 ^ (v109 >> 31)) + (v108 << 6) + (v108 >> 2) - 0x61C8864680B583E9) ^ v108;
  v111 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 77) ^ ((unint64_t)*((unsigned int *)this + 77) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 77) ^ ((unint64_t)*((unsigned int *)this + 77) >> 30))) >> 27));
  v112 = ((v111 ^ (v111 >> 31)) + (v110 << 6) + (v110 >> 2) - 0x61C8864680B583E9) ^ v110;
  v113 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((int *)this + 78) ^ ((unint64_t)*((int *)this + 78) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 78) ^ ((unint64_t)*((int *)this + 78) >> 30))) >> 27));
  v114 = ((v113 ^ (v113 >> 31)) + (v112 << 6) + (v112 >> 2) - 0x61C8864680B583E9) ^ v112;
  v115 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((int *)this + 79) ^ ((unint64_t)*((int *)this + 79) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 79) ^ ((unint64_t)*((int *)this + 79) >> 30))) >> 27));
  v116 = ((v115 ^ (v115 >> 31)) + (v114 << 6) + (v114 >> 2) - 0x61C8864680B583E9) ^ v114;
  v117 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) >> 27));
  v118 = ((v116 << 6) + (v116 >> 2) + (v137 ^ (v117 >> 31) ^ v117) - 0x61C8864680B583E9) ^ v116;
  v119 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 344)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 344)) >> 27));
  v120 = ((v118 << 6) + (v118 >> 2) + (v119 ^ (v119 >> 31)) - 0x61C8864680B583E9) ^ v118;
  v121 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 44) ^ (*((_QWORD *)this + 44) >> 30));
  v122 = (((0x94D049BB133111EBLL * (v121 ^ (v121 >> 27))) ^ ((0x94D049BB133111EBLL * (v121 ^ (v121 >> 27))) >> 31))
        + (v120 << 6)
        + (v120 >> 2)
        - 0x61C8864680B583E9) ^ v120;
  v123 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 45) ^ (*((_QWORD *)this + 45) >> 30));
  v124 = (((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) ^ ((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) >> 31))
        + (v122 << 6)
        + (v122 >> 2)
        - 0x61C8864680B583E9) ^ v122;
  v125 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 46) ^ (*((_QWORD *)this + 46) >> 30));
  v126 = (((0x94D049BB133111EBLL * (v125 ^ (v125 >> 27))) ^ ((0x94D049BB133111EBLL * (v125 ^ (v125 >> 27))) >> 31))
        + (v124 << 6)
        + (v124 >> 2)
        - 0x61C8864680B583E9) ^ v124;
  v127 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 47) ^ (*((_QWORD *)this + 47) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                               * (*((_QWORD *)this + 47) ^ (*((_QWORD *)this + 47) >> 30))) >> 27));
  v128 = ((v127 ^ (v127 >> 31)) + (v126 << 6) + (v126 >> 2) - 0x61C8864680B583E9) ^ v126;
  v129 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 96) ^ ((unint64_t)*((unsigned int *)this + 96) >> 30));
  v130 = (((0x94D049BB133111EBLL * (v129 ^ (v129 >> 27))) ^ ((0x94D049BB133111EBLL * (v129 ^ (v129 >> 27))) >> 31))
        + (v128 << 6)
        + (v128 >> 2)
        - 0x61C8864680B583E9) ^ v128;
  v131 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 97) ^ ((unint64_t)*((unsigned int *)this + 97) >> 30));
  v132 = (((0x94D049BB133111EBLL * (v131 ^ (v131 >> 27))) ^ ((0x94D049BB133111EBLL * (v131 ^ (v131 >> 27))) >> 31))
        + (v130 << 6)
        + (v130 >> 2)
        - 0x61C8864680B583E9) ^ v130;
  v133 = 0xBF58476D1CE4E5B9 * (*((int *)this + 98) ^ ((unint64_t)*((int *)this + 98) >> 30));
  v134 = (((0x94D049BB133111EBLL * (v133 ^ (v133 >> 27))) ^ ((0x94D049BB133111EBLL * (v133 ^ (v133 >> 27))) >> 31))
        + (v132 << 6)
        + (v132 >> 2)
        - 0x61C8864680B583E9) ^ v132;
  v135 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 396)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 396)) >> 27));
  return ((v135 ^ (v135 >> 31)) + (v134 << 6) + (v134 >> 2) - 0x61C8864680B583E9) ^ v134;
}

unint64_t re::ecs2::VFXEmitterComponentState::hash(re::ecs2::VFXEmitterComponentState *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)this ^ (*(_QWORD *)this >> 30));
  v3 = ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
     - 0x61C8864680B583E9;
  v4 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 1) ^ (*((_QWORD *)this + 1) >> 30));
  v5 = (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
      + (v3 << 6)
      + (v3 >> 2)
      - 0x61C8864680B583E9) ^ v3;
  v6 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 2) ^ (*((_QWORD *)this + 2) >> 30));
  v7 = (((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31))
      + (v5 << 6)
      + (v5 >> 2)
      - 0x61C8864680B583E9) ^ v5;
  v8 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 3) ^ (*((_QWORD *)this + 3) >> 30));
  v9 = (((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31))
      + (v7 << 6)
      + (v7 >> 2)
      - 0x61C8864680B583E9) ^ v7;
  v10 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 4) ^ (*((_QWORD *)this + 4) >> 30));
  v11 = (((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31))
       + (v9 << 6)
       + (v9 >> 2)
       - 0x61C8864680B583E9) ^ v9;
  v12 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 40)) ^ ((0xBF58476D1CE4E5B9
                                                                    * *((unsigned __int8 *)this + 40)) >> 27));
  v13 = ((v12 ^ (v12 >> 31)) + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583E9) ^ v11;
  v14 = 0xBF58476D1CE4E5B9 * (*((int *)this + 11) ^ ((unint64_t)*((int *)this + 11) >> 30));
  v15 = (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31))
       + (v13 << 6)
       + (v13 >> 2)
       - 0x61C8864680B583E9) ^ v13;
  v16 = 0xBF58476D1CE4E5B9 * (*((int *)this + 12) ^ ((unint64_t)*((int *)this + 12) >> 30));
  v17 = (((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) ^ ((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) >> 31))
       + (v15 << 6)
       + (v15 >> 2)
       - 0x61C8864680B583E9) ^ v15;
  v18 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 16) ^ ((unint64_t)*((unsigned int *)this + 16) >> 30));
  v19 = (0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) ^ ((0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) >> 31);
  v20 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 17) ^ ((unint64_t)*((unsigned int *)this + 17) >> 30));
  v21 = (0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31);
  v22 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 18) ^ ((unint64_t)*((unsigned int *)this + 18) >> 30));
  v23 = ((((v19 << 6)
         + (v19 >> 2)
         - 0x61C8864680B583E9
         + ((((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
           + (v21 << 6)
           + (v21 >> 2)
           - 0x61C8864680B583E9) ^ v21)) ^ v19)
       + (v17 << 6)
       + (v17 >> 2)
       - 0x61C8864680B583E9) ^ v17;
  v24 = 0xBF58476D1CE4E5B9 * (*((int *)this + 20) ^ ((unint64_t)*((int *)this + 20) >> 30));
  v25 = (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
       + (v23 << 6)
       + (v23 >> 2)
       - 0x61C8864680B583E9) ^ v23;
  v26 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 28) ^ ((unint64_t)*((unsigned int *)this + 28) >> 30));
  v27 = (0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31);
  v28 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 29) ^ ((unint64_t)*((unsigned int *)this + 29) >> 30));
  v29 = (0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31);
  v30 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 30) ^ ((unint64_t)*((unsigned int *)this + 30) >> 30));
  v31 = ((((v27 << 6)
         + (v27 >> 2)
         - 0x61C8864680B583E9
         + ((((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31))
           + (v29 << 6)
           + (v29 >> 2)
           - 0x61C8864680B583E9) ^ v29)) ^ v27)
       + (v25 << 6)
       + (v25 >> 2)
       - 0x61C8864680B583E9) ^ v25;
  v32 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 32) ^ ((unint64_t)*((unsigned int *)this + 32) >> 30));
  v33 = (((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) ^ ((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) >> 31))
       + (v31 << 6)
       + (v31 >> 2)
       - 0x61C8864680B583E9) ^ v31;
  v34 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 33) ^ ((unint64_t)*((unsigned int *)this + 33) >> 30));
  v35 = (((0x94D049BB133111EBLL * (v34 ^ (v34 >> 27))) ^ ((0x94D049BB133111EBLL * (v34 ^ (v34 >> 27))) >> 31))
       + (v33 << 6)
       + (v33 >> 2)
       - 0x61C8864680B583E9) ^ v33;
  v36 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 34) ^ ((unint64_t)*((unsigned int *)this + 34) >> 30));
  v37 = (((0x94D049BB133111EBLL * (v36 ^ (v36 >> 27))) ^ ((0x94D049BB133111EBLL * (v36 ^ (v36 >> 27))) >> 31))
       + (v35 << 6)
       + (v35 >> 2)
       - 0x61C8864680B583E9) ^ v35;
  v38 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 35) ^ ((unint64_t)*((unsigned int *)this + 35) >> 30));
  v39 = (((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) ^ ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) >> 31))
       + (v37 << 6)
       + (v37 >> 2)
       - 0x61C8864680B583E9) ^ v37;
  v40 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 24) ^ ((unint64_t)*((unsigned int *)this + 24) >> 30));
  v41 = (0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) ^ ((0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) >> 31);
  v42 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 25) ^ ((unint64_t)*((unsigned int *)this + 25) >> 30));
  v43 = (0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) >> 31);
  v44 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 26) ^ ((unint64_t)*((unsigned int *)this + 26) >> 30));
  v45 = ((((v41 << 6)
         + (v41 >> 2)
         - 0x61C8864680B583E9
         + ((((0x94D049BB133111EBLL * (v44 ^ (v44 >> 27))) ^ ((0x94D049BB133111EBLL * (v44 ^ (v44 >> 27))) >> 31))
           + (v43 << 6)
           + (v43 >> 2)
           - 0x61C8864680B583E9) ^ v43)) ^ v41)
       + (v39 << 6)
       + (v39 >> 2)
       - 0x61C8864680B583E9) ^ v39;
  v46 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 148)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 148)) >> 27));
  v47 = ((v46 ^ (v46 >> 31)) + (v45 << 6) + (v45 >> 2) - 0x61C8864680B583E9) ^ v45;
  v48 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 149)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 149)) >> 27));
  v49 = ((v48 ^ (v48 >> 31)) + (v47 << 6) + (v47 >> 2) - 0x61C8864680B583E9) ^ v47;
  v50 = 0xBF58476D1CE4E5B9 * (*((int *)this + 38) ^ ((unint64_t)*((int *)this + 38) >> 30));
  v51 = (((0x94D049BB133111EBLL * (v50 ^ (v50 >> 27))) ^ ((0x94D049BB133111EBLL * (v50 ^ (v50 >> 27))) >> 31))
       + (v49 << 6)
       + (v49 >> 2)
       - 0x61C8864680B583E9) ^ v49;
  v52 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 20) ^ (*((_QWORD *)this + 20) >> 30));
  v53 = (((0x94D049BB133111EBLL * (v52 ^ (v52 >> 27))) ^ ((0x94D049BB133111EBLL * (v52 ^ (v52 >> 27))) >> 31))
       + (v51 << 6)
       + (v51 >> 2)
       - 0x61C8864680B583E9) ^ v51;
  v54 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 22) ^ (*((_QWORD *)this + 22) >> 30));
  v55 = (((0x94D049BB133111EBLL * (v54 ^ (v54 >> 27))) ^ ((0x94D049BB133111EBLL * (v54 ^ (v54 >> 27))) >> 31))
       + (v53 << 6)
       + (v53 >> 2)
       - 0x61C8864680B583E9) ^ v53;
  v56 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 23) ^ (*((_QWORD *)this + 23) >> 30));
  v57 = (((0x94D049BB133111EBLL * (v56 ^ (v56 >> 27))) ^ ((0x94D049BB133111EBLL * (v56 ^ (v56 >> 27))) >> 31))
       + (v55 << 6)
       + (v55 >> 2)
       - 0x61C8864680B583E9) ^ v55;
  v58 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 24) ^ (*((_QWORD *)this + 24) >> 30));
  v59 = (((0x94D049BB133111EBLL * (v58 ^ (v58 >> 27))) ^ ((0x94D049BB133111EBLL * (v58 ^ (v58 >> 27))) >> 31))
       + (v57 << 6)
       + (v57 >> 2)
       - 0x61C8864680B583E9) ^ v57;
  v60 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 168)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 168)) >> 27));
  v61 = ((v60 ^ (v60 >> 31)) + (v59 << 6) + (v59 >> 2) - 0x61C8864680B583E9) ^ v59;
  v62 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 50) ^ ((unint64_t)*((unsigned int *)this + 50) >> 30));
  v63 = (((0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) ^ ((0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) >> 31))
       + (v61 << 6)
       + (v61 >> 2)
       - 0x61C8864680B583E9) ^ v61;
  v64 = 0xBF58476D1CE4E5B9 * (*((int *)this + 36) ^ ((unint64_t)*((int *)this + 36) >> 30));
  v65 = (((0x94D049BB133111EBLL * (v64 ^ (v64 >> 27))) ^ ((0x94D049BB133111EBLL * (v64 ^ (v64 >> 27))) >> 31))
       + (v63 << 6)
       + (v63 >> 2)
       - 0x61C8864680B583E9) ^ v63;
  v66 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 204)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 204)) >> 27));
  v67 = ((v66 ^ (v66 >> 31)) + (v65 << 6) + (v65 >> 2) - 0x61C8864680B583E9) ^ v65;
  v68 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 52) ^ ((unint64_t)*((unsigned int *)this + 52) >> 30));
  v69 = (((0x94D049BB133111EBLL * (v68 ^ (v68 >> 27))) ^ ((0x94D049BB133111EBLL * (v68 ^ (v68 >> 27))) >> 31))
       + (v67 << 6)
       + (v67 >> 2)
       - 0x61C8864680B583E9) ^ v67;
  v70 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) >> 27));
  v71 = ((v70 ^ (v70 >> 31)) + (v69 << 6) + (v69 >> 2) - 0x61C8864680B583E9) ^ v69;
  v72 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 54) ^ ((unint64_t)*((unsigned int *)this + 54) >> 30));
  v73 = (((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) ^ ((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) >> 31))
       + (v71 << 6)
       + (v71 >> 2)
       - 0x61C8864680B583E9) ^ v71;
  v74 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 220)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 220)) >> 27));
  v75 = ((v74 ^ (v74 >> 31)) + (v73 << 6) + (v73 >> 2) - 0x61C8864680B583E9) ^ v73;
  v76 = *((_QWORD *)this + 28) ^ (*((_QWORD *)this + 28) >> 30);
  v77 = (((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v76) ^ ((0xBF58476D1CE4E5B9 * v76) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v76) ^ ((0xBF58476D1CE4E5B9 * v76) >> 27))) >> 31))
       + (v75 << 6)
       + (v75 >> 2)
       - 0x61C8864680B583E9) ^ v75;
  v78 = (re::ecs2::ParticleEmitter::hash((re::ecs2::VFXEmitterComponentState *)((char *)this + 240))
       + (v77 << 6)
       + (v77 >> 2)
       - 0x61C8864680B583E9) ^ v77;
  return (re::ecs2::ParticleEmitter::hash((re::ecs2::VFXEmitterComponentState *)((char *)this + 640))
        + (v78 << 6)
        + (v78 >> 2)
        - 0x61C8864680B583E9) ^ v78;
}

uint64_t re::ecs2::VFXEmitterComponent::VFXEmitterComponent(re::ecs2::VFXEmitterComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v15;
  _OWORD __src[325];
  uint64_t v17;

  v1 = MEMORY[0x24BDAC7A8](this);
  v17 = *MEMORY[0x24BDAC8D0];
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED60B08;
  re::ecs2::VFXSceneComponent::createDetachedSceneComponent((_QWORD *)(v2 + 32));
  *(_BYTE *)(v1 + 40) = 0;
  re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState((re::ecs2::VFXEmitterComponentState *)(v1 + 48));
  re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState((re::ecs2::VFXEmitterComponentState *)(v1 + 1136));
  *(_OWORD *)(v1 + 2232) = 0u;
  *(_QWORD *)(v1 + 2224) = v1 + 2232;
  *(_QWORD *)(v1 + 2248) = 0;
  *(_OWORD *)(v1 + 2256) = 0u;
  *(_QWORD *)&__src[0] = 0;
  *((_QWORD *)&__src[0] + 1) = v1 + 48;
  *(_QWORD *)&__src[1] = v3;
  *(_OWORD *)((char *)&__src[1] + 8) = 0u;
  *((_QWORD *)&__src[2] + 1) = 1;
  *(_QWORD *)&__src[3] = v1 + 56;
  *((_QWORD *)&__src[3] + 1) = v1 + 1144;
  __src[4] = 0u;
  *(_QWORD *)&__src[5] = 2;
  *((_QWORD *)&__src[5] + 1) = v1 + 64;
  *(_QWORD *)&__src[6] = v1 + 1152;
  *(_OWORD *)((char *)&__src[6] + 8) = 0u;
  *((_QWORD *)&__src[7] + 1) = 3;
  *(_QWORD *)&__src[8] = v1 + 72;
  *((_QWORD *)&__src[8] + 1) = v1 + 1160;
  __src[9] = 0u;
  *(_QWORD *)&__src[10] = 4;
  *((_QWORD *)&__src[10] + 1) = v1 + 80;
  *(_QWORD *)&__src[11] = v1 + 1168;
  *(_OWORD *)((char *)&__src[11] + 8) = 0u;
  *((_QWORD *)&__src[12] + 1) = 5;
  *(_QWORD *)&__src[13] = v1 + 88;
  *((_QWORD *)&__src[13] + 1) = v1 + 1176;
  __src[14] = 0u;
  *(_QWORD *)&__src[15] = 6;
  *((_QWORD *)&__src[15] + 1) = v1 + 92;
  *(_OWORD *)((char *)&__src[16] + 8) = 0u;
  *(_QWORD *)&__src[16] = v3 + 44;
  *((_QWORD *)&__src[17] + 1) = 7;
  *(_QWORD *)&__src[18] = v1 + 176;
  *((_QWORD *)&__src[18] + 1) = v1 + 1264;
  __src[19] = 0u;
  *(_QWORD *)&__src[20] = 8;
  *((_QWORD *)&__src[20] + 1) = v1 + 180;
  *(_OWORD *)((char *)&__src[21] + 8) = 0u;
  *(_QWORD *)&__src[21] = v3 + 132;
  *((_QWORD *)&__src[22] + 1) = 9;
  *(_QWORD *)&__src[23] = v1 + 96;
  *((_QWORD *)&__src[23] + 1) = v1 + 1184;
  __src[24] = 0u;
  *(_QWORD *)&__src[25] = 10;
  *((_QWORD *)&__src[25] + 1) = v1 + 112;
  *(_OWORD *)((char *)&__src[26] + 8) = 0u;
  *(_QWORD *)&__src[26] = v1 + 1200;
  *((_QWORD *)&__src[27] + 1) = 11;
  *(_QWORD *)&__src[28] = v1 + 128;
  *((_QWORD *)&__src[28] + 1) = v1 + 1216;
  __src[29] = 0u;
  *(_QWORD *)&__src[30] = 12;
  *((_QWORD *)&__src[30] + 1) = v1 + 160;
  *(_OWORD *)((char *)&__src[31] + 8) = 0u;
  *(_QWORD *)&__src[31] = v1 + 1248;
  *((_QWORD *)&__src[32] + 1) = 13;
  *(_QWORD *)&__src[33] = v1 + 184;
  *((_QWORD *)&__src[33] + 1) = v1 + 1272;
  __src[34] = 0u;
  *(_QWORD *)&__src[35] = 14;
  *((_QWORD *)&__src[35] + 1) = v1 + 188;
  *(_QWORD *)&__src[36] = v3 + 140;
  *(_OWORD *)((char *)&__src[36] + 8) = 0u;
  *((_QWORD *)&__src[37] + 1) = 15;
  *(_QWORD *)&__src[38] = v1 + 144;
  *((_QWORD *)&__src[38] + 1) = v1 + 1232;
  __src[39] = 0u;
  *(_QWORD *)&__src[40] = 16;
  *((_QWORD *)&__src[40] + 1) = v1 + 196;
  *(_QWORD *)&__src[41] = v3 + 148;
  *(_OWORD *)((char *)&__src[41] + 8) = 0u;
  *((_QWORD *)&__src[42] + 1) = 17;
  *(_QWORD *)&__src[43] = v1 + 197;
  *((_QWORD *)&__src[43] + 1) = v3 + 149;
  __src[44] = 0u;
  *(_QWORD *)&__src[45] = 18;
  *((_QWORD *)&__src[45] + 1) = v1 + 208;
  *(_QWORD *)&__src[46] = v1 + 1296;
  *(_OWORD *)((char *)&__src[46] + 8) = 0u;
  *((_QWORD *)&__src[47] + 1) = 19;
  *(_QWORD *)&__src[48] = v1 + 224;
  *((_QWORD *)&__src[48] + 1) = v1 + 1312;
  __src[49] = 0u;
  *(_QWORD *)&__src[50] = 20;
  *((_QWORD *)&__src[50] + 1) = v1 + 232;
  *(_QWORD *)&__src[51] = v1 + 1320;
  *(_OWORD *)((char *)&__src[51] + 8) = 0u;
  *((_QWORD *)&__src[52] + 1) = 21;
  *(_QWORD *)&__src[53] = v1 + 240;
  *((_QWORD *)&__src[53] + 1) = v1 + 1328;
  __src[54] = 0u;
  *(_QWORD *)&__src[55] = 22;
  *((_QWORD *)&__src[55] + 1) = v1 + 192;
  *(_QWORD *)&__src[56] = v1 + 1280;
  *(_OWORD *)((char *)&__src[56] + 8) = 0u;
  *((_QWORD *)&__src[57] + 1) = 23;
  *(_QWORD *)&__src[58] = v1 + 252;
  *((_QWORD *)&__src[58] + 1) = v3 + 204;
  __src[59] = 0u;
  *(_QWORD *)&__src[60] = 24;
  *((_QWORD *)&__src[60] + 1) = v1 + 256;
  *(_QWORD *)&__src[61] = v1 + 1344;
  *(_OWORD *)((char *)&__src[61] + 8) = 0u;
  *((_QWORD *)&__src[62] + 1) = 25;
  *(_QWORD *)&__src[63] = v1 + 260;
  *((_QWORD *)&__src[63] + 1) = v3 + 212;
  __src[64] = 0u;
  *(_QWORD *)&__src[65] = 26;
  *((_QWORD *)&__src[65] + 1) = v1 + 264;
  *(_QWORD *)&__src[66] = v1 + 1352;
  *(_OWORD *)((char *)&__src[66] + 8) = 0u;
  *((_QWORD *)&__src[67] + 1) = 27;
  *(_QWORD *)&__src[68] = v1 + 268;
  *((_QWORD *)&__src[68] + 1) = v3 + 220;
  __src[69] = 0u;
  *(_QWORD *)&__src[70] = 28;
  *((_QWORD *)&__src[70] + 1) = v1 + 288;
  *(_QWORD *)&__src[71] = v1 + 1376;
  *(_OWORD *)((char *)&__src[71] + 8) = 0u;
  *((_QWORD *)&__src[72] + 1) = 29;
  *(_QWORD *)&__src[73] = v1 + 292;
  *((_QWORD *)&__src[73] + 1) = v3 + 244;
  __src[74] = 0u;
  *(_QWORD *)&__src[75] = 30;
  *((_QWORD *)&__src[75] + 1) = v1 + 296;
  *(_QWORD *)&__src[76] = v1 + 1384;
  *(_OWORD *)((char *)&__src[76] + 8) = 0u;
  *((_QWORD *)&__src[77] + 1) = 31;
  *(_QWORD *)&__src[78] = v1 + 300;
  *((_QWORD *)&__src[78] + 1) = v3 + 252;
  __src[79] = 0u;
  *(_QWORD *)&__src[80] = 32;
  *((_QWORD *)&__src[80] + 1) = v1 + 304;
  *(_QWORD *)&__src[81] = v1 + 1392;
  *(_OWORD *)((char *)&__src[81] + 8) = 0u;
  *((_QWORD *)&__src[82] + 1) = 33;
  *(_QWORD *)&__src[83] = v1 + 320;
  *((_QWORD *)&__src[83] + 1) = v1 + 1408;
  __src[84] = 0u;
  *(_QWORD *)&__src[85] = 34;
  *((_QWORD *)&__src[85] + 1) = v1 + 324;
  *(_QWORD *)&__src[86] = v1 + 1412;
  *(_OWORD *)((char *)&__src[86] + 8) = 0u;
  *((_QWORD *)&__src[87] + 1) = 35;
  *(_QWORD *)&__src[88] = v1 + 328;
  *((_QWORD *)&__src[88] + 1) = v1 + 1416;
  __src[89] = 0u;
  *(_QWORD *)&__src[90] = 36;
  *((_QWORD *)&__src[90] + 1) = v1 + 336;
  *(_QWORD *)&__src[91] = v1 + 1424;
  *(_OWORD *)((char *)&__src[91] + 8) = 0u;
  *((_QWORD *)&__src[92] + 1) = 37;
  *(_QWORD *)&__src[93] = v1 + 352;
  *((_QWORD *)&__src[93] + 1) = v1 + 1440;
  __src[94] = 0u;
  *(_QWORD *)&__src[95] = 38;
  *((_QWORD *)&__src[95] + 1) = v1 + 356;
  *(_QWORD *)&__src[96] = v1 + 1444;
  *(_OWORD *)((char *)&__src[96] + 8) = 0u;
  *((_QWORD *)&__src[97] + 1) = 39;
  *(_QWORD *)&__src[98] = v1 + 360;
  *((_QWORD *)&__src[98] + 1) = v1 + 1448;
  __src[99] = 0u;
  *(_QWORD *)&__src[100] = 40;
  *((_QWORD *)&__src[100] + 1) = v1 + 368;
  *(_QWORD *)&__src[101] = v1 + 1456;
  *(_OWORD *)((char *)&__src[101] + 8) = 0u;
  *((_QWORD *)&__src[102] + 1) = 41;
  *(_QWORD *)&__src[103] = v1 + 376;
  *((_QWORD *)&__src[103] + 1) = v1 + 1464;
  __src[104] = 0u;
  *(_QWORD *)&__src[105] = 42;
  *((_QWORD *)&__src[105] + 1) = v1 + 384;
  *(_QWORD *)&__src[106] = v1 + 1472;
  *(_OWORD *)((char *)&__src[106] + 8) = 0u;
  *((_QWORD *)&__src[107] + 1) = 43;
  *(_QWORD *)&__src[108] = v1 + 388;
  *((_QWORD *)&__src[108] + 1) = v1 + 1476;
  __src[109] = 0u;
  *(_QWORD *)&__src[110] = 44;
  *((_QWORD *)&__src[110] + 1) = v1 + 392;
  *(_QWORD *)&__src[111] = v1 + 1480;
  *(_OWORD *)((char *)&__src[111] + 8) = 0u;
  *((_QWORD *)&__src[112] + 1) = 45;
  *(_QWORD *)&__src[113] = v1 + 396;
  *((_QWORD *)&__src[113] + 1) = v1 + 1484;
  __src[114] = 0u;
  *(_QWORD *)&__src[115] = 46;
  *((_QWORD *)&__src[115] + 1) = v1 + 400;
  *(_QWORD *)&__src[116] = v1 + 1488;
  *(_OWORD *)((char *)&__src[116] + 8) = 0u;
  *((_QWORD *)&__src[117] + 1) = 47;
  *(_QWORD *)&__src[118] = v1 + 404;
  *((_QWORD *)&__src[118] + 1) = v1 + 1492;
  __src[119] = 0u;
  *(_QWORD *)&__src[120] = 48;
  *((_QWORD *)&__src[120] + 1) = v1 + 408;
  *(_QWORD *)&__src[121] = v1 + 1496;
  *(_OWORD *)((char *)&__src[121] + 8) = 0u;
  *((_QWORD *)&__src[122] + 1) = 49;
  *(_QWORD *)&__src[123] = v1 + 412;
  *((_QWORD *)&__src[123] + 1) = v1 + 1500;
  __src[124] = 0u;
  *(_QWORD *)&__src[125] = 50;
  *((_QWORD *)&__src[125] + 1) = v1 + 416;
  *(_QWORD *)&__src[126] = v1 + 1504;
  *(_OWORD *)((char *)&__src[126] + 8) = 0u;
  *((_QWORD *)&__src[127] + 1) = 51;
  *(_QWORD *)&__src[128] = v1 + 432;
  *((_QWORD *)&__src[128] + 1) = v1 + 1520;
  __src[129] = 0u;
  *(_QWORD *)&__src[130] = 52;
  *((_QWORD *)&__src[130] + 1) = v1 + 448;
  *(_QWORD *)&__src[131] = v1 + 1536;
  *(_OWORD *)((char *)&__src[131] + 8) = 0u;
  *((_QWORD *)&__src[132] + 1) = 53;
  *(_QWORD *)&__src[133] = v1 + 464;
  *((_QWORD *)&__src[133] + 1) = v1 + 1552;
  __src[134] = 0u;
  *(_QWORD *)&__src[135] = 54;
  *((_QWORD *)&__src[135] + 1) = v1 + 480;
  *(_QWORD *)&__src[136] = v1 + 1568;
  *(_OWORD *)((char *)&__src[136] + 8) = 0u;
  *((_QWORD *)&__src[137] + 1) = 55;
  *(_QWORD *)&__src[138] = v1 + 496;
  *((_QWORD *)&__src[138] + 1) = v1 + 1584;
  __src[139] = 0u;
  *(_QWORD *)&__src[140] = 56;
  *((_QWORD *)&__src[140] + 1) = v1 + 512;
  *(_QWORD *)&__src[141] = v1 + 1600;
  *(_OWORD *)((char *)&__src[141] + 8) = 0u;
  *((_QWORD *)&__src[142] + 1) = 57;
  *(_QWORD *)&__src[143] = v1 + 513;
  *((_QWORD *)&__src[143] + 1) = v1 + 1601;
  __src[144] = 0u;
  *(_QWORD *)&__src[145] = 58;
  *((_QWORD *)&__src[145] + 1) = v1 + 516;
  *(_QWORD *)&__src[146] = v1 + 1604;
  *(_OWORD *)((char *)&__src[146] + 8) = 0u;
  *((_QWORD *)&__src[147] + 1) = 59;
  *(_QWORD *)&__src[148] = v1 + 520;
  *((_QWORD *)&__src[148] + 1) = v1 + 1608;
  __src[149] = 0u;
  *(_QWORD *)&__src[150] = 60;
  *((_QWORD *)&__src[150] + 1) = v1 + 524;
  *(_QWORD *)&__src[151] = v1 + 1612;
  *(_OWORD *)((char *)&__src[151] + 8) = 0u;
  *((_QWORD *)&__src[152] + 1) = 61;
  *(_QWORD *)&__src[153] = v1 + 528;
  *((_QWORD *)&__src[153] + 1) = v1 + 1616;
  __src[154] = 0u;
  *(_QWORD *)&__src[155] = 62;
  __src[159] = 0u;
  *(_QWORD *)&__src[160] = 64;
  *((_QWORD *)&__src[160] + 1) = v1 + 560;
  *(_QWORD *)&__src[161] = v1 + 1648;
  *(_OWORD *)((char *)&__src[161] + 8) = 0u;
  *((_QWORD *)&__src[162] + 1) = 65;
  *(_QWORD *)&__src[163] = v1 + 576;
  *((_QWORD *)&__src[163] + 1) = v1 + 1664;
  __src[164] = 0u;
  *(_QWORD *)&__src[165] = 66;
  *((_QWORD *)&__src[165] + 1) = v1 + 592;
  *(_QWORD *)&__src[166] = v1 + 1680;
  *(_OWORD *)((char *)&__src[166] + 8) = 0u;
  *((_QWORD *)&__src[167] + 1) = 67;
  *(_QWORD *)&__src[168] = v1 + 596;
  *((_QWORD *)&__src[168] + 1) = v1 + 1684;
  __src[169] = 0u;
  *(_QWORD *)&__src[170] = 68;
  *((_QWORD *)&__src[170] + 1) = v1 + 600;
  *(_QWORD *)&__src[171] = v1 + 1688;
  *(_OWORD *)((char *)&__src[171] + 8) = 0u;
  *((_QWORD *)&__src[172] + 1) = 69;
  *(_QWORD *)&__src[173] = v1 + 604;
  *((_QWORD *)&__src[173] + 1) = v1 + 1692;
  __src[174] = 0u;
  *(_QWORD *)&__src[175] = 70;
  *((_QWORD *)&__src[175] + 1) = v1 + 632;
  *(_QWORD *)&__src[176] = v1 + 1720;
  *(_OWORD *)((char *)&__src[176] + 8) = 0u;
  *((_QWORD *)&__src[177] + 1) = 71;
  *(_QWORD *)&__src[178] = v1 + 640;
  *((_QWORD *)&__src[178] + 1) = v1 + 1728;
  __src[179] = 0u;
  *(_QWORD *)&__src[180] = 72;
  *((_QWORD *)&__src[180] + 1) = v1 + 648;
  *(_QWORD *)&__src[181] = v1 + 1736;
  *(_OWORD *)((char *)&__src[181] + 8) = 0u;
  *((_QWORD *)&__src[182] + 1) = 73;
  *(_QWORD *)&__src[183] = v1 + 656;
  *((_QWORD *)&__src[183] + 1) = v1 + 1744;
  __src[184] = 0u;
  *(_QWORD *)&__src[185] = 74;
  *((_QWORD *)&__src[185] + 1) = v1 + 664;
  *(_QWORD *)&__src[186] = v1 + 1752;
  *(_OWORD *)((char *)&__src[186] + 8) = 0u;
  *((_QWORD *)&__src[187] + 1) = 75;
  *(_QWORD *)&__src[188] = v1 + 672;
  *((_QWORD *)&__src[188] + 1) = v1 + 1760;
  __src[189] = 0u;
  *(_QWORD *)&__src[190] = 76;
  *((_QWORD *)&__src[190] + 1) = v1 + 676;
  *(_QWORD *)&__src[191] = v1 + 1764;
  *(_OWORD *)((char *)&__src[191] + 8) = 0u;
  *((_QWORD *)&__src[192] + 1) = 77;
  *(_QWORD *)&__src[193] = v1 + 680;
  *((_QWORD *)&__src[193] + 1) = v1 + 1768;
  __src[194] = 0u;
  *(_QWORD *)&__src[195] = 78;
  *((_QWORD *)&__src[195] + 1) = v1 + 684;
  *(_QWORD *)&__src[196] = v1 + 1772;
  *(_OWORD *)((char *)&__src[196] + 8) = 0u;
  *((_QWORD *)&__src[197] + 1) = 79;
  *(_QWORD *)&__src[198] = v1 + 688;
  *((_QWORD *)&__src[198] + 1) = v1 + 1776;
  __src[199] = 0u;
  *(_QWORD *)&__src[200] = 80;
  *((_QWORD *)&__src[200] + 1) = v1 + 692;
  *(_QWORD *)&__src[201] = v1 + 1780;
  *(_OWORD *)((char *)&__src[201] + 8) = 0u;
  *((_QWORD *)&__src[202] + 1) = 81;
  *(_QWORD *)&__src[203] = v1 + 696;
  *((_QWORD *)&__src[203] + 1) = v1 + 1784;
  __src[204] = 0u;
  *(_QWORD *)&__src[205] = 82;
  *((_QWORD *)&__src[205] + 1) = v1 + 700;
  *(_QWORD *)&__src[206] = v1 + 1788;
  *(_OWORD *)((char *)&__src[206] + 8) = 0u;
  *((_QWORD *)&__src[207] + 1) = 83;
  *(_QWORD *)&__src[208] = v1 + 704;
  *((_QWORD *)&__src[208] + 1) = v1 + 1792;
  __src[209] = 0u;
  *(_QWORD *)&__src[210] = 84;
  *((_QWORD *)&__src[210] + 1) = v1 + 720;
  *(_QWORD *)&__src[211] = v1 + 1808;
  *(_OWORD *)((char *)&__src[211] + 8) = 0u;
  *((_QWORD *)&__src[212] + 1) = 85;
  *(_QWORD *)&__src[213] = v1 + 724;
  *((_QWORD *)&__src[213] + 1) = v1 + 1812;
  __src[214] = 0u;
  *(_QWORD *)&__src[215] = 86;
  *((_QWORD *)&__src[215] + 1) = v1 + 728;
  *(_QWORD *)&__src[216] = v1 + 1816;
  *(_OWORD *)((char *)&__src[216] + 8) = 0u;
  *((_QWORD *)&__src[217] + 1) = 87;
  *(_QWORD *)&__src[218] = v1 + 736;
  *((_QWORD *)&__src[218] + 1) = v1 + 1824;
  __src[219] = 0u;
  *(_QWORD *)&__src[220] = 88;
  *((_QWORD *)&__src[220] + 1) = v1 + 752;
  *(_QWORD *)&__src[221] = v1 + 1840;
  *(_OWORD *)((char *)&__src[221] + 8) = 0u;
  *((_QWORD *)&__src[222] + 1) = 89;
  *(_QWORD *)&__src[223] = v1 + 756;
  *((_QWORD *)&__src[223] + 1) = v1 + 1844;
  __src[224] = 0u;
  *(_QWORD *)&__src[225] = 90;
  *((_QWORD *)&__src[225] + 1) = v1 + 760;
  *(_QWORD *)&__src[226] = v1 + 1848;
  *(_OWORD *)((char *)&__src[226] + 8) = 0u;
  *((_QWORD *)&__src[227] + 1) = 91;
  *(_QWORD *)&__src[228] = v1 + 768;
  *((_QWORD *)&__src[228] + 1) = v1 + 1856;
  __src[229] = 0u;
  *(_QWORD *)&__src[230] = 92;
  *((_QWORD *)&__src[230] + 1) = v1 + 776;
  *(_QWORD *)&__src[231] = v1 + 1864;
  *(_OWORD *)((char *)&__src[231] + 8) = 0u;
  *((_QWORD *)&__src[232] + 1) = 93;
  *(_QWORD *)&__src[233] = v1 + 784;
  *((_QWORD *)&__src[233] + 1) = v1 + 1872;
  __src[234] = 0u;
  *(_QWORD *)&__src[235] = 94;
  *((_QWORD *)&__src[235] + 1) = v1 + 788;
  *(_QWORD *)&__src[236] = v1 + 1876;
  *(_OWORD *)((char *)&__src[236] + 8) = 0u;
  *((_QWORD *)&__src[237] + 1) = 95;
  *(_QWORD *)&__src[238] = v1 + 792;
  *((_QWORD *)&__src[238] + 1) = v1 + 1880;
  __src[239] = 0u;
  *(_QWORD *)&__src[240] = 96;
  *((_QWORD *)&__src[240] + 1) = v1 + 796;
  *(_QWORD *)&__src[241] = v1 + 1884;
  *(_OWORD *)((char *)&__src[241] + 8) = 0u;
  *((_QWORD *)&__src[242] + 1) = 97;
  *(_QWORD *)&__src[243] = v1 + 800;
  *((_QWORD *)&__src[243] + 1) = v1 + 1888;
  __src[244] = 0u;
  *(_QWORD *)&__src[245] = 98;
  *((_QWORD *)&__src[245] + 1) = v1 + 804;
  *(_QWORD *)&__src[246] = v1 + 1892;
  *(_OWORD *)((char *)&__src[246] + 8) = 0u;
  *((_QWORD *)&__src[247] + 1) = 99;
  *(_QWORD *)&__src[248] = v1 + 808;
  *((_QWORD *)&__src[248] + 1) = v1 + 1896;
  __src[249] = 0u;
  *(_QWORD *)&__src[250] = 100;
  *((_QWORD *)&__src[250] + 1) = v1 + 812;
  *(_QWORD *)&__src[251] = v1 + 1900;
  *(_OWORD *)((char *)&__src[251] + 8) = 0u;
  *((_QWORD *)&__src[252] + 1) = 101;
  *(_QWORD *)&__src[253] = v1 + 816;
  *((_QWORD *)&__src[253] + 1) = v1 + 1904;
  __src[254] = 0u;
  *(_QWORD *)&__src[255] = 102;
  *((_QWORD *)&__src[255] + 1) = v1 + 832;
  *(_QWORD *)&__src[256] = v1 + 1920;
  *(_OWORD *)((char *)&__src[256] + 8) = 0u;
  *((_QWORD *)&__src[257] + 1) = 103;
  *(_QWORD *)&__src[258] = v1 + 848;
  *((_QWORD *)&__src[258] + 1) = v1 + 1936;
  __src[259] = 0u;
  *(_QWORD *)&__src[260] = 104;
  *((_QWORD *)&__src[260] + 1) = v1 + 864;
  *(_QWORD *)&__src[261] = v1 + 1952;
  *(_OWORD *)((char *)&__src[261] + 8) = 0u;
  *((_QWORD *)&__src[262] + 1) = 105;
  *(_QWORD *)&__src[263] = v1 + 880;
  *((_QWORD *)&__src[263] + 1) = v1 + 1968;
  __src[264] = 0u;
  *(_QWORD *)&__src[265] = 106;
  *((_QWORD *)&__src[265] + 1) = v1 + 896;
  *(_QWORD *)&__src[266] = v1 + 1984;
  *(_OWORD *)((char *)&__src[266] + 8) = 0u;
  *((_QWORD *)&__src[267] + 1) = 107;
  *(_QWORD *)&__src[268] = v1 + 912;
  *((_QWORD *)&__src[268] + 1) = v1 + 2000;
  __src[269] = 0u;
  *(_QWORD *)&__src[270] = 108;
  *((_QWORD *)&__src[270] + 1) = v1 + 913;
  *(_QWORD *)&__src[271] = v1 + 2001;
  *(_OWORD *)((char *)&__src[271] + 8) = 0u;
  *((_QWORD *)&__src[272] + 1) = 109;
  *(_QWORD *)&__src[273] = v1 + 916;
  *((_QWORD *)&__src[273] + 1) = v1 + 2004;
  __src[274] = 0u;
  *(_QWORD *)&__src[275] = 110;
  *((_QWORD *)&__src[275] + 1) = v1 + 920;
  *(_QWORD *)&__src[276] = v1 + 2008;
  *(_OWORD *)((char *)&__src[276] + 8) = 0u;
  *((_QWORD *)&__src[277] + 1) = 111;
  *(_QWORD *)&__src[278] = v1 + 924;
  *((_QWORD *)&__src[278] + 1) = v1 + 2012;
  __src[279] = 0u;
  *(_QWORD *)&__src[280] = 112;
  *((_QWORD *)&__src[280] + 1) = v1 + 928;
  *(_QWORD *)&__src[281] = v1 + 2016;
  *(_OWORD *)((char *)&__src[281] + 8) = 0u;
  *((_QWORD *)&__src[282] + 1) = 113;
  *(_QWORD *)&__src[283] = v1 + 932;
  *((_QWORD *)&__src[283] + 1) = v1 + 2020;
  __src[284] = 0u;
  *(_QWORD *)&__src[285] = 114;
  *((_QWORD *)&__src[285] + 1) = v1 + 944;
  *(_QWORD *)&__src[286] = v1 + 2032;
  *(_OWORD *)((char *)&__src[286] + 8) = 0u;
  *((_QWORD *)&__src[287] + 1) = 115;
  *(_QWORD *)&__src[288] = v1 + 960;
  *((_QWORD *)&__src[288] + 1) = v1 + 2048;
  __src[289] = 0u;
  *(_QWORD *)&__src[290] = 116;
  *((_QWORD *)&__src[290] + 1) = v1 + 976;
  *(_QWORD *)&__src[291] = v1 + 2064;
  *(_OWORD *)((char *)&__src[291] + 8) = 0u;
  *((_QWORD *)&__src[292] + 1) = 117;
  *(_QWORD *)&__src[293] = v1 + 992;
  *((_QWORD *)&__src[293] + 1) = v1 + 2080;
  __src[294] = 0u;
  *(_QWORD *)&__src[295] = 118;
  *((_QWORD *)&__src[295] + 1) = v1 + 996;
  *(_QWORD *)&__src[296] = v1 + 2084;
  *(_OWORD *)((char *)&__src[296] + 8) = 0u;
  *((_QWORD *)&__src[297] + 1) = 119;
  *(_QWORD *)&__src[298] = v1 + 1000;
  *((_QWORD *)&__src[298] + 1) = v1 + 2088;
  __src[299] = 0u;
  *(_QWORD *)&__src[300] = 120;
  *((_QWORD *)&__src[300] + 1) = v1 + 1004;
  *(_QWORD *)&__src[301] = v1 + 2092;
  *(_OWORD *)((char *)&__src[301] + 8) = 0u;
  *((_QWORD *)&__src[302] + 1) = 121;
  *(_QWORD *)&__src[303] = v1 + 1032;
  *((_QWORD *)&__src[303] + 1) = v1 + 2120;
  __src[304] = 0u;
  *(_QWORD *)&__src[305] = 122;
  *((_QWORD *)&__src[305] + 1) = v1 + 1040;
  *(_QWORD *)&__src[306] = v1 + 2128;
  *(_OWORD *)((char *)&__src[306] + 8) = 0u;
  *((_QWORD *)&__src[307] + 1) = 123;
  *(_QWORD *)&__src[308] = v1 + 1048;
  *((_QWORD *)&__src[308] + 1) = v1 + 2136;
  __src[309] = 0u;
  *(_QWORD *)&__src[310] = 124;
  *((_QWORD *)&__src[310] + 1) = v1 + 1056;
  *(_QWORD *)&__src[311] = v1 + 2144;
  *(_OWORD *)((char *)&__src[311] + 8) = 0u;
  *((_QWORD *)&__src[312] + 1) = 125;
  *(_QWORD *)&__src[313] = v1 + 1064;
  *((_QWORD *)&__src[313] + 1) = v1 + 2152;
  __src[314] = 0u;
  *(_QWORD *)&__src[315] = 126;
  *((_QWORD *)&__src[315] + 1) = v1 + 1072;
  *(_QWORD *)&__src[316] = v1 + 2160;
  *(_OWORD *)((char *)&__src[316] + 8) = 0u;
  *((_QWORD *)&__src[317] + 1) = 127;
  *(_QWORD *)&__src[318] = v1 + 1076;
  *((_QWORD *)&__src[318] + 1) = v1 + 2164;
  __src[319] = 0u;
  *(_QWORD *)&__src[320] = 128;
  *((_QWORD *)&__src[320] + 1) = v1 + 1080;
  *(_QWORD *)&__src[321] = v1 + 2168;
  *(_OWORD *)((char *)&__src[321] + 8) = 0u;
  *((_QWORD *)&__src[322] + 1) = 129;
  *(_QWORD *)&__src[323] = v1 + 1084;
  *((_QWORD *)&__src[323] + 1) = v1 + 2172;
  __src[324] = 0u;
  *((_QWORD *)&__src[155] + 1) = v1 + 532;
  *((_QWORD *)&__src[158] + 1) = v1 + 1632;
  v4 = *(char **)(v1 + 2248);
  *(_QWORD *)&__src[156] = v1 + 1620;
  v5 = *(_QWORD *)(v1 + 2264);
  *(_OWORD *)((char *)&__src[156] + 8) = 0u;
  *((_QWORD *)&__src[157] + 1) = 63;
  *(_QWORD *)&__src[158] = v1 + 544;
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - (uint64_t)v4) >> 3) < 0x82)
  {
    if (v4)
    {
      *(_QWORD *)(v1 + 2256) = v4;
      operator delete(v4);
      v5 = 0;
      *(_QWORD *)(v1 + 2248) = 0;
      *(_QWORD *)(v1 + 2256) = 0;
      *(_QWORD *)(v1 + 2264) = 0;
    }
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    v7 = 2 * v6;
    if (2 * v6 <= 0x82)
      v7 = 130;
    if (v6 >= 0x333333333333333)
      v8 = 0x666666666666666;
    else
      v8 = v7;
    if (v8 > 0x666666666666666)
      abort();
    v9 = 5 * v8;
    v4 = (char *)operator new(40 * v8);
    *(_QWORD *)(v1 + 2248) = v4;
    *(_QWORD *)(v1 + 2264) = &v4[8 * v9];
    memcpy(v4, __src, 0x1450uLL);
    goto LABEL_17;
  }
  v10 = *(_BYTE **)(v1 + 2256);
  v11 = v10 - v4;
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v4) >> 3);
  if (v12 > 0x81)
  {
    memmove(v4, __src, 0x1450uLL);
LABEL_17:
    v13 = 130;
    goto LABEL_18;
  }
  if (v10 != v4)
  {
    memmove(v4, __src, v10 - v4);
    v4 = *(char **)(v1 + 2256);
  }
  if (v11 == 5200)
  {
    v13 = 0;
  }
  else
  {
    v15 = 5200 - v11;
    memmove(v4, (char *)__src + 40 * v12, v15);
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
  }
LABEL_18:
  *(_QWORD *)(v1 + 2256) = &v4[40 * v13];
  return v1;
}

void re::ecs2::VFXEmitterComponent::~VFXEmitterComponent(re::ecs2::VFXEmitterComponent *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED60B08;
  v2 = (void *)*((_QWORD *)this + 281);
  *((_QWORD *)this + 282) = v2;
  if (v2)
    operator delete(v2);
  std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(*((char **)this + 279));
  v3 = *((_QWORD *)this + 272);
  if (v3)
  {
    if (*((_QWORD *)this + 276))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 276) = 0;
    *((_QWORD *)this + 273) = 0;
    *((_QWORD *)this + 274) = 0;
    *((_QWORD *)this + 272) = 0;
    ++*((_DWORD *)this + 550);
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 2096));
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 1696));
  v4 = *((_QWORD *)this + 136);
  if (v4)
  {
    if (*((_QWORD *)this + 140))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 140) = 0;
    *((_QWORD *)this + 137) = 0;
    *((_QWORD *)this + 138) = 0;
    *((_QWORD *)this + 136) = 0;
    ++*((_DWORD *)this + 278);
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 1008));
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 608));
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {

    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::VFXEmitterComponent::~VFXEmitterComponent(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::ecs2::VFXEmitterComponent::loadAssetsIfNeeded(uint64_t a1, AssetService *a2, uint64_t a3, uint64_t *a4)
{
  re::ecs2::VFXEmitterComponent::loadTextureIfNeeded((re::ecs2::VFXEmitterComponent *)a1, a2, (re::AssetHandle *)(a1 + 608), "mainTexture");
  re::ecs2::VFXEmitterComponent::loadTextureIfNeeded((re::ecs2::VFXEmitterComponent *)a1, a2, (re::AssetHandle *)(a1 + 1008), "spawnTexture");
  return re::ecs2::VFXEmitterComponent::loadSceneComponentIfNeeded((_QWORD *)a1, a3, a4);
}

void re::ecs2::VFXEmitterComponent::loadTextureIfNeeded(re::ecs2::VFXEmitterComponent *this, AssetService *a2, re::AssetHandle *a3, char *__s)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE v16[24];
  void *__p[2];
  uint64_t v18;
  void **v19;

  v8 = (uint64_t **)((char *)this + 2224);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  v19 = __p;
  v9 = *((_QWORD *)std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v19)+ 7);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p[0]);
    if (v9)
      return;
  }
  else if (v9)
  {
    return;
  }
  v10 = *((_QWORD *)a3 + 1);
  if (!v10)
  {
    (*((void (**)(void **__return_ptr, AssetService *, const char *))a2->var0 + 1))(__p, a2, "framework:com.apple.CoreRE/particle_circle.png");
    v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_OWORD *)__p = v11;
    v12 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 2) = v18;
    v18 = v12;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)__p);
    v10 = *((_QWORD *)a3 + 1);
    if (!v10)
      goto LABEL_11;
  }
  v13 = atomic_load((unsigned int *)(v10 + 704));
  if (v13 == 1)
    return;
  v14 = *((_QWORD *)a3 + 1);
  if (v14 && (v15 = atomic_load((unsigned int *)(v14 + 704)), v15 == 2))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v16, a3);
    re::ecs2::VFXEmitterComponent::bindTexture((uint64_t)this, (re::TextureAsset *)v16, __s);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  }
  else
  {
LABEL_11:
    re::AssetHandle::loadAsync(a3);
  }
}

_QWORD *re::ecs2::VFXEmitterComponent::loadSceneComponentIfNeeded(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  if (a2)
  {
    v3 = result;
    if (!*((_BYTE *)result + 40))
    {
      v6 = result[4];
      v7 = *(_QWORD *)(a2 + 16);
      if (v7)
        v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      else
        v8 = *(_QWORD *)(a2 + 216);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (const re::AssetHandle *)(v8 + 72));
      re::ecs2::VFXSceneComponent::setVFXFromParticleEmitter(v6, (const re::AssetHandle *)v9);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(v3[4] + 112, a2 + 112);
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::operator=(*(_QWORD *)(v3[4] + 216) + 32, (uint64_t *)(*(_QWORD *)(a2 + 216) + 32));
      re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(v3[4] + 64, a2 + 64);
      *(_BYTE *)(v3[4] + 213) = 1;
      result = re::ecs2::VFXEmitterComponent::setBindingRuntimeData(v3, a3);
      *((_BYTE *)v3 + 40) = 1;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

_QWORD *re::ecs2::VFXEmitterComponent::setBindingRuntimeData(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      v5 = v4[281] + 40 * *(_QWORD *)v2;
      v6 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v5 + 24) = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v5 + 32) = v6;
      result = memcpy(*(void **)(v5 + 16), *(const void **)(v2 + 56), *(_QWORD *)(v2 + 40));
      v2 += 64;
    }
    while (v2 != v3);
  }
  return result;
}

void re::ecs2::VFXEmitterComponent::bindTexture(uint64_t a1, re::TextureAsset *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::VFXEmitterComponent *v16;
  const re::ecs2::VFXSceneComponent *v17;
  void *__p[2];
  char v19;
  void **v20;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
    v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  else
    v8 = *(_QWORD *)(v6 + 216);
  v9 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v8 + 72));
  if (v9 && *(_BYTE *)(a1 + 40) && !*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
  {
    objc_msgSend(*(id *)(v9 + 64), "scene");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "effects");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "effect");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v12, "fetchClientTextureIDWithNamed:", v13);

      if (v14 >= 1)
      {
        v15 = re::AssetHandle::loadedAsset<re::TextureAsset>(a2);
        if (v15)
        {
          if (*(_DWORD *)(v15 + 240))
          {
            v16 = (re::ecs2::VFXEmitterComponent *)std::__throw_bad_variant_access[abi:nn180100]();
            re::ecs2::VFXEmitterComponent::loadBindingValues(v16, v17);
            return;
          }
          objc_msgSend(v12, "setClientTextureWithId:texture:", v14, *(_QWORD *)(v15 + 160));
          std::string::basic_string[abi:nn180100]<0>(__p, a3);
          v20 = __p;
          *((_QWORD *)std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 2224), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v20)+ 7) = v14;
          if (v19 < 0)
            operator delete(__p[0]);
        }
      }
    }

  }
}

void re::ecs2::VFXEmitterComponent::loadBindingValues(re::ecs2::VFXEmitterComponent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  re::ecs2::VFXEmitterComponent *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 (*v34)(__n128 *, __n128 *);
  void (*v35)(uint64_t);
  const char *v36;
  uint64_t v37[2];
  uint64_t v38;
  void **v39[5];

  v5 = *((_QWORD *)this + 2);
  if (v5)
    v6 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  else
    v6 = *((_QWORD *)this + 27);
  v7 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v6 + 72));
  if (v7)
  {
    objc_msgSend(*(id *)(v7 + 64), "scene");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "effects");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "firstObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
    {
      v12 = objc_msgSend(v10, "lookupObjectIDByName:", CFSTR("Emitter"));
      v13 = objc_msgSend(v11, "lookupObjectIDByName:", CFSTR("SecondaryEmitter"));
      v31 = 0;
      v32 = &v31;
      v33 = 0x4812000000;
      v34 = __Block_byref_object_copy__7;
      v35 = __Block_byref_object_dispose__7;
      v36 = "";
      v37[0] = 0;
      v37[1] = 0;
      v38 = 0;
      v39[4] = (void **)&v38;
      v39[0] = (void **)operator new(0x2080uLL);
      v39[1] = v39[0];
      v39[2] = v39[0];
      v39[3] = v39[0] + 1040;
      std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__swap_out_circular_buffer(v37, v39);
      std::__split_buffer<re::ecs2::VFXEmitterComponent::VFXBindingValue>::~__split_buffer((uint64_t)v39);
      objc_msgSend(v11, "scene");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = ___ZN2re4ecs219VFXEmitterComponent17loadBindingValuesERKNS0_17VFXSceneComponentE_block_invoke;
      v25[3] = &unk_24ED60B50;
      v28 = v13;
      v29 = v12;
      v26 = v11;
      v27 = &v31;
      v30 = this;
      objc_msgSend(v14, "performTransaction:", v25);

      v15 = v32;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      v16 = (__int128 *)v15[6];
      v17 = (__int128 *)v15[7];
      v18 = (char *)v17 - (char *)v16;
      if (v17 != v16)
      {
        if (v18 < 0)
          abort();
        v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v18 >> 6);
        v20 = 0;
        *a2 = v19;
        a2[1] = v19;
        a2[2] = &v19[64 * v21];
        v22 = (uint64_t)(v19 + 24);
        do
        {
          v23 = *v16;
          *(_QWORD *)(v22 - 8) = *((_QWORD *)v16 + 2);
          *(_OWORD *)(v22 - 24) = v23;
          v24 = re::DynamicArray<BOOL>::DynamicArray(v22, (uint64_t *)v16 + 3);
          v16 += 4;
          v20 += 64;
          v22 = v24 + 64;
        }
        while (v16 != v17);
        a2[1] = &v19[v20];
      }

      _Block_object_dispose(&v31, 8);
      v39[0] = (void **)v37;
      std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](v39);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }

  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZN2re4ecs219VFXEmitterComponent17loadBindingValuesERKNS0_17VFXSceneComponentE_block_invoke(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  re::ecs2::VFXSceneComponent *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35[4];
  float *v36;

  v2 = &byte_24ED60BB8;
  v3 = 4160;
  v4 = 0x24BDD1000uLL;
  do
  {
    objc_msgSend(*(id *)(v4 + 1992), "stringWithUTF8String:", *((_QWORD *)v2 - 2));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "hasPrefix:", CFSTR("spawn"));
    v7 = 56;
    if (v6)
      v7 = 48;
    objc_msgSend(*(id *)(a1 + 32), "bindingWith:named:", *(_QWORD *)(a1 + v7), v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v34 = v5;
      v10 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *((_QWORD *)v2 - 3);
      objc_msgSend(v8, "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v12, "copy");
      v14 = objc_msgSend(v9, "type");
      v15 = v14;
      v16 = v10[7];
      v17 = v10[8];
      if (v16 >= v17)
      {
        v33 = v12;
        v19 = a1;
        v20 = v10[6];
        v21 = (uint64_t)(v16 - v20) >> 6;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 58)
          abort();
        v23 = v17 - v20;
        if (v23 >> 5 > v22)
          v22 = v23 >> 5;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFC0)
          v24 = 0x3FFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        v36 = (float *)(v10 + 8);
        v25 = std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v24);
        v26 = (uint64_t)v25 + 64 * v21;
        v35[0] = (uint64_t)v25;
        v35[1] = v26;
        v35[3] = (uint64_t)v25 + 64 * v27;
        *(_QWORD *)v26 = v11;
        *(_QWORD *)(v26 + 8) = v13;
        *(_QWORD *)(v26 + 56) = 0;
        *(_DWORD *)(v26 + 48) = 0;
        *(_QWORD *)(v26 + 32) = 0;
        *(_QWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 16) = v15;
        *(_QWORD *)(v26 + 24) = 0;
        *(_DWORD *)(v26 + 48) = 1;
        v35[2] = v26 + 64;
        std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__swap_out_circular_buffer(v10 + 6, v35);
        v18 = v10[7];
        std::__split_buffer<re::ecs2::VFXEmitterComponent::VFXBindingValue>::~__split_buffer((uint64_t)v35);
        a1 = v19;
        v4 = 0x24BDD1000;
        v12 = v33;
      }
      else
      {
        *(_QWORD *)v16 = v11;
        *(_QWORD *)(v16 + 8) = v13;
        *(_QWORD *)(v16 + 56) = 0;
        *(_QWORD *)(v16 + 16) = v14;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 0;
        *(_QWORD *)(v16 + 40) = 0;
        v18 = v16 + 64;
        *(_DWORD *)(v16 + 48) = 1;
      }
      v10[7] = v18;

      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56);
      v29 = *(re::ecs2::VFXSceneComponent **)(a1 + 64);
      objc_msgSend(v9, "identifier");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      re::ecs2::VFXSceneComponent::bindingStorageWithIdentifier(v29, v30, (uint64_t)v35);

      v31 = objc_msgSend(v9, "type");
      v5 = v34;
      if (v31 > 0xF)
        goto LABEL_18;
      if (((1 << v31) & 0xE3BE) != 0)
      {
        v32 = v28 - 40;
LABEL_17:
        re::DynamicArray<BOOL>::operator=(v32, v35);
        goto LABEL_18;
      }
      if (((1 << v31) & 0x440) != 0)
      {
        v32 = v28 - 40;
        if (!v2[1])
          goto LABEL_17;
        re::DynamicArray<BOOL>::resize(v32, 4uLL);
        **(_DWORD **)(v28 - 8) = *(_QWORD *)v36;
      }
      else if (v31 == 12)
      {
        v32 = v28 - 40;
        if (!*v2)
          goto LABEL_17;
        re::DynamicArray<BOOL>::resize(v32, 8uLL);
        **(double **)(v28 - 8) = *v36;
      }
LABEL_18:
      if (v35[0])
      {
        if (v36)
          (*(void (**)(void))(*(_QWORD *)v35[0] + 40))();
      }
    }

    v2 += 32;
    v3 -= 32;
  }
  while (v3);
}

void re::ecs2::VFXEmitterComponent::update(re::ecs2::VFXEmitterComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  NSString *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  double *v22;
  double *v23;
  float v24;
  float v25;
  BOOL v26;
  const void *v27;
  int v28;
  float v29;
  re::ecs2::VFXSceneComponent *v30;
  NSValue *v31;
  re::ecs2::VFXSceneComponent *v32;
  NSValue *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  void *__p[2];
  char v51;
  void **v52;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = v3
       ? re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType): *(_QWORD *)(v1 + 216);
    v5 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v4 + 72));
    if (v5)
    {
      if (*((_BYTE *)this + 40) && !*(_QWORD *)(*((_QWORD *)this + 4) + 32))
      {
        objc_msgSend(*(id *)(v5 + 64), "scene");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "effects");
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        v9 = *((_QWORD *)this + 138);
        if (v9)
        {
          v10 = *((_QWORD *)this + 140);
          v11 = v10;
          do
          {
            if (!*(_QWORD *)(v11 + 80))
            {
              v8.i64[0] = *(_QWORD *)v11;
              *(_QWORD *)(v11 + 80) = re::ecs2::VFXSceneComponent::addCollisionPlane(*((_QWORD *)this + 4), COERCE_DOUBLE((unint64_t)vzip1q_s32(v8, v8).u32[0]), *(double *)(v11 + 16), *(double *)(v11 + 32), *(double *)(v11 + 48), *(double *)(v11 + 64));
              v10 = *((_QWORD *)this + 140);
              v9 = *((_QWORD *)this + 138);
            }
            v11 += 96;
          }
          while (v11 != v10 + 96 * v9);
        }
        v12 = re::ecs2::VFXEmitterComponentState::hash((re::ecs2::VFXEmitterComponent *)((char *)this + 48));
        if (v12 != re::ecs2::VFXEmitterComponentState::hash((re::ecs2::VFXEmitterComponent *)((char *)this + 1136)))
        {
          if (*((_QWORD *)this + 77) != *((_QWORD *)this + 213))
          {
            std::string::basic_string[abi:nn180100]<0>(__p, "mainTexture");
            v52 = __p;
            *((_QWORD *)std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 278, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52)+ 7) = 0;
            if (v51 < 0)
              operator delete(__p[0]);
          }
          if (*((_QWORD *)this + 127) != *((_QWORD *)this + 263))
          {
            std::string::basic_string[abi:nn180100]<0>(__p, "spawnTexture");
            v52 = __p;
            *((_QWORD *)std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 278, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v52)+ 7) = 0;
            if (v51 < 0)
              operator delete(__p[0]);
          }
          v13 = *((_DWORD *)this + 50);
          v14 = *((_QWORD *)this + 4);
          if (v13 != *((_DWORD *)this + 322))
          {
            *(_BYTE *)(v14 + 360) = v13 != 0;
            if (v13 == 2)
            {
              *(_DWORD *)(v14 + 228) = 0;
              *(_DWORD *)(v14 + 232) = 0;
              ++*(_DWORD *)(v14 + 236);
            }
          }
          v45 = v7;
          v46 = (uint64_t *)((char *)this + 1696);
          v49 = (uint64_t *)((char *)this + 1008);
          v47 = (uint64_t *)((char *)this + 608);
          v48 = (uint64_t *)((char *)this + 2096);
          if (*((_QWORD *)this + 34) != *((_QWORD *)this + 170))
          {
            *(_DWORD *)(v14 + 228) = 0;
            *(_DWORD *)(v14 + 232) = 0;
            ++*(_DWORD *)(v14 + 236);
          }
          *(_DWORD *)(v14 + 352) = *((_DWORD *)this + 62);
          v15 = (uint64_t *)*((_QWORD *)this + 281);
          v16 = (uint64_t *)*((_QWORD *)this + 282);
          while (1)
          {
            if (v15 == v16)
            {
              v34 = *((_OWORD *)this + 16);
              *((_OWORD *)this + 83) = *((_OWORD *)this + 15);
              *((_OWORD *)this + 84) = v34;
              *((_QWORD *)this + 170) = *((_QWORD *)this + 34);
              v35 = *((_OWORD *)this + 12);
              *((_OWORD *)this + 79) = *((_OWORD *)this + 11);
              *((_OWORD *)this + 80) = v35;
              v36 = *((_OWORD *)this + 14);
              *((_OWORD *)this + 81) = *((_OWORD *)this + 13);
              *((_OWORD *)this + 82) = v36;
              v37 = *((_OWORD *)this + 8);
              *((_OWORD *)this + 75) = *((_OWORD *)this + 7);
              *((_OWORD *)this + 76) = v37;
              v38 = *((_OWORD *)this + 10);
              *((_OWORD *)this + 77) = *((_OWORD *)this + 9);
              *((_OWORD *)this + 78) = v38;
              v39 = *((_OWORD *)this + 4);
              *((_OWORD *)this + 71) = *((_OWORD *)this + 3);
              *((_OWORD *)this + 72) = v39;
              v40 = *((_OWORD *)this + 6);
              *((_OWORD *)this + 73) = *((_OWORD *)this + 5);
              *((_OWORD *)this + 74) = v40;
              memcpy((char *)this + 1376, (char *)this + 288, 0x140uLL);
              re::AssetHandle::operator=(v46, v47);
              v41 = *(_OWORD *)((char *)this + 648);
              *(_OWORD *)((char *)this + 1720) = *(_OWORD *)((char *)this + 632);
              *(_OWORD *)((char *)this + 1736) = v41;
              *(_OWORD *)((char *)this + 1752) = *(_OWORD *)((char *)this + 664);
              *(_QWORD *)((char *)this + 1765) = *(_QWORD *)((char *)this + 677);
              memcpy((char *)this + 1776, (char *)this + 688, 0x140uLL);
              re::AssetHandle::operator=(v48, v49);
              v42 = *(_OWORD *)((char *)this + 1048);
              *(_OWORD *)((char *)this + 2120) = *(_OWORD *)((char *)this + 1032);
              *(_OWORD *)((char *)this + 2136) = v42;
              *(_OWORD *)((char *)this + 2152) = *(_OWORD *)((char *)this + 1064);
              *(_QWORD *)((char *)this + 2165) = *(_QWORD *)((char *)this + 1077);
              v43 = *((_QWORD *)this + 136);
              if (*((_QWORD *)this + 272))
              {
                if (v43)
                  re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::copy((void **)this + 272, (uint64_t)this + 1088);
                else
                  *((_QWORD *)this + 274) = 0;
                ++*((_DWORD *)this + 550);
                v7 = v45;
              }
              else
              {
                v7 = v45;
                if (v43)
                {
                  v44 = *((_QWORD *)this + 138);
                  *((_QWORD *)this + 272) = v43;
                  re::DynamicArray<re::RigJoint>::setCapacity((_QWORD *)this + 272, v44);
                  ++*((_DWORD *)this + 550);
                  re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::copy((void **)this + 272, (uint64_t)this + 1088);
                }
              }
              *((_BYTE *)this + 2216) = *((_BYTE *)this + 1128);
              break;
            }
            v17 = (NSString *)(id)v15[3];
            if (!v17)
              goto LABEL_50;
            v18 = v15[4];
            v19 = *v15;
            v21 = v20[24];
            if (v20[24])
            {
              v22 = (double *)v15[1];
              if (!v22)
                goto LABEL_38;
              v23 = (double *)v15[2];
              if (!v23)
                goto LABEL_39;
              v24 = *v22;
              v25 = *v23;
              v26 = v24 == v25;
            }
            else
            {
              v22 = (double *)v15[1];
              if (!v22 || (v27 = (const void *)v15[2]) == 0)
              {
LABEL_38:
                LODWORD(v23) = 0;
                goto LABEL_39;
              }
              v26 = memcmp((const void *)v15[1], v27, *((_QWORD *)v20 + 2)) == 0;
            }
            LODWORD(v23) = !v26;
LABEL_39:
            if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 0x1C)
            {
              v28 = *((unsigned __int8 *)this + 216);
              if ((v23 & 1) != 0 || v28 != *((unsigned __int8 *)this + 1304))
              {
                LODWORD(__p[0]) = 0;
                if (v28)
                  v29 = *(float *)v22;
                else
                  v29 = 0.0;
LABEL_48:
                *(float *)__p = v29;
LABEL_49:
                v30 = (re::ecs2::VFXSceneComponent *)*((_QWORD *)this + 4);
                objc_msgSend(MEMORY[0x24BDD1968], "valueWithPointer:", __p, v45, v46, v47, v48, v49);
                v31 = (NSValue *)objc_claimAutoreleasedReturnValue();
                re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(v30, v17, v18, v31);

              }
            }
            else
            {
              if (!(_DWORD)v23)
                goto LABEL_50;
              if (v21)
              {
                v29 = *v22;
                goto LABEL_48;
              }
              {
                __p[0] = 0;
                __p[0] = (void *)*(int *)v22;
                goto LABEL_49;
              }
              v32 = (re::ecs2::VFXSceneComponent *)*((_QWORD *)this + 4);
              objc_msgSend(MEMORY[0x24BDD1968], "valueWithPointer:", v22);
              v33 = (NSValue *)objc_claimAutoreleasedReturnValue();
              re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(v32, v17, v18, v33);

            }
LABEL_50:

            v15 += 5;
          }
        }

      }
    }
  }
}

double re::ecs2::VFXEmitterComponent::addCollisionPlane(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _anonymous_namespace_ *v6;
  double result;
  _BYTE v8[16];
  _QWORD v9[2];
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(double *)v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = 0;
  v6 = (_anonymous_namespace_ *)(a1 + 1088);
  re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::indexOf(a1 + 1088, (uint64_t)v9, (uint64_t)v8);
  if (!v8[0])
    *(_QWORD *)&result = re::DynamicArray<re::RigJoint>::add(v6, (uint64_t)v9).n128_u64[0];
  return result;
}

uint64_t *re::ecs2::VFXEmitterComponent::updateCollisionPlane(uint64_t *result, uint64_t a2, int32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint32x2_t v11;

  v7 = result[140];
  v8 = result[138];
  if (v8)
  {
    v9 = v7 + 96 * v8;
    v10 = 96 * v8;
    while (*(_QWORD *)(v7 + 80) != a2)
    {
      v7 += 96;
      v10 -= 96;
      if (!v10)
      {
        v7 = v9;
        break;
      }
    }
  }
  v11 = (uint32x2_t)vceq_f32(*(float32x2_t *)v7, *(float32x2_t *)a3.i8);
  if ((vpmin_u32(v11, v11).u32[0] & 0x80000000) == 0
    || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 32), a5), (int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 16), a4)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 48), a6), (int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 64), a7)))) & 0x80000000) == 0)
  {
    return (uint64_t *)re::ecs2::VFXSceneComponent::updateCollisionPlane(result[4], a2, *(double *)vextq_s8((int8x16_t)vzip1q_s32((int32x4_t)0, a3), (int8x16_t)0, 4uLL).i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64);
  }
  return result;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

double re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState(re::ecs2::VFXEmitterComponentState *this)
{
  double result;
  int64x2_t v7;

  *(_QWORD *)this = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 1;
  *(_QWORD *)((char *)this + 44) = 4;
  __asm { FMOV            V1.4S, #6.0 }
  *((_OWORD *)this + 4) = _Q1;
  *((_DWORD *)this + 20) = 2;
  *((_OWORD *)this + 6) = xmmword_2260E5F20;
  *((int32x4_t *)this + 7) = vdupq_n_s32(0x3DCCCCCDu);
  *((_OWORD *)this + 8) = xmmword_226120590;
  *((_DWORD *)this + 36) = 1;
  *((_WORD *)this + 74) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 168) = 1;
  *((_QWORD *)this + 22) = 100;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_BYTE *)this + 204) = 0;
  *((_DWORD *)this + 52) = 1065353216;
  *((_QWORD *)this + 28) = 0;
  *((_BYTE *)this + 220) = 0;
  *(_QWORD *)((char *)this + 212) = 0;
  *((_DWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 244) = 0u;
  *((_QWORD *)this + 34) = 1017370378;
  *((_DWORD *)this + 70) = 0;
  *((_OWORD *)this + 18) = xmmword_2260E5F20;
  *((_QWORD *)this + 38) = 0x3F80000000000000;
  *((_DWORD *)this + 78) = 0;
  *((_OWORD *)this + 20) = xmmword_226120530;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = 1050253722;
  *((_DWORD *)this + 90) = 3;
  *((_OWORD *)this + 24) = xmmword_226120540;
  *((_OWORD *)this + 25) = xmmword_226120550;
  *((_BYTE *)this + 416) = 0;
  *((_OWORD *)this + 27) = xmmword_226120560;
  *((_OWORD *)this + 28) = xmmword_226120570;
  *((_WORD *)this + 232) = 256;
  *((_DWORD *)this + 121) = 0;
  *((_OWORD *)this + 31) = xmmword_2260FD430;
  *((_DWORD *)this + 128) = 0;
  *((_OWORD *)this + 33) = xmmword_2260E5F20;
  *((_BYTE *)this + 544) = 0;
  v7 = vdupq_n_s64(3uLL);
  *((int64x2_t *)this + 37) = v7;
  *((_OWORD *)this + 38) = 0u;
  *((_QWORD *)this + 78) = 1091567616;
  *((_DWORD *)this + 158) = 1;
  *((_BYTE *)this + 636) = 0;
  *((_DWORD *)this + 160) = 1120403456;
  *((_DWORD *)this + 167) = 0;
  *((_QWORD *)this + 84) = 1017370378;
  *((_DWORD *)this + 170) = 0;
  *((_OWORD *)this + 43) = xmmword_2260E5F20;
  *((_QWORD *)this + 88) = 0x3F80000000000000;
  *((_DWORD *)this + 178) = 0;
  *((_OWORD *)this + 45) = xmmword_226120530;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 94) = 1050253722;
  *((_DWORD *)this + 190) = 3;
  *((_OWORD *)this + 49) = xmmword_226120540;
  *((_OWORD *)this + 50) = xmmword_226120550;
  *((_BYTE *)this + 816) = 0;
  *((_OWORD *)this + 52) = xmmword_226120560;
  *((_OWORD *)this + 53) = xmmword_226120570;
  *((_WORD *)this + 432) = 256;
  *((_DWORD *)this + 221) = 0;
  *((_OWORD *)this + 56) = xmmword_2260FD430;
  *((_DWORD *)this + 228) = 0;
  *((_OWORD *)this + 58) = xmmword_2260E5F20;
  *((_BYTE *)this + 944) = 0;
  *((int64x2_t *)this + 62) = v7;
  *((_OWORD *)this + 63) = 0u;
  *((_QWORD *)this + 128) = 1091567616;
  *((_DWORD *)this + 258) = 1;
  *((_BYTE *)this + 1036) = 0;
  *((_QWORD *)this + 134) = 0;
  *((_DWORD *)this + 266) = 0;
  *((_QWORD *)this + 132) = 0;
  *((_OWORD *)this + 65) = 0u;
  *((_DWORD *)this + 60) = 1120403456;
  *((_BYTE *)this + 1080) = 0;
  *(_QWORD *)((char *)this + 260) = 0;
  *(_QWORD *)((char *)this + 364) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)((char *)this + 468) = xmmword_226120580;
  *(_QWORD *)((char *)this + 577) = 0;
  *(_OWORD *)((char *)this + 548) = 0u;
  *(_OWORD *)((char *)this + 564) = 0u;
  *(_QWORD *)((char *)this + 660) = 0;
  *(_OWORD *)((char *)this + 644) = 0u;
  *(_QWORD *)((char *)this + 764) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)((char *)this + 868) = xmmword_226120580;
  *(_QWORD *)((char *)this + 977) = 0;
  *(_OWORD *)((char *)this + 948) = 0u;
  *(_OWORD *)((char *)this + 964) = 0u;
  return result;
}

void **re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RigJoint>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 96 * (_QWORD)v5 - 8);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 96 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 96 * (_QWORD)v5), 96 * v4 - 96 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 96 * v4 - 8);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::RigJoint>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::RigJoint>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::RigJoint>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  re::IntrospectionBase *v11;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigJoint>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = (_OWORD *)(*((_QWORD *)this + 4) + 96 * v8);
  v9[4] = 0u;
  v9[5] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  *v9 = 0u;
  v9[1] = 0u;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  v11 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 96 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD v9[4];

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::RigJoint>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = v5 + 96 * v4;
      memset((char *)v9 + 8, 0, 56);
      v7 = v5 + 96 * a2 - v6;
      if (v7 >= 1)
      {
        v8 = v7 / 0x60uLL + 1;
        do
        {
          *(_OWORD *)(v6 + 24) = v9[1];
          *(_OWORD *)(v6 + 40) = v9[2];
          *(_OWORD *)(v6 + 56) = v9[3];
          *(_QWORD *)v6 = 0;
          *(_OWORD *)(v6 + 8) = v9[0];
          --v8;
          *(_QWORD *)(v6 + 72) = 0;
          *(_QWORD *)(v6 + 80) = 0;
          v6 += 96;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigJoint>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigJoint>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 96 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 96;
        v12 -= 96;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 96 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 96 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = (uint64_t *)(v8 + v6);
      if ((*(_DWORD *)(v8 + v6 + 8) & 0x80000000) != 0)
      {
        v10 = *v9;
        v11 = *(unsigned int *)(a1 + 24);
        v12 = *v9 % v11;
        v13 = *(_DWORD *)(a1 + 36);
        if (v13 == 0x7FFFFFFF)
        {
          v13 = *(_DWORD *)(a1 + 32);
          v14 = v13;
          if (v13 == (_DWORD)v11)
          {
            re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v12 = v10 % *(unsigned int *)(a1 + 24);
            v14 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v15 + 88 * v13 + 8) = v16 | 0x80000000;
        v17 = *(_QWORD *)(a1 + 16) + 88 * v13;
        *(_DWORD *)(v17 + 8) = *(_DWORD *)(v17 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88 * v13) = v10;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88 * v13 + 16) = v9[2];
        v18 = *(_QWORD *)(a1 + 16) + 88 * v13;
        *(_DWORD *)(v18 + 24) = *((_DWORD *)v9 + 6);
        v19 = v8 + v6;
        re::DynamicArray<BOOL>::DynamicArray(v18 + 32, (uint64_t *)(v19 + 32));
        *(_OWORD *)(v18 + 72) = *(_OWORD *)(v19 + 72);
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12) = v13;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 88;
    }
  }
}

void re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = (unint64_t *)(*(_QWORD *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        v9 = *v8;
        v10 = *(unsigned int *)(a1 + 24);
        v11 = *v8 % v10;
        v12 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v12 == 0x7FFFFFFF)
        {
          v12 = *(unsigned int *)(a1 + 32);
          v13 = v12;
          if ((_DWORD)v12 == (_DWORD)v10)
          {
            re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v11 = v9 % *(unsigned int *)(a1 + 24);
            v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v13 + 1;
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
        v16 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(v16 + 4 * v11);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12) = v9;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 16) = v8[2];
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 24) = v8[3];
        *(_DWORD *)(v16 + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

_OWORD *std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__base_destruct_at_end[abi:nn180100](v2, *v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__base_destruct_at_end[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = result;
  v4 = (_QWORD *)result[1];
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 5;
      result = (_QWORD *)*(v4 - 5);
      if (result)
      {
        if (*(v4 - 1))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(v4 - 1) = 0;
        *(v4 - 4) = 0;
        *(v4 - 3) = 0;
        *v5 = 0;
        ++*((_DWORD *)v4 - 4);
      }
      v4 -= 8;
    }
    while (v5 - 3 != a2);
  }
  v3[1] = a2;
  return result;
}

uint64_t *std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_QWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 48) = v8;
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_DWORD *)(v6 - 16) = 0;
      v9 = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 32) = v9;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v10 = *(_QWORD *)(v4 + v5 - 24);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v7 - 24) = v10;
      v11 = *(_QWORD *)(v4 + v5 - 8);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 8) = v11;
      *(_DWORD *)(v7 - 16) = *(_DWORD *)(v2 + v5 - 16) + 1;
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v4 + v5 - 16) + 1;
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<re::ecs2::VFXEmitterComponent::VFXBindingValue>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v4 = *(_QWORD *)(v3 - 40);
    *(_QWORD *)(a1 + 16) = v3 - 64;
    if (v4)
    {
      if (*(_QWORD *)(v3 - 8))
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      ++*(_DWORD *)(v3 - 16);
      v3 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v3 -= 64;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::indexOf@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v7 = result;
    v8 = v4 + 96 * v5;
    v9 = 96 * v5;
    while (1)
    {
      result = re::ecs2::ParticleEmitterCollisionPlane::operator==(v4, a2);
      if ((result & 1) != 0)
        break;
      v4 += 96;
      v9 -= 96;
      if (!v9)
      {
        v4 = v8;
        break;
      }
    }
    v10 = v4;
    v4 = *(_QWORD *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 16);
  }
  else
  {
    v11 = 0;
    v10 = *(_QWORD *)(result + 32);
  }
  if (v10 == v4 + 96 * v11)
  {
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0xAAAAAAAAAAAAAAABLL * ((v10 - v4) >> 5);
    v12 = 1;
  }
  *(_BYTE *)a3 = v12;
  return result;
}

uint64_t re::ecs2::ParticleEmitterCollisionPlane::operator==(uint64_t a1, uint64_t a2)
{
  uint32x2_t v2;

  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80)
    && (v2 = (uint32x2_t)vceq_f32(*(float32x2_t *)a1, *(float32x2_t *)a2), (vpmin_u32(v2, v2).u32[0] & 0x80000000) != 0))
  {
    return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a2 + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 16), *(float32x4_t *)(a2 + 16))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a2 + 48)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a2 + 64))))) >> 31;
  }
  else
  {
    return 0;
  }
}

double re::ecs2::buildCollisionShapeAssetHandle(re::ecs2 *this, re::AssetManager *a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t *v7;
  re *v8;
  re *CollisionShapeAsset;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  _QWORD v14[5];
  _BYTE v15[24];
  _OWORD v16[2];
  int v17;
  uint64_t v18;
  _OWORD v19[2];
  int v20;
  uint64_t v21;
  __int128 v22;
  re *v23;

  v22 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v21 = 0x7FFFFFFFLL;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v18 = 0x7FFFFFFFLL;
  v7 = re::globalAllocators(this);
  v8 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v6 + 32))(v6, v7[2], &v22);
  CollisionShapeAsset = (re *)re::AssetHelper::makeCollisionShapeAsset(a2, v8, (uint64_t)v19, (uint64_t)v16, 0);
  v14[0] = 0;
  v14[2] = 0;
  v14[3] = 0x3F80000000000000;
  v14[1] = 3164854026;
  v11 = re::globalAllocators(CollisionShapeAsset)[2];
  v23 = v8;
  v12 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, re **, _QWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 160))(v10, v11, &v23, v14, 1, 0, 0);
  v23 = v8;
  re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::add<re::AssetHandle&>((uint64_t)v19, (uint64_t *)&v23, (re::AssetHandle *)v15);
  re::AssetHelper::makeCollisionShapeAsset(a2, v12, (uint64_t)v19, (uint64_t)v16, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v16);
  return re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
}

uint64_t re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::add<re::AssetHandle&>(uint64_t a1, uint64_t *a2, re::AssetHandle *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addEmplace<re::AssetHandle&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 48 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 48 * v10;
  return v12 + 24;
}

void re::ecs2::VideoPlayerComponentHelper::impl::~impl(id *this)
{
  re::ecs2::VideoPlayerComponentHelper::impl::removeVideoEntityHierarchy(this);
  objc_destroyWeak(this + 794);
  this[794] = 0;
  objc_destroyWeak(this + 793);
  this[793] = 0;
  vpc::ImmersiveMediaOpacityInAnimationEngine::~ImmersiveMediaOpacityInAnimationEngine((vpc::ImmersiveMediaOpacityInAnimationEngine *)(this + 529));
  vpc::ScreenMeshAnimationEngine::~ScreenMeshAnimationEngine((vpc::ScreenMeshAnimationEngine *)(this + 6));
}

void re::ecs2::VideoPlayerComponentHelper::impl::removeVideoEntityHierarchy(id *this)
{
  id *v2;
  id WeakRetained;
  void *v4;
  uint64_t v5;
  re::ecs2::Component *v6;
  re::ecs2::Component *v7;
  char *v8;
  void *v9;
  re::ecs2::Entity *v10;
  id *v11;
  char *v12;
  void *v13;
  re::ecs2::Entity *v14;
  NSObject *v15;
  _DWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = this + 793;
  WeakRetained = objc_loadWeakRetained(this + 793);
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v5 = *((_QWORD *)WeakRetained + 2);
    if (v5 && (*(_BYTE *)(v5 + 288) & 0x80) == 0)
    {
      v6 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v6)
      {
        v7 = v6;
        LOBYTE(v16[0]) = 0;
        re::ecs2::VideoPlayerStatusComponent::setMediaInfo(v6, (unsigned __int8 *)v16);
        LOBYTE(v16[0]) = 0;
        re::ecs2::VideoPlayerStatusComponent::setContentInfo(v7, (unsigned __int8 *)v16);
      }
      else
      {
        v15 = *re::videoLogObjects(0);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v16[0] = 67109120;
          v16[1] = 3408;
          _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoPlayerStatusComp is nullptr", (uint8_t *)v16, 8u);
        }
      }
    }

  }
  v8 = (char *)objc_loadWeakRetained(v2);
  if (v8)
  {
    v9 = v8;
    v10 = (re::ecs2::Entity *)(v8 - 8);
    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)(v8 - 8), 0);
    re::ecs2::Entity::removeFromSceneOrParent(v10);
    objc_destroyWeak(v2);
    *v2 = 0;

  }
  v11 = this + 794;
  v12 = (char *)objc_loadWeakRetained(v11);
  if (v12)
  {
    v13 = v12;
    v14 = (re::ecs2::Entity *)(v12 - 8);
    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)(v12 - 8), 0);
    re::ecs2::Entity::removeFromSceneOrParent(v14);
    objc_destroyWeak(v11);
    *v11 = 0;

  }
}

uint64_t *re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount(uint64_t *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t *v5;
  int v6;
  unint64_t *v7;
  uint64_t *v10;
  int v11;
  uint64_t v12;

  v5 = this;
  *a2 = 0;
  *a3 = 0;
  v10 = this;
  v12 = 0;
  if (this[27])
  {
    v6 = 0;
  }
  else if (this[32])
  {
    v6 = 1;
  }
  else
  {
    if (!this[37])
      return this;
    v6 = 2;
  }
  v11 = v6;
  do
  {
    if (*(_BYTE *)(re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v10) + 192))
      v7 = a3;
    else
      v7 = a2;
    ++*v7;
    this = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v10);
  }
  while (v10 != v5 || v11 != 3 || v12 != 0);
  return this;
}

void re::ecs2::VideoPlayerComponentHelper::impl::setEntityVisibility(re::ecs2::VideoPlayerComponentHelper::impl *this, BOOL a2, re::ecs2::Entity *a3)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!this)
  {
    v4 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return;
    v6 = 67109120;
    v7 = 583;
    v5 = "VideoPlayerComponentHelper line: %d, entity is nullptr";
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v6, 8u);
    return;
  }
  v3 = *((_QWORD *)this + 27);
  if (v3)
  {
    *(_BYTE *)(v3 + 25) = 0;
    re::ecs2::Component::markDirty((_QWORD *)v3);
    return;
  }
  v4 = *re::videoLogObjects(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 67109120;
    v7 = 585;
    v5 = "VideoPlayerComponentHelper line: %d, renderOptionsComponent is nullptr";
    goto LABEL_9;
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::update(uint64_t *CameraViewsCount, _QWORD *a2, re::ecs2::Entity *a3, re::AssetManager *a4)
{
  float32x2_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t hasVideoEntityHierarchy;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  re *v35;
  re::ecs2::EntityComponentCollection *v36;
  char *WeakRetained;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  re *v53;
  re::ecs2::EntityComponentCollection *v54;
  re *v55;
  NSObject *v56;
  __int32 v57;
  __int32 v58;
  uint64_t v59;
  re::VideoDefaults *v60;
  re *v61;
  int v62;
  NSObject *v63;
  const char *v64;
  const re::AssetHandle *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  uint32_t v73;
  uint64_t *v74;
  re::ecs2::Entity *v75;
  re::ecs2::Entity *v76;
  re *v77;
  re::ecs2::EntityComponentCollection *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  _QWORD *v87;
  float v88;
  uint64_t v89;
  uint64_t *v90;
  re::ecs2::VideoComponent *v91;
  char *v92;
  uint64_t *v93;
  re::ecs2::Entity *v94;
  re::ecs2::Entity *v95;
  re *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  re *v118;
  _QWORD *v119;
  re *v120;
  re::ecs2::Entity *v121;
  NSObject *v122;
  re *v123;
  __int32 v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  re::ecs2::VideoComponent *v131;
  char *v132;
  re::VideoDefaults *v133;
  int v134;
  re *v135;
  NSObject *v136;
  _BOOL8 v137;
  int v138;
  NSObject *v139;
  int v140;
  NSObject *v141;
  int v142;
  NSObject *v143;
  int v144;
  uint64_t v145;
  BOOL v146;
  re::ecs2::Entity *v147;
  float v148;
  float v149;
  BOOL v150;
  re::ecs2::Entity *v151;
  re *v152;
  NSObject *v153;
  __int32 v154;
  re::ecs2::Component *v155;
  re *v156;
  NSObject *v157;
  NSObject *v158;
  NSObject *v159;
  NSObject *v160;
  NSObject *v161;
  NSObject *v162;
  NSObject *v163;
  NSObject *v164;
  NSObject *v165;
  NSObject *v166;
  NSObject *v167;
  NSObject *v168;
  __int32 v169;
  NSObject *v170;
  const char *v171;
  float32x2_t *v172;
  re::AssetManager *v173;
  re::ecs2::Entity *v174;
  StringID v175;
  StringID v176;
  uint64_t v177[3];
  _BYTE v178[24];
  StringID v179;
  StringID v180;
  re::ecs2::Entity *v181[3];
  re::ecs2::Entity *v182;
  uint64_t v183;
  int32x4_t v184[4];
  _BYTE v185[18];
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  uint64_t v189;
  int32x4_t buf[2];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint8_t v194[24];
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  if (!a2 || !a4)
    return;
  v7 = (float32x2_t *)CameraViewsCount;
  if (CameraViewsCount[1])
  {
LABEL_32:
    hasVideoEntityHierarchy = re::ecs2::VideoPlayerComponentHelper::impl::hasVideoEntityHierarchy((uint64_t)CameraViewsCount, (uint64_t)a2);
    if ((hasVideoEntityHierarchy & 1) != 0)
    {
      buf[0].i64[0] = 0xF4664E2E6A44E25ALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-Screen__";
      v23 = a2[41];
      if (v23)
      {
        v24 = (uint64_t *)a2[43];
        v25 = 8 * v23;
        while (1)
        {
          v26 = *v24;
          if ((*(_QWORD *)(*v24 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
          {
            v27 = *(char **)(v26 + 280);
            if (v27 == "__InternalVPC-Screen__" || !strcmp(v27, "__InternalVPC-Screen__"))
              break;
          }
          ++v24;
          v25 -= 8;
          if (!v25)
            goto LABEL_39;
        }
      }
      else
      {
LABEL_39:
        v26 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      buf[0].i64[0] = 0x931CC76C0DD179BALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-ScreenGlowEntity__";
      v28 = a2[41];
      if (v28)
      {
        v29 = (char **)a2[43];
        v30 = 8 * v28;
        while (1)
        {
          v31 = *v29;
          if ((*((_QWORD *)*v29 + 34) ^ 0x931CC76C0DD179BALL) <= 1)
          {
            v32 = (char *)*((_QWORD *)v31 + 35);
            if (v32 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v32, "__InternalVPC-ScreenGlowEntity__"))
              break;
          }
          ++v29;
          v30 -= 8;
          if (!v30)
            goto LABEL_46;
        }
      }
      else
      {
LABEL_46:
        v31 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      *(_QWORD *)&v176.var0 = 0x98636CD79C3E2C92;
      v176.var1 = "__InternalVPC-LeftEye__";
      v33 = re::ecs2::Entity::findInHierarchyByName((uint64_t)a2, &v176);
      re::StringID::destroyString((re::StringID *)&v176);
      v174 = (re::ecs2::Entity *)v33;
      if (*(_QWORD *)&v7[1] == 2)
      {
        *(_QWORD *)&v175.var0 = 0x740B54E87609516CLL;
        v175.var1 = "__InternalVPC-RightEye__";
        v34 = (_DWORD *)re::ecs2::Entity::findInHierarchyByName((uint64_t)a2, &v175);
        re::StringID::destroyString((re::StringID *)&v175);
      }
      else
      {
        v34 = 0;
      }
      buf[0].i64[0] = 0xB71EB2016BE7B4ALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-PortalWorld__";
      v48 = a2[41];
      if (v48)
      {
        v49 = (uint64_t *)a2[43];
        v50 = 8 * v48;
        while (1)
        {
          v51 = *v49;
          if ((*(_QWORD *)(*v49 + 272) ^ 0xB71EB2016BE7B4AuLL) <= 1)
          {
            v52 = *(char **)(v51 + 280);
            if (v52 == "__InternalVPC-PortalWorld__" || !strcmp(v52, "__InternalVPC-PortalWorld__"))
              break;
          }
          ++v49;
          v50 -= 8;
          if (!v50)
            goto LABEL_79;
        }
      }
      else
      {
LABEL_79:
        v51 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      goto LABEL_81;
    }
    if (!a2[30])
      hasVideoEntityHierarchy = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v35 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)hasVideoEntityHierarchy);
    if ((_DWORD)v35)
    {
      v157 = *re::videoLogObjects(v35);
      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
      {
        buf[0].i16[0] = 0;
        _os_log_impl(&dword_224FE9000, v157, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper::impl::buildVideoEntityHierarchy]: build video entity hierarchy", (uint8_t *)buf, 2u);
      }
    }
    v174 = a3;
    v36 = (re::ecs2::EntityComponentCollection *)0xF4664E2E6A44E25ALL;
    WeakRetained = (char *)objc_loadWeakRetained((id *)&v7[793]);
    v31 = "__InternalVPC-Screen__";
    if (!WeakRetained)
    {
      v74 = re::ecs2::EntityFactory::instance(0);
      v75 = re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v74, 4uLL, v181);
      v76 = v181[0];
      if (!v181[0])
        goto LABEL_54;
      v77 = (re *)re::VideoDefaults::logEnabled(v75);
      if ((_DWORD)v77)
      {
        v163 = *re::videoLogObjects(v77);
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].i16[0] = 0;
          _os_log_impl(&dword_224FE9000, v163, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->createScreenEntity :: Created the Screen Entity and now Configuring it.", (uint8_t *)buf, 2u);
        }
      }
      buf[0].i64[0] = 0xF4664E2E6A44E25ALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-Screen__";
      re::StringID::operator=((unint64_t *)v76 + 34, buf[0].i64);
      *((_DWORD *)v76 + 72) |= 0x1400u;
      re::ecs2::Entity::setSelfEnabled(v76, 0);
      re::StringID::destroyString((re::StringID *)buf);
      v78 = (re::ecs2::Entity *)((char *)v76 + 32);
      re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)v76 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      buf[0] = (int32x4_t)xmmword_2260E5F10;
      buf[1] = (int32x4_t)xmmword_2260E5F20;
      v191 = xmmword_2260E5F40;
      v192 = xmmword_2260E5D70;
      v79 = (_QWORD *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v76 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v184[0] = 0u;
      *(_OWORD *)v185 = xmmword_2260E5D70;
      *(_OWORD *)v194 = 0u;
      re::decomposeScaleRotationTranslation<float>((uint64_t)buf, v184, v185, v194);
      v80 = v184[0].i64[1];
      v81 = *(_QWORD *)v185;
      v82 = *(_QWORD *)&v185[8];
      v83 = *(_QWORD *)v194;
      v84 = *(_QWORD *)&v194[8];
      v79[4] = v184[0].i64[0];
      v79[5] = v80;
      v79[6] = v81;
      v79[7] = v82;
      v79[8] = v83;
      v79[9] = v84;
      v85 = (_BYTE *)*((_QWORD *)v76 + 27);
      if (!v85)
        v85 = (_BYTE *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v76 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v85[25] = 0;
      v85[35] = 1;
      if (!v85[30])
        v85[30] = 1;
      v85[31] = 1;
      re::AssetManager::assetHandle(a4, "engine:videoMaterial.rematerial", 1, 0, v184[0].i64);
      re::ecs2::VideoPlayerComponentHelper::impl::createPlaneAsset((re::ecs2::VideoPlayerComponentHelper::impl *)v185, v7, 1.0, 1.0, 0.01, (uint64_t)a4, 0);
      v86 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v76 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      re::AssetHandle::operator=((uint64_t *)(v86 + 32), (uint64_t *)v185);
      re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v86 + 56), (re::AssetHandle *)v184);
      v87 = (_QWORD *)re::ecs2::EntityComponentCollection::add(v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      re::ecs2::buildCollisionShapeAssetHandle((re::ecs2 *)v194, a4, 1.0, 1.0, v88);
      re::AssetHandle::operator=(v87 + 4, (uint64_t *)v194);
      re::ecs2::Component::markDirty(v87);
      v89 = re::ecs2::EntityComponentCollection::add(v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      *(_BYTE *)(v89 + 27) = 1;
      *(_WORD *)(v89 + 25) = 257;
      re::ecs2::Component::markDirty((_QWORD *)v89);
      v90 = (uint64_t *)re::ecs2::EntityComponentCollection::add(v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::AssetHandle::operator=(v90 + 4, v184[0].i64);
      re::ecs2::VideoPlayerComponentHelper::impl::addAttachmentsToVideoComponent((re::ecs2::VideoPlayerComponentHelper::impl *)v90, v91);
      re::ecs2::EntityComponentCollection::add(v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::ecs2::EntityComponentCollection::add(v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v185);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v184);
      re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(a2 + 38, (uint64_t *)v181);
      v92 = v181[0] ? (char *)v181[0] + 8 : 0;
      objc_initWeak((id *)buf, v92);
      re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)&v7[793], (id *)buf);
      objc_destroyWeak((id *)buf);
      if (!v181[0])
      {
LABEL_54:
        v38 = (char *)objc_loadWeakRetained((id *)&v7[794]);
        v173 = a4;
        if (v38)
        {
LABEL_55:

LABEL_56:
          buf[0].i64[0] = 0xF4664E2E6A44E25ALL;
          buf[0].i64[1] = (uint64_t)"__InternalVPC-Screen__";
          v39 = a2[41];
          if (v39)
          {
            v40 = (uint64_t *)a2[43];
            v41 = 8 * v39;
            while (1)
            {
              v26 = *v40;
              if ((*(_QWORD *)(*v40 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
              {
                v42 = *(char **)(v26 + 280);
                if (v42 == "__InternalVPC-Screen__" || !strcmp(v42, "__InternalVPC-Screen__"))
                  break;
              }
              ++v40;
              v41 -= 8;
              if (!v41)
                goto LABEL_62;
            }
          }
          else
          {
LABEL_62:
            v26 = 0;
          }
          re::StringID::destroyString((re::StringID *)buf);
          buf[0].i64[0] = 0x931CC76C0DD179BALL;
          buf[0].i64[1] = (uint64_t)"__InternalVPC-ScreenGlowEntity__";
          v43 = a2[41];
          if (v43)
          {
            v44 = (char **)a2[43];
            v45 = 8 * v43;
            while (1)
            {
              v31 = *v44;
              if ((*((_QWORD *)*v44 + 34) ^ 0x931CC76C0DD179BALL) <= 1)
              {
                v46 = (char *)*((_QWORD *)v31 + 35);
                if (v46 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v46, "__InternalVPC-ScreenGlowEntity__"))
                  break;
              }
              ++v44;
              v45 -= 8;
              if (!v45)
                goto LABEL_69;
            }
          }
          else
          {
LABEL_69:
            v31 = 0;
          }
          re::StringID::destroyString((re::StringID *)buf);
          *(_QWORD *)&v180.var0 = 0x98636CD79C3E2C92;
          v180.var1 = "__InternalVPC-LeftEye__";
          v47 = re::ecs2::Entity::findInHierarchyByName((uint64_t)a2, &v180);
          re::StringID::destroyString((re::StringID *)&v180);
          if (*(_QWORD *)&v7[1] == 2)
          {
            *(_QWORD *)&v179.var0 = 0x740B54E87609516CLL;
            v179.var1 = "__InternalVPC-RightEye__";
            v34 = (_DWORD *)re::ecs2::Entity::findInHierarchyByName((uint64_t)a2, &v179);
            re::StringID::destroyString((re::StringID *)&v179);
          }
          else
          {
            v34 = 0;
          }
          v65 = v174;
          buf[0].i64[0] = 0xB71EB2016BE7B4ALL;
          buf[0].i64[1] = (uint64_t)"__InternalVPC-PortalWorld__";
          v66 = a2[41];
          if (v66)
          {
            v172 = v7;
            v67 = v34;
            v68 = v47;
            v69 = (uint64_t *)a2[43];
            v70 = 8 * v66;
            while (1)
            {
              v51 = *v69;
              if ((*(_QWORD *)(*v69 + 272) ^ 0xB71EB2016BE7B4AuLL) <= 1)
              {
                v71 = *(char **)(v51 + 280);
                if (v71 == "__InternalVPC-PortalWorld__" || !strcmp(v71, "__InternalVPC-PortalWorld__"))
                  break;
              }
              ++v69;
              v70 -= 8;
              if (!v70)
              {
                v51 = 0;
                break;
              }
            }
            v65 = v174;
            v47 = v68;
            v34 = v67;
            v7 = v172;
          }
          else
          {
            v51 = 0;
          }
          re::StringID::destroyString((re::StringID *)buf);
          re::AssetHandle::AssetHandle((re::AssetHandle *)v178, v65);
          if (v26)
          {
            v109 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v26 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v109)
            {
              v110 = v109;
              *(_BYTE *)(v109 + 267) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)v178);
              re::AssetHandle::operator=((uint64_t *)(v110 + 168), buf[0].i64);
              *(_BYTE *)(v110 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
            }
            else
            {
              v159 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              {
                buf[0].i64[0] = 0xD0704000100;
                _os_log_error_impl(&dword_224FE9000, v159, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", (uint8_t *)buf, 8u);
              }
            }
          }
          if (v31)
          {
            v111 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v31 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v111)
            {
              v112 = v111;
              *(_BYTE *)(v111 + 267) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v184, (const re::AssetHandle *)v178);
              re::AssetHandle::operator=((uint64_t *)(v112 + 168), v184[0].i64);
              *(_BYTE *)(v112 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v184);
              *(_DWORD *)(v112 + 268) = 2;
            }
            else
            {
              v160 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
              {
                v184[0].i64[0] = 0xD1004000100;
                _os_log_error_impl(&dword_224FE9000, v160, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", (uint8_t *)v184, 8u);
              }
            }
          }
          if (v47)
          {
            v113 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v47 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v113)
            {
              v114 = v113;
              *(_BYTE *)(v113 + 267) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v185, (const re::AssetHandle *)v178);
              re::AssetHandle::operator=((uint64_t *)(v114 + 168), (uint64_t *)v185);
              *(_BYTE *)(v114 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v185);
            }
            else
            {
              v161 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v185 = 67109120;
                *(_DWORD *)&v185[4] = 3353;
                _os_log_error_impl(&dword_224FE9000, v161, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", v185, 8u);
              }
            }
          }
          if (v34)
          {
            v115 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 8), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v115)
            {
              v116 = v115;
              *(_BYTE *)(v115 + 267) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v194, (const re::AssetHandle *)v178);
              re::AssetHandle::operator=((uint64_t *)(v116 + 168), (uint64_t *)v194);
              *(_BYTE *)(v116 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
            }
            else
            {
              v162 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v194 = 67109120;
                *(_DWORD *)&v194[4] = 3361;
                _os_log_error_impl(&dword_224FE9000, v162, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", v194, 8u);
              }
            }
          }
          v174 = (re::ecs2::Entity *)v47;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v178);
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)&v7[6]);
          v7[6] = (float32x2_t)&off_24ED61CD8;
          v7[7] = (float32x2_t)v7;
          v7[8] = (float32x2_t)v173;
          v7[10] = (float32x2_t)&v7[6];
          v117 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          v53 = (re *)re::AssetHandle::loadedAsset<re::VideoAsset>(v65);
          if (v53)
          {
            if (v117)
            {
              v118 = v53;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v177, v65);
              re::AssetHandle::operator=((uint64_t *)(v117 + 112), v177);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v177);
              v119 = (_QWORD *)*((_QWORD *)v118 + 24);
              if (v119)
              {
                if (*v119 && !*(_BYTE *)(v117 + 104))
                  re::ecs2::VideoPlayerStatusComponent::setVideoReceiverEndpointAvailable((re::ecs2::VideoPlayerStatusComponent *)v117, 1);
              }
            }
          }
LABEL_81:
          if (v26)
          {
            v54 = (re::ecs2::EntityComponentCollection *)(a2 + 4);
            if (re::ecs2::EntityComponentCollection::get(v54, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
            {
              v55 = (re *)re::ecs2::EntityComponentCollection::get(v54, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v55)
              {
                v7->i8[4] = *((_BYTE *)v55 + 152);
                if (!v7->i8[0])
                {
LABEL_193:
                  if (!v7->i8[1] && v7->i8[2] == 1)
                  {
                    v145 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v26 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                    if (v145)
                    {
                      v148 = *(float *)(v145 + 64);
                      if (v148 != 0.0 && fabsf(v148) > 0.001
                        || (v149 = *(float *)(v145 + 68), v149 != 0.0) && fabsf(v149) > 0.001)
                      {
                        re::ecs2::VideoPlayerComponentHelper::impl::setEntityVisibility((re::ecs2::VideoPlayerComponentHelper::impl *)v26, v146, v147);
                        re::ecs2::VideoPlayerComponentHelper::impl::setEntityVisibility((re::ecs2::VideoPlayerComponentHelper::impl *)v31, v150, v151);
                        v7->i8[1] = 1;
                        v153 = *re::videoLogObjects(v152);
                        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                        {
                          v154 = v7->u8[1];
                          buf[0].i32[0] = 67109120;
                          buf[0].i32[1] = v154;
                          _os_log_impl(&dword_224FE9000, v153, OS_LOG_TYPE_DEFAULT, "VideoPlayerComponentHelper sets video entities visibility: %d", (uint8_t *)buf, 8u);
                        }
                      }
                    }
                    else
                    {
                      v166 = *re::videoLogObjects(0);
                      if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
                      {
                        buf[0].i64[0] = 0x23D04000100;
                        _os_log_error_impl(&dword_224FE9000, v166, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", (uint8_t *)buf, 8u);
                      }
                    }
                  }
                  v155 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get(v54, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                  if (v7->i8[6] != 1 && v7->i8[2] == 1)
                  {
                    if (v155)
                    {
                      buf[0].i8[0] = 1;
                      re::ecs2::VideoPlayerStatusComponent::setContentInfo(v155, (unsigned __int8 *)buf);
                      v7->i8[6] = v7->i8[2];
                    }
                    else
                    {
                      v156 = (re *)re::VideoDefaults::logEnabled(0);
                      if ((_DWORD)v156)
                      {
                        v167 = *re::videoLogObjects(v156);
                        if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
                        {
                          buf[0].i16[0] = 0;
                          _os_log_impl(&dword_224FE9000, v167, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper::impl::update] videoPlayerStatusComp is a null ptr", (uint8_t *)buf, 2u);
                        }
                      }
                    }
                  }
                  return;
                }
                v7->i8[0] = 0;
                v7[2].i8[0] = *((_BYTE *)v55 + 72);
                v56 = *re::videoLogObjects(v55);
                if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                {
                  v57 = v7->u8[2];
                  if (v7->i8[2] || (v58 = v7->u8[3], v58 != 1))
                    v58 = v7->u8[2];
                  buf[0].i32[0] = 67109376;
                  buf[0].i32[1] = v57;
                  buf[0].i16[4] = 1024;
                  *(__int32 *)((char *)&buf[0].i32[2] + 2) = v58;
                  _os_log_impl(&dword_224FE9000, v56, OS_LOG_TYPE_DEFAULT, "Changing VideoEntityHierarchyState: content type - %hhu, effective content type - %hhu", (uint8_t *)buf, 0xEu);
                }
                v36 = (re::ecs2::EntityComponentCollection *)(v26 + 32);
                v59 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v26 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v7->i8[2] != 1 && (v7->i8[2] || v7->i8[3] != 1))
                {
                  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v26, 0);
                  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v31, 0);
                  v121 = v174;
                  if (v174)
                    re::ecs2::Entity::setSelfEnabled(v174, 0);
                  if (v34)
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v34, 0);
                  if (v51)
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v51, 0);
                  v122 = *re::videoLogObjects(v120);
                  v123 = (re *)os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v123)
                  {
                    buf[0].i16[0] = 0;
                    _os_log_impl(&dword_224FE9000, v122, OS_LOG_TYPE_DEFAULT, "Invalid media type set for VideoEntity", (uint8_t *)buf, 2u);
                  }
                  goto LABEL_182;
                }
                re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v26, 1);
                if (!v59 || !*(_BYTE *)(v59 + 25))
                {
LABEL_170:
                  v133 = v174;
                  if (v174)
                    re::ecs2::Entity::setSelfEnabled(v174, 0);
                  if (v34)
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v34, 0);
                  if (v51)
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v51, 0);
                  v134 = v7[2].u8[0];
                  v135 = (re *)re::VideoDefaults::logEnabled(v133);
                  if (!v134)
                  {
                    if ((_DWORD)v135)
                    {
                      v170 = *re::videoLogObjects(v135);
                      if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
                      {
                        buf[0].i16[0] = 0;
                        _os_log_impl(&dword_224FE9000, v170, OS_LOG_TYPE_DEFAULT, "ImageBasedReflections are off", (uint8_t *)buf, 2u);
                      }
                    }
                    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v26 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                    goto LABEL_181;
                  }
                  if (!(_DWORD)v135)
                  {
LABEL_178:
                    v123 = (re *)re::ecs2::EntityComponentCollection::getOrAdd(v36, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
LABEL_181:
                    v121 = v174;
LABEL_182:
                    v136 = *re::videoLogObjects(v123);
                    v137 = os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT);
                    if (v137)
                    {
                      v138 = *(_DWORD *)(v26 + 288) & 1;
                      buf[0].i32[0] = 67109120;
                      buf[0].i32[1] = v138;
                      _os_log_impl(&dword_224FE9000, v136, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state screenEntity: %d", (uint8_t *)buf, 8u);
                    }
                    if (v121)
                    {
                      v139 = *re::videoLogObjects((re *)v137);
                      v137 = os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT);
                      if (v137)
                      {
                        v140 = *((_DWORD *)v121 + 72) & 1;
                        buf[0].i32[0] = 67109120;
                        buf[0].i32[1] = v140;
                        _os_log_impl(&dword_224FE9000, v139, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state leftEyeEntity: %d", (uint8_t *)buf, 8u);
                      }
                    }
                    if (v34)
                    {
                      v141 = *re::videoLogObjects((re *)v137);
                      v137 = os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT);
                      if (v137)
                      {
                        v142 = v34[72] & 1;
                        buf[0].i32[0] = 67109120;
                        buf[0].i32[1] = v142;
                        _os_log_impl(&dword_224FE9000, v141, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state rightEyeEntity: %d", (uint8_t *)buf, 8u);
                      }
                    }
                    if (v51)
                    {
                      v143 = *re::videoLogObjects((re *)v137);
                      if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                      {
                        v144 = *(_DWORD *)(v51 + 288) & 1;
                        buf[0].i32[0] = 67109120;
                        buf[0].i32[1] = v144;
                        _os_log_impl(&dword_224FE9000, v143, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state portalWorldEntity: %d", (uint8_t *)buf, 8u);
                      }
                    }
                    goto LABEL_193;
                  }
LABEL_226:
                  v165 = *re::videoLogObjects(v135);
                  if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                  {
                    buf[0].i16[0] = 0;
                    _os_log_impl(&dword_224FE9000, v165, OS_LOG_TYPE_DEFAULT, "ImageBasedReflections are on", (uint8_t *)buf, 2u);
                  }
                  goto LABEL_178;
                }
                v61 = (re *)re::VideoDefaults::logEnabled(v60);
                if (!(_DWORD)v61
                  || (v168 = *re::videoLogObjects(v61), !os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT)))
                {
LABEL_96:
                  v62 = !v7->i8[2] && v7->i8[3] == 1 || v7->u8[2] == 1;
                  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v31, v62);
                  goto LABEL_170;
                }
                if (v7->i8[2])
                {
                  v169 = v7->u8[2];
                  if (v169 != 1)
                    goto LABEL_241;
                }
                else if (v7->i8[3] != 1)
                {
                  v169 = 0;
LABEL_241:
                  v171 = "Disabling";
                  goto LABEL_242;
                }
                v171 = "Enabling";
                v169 = 1;
LABEL_242:
                buf[0].i32[0] = 67109378;
                buf[0].i32[1] = v169;
                buf[0].i16[4] = 2080;
                *(uint64_t *)((char *)&buf[0].i64[1] + 2) = (uint64_t)v171;
                _os_log_impl(&dword_224FE9000, v168, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->changeVideoEntityHierarchyState :: content type - %hhu, %s the Screen Glow Entity", (uint8_t *)buf, 0x12u);
                goto LABEL_96;
              }
              v158 = *re::videoLogObjects(0);
              if (!os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
                return;
              buf[0].i64[0] = 0x38604000100;
              v64 = "VideoPlayerComponentHelper line: %d, videoPlayerComp is nullptr";
              v72 = v158;
              v73 = 8;
LABEL_113:
              _os_log_error_impl(&dword_224FE9000, v72, OS_LOG_TYPE_ERROR, v64, (uint8_t *)buf, v73);
              return;
            }
            v63 = *re::videoLogObjects(0);
            if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              return;
            buf[0].i16[0] = 0;
            v64 = "[VideoPlayerComponentHelper]->Update :: VideoPlayerStatusComponent is a nullptr";
          }
          else
          {
            v63 = *re::videoLogObjects(v53);
            if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              return;
            buf[0].i16[0] = 0;
            v64 = "[VideoPlayerComponentHelper]->Update :: One of the Required Entites is a nullptr";
          }
          v72 = v63;
          v73 = 2;
          goto LABEL_113;
        }
        v93 = re::ecs2::EntityFactory::instance(0);
        v94 = re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v93, 4uLL, &v182);
        v95 = v182;
        if (!v182)
          goto LABEL_56;
        v96 = (re *)re::VideoDefaults::logEnabled(v94);
        if ((_DWORD)v96)
        {
          v164 = *re::videoLogObjects(v96);
          if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
          {
            buf[0].i16[0] = 0;
            _os_log_impl(&dword_224FE9000, v164, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->createScreenGlowEntity :: Created the Screen Glow Entity and now Configuring it.", (uint8_t *)buf, 2u);
          }
        }
        buf[0].i64[0] = 0x931CC76C0DD179BALL;
        buf[0].i64[1] = (uint64_t)"__InternalVPC-ScreenGlowEntity__";
        re::StringID::operator=((unint64_t *)v95 + 34, buf[0].i64);
        *((_DWORD *)v95 + 72) |= 0x1400u;
        re::ecs2::Entity::setSelfEnabled(v95, 0);
        re::StringID::destroyString((re::StringID *)buf);
        v34 = (_DWORD *)((char *)v95 + 32);
        re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)v95 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v184[0] = (int32x4_t)xmmword_2260E5F10;
        v184[1] = (int32x4_t)xmmword_2260E5F20;
        v184[2] = (int32x4_t)xmmword_2260E5F40;
        v184[3] = (int32x4_t)xmmword_2260E5D70;
        v97 = (_QWORD *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v95 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        buf[0] = 0u;
        *(_OWORD *)v185 = xmmword_2260E5D70;
        *(_OWORD *)v194 = 0u;
        re::decomposeScaleRotationTranslation<float>((uint64_t)v184, buf, v185, v194);
        v98 = buf[0].i64[1];
        v99 = *(_QWORD *)v185;
        v100 = *(_QWORD *)&v185[8];
        v101 = *(_QWORD *)v194;
        v102 = *(_QWORD *)&v194[8];
        v97[4] = buf[0].i64[0];
        v97[5] = v98;
        v97[6] = v99;
        v97[7] = v100;
        v97[8] = v101;
        v97[9] = v102;
        v103 = (_BYTE *)*((_QWORD *)v95 + 27);
        if (!v103)
          v103 = (_BYTE *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v95 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v103[25] = 0;
        v103[35] = 1;
        v26 = (uint64_t)v173;
        if (!v103[30])
          v103[30] = 1;
        v103[31] = 1;
        re::AssetManager::assetHandle(v173, "engine:BuiltinRenderGraphResources/SFBSystemShell/rectLightSpill.rematerial", 1, 0, (uint64_t *)v194);
        re::ecs2::VideoPlayerComponentHelper::impl::createInvertedPlaneAsset((re::ecs2::VideoPlayerComponentHelper::impl *)v181, (re::AssetManager *)v7, 1.5, 1.5, v104, (uint64_t)v173);
        v105 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v95 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::AssetHandle::operator=((uint64_t *)(v105 + 32), (uint64_t *)v181);
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v105 + 56), (re::AssetHandle *)v194);
        v106 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)v34, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v51 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)v34, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v107 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v107)
          v108 = *(float *)(v107 + 148);
        else
          v108 = 0.45;
        v125 = *(float *)(v106 + 104);
        v124 = *(_DWORD *)(v106 + 108);
        re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles((re::ecs2::MaterialParameterBlockArrayComponent *)v51, 1uLL);
        re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize(v51 + 72, 1uLL);
        if (*(_QWORD *)(v51 + 48))
        {
          v126 = *(_QWORD *)(v51 + 64);
          ++*(_DWORD *)(v126 + 16);
          v127 = *(_QWORD *)v126;
          *(float *)buf[0].i32 = v108 * v125;
          v26 = 1;
          re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v127, "intensity", 1, (unsigned __int8 *)buf);
          ++*(_DWORD *)(v127 + 400);
          if (*(_QWORD *)(v51 + 48))
          {
            v128 = *(_QWORD *)(v51 + 64);
            ++*(_DWORD *)(v128 + 16);
            v129 = *(_QWORD *)v128;
            buf[0].i32[0] = v124;
            re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v129, "sampleSpread", 1, (unsigned __int8 *)buf);
            ++*(_DWORD *)(v129 + 400);
            re::ecs2::Component::markDirty((_QWORD *)v51);
            v130 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)v34, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            re::AssetHandle::operator=((uint64_t *)(v130 + 32), (uint64_t *)v194);
            *(_BYTE *)(v130 + 267) = 1;
            re::ecs2::VideoPlayerComponentHelper::impl::addAttachmentsToVideoComponent((re::ecs2::VideoPlayerComponentHelper::impl *)v130, v131);
            re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(a2 + 38, (uint64_t *)&v182);
            if (v182)
              v132 = (char *)v182 + 8;
            else
              v132 = 0;
            objc_initWeak((id *)buf, v132);
            re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)&v7[794], (id *)buf);
            objc_destroyWeak((id *)buf);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v181);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
            if (!v182)
              goto LABEL_56;
            v38 = (char *)v182 + 8;
            goto LABEL_55;
          }
        }
        else
        {
          v183 = 0;
          v192 = 0u;
          v193 = 0u;
          v191 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v185 = 136315906;
          *(_QWORD *)&v185[4] = "operator[]";
          *(_WORD *)&v185[12] = 1024;
          *(_DWORD *)&v185[14] = 789;
          v186 = 2048;
          v187 = 0;
          v188 = 2048;
          v189 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v183 = 0;
        v54 = (re::ecs2::EntityComponentCollection *)v184;
        v192 = 0u;
        v193 = 0u;
        v191 = 0u;
        memset(buf, 0, sizeof(buf));
        v7 = (float32x2_t *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v185 = 136315906;
        *(_QWORD *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 789;
        v186 = 2048;
        v187 = 0;
        v188 = 2048;
        v189 = 0;
        _os_log_send_and_compose_impl();
        v135 = (re *)_os_crash_msg();
        __break(1u);
        goto LABEL_226;
      }
      WeakRetained = (char *)v181[0] + 8;
    }

    goto LABEL_54;
  }
  v8 = a2;
  do
  {
    v9 = v8;
    v8 = (_QWORD *)v8[3];
  }
  while (v8);
  v10 = v9[2];
  v11 = re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount;
  if (v10)
    v12 = re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount == 0;
  else
    v12 = 0;
  if (v12)
  {
    CameraViewsCount = (uint64_t *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!CameraViewsCount || (v13 = CameraViewsCount[3]) == 0)
    {
LABEL_28:
      v11 = re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount;
      goto LABEL_29;
    }
    v14 = CameraViewsCount[5];
    v15 = 8 * v13;
    while (1)
    {
      CameraViewsCount = *(uint64_t **)v14;
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
      if (v16 && (*(_BYTE *)(v16 + 288) & 1) != 0)
      {
        buf[0].i64[0] = 0;
        v184[0].i64[0] = 0;
        CameraViewsCount = re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount(CameraViewsCount, (unint64_t *)buf, (unint64_t *)v184);
        if (re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount == 2
          || v184[0].i64[0] == 0)
        {
          if (re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount == 1
            || buf[0].i64[0] == 0)
          {
            goto LABEL_27;
          }
          v19 = 1;
        }
        else
        {
          v19 = 2;
        }
        re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount = v19;
      }
LABEL_27:
      v14 += 8;
      v15 -= 8;
      if (!v15)
        goto LABEL_28;
    }
  }
LABEL_29:
  v7[1] = (float32x2_t)v11;
  v20 = *re::videoLogObjects((re *)CameraViewsCount);
  CameraViewsCount = (uint64_t *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)CameraViewsCount)
  {
    v21 = (uint64_t)v7[1];
    buf[0].i32[0] = 134217984;
    *(uint64_t *)((char *)buf[0].i64 + 4) = v21;
    _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "Setting viewport count to %zu in VideoPlayerComponentHelper", (uint8_t *)buf, 0xCu);
  }
  if (v7[1])
    goto LABEL_32;
}

uint64_t re::ecs2::VideoPlayerComponentHelper::impl::hasVideoEntityHierarchy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[2];

  if (!a2 || (*(_BYTE *)(a2 + 289) & 8) != 0 || *(_BYTE *)(a2 + 371))
    return 0;
  v8[0] = 0xF4664E2E6A44E25ALL;
  v8[1] = "__InternalVPC-Screen__";
  v4 = *(_QWORD *)(a2 + 328);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 344);
    v6 = 8 * v4;
    while (1)
    {
      if ((*(_QWORD *)(*(_QWORD *)v5 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
      {
        v7 = *(char **)(*(_QWORD *)v5 + 280);
        if (v7 == "__InternalVPC-Screen__" || !strcmp(v7, "__InternalVPC-Screen__"))
          break;
      }
      v5 += 8;
      v6 -= 8;
      if (!v6)
        goto LABEL_12;
    }
    v2 = 1;
  }
  else
  {
LABEL_12:
    v2 = 0;
  }
  re::StringID::destroyString((re::StringID *)v8);
  return v2;
}

void re::ecs2::VideoPlayerComponentHelper::impl::postBufferRetrievalUpdate(float32x2_t *this, float a2, re::ecs2::Entity *a3, re::AssetManager *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  re *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  re *v22;
  re *v23;
  uint64_t v24;
  uint64_t v25;
  char *WeakRetained;
  void *v27;
  uint64_t v28;
  re *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  re *v34;
  re::ecs2::VideoPlayerStatusComponent *v35;
  int v36;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  re *v45;
  _BYTE *v46;
  float32x2_t *v47;
  uint64_t v48;
  double v49;
  __n128 v50;
  __int128 *v51;
  float32x2_t *v52;
  unsigned __int8 v53;
  re *v54;
  float v55;
  float v56;
  NSObject *v57;
  unsigned __int8 *v58;
  int v59;
  float v60;
  float v61;
  uint64_t v62;
  float v63;
  float v64;
  __int128 *v65;
  float v66;
  float v67;
  NSObject *v68;
  double v69;
  double v70;
  uint64_t v71;
  float v72;
  NSObject *v73;
  double v74;
  uint64_t v75;
  float32x2_t v76;
  NSObject *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  double v84;
  double v85;
  double v86;
  int v87;
  float v88;
  int v89;
  int v90;
  float v91;
  float v92;
  NSObject *v93;
  double v94;
  double v95;
  re *v96;
  double v97;
  NSObject *v98;
  int v99;
  double v100;
  uint64_t v101;
  float32x2_t *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float32x2_t v107;
  float32x2_t v108;
  int v113;
  uint64_t v114;
  uint64_t v115;
  re *v116;
  double v117;
  double v118;
  __n128 v119;
  double v120;
  re *v121;
  NSObject *v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t *v125;
  float32x2_t *v126;
  uint32x2_t v127;
  uint32x2_t v128;
  NSObject *v129;
  _BOOL8 v130;
  double v131;
  double v132;
  NSObject *v133;
  double v134;
  double v135;
  NSObject *v136;
  NSObject *v137;
  NSObject *v138;
  NSObject *v139;
  NSObject *v140;
  NSObject *v141;
  int v142;
  NSObject *v143;
  int v144;
  NSObject *v145;
  int v146;
  int v147;
  NSObject *v148;
  int v149;
  int v150;
  NSObject *v151;
  int v152;
  NSObject *v153;
  double v154;
  NSObject *v155;
  NSObject *log;
  NSObject *loga;
  _BOOL4 logb;
  float v159;
  NSObject *v160;
  unsigned __int8 *v161;
  _BYTE buf[22];
  __int16 v163;
  double v164;
  __int16 v165;
  double v166;
  __int16 v167;
  int v168;
  uint64_t v169;

  v169 = *MEMORY[0x24BDAC8D0];
  if (!a3 || !a4)
    return;
  *(_QWORD *)buf = 0xF4664E2E6A44E25ALL;
  *(_QWORD *)&buf[8] = "__InternalVPC-Screen__";
  v8 = *((_QWORD *)a3 + 41);
  if (v8)
  {
    v9 = *((_QWORD *)a3 + 43);
    v10 = 8 * v8;
    while (1)
    {
      v11 = *(_QWORD **)v9;
      if ((*(_QWORD *)(*(_QWORD *)v9 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
      {
        v12 = (char *)v11[35];
        if (v12 == "__InternalVPC-Screen__" || !strcmp(v12, "__InternalVPC-Screen__"))
          break;
      }
      v9 += 8;
      v10 -= 8;
      if (!v10)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v11 = 0;
  }
  re::StringID::destroyString((re::StringID *)buf);
  *(_QWORD *)buf = 0x931CC76C0DD179BALL;
  *(_QWORD *)&buf[8] = "__InternalVPC-ScreenGlowEntity__";
  v13 = *((_QWORD *)a3 + 41);
  if (v13)
  {
    v14 = (uint64_t *)*((_QWORD *)a3 + 43);
    v15 = 8 * v13;
    while (1)
    {
      v16 = *v14;
      if ((*(_QWORD *)(*v14 + 272) ^ 0x931CC76C0DD179BALL) <= 1)
      {
        v17 = *(char **)(v16 + 280);
        if (v17 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v17, "__InternalVPC-ScreenGlowEntity__"))
          break;
      }
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    v16 = 0;
  }
  re::StringID::destroyString((re::StringID *)buf);
  if (!v11 || !v16)
  {
    v37 = *re::videoLogObjects(v18);
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v38 = "[VideoPlayerComponentHelper]->postBufferRetrievalUpdate :: ScreenEntity or ScreenGlowEntity is a nullptr";
    v39 = v37;
    v40 = 2;
    goto LABEL_44;
  }
  v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!v19)
  {
    v136 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1213;
    v38 = "VideoPlayerComponentHelper line: %d, videoPlayerComp is nullptr";
    v39 = v136;
    v40 = 8;
LABEL_44:
    _os_log_error_impl(&dword_224FE9000, v39, OS_LOG_TYPE_ERROR, v38, buf, v40);
    return;
  }
  v20 = 2;
  if (!this->i8[2])
    v20 = 3;
  if (this->i8[v20] == 1)
  {
    v161 = (unsigned __int8 *)v19;
    v21 = (char *)this + 3;
    if (!this->i8[2])
      goto LABEL_53;
    v22 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v19);
    if ((_DWORD)v22)
    {
      v137 = *re::videoLogObjects(v22);
      v22 = (re *)os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v22)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v137, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Screen Entity is valid", buf, 2u);
      }
    }
    v23 = (re *)re::VideoDefaults::logEnabled(v22);
    if ((_DWORD)v23)
    {
      v138 = *re::videoLogObjects(v23);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v138, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Screen Entity is valid", buf, 2u);
      }
    }
    v24 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v24)
    {
      v25 = v24;
      if (v161[144] != this->u8[5])
      {
        WeakRetained = (char *)objc_loadWeakRetained((id *)&this[794]);
        if (!WeakRetained
          || (v27 = WeakRetained,
              v28 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType), v27, !v28))
        {
          v41 = *re::videoLogObjects((re *)WeakRetained);
          v19 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
          v21 = (char *)this + 3;
          if (!(_DWORD)v19)
            goto LABEL_53;
          *(_WORD *)buf = 0;
          v42 = "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: screenGlowVideoComponent is nullptr";
          v43 = v41;
          v44 = 2;
          goto LABEL_47;
        }
        v29 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)WeakRetained);
        if ((_DWORD)v29)
        {
          v148 = *re::videoLogObjects(v29);
          if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
          {
            v149 = this->u8[5];
            v150 = v161[144];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v149;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v150;
            _os_log_impl(&dword_224FE9000, v148, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Preferred viewing mode has changed from %d to %d", buf, 0xEu);
          }
        }
        v30 = v161[144];
        *(_BYTE *)(v25 + 56) = v30;
        *(_BYTE *)(v28 + 56) = v30;
        this->i8[5] = v30;
      }
      v31 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v31)
      {
        v32 = v31;
        if (*(unsigned __int8 *)(v31 + 72) != *(unsigned __int8 *)(v25 + 57))
        {
          v31 = re::VideoDefaults::logEnabled((re::VideoDefaults *)v31);
          if ((_DWORD)v31)
          {
            v145 = *re::videoLogObjects((re *)v31);
            v31 = os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v31)
            {
              v146 = *(unsigned __int8 *)(v32 + 72);
              v147 = *(unsigned __int8 *)(v25 + 57);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v146;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v147;
              _os_log_impl(&dword_224FE9000, v145, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Current viewing mode has changed from %d to %d", buf, 0xEu);
            }
          }
          v33 = *(unsigned __int8 *)(v25 + 57);
          if (*(unsigned __int8 *)(v32 + 72) != v33)
          {
            *(_BYTE *)(v32 + 72) = v33;
            v31 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 200);
            if (v31)
              re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)v31, (const re::ecs2::Component *)v32);
          }
        }
        v19 = re::VideoDefaults::logEnabled((re::VideoDefaults *)v31);
        if ((_DWORD)v19)
        {
          v141 = *re::videoLogObjects((re *)v19);
          v19 = os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v19)
          {
            v142 = *(unsigned __int8 *)(v25 + 57);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v142;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            _os_log_impl(&dword_224FE9000, v141, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Screen Current Viewing Mode == %d; Unknown == %d",
              buf,
              0xEu);
          }
        }
        if (*(_BYTE *)(v25 + 57))
        {
          v34 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v19);
          if ((_DWORD)v34)
          {
            v143 = *re::videoLogObjects(v34);
            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
            {
              v144 = *(unsigned __int8 *)(v25 + 57);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v144;
              _os_log_impl(&dword_224FE9000, v143, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Viewing Mode is %d and setting the videoReadyToRender to true", buf, 8u);
            }
          }
          v35 = (re::ecs2::VideoPlayerStatusComponent *)v32;
          v36 = 1;
        }
        else
        {
          v21 = (char *)this + 3;
          if (!*(_BYTE *)(v32 + 72))
            goto LABEL_53;
          v45 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v19);
          if ((_DWORD)v45)
          {
            v151 = *re::videoLogObjects(v45);
            if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
            {
              v152 = *(unsigned __int8 *)(v25 + 57);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v152;
              _os_log_impl(&dword_224FE9000, v151, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Viewing Mode is %d and setting the videoReadyToRender to false", buf, 8u);
            }
          }
          v35 = (re::ecs2::VideoPlayerStatusComponent *)v32;
          v36 = 0;
        }
        re::ecs2::VideoPlayerStatusComponent::setVideoIsReadyToRender(v35, v36);
        goto LABEL_52;
      }
      v139 = *re::videoLogObjects(0);
      v19 = os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
      v21 = (char *)this + 3;
      if ((_DWORD)v19)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 440;
        v42 = "VideoPlayerComponentHelper line: %d, videoPlayerStatusComp is nullptr";
        goto LABEL_168;
      }
    }
    else
    {
      v139 = *re::videoLogObjects(0);
      v19 = os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
      v21 = (char *)this + 3;
      if ((_DWORD)v19)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 417;
        v42 = "VideoPlayerComponentHelper line: %d, screenVideoComponent is nullptr";
LABEL_168:
        v43 = v139;
        v44 = 8;
LABEL_47:
        _os_log_error_impl(&dword_224FE9000, v43, OS_LOG_TYPE_ERROR, v42, buf, v44);
LABEL_52:
        v21 = (char *)this + 3;
      }
    }
LABEL_53:
    if (this->i8[2])
      v46 = (char *)this + 2;
    else
      v46 = v21;
    if (*v46 != 1)
    {
      v57 = *re::videoLogObjects((re *)v19);
      v58 = v161;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v57, OS_LOG_TYPE_ERROR, "[VideoPlayerComponentHelper]->screenEntityAnimation :: This content is not Screen Content, or ScreenEntity, ScreenGlowEntity, or VideoPlayerEntity is a nullptr", buf, 2u);
      }
      goto LABEL_125;
    }
    v47 = this + 528;
    v48 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v51 = &xmmword_2260EA000;
    if (v48)
    {
      v52 = (float32x2_t *)v48;
      v53 = v161[75];
      this[528].i8[2] = v53;
      *(_BYTE *)(v48 + 217) = v53;
      vpc::ScreenMeshAnimationEngine::update((vpc::ScreenMeshAnimationEngine *)&this[6], a2, v49, v50);
      v55 = v52[8].f32[0];
      v56 = v52[8].f32[1];
      if (v55 == 0.0 || fabsf(v55) <= 0.001)
      {
        v59 = 0;
        if (v56 <= 0.0 || fabsf(v56) <= 0.001)
          goto LABEL_69;
      }
      else if (v56 <= 0.0)
      {
LABEL_68:
        v59 = 0;
        goto LABEL_69;
      }
      v60 = roundf((float)(v55 / v56) * 100.0) / 100.0;
      v61 = this[4].f32[1];
      if (v60 == v61 || vabds_f32(v60, v61) < (float)((float)((float)(fabsf(v60) + fabsf(v61)) + 1.0) * 0.00001))
        goto LABEL_68;
      v159 = v60;
      this[4].f32[1] = v60;
      log = *re::videoLogObjects(v54);
      v83 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
      if (v83)
      {
        v84 = v52[8].f32[0];
        v85 = v52[8].f32[1];
        v86 = this[4].f32[1];
        v87 = this[528].u8[2];
        *(_DWORD *)buf = 134219008;
        *(double *)&buf[4] = v84;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v85;
        v163 = 2048;
        v164 = v86;
        v165 = 2048;
        v166 = v61;
        v167 = 1024;
        v168 = v87;
        _os_log_impl(&dword_224FE9000, log, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] New video dimension: {%f, %f}, Screen new aspect ratio: %f, prev aspect ratio: %f, m_isScreenDeferAspectRatioTransitionToApp: %d", buf, 0x30u);
      }
      v88 = v159;
      if (this[528].i8[3])
      {
        v89 = v47->u8[0];
        v90 = v161[73];
        if (v89 != v90)
        {
          v47->i8[0] = v90;
          v89 = v90;
        }
        if (v89)
        {
          this[11].i32[1] = 1102053376;
          loga = *re::videoLogObjects((re *)v83);
          v83 = os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT);
          v88 = v159;
          if (v83)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, loga, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Force generating rounded corner for the first time showing the video", buf, 2u);
            v88 = v159;
          }
        }
      }
      logb = this[528].i8[2] != 0;
      if (this[528].i8[2])
      {
        v91 = this[4].f32[0];
        if (v91 <= 0.0 || (v92 = this[4].f32[1], v92 <= 0.0) || v91 != v92 && vabds_f32(v91, v92) > 0.001)
        {
          v93 = *re::videoLogObjects((re *)v83);
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
          {
            v94 = this[4].f32[0];
            v95 = this[4].f32[1];
            *(_DWORD *)buf = 134218240;
            *(double *)&buf[4] = v94;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v95;
            _os_log_impl(&dword_224FE9000, v93, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Scale ratio and content ratio are not matched yet, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", buf, 0x16u);
          }
        }
        if (this[528].i8[3])
          this[528].i8[3] = 0;
      }
      else
      {
        __asm { FMOV            V0.2S, #1.0 }
        *(float *)&_D0 = v88;
        this[3] = (float32x2_t)_D0;
        v113 = v161[74];
        this[528].i8[1] = v113;
        if (!v113 || this[528].i8[3])
        {
          this[528].i8[3] = 0;
          re::ecs2::VideoPlayerComponentHelper::impl::regenerateScreenMesh((uint64_t)this, v11, v16, a4, _D0, 0, this[11].f32[1]);
          this[11].f32[0] = v159;
          v122 = *re::videoLogObjects(v121);
          if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v122, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Generate first mesh for the initial playback", buf, 2u);
          }
        }
        else
        {
          v114 = vpc::ScreenMeshAnimationEngine::add((re *)&this[6], 0);
          if (v114)
          {
            v115 = v114;
            *(_QWORD *)buf = 0x4376BD773F800000;
            *(_DWORD *)&buf[8] = 1106990019;
            vpc::FloatSpringAnimation::setSpringParam(v114, (float *)buf);
            v116 = (re *)objc_msgSend(*(id *)(v115 + 40), "duration");
            *(float *)&v117 = v117;
            *(_DWORD *)(v115 + 12) = LODWORD(v117);
            *(float *)(v115 + 16) = v61;
            *(float *)(v115 + 20) = v159;
            v160 = *re::videoLogObjects(v116);
            if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
            {
              v120 = *(float *)(v115 + 12);
              *(_DWORD *)buf = 134217984;
              *(double *)&buf[4] = v120;
              _os_log_impl(&dword_224FE9000, v160, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] post m_isScreenSizeAnimationEnabled animation, duration: %f", buf, 0xCu);
            }
            vpc::ScreenMeshAnimationEngine::update((vpc::ScreenMeshAnimationEngine *)&this[6], 0.0, v118, v119);
          }
        }
      }
      v123 = this[3];
      v124 = v52[8];
      v125 = (float32x2_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v125)
      {
        v126 = v125;
        v127 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(v125[7], v123));
        if ((vpmax_u32(v127, v127).u32[0] & 0x80000000) != 0)
        {
          v125[7] = v123;
          v125 = *(float32x2_t **)(*(_QWORD *)&v125[2] + 200);
          if (v125)
            re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)v125, (const re::ecs2::Component *)v126);
        }
        v128 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(v126[8], v124));
        if ((vpmax_u32(v128, v128).u32[0] & 0x80000000) != 0)
        {
          v126[8] = v124;
          v125 = *(float32x2_t **)(*(_QWORD *)&v126[2] + 200);
          if (v125)
            re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)v125, (const re::ecs2::Component *)v126);
        }
        v129 = *re::videoLogObjects((re *)v125);
        v130 = os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT);
        if (v130)
        {
          v131 = v126[7].f32[0];
          v132 = v126[7].f32[1];
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v131;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v132;
          _os_log_impl(&dword_224FE9000, v129, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] UpdatePlayerScreenSize as %f x %f", buf, 0x16u);
        }
        v133 = *re::videoLogObjects((re *)v130);
        v54 = (re *)os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v54)
        {
          v134 = v126[8].f32[0];
          v135 = v126[8].f32[1];
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v134;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v135;
          _os_log_impl(&dword_224FE9000, v133, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] UpdateScreenVideoDimension as %f x %f", buf, 0x16u);
        }
      }
      else
      {
        v155 = *re::videoLogObjects(0);
        v54 = (re *)os_log_type_enabled(v155, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v54)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 1915;
          _os_log_error_impl(&dword_224FE9000, v155, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoPlayerStatusComponent is nullptr", buf, 8u);
        }
      }
      v51 = &xmmword_2260EA000;
      v59 = logb;
    }
    else
    {
      v140 = *re::videoLogObjects(0);
      v54 = (re *)os_log_type_enabled(v140, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v54)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1450;
        _os_log_error_impl(&dword_224FE9000, v140, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", buf, 8u);
      }
      v59 = 0;
      v51 = &xmmword_2260EA000;
    }
LABEL_69:
    if (this[528].i8[2])
    {
      v62 = *((_QWORD *)a3 + 30);
      v58 = v161;
      if (v62)
      {
        v63 = *(float *)(v62 + 36);
        if (v63 > 0.0)
        {
          v64 = *(float *)(v62 + 32) / v63;
          if (this[4].f32[0] != v64)
          {
            v65 = v51;
            this[4].f32[0] = v64;
            v54 = (re *)re::VideoDefaults::logEnabled(v54);
            if ((_DWORD)v54)
            {
              v153 = *re::videoLogObjects(v54);
              v54 = (re *)os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v54)
              {
                v154 = this[4].f32[0];
                *(_DWORD *)buf = 134217984;
                *(double *)&buf[4] = v154;
                _os_log_impl(&dword_224FE9000, v153, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] m_currentVideoEntityScaleAspectRatio is updated: %f", buf, 0xCu);
              }
            }
            v66 = this[4].f32[0];
            if (v66 <= 0.0
              || (v67 = this[4].f32[1], v67 <= 0.0)
              || (v59 = 1, v66 != v67) && vabds_f32(v66, v67) > *((float *)v65 + 992))
            {
              v68 = *re::videoLogObjects(v54);
              v54 = (re *)os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v54)
              {
                v69 = this[4].f32[0];
                v70 = this[4].f32[1];
                *(_DWORD *)buf = 134218240;
                *(double *)&buf[4] = v69;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v70;
                _os_log_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Scale ratio and content ratio are not matched yet, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", buf, 0x16u);
              }
              v59 = 1;
            }
          }
        }
      }
    }
    else
    {
      v58 = v161;
    }
    v71 = *((_QWORD *)a3 + 30);
    if (!v71)
      goto LABEL_89;
    v72 = *(float *)(v71 + 32);
    if (v72 < *(float *)(v71 + 36))
      v72 = *(float *)(v71 + 36);
    if (this[5].f32[0] == v72)
    {
LABEL_89:
      if (!v59)
      {
LABEL_100:
        if (this[4].f32[1] > 0.0)
        {
          v79 = v58[73];
          if (v47->u8[0] != v79)
          {
            v47->i8[0] = v79;
            v80 = vpc::ScreenMeshAnimationEngine::add((re *)&this[6], 1u);
            if (v80)
            {
              v81 = v80;
              if (v47->i8[0])
              {
                *(_QWORD *)buf = 0x41AA83123F800000;
                *(_DWORD *)&buf[8] = 1091812354;
                vpc::FloatSpringAnimation::setSpringParam(v80, (float *)buf);
                v82 = 0x41B0000040400000;
              }
              else
              {
                *(_QWORD *)buf = 0x41AA83123F800000;
                *(_DWORD *)&buf[8] = 1091812354;
                vpc::FloatSpringAnimation::setSpringParam(v80, (float *)buf);
                v82 = 0x4040000041B00000;
              }
              v96 = (re *)objc_msgSend(*(id *)(v81 + 40), "duration");
              *(float *)&v97 = v97;
              *(_DWORD *)(v81 + 12) = LODWORD(v97);
              *(_DWORD *)(v81 + 8) = 0;
              *(_QWORD *)(v81 + 16) = v82;
              v98 = *re::videoLogObjects(v96);
              if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
              {
                v99 = v47->u8[0];
                v100 = *(float *)(v81 + 12);
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v99;
                *(_WORD *)&buf[8] = 2048;
                *(double *)&buf[10] = v100;
                _os_log_impl(&dword_224FE9000, v98, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] post m_screenRoundedCornerEnabled animation: m_screenRoundedCornerEnabled: %d, duration: %f", buf, 0x12u);
              }
            }
          }
        }
LABEL_125:
        v101 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v101)
        {
          v102 = (float32x2_t *)v101;
          v103 = this[797].f32[0] > 1.0;
          if (*((_QWORD *)v58 + 6))
          {
            v104 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v58 + 40));
            if (v104)
            {
              v105 = *(_QWORD *)(v104 + 192);
              if (v105)
                v106 = *(float *)(v105 + 2496);
              else
                v106 = 0.0;
              if (fabsf(v106) >= 0.000001)
                v103 = 2;
            }
          }
          v107 = this[795];
          v108 = this[796];
          v102[28] = v107;
          v102[29] = v108;
          v102[30] = vmul_f32(vadd_f32(v107, v108), (float32x2_t)0x3F0000003F000000);
          v102[31].i32[0] = v103;
        }
        return;
      }
    }
    else
    {
      this[5].f32[0] = v72;
      v54 = (re *)re::VideoDefaults::logEnabled(v54);
      if ((_DWORD)v54)
      {
        v73 = *re::videoLogObjects(v54);
        v54 = (re *)os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v54)
        {
          v74 = this[5].f32[0];
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v74;
          _os_log_impl(&dword_224FE9000, v73, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] m_currentVideoEntityScaleMax is updated: %f", buf, 0xCu);
        }
      }
    }
    if (this[4].f32[1] > 0.0)
    {
      v75 = 12;
      do
      {
        v76 = this[v75];
        if (v76)
          break;
        _ZF = v75 == 270;
        v75 += 258;
      }
      while (!_ZF);
      if (!*(_QWORD *)&v76)
      {
        v78 = *re::videoLogObjects(v54);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v78, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] forceRegenerateMesh when animation enigine is idle", buf, 2u);
        }
        re::ecs2::VideoPlayerComponentHelper::impl::regenerateScreenMesh((uint64_t)this, v11, v16, a4, *(_QWORD *)&this[3], this[528].u8[2], this[11].f32[1]);
        if (this[528].i8[2])
          this[11].i32[0] = this[3].i32[0];
      }
    }
    goto LABEL_100;
  }
}

