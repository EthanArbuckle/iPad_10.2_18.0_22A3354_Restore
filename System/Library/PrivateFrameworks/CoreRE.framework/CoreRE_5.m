void re::AssetUtilities::init(re::AssetUtilities *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      re::introspect<re::DynamicAssetHeader>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"DynamicAssetHeader", (uint64_t (*)(re::internal *))re::allocInfo_DynamicAssetHeader, (re::IntrospectionBase *(*)(void))re::initInfo_DynamicAssetHeader, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DynamicAssetHeader>, 0);
    }
  }
}

BOOL re::AssetUtilities::deserializeOPACK(uint64_t a1, uint64_t a2, re **a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  _BOOL8 v20;
  NSObject *v21;
  double v22;
  double v23;
  re *PrettyTypeName;
  NSObject *v25;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE v30[8];
  _BYTE v31[39];
  char v32;
  _BYTE buf[24];
  uint64_t v34;
  char v35;
  _BYTE v36[31];
  uint8_t v37[4];
  uint64_t v38;
  __int16 v39;
  _BYTE *v40;
  uint64_t (**v41)();
  char v42;
  _BYTE v43[15];
  _BYTE v44[40];
  char v45;
  __int128 v46;
  _QWORD v47[15];
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56[6];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62[7];

  v62[6] = *MEMORY[0x24BDAC8D0];
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v32);
  if (v30[0])
  {
    *(_QWORD *)buf = 0x935762BFD538CE16;
    *(_QWORD *)&buf[8] = "AssetOPACKDeserializer";
    re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SerializerV2((uint64_t)&v41, (const StringID *)buf);
    re::StringID::destroyString((re::StringID *)buf);
    v41 = (uint64_t (**)())&off_24ED2E450;
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)&v50);
    re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFuncs(&v41);
    ((void (*)(uint64_t (***)()))v41[4])(&v41);
    v49 = v48[6];
    v47[14] = a4;
    re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::open(&v41, a1, a5, a6);
    if (!v45)
      ((void (*)(_DWORD *, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))v41[9])(&v41, (uint64_t)"asset", 1, a2, (re::TypeInfo *)v31, (uint64_t)v31, 0);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v41[7])((uint64_t)&v41, v12, v13, v14, v15, v16, v17, v18);
    v19 = (re *)re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::close(v44);
    v20 = v45 == 0;
    if (v45)
    {
      v21 = *re::assetsLogObjects(v19);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v27 = re::TypeInfo::name((re::TypeInfo *)v31)[1];
        buf[0] = v45;
        if (v45)
        {
          *(_OWORD *)&buf[8] = v46;
          re::DynamicString::DynamicString((re::DynamicString *)&v34, (const re::DynamicString *)v47);
          v28 = (v35 & 1) != 0 ? *(_BYTE **)&v36[7] : v36;
        }
        else
        {
          v28 = v36;
        }
        *(_DWORD *)v37 = 136315394;
        v38 = v27;
        v39 = 2080;
        v40 = v28;
        _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Asset deserialization failed. Type \"%s\". Details: %s", v37, 0x16u);
        if (buf[0])
        {
          if (v34 && (v35 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v34 + 40))();
        }
      }
    }
    v41 = &off_24ED2E708;
    v22 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v62);
    if (v57)
    {
      if (v61)
        (*(void (**)(double))(*(_QWORD *)v57 + 40))(v22);
      v61 = 0;
      v58 = 0;
      v59 = 0;
      v57 = 0;
      ++v60;
    }
    v23 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v56);
    if (v51)
    {
      if (v55)
        (*(void (**)(double))(*(_QWORD *)v51 + 40))(v23);
      v55 = 0;
      v52 = 0;
      v53 = 0;
      v51 = 0;
      ++v54;
    }
    re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer(&v41);
  }
  else
  {
    PrettyTypeName = (re *)re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v41);
    v25 = *re::assetsLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      if ((v42 & 1) != 0)
        v29 = *(_BYTE **)&v43[7];
      else
        v29 = v43;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v29;
      _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "Asset serialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if (v41 && (v42 & 1) != 0)
      (*((void (**)(void))*v41 + 5))();
    v20 = 0;
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v32);
  return v20;
}

uint64_t re::AssetUtilities::serializeIntrospectedAsset(_anonymous_namespace_ *a1, const re::IntrospectionBase **a2, const re::AssetPath *a3, uint64_t a4, int a5, const re::AssetPathMapping *a6, char a7)
{
  _anonymous_namespace_ *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[8];
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  void (**v22)(re::RemappedAssetSerialize *__hidden);
  _BYTE v23[104];

  re::RemappedAssetSerialize::RemappedAssetSerialize((re::RemappedAssetSerialize *)&v22, a3, a6);
  v21[2] = 0;
  v22 = &off_24ED2D130;
  v23[96] = a7;
  v21[0] = &v22;
  v21[1] = 0;
  switch(a5)
  {
    case 3:
      goto LABEL_6;
    case 2:
      if (*(_DWORD *)(a4 + 16) != 8 || strcmp(*(const char **)(a4 + 48), "SceneAsset"))
      {
LABEL_13:
        v22 = &off_24ED2D100;
        re::Optional<re::AssetPath>::~Optional((uint64_t)v23);
        return v16;
      }
LABEL_6:
      if (!v18[0] && v19 && (v20 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v19 + 40))();
      goto LABEL_13;
    case 1:
      goto LABEL_6;
  }
  re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid asset serialization format.", "!\"Unreachable code\"", "serializeIntrospectedAsset", 381);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t `anonymous namespace'::unwrap(re *a1)
{
  NSObject *v2;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)a1)
  {
    v2 = *re::assetsLogObjects(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      if ((*((_QWORD *)a1 + 2) & 1) != 0)
        v4 = (char *)*((_QWORD *)a1 + 3);
      else
        v4 = (char *)a1 + 17;
      v5 = 136446210;
      v6 = v4;
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "%{public}s", (uint8_t *)&v5, 0xCu);
    }
  }
  return *(unsigned __int8 *)a1;
}

uint64_t deserializeIntrospectedAssetWithVersioning@<X0>(uint64_t a1@<X0>, const char **a2@<X1>, uint64_t *a3@<X2>, re::PersistedSchema *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  _anonymous_namespace_ *v18;
  const re::IntrospectionBase *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t result;
  char v26;
  _anonymous_namespace_ *v27;
  __int128 v28;
  const char *v29;
  uint64_t v30;
  NSObject *v31;
  _BOOL8 v32;
  __int128 v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  char *v36;
  __int128 v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint8_t v43[16];
  uint8_t buf[16];
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a8)
    v17 = *(_QWORD *)(a8 + 8);
  else
    v17 = 0;
  re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v43, 2054, v17, *a2);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v43);
  v19 = (const re::IntrospectionBase *)a5;
  if (!a4)
    goto LABEL_12;
  re::getPrettyTypeName((re *)a5, (const re::IntrospectionBase *)&v37);
  if ((BYTE8(v37) & 1) != 0)
    v20 = v38;
  else
    v20 = (char *)&v37 + 9;
  v21 = re::PersistedSchema::introspectionInfo(a4, v20);
  if (v21)
  {
    v19 = (const re::IntrospectionBase *)v21;
    if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v37 + 40))();
LABEL_12:
    *(_QWORD *)buf = a6;
    *(_QWORD *)&buf[8] = 0;
    v45 = deserializeIntrospectedAssetWithVersioning(re::SeekableInputStream &,re::AssetType const&,re::AssetLoadData const&,re::PersistedSchema const*,re::IntrospectionBase const&,re::AssetSerializationScheme &,re::AssetSerializationFormat,re::Optional<unsigned long long>)::$_0::__invoke;
    v22 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*a3, (unint64_t)a2);
    v24 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 120))(v22);
    if (a7 == 3)
    {
    }
    else
    {
      if (a7 != 2)
      {
        re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) Unexpected asset serialization format.", "!\"Unreachable code\"", "deserializeIntrospectedAssetWithVersioning", 466);
        result = _os_crash();
        __break(1u);
        return result;
      }
      if (*(_DWORD *)(a5 + 16) != 8 || strcmp(*(const char **)(a5 + 48), "SceneAsset"))
      {
        *(_QWORD *)&v37 = &off_24ED7C6E0;
        *((_QWORD *)&v37 + 1) = a1;
        v38 = 0;
        LODWORD(v39) = 0;
        v40 = 0;
        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        v42 = 0;
        v26 = result;
        if ((_DWORD)v39)
          result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 24))(*((_QWORD *)&v37 + 1));
LABEL_20:
        if ((v26 & 1) != 0)
        {
          *(_BYTE *)a9 = 1;
          *(_QWORD *)(a9 + 8) = v24;
        }
        else
        {
          v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v22 + 16))(v22, v24);
          v28 = v37;
          v29 = v38;
          v30 = v39;
          *(_BYTE *)a9 = 0;
          *(_OWORD *)(a9 + 8) = v28;
          *(_QWORD *)(a9 + 24) = v29;
          *(_QWORD *)(a9 + 32) = v30;
        }
        return result;
      }
    }
    v26 = result;
    if (!(_BYTE)v37)
    {
      result = *((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        if ((v38 & 1) != 0)
          result = (*(uint64_t (**)(void))(**((_QWORD **)&v37 + 1) + 40))();
      }
    }
    goto LABEL_20;
  }
  v31 = *re::assetsLogObjects(0);
  v32 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  if (v32)
  {
    if ((BYTE8(v37) & 1) != 0)
      v36 = (char *)v38;
    else
      v36 = (char *)&v37 + 9;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v36;
    _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, "Failed to find asset schema '%s'", buf, 0xCu);
  }
  v33 = *(_OWORD *)buf;
  v34 = v45;
  v35 = v46;
  *(_BYTE *)a9 = 0;
  *(_OWORD *)(a9 + 8) = v33;
  *(_QWORD *)(a9 + 24) = v34;
  *(_QWORD *)(a9 + 32) = v35;
  result = v37;
  if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)v37 + 40))();
  return result;
}

uint64_t re::AssetUtilities::deserializeIntrospectedAsset(uint64_t a1, const char **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t result;
  _BYTE v8[8];
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;

  v8[0] = *(_BYTE *)a7;
  if (v8[0])
    v9 = *(_QWORD *)(a7 + 8);
  deserializeIntrospectedAssetWithVersioning(a1, a2, a3, 0, a4, a5, a6, (uint64_t)v8, (uint64_t)v10);
  result = v11;
  if (!v10[0] && v11)
  {
    if ((v12 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
    return 0;
  }
  return result;
}

__n128 re::AssetUtilities::saveAssetHandleToPath@<Q0>(re::AssetHandle *this@<X1>, re::FileStreamWriter *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const re::IntrospectionBase **v14;
  const re::AssetPath *v15;
  __n128 result;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 1);
  if (!v8)
  {
    v11 = 0;
    v9 = 0;
    goto LABEL_5;
  }
  v9 = *(uint64_t **)(v8 + 264);
  v10 = atomic_load((unsigned int *)(v8 + 704));
  if (v10 != 2)
  {
    v11 = *((_QWORD *)this + 1);
LABEL_5:
    re::AssetHandle::loadNow(v11, 0);
  }
  v12 = *((_QWORD *)this + 1);
  if (v12 && (v13 = atomic_load((unsigned int *)(v12 + 704)), v13 == 2))
  {
    re::AssetHandle::serializableAsset(this, &v21);
    v14 = (const re::IntrospectionBase **)v21.n128_u64[0];
    v15 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath(this);
    re::AssetUtilities::saveCompiledAssetToPath(a2, v14, v15, v9, a3, a4);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v21);
  }
  else
  {
    v17 = re::AssetHandle::assetInfo(this);
    if ((v17[17] & 1) != 0)
      v18 = (char *)v17[18];
    else
      v18 = (char *)v17 + 137;
    re::DynamicString::format((re::DynamicString *)"Asset '%s' failed to load", (re::DynamicString *)&v21, v18);
    result = v21;
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(__n128 *)(a4 + 8) = result;
    *(_QWORD *)(a4 + 24) = v19;
    *(_QWORD *)(a4 + 32) = v20;
  }
  return result;
}

uint64_t re::AssetUtilities::saveCompiledAssetToPath@<X0>(re::FileStreamWriter *a1@<X0>, const re::IntrospectionBase **a2@<X1>, const re::AssetPath *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  if (re::ensureFolderExistsForFile(a1, (const char *)a2))
  {
    re::FileStreamWriter::open(a1, (uint64_t)&v22);
    if ((_BYTE)v22)
    {
      re::AssetUtilities::saveCompiledAssetToStream((uint64_t)&v22 + 8, a2, a3, a4, a5, (unsigned __int8 *)a6);
    }
    else
    {
      re::formattedErrorMessage<re::DetailedError>((uint64_t)&v22 + 8, (re::DynamicString *)&v19);
      v16 = v19;
      v17 = v20;
      v18 = v21;
      *(_BYTE *)a6 = 0;
      *(_OWORD *)(a6 + 8) = v16;
      *(_QWORD *)(a6 + 24) = v17;
      *(_QWORD *)(a6 + 32) = v18;
    }
    return re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)&v22);
  }
  else
  {
    result = re::DynamicString::format((re::DynamicString *)"Failed to create directory for '%s'", (re::DynamicString *)&v22, a1);
    v13 = v22;
    v14 = v23;
    v15 = v24;
    *(_BYTE *)a6 = 0;
    *(_OWORD *)(a6 + 8) = v13;
    *(_QWORD *)(a6 + 24) = v14;
    *(_QWORD *)(a6 + 32) = v15;
  }
  return result;
}

uint64_t re::AssetUtilities::saveCompiledAssetToStream@<X0>(uint64_t a1@<X0>, const re::IntrospectionBase **a2@<X1>, const re::AssetPath *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X8>)
{
  uint64_t v11;
  const re::IntrospectionBase *v12;
  re *v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  double v18;
  int v19;
  __n128 v20;
  re::DynamicAssetHeader *v21;
  uint64_t v22;
  int v23;
  int v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  int v29;
  int v30;
  unsigned __int8 v31;
  _anonymous_namespace_ *v32;
  uint64_t v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _anonymous_namespace_ *v40;
  _anonymous_namespace_ *v41;
  _anonymous_namespace_ *v42;
  _anonymous_namespace_ *v43;
  _anonymous_namespace_ *v44;
  _anonymous_namespace_ *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  _anonymous_namespace_ *v51;
  char *v52;
  const char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t result;
  _BYTE v60[24];
  uint64_t v61;
  char v62;
  _BYTE v63[23];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  char *v68;
  _QWORD v69[4];
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75[8];
  _BYTE v76[35];
  char v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _anonymous_namespace_ *v81;
  int v82;
  uint64_t v83;
  _DWORD v84[3];
  int v85;
  uint64_t v86;
  _QWORD v87[2];
  _QWORD v88[2];
  _anonymous_namespace_ *v89;
  int v90;
  uint64_t v91;
  _QWORD v92[2];
  _QWORD v93[2];
  _anonymous_namespace_ *v94;
  int v95;
  uint64_t v96;
  _QWORD v97[2];
  _anonymous_namespace_ *v98;
  int v99;
  uint64_t v100;
  uint8_t buf[16];
  __int128 v102;
  __int128 v103;
  char *v104;
  _anonymous_namespace_ *v105;
  char v106;
  __int128 v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  _BYTE v111[48];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117[6];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123[10];

  v123[7] = *MEMORY[0x24BDAC8D0];
  v11 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(**(_QWORD **)a5, (unint64_t)a4);
  v12 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11);
  v13 = (re *)(*(uint64_t (**)(uint64_t, const re::IntrospectionBase **))(*(_QWORD *)v11 + 128))(v11, a2);
  v14 = (int)v13;
  if ((_DWORD)v13 == 1)
  {
    v15 = *re::assetsLogObjects(v13);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *a4;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Asset may not be fully serialized. Type \"%s\"", buf, 0xCu);
    }
  }
  v100 = 0;
  v97[1] = 0;
  v98 = 0;
  v97[0] = 0;
  v99 = 0;
  v17 = *(_DWORD *)(a5 + 32);
  if (v17 != 2)
  {
LABEL_7:
    v96 = 0;
    v93[1] = 0;
    v94 = 0;
    v95 = 0;
    v92[0] = &off_24ED7C100;
    v92[1] = v93;
    v93[0] = 0;
    if ((re::AssetUtilities::serializeIntrospectedAsset((_anonymous_namespace_ *)v92, a2, a3, (uint64_t)v12, v17, *(const re::AssetPathMapping **)(a5 + 16), *(_BYTE *)(a5 + 37)) & 1) == 0)
    {
      re::DynamicString::format((re::DynamicString *)"Serializing compiled file failed", (re::DynamicString *)buf);
      v20 = *(__n128 *)buf;
      v25 = v102;
      *a6 = 0;
      *(__n128 *)(a6 + 8) = v20;
      *(_OWORD *)(a6 + 24) = v25;
LABEL_86:
      if (v93[0] && v96)
        (*(void (**)(void))(*(_QWORD *)v93[0] + 40))();
      goto LABEL_89;
    }
    v91 = 0;
    v88[1] = 0;
    v89 = 0;
    v90 = 0;
    v87[0] = &off_24ED7C100;
    v87[1] = v88;
    v88[0] = 0;
    v21 = (re::DynamicAssetHeader *)(*(uint64_t (**)(uint64_t, _QWORD *, const re::IntrospectionBase **, _QWORD))(*(_QWORD *)v11 + 56))(v11, v87, a2, *(_QWORD *)(a5 + 24));
    if ((v21 & 1) == 0)
    {
      v26 = *((_QWORD *)a3 + 1);
      v68 = 0;
      v69[0] = 0;
      v67 = (__n128)v26;
      re::DynamicString::setCapacity(&v67, 0);
      re::AssetPath::fullAssetPath(a3, (re::DynamicString *)&v67);
      if ((v67.n128_u8[8] & 1) != 0)
        v27 = v68;
      else
        v27 = &v67.n128_i8[9];
      re::DynamicString::format((re::DynamicString *)"Serializing compiled file blob failed for %s", (re::DynamicString *)buf, v27);
      v20 = *(__n128 *)buf;
      v28 = v102;
      *a6 = 0;
      *(__n128 *)(a6 + 8) = v20;
      *(_OWORD *)(a6 + 24) = v28;
      if (v67.n128_u64[0] && (v67.n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v67.n128_u64[0] + 40))();
      goto LABEL_83;
    }
    v84[0] = 825246019;
    v23 = *(unsigned __int8 *)(a5 + 36);
    if (*(_BYTE *)(a5 + 36))
    {
      v24 = 3;
    }
    else
    {
      v29 = *(_DWORD *)(a5 + 32);
      if (v29 == 2)
      {
        v24 = 1;
      }
      else
      {
        if (v29 != 3)
        {
          re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) Unsupported compiled asset serialization format.", "!\"Unreachable code\"", "headerVersion", 199);
          result = _os_crash();
          __break(1u);
          return result;
        }
        v24 = 2;
      }
    }
    v84[1] = v24;
    v84[2] = 1;
    v86 = *(_QWORD *)(a5 + 8);
    v30 = v98 != 0;
    v85 = v30;
    if (v89)
    {
      v30 |= 2u;
      v85 = v30;
    }
    if (v23)
    {
      v85 = v30 | 4;
      v83 = 0;
      v80 = 0;
      v81 = 0;
      v79 = 0;
      v82 = 0;
      re::DynamicAssetHeader::DynamicAssetHeader(v21);
      v78 = *(_DWORD *)(a5 + 32);
      re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v77);
      if ((v31 & 1) == 0
      {
        re::introspect<re::DynamicAssetHeader>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"DynamicAssetHeader", (uint64_t (*)(re::internal *))re::allocInfo_DynamicAssetHeader, (re::IntrospectionBase *(*)(void))re::initInfo_DynamicAssetHeader, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DynamicAssetHeader>, 0);
      }
      if (!v75[0])
      {
        v54 = *(_OWORD *)buf;
        v55 = v102;
        *a6 = 0;
        *(_OWORD *)(a6 + 8) = v54;
        *(_OWORD *)(a6 + 24) = v55;
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v77);
        goto LABEL_79;
      }
      v67.n128_u16[4] = 0;
      v67.n128_u64[0] = (unint64_t)&off_24ED7C190;
      v68 = (char *)&v79;
      v69[0] = &unk_24ED7C1E8;
      v69[1] = 0;
      v69[2] = &off_24ED1E8F0;
      v69[3] = v69;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0x2000;
      v74 = 0;
      *(_QWORD *)v60 = 0x7F1E19097D86D060;
      *(_QWORD *)&v60[8] = "DynamicAssetHeaderSerializer";
      re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SerializerV2((uint64_t)buf, (const StringID *)v60);
      re::StringID::destroyString((re::StringID *)v60);
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v111);
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFuncs(buf);
      (*(void (**)(uint8_t *))(*(_QWORD *)buf + 32))(buf);
      v110 = v109[6];
      v33 = re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::open(buf, (uint64_t)&v67, 0, 0);
      if (v106
        || (v33 = (*(uint64_t (**)(uint8_t *, const char *, _QWORD, int *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)buf + 72))(buf, "DynamicAssetHeader", 0, &v78, v76, v76, 0), (v33 & 1) == 0))
      {
        v38 = 0;
        v46 = *(_OWORD *)v60;
        v47 = *(_QWORD *)&v60[16];
        v48 = v61;
        *a6 = 0;
        *(_OWORD *)(a6 + 8) = v46;
        *((_QWORD *)a6 + 3) = v47;
        *((_QWORD *)a6 + 4) = v48;
      }
      else if (v106)
      {
        v60[0] = 1;
        *(_OWORD *)&v60[8] = v107;
        re::DynamicString::DynamicString((re::DynamicString *)&v61, (const re::DynamicString *)&v108);
        if ((v62 & 1) != 0)
          v34 = *(_BYTE **)&v63[7];
        else
          v34 = v63;
        re::DynamicString::format((re::DynamicString *)"%s", (re::DynamicString *)&v64, v34);
        v35 = v64;
        v36 = v65;
        v37 = v66;
        *(_QWORD *)&v64 = 0;
        v65 = 0;
        *a6 = 0;
        *(_OWORD *)(a6 + 8) = v35;
        *((_QWORD *)a6 + 3) = v36;
        *((_QWORD *)a6 + 4) = v37;
        if (v60[0] && v61 && (v62 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v61 + 40))();
        v38 = 0;
      }
      else
      {
        (*(void (**)(uint8_t *))(*(_QWORD *)buf + 56))(buf);
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_BYTE *)&v102 + 8);
        if (v109)
        {
          (*(void (**)(uint8_t *))(*(_QWORD *)buf + 40))(buf);
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v111);
          v109 = 0;
        }
        v38 = 1;
      }
      *(_QWORD *)buf = &off_24ED2B1A0;
      v49 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v123);
      if (v118)
      {
        if (v122)
          (*(void (**)(double))(*(_QWORD *)v118 + 40))(v49);
        v122 = 0;
        v119 = 0;
        v120 = 0;
        v118 = 0;
        ++v121;
      }
      v50 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v117);
      if (v112)
      {
        if (v116)
          (*(void (**)(double))(*(_QWORD *)v112 + 40))(v50);
        v116 = 0;
        v113 = 0;
        v114 = 0;
        v112 = 0;
        ++v115;
      }
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(buf);
      re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)&v67);
      re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v77);
      if (!v38)
        goto LABEL_79;
      v39 = a1;
      if (*(_BYTE *)(a5 + 36))
      {
        *(_QWORD *)buf = 88;
        *(_QWORD *)&buf[8] = v81;
        v51 = v98;
        if ((v85 & 1) != 0)
          v52 = (char *)v81 + 88;
        else
          v52 = 0;
        if ((v85 & 1) == 0)
          v51 = 0;
        *(_QWORD *)&v102 = v52;
        *((_QWORD *)&v102 + 1) = v51;
        *(_QWORD *)&v103 = (char *)v81 + (_QWORD)v51 + 88;
        *((_QWORD *)&v103 + 1) = v94;
        if ((v85 & 2) != 0)
        {
          v104 = (char *)v94 + (unint64_t)v81 + (_QWORD)v51 + 88;
          v105 = v89;
        }
        else
        {
          v105 = 0;
          v104 = 0;
        }
      }
    }
    else
    {
      v83 = 0;
      v80 = 0;
      v81 = 0;
      v79 = 0;
      v82 = 0;
      v39 = a1;
    }
    v40 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v39 + 16))(v39, v84, 24);
    if (v40 == (_anonymous_namespace_ *)24)
    {
      if (!*(_BYTE *)(a5 + 36))
      {
LABEL_43:
        if (v98
          && (v43 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v100), v43 != v98))
        {
          v53 = "write compiled file schema failed";
        }
        else
        {
          v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, _anonymous_namespace_ *))(*(_QWORD *)v39 + 16))(v39, v96, v94);
          if (v44 == v94)
          {
            if (!v89
              || (v45 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v91), v45 == v89))
            {
              *a6 = 1;
              goto LABEL_79;
            }
            v53 = "write compiled file blob failed";
          }
          else
          {
            v53 = "write compiled file data failed";
          }
        }
        goto LABEL_78;
      }
      v41 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v39 + 16))(v39, buf, 64);
      if (v41 == (_anonymous_namespace_ *)64)
      {
        v42 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, _anonymous_namespace_ *))(*(_QWORD *)v39 + 16))(v39, v83, v81);
        if (v42 == v81)
          goto LABEL_43;
        v53 = "Failed to write DynamicAssetHeader bytes.";
      }
      else
      {
        v53 = "Failed to write CompiledAssetOffsets bytes.";
      }
    }
    else
    {
      v53 = "write compiled file header failed";
    }
LABEL_78:
    v20 = v67;
    v56 = v68;
    v57 = v69[0];
    *a6 = 0;
    *(__n128 *)(a6 + 8) = v20;
    *((_QWORD *)a6 + 3) = v56;
    *((_QWORD *)a6 + 4) = v57;
LABEL_79:
    if (v79)
    {
      if (v83)
        (*(void (**)(void))(*(_QWORD *)v79 + 40))();
      v83 = 0;
    }
LABEL_83:
    if (v88[0] && v91)
      (*(void (**)(void))(*(_QWORD *)v88[0] + 40))();
    goto LABEL_86;
  }
  LODWORD(v103) = 0;
  *(_OWORD *)buf = 0u;
  v102 = 0u;
  *(_QWORD *)((char *)&v103 + 4) = 0x7FFFFFFFLL;
  re::PersistedSchema::addIntrospectionGraph((re::PersistedSchema *)buf, v12);
  v67.n128_u64[0] = (unint64_t)&off_24ED7C100;
  v67.n128_u64[1] = (unint64_t)v97;
  v19 = *a6;
  v20.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)buf, v18);
  if (v19)
  {
    v17 = *(_DWORD *)(a5 + 32);
    goto LABEL_7;
  }
LABEL_89:
  result = v97[0];
  if (v97[0] && v100)
    result = (*(uint64_t (**)(__n128))(*(_QWORD *)v97[0] + 40))(v20);
  if (v14)
    return (*(uint64_t (**)(uint64_t, const re::IntrospectionBase **, __n128))(*(_QWORD *)v11 + 136))(v11, a2, v20);
  return result;
}

__n128 re::AssetUtilities::saveAssetHandleToStream@<Q0>(re::AssetHandle *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const re::IntrospectionBase **v14;
  const re::AssetPath *v15;
  __n128 result;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 1);
  if (!v8)
  {
    v11 = 0;
    v9 = 0;
    goto LABEL_5;
  }
  v9 = *(uint64_t **)(v8 + 264);
  v10 = atomic_load((unsigned int *)(v8 + 704));
  if (v10 != 2)
  {
    v11 = *((_QWORD *)this + 1);
LABEL_5:
    re::AssetHandle::loadNow(v11, 0);
  }
  v12 = *((_QWORD *)this + 1);
  if (v12 && (v13 = atomic_load((unsigned int *)(v12 + 704)), v13 == 2))
  {
    re::AssetHandle::serializableAsset(this, &v21);
    v14 = (const re::IntrospectionBase **)v21.n128_u64[0];
    v15 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath(this);
    re::AssetUtilities::saveCompiledAssetToStream(a2, v14, v15, v9, a3, (unsigned __int8 *)a4);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v21);
  }
  else
  {
    v17 = re::AssetHandle::assetInfo(this);
    if ((v17[17] & 1) != 0)
      v18 = (char *)v17[18];
    else
      v18 = (char *)v17 + 137;
    re::DynamicString::format((re::DynamicString *)"Asset '%s' failed to load", (re::DynamicString *)&v21, v18);
    result = v21;
    v19 = v22;
    v20 = v23;
    *(_BYTE *)a4 = 0;
    *(__n128 *)(a4 + 8) = result;
    *(_QWORD *)(a4 + 24) = v19;
    *(_QWORD *)(a4 + 32) = v20;
  }
  return result;
}

uint64_t re::AssetUtilities::loadCompiledAsset@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char *v12;
  uint64_t result;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  re::DynamicString::setCapacity(&v16, 0);
  if ((re::AssetPath::filePathToAsset(a1, (re::DynamicString *)&v16, 0, *(os_unfair_lock_s **)(a2 + 16)) & 1) != 0)
  {
    if ((v17 & 1) != 0)
      v12 = v18;
    else
      v12 = (char *)&v17 + 1;
    v14[0] = *(_BYTE *)a5;
    if (v14[0])
      v15 = *(_QWORD *)(a5 + 8);
    re::AssetUtilities::loadCompiledAssetFromPath(v12, (uint64_t *)a2, a3, a4, (uint64_t)v14, a6);
  }
  else
  {
    *(_BYTE *)a6 = 1;
    *(_QWORD *)(a6 + 8) = 0;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if ((v17 & 1) != 0)
      return (*(uint64_t (**)(void))(*v16 + 40))();
  }
  return result;
}

void re::AssetUtilities::loadCompiledAssetFromPath(char *a1@<X0>, uint64_t *a2@<X1>, const char **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[23];
  char v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _BYTE v31[49];
  _BYTE v32[23];
  int v33;

  re::FileSeekableInputStream::FileSeekableInputStream((re::FileSeekableInputStream *)v31, a1, 0, -1);
  if (v33 == -1)
  {
    if ((v31[48] & 1) != 0)
      v13 = *(_BYTE **)&v32[7];
    else
      v13 = v32;
    re::DynamicString::format((re::DynamicString *)"Attempt to open compiled file '%s' did not succeed: %s", (re::DynamicString *)&v27, a1, v13);
    if ((v28 & 1) != 0)
      v14 = v29;
    else
      v14 = (char *)&v28 + 1;
    re::WrappedError::make((re::WrappedError *)CFSTR("REAssetLoadingErrorDomain"), (const __CFString *)0x12C, (uint64_t)v14, &v22);
    v15 = v22;
    v22 = 0;
    *(_BYTE *)a6 = 0;
    *(_QWORD *)(a6 + 8) = v15;

    v16 = v27;
    if (v27 && (v28 & 1) != 0)
    {
      v17 = v29;
LABEL_15:
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 40))(v16, v17);
    }
  }
  else
  {
    v25[0] = *(_BYTE *)a5;
    if (v25[0])
      v26 = *(_QWORD *)(a5 + 8);
    re::AssetUtilities::loadCompiledAssetFromStream((re *)v31, a2, a3, a4, 0, 0, v25, (uint64_t)&v27);
    if ((_BYTE)v27)
    {
      v12 = v28;
      *(_BYTE *)a6 = 1;
      *(_QWORD *)(a6 + 8) = v12;
      goto LABEL_26;
    }
    if ((v29 & 1) != 0)
      v18 = v30;
    else
      v18 = (char *)&v29 + 1;
    re::DynamicString::format((re::DynamicString *)"Error loading compiled file '%s': %s", (re::DynamicString *)&v22, a1, v18);
    if ((v23 & 1) != 0)
      v19 = *(_BYTE **)&v24[7];
    else
      v19 = v24;
    re::WrappedError::make((re::WrappedError *)CFSTR("REAssetLoadingErrorDomain"), (const __CFString *)0x12C, (uint64_t)v19, &v21);
    v20 = v21;
    v21 = 0;
    *(_BYTE *)a6 = 0;
    *(_QWORD *)(a6 + 8) = v20;

    if (v22 && (v23 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    if (!(_BYTE)v27)
    {
      v16 = v28;
      if (v28)
      {
        if ((v29 & 1) != 0)
        {
          v17 = v30;
          goto LABEL_15;
        }
      }
    }
  }
LABEL_26:
  re::FileSeekableInputStream::~FileSeekableInputStream((re::FileSeekableInputStream *)v31);
}

void re::AssetUtilities::loadCompiledAssetFromStream(re *a1@<X0>, uint64_t *a2@<X1>, const char **a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  _BOOL8 Next;
  NSObject *v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  _BOOL8 v25;
  NSObject *v26;
  _BOOL8 v27;
  uint64_t *v28;
  int v29;
  re::DynamicAssetHeader *v30;
  void *v31;
  re *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  re::PersistedSchema *v41;
  _anonymous_namespace_ *v42;
  uint64_t *v43;
  _BOOL4 v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  char *v48;
  int v49;
  double v50;
  double v51;
  uint64_t *v52;
  int v53;
  re *v54;
  __n128 v55;
  re *v56;
  uint64_t v57;
  uint64_t v58;
  re *v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  void *v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  _BOOL8 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  NSObject *v73;
  _anonymous_namespace_ *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  _anonymous_namespace_ *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  re *v84;
  NSObject *v85;
  _anonymous_namespace_ *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  char *v94;
  uint64_t v95;
  char v96[8];
  uint64_t v97;
  char v98[8];
  uint64_t v99;
  uint8_t v100[8];
  re *v101;
  char v102;
  _BYTE v103[7];
  _BYTE *v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  uint64_t *v114;
  _OWORD v115[4];
  char v116;
  _BYTE v117[24];
  uint64_t v118;
  char v119;
  __int128 v120;
  _BYTE buf[24];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _BYTE v128[24];
  uint64_t v129;
  _BYTE v130[24];
  uint64_t *v131;
  __int128 v132;
  __int128 v133;
  _QWORD v134[3];
  uint64_t v135;
  uint64_t v136;
  int v137;
  _BYTE v138[48];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144[6];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150[10];

  v150[7] = *MEMORY[0x24BDAC8D0];
  v134[0] = 0;
  *(_QWORD *)&v133 = 0;
  v132 = 0uLL;
  DWORD2(v133) = 0;
  *(_QWORD *)&v130[8] = 0;
  *(_QWORD *)&v130[16] = 0;
  *(_QWORD *)v130 = a1;
  LODWORD(v131) = 0;
  Next = re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)v130, 0x18uLL);
  if (*(_QWORD *)&v130[16] > 0x17uLL)
  {
    v94 = a7;
    v95 = a4;
    v21 = **(_DWORD **)&v130[8];
    if (**(_DWORD **)&v130[8] != 825246019)
    {
      v26 = *re::assetsLogObjects((re *)Next);
      v27 = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
      if (v27)
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = 825246019;
        _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "Compiled file has incorrect file tag (got %x, expected %x)", buf, 0xEu);
      }
      v19 = *(_QWORD *)&buf[16];
      v20 = v122;
      v116 = 0;
      *(_OWORD *)v117 = *(_OWORD *)buf;
      goto LABEL_14;
    }
    v22 = *(_DWORD *)(*(_QWORD *)&v130[8] + 4);
    v23 = *(_DWORD *)(*(_QWORD *)&v130[8] + 8);
    if (a3 && v23 != 1)
    {
      v24 = *re::assetsLogObjects((re *)Next);
      v25 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (v25)
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v23;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = 1;
        _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "Compiled file has an incorrect asset version (got %d, expected %d)", buf, 0xEu);
      }
      v19 = *(_QWORD *)&buf[16];
      v20 = v122;
      v116 = 0;
      *(_OWORD *)v117 = *(_OWORD *)buf;
      goto LABEL_14;
    }
    v116 = 1;
    *(_DWORD *)v117 = 825246019;
    *(_DWORD *)&v117[4] = v22;
    *(_QWORD *)&v117[12] = *(_QWORD *)(*(_QWORD *)&v130[8] + 12);
    v29 = *(_DWORD *)(*(_QWORD *)&v130[8] + 20);
    *(_DWORD *)&v117[8] = v23;
    *(_DWORD *)&v117[20] = v29;
    re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)v130);
    memset(v115, 0, sizeof(v115));
    if ((v117[12] & 4) != 0)
    {
      v42 = (_anonymous_namespace_ *)re::CopyRead(a1, (re::SeekableInputStream *)0x40, (uint64_t)v115, v31);
      if ((unint64_t)v42 <= 0x3F)
      {
        v111 = 0;
        v112 = *(_OWORD *)v130;
        v113 = *(_QWORD *)&v130[16];
        v114 = v131;
        re::DynamicString::DynamicString((re::DynamicString *)v130, (const re::DynamicString *)&v112);
        *(_BYTE *)a8 = 0;
        v43 = v131;
        *(_QWORD *)(a8 + 8) = *(_QWORD *)v130;
        *(_QWORD *)(a8 + 32) = v43;
        *(_OWORD *)(a8 + 16) = *(_OWORD *)&v130[8];
LABEL_110:
        if ((_QWORD)v112 && (BYTE8(v112) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v112 + 40))();
LABEL_113:
        if (v116)
          return;
        goto LABEL_15;
      }
      v111 = 1;
      re::DynamicAssetHeader::DynamicAssetHeader(v42);
      v110 = 0;
      if ((v46 & 1) == 0
      {
        re::introspect<re::DynamicAssetHeader>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"DynamicAssetHeader", (uint64_t (*)(re::internal *))re::allocInfo_DynamicAssetHeader, (re::IntrospectionBase *(*)(void))re::initInfo_DynamicAssetHeader, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DynamicAssetHeader>, 0);
      }
      v120 = *((_OWORD *)re::introspect<re::DynamicAssetHeader>(void)::info + 2);
      re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v119);
      re::TypeRegistry::typeInfo((re *)v120, (re **)&v120, v130);
      re::TypeInfo::TypeInfo((uint64_t)v100, (uint64_t)&v130[8]);
      *(_QWORD *)buf = 0x2568151B0860AFE2;
      *(_QWORD *)&buf[8] = "DynamicAssetHeaderDeserializer";
      re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SerializerV2((uint64_t)v130, (const StringID *)buf);
      re::StringID::destroyString((re::StringID *)buf);
      v136 = v120;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v138);
      re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFuncs(v130);
      (*(void (**)(_BYTE *))(*(_QWORD *)v130 + 32))(v130);
      v137 = *(_DWORD *)(v136 + 24);
      v47 = re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::open(v130, (uint64_t)a1, 0, 0);
      v93 = a5;
      if (LOBYTE(v134[0])
        || (v47 = (*(uint64_t (**)(_BYTE *, const char *, _QWORD, int *, uint8_t *, uint8_t *, _QWORD))(*(_QWORD *)v130 + 72))(v130, "DynamicAssetHeader", 0, &v110, v100, v100, 0), (v47 & 1) == 0))
      {
        v106 = 0;
        v107 = *(_OWORD *)buf;
        v108 = *(_QWORD *)&buf[16];
        v109 = v122;
        v33 = a6;
        v49 = 0;
        v34 = v94;
        v35 = v95;
      }
      else
      {
        (*(void (**)(_BYTE *))(*(_QWORD *)v130 + 56))(v130);
        re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::close(&v131);
        v33 = a6;
        if (LOBYTE(v134[0]))
        {
          buf[0] = 1;
          *(_OWORD *)&buf[8] = *(_OWORD *)&v134[1];
          re::DynamicString::DynamicString((re::DynamicString *)&v122, (const re::DynamicString *)&v135);
          if ((v123 & 1) != 0)
            v48 = (char *)v124;
          else
            v48 = (char *)&v123 + 1;
          re::DynamicString::format((re::DynamicString *)"%s", (re::DynamicString *)v128, v48);
          v106 = 0;
          v107 = *(_OWORD *)v128;
          v108 = *(_QWORD *)&v128[16];
          v109 = v129;
          v34 = a7;
          if (buf[0] && v122 && (v123 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v122 + 40))();
          v49 = 0;
          v35 = v95;
        }
        else
        {
          v34 = a7;
          v35 = v95;
          if (v136)
          {
            (*(void (**)(_BYTE *))(*(_QWORD *)v130 + 40))(v130);
            re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v138);
            v136 = 0;
          }
          v49 = 1;
        }
      }
      *(_QWORD *)v130 = &off_24ED2E708;
      v50 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v150);
      if (v145)
      {
        if (v149)
          (*(void (**)(double))(*(_QWORD *)v145 + 40))(v50);
        v149 = 0;
        v146 = 0;
        v147 = 0;
        v145 = 0;
        ++v148;
      }
      v51 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v144);
      if (v139)
      {
        if (v143)
          (*(void (**)(double))(*(_QWORD *)v139 + 40))(v51);
        v143 = 0;
        v140 = 0;
        v141 = 0;
        v139 = 0;
        ++v142;
      }
      re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer(v130);
      re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v119);
      if (!v49)
      {
        if (!v106)
        {
          re::DynamicString::DynamicString((re::DynamicString *)v130, (const re::DynamicString *)&v107);
          *(_BYTE *)a8 = 0;
          v52 = v131;
          *(_QWORD *)(a8 + 8) = *(_QWORD *)v130;
          *(_QWORD *)(a8 + 32) = v52;
          *(_OWORD *)(a8 + 16) = *(_OWORD *)&v130[8];
          if ((_QWORD)v107 && (BYTE8(v107) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v107 + 40))();
          goto LABEL_109;
        }
LABEL_21:
        v36 = v34;
        v37 = v110;
        if (v110)
          goto LABEL_22;
        v45 = *(_DWORD *)&v117[4];
        if (*(_DWORD *)&v117[4] == 1)
        {
          v37 = 2;
LABEL_22:
          v91 = v33;
          v92 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*a2, (unint64_t)a3);
          v38 = (*(uint64_t (**)(void))(*(_QWORD *)v92 + 112))();
          v130[16] = 0;
          *(_QWORD *)v130 = &off_24ED42538;
          *(_QWORD *)&v130[8] = "schema";
          v132 = 0u;
          v133 = 0u;
          LODWORD(v134[0]) = 0;
          *(_QWORD *)((char *)v134 + 4) = 0x7FFFFFFFLL;
          v39 = v117[12];
          if ((v117[12] & 1) != 0)
          {
            v40 = v38;
            v44 = *(_DWORD *)(v38 + 16) == 8 && strcmp(*(const char **)(v38 + 48), "SceneAsset") == 0;
            v53 = !v44;
            *(_QWORD *)buf = &off_24ED7C6E0;
            *(_QWORD *)&buf[8] = a1;
            *(_QWORD *)&buf[16] = 0;
            LODWORD(v122) = 0;
            v123 = 0;
            v124 = (*(uint64_t (**)(re *))(*(_QWORD *)a1 + 40))(a1);
            LOBYTE(v125) = 0;
            if (!v100[0])
            {
              v65 = *re::assetsLogObjects(v54);
              if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
              {
                if ((v102 & 1) != 0)
                  v90 = v104;
                else
                  v90 = v103;
                *(_DWORD *)v128 = 136315138;
                *(_QWORD *)&v128[4] = v90;
                _os_log_error_impl(&dword_224FE9000, v65, OS_LOG_TYPE_ERROR, "%s", v128, 0xCu);
              }
              re::DynamicString::DynamicString((re::DynamicString *)v128, (const re::DynamicString *)&v101);
              *(_BYTE *)a8 = 0;
              v66 = v129;
              *(_QWORD *)(a8 + 8) = *(_QWORD *)v128;
              *(_QWORD *)(a8 + 32) = v66;
              *(_OWORD *)(a8 + 16) = *(_OWORD *)&v128[8];
              if (!v100[0] && v101 && (v102 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v101 + 40))();
              if ((_DWORD)v122)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 24))(*(_QWORD *)&buf[8]);
                LODWORD(v122) = 0;
              }
              goto LABEL_108;
            }
            v41 = v101;
            if ((_DWORD)v122)
              (*(void (**)(_QWORD, __n128))(**(_QWORD **)&buf[8] + 24))(*(_QWORD *)&buf[8], v55);
            v35 = v95;
            if (v95)
            {
LABEL_24:
              v98[0] = *v36;
              if (v98[0])
                v99 = *((_QWORD *)v36 + 1);
              deserializeIntrospectedAssetWithVersioning((uint64_t)a1, a3, a2, v41, v40, v35, v37, (uint64_t)v98, a8);
              if (!*(_BYTE *)a8)
                goto LABEL_108;
LABEL_69:
              v57 = *(_QWORD *)(a8 + 8);
              if ((v39 & 2) == 0)
              {
                v58 = (*(uint64_t (**)(re *))(*(_QWORD *)a1 + 40))(a1);
                v59 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)a1 + 64))(a1);
                if ((re *)v58 != v59)
                {
                  v73 = *re::assetsLogObjects(v59);
                  if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_error_impl(&dword_224FE9000, v73, OS_LOG_TYPE_ERROR, "Extra data in file", buf, 2u);
                  }
                  v74 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v57);
                  v75 = *(_OWORD *)buf;
                  v76 = *(_QWORD *)&buf[16];
                  v77 = v122;
                  *(_BYTE *)a8 = 0;
                  *(_OWORD *)(a8 + 8) = v75;
                  *(_QWORD *)(a8 + 24) = v76;
                  *(_QWORD *)(a8 + 32) = v77;
                  goto LABEL_108;
                }
              }
              *(_QWORD *)v100 = &off_24ED7C748;
              v101 = a1;
              v102 = 0;
              v60 = (*(uint64_t (**)(re *))(*(_QWORD *)a1 + 40))(a1);
              v104 = (_BYTE *)v60;
              v105 = -1;
              v61 = (*(uint64_t (**)(re *))(*(_QWORD *)a1 + 64))(a1);
              if (v61 != -1)
                v105 = v61 - v60;
              if (v93)
              {
                if ((v39 & 2) != 0)
                {
                  v127 = 0;
                  v124 = 0;
                  v125 = 0;
                  v123 = 0;
                  v126 = 0;
                  *(_QWORD *)&buf[8] = 0;
                  *(_QWORD *)&buf[16] = 0;
                  *(_QWORD *)buf = a1;
                  LODWORD(v122) = 0;
                  v62 = re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)buf, 0xFFFFFFFFFFFFFFFFLL);
                  if (!v62)
                  {
                    v79 = *re::assetsLogObjects((re *)v62);
                    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)v128 = 0;
                      _os_log_error_impl(&dword_224FE9000, v79, OS_LOG_TYPE_ERROR, "Error reading asset blob", v128, 2u);
                    }
                    v80 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v57);
                    v81 = *(_OWORD *)v128;
                    v82 = *(_QWORD *)&v128[16];
                    v83 = v129;
                    *(_BYTE *)a8 = 0;
                    *(_OWORD *)(a8 + 8) = v81;
                    *(_QWORD *)(a8 + 24) = v82;
                    *(_QWORD *)(a8 + 32) = v83;
                    re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)buf);
                    goto LABEL_107;
                  }
                  re::Data::makeDataWithBytes(*(re::Data **)&buf[8], *(const void **)&buf[16], v128);
                  if (v128 != v93)
                  {
                    v63 = *(_QWORD *)v128;
                    *(_QWORD *)v128 = 0;
                    v64 = *(void **)v93;
                    *(_QWORD *)v93 = v63;

                  }
                  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)buf);
                }
              }
              else
              {
                if (*v94)
                  v72 = *((_QWORD *)v94 + 1);
                else
                  v72 = 0;
                re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v128, 2056, v72, *a3);
                v84 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v92 + 24))(v92, v57, v100, v91);
                if ((v84 & 1) == 0)
                {
                  v85 = *re::assetsLogObjects(v84);
                  if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_error_impl(&dword_224FE9000, v85, OS_LOG_TYPE_ERROR, "Failed to create runtime data", buf, 2u);
                  }
                  v86 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v57);
                  v87 = *(_OWORD *)buf;
                  v88 = *(_QWORD *)&buf[16];
                  v89 = v122;
                  *(_BYTE *)a8 = 0;
                  *(_OWORD *)(a8 + 8) = v87;
                  *(_QWORD *)(a8 + 24) = v88;
                  *(_QWORD *)(a8 + 32) = v89;
                  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v128);
                  goto LABEL_107;
                }
                re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v128);
              }
              *(_BYTE *)a8 = 1;
              *(_QWORD *)(a8 + 8) = v57;
LABEL_107:
              re::SeekableInputStreamSlice::detach((re::SeekableInputStreamSlice *)v100);
LABEL_108:
              re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)v130);
              goto LABEL_109;
            }
          }
          else
          {
            v40 = v38;
            v41 = 0;
            if (v35)
              goto LABEL_24;
          }
          *(_QWORD *)buf = &off_24ED2D2A8;
          v96[0] = *v36;
          if (v96[0])
            v97 = *((_QWORD *)v36 + 1);
          v56 = (re *)deserializeIntrospectedAssetWithVersioning((uint64_t)a1, a3, a2, v41, v40, (uint64_t)buf, v37, (uint64_t)v96, a8);
          if (!*(_BYTE *)a8)
          {
            v78 = *re::assetsLogObjects(v56);
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v100 = 0;
              _os_log_error_impl(&dword_224FE9000, v78, OS_LOG_TYPE_ERROR, "Failed to deserialize asset data", v100, 2u);
            }
            goto LABEL_108;
          }
          goto LABEL_69;
        }
        if (*(_DWORD *)&v117[4] == 2)
        {
          v37 = 3;
          goto LABEL_22;
        }
        v67 = *re::assetsLogObjects(v32);
        v68 = os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
        if (v68)
        {
          *(_DWORD *)v130 = 67109120;
          *(_DWORD *)&v130[4] = v45;
          _os_log_error_impl(&dword_224FE9000, v67, OS_LOG_TYPE_ERROR, "Compiled file has an incompatible header version (got %d, expected a valid CompiledAssetHeaderVersion enum value).", v130, 8u);
        }
        v69 = *(_OWORD *)v130;
        v70 = *(_QWORD *)&v130[16];
        v71 = v131;
        *(_BYTE *)a8 = 0;
        *(_OWORD *)(a8 + 8) = v69;
        *(_QWORD *)(a8 + 24) = v70;
        *(_QWORD *)(a8 + 32) = v71;
LABEL_109:
        if (v111)
          goto LABEL_113;
        goto LABEL_110;
      }
    }
    else
    {
      v111 = 1;
      re::DynamicAssetHeader::DynamicAssetHeader(v30);
      v110 = 0;
      v93 = a5;
      v33 = a6;
      v34 = a7;
      v35 = v95;
    }
    v106 = 1;
    goto LABEL_21;
  }
  v17 = *re::assetsLogObjects((re *)Next);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (v18)
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Compiled file is too short", buf, 2u);
  }
  v19 = *(_QWORD *)&buf[16];
  v20 = v122;
  v116 = 0;
  *(_OWORD *)v117 = *(_OWORD *)buf;
LABEL_14:
  *(_QWORD *)&v117[16] = v19;
  v118 = v20;
  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)v130);
  re::DynamicString::DynamicString((re::DynamicString *)v130, (const re::DynamicString *)v117);
  *(_BYTE *)a8 = 0;
  v28 = v131;
  *(_QWORD *)(a8 + 8) = *(_QWORD *)v130;
  *(_QWORD *)(a8 + 32) = v28;
  *(_OWORD *)(a8 + 16) = *(_OWORD *)&v130[8];
LABEL_15:
  if (*(_QWORD *)v117)
  {
    if ((v117[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v117 + 40))();
  }
}

uint64_t re::AssetUtilities::loadCompiledAssetFromData@<X0>(id *a1@<X0>, uint64_t *a2@<X1>, const char **a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v14[8];
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  id v18[10];

  v16 = *a1;
  re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)v17, &v16, 1, 0);

  v14[0] = *(_BYTE *)a6;
  if (v14[0])
    v15 = *(_QWORD *)(a6 + 8);
  re::AssetUtilities::loadCompiledAssetFromStream((re *)v17, a2, a3, a4, a5, 0, v14, a7);
  v17[0] = &off_24ED7BE48;

  v17[0] = &off_24ED7BDD0;
  return re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v18);
}

uint64_t re::AssetUtilities::loadLocalCompiledOrSourceAsset@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  re::path *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  _anonymous_namespace_ *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  _anonymous_namespace_ *v32;
  __int128 v33;
  uint64_t v34;
  const char *v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  _anonymous_namespace_ *v42;
  _anonymous_namespace_ *v43;
  __int128 v44;
  uint64_t v45;
  const char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _anonymous_namespace_ *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  char v56[8];
  uint64_t v57;
  char v58[8];
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  _BYTE v62[16];
  uint64_t v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  const char *v67;
  char v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v14 = *(const char **)(a3 + 8);
  re::DynamicString::insert((re::DynamicString *)&v60, 0, ".", 1uLL);
  v15 = *((_QWORD *)a1 + 1);
  if ((v15 & 1) != 0)
    v16 = v15 >> 1;
  else
    v16 = v15 >> 1;
  if ((v61[0] & 1) != 0)
    v17 = (const char *)v61[1];
  else
    v17 = (char *)v61 + 1;
  if ((v61[0] & 1) != 0)
    v18 = v61[0] >> 1;
  else
    v18 = LOBYTE(v61[0]) >> 1;
  re::DynamicString::rfind((uint64_t)a1, v17, v18, v16 - 1, (uint64_t)v58);
  if (v58[0])
  {
    v19 = (v61[0] & 1) != 0 ? v61[0] >> 1 : LOBYTE(v61[0]) >> 1;
    if (v59 == v16 - v19)
    {
      if ((*((_QWORD *)a1 + 1) & 1) != 0)
        v20 = (char *)*((_QWORD *)a1 + 2);
      else
        v20 = a1 + 9;
      v56[0] = *a5;
      if (v56[0])
        v57 = *((_QWORD *)a5 + 1);
      re::AssetUtilities::loadCompiledAssetFromPath(v20, (uint64_t *)a2, (const char **)a3, a4, (uint64_t)v56, (uint64_t)&v71);
      if ((_BYTE)v71)
      {
        v21 = *((_QWORD *)&v71 + 1);
        *(_BYTE *)a7 = 1;
        *(_QWORD *)(a7 + 8) = v21;
      }
      else
      {
        v43 = (_anonymous_namespace_ *)re::WrappedError::localizedDescription((id *)&v71 + 1);
        v44 = v65;
        v45 = v66;
        v46 = v67;
        *(_BYTE *)a7 = 0;
        *(_OWORD *)(a7 + 8) = v44;
        *(_QWORD *)(a7 + 24) = v45;
        *(_QWORD *)(a7 + 32) = v46;

      }
      goto LABEL_64;
    }
  }
  v55 = a4;
  if (*a5)
    v22 = *((_QWORD *)a5 + 1);
  else
    v22 = 0;
  if ((*((_QWORD *)a1 + 1) & 1) != 0)
    v23 = (re::path *)*((_QWORD *)a1 + 2);
  else
    v23 = (re::path *)(a1 + 9);
  v24 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)a2, a3);
  v25 = *(const char **)a3;
  v27 = (_anonymous_namespace_ *)re::path::ext(v23, v26);
  if (*(_BYTE *)v27 != 46)
    goto LABEL_36;
  v28 = (***(uint64_t (****)(_QWORD, uint64_t))(a2 + 8))(*(_QWORD *)(a2 + 8), (uint64_t)v27 + 1);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v28 + 16))(&v65);
  v29 = v66 & 1;
  if ((v66 & 1) != 0)
    v30 = v67;
  else
    v30 = (char *)&v66 + 1;
  v31 = strcmp(v25, v30);
  v27 = (_anonymous_namespace_ *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1) && v29)
    v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((_QWORD **)&v65 + 1) + 40))();
  if (v31)
  {
LABEL_36:
    re::DynamicString::operator+((re::DynamicString *)&v71, (uint64_t)&v69, (re::DynamicString *)&v65);
    v33 = v65;
    v65 = 0uLL;
    v34 = v66;
    v35 = v67;
    v66 = 0;
    v67 = 0;
    *(_BYTE *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v33;
    *(_QWORD *)(a7 + 24) = v34;
    *(_QWORD *)(a7 + 32) = v35;
    if (v69 && (v70 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v69 + 40))();
    if ((_QWORD)v71 && (BYTE8(v71) & 1) != 0)
    {
      v36 = *(void (**)(void))(*(_QWORD *)v71 + 40);
LABEL_63:
      v36();
      goto LABEL_64;
    }
    goto LABEL_64;
  }
  v37 = v24;
  v38 = v22;
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 176))(v37, a6);
  v40 = (_anonymous_namespace_ *)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, re::path *, uint64_t, uint64_t))(*(_QWORD *)v28 + 40))(&v65, v28, v23, v39, v55);
  if (!(_BYTE)v65)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v63, (const re::DynamicString *)&v67);
    re::DynamicString::operator+((re::DynamicString *)&v69, (uint64_t)&v63, (re::DynamicString *)&v71);
    v47 = v71;
    v71 = 0uLL;
    v48 = v72;
    v49 = v73;
    v72 = 0;
    v73 = 0;
    *(_BYTE *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v47;
    *(_QWORD *)(a7 + 24) = v48;
    *(_QWORD *)(a7 + 32) = v49;
    if (v63 && (v64 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v63 + 40))();
    if (v69 && (v70 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v69 + 40))();
    goto LABEL_52;
  }
  v41 = *((_QWORD *)&v65 + 1);
  re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v62, 2056, v38, v25);
  v42 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 24))(v37, v41, 0, 0);
  if ((v42 & 1) != 0)
  {
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v62);
    *(_BYTE *)a7 = 1;
    *(_QWORD *)(a7 + 8) = v41;
LABEL_52:
    v41 = 0;
    goto LABEL_60;
  }
  re::DynamicString::operator+((re::DynamicString *)&v69, (uint64_t)&v63, (re::DynamicString *)&v71);
  v51 = v71;
  v71 = 0uLL;
  v52 = v72;
  v53 = v73;
  v72 = 0;
  v73 = 0;
  *(_BYTE *)a7 = 0;
  *(_OWORD *)(a7 + 8) = v51;
  *(_QWORD *)(a7 + 24) = v52;
  *(_QWORD *)(a7 + 32) = v53;
  if (v63 && (v64 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v63 + 40))();
  if (v69 && (v70 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v69 + 40))();
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v62);
LABEL_60:
  if (!(_BYTE)v65 && v67 && (v68 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v67 + 40))();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 56))(v28, v39);
  if (v41)
  {
    v36 = *(void (**)(void))(*(_QWORD *)v37 + 16);
    goto LABEL_63;
  }
LABEL_64:
  result = v60;
  if (v60)
  {
    if ((v61[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v60 + 40))();
  }
  return result;
}

uint64_t re::AssetUtilities::readSourceJson@<X0>(re::AssetUtilities *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, const re::IntrospectionBase *a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[23];
  _QWORD v28[3];
  _BYTE v29[8];
  _BYTE v30[48];

  re::FileStreamReader::open(this, (uint64_t)v29);
  if (v29[0])
  {
    v28[1] = 0;
    v28[2] = 0;
    v28[0] = a4;
    if ((_BYTE)v23)
    {
      *(_BYTE *)a5 = 1;
    }
    else
    {
      if ((v26 & 1) != 0)
        v15 = *(_BYTE **)&v27[7];
      else
        v15 = v27;
      re::DynamicString::format((re::DynamicString *)"Failed to read JSON source asset \"%s\": %s", (re::DynamicString *)&v20, this, v15);
      v16 = v20;
      v17 = v21;
      v18 = v22;
      *(_BYTE *)a5 = 0;
      *(_OWORD *)(a5 + 8) = v16;
      *(_QWORD *)(a5 + 24) = v17;
      *(_QWORD *)(a5 + 32) = v18;
      if (!(_BYTE)v23 && v25 && (v26 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
    }
  }
  else
  {
    re::formattedErrorMessage<re::DetailedError>((uint64_t)v30, (re::DynamicString *)&v23);
    v12 = v23;
    v13 = v24;
    v14 = v25;
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v12;
    *(_QWORD *)(a5 + 24) = v13;
    *(_QWORD *)(a5 + 32) = v14;
  }
  return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v29);
}

size_t re::AssetUtilities::estimateSize_introspectionLockedShared(re::AssetUtilities *this, re::TypeInfo *a2, const re::TypeInfo *a3)
{
  re::AssetUtilities *v4;
  size_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  const char *v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  re::AssetUtilities *v23;
  BOOL v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  re::AssetUtilities *v28;
  BOOL v29;
  _anonymous_namespace_ *v30;
  int v31;
  int v32;
  uint64_t v33;
  re::AssetUtilities *v34;
  BOOL v35;
  re::AssetUtilities *v36;
  BOOL v37;
  re::AssetUtilities *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  char *v44;
  uint64_t v46;
  uint64_t (*i)(void);
  re::AssetUtilities *v48;
  BOOL v49;
  _BYTE v50[32];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57[2];
  uint64_t v58;
  _OWORD v59[2];

  if (!this)
    return 0;
  v4 = this;
  if ((_DWORD)a3)
    v5 = *(unsigned int *)(*((_QWORD *)a2 + 2) + 8);
  else
    v5 = 0;
  if (*((_BYTE *)a2 + 12) == 8)
  {
    v6 = re::TypeInfo::name(a2);
    if ((unint64_t)*v6 >> 1 == 94623636)
    {
      v7 = (char *)v6[1];
      if (v7 == "char*" || !strcmp(v7, "char*"))
      {
        v12 = *(const char **)v4;
        goto LABEL_19;
      }
    }
    v8 = re::TypeInfo::name(a2);
    if ((unint64_t)*v8 >> 1 == 0x134375A94D9F7110)
    {
      v9 = (char *)v8[1];
      if (v9 == "DynamicString" || !strcmp(v9, "DynamicString"))
      {
        v14 = *((_QWORD *)v4 + 1);
        if ((v14 & 1) != 0)
          v15 = v14 >> 1;
        else
          v15 = v14 >> 1;
        v13 = v5 + v15;
        goto LABEL_24;
      }
    }
    v10 = re::TypeInfo::name(a2);
    if ((unint64_t)*v10 >> 1 == 0x22C6ED80D0CLL)
    {
      v11 = (char *)v10[1];
      if ((v11 == "StringID" || !strcmp(v11, "StringID")) && (*(_BYTE *)v4 & 1) != 0)
      {
        v12 = (const char *)*((_QWORD *)v4 + 1);
LABEL_19:
        v13 = v5 + strlen(v12);
LABEL_24:
        v5 = v13 + 1;
      }
    }
  }
  v16 = (_QWORD *)*((_QWORD *)a2 + 2);
  if ((v16[6] & 2) == 0)
  {
    switch(*((_BYTE *)a2 + 12))
    {
      case 1:
      case 2:
        return v5;
      case 3:
        re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)a2);
        v17 = (*(uint64_t (**)(re::AssetUtilities *))(v56 + 80))(v4);
        if (!v17)
          return v5;
        v4 = (re::AssetUtilities *)v17;
        re::TypeRegistry::typeInfo(v54, *(_QWORD *)(v56 + 72), v59);
        re::TypeInfo::TypeInfo((uint64_t)&v51, (uint64_t)v59 + 8);
        v19 = (char *)&v51;
        goto LABEL_54;
      case 4:
        re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)a2);
        re::TypeRegistry::typeInfo(v54, *(_QWORD *)(v56 + 72), v59);
        re::TypeInfo::TypeInfo((uint64_t)&v51, (uint64_t)v59 + 8);
        v20 = re::ArrayAccessor::size((re::ArrayAccessor *)&v54, (char *)v4);
        v21 = v20;
        if ((*(_DWORD *)(v56 + 84) & 0xFFFFFF) != 0)
          v5 += v20 * *(unsigned int *)(v52 + 8);
        if ((*(_BYTE *)(v52 + 48) & 2) == 0 && v20)
        {
          v22 = 0;
          do
          {
            v23 = (re::AssetUtilities *)re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v54, (char *)v4, v22);
            v5 += re::AssetUtilities::estimateSize_introspectionLockedShared(v23, &v51, 0, v24);
            ++v22;
          }
          while (v21 != v22);
        }
        return v5;
      case 5:
        re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)a2);
        re::TypeRegistry::typeInfo(v54, *(_QWORD *)(v56 + 72), v59);
        re::TypeInfo::TypeInfo((uint64_t)&v51, (uint64_t)v59 + 8);
        v25 = (_anonymous_namespace_ *)(*(uint64_t (**)(re::AssetUtilities *))(v56 + 80))(v4);
        v5 += (_QWORD)v25 * *(unsigned int *)(v52 + 8);
        if ((*(_BYTE *)(v52 + 48) & 2) == 0)
        {
          if (*(_QWORD *)(v56 + 96))
          {
            v26 = v25;
            if (v25)
            {
              v27 = 0;
              do
              {
                v28 = (re::AssetUtilities *)(*(uint64_t (**)(re::AssetUtilities *, _anonymous_namespace_ *))(v56 + 96))(v4, v27);
                v5 += re::AssetUtilities::estimateSize_introspectionLockedShared(v28, &v51, 0, v29);
                v27 = (_anonymous_namespace_ *)((char *)v27 + 1);
              }
              while (v26 != v27);
            }
          }
          else if (*(_QWORD *)(v56 + 104) && *(_QWORD *)(v56 + 112) && *(_QWORD *)(v56 + 120))
          {
            for (i = *(uint64_t (**)(void))(v56 + 112); ; i = *(uint64_t (**)(void))(v56 + 112))
            {
              v48 = (re::AssetUtilities *)i();
              if (!v48)
                break;
              v5 += re::AssetUtilities::estimateSize_introspectionLockedShared(v48, &v51, 0, v49);
            }
          }
        }
        return v5;
      case 6:
        re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)a2);
        re::TypeRegistry::typeInfo(v54, *(_QWORD *)(v56 + 72), v59);
        re::TypeInfo::TypeInfo((uint64_t)&v51, (uint64_t)v59 + 8);
        re::TypeRegistry::typeInfo(v54, *(_QWORD *)(v56 + 80), v59);
        re::TypeInfo::TypeInfo((uint64_t)v57, (uint64_t)v59 + 8);
        v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(re::AssetUtilities *))(v56 + 88))(v4);
        v5 += (*(unsigned int *)(v58 + 8) + (unint64_t)*(unsigned int *)(v52 + 8)) * (_QWORD)v30;
        v31 = *(_DWORD *)(v52 + 48);
        v32 = *(_DWORD *)(v58 + 48);
        if ((v31 & 2) == 0 || (v32 & 2) == 0)
        {
          if ((*(unsigned int (**)(void))(v56 + 120))())
          {
            do
            {
              if ((v31 & 2) == 0)
              {
                v34 = (re::AssetUtilities *)(*(uint64_t (**)(uint64_t))(v56 + 128))(v33);
                v5 += re::AssetUtilities::estimateSize_introspectionLockedShared(v34, &v51, 0, v35);
              }
              if ((v32 & 2) == 0)
              {
                v36 = (re::AssetUtilities *)(*(uint64_t (**)(uint64_t))(v56 + 136))(v33);
                v5 += re::AssetUtilities::estimateSize_introspectionLockedShared(v36, v57, 0, v37);
              }
            }
            while (((*(uint64_t (**)(uint64_t))(v56 + 120))(v33) & 1) != 0);
          }
        }
        return v5;
      case 7:
        re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)a2);
        re::UnionAccessor::activeMemberType((re::UnionAccessor *)&v54, (char *)v4, v59);
        if (!LOBYTE(v59[0]))
          return v5;
        v19 = (char *)v59 + 8;
LABEL_54:
        v38 = v4;
        v39 = 0;
        break;
      case 8:
        re::TypeRegistry::typeInfo(*(_QWORD **)a2, v16[9], &v54);
        if ((_BYTE)v54)
          v5 += re::AssetUtilities::estimateSize_introspectionLockedShared(v4, &v55, 0, v40);
        re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v51, *(_QWORD *)a2, *((_QWORD *)a2 + 2));
        v41 = v53;
        if (v53)
        {
          v42 = 0;
          do
          {
            re::TypeMemberCollection::operator[]((uint64_t *)&v51, v42, (uint64_t)v57);
            re::TypeRegistry::typeInfo(v57[0], *(_QWORD *)v58, v59);
            re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)v59 + 8);
            v5 += re::AssetUtilities::estimateSize_introspectionLockedShared((re::AssetUtilities *)((char *)v4 + *(unsigned int *)(v58 + 24)), v50, 0, v43);
            ++v42;
          }
          while (v41 != v42);
        }
        return v5;
      case 9:
        v44 = *(char **)v4;
        if (!*(_QWORD *)v4)
          return v5;
        re::TypeRegistry::typeInfo(*(_QWORD **)a2, v16[9], v59);
        re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)v59 + 8);
        if (re::TypeInfo::isPointerToPolymorphicType(a2))
        {
          re::TypeInfo::getActualTypeFromPointer((uint64_t)a2, (char *)v4, &v51);
          if ((_QWORD)v51
            || (re::TypeInfo::getActualType((re::TypeInfo *)&v54, v44, v59), v51 = v59[0], *(_QWORD *)&v59[0]))
          {
            re::TypeRegistry::typeInfo(*(re **)a2, (re **)&v51, v59);
            re::TypeInfo::operator=((uint64_t)&v54, (uint64_t)v59 + 8);
          }
        }
        v19 = (char *)&v54;
        v38 = (re::AssetUtilities *)v44;
        v39 = 1;
        break;
      default:
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected type category.", "!\"Unreachable code\"", "estimateSize_introspectionLockedShared", 1403);
        _os_crash();
        __break(1u);
        JUMPOUT(0x225276BFCLL);
    }
    v5 += re::AssetUtilities::estimateSize_introspectionLockedShared(v38, v19, (const re::TypeInfo *)v39, v18);
  }
  return v5;
}

size_t re::AssetUtilities::computeIntrospectedDataSizeV2(re::AssetUtilities *this, re **a2, const re::IntrospectionBase *a3)
{
  size_t locked;
  size_t result;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v9[9];
  _BYTE v10[23];
  _BYTE v11[8];
  uint64_t v12;
  char v13;

  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v13);
  if (v11[0])
  {
    locked = re::AssetUtilities::estimateSize_introspectionLockedShared(this, (re::TypeInfo *)&v12, (const re::TypeInfo *)1);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v13);
    return locked;
  }
  else
  {
    re::getPrettyTypeName((re *)a2, (const re::IntrospectionBase *)v9);
    re::DynamicString::~DynamicString((re::DynamicString *)v9);
    re::getPrettyTypeName((re *)a2, (const re::IntrospectionBase *)v9);
    if ((v9[8] & 1) != 0)
      v8 = *(_BYTE **)&v10[7];
    else
      v8 = v10;
    re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Type info (\"%s\") is missing.", "type", "computeIntrospectedDataSizeV2", 1419, v8);
    re::DynamicString::~DynamicString((re::DynamicString *)v9);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t deserializeIntrospectedAssetWithVersioning(re::SeekableInputStream &,re::AssetType const&,re::AssetLoadData const&,re::PersistedSchema const*,re::IntrospectionBase const&,re::AssetSerializationScheme &,re::AssetSerializationFormat,re::Optional<unsigned long long>)::$_0::__invoke(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  _QWORD *i;
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *j;
  _DWORD *v10;

  if (*(_DWORD *)(a1 + 16) != 8)
    return 0;
  v2 = *(const char **)(a1 + 48);
  if (strlen(v2) < 0x10 || strncmp(v2, "CustomComponent", 0xFuLL))
  {
    v3 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v3)
    {
      for (i = *(_QWORD **)(a1 + 64); ; ++i)
      {
        v5 = (_DWORD *)*i;
        if (*(_DWORD *)*i == 1 && v5[10] == 3)
          break;
        if (!--v3)
          return 0;
      }
      v7 = *((_QWORD *)v5 + 2);
      if (v7)
      {
        while (*(_DWORD *)(v7 + 16) == 8)
        {
          if (!strcmp(*(const char **)(v7 + 48), "Component"))
            return 1;
          v8 = *(unsigned int *)(v7 + 56);
          if (!(_DWORD)v8)
            break;
          for (j = *(_QWORD **)(v7 + 64); ; ++j)
          {
            v10 = (_DWORD *)*j;
            if (*(_DWORD *)*j == 1 && v10[10] == 3)
              break;
            if (!--v8)
              return 0;
          }
          result = 0;
          v7 = *((_QWORD *)v10 + 2);
          if (!v7)
            return result;
        }
      }
    }
    return 0;
  }
  return 1;
}

void re::DynamicAssetHeader::DynamicAssetHeader(re::DynamicAssetHeader *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v3;

  if ((v1 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<re::DynamicAssetHeader>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"DynamicAssetHeader", (uint64_t (*)(re::internal *))re::allocInfo_DynamicAssetHeader, (re::IntrospectionBase *(*)(void))re::initInfo_DynamicAssetHeader, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DynamicAssetHeader>, 0);
    }
  }
  re::DynamicAssetHeader::s_introspectionInfo = v2[277];
}

uint64_t re::Result<re::FileStreamWriter,re::DetailedError>::~Result(uint64_t a1)
{
  FILE *v2;
  uint64_t v3;
  _OWORD *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(FILE **)(a1 + 16);
    if (v2 && *(_BYTE *)(a1 + 24))
    {
      fclose(v2);
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else
  {
    v4 = (_OWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 40));
      *v4 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::Result<re::FileStreamReader,re::DetailedError>::~Result(uint64_t a1)
{
  FILE *v2;
  uint64_t v3;
  _OWORD *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(FILE **)(a1 + 16);
    if (v2 && *(_BYTE *)(a1 + 32))
    {
      fclose(v2);
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 32) = 0;
    }
  }
  else
  {
    v4 = (_OWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 40));
      *v4 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::RealityArchiveEntryTable::RealityArchiveEntryTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  signed int v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  char v16;
  const char *v17;
  uint64_t v18;
  _BOOL8 isDoubleCompressed;
  _anonymous_namespace_ *v20;
  size_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED305A0;
  v6 = *(_DWORD *)(a3 + 184);
  *(_OWORD *)(a1 + 24) = 0u;
  v7 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0x7FFFFFFFLL;
  v23 = a1;
  *(_QWORD *)(a1 + 72) = a2;
  v26 = 0;
  v9 = *(_QWORD *)(a3 + 184);
  if (v9)
  {
    for (i = 0; i < v9; v26 = ++i)
    {
      v11 = *(_QWORD *)(a3 + 176) + i;
      v12 = *(_QWORD *)(*(_QWORD *)(a3 + 152) + 8 * (v11 / 0x27));
      v13 = v11 % 0x27;
      v14 = v12 + 104 * v13;
      v15 = (const char *)(v14 + 8);
      v16 = *(_BYTE *)(v14 + 31);
      if (v16 < 0)
      {
        v18 = *(_QWORD *)(v12 + 104 * v13 + 16);
        if (!v18)
        {
          if (!zip_entry_is_alignment(v14))
            goto LABEL_15;
          continue;
        }
        v17 = *(const char **)v15;
      }
      else
      {
        if (!*(_BYTE *)(v14 + 31))
        {
          if (!zip_entry_is_alignment(v12 + 104 * v13))
            goto LABEL_16;
          continue;
        }
        v17 = (const char *)(v14 + 8);
        v18 = *(unsigned __int8 *)(v14 + 31);
      }
      if (v17[v18 - 1] != 47 && !zip_entry_is_alignment(v14))
      {
        if (v16 < 0)
LABEL_15:
          v15 = *(const char **)v15;
LABEL_16:
        if (isDoubleCompressed)
        {
          v20 = (_anonymous_namespace_ *)strlen(v15);
          v21 = (size_t)v20 - 4;
        }
        else
        {
        }
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>(v7, (re::DynamicString *)&v24, &v26);
        if (v24 && (v25 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v24 + 40))();
        i = v26;
      }
    }
  }
  return v23;
}

unint64_t re::RealityArchiveEntryTable::findEntry(_anonymous_namespace_ *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _BYTE v14[23];

  v5 = (uint64_t)a1 + 24;
  v6 = (_QWORD *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v5, (uint64_t)&v12);
  if (v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  if (v6)
    return *(_QWORD *)(*(_QWORD *)(a3 + 152) + 8 * ((*(_QWORD *)(a3 + 176) + *v6) / 0x27uLL))
         + 104 * ((*(_QWORD *)(a3 + 176) + *v6) % 0x27uLL);
  re::filePathURLConverted((re *)a2, (re::DynamicString *)&v12);
  if ((v13 & 1) != 0)
    v8 = *(const char **)&v14[7];
  else
    v8 = v14;
  v6 = (_QWORD *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v5, (uint64_t)&v10);
  if (v10 && (v11 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v10 + 40))();
  if (v12)
  {
    if ((v13 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  }
  if (v6)
    return *(_QWORD *)(*(_QWORD *)(a3 + 152) + 8 * ((*(_QWORD *)(a3 + 176) + *v6) / 0x27uLL))
         + 104 * ((*(_QWORD *)(a3 + 176) + *v6) % 0x27uLL);
  else
    return 0;
}

void re::RealityArchive::~RealityArchive(re::RealityArchive *this)
{
  FILE *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED305D0;
  zip_close(*((_QWORD **)this + 3));
  *((_QWORD *)this + 3) = 0;
  v2 = (FILE *)*((_QWORD *)this + 10);
  if (v2)
    fclose(v2);

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {

    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::RealityArchive::~RealityArchive(this);
  JUMPOUT(0x2276933B8);
}

id re::RealityArchive::createOrReuseTable@<X0>(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id result;
  uint64_t *v8;
  uint64_t v9;

  if (a3 && *(re **)(a3 + 72) == a1)
  {
    *a4 = a3;
    return (id)(a3 + 8);
  }
  else
  {
    v8 = re::globalAllocators(a1);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 80, 8);
    result = (id)re::RealityArchiveEntryTable::RealityArchiveEntryTable(v9, (uint64_t)a1, a2);
    *a4 = result;
  }
  return result;
}

__n128 re::RealityArchive::makeByOpeningFileAtPath@<Q0>(re::RealityArchive *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  FILE *v7;
  FILE *v8;
  uint64_t v9;
  uint64_t v10;
  re *v11;
  re *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 result;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *__error() = 0;
  v7 = fopen((const char *)this, "rb");
  if (!v7)
  {
    v17 = __error();
    v20 = strerror(*v17);
    re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to open FILE pointer due to error: %s", (re::DynamicString *)&v22, v20);
LABEL_12:
    result = v22;
    v18 = v23;
    v19 = v24;
    *(_BYTE *)a3 = 0;
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = v18;
    *(_QWORD *)(a3 + 32) = v19;
    return result;
  }
  v8 = v7;
  v9 = zip_file_read(v7);
  if (!v9)
  {
    fclose(v8);
    re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to open archive, file corrupted or not a proper archive file", (re::DynamicString *)&v22);
    goto LABEL_12;
  }
  v10 = v9;
  v11 = (re *)strlen((const char *)this);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)this, (int)v11, 0, v22.n128_u64);
    v11 = (re *)((v22.n128_u64[1] + (v22.n128_u64[0] << 6) + (v22.n128_u64[0] >> 2) - 0x61C8864680B583E9) ^ v22.n128_u64[0]);
  }
  v12 = (re *)re::RealityArchive::createOrReuseTable(v11, v10, (uint64_t)a2, &v21);
  v13 = re::globalAllocators(v12);
  v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 88, 8);
  v15 = v21;
  re::RealityArchive::RealityArchive((uint64_t)v14, v10, v21);
  v14[10] = v8;
  re::DynamicString::operator=((re::DynamicString *)(v14 + 5), (re::DynamicString *)&v22);
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v14;
  if (v22.n128_u64[0] && (v22.n128_u8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v22.n128_u64[0] + 40))();
  if (v15)

  return result;
}

__n128 re::RealityArchive::makeFromFile@<Q0>(FILE *this@<X0>, __sFILE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  re *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;

  v7 = zip_file_read(this);
  if (v7)
  {
    v8 = v7;
    v9 = (re *)re::RealityArchive::createOrReuseTable((re *)this, v7, (uint64_t)a2, &v17);
    v10 = re::globalAllocators(v9);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 88, 8);
    v12 = v17.n128_u64[0];
    v13 = re::RealityArchive::RealityArchive(v11, v8, v17.n128_i64[0]);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v13;
    if (v12)

  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to create archive", (re::DynamicString *)&v17);
    result = v17;
    v15 = v18;
    v16 = v19;
    *(_BYTE *)a3 = 0;
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = v15;
    *(_QWORD *)(a3 + 32) = v16;
  }
  return result;
}

__n128 re::RealityArchive::makeByReadingBuffer@<Q0>(id *this@<X0>, const re::Data *a2@<X1>, uint64_t a3@<X8>)
{
  FILE *v7;
  FILE *v8;
  uint64_t v9;
  uint64_t v10;
  re *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 result;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  *__error() = 0;
  v7 = fmemopen((void *)objc_msgSend(objc_retainAutorelease(*this), "bytes"), objc_msgSend(*this, "length"), "rb");
  if (!v7)
  {
    v17 = __error();
    v20 = strerror(*v17);
    re::DynamicString::format((re::DynamicString *)"Failed to open FILE pointer due to error: %s", (re::DynamicString *)&v21, v20);
LABEL_7:
    result = v21;
    v18 = v22;
    v19 = v23;
    *(_BYTE *)a3 = 0;
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = v18;
    *(_QWORD *)(a3 + 32) = v19;
    return result;
  }
  v8 = v7;
  v9 = zip_file_read(v7);
  if (!v9)
  {
    fclose(v8);
    re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to create archive", (re::DynamicString *)&v21);
    goto LABEL_7;
  }
  v10 = v9;
  v11 = (re *)re::RealityArchive::createOrReuseTable((re *)objc_msgSend(objc_retainAutorelease(*this), "bytes"), v9, (uint64_t)a2, &v21);
  v12 = re::globalAllocators(v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 88, 8);
  v14 = v21.n128_u64[0];
  v15 = re::RealityArchive::RealityArchive(v13, v10, v21.n128_i64[0]);
  *(_QWORD *)(v15 + 80) = v8;
  re::ObjCObject::operator=((id *)(v15 + 72), this);
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v13;
  if (v14)

  return result;
}

__n128 re::RealityArchive::verifyRealityArchiveAtFilePath@<Q0>(re::RealityArchive *this@<X0>, uint64_t a2@<X8>)
{
  FILE *v5;
  FILE *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __n128 result;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  *__error() = 0;
  v5 = fopen((const char *)this, "rb");
  if (v5)
  {
    v6 = v5;
    v7 = (_QWORD *)zip_file_read(v5);
    if (v7)
    {
      v8 = v7;
      v9 = zip_verify_crc_archive(v7);
      zip_close(v8);
      fclose(v6);
      *(_BYTE *)a2 = 1;
      *(_BYTE *)(a2 + 8) = v9;
      return result;
    }
    fclose(v6);
    re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to create archive from provided file path: %s", (re::DynamicString *)&v15, this);
  }
  else
  {
    v11 = __error();
    v14 = strerror(*v11);
    re::DynamicString::format((re::DynamicString *)"Failed to open FILE pointer due to error: %s", (re::DynamicString *)&v15, v14);
  }
  result = v15;
  v12 = v16;
  v13 = v17;
  *(_BYTE *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 32) = v13;
  return result;
}

__n128 re::RealityArchive::copy@<Q0>(re::RealityArchive *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  FILE *v7;
  FILE *v8;
  re *handle;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *((_QWORD *)this + 6);
  if ((v4 & 1) != 0)
    v5 = v4 >> 1;
  else
    v5 = v4 >> 1;
  if (v5)
  {
    *__error() = 0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      v6 = (const char *)*((_QWORD *)this + 7);
    else
      v6 = (char *)this + 49;
    v7 = fopen(v6, "rb");
  }
  else
  {
    if (!*((_QWORD *)this + 9))
    {
      goto LABEL_18;
    }
    *__error() = 0;
    v7 = fmemopen((void *)objc_msgSend(objc_retainAutorelease(*((id *)this + 9)), "bytes"), objc_msgSend(*((id *)this + 9), "length"), "rb");
  }
  v8 = v7;
  if (v7)
  {
    handle = (re *)zip_copy_with_read_handle(*((_QWORD *)this + 3), (uint64_t)v7);
    if (handle)
    {
      v10 = (uint64_t)handle;
      v11 = re::globalAllocators(handle);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 88, 8);
      v13 = re::RealityArchive::RealityArchive(v12, v10, *((_QWORD *)this + 4));
      *(_QWORD *)(v13 + 80) = v8;
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v13;
      return result;
    }
    re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to create archive", (re::DynamicString *)&v19);
  }
  else
  {
    v15 = __error();
    v18 = strerror(*v15);
    re::DynamicString::format((re::DynamicString *)"Failed to open FILE pointer due to error: %s", (re::DynamicString *)&v19, v18);
  }
LABEL_18:
  result = v19;
  v16 = v20;
  v17 = v21;
  *(_BYTE *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v17;
  return result;
}

void *re::RealityArchive::entryNames@<X0>(re::RealityArchive *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v4 = *(unsigned int *)(*((_QWORD *)this + 4) + 52);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  result = re::DynamicArray<re::DynamicString>::setCapacity((_QWORD *)a2, v4);
  ++*(_DWORD *)(a2 + 24);
  v6 = *((_QWORD *)this + 4);
  v7 = *(unsigned int *)(v6 + 56);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (int *)(*(_QWORD *)(v6 + 40) + 8);
    while (1)
    {
      v10 = *v9;
      v9 += 14;
      if (v10 < 0)
        break;
      if (v7 == ++v8)
      {
        LODWORD(v8) = *(_DWORD *)(v6 + 56);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((_DWORD)v7 != (_DWORD)v8)
  {
    v11 = v8;
    do
    {
      result = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)a2, (re::DynamicString *)(*(_QWORD *)(v6 + 40) + 56 * v11 + 16));
      if (*(_DWORD *)(v6 + 56) <= (v8 + 1))
        v12 = v8 + 1;
      else
        v12 = *(_DWORD *)(v6 + 56);
      v13 = v8;
      while (1)
      {
        v11 = (v13 + 1);
        if (v12 - 1 == v13)
          break;
        ++v13;
        LODWORD(v8) = v11;
        if ((*(_DWORD *)(*(_QWORD *)(v6 + 40) + 56 * v11 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v8) = v12;
LABEL_17:
      ;
    }
    while ((_DWORD)v7 != (_DWORD)v8);
  }
  return result;
}

uint64_t re::RealityArchive::newDataByLoadingEntryWithName@<X0>(re::RealityArchive *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t Entry;
  uint64_t v6;
  uint64_t data_begin;
  _DWORD *v8;
  _BOOL4 isDoubleCompressed;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  size_t v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  _anonymous_namespace_ *v30;
  const char *v31;
  char v32;
  re *v33;
  uint64_t *v34;
  _anonymous_namespace_ *v35;
  _anonymous_namespace_ *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  Entry = re::RealityArchiveEntryTable::findEntry(*((_anonymous_namespace_ **)this + 4), a2, *((_QWORD *)this + 3));
  if (Entry)
  {
    v6 = Entry;
    data_begin = reality_v1_entry_load_data_begin(Entry);
    if (data_begin)
    {
      v8 = (_DWORD *)data_begin;
      v10 = isDoubleCompressed;
      v11 = *(_QWORD *)(v6 + 40);
      v12 = (4 * v11) & 0xFFFFFFFFFFFE0000;
      if ((v11 & 0x7FFF) != 0)
        v12 += 0x20000;
      if (isDoubleCompressed)
        v13 = v12;
      else
        v13 = *(_QWORD *)(v6 + 40);
      v14 = malloc_type_malloc(0x20000uLL, 0xFF6BF581uLL);
      v15 = (char *)malloc_type_malloc(v13, 0xFF6BF581uLL);
      v16 = reality_v1_entry_load_data_read((uint64_t)v14, 0x20000uLL, (uint64_t)v8);
      if (*v8 == 1)
      {
        v17 = v15;
LABEL_23:
        free(v17);
        v31 = "RERealityArchive: Failed to read archive entry.";
LABEL_24:
      }
      else
      {
        v25 = v16;
        v26 = 0;
        v17 = v15;
        while (v25)
        {
          v27 = v25 + v26;
          if (__CFADD__(v25, v26))
          {
            free(v17);
            v31 = "RERealityArchive: Integer overflow detected.";
            goto LABEL_24;
          }
          if (v27 > v13)
          {
            v28 = 0x20000;
            if (v25 > 0x20000)
              v28 = v25;
            v13 += v28;
            v29 = (char *)malloc_type_realloc(v17, v13, 0xC8C5F3EuLL);
            if (!v29)
            {
              v31 = "RERealityArchive: Memory allocation failed.";
              goto LABEL_24;
            }
            v17 = v29;
            v15 = &v29[v26];
          }
          memcpy(v15, v14, v25);
          v15 += v25;
          v25 = reality_v1_entry_load_data_read((uint64_t)v14, 0x20000uLL, (uint64_t)v8);
          v26 = v27;
          if (*v8 == 1)
            goto LABEL_23;
        }
        v32 = v26 == v11 || v10;
        if ((v32 & 1) != 0)
        {
          v33 = (re *)malloc_type_realloc(v17, v26, 0xC8C5F3EuLL);
          v34 = re::globalAllocators(v33);
          v35 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34[2] + 32))(v34[2], 32, 8);
          ArcSharedObject::ArcSharedObject(v35, 0);
          *(_QWORD *)v35 = &off_24ED30630;
          *((_QWORD *)v35 + 3) = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v33, v26, (CFAllocatorRef)*MEMORY[0x24BDBD248]);
          LOBYTE(v37) = 1;
          *((_QWORD *)&v37 + 1) = v35;
LABEL_26:
          free(v14);
          reality_v1_entry_load_data_end((uint64_t)v8);
        }
        free(v17);
        re::DynamicString::format((re::DynamicString *)"RERealityArchive: Expected to read %lu bytes, but read %lu bytes.", (re::DynamicString *)&v40, v11, v26);
      }
      LOBYTE(v37) = 0;
      v39 = v42;
      *((_QWORD *)&v37 + 1) = v40;
      v38 = v41;
      goto LABEL_26;
    }
    v21 = (_QWORD *)(v6 + 8);
    if (*(char *)(v6 + 31) < 0)
      v21 = (_QWORD *)*v21;
    re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to open load stream for entry '%s'.", (re::DynamicString *)&v40, v21);
    v22 = *((_QWORD *)&v41 + 1);
    v23 = v40;
    v24 = v41;
    LOBYTE(v37) = 0;
    v39 = v42;
    *((_QWORD *)&v37 + 1) = v40;
    v38 = v41;
    result = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)&v40, (const re::DynamicString *)((char *)&v37 + 8));
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v40;
    *(_QWORD *)(a3 + 32) = v42;
    *(_OWORD *)(a3 + 16) = v41;
    if (v23 && (v24 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 40))(v23, v22);
  }
  else
  {
    result = re::DynamicString::format((re::DynamicString *)"Could not find archive entry named %s.", (re::DynamicString *)&v37, a2);
    v19 = v37;
    v20 = v38;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v19;
    *(_OWORD *)(a3 + 24) = v20;
  }
  return result;
}

uint64_t re::RealityArchive::uncompressedEntryRange(re::RealityArchive *this, char *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t Entry;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  Entry = re::RealityArchiveEntryTable::findEntry(*((_anonymous_namespace_ **)this + 4), a2, *((_QWORD *)this + 3));
  if (Entry
    && *(_QWORD *)(v7 + 40) == *(_QWORD *)(v7 + 48))
  {
    *a3 = zip_entry_data_offset((_QWORD **)v7);
    v8 = *(_QWORD *)(v7 + 48);
    result = 1;
  }
  else
  {
    v8 = 0;
    result = 0;
    *a3 = 0;
  }
  *a4 = v8;
  return result;
}

uint64_t *re::RealityArchive::unarchiveToDirectory@<X0>(re::RealityArchive *this@<X0>, re *a2@<X1>, uint64_t a3@<X8>)
{
  re::RealityArchive *v4;
  const char *v6;
  _BOOL8 v7;
  const void *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const std::string::value_type **v16;
  const std::string::value_type *v17;
  const char *v18;
  const std::string::value_type *v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  int v23;
  char v24;
  std::string::size_type v25;
  std::string *v26;
  char *v27;
  char *v28;
  std::string *v29;
  _DWORD *data_begin;
  _anonymous_namespace_ *v31;
  _anonymous_namespace_ *v32;
  size_t v33;
  std::string *v34;
  std::string *v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *result;
  uint64_t v41;
  const char *v42;
  re::RealityArchive *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _BYTE v47[24];
  uint64_t v48;
  std::string v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = this;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  re::DynamicString::setCapacity(&v50, 0);
  v7 = re::ensureFolderExists(a2, v6);
  if (!v7)
  {
    re::DynamicString::format((re::DynamicString *)"Failed to create directory %s.", (re::DynamicString *)v47, a2);
    v37 = *(_OWORD *)v47;
    v38 = *(_QWORD *)&v47[16];
    v39 = v48;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v37;
    *(_QWORD *)(a3 + 24) = v38;
    *(_QWORD *)(a3 + 32) = v39;
    goto LABEL_68;
  }
  v44 = *(_QWORD *)(*((_QWORD *)v4 + 3) + 184);
  if (!v44)
  {
    goto LABEL_67;
  }
  v41 = a3;
  v42 = (const char *)a2;
  v9 = 0;
  v10 = 1;
  v43 = v4;
  do
  {
    v11 = *((_QWORD *)v4 + 3);
    v12 = *(_QWORD *)(v11 + 176) + v9;
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * (v12 / 0x27));
    v14 = v12 % 0x27;
    v15 = v13 + 104 * (v12 % 0x27);
    std::string::basic_string[abi:nn180100]<0>(&v49, (char *)a2);
    std::string::append(&v49, "/");
    v16 = (const std::string::value_type **)(v15 + 8);
    v17 = (const std::string::value_type *)(v15 + 8);
    if (*(char *)(v15 + 31) < 0)
      v17 = *v16;
    std::string::append(&v49, v17);
    if (*(char *)(v15 + 31) < 0)
    {
      v20 = *(_QWORD *)(v13 + 104 * v14 + 16);
      if (!v20)
      {
LABEL_16:
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v49;
        else
          v22 = (std::string *)v49.__r_.__value_.__r.__words[0];
        goto LABEL_19;
      }
      v19 = *v16;
    }
    else
    {
      v19 = (const std::string::value_type *)(v15 + 8);
      v20 = *(unsigned __int8 *)(v15 + 31);
      if (!*(_BYTE *)(v15 + 31))
        goto LABEL_16;
    }
    v21 = v19[v20 - 1];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v49;
    else
      v22 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if (v21 == 47)
    {
      re::ensureFolderExists((re *)v22, v18);
      v23 = 0;
      goto LABEL_57;
    }
LABEL_19:
    re::ensureFolderExistsForFile((re *)v22, v18);
    v24 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    v25 = v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v49;
    else
      v26 = (std::string *)v49.__r_.__value_.__r.__words[0];
    v27 = strrchr((char *)v26, 46);
    if (v27)
    {
      v28 = v27;
      if (!strcmp(v27, ".arz"))
      {
        std::string::erase(&v49, v28 - (char *)v26, 4uLL);
        v24 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        v25 = v49.__r_.__value_.__r.__words[0];
      }
    }
    if (v24 >= 0)
      v29 = &v49;
    else
      v29 = (std::string *)v25;
    re::FileStreamWriter::open((re::FileStreamWriter *)v29, (uint64_t)v47);
    if (v47[0])
    {
      data_begin = (_DWORD *)reality_v1_entry_load_data_begin(v15);
      v4 = v43;
      if (data_begin)
      {
        while (1)
        {
          v31 = (_anonymous_namespace_ *)reality_v1_entry_load_data_read((uint64_t)v8, 0x20000uLL, (uint64_t)data_begin);
          if (*data_begin == 1)
          {
            goto LABEL_50;
          }
          v32 = v31;
          if (!v31)
            break;
          v33 = fwrite(v8, 1uLL, (size_t)v31, *(FILE **)&v47[16]);
          if ((_anonymous_namespace_ *)v33 != v32)
          {
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = &v49;
            else
              v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
            re::DynamicString::format((re::DynamicString *)"RERealityArchive: Read a chunk of %zu bytes from the archive, but wrote %zu bytes to the file %s.", (re::DynamicString *)&v45, v32, v33, v34);
LABEL_50:
            re::DynamicString::operator=((re::DynamicString *)&v50, (re::DynamicString *)&v45);
            if (v45)
            {
              if ((v46 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v45 + 40))();
            }
LABEL_55:
            reality_v1_entry_load_data_end((uint64_t)data_begin);
          }
        }
        if ((v10 & 1) != 0)
          reality_v1_entry_load_data_end((uint64_t)data_begin);
        goto LABEL_55;
      }
      if (*(char *)(v15 + 31) < 0)
        v16 = (const std::string::value_type **)*v16;
      a2 = (re *)v42;
      re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to get load context for entry %s.", (re::DynamicString *)&v45, v16);
      re::DynamicString::operator=((re::DynamicString *)&v50, (re::DynamicString *)&v45);
      if (v45 && (v46 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    }
    else
    {
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v49;
      else
        v35 = (std::string *)v49.__r_.__value_.__r.__words[0];
      re::DynamicString::format((re::DynamicString *)"RERealityArchive: Failed to open file for writing at %s.", (re::DynamicString *)&v45, v35);
      re::DynamicString::operator=((re::DynamicString *)&v50, (re::DynamicString *)&v45);
      if (v45 && (v46 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
      a2 = (re *)v42;
      v4 = v43;
    }
    re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v47);
    v10 = 0;
    v23 = 1;
LABEL_57:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (++v9 == v44)
      v36 = 1;
    else
      v36 = v23;
  }
  while (v36 != 1);
  a3 = v41;
  if ((v10 & 1) != 0)
  {
LABEL_67:
    *(_BYTE *)a3 = 1;
    goto LABEL_68;
  }
  re::DynamicString::DynamicString((re::DynamicString *)v47, (const re::DynamicString *)&v50);
  *(_BYTE *)v41 = 0;
  *(_QWORD *)(v41 + 8) = *(_QWORD *)v47;
  *(_QWORD *)(v41 + 32) = v48;
  *(_OWORD *)(v41 + 16) = *(_OWORD *)&v47[8];
LABEL_68:
  result = v50;
  if (v50 && (v51 & 1) != 0)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v50 + 40))(v50, v52);
  return result;
}

__n128 re::RealityArchive::archiveFromDirectory@<Q0>(char *a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const char *v8;
  _anonymous_namespace_ *v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  stat v13;

  if (stat(a1, &v13) || (v13.st_mode & 0x4000) == 0)
  {
    re::DynamicString::format((re::DynamicString *)"Could not find directory %s.", (re::DynamicString *)&v13, a1);
  }
  else if (re::ensureFolderExistsForFile((re *)a2, v8))
  {
    v9 = (_anonymous_namespace_ *)reality_archive_file_pack(a1, a2, a3 == 1);
    if ((v9 & 1) != 0)
    {
      *(_BYTE *)a4 = 1;
      return result;
    }
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Could not create parent folders for file path %s.", (re::DynamicString *)&v13, a2);
  }
  result = *(__n128 *)&v13.st_dev;
  v11 = *(_QWORD *)&v13.st_uid;
  v12 = *(_QWORD *)&v13.st_rdev;
  *(_BYTE *)a4 = 0;
  *(__n128 *)(a4 + 8) = result;
  *(_QWORD *)(a4 + 24) = v11;
  *(_QWORD *)(a4 + 32) = v12;
  return result;
}

uint64_t re::RealityArchive::RealityArchive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v6;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED305D0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  if (a3)
    v6 = (_anonymous_namespace_ *)(id)(a3 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 40), 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void re::RealityArchiveEntryTable::~RealityArchiveEntryTable(re::RealityArchiveEntryTable *this, double a2)
{
  *(_QWORD *)this = &off_24ED305A0;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 3, a2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED305A0;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 3, a2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

BOOL `anonymous namespace'::isDoubleCompressed(uint64_t a1)
{
  const char *v1;
  size_t v2;

  v1 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v1 = *(const char **)v1;
  v2 = strlen(v1);
  return v2 >= 4 && *(_DWORD *)&v1[v2 - 4] == 2054316334;
}

void `anonymous namespace'::ArchiveEntryData::~ArchiveEntryData(CFTypeRef *this)
{
  *this = &off_24ED30630;
  CFRelease(this[3]);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  *this = &off_24ED30630;
  CFRelease(this[3]);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphEmitterAsset::~RenderGraphEmitterAsset(re::RenderGraphEmitterAsset *this)
{
  void (***v2)(_QWORD);
  uint64_t v3;

  *(_QWORD *)this = &off_24ED30678;
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = re::globalAllocators(this)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 2) = 0;
  }
}

{
  re::RenderGraphEmitterAsset::~RenderGraphEmitterAsset(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::RenderGraphEmitterAsset::assetType(re::RenderGraphEmitterAsset *this)
{
  unsigned __int8 v1;

  {
    re::RenderGraphEmitterAsset::assetType(void)::type = (uint64_t)"RenderGraphEmitter";
    qword_2558274B8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::RenderGraphEmitterAsset::assetType(void)::type);
  }
  return &re::RenderGraphEmitterAsset::assetType(void)::type;
}

__guard re::RenderGraphEmitterAssetLoader::introspectionType(re::RenderGraphEmitterAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::RenderGraphEmitterAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RenderGraphEmitterAsset", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphEmitterAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphEmitterAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphEmitterAsset>, 0);
    }
  }
  return v2[281];
}

re *re::RenderGraphEmitterAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

void re::RenderGraphEmitterAssetLoader::findDependencies(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

BOOL re::RenderGraphEmitterAssetLoader::isSupportedSourceExtension(re::RenderGraphEmitterAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "rerendergraphemitter")
      || !strcasecmp(a2, "rendergraphemitter")
      || strcasecmp(a2, "hmrendergraphemitter") == 0;
}

uint64_t re::RenderGraphEmitterAssetLoader::registerAsset(re::RenderGraphEmitterAssetLoader *this, _QWORD *a2, const re::ExistingAssetInformation *a3)
{
  a2[3] = re::ServiceLocator::service<re::AssetService>(*((_QWORD *)this + 1));
  return 0;
}

uint64_t re::ServiceLocator::service<re::AssetService>(uint64_t a1)
{
  uint64_t result;
  __objc2_class_ro *v2;
  __objc2_class_ro *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[16];
  _BYTE v7[9];
  _BYTE v8[23];

  result = re::ServiceLocator::serviceOrNull<re::AssetService>(a1);
  if (!result)
  {
    v2 = re::introspect<re::AssetService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    v3 = re::introspect<re::AssetService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if ((v7[8] & 1) != 0)
      v5 = *(_BYTE **)&v8[7];
    else
      v5 = v8;
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t *re::allocInfo_RenderGraphEmitterPointer(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD310);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD310))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD390, 0);
    *(uint64_t *)((char *)&qword_2540FD3A0 + 6) = 0;
    qword_2540FD3A0 = 0;
    qword_2540FD3B0 = 0;
    qword_2540FD3B8 = 0xFFFFFFFFLL;
    qword_2540FD390 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD3C0 = (uint64_t)"RenderGraphEmitterPointer";
    dword_2540FD3C8 = 0;
    xmmword_2540FD3D0 = 0u;
    unk_2540FD3E0 = 0u;
    xmmword_2540FD3F0 = 0u;
    qword_2540FD400 = 0;
    __cxa_guard_release(&qword_2540FD310);
  }
  return &qword_2540FD390;
}

void re::initInfo_RenderGraphEmitterPointer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x32C67EAE114248ELL;
  v13[1] = "RenderGraphEmitterPointer";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD318);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD318);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::RenderGraphEmitterBase *>::get();
      v8 = re::introspect_size_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "emitter";
      *(_QWORD *)(v9 + 16) = &qword_2540FD350;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 2;
      *(_QWORD *)(v9 + 48) = v8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FD340 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v11 = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 8, 4);
      *v11 = 0x100000004;
      qword_2540FD348 = (uint64_t)v11;
      __cxa_guard_release(&qword_2540FD318);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FD340;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphEmitterPointer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphEmitterPointer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphEmitterPointer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphEmitterPointer>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

void re::IntrospectionInfo<re::RenderGraphEmitterBase *>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  re::IntrospectionRegistry *v2;
  const re::IntrospectionBase *v3;
  const char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const char *v8;
  unint64_t v9;
  char *__s1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FD338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD338))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2540FD350);
    __cxa_guard_release(&qword_2540FD338);
  }
  if ((_MergedGlobals_62 & 1) == 0)
  {
    _MergedGlobals_62 = 1;
    v1 = re::introspect_RenderGraphEmitterBase((re::IntrospectionBase **)1);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD350, 0);
    qword_2540FD360 = 0x800000001;
    dword_2540FD368 = 8;
    word_2540FD36C = 0;
    *(_QWORD *)&xmmword_2540FD370 = 0;
    *((_QWORD *)&xmmword_2540FD370 + 1) = 0xFFFFFFFFLL;
    qword_2540FD350 = (uint64_t)&off_24ED30800;
    qword_2540FD380 = v1;
    unk_2540FD388 = 0;
    re::IntrospectionRegistry::add(v2, v3);
    re::getPrettyTypeName((re *)&qword_2540FD350, (const re::IntrospectionBase *)&v7);
    if ((BYTE8(v7) & 1) != 0)
      v4 = v8;
    else
      v4 = (char *)&v7 + 9;
    if ((_QWORD)v7 && (BYTE8(v7) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v7 + 40))();
    if (v9 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      v5 = v7;
    }
    else
    {
      v7 = *(_OWORD *)(v1 + 32);
      v5 = v6;
    }
    xmmword_2540FD370 = v5;
    re::StringID::destroyString((re::StringID *)&v9);
  }
}

void re::internal::defaultConstruct<re::RenderGraphEmitterPointer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphEmitterPointer>(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t re::introspect_RenderGraphEmitterPointer(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphEmitterPointer", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphEmitterPointer, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphEmitterPointer, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphEmitterPointer>, this);
}

uint64_t *re::allocInfo_RenderGraphEmitterAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD320);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD320))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD408, 0);
    *(uint64_t *)((char *)&qword_2540FD418 + 6) = 0;
    qword_2540FD418 = 0;
    qword_2540FD428 = 0;
    qword_2540FD430 = 0xFFFFFFFFLL;
    qword_2540FD408 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD438 = (uint64_t)"RenderGraphEmitterAsset";
    dword_2540FD440 = 0;
    xmmword_2540FD448 = 0u;
    unk_2540FD458 = 0u;
    xmmword_2540FD468 = 0u;
    qword_2540FD478 = 0;
    __cxa_guard_release(&qword_2540FD320);
  }
  return &qword_2540FD408;
}

void re::initInfo_RenderGraphEmitterAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xA52A22BD1BA272F4;
  v12[1] = "RenderGraphEmitterAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD330);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD330);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::RenderGraphEmitterPointer>;
      if (!re::internal::introspectionInfoStorage<re::RenderGraphEmitterPointer>)
      {
        v8 = re::allocInfo_RenderGraphEmitterPointer((re *)v6);
        re::internal::introspectionInfoStorage<re::RenderGraphEmitterPointer> = (uint64_t)v8;
        re::initInfo_RenderGraphEmitterPointer((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "data";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FD328 = v10;
      __cxa_guard_release(&qword_2540FD330);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FD328;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphEmitterAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphEmitterAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphEmitterAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphEmitterAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::RenderGraphEmitterAsset>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED30678;
  a3[2] = 0;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphEmitterAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::RenderGraphEmitterAsset>(_QWORD *result)
{
  *result = &off_24ED30678;
  result[2] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphEmitterAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphEmitterAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphEmitterAsset", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphEmitterAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphEmitterAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphEmitterAsset>, this);
}

void re::RenderGraphEmitterAssetLoader::~RenderGraphEmitterAssetLoader(re::RenderGraphEmitterAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::introspect<re::AssetService>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::AssetService>(void)::info = re::introspect_AssetService(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[498];
}

re::IntrospectionPointer *re::IntrospectionPointer::IntrospectionPointer(re::IntrospectionPointer *this)
{
  _QWORD *v2;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED30800;
  *((_QWORD *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2 + 6);
  return this;
}

void re::IntrospectionPointer::~IntrospectionPointer(re::IntrospectionPointer *this)
{
  *(_QWORD *)this = &off_24ED30800;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 6);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED30800;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)this + 6);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::IntrospectionPointer::childInfoCount(re::IntrospectionPointer *this)
{
  return 1;
}

uint64_t re::IntrospectionPointer::childInfo(re::IntrospectionPointer *this, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return *((_QWORD *)this + 6);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Index out of range.", "index == 0", "childInfo", 986);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t *re::allocInfo_BuiltinTextureLoadDescriptorParameters(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_63);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_63))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD498, 0);
    *(uint64_t *)((char *)&qword_2540FD4A8 + 6) = 0;
    qword_2540FD4A8 = 0;
    qword_2540FD4B8 = 0;
    qword_2540FD4C0 = 0xFFFFFFFFLL;
    qword_2540FD498 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD4C8 = (uint64_t)"BuiltinTextureLoadDescriptorParameters";
    dword_2540FD4D0 = 0;
    unk_2540FD4D8 = 0u;
    unk_2540FD4E8 = 0u;
    unk_2540FD4F8 = 0u;
    qword_2540FD508 = 0;
    __cxa_guard_release(&_MergedGlobals_63);
  }
  return &qword_2540FD498;
}

void re::initInfo_BuiltinTextureLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0xAFF0BF94697C90EELL;
  v11[1] = "BuiltinTextureLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD490);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD490);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FD488 = v9;
      __cxa_guard_release(&qword_2540FD490);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FD488;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BuiltinTextureLoadDescriptorParameters>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BuiltinTextureLoadDescriptorParameters>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BuiltinTextureLoadDescriptorParameters>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BuiltinTextureLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

_QWORD *re::internal::defaultConstruct<re::BuiltinTextureLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((_QWORD *)a3, 0);
}

double re::internal::defaultDestruct<re::BuiltinTextureLoadDescriptorParameters>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::BuiltinTextureLoadDescriptorParameters>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return re::DynamicString::setCapacity(a1, 0);
}

double re::internal::defaultDestructV2<re::BuiltinTextureLoadDescriptorParameters>(uint64_t *a1)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  if (v2)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

_anonymous_namespace_ *re::BuiltinTextureAssetProvider::BuiltinTextureAssetProvider(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  __guard *v7;
  int v9;

  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)a1 = &off_24ED30858;
  if ((v6 & 1) == 0)
  {
    if (v9)
    {
      re::introspect<re::BuiltinTextureLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"BuiltinTextureLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_BuiltinTextureLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_BuiltinTextureLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BuiltinTextureLoadDescriptorParameters>, 0);
    }
  }
  re::BuiltinTextureAssetProvider::s_loadDescriptorParametersIntrospect = v7[284];
  *((_QWORD *)a1 + 3) = a2;
  *((_QWORD *)a1 + 4) = re::ServiceLocator::serviceOrNull<re::RenderManager>(a3);
  return a1;
}

uint64_t re::ServiceLocator::serviceOrNull<re::RenderManager>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::RenderManager>(void)::info = re::introspect_RenderManager(0);
  }
  v3 = re::introspect<re::RenderManager>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::BuiltinTextureAssetProvider::~BuiltinTextureAssetProvider(re::BuiltinTextureAssetProvider *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::BuiltinTextureAssetProvider::makeDescriptor@<X0>(re::BuiltinTextureAssetProvider *this@<X0>, uint64_t a2@<X8>)
{
  _anonymous_namespace_ *v5;
  re::TextureAsset *v6;
  const char *v7;
  size_t v8;
  _anonymous_namespace_ *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *result;
  _OWORD v14[2];
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)a2, 0);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_QWORD *)(a2 + 136) = 0;
  re::DynamicString::setCapacity((_QWORD *)(a2 + 112), 0);
  v15 = (uint64_t *)"BuiltinTexture";
  v16 = 14;
  v6 = re::DynamicString::operator=((re::DynamicString *)a2, (uint64_t)&v15);
  v7 = (const char *)*re::TextureAsset::assetType(v6);
  v8 = strlen(v7);
  v15 = (uint64_t *)v7;
  v16 = v8;
  v9 = re::DynamicString::operator=((re::DynamicString *)(a2 + 112), (uint64_t)&v15);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  re::DynamicString::setCapacity(&v15, 0);
  v10 = strlen((const char *)this);
  v19[0] = this;
  v19[1] = v10;
  re::DynamicString::operator=((re::DynamicString *)&v15, (uint64_t)v19);
  re::DynamicString::DynamicString((re::DynamicString *)v14, (const re::DynamicString *)&v15);
  re::AssetLoadDescriptor::setIntrospectableData((char **)a2, (const re::IntrospectionBase *)re::BuiltinTextureAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v14, 0);
  if (*(_QWORD *)&v14[0])
  {
    if ((BYTE8(v14[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v14[0] + 40))();
    memset(v14, 0, sizeof(v14));
  }
  result = v15;
  if (v15)
  {
    if ((v16 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v15 + 40))(v15, v17, v11, v12);
  }
  return result;
}

re::DynamicString *re::BuiltinTextureAssetProvider::load@<X0>(re::BuiltinTextureAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v8;
  re::TextureAsset *v9;
  int v10;
  const char *v11;
  const char *v12;
  _anonymous_namespace_ *v13;
  uint64_t Descriptor;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  re::DynamicString *result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  unsigned __int8 *v29;
  int v30;
  re::DynamicString *v31;
  uint64_t TextureAsset;
  _anonymous_namespace_ *v33;
  char v34;
  __int128 v35;
  id v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _BYTE v42[24];
  id v43[2];
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  unsigned int v48;
  id v49;
  void *v50;
  re::DynamicString *v51;
  __int128 v52;
  uint64_t v53;

  if ((*((_BYTE *)a2 + 8) & 1) != 0)
    v8 = (const char *)*((_QWORD *)a2 + 2);
  else
    v8 = (char *)a2 + 9;
  v9 = (re::TextureAsset *)strcmp(v8, "BuiltinTexture");
  v10 = (int)v9;
  v11 = (const char *)*re::TextureAsset::assetType(v9);
  if ((*((_QWORD *)a2 + 15) & 1) != 0)
    v12 = (const char *)*((_QWORD *)a2 + 16);
  else
    v12 = (char *)a2 + 121;
  v13 = (_anonymous_namespace_ *)strcmp(v12, v11);
  if (v10 | v13)
  {
    v20 = *(_OWORD *)v43;
    v21 = v44;
    v22 = v45;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v20;
    *(_QWORD *)(a3 + 24) = v21;
    *(_QWORD *)(a3 + 32) = v22;
    return result;
  }
  v52 = 0uLL;
  v53 = 0;
  re::DynamicString::setCapacity(&v51, 0);
  Descriptor = re::AssetLoadDescriptor::getIntrospectableData<re::BuiltinTextureLoadDescriptorParameters>(a2, (uint64_t **)&v51);
  if ((Descriptor & 1) != 0)
  {
    v50 = 0;
    v15 = *((_QWORD *)this + 4);
    if (!v15)
      goto LABEL_35;
    v16 = *(_QWORD *)(v15 + 64);
    if (!v16)
      goto LABEL_35;
    if ((v52 & 1) != 0)
    {
      v18 = (char *)*((_QWORD *)&v52 + 1);
      Descriptor = strncmp(*((const char **)&v52 + 1), "fallback.", 9uLL);
      if ((_DWORD)Descriptor)
        goto LABEL_35;
    }
    else
    {
      if (*(_QWORD *)((char *)&v52 + 1) != 0x6B6361626C6C6166 || BYTE9(v52) != 46)
        goto LABEL_35;
      v18 = (char *)&v52 + 1;
    }
    v26 = *(_QWORD **)(v16 + 224);
    v27 = v18[9];
    if (v18[9])
    {
      v28 = v18[10];
      if (v28)
      {
        v29 = (unsigned __int8 *)(v18 + 11);
        do
        {
          v27 = 31 * v27 + v28;
          v30 = *v29++;
          v28 = v30;
        }
        while (v30);
      }
      v27 &= ~0x8000000000000000;
    }
    v43[0] = (id)v27;
    Descriptor = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v26 + 1, v43);
    if (Descriptor != -1)
    {
      (*(void (**)(id *__return_ptr, _QWORD *, _QWORD))(*v26 + 24))(v43, v26, *(unsigned __int8 *)(v26[2] + 16 * Descriptor + 9));
      NS::SharedPtr<MTL::Texture>::operator=(&v50, v43);
      if (v43[0])

      Descriptor = (uint64_t)v50;
      if (v50)
      {
        v31 = (const re::AssetLoadDescriptor *)((char *)a2 + 112);
        LOBYTE(v43[0]) = 0;
        v43[1] = v50;
        v48 = 0;
        v49 = 0;
        *(_QWORD *)&v42[9] = 0;
        *(_QWORD *)&v42[4] = 0;
        LODWORD(v41) = 16777473;
        BYTE4(v41) = 1;
        *(_DWORD *)v42 = 1;
        *(_DWORD *)&v42[20] = 0;
        TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v43, 6, (__int128 *)&v41);

        if (v48 != -1)
          v33 = (_anonymous_namespace_ *)((uint64_t (*)(void **, id *))*(&off_24ED308E8 + v48))(&v41, &v43[1]);
        v43[1] = 0;
        v44 = 0;
        v45 = 0;
        re::DynamicString::setCapacity(v43, 0);
        BYTE8(v46) = 0;
        v47 = 0;
        *(_QWORD *)&v46 = TextureAsset;
        re::DynamicString::operator=((re::DynamicString *)v43, v31);
        re::DynamicString::DynamicString((re::DynamicString *)&v41, (const re::DynamicString *)v43);
        v34 = v47;
        v35 = v46;
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v41;
        *(_QWORD *)(a3 + 32) = *(_QWORD *)&v42[16];
        *(_OWORD *)(a3 + 16) = *(_OWORD *)v42;
        *(_OWORD *)(a3 + 40) = v35;
        *(_BYTE *)(a3 + 56) = v34;
        v36 = v43[0];
        if (!v43[0] || ((uint64_t)v43[1] & 1) == 0)
          goto LABEL_39;
        v37 = v44;
        goto LABEL_38;
      }
    }
LABEL_35:
    re::DynamicString::operator+((re::DynamicString *)&v41, (uint64_t)&v51, (re::DynamicString *)v43);
    v38 = *(_OWORD *)v43;
    v43[0] = 0;
    v43[1] = 0;
    v39 = v44;
    v40 = v45;
    v44 = 0;
    v45 = 0;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v38;
    *(_QWORD *)(a3 + 24) = v39;
    *(_QWORD *)(a3 + 32) = v40;
    v36 = v41;
    if (!v41 || (v42[0] & 1) == 0)
    {
LABEL_39:
      if (v50)

      goto LABEL_41;
    }
    v37 = *(_QWORD *)&v42[8];
LABEL_38:
    (*(void (**)(id, uint64_t))(*(_QWORD *)v36 + 40))(v36, v37);
    goto LABEL_39;
  }
  v23 = *(_OWORD *)v43;
  v24 = v44;
  v25 = v45;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v23;
  *(_QWORD *)(a3 + 24) = v24;
  *(_QWORD *)(a3 + 32) = v25;
LABEL_41:
  result = v51;
  if (v51)
  {
    if ((v52 & 1) != 0)
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(_QWORD *)v51 + 40))();
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::BuiltinTextureLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, uint64_t **a2)
{
  uint64_t **v2;
  unsigned __int8 v3;
  __guard *v4;
  int v6;
  int v7;
  re::AssetLoadDescriptor *v9;

  v2 = a2;
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v7 = v6;
    v2 = a2;
    a1 = v9;
    if (v7)
    {
      re::introspect<re::BuiltinTextureLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"BuiltinTextureLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_BuiltinTextureLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_BuiltinTextureLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BuiltinTextureLoadDescriptorParameters>, 0);
      v2 = a2;
      a1 = v9;
    }
  }
  return re::AssetLoadDescriptor::getIntrospectableData(a1, (re **)v4[284], v2, 0);
}

void **NS::SharedPtr<MTL::Texture>::operator=(void **a1, void **a2)
{
  void *v4;
  void *v5;

  v4 = *a1;
  v5 = *a2;
  if (v4 == *a2)
  {

  }
  else
  {
    if (v4)
    {

      v5 = *a2;
    }
    *a1 = v5;
  }
  *a2 = 0;
  return a1;
}

{
  void *v3;
  void *v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {

      v4 = *a2;
    }
    *a1 = v4;
  }
  return a1;
}

__n128 re::BuiltinTextureAssetProvider::resolveChild@<Q0>(re::BuiltinTextureAssetProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  result = v9;
  v7 = v10;
  v8 = v11;
  *(_BYTE *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t *re::BuiltinTextureAssetProvider::getDescription(re::BuiltinTextureAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v7 = 0;
  v8 = 0;
  v9 = 0;
  re::DynamicString::setCapacity(&v6, 0);
  if (re::AssetLoadDescriptor::getIntrospectableData<re::BuiltinTextureLoadDescriptorParameters>(a2, &v6))
  {
    re::DynamicString::operator=(a3, (re::DynamicString *)&v6);
  }
  else
  {
    v10[0] = "mangled";
    v10[1] = 7;
    re::DynamicString::operator=(a3, (uint64_t)v10);
  }
  result = v6;
  if (v6)
  {
    if ((v7 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

uint64_t re::BuiltinTextureAssetProvider::buildFallbackTextureDescriptors@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  unsigned __int16 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  re::BuiltinTextureAssetProvider *v21;
  __n128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  _BYTE v39[23];
  _QWORD v40[2];
  uint64_t v41;

  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  v4 = *(_QWORD *)(this + 32);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 64);
    if (v5)
    {
      v6 = v5[28];
      v7 = v5[30];
      v8 = v5[31];
      v9 = (uint64_t *)(v6 + 8);
      v40[0] = v6 + 8;
      v10 = *(_QWORD *)(v6 + 24);
      if (v10 >= 0x10)
      {
        v11 = 0;
        v12 = *v9;
        v13 = v10 >> 4;
        v14 = -1.79399301e-307;
        v15 = 4.74803907e-38;
        while (1)
        {
          v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v40[1] = (unsigned __int16)~v16;
          if (v16 != 0xFFFF)
            break;
          v11 += 16;
          if (!--v13)
            return this;
        }
        v17 = __clz(__rbit64((unsigned __int16)~v16)) + v11;
        v41 = v17;
        if (v17 != -1)
        {
          while (1)
          {
            v18 = (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v40[0] + 8) + 16 * v17 + 8) >> 8;
            if (v7 <= v18)
              break;
            v19 = v8 + 32 * v18;
            if ((*(_BYTE *)(v19 + 8) & 1) != 0)
              v20 = *(_QWORD *)(v19 + 16);
            else
              v20 = v8 + 9 + 32 * v18;
            re::DynamicString::format((re::DynamicString *)"fallback.%s", (re::DynamicString *)&v37, v20);
            if ((v38 & 1) != 0)
              v21 = *(re::BuiltinTextureAssetProvider **)&v39[7];
            else
              v21 = (re::BuiltinTextureAssetProvider *)v39;
            re::BuiltinTextureAssetProvider::makeDescriptor(v21, (uint64_t)&v23);
            v22.n128_f64[0] = re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)a3, (uint64_t)&v23);
            if ((_QWORD)v35)
            {
              if ((BYTE8(v35) & 1) != 0)
                (*(void (**)(double))(*(_QWORD *)v35 + 40))(v22.n128_f64[0]);
              v22 = 0uLL;
              v35 = 0u;
              v36 = 0u;
            }
            if (v30)
            {
              if (v34)
                (*(void (**)(__n128))(*(_QWORD *)v30 + 40))(v22);
              v34 = 0;
              v31 = 0;
              v32 = 0;
              v30 = 0;
              ++v33;
            }
            if (v25)
            {
              if (v29)
                (*(void (**)(__n128))(*(_QWORD *)v25 + 40))(v22);
              v29 = 0;
              v26 = 0;
              v27 = 0;
              v25 = 0;
              ++v28;
            }
            if (v23 && (v24 & 1) != 0)
              (*(void (**)(__n128))(*(_QWORD *)v23 + 40))(v22);
            if (v37)
            {
              if ((v38 & 1) != 0)
                (*(void (**)(__n128))(*(_QWORD *)v37 + 40))(v22);
            }
            this = (uint64_t)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v40);
            v17 = v41;
            if (v41 == -1)
              return this;
          }
          re::internal::assertLog((re::internal *)6, a2, v14, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v7);
          this = _os_crash();
          __break(1u);
        }
      }
    }
  }
  return this;
}

double re::DynamicArray<re::AssetLoadDescriptor>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::AssetLoadDescriptor>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 144 * v4;
  result = 0.0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v12;
  v13 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v13;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v5 + 80) = v14;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v15 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v15;
  v16 = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v16;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(v5 + 96);
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 136) = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v18 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 136) = 0;
  v20 = *(_QWORD *)(v5 + 120);
  v19 = *(_QWORD *)(v5 + 128);
  *(_QWORD *)(v5 + 120) = v17;
  *(_QWORD *)(v5 + 128) = v18;
  *(_QWORD *)(a2 + 120) = v20;
  *(_QWORD *)(a2 + 128) = v19;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL re::BuiltinTextureAssetProvider::isDeviceAssetForRelease(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a3 > 9;
}

uint64_t *re::BuiltinTextureAssetProvider::getAssetPathForRelease@<X0>(_anonymous_namespace_ *a1@<X0>, re::AssetLoadDescriptor *a2@<X1>, unsigned int a3@<W4>, uint64_t a4@<X8>)
{
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *result;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  re::DynamicString::setCapacity(&v18, 0);
  if ((re::AssetLoadDescriptor::getIntrospectableData<re::BuiltinTextureLoadDescriptorParameters>(a2, &v18) & 1) != 0)
  {
    if (a3 < 0xA)
    {
      if ((v19 & 1) != 0)
        v13 = v20;
      else
        v13 = (char *)&v19 + 1;
      re::DynamicString::format((re::DynamicString *)"memory:%s.compiledtexture", (re::DynamicString *)&v15, v13);
    }
    else
    {
      if ((*((_QWORD *)a2 + 1) & 1) != 0)
        v7 = (char *)*((_QWORD *)a2 + 2);
      else
        v7 = (char *)a2 + 9;
      if ((v19 & 1) != 0)
        v8 = v20;
      else
        v8 = (char *)&v19 + 1;
      re::DynamicString::format((re::DynamicString *)"%s:%s.compiledtexture", (re::DynamicString *)&v15, v7, v8);
    }
    v10 = v15;
    v11 = v16;
    v12 = v17;
    *(_BYTE *)a4 = 1;
  }
  else
  {
    if ((*((_QWORD *)a2 + 1) & 1) != 0)
      v9 = (char *)*((_QWORD *)a2 + 2);
    else
      v9 = (char *)a2 + 9;
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize parameters for %s", (re::DynamicString *)&v15, v9);
    v10 = v15;
    v11 = v16;
    v12 = v17;
    *(_BYTE *)a4 = 0;
  }
  *(_OWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 24) = v11;
  *(_QWORD *)(a4 + 32) = v12;
  result = v18;
  if (v18)
  {
    if ((v19 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v18 + 40))();
  }
  return result;
}

void re::BuiltinTextureAssetProvider::makeDescriptorFromAssetPath(const re::AssetPath *a1@<X1>, _BYTE *a2@<X8>)
{
  char *v5;
  const char *v6;
  re *v7;
  NSObject *v8;
  re::BuiltinTextureAssetProvider *v9;
  __n128 v10;
  char *v11;
  _BYTE v12[12];
  __int16 v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)a1 + 17;
  if ((*((_QWORD *)a1 + 2) & 1) != 0)
    v6 = (const char *)*((_QWORD *)a1 + 3);
  else
    v6 = (char *)a1 + 17;
  v7 = (re *)strcmp(v6, "BuiltinTexture");
  if ((_DWORD)v7)
  {
    v8 = *re::assetsLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      if ((*((_QWORD *)a1 + 2) & 1) != 0)
        v11 = (char *)*((_QWORD *)a1 + 3);
      else
        v11 = v5;
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)&v12[4] = v11;
      v13 = 2080;
      v14 = "BuiltinTexture";
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Unexpected scheme: %s, expected: %s", v12, 0x16u);
    }
    *a2 = 0;
  }
  else
  {
    if ((*((_QWORD *)a1 + 6) & 1) != 0)
      v9 = (re::BuiltinTextureAssetProvider *)*((_QWORD *)a1 + 7);
    else
      v9 = (const re::AssetPath *)((char *)a1 + 49);
    re::BuiltinTextureAssetProvider::makeDescriptor(v9, (uint64_t)v12);
    v10.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional((uint64_t)a2, (uint64_t)v12);
    if ((_QWORD)v25)
    {
      if ((BYTE8(v25) & 1) != 0)
        (*(void (**)(double))(*(_QWORD *)v25 + 40))(v10.n128_f64[0]);
      v10 = 0uLL;
      v25 = 0u;
      v26 = 0u;
    }
    if (v20)
    {
      if (v24)
        (*(void (**)(__n128))(*(_QWORD *)v20 + 40))(v10);
      v24 = 0;
      v21 = 0;
      v22 = 0;
      v20 = 0;
      ++v23;
    }
    if (v15)
    {
      if (v19)
        (*(void (**)(__n128))(*(_QWORD *)v15 + 40))(v10);
      v19 = 0;
      v16 = 0;
      v17 = 0;
      v15 = 0;
      ++v18;
    }
    if (*(_QWORD *)v12 && (v12[8] & 1) != 0)
      (*(void (**)(__n128))(**(_QWORD **)v12 + 40))(v10);
  }
}

const char *re::BuiltinTextureAssetProvider::schemeName(re::BuiltinTextureAssetProvider *this)
{
  return "BuiltinTexture";
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, id *a2)
{
  if (*a2)
  {

    *a2 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(int a1, re::CPUTexture *this)
{
  re::CPUTexture::~CPUTexture(this);
}

void re::CPUTexture::~CPUTexture(re::CPUTexture *this)
{
  uint64_t v2;
  _OWORD *v3;

  v3 = (_OWORD *)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if ((*((_BYTE *)this + 56) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 8));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)this + 8);
  if (*(_QWORD *)this)
  {

    *(_QWORD *)this = 0;
  }
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        v6 = (_QWORD *)(v3 + 32);
        do
        {
          v7 = *(v6 - 4);
          if (v7)
          {
            if (*v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v6 = 0;
            *(v6 - 3) = 0;
            *(v6 - 2) = 0;
            *(v6 - 4) = 0;
            ++*((_DWORD *)v6 - 2);
          }
          v6 += 5;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*a2 == *(_QWORD *)(a1[1] + 16 * (v12 + v13)))
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

void re::VFXAsset::~VFXAsset(re::VFXAsset *this)
{
  re *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 9) != -1)
  {
    v2 = (re *)sandbox_extension_release();
    if ((_DWORD)v2)
    {
      v3 = (id)*re::assetTypesLogObjects(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v5 = *__error();
        v6[0] = 67109120;
        v6[1] = v5;
        _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "VFXAsset: sandbox release error %i", (uint8_t *)v6, 8u);
      }

    }
  }

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 6));
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

void sub_22527AAAC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v3 = v2;

  v5 = v1[4];
  if (v5)
  {
    if ((v1[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v1[6]);
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
  }
  if (*v1)
  {
    if ((v1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
    *(_OWORD *)v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
  }
  _Unwind_Resume(a1);
}

uint64_t *re::VFXAsset::assetType(re::VFXAsset *this)
{
  unsigned __int8 v1;

  {
    re::VFXAsset::assetType(void)::type = (uint64_t)"VFX";
    qword_2558274E0 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::VFXAsset::assetType(void)::type);
  }
  return &re::VFXAsset::assetType(void)::type;
}

__guard re::VFXAssetLoader::introspectionType(re::VFXAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::VFXAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"VFXAsset", (uint64_t (*)(re::internal *))re::allocInfo_VFXAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VFXAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VFXAsset>, 0);
    }
  }
  return v2[287];
}

BOOL re::VFXAssetLoader::createRuntimeData(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  void **v4;
  _BOOL8 result;
  NSObject *v6;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  re *v12;
  uint64_t v13;
  re *VFXRESceneClass;
  objc_class *v15;
  objc_class *VFXSceneLoadOptionsClass;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  re *v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  re *v28;
  re *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = a2[1];
  v3 = v2 >> 1;
  if ((v2 & 1) == 0)
    v3 = v2 >> 1;
  if (v3)
  {
    v4 = (void **)(a2 + 8);
    if (a2[8])
      return 1;
    if ((v2 & 1) != 0)
      v8 = (char *)a2[2];
    else
      v8 = (char *)a2 + 9;
    v9 = (void *)MEMORY[0x24BDBCF48];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "fileURLWithPath:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = 0;
    if (!re::ServiceLocator::serviceOrNull<re::RenderManager>(a1[1]))
    {
      v25 = *re::assetTypesLogObjects(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v34 = v11;
        _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "Can't load VFXAsset %@ null rendermanager", buf, 0xCu);
      }
      goto LABEL_20;
    }
    v12 = (re *)re::ServiceLocator::service<re::RenderManager>(a1[1]);
    v13 = *((_QWORD *)v12 + 13);
    VFXRESceneClass = re::getVFXRESceneClass(v12);
    v15 = VFXRESceneClass;
    if (VFXRESceneClass)
    {
      VFXSceneLoadOptionsClass = re::getVFXSceneLoadOptionsClass(VFXRESceneClass);
      if (VFXSceneLoadOptionsClass)
      {
        v17 = a1[1];
        if ((v18 & 1) == 0
        {
          re::introspect<re::VFXManager>(void)::info = re::introspect_VFXManager(0);
        }
        v19 = re::introspect<re::VFXManager>(void)::info;
        re::StringID::invalid((re::StringID *)buf);
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v17 + 16))(v17, v19, buf);
        re::StringID::destroyString((re::StringID *)buf);
        if (v20)
        {
          v22 = objc_alloc_init(VFXSceneLoadOptionsClass);
          objc_msgSend(v22, "setSetupRenderer:", v13 != 0);
          objc_msgSend(v22, "setAutomaticallyPrepareScene:", v13 != 0);
          objc_msgSend(v22, "setEnableRuntimeScriptCompilation:", *(unsigned __int8 *)(v20 + 16));
          v23 = [v15 alloc];
          if (v13)
            v24 = *(id *)v20;
          else
            v24 = 0;
          v28 = (re *)objc_msgSend(v23, "initWithContentsOf:commandQueue:options:error:", v11, v24, v22, &v32);
          v29 = v28;
          if (v13)

          if (!v32)
          {
            re::ObjCObject::operator=(v4, v29);

            return 1;
          }
          v30 = (id)*re::assetTypesLogObjects(v28);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v11, "path");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v34 = v31;
            v35 = 2112;
            v36 = v32;
            _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Couldn't load %@ %@", buf, 0x16u);

          }
          return 0;
        }
        v26 = *re::assetTypesLogObjects(v21);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          goto LABEL_20;
        *(_WORD *)buf = 0;
        v27 = "VFX service is not loaded";
      }
      else
      {
        v26 = *re::assetTypesLogObjects(0);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          goto LABEL_20;
        *(_WORD *)buf = 0;
        v27 = "VFX framework is not loaded";
      }
      _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, v27, buf, 2u);
    }
LABEL_20:

    return 0;
  }
  v6 = *re::assetTypesLogObjects((re *)a1);
  result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Can't load VFXAsset empoty path", buf, 2u);
  return 0;
}

void sub_22527AFD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t re::ServiceLocator::service<re::RenderManager>(uint64_t a1)
{
  uint64_t result;
  __objc2_class_ro *v2;
  __objc2_class_ro *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[16];
  _BYTE v7[9];
  _BYTE v8[23];

  result = re::ServiceLocator::serviceOrNull<re::RenderManager>(a1);
  if (!result)
  {
    v2 = re::introspect<re::RenderManager>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    v3 = re::introspect<re::RenderManager>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage((re::internal *)v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if ((v7[8] & 1) != 0)
      v5 = *(_BYTE **)&v8[7];
    else
      v5 = v8;
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::VFXAssetLoader::registerAsset(re::VFXAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v18;
  const char *v19;
  _QWORD v20[2];

  v3 = *((_QWORD *)a2 + 1);
  if ((v3 & 1) != 0)
    v4 = v3 >> 1;
  else
    v4 = v3 >> 1;
  if (!v4)
    return 2;
  if (*(_QWORD *)(re::ServiceLocator::service<re::RenderManager>(*((_QWORD *)this + 1)) + 104))
  {
    v8 = *((_QWORD *)this + 1);
    v9 = *((_QWORD *)a3 + 10);
    v10 = (os_unfair_lock_s *)re::ServiceLocator::serviceOrNull<re::AssetService>(v8);
    if (v10)
    {
      if (v9 == -1)
        v11 = 0;
      else
        v11 = v9;
      re::AssetManager::fromPeerID(v10, v11, (uint64_t)v20);
      v12 = LOBYTE(v20[0]);
      v13 = v20[1];
      v14 = re::ServiceLocator::serviceOrNull<re::ResourceFetchService>(v8);
      if (v14)
      {
        if (v12)
          v15 = v13;
        else
          v15 = 0;
        v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, v15);
        goto LABEL_20;
      }
      v18 = *re::assetTypesLogObjects(0);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
LABEL_19:
        v16 = 0;
LABEL_20:
        objc_msgSend(*((id *)a2 + 8), "setPeerPid:", 0xFFFFFFFFLL, v20[0]);
        objc_msgSend(*((id *)a2 + 8), "setPeerTaskIdentity:", v16);
        objc_msgSend(*((id *)a2 + 8), "updateMemoryOwnership");
        return 0;
      }
      LOWORD(v20[0]) = 0;
      v19 = "ResourceFetchService not available to retrieve peer task identity token";
    }
    else
    {
      v18 = *re::assetTypesLogObjects(0);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      LOWORD(v20[0]) = 0;
      v19 = "AssetManager not available to retrieve peer task identity token";
    }
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)v20, 2u);
    goto LABEL_19;
  }
  return 0;
}

re *re::VFXAssetLoader::unloadAsset(re::VFXAssetLoader *this, re::VFXAsset *a2)
{
  return re::internal::destroyPersistent<re::VFXAsset>((re *)"unloadAsset", 216, a2);
}

re *re::internal::destroyPersistent<re::VFXAsset>(re *result, uint64_t a2, re::VFXAsset *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::VFXAsset::~VFXAsset(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::VFXAsset *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::VFXAssetLoader::isSupportedSourceExtension(re::VFXAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "vfx") || strcasecmp(a2, "vfxproj") == 0;
}

uint64_t *re::allocInfo_VFXFile(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_64);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_64))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD550, 0);
    *(uint64_t *)((char *)&qword_2540FD560 + 6) = 0;
    qword_2540FD560 = 0;
    qword_2540FD570 = 0;
    qword_2540FD578 = 0xFFFFFFFFLL;
    qword_2540FD550 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD580 = (uint64_t)"VFXFile";
    dword_2540FD588 = 0;
    xmmword_2540FD590 = 0u;
    unk_2540FD5A0 = 0u;
    xmmword_2540FD5B0 = 0u;
    qword_2540FD5C0 = 0;
    __cxa_guard_release(&_MergedGlobals_64);
  }
  return &qword_2540FD550;
}

void re::initInfo_VFXFile(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x2483894288;
  v15[1] = "VFXFile";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD518);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD518);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "vfxFilePath";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FD540 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "vfxSandboxToken";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FD548 = v13;
      __cxa_guard_release(&qword_2540FD518);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FD540;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VFXFile>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VFXFile>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VFXFile>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VFXFile>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void sub_22527B5C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FD518);
  _Unwind_Resume(a1);
}

_QWORD *re::internal::defaultConstruct<re::VFXFile>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::VFXFile>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;

  v5 = a3 + 4;
  v4 = a3[4];
  if (v4)
  {
    if ((a3[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[6]);
    result = 0.0;
    *v5 = 0u;
    v5[1] = 0u;
  }
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::VFXFile>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::VFXFile>(_QWORD *a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v3 = a1 + 4;
  v2 = a1[4];
  if (v2)
  {
    if ((a1[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[6]);
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t *re::allocInfo_VFXAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD528);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD528))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD5C8, 0);
    *(uint64_t *)((char *)&qword_2540FD5D8 + 6) = 0;
    qword_2540FD5D8 = 0;
    qword_2540FD5E8 = 0;
    qword_2540FD5F0 = 0xFFFFFFFFLL;
    qword_2540FD5C8 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD5F8 = (uint64_t)"VFXAsset";
    dword_2540FD600 = 0;
    xmmword_2540FD608 = 0u;
    unk_2540FD618 = 0u;
    xmmword_2540FD628 = 0u;
    qword_2540FD638 = 0;
    __cxa_guard_release(&qword_2540FD528);
  }
  return &qword_2540FD5C8;
}

void re::initInfo_VFXAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x46BED1B7050;
  v12[1] = "VFXAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD538);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD538);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540FD520;
      if (!qword_2540FD520)
      {
        v8 = re::allocInfo_VFXFile((re *)v6);
        qword_2540FD520 = (uint64_t)v8;
        re::initInfo_VFXFile((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "vfxFile";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FD530 = v10;
      __cxa_guard_release(&qword_2540FD538);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FD530;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VFXAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VFXAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VFXAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VFXAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void sub_22527B9DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FD538);
  _Unwind_Resume(a1);
}

_QWORD *re::internal::defaultConstruct<re::VFXAsset>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;
  _QWORD *result;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  result = re::DynamicString::setCapacity(v3, 0);
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = -1;
  return result;
}

void re::internal::defaultDestruct<re::VFXAsset>(int a1, int a2, re::VFXAsset *this)
{
  re::VFXAsset::~VFXAsset(this);
}

_QWORD *re::internal::defaultConstructV2<re::VFXAsset>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;
  _QWORD *result;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  result = re::DynamicString::setCapacity(v1, 0);
  *((_QWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 5) = -1;
  return result;
}

uint64_t re::introspect_VFXAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXAsset", (uint64_t (*)(re::internal *))re::allocInfo_VFXAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VFXAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VFXAsset>, this);
}

void re::VFXAssetLoader::~VFXAssetLoader(re::VFXAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::introspect<re::RenderManager>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::RenderManager>(void)::info = re::introspect_RenderManager(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[500];
}

uint64_t *re::MeshAsset::assetType(re::MeshAsset *this)
{
  unsigned __int8 v1;

  {
    re::MeshAsset::assetType(void)::type = (uint64_t)"Mesh";
    qword_255827500 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::MeshAsset::assetType(void)::type);
  }
  return &re::MeshAsset::assetType(void)::type;
}

uint64_t re::MeshAsset::MeshAsset(uint64_t a1, uint64_t a2)
{
  re::MeshAssetData *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  *(_QWORD *)a1 = &off_24ED30A60;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (re::MeshAssetData *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v5;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  v8 = a1 + 88;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  v10 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v11 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v11;
  v12 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v12;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 500) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 548) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 905) = 0u;
  *(_DWORD *)(a1 + 924) = 2;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  if (!*(_QWORD *)(a1 + 144))
    re::MeshAssetData::generateMetaData(v3);
  re::DynamicArray<float>::operator=(a1 + 168, (uint64_t *)(a1 + 128));
  if (!*(_QWORD *)(a1 + 104))
  {
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(a1 + 40) + 232;
      while (!*(_QWORD *)(v14 + 16))
      {
        v14 += 512;
        if (!--v13)
          goto LABEL_10;
      }
      v8 = v14;
    }
  }
LABEL_10:
  v15 = *(_QWORD *)(v8 + 16);
  v17[0] = *(_QWORD *)(v8 + 32);
  v17[1] = v15;
  re::MeshAsset::setSkeletons((_QWORD *)a1, v17);
  return a1;
}

void re::MeshAsset::setSkeletons(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  unint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  char v23[24];
  __int128 v24;
  __int128 v25;
  _BYTE v26[18];
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  uint64_t *v30;
  _QWORD v31[11];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = (_anonymous_namespace_ *)re::FixedArray<re::Skeleton>::deinit(a1 + 116);
  a1[117] = v5;
  if (v5)
  {
    if (v5 < 0x19999999999999ALL)
    {
      a1[118] = v8;
      if (!v8)
        goto LABEL_22;
      v10 = v5 - 1;
      if (v5 == 1)
      {
        v12 = 0uLL;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 128) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        v13 = (_OWORD *)(v8 + 16);
        *(_QWORD *)(v8 + 8) = &str_110;
        v11 = (_DWORD *)(v8 + 148);
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
      }
      else
      {
        v11 = (_DWORD *)(v8 + 148);
        do
        {
          *(_OWORD *)(v11 - 37) = 0uLL;
          *(_OWORD *)(v11 - 1) = 0uLL;
          *(_OWORD *)(v11 - 5) = 0uLL;
          *(_OWORD *)(v11 - 9) = 0uLL;
          *(_OWORD *)(v11 - 13) = 0uLL;
          *(_OWORD *)(v11 - 17) = 0uLL;
          *(_OWORD *)(v11 - 21) = 0uLL;
          *(_OWORD *)(v11 - 25) = 0uLL;
          *(_OWORD *)(v11 - 29) = 0uLL;
          *(_OWORD *)(v11 - 33) = 0uLL;
          *(_QWORD *)(v11 - 35) = &str_110;
          *(_QWORD *)(v11 - 1) = 0x7FFFFFFF00000000;
          v11 += 40;
          --v10;
        }
        while (v10);
        v12 = 0uLL;
        *(_OWORD *)(v11 - 33) = 0u;
        v13 = v11 - 33;
        *(_OWORD *)(v11 - 37) = 0u;
        v13[7] = 0u;
        v13[8] = 0u;
        v13[5] = 0u;
        v13[6] = 0u;
        v13[3] = 0u;
        v13[4] = 0u;
        v13[1] = 0u;
        v13[2] = 0u;
        *(_QWORD *)(v11 - 35) = &str_110;
      }
      v14 = 0;
      v15 = 0;
      v16 = 0;
      *((_DWORD *)v13 + 32) = 0;
      *v11 = 0x7FFFFFFF;
      v13[6] = v12;
      v13[7] = v12;
      v13[4] = v12;
      v13[5] = v12;
      v13[2] = v12;
      v13[3] = v12;
      *v13 = v12;
      v13[1] = v12;
      while (1)
      {
        v17 = a2[1];
        if (v17 <= v16)
          break;
        v2 = (uint64_t *)a1[117];
        if ((unint64_t)v2 <= v16)
          goto LABEL_20;
        v2 = (uint64_t *)(*a2 + v15);
        v18 = (uint64_t *)(a1[118] + v14);
        v19 = v2[3];
        v31[0] = v2[4];
        v31[1] = v19;
        v20 = v2[6];
        *(_QWORD *)v26 = v2[7];
        *(_QWORD *)&v26[8] = v20;
        v21 = v2[9];
        v22[0] = v2[10];
        v22[1] = v21;
        if (!v23[0])
        {
          v8 = v24;
          if ((_QWORD)v24)
          {
            if ((BYTE8(v24) & 1) != 0)
              v8 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 40))();
            v24 = 0u;
            v25 = 0u;
          }
        }
        ++v16;
        v15 += 112;
        v14 += 160;
        if (v5 == v16)
          return;
      }
      re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v17);
      _os_crash();
      __break(1u);
LABEL_20:
      v22[0] = 0;
      memset(v31, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v26 = 136315906;
      *(_QWORD *)&v26[4] = "operator[]";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 468;
      v27 = 2048;
      v28 = v16;
      v29 = 2048;
      v30 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 160, v5);
    _os_crash();
    __break(1u);
LABEL_22:
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::MeshAsset::MeshAsset(uint64_t a1, id *a2, uint64_t a3)
{
  id *v5;
  uint64_t v6;
  uint64_t v7;
  re *v8;
  uint64_t *v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_24ED30A60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v5 = (id *)(a1 + 288);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v6 = 0;
  *(_QWORD *)(a1 + 288) = *a2;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  do
  {
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + v6 + 296), (void **)(a3 + v6));
    v6 += 8;
  }
  while (v6 != 64);
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 500) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 548) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 905) = 0u;
  *(_DWORD *)(a1 + 924) = 2;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  re::makeMeshCollectionWithMeshPayload(v5, (id *)(a1 + 296), (uint64_t)v13);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 248, (uint64_t)v13);
  re::DynamicArray<re::MeshModel>::deinit((uint64_t)v13);
  v16 = 0;
  v13[1] = 0;
  v14 = 0;
  v13[0] = 0;
  v15 = 0;
  re::makeMeshAssetInstancesWithMeshPayload(v5, (uint64_t)v13);
  v12[0] = v16;
  v12[1] = v14;
  v7 = *(_QWORD *)(a1 + 936);
  v11[0] = *(_QWORD *)(a1 + 944);
  v11[1] = v7;
  v9 = re::globalAllocators(v8);
  re::MeshNameMap::init((uint64_t *)(a1 + 448), (re::_anonymous_namespace_::MeshCollectionAccessor *)(a1 + 248), (re::_anonymous_namespace_::MeshCollectionAccessor *)v12, (unint64_t)v11, v9[2]);
  re::makeBoundingBoxesWithMeshPayload(v5, (_QWORD *)(a1 + 872), (_QWORD *)(a1 + 896));
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)v13);
  return a1;
}

void re::MeshAsset::~MeshAsset(re::MeshAsset *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24ED30A60;
  *((_QWORD *)this + 47) = 0;
  ++*((_DWORD *)this + 96);
  *((_QWORD *)this + 52) = 0;
  ++*((_DWORD *)this + 106);
  *((_BYTE *)this + 952) = 0;
  re::FixedArray<re::Skeleton>::deinit((_QWORD *)this + 116);
  v2 = *((_QWORD *)this + 112);
  if (v2)
  {
    if (*((_QWORD *)this + 113))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 114));
      *((_QWORD *)this + 113) = 0;
      *((_QWORD *)this + 114) = 0;
    }
    *((_QWORD *)this + 112) = 0;
  }
  v3 = *((_QWORD *)this + 109);
  if (v3)
  {
    if (*((_QWORD *)this + 110))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 111));
      *((_QWORD *)this + 110) = 0;
      *((_QWORD *)this + 111) = 0;
    }
    *((_QWORD *)this + 109) = 0;
  }
  v4 = (_QWORD *)((char *)this + 360);
  re::MeshNameMap::~MeshNameMap((re::MeshAsset *)((char *)this + 448));
  v5 = *((_QWORD *)this + 50);
  if (v5)
  {
    if (*((_QWORD *)this + 54))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 52) = 0;
    *((_QWORD *)this + 50) = 0;
    ++*((_DWORD *)this + 106);
  }
  if (*v4)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *v4 = 0;
    ++*((_DWORD *)this + 96);
  }
  for (i = 352; i != 288; i -= 8)
  {
    v7 = *(void **)((char *)this + i);
    if (v7)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }

  re::DynamicArray<re::MeshModel>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 208);
  v8 = *((_QWORD *)this + 21);
  if (v8)
  {
    if (*((_QWORD *)this + 25))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 21) = 0;
    ++*((_DWORD *)this + 48);
  }
  v9 = *((_QWORD *)this + 16);
  if (v9)
  {
    if (*((_QWORD *)this + 20))
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 16) = 0;
    ++*((_DWORD *)this + 38);
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)this + 88);
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)this + 8);
}

{
  re::MeshAsset::~MeshAsset(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FixedArray<re::Skeleton>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::Skeleton *v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::Skeleton *)result[2];
      v5 = 160 * v2;
      do
      {
        re::Skeleton::~Skeleton(v4);
        v4 = (re::Skeleton *)(v6 + 160);
        v5 -= 160;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::MeshAsset::replaceContentsWithMeshResourceDefinition(re::MeshAsset *a1, _QWORD *a2, Device **a3, re::MeshManager *a4, int a5)
{
  BOOL v8;
  uint64_t v9;
  REMultiBufferMeshPayload *v10;
  int v11;
  BOOL v12;

  v8 = a2[30] != 0;
  *((_BYTE *)a1 + 920) = v8;
  v11 = a5;
  v12 = v8;
  re::makeMeshPayloadWithMeshResourceDefinition(a2, a3, (uint64_t)&v11, &v10);
  LOBYTE(a4) = re::MeshAsset::replaceContentsWithPayload(a1, (id *)&v10, (id *)a3, a4);

  if ((a4 & 1) == 0)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Unable to replace MeshAsset contents with a model definition", "success", "replaceContentsWithMeshResourceDefinition", 377);
    _os_crash();
    __break(1u);
  }
}

BOOL re::MeshAsset::replaceContentsWithPayload(re::MeshAsset *this, id *a2, id *a3, re::MeshManager *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t i;
  uint64_t j;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  uint64_t v37;
  float v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[12];
  __int16 v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  __int16 v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 952) = 0;
  if (*((_QWORD *)this + 50))
  {
    v7 = (_QWORD *)((char *)this + 360);
    if (*((_QWORD *)this + 45))
    {
      v8 = (_QWORD *)((char *)this + 400);
      re::MeshManager::destroyCollection((uint64_t *)a4, (re::MeshAsset *)((char *)this + 360));
      if (*v8)
      {
        if (*((_QWORD *)this + 54))
          (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8);
        *((_QWORD *)this + 54) = 0;
        *((_QWORD *)this + 51) = 0;
        *((_QWORD *)this + 52) = 0;
        *v8 = 0;
        ++*((_DWORD *)this + 106);
      }
      if (*v7)
      {
        if (*((_QWORD *)this + 49))
          (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 40))(*v7);
        *((_QWORD *)this + 49) = 0;
        *((_QWORD *)this + 46) = 0;
        *((_QWORD *)this + 47) = 0;
        *v7 = 0;
        ++*((_DWORD *)this + 96);
      }
    }
  }
  re::FixedArray<re::Skeleton>::deinit((_QWORD *)this + 116);
  re::MeshNameMap::deinit((re::MeshAsset *)((char *)this + 448));
  *((_QWORD *)this + 23) = 0;
  ++*((_DWORD *)this + 48);
  re::ObjCObject::operator=((id *)this + 36, a2);
  re::MeshPayload::makeMeshPayloadBuffers(a2, a3, &v63);
  v9 = (uint64_t *)((char *)this + 296);
  if ((__int128 *)((char *)this + 296) != &v63)
  {
    for (i = 0; i != 8; ++i)
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v9[i], (void **)((char *)&v63 + i * 8));
  }
  for (j = 56; j != -8; j -= 8)
  {
    v12 = *(void **)((char *)&v63 + j);
    if (v12)
    {

      *(_QWORD *)((char *)&v63 + j) = 0;
    }
  }
  v13 = *v9;
  if (*v9)
  {
    v40 = *v9;
    re::makeMeshCollectionWithMeshPayload(a2, (id *)this + 37, (uint64_t)&v63);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 248, (uint64_t)&v63);
    re::DynamicArray<re::MeshModel>::deinit((uint64_t)&v63);
    v54 = 0;
    v51[1] = 0;
    v52 = 0;
    v51[0] = 0;
    v53 = 0;
    re::makeMeshAssetSkeletonsWithMeshPayload(a2, (uint64_t)v51);
    *(_QWORD *)&v63 = v54;
    *((_QWORD *)&v63 + 1) = v52;
    re::MeshAsset::setSkeletons(this, &v63);
    v50 = 0;
    v47[1] = 0;
    v48 = 0;
    v47[0] = 0;
    v49 = 0;
    re::makeMeshAssetInstancesWithMeshPayload(a2, (uint64_t)v47);
    *(_QWORD *)&v63 = v50;
    *((_QWORD *)&v63 + 1) = v48;
    v14 = *((_QWORD *)this + 117);
    v42 = *((_QWORD *)this + 118);
    v43 = v14;
    v16 = re::globalAllocators(v15);
    re::MeshNameMap::init((uint64_t *)this + 56, (re::MeshAsset *)((char *)this + 248), (re::_anonymous_namespace_::MeshCollectionAccessor *)&v63, (unint64_t)&v42, v16[2]);
    v46 = 0;
    v43 = 0;
    v44 = 0;
    v42 = 0;
    v45 = 0;
    v17 = *((_QWORD *)this + 33);
    if (v17)
    {
      v18 = 0;
      v41 = *((_QWORD *)this + 33);
      do
      {
        v19 = *((_QWORD *)this + 33);
        if (v19 <= v18)
        {
          v55 = 0;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v63 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v56 = 136315906;
          *(_QWORD *)&v56[4] = "operator[]";
          v57 = 1024;
          v58 = 797;
          v59 = 2048;
          v60 = v18;
          v61 = 2048;
          v62 = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v20 = *((_QWORD *)this + 35);
        v21 = v20 + 816 * v18;
        v22 = *(_QWORD *)(v21 + 176);
        if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = (_QWORD *)(v21 + 96);
          v28 = v20 + 816 * v18;
          v29 = (unint64_t *)(v28 + 56);
          v30 = (_QWORD *)(v28 + 64);
          do
          {
            v31 = v27[10];
            if (v31
              && *(_QWORD *)(v31 + 8) > v24
              && (v32 = *(unsigned __int8 *)(*(_QWORD *)(v31 + 16) + 72 * v24 + 2)) != 0)
            {
              if (v24 >= *v29)
                v33 = 0;
              else
                v33 = *(unsigned int *)(*v30 + 560 * v24 + 468);
              v26 += v33;
              v25 += v33 * (unint64_t)v32;
            }
            else
            {
              re::SkinningModelUtil::skinnedEndIndicesBuffer(v27, v24, v56);
              re::ReadOnlyCPUAccessibleBufferSliceContent::make(v56, (uint64_t)&v63);
              if ((_BYTE)v63)
              {
                v26 += (unint64_t)v64 >> 2;
                if ((unint64_t)v64 >= 4)
                {
                  v34 = 0;
                  v35 = (unint64_t)v64 >> 2;
                  v36 = (int *)*((_QWORD *)&v63 + 1);
                  if ((unint64_t)v64 >> 2 <= 1)
                    v35 = 1;
                  do
                  {
                    v37 = *v36++;
                    v25 = v25 - v34 + v37;
                    v34 = v37;
                    --v35;
                  }
                  while (v35);
                }
              }
              re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v63);
              if (*(_QWORD *)v56)

            }
            ++v24;
          }
          while (v24 != v23);
          if (v26)
            v38 = (float)v25 / (float)v26;
          else
            v38 = 0.0;
          v17 = v41;
        }
        else
        {
          v38 = 0.0;
        }
        *(float *)&v63 = v38;
        re::DynamicArray<float>::add((_anonymous_namespace_ *)&v42, (float *)&v63);
        ++v18;
      }
      while (v18 != v17);
    }
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)this + 168, (uint64_t)&v42);
    if (v42 && v46)
      (*(void (**)(void))(*(_QWORD *)v42 + 40))();
    re::makeBoundingBoxesWithMeshPayload(a2, (_QWORD *)this + 109, (_QWORD *)this + 112);
    *((_BYTE *)this + 920) = objc_msgSend(*a2, "isLimitedRenderAsset");
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)v47);
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v51);
    v13 = v40;
  }
  return v13 != 0;
}

float32x4_t *re::MeshAsset::aabbFromMesh@<X0>(float32x4_t *result@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  float32x4_t v9;
  unint64_t v10;
  float32x4_t *v11;
  unint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26[5];
  _BYTE v27[48];
  float32x4_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0x7F0000007FLL;
  *((_QWORD *)&v4 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)a3 = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a3 + 16) = v4;
  if (result[27].i64[1])
  {
    v5 = (uint64_t *)result;
    v6 = result[23].u32[2];
    if (result[23].i32[2])
    {
      v8 = 0;
      v9.i64[0] = 0x7F0000007FLL;
      v9.i64[1] = 0x7F0000007FLL;
      v24 = v9;
      v25 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      do
      {
        v10 = v5[47];
        if (v10 <= v8)
        {
          memset(v26, 0, sizeof(v26));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v27 = 136315906;
          *(_QWORD *)&v27[4] = "operator[]";
          *(_WORD *)&v27[12] = 1024;
          *(_DWORD *)&v27[14] = 797;
          *(_WORD *)&v27[18] = 2048;
          *(_QWORD *)&v27[20] = v8;
          *(_WORD *)&v27[28] = 2048;
          *(_QWORD *)&v27[30] = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        result = (float32x4_t *)re::DataArray<re::MeshInstance>::tryGet(v5[55] + 72, *(_QWORD *)(v5[49] + 8 * v8));
        if (result)
        {
          v11 = result;
          result = (float32x4_t *)re::DataArray<re::MeshModel>::tryGet(v5[55] + 8, result[1].i64[0]);
          if (result)
          {
            v12 = 0;
            v13 = *a2;
            v14 = a2[1];
            v15 = a2[2];
            v16 = a2[3];
            v17 = v11[3];
            v18 = v11[4];
            v19 = v11[5];
            *(float32x4_t *)v27 = v11[2];
            *(float32x4_t *)&v27[16] = v17;
            *(float32x4_t *)&v27[32] = v18;
            v28 = v19;
            do
            {
              v26[v12 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(_OWORD *)&v27[v12])), v14, *(float32x2_t *)&v27[v12], 1), v15, *(float32x4_t *)&v27[v12], 2), v16, *(float32x4_t *)&v27[v12], 3);
              v12 += 16;
            }
            while (v12 != 64);
            result = re::AABB::transform(result + 1, v26, (uint64_t)v27);
            v21 = v24;
            v20 = v25;
            v20.i32[3] = 0;
            v22 = *(float32x4_t *)v27;
            v23 = *(float32x4_t *)&v27[16];
            v22.i32[3] = 0;
            v21.i32[3] = 0;
            v23.i32[3] = 0;
            v24 = vmaxnmq_f32(v21, v23);
            v25 = vminnmq_f32(v20, v22);
            *(float32x4_t *)a3 = v25;
            *(float32x4_t *)(a3 + 16) = v24;
          }
        }
        ++v8;
      }
      while (v8 != v6);
    }
  }
  return result;
}

uint64_t re::DataArray<re::MeshInstance>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 144 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::DataArray<re::MeshModel>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 816 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

void re::MeshAsset::tightAABBFromMesh(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t *v3;
  float32x4_t v4;
  _QWORD *v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  __int128 v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  float32x4_t v42;
  float32x4_t v43;
  int v44;
  uint64_t v45;
  float *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v56;
  unint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  id v72[3];
  _BYTE v73[18];
  __int16 v74;
  unint64_t v75;
  __int16 v76;
  unint64_t v77;
  _BYTE v78[48];
  float32x4_t v79;
  _BYTE v80[12];
  __int16 v81;
  int v82;
  __int16 v83;
  unint64_t v84;
  __int16 v85;
  unint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  __int128 v91;
  uint64_t v92;

  v3 = a3;
  v92 = *MEMORY[0x24BDAC8D0];
  v4.i64[0] = 0x7F0000007FLL;
  v4.i64[1] = 0x7F0000007FLL;
  *(int32x4_t *)a3 = vdupq_n_s32(0x7F800000u);
  a3[1] = v4;
  if (*(_QWORD *)(a1 + 440))
  {
    v5 = (_QWORD *)a1;
    v56 = *(unsigned int *)(a1 + 376);
    if (*(_DWORD *)(a1 + 376))
    {
      v6 = 0;
      v7 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v8.i64[0] = 0x7F0000007FLL;
      v8.i64[1] = 0x7F0000007FLL;
      v68 = v8;
      do
      {
        v9 = v5[47];
        if (v9 <= v6)
        {
LABEL_51:
          *(_QWORD *)v73 = 0;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v87 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v78 = 136315906;
          *(_QWORD *)&v78[4] = "operator[]";
          *(_WORD *)&v78[12] = 1024;
          *(_DWORD *)&v78[14] = 797;
          *(_WORD *)&v78[18] = 2048;
          *(_QWORD *)&v78[20] = v6;
          *(_WORD *)&v78[28] = 2048;
          *(_QWORD *)&v78[30] = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_52:
          v72[2] = 0;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v87 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v80 = 136315906;
          *(_QWORD *)&v80[4] = "operator[]";
          v81 = 1024;
          v82 = 476;
          v83 = 2048;
          v84 = v9;
          v85 = 2048;
          v86 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v69 = v7;
        v10 = re::DataArray<re::MeshInstance>::tryGet(v5[55] + 72, *(_QWORD *)(v5[49] + 8 * v6));
        v57 = v6;
        if (!v10)
          goto LABEL_45;
        v11 = 0;
        v12 = *a2;
        v13 = a2[1];
        v14 = a2[2];
        v15 = a2[3];
        v16 = *(_OWORD *)(v10 + 48);
        v17 = *(_OWORD *)(v10 + 64);
        v18 = *(float32x4_t *)(v10 + 80);
        *(_OWORD *)v78 = *(_OWORD *)(v10 + 32);
        *(_OWORD *)&v78[16] = v16;
        *(_OWORD *)&v78[32] = v17;
        v79 = v18;
        do
        {
          *(float32x4_t *)((char *)&v87 + v11) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)&v78[v11])), v13, *(float32x2_t *)&v78[v11], 1), v14, *(float32x4_t *)&v78[v11], 2), v15, *(float32x4_t *)&v78[v11], 3);
          v11 += 16;
        }
        while (v11 != 64);
        v66 = v88;
        v67 = v87;
        v64 = v90;
        v65 = v89;
        v19 = re::DataArray<re::MeshModel>::tryGet(v5[55] + 8, *(_QWORD *)(v10 + 16));
        if (v19)
        {
          v20 = v19;
          v7 = v69;
          v63 = *(unsigned int *)(v19 + 56);
          if (*(_DWORD *)(v19 + 56))
          {
            v21 = 0;
            while (1)
            {
              v6 = *(_QWORD *)(v20 + 56);
              if (v6 <= v21)
              {
                *(_QWORD *)v73 = 0;
                v90 = 0u;
                v91 = 0u;
                v88 = 0u;
                v89 = 0u;
                v87 = 0u;
                v9 = MEMORY[0x24BDACB70];
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v78 = 136315906;
                *(_QWORD *)&v78[4] = "operator[]";
                *(_WORD *)&v78[12] = 1024;
                *(_DWORD *)&v78[14] = 476;
                *(_WORD *)&v78[18] = 2048;
                *(_QWORD *)&v78[20] = v21;
                *(_WORD *)&v78[28] = 2048;
                *(_QWORD *)&v78[30] = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_49:
                *(_QWORD *)v80 = 0;
                v90 = 0u;
                v91 = 0u;
                v88 = 0u;
                v89 = 0u;
                v87 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v73 = 136315906;
                *(_QWORD *)&v73[4] = "operator[]";
                *(_WORD *)&v73[12] = 1024;
                *(_DWORD *)&v73[14] = 476;
                v74 = 2048;
                v75 = v9;
                v76 = 2048;
                v77 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_50:
                re::internal::assertLog((re::internal *)6, v35, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v35);
                _os_crash();
                __break(1u);
                goto LABEL_51;
              }
              v22 = 0;
              v23 = *(_QWORD *)(v20 + 64);
              v24 = v23 + 560 * v21;
              v9 = *(unsigned __int8 *)(v24 + 477);
              v25 = *(_OWORD *)(v24 + 384);
              v26 = *(_OWORD *)(v24 + 400);
              v27 = *(float32x4_t *)(v24 + 416);
              *(_OWORD *)v78 = *(_OWORD *)(v24 + 368);
              *(_OWORD *)&v78[16] = v25;
              *(_OWORD *)&v78[32] = v26;
              v79 = v27;
              do
              {
                *(float32x4_t *)((char *)&v87 + v22) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, COERCE_FLOAT(*(_OWORD *)&v78[v22])), v66, *(float32x2_t *)&v78[v22], 1), v65, *(float32x4_t *)&v78[v22], 2), v64, *(float32x4_t *)&v78[v22], 3);
                v22 += 16;
              }
              while (v22 != 64);
              *(float32x4_t *)v78 = v87;
              *(float32x4_t *)&v78[16] = v88;
              *(float32x4_t *)&v78[32] = v89;
              v79 = v90;
              if ((_DWORD)v9 == 255)
                goto LABEL_42;
              v28 = v23 + 560 * v21;
              if (!*(_DWORD *)(v28 + 468))
                goto LABEL_42;
              v29 = v23 + 560 * v21;
              v30 = (int *)(v28 + 468);
              v31 = v29;
              do
              {
                v32 = v31;
                v31 = *(_QWORD *)(v31 + 8);
                v6 = *(_QWORD *)(v32 + 32);
                if (v31)
                  v33 = v6 == 0;
                else
                  v33 = 0;
              }
              while (v33);
              if (v6 <= v9)
                goto LABEL_49;
              if (*(_BYTE *)(*(_QWORD *)(v32 + 40) + 16 * v9 + 12) != 30)
                break;
              v58 = v90;
              v59 = v89;
              v60 = v88;
              v61 = v87;
              v70 = v7;
              v34 = re::AttributeTable::buffers((re::AttributeTable *)(v23 + 560 * v21));
              if (v35 <= v9)
                goto LABEL_50;
              v36 = v34 + 16 * v9;
              v37 = *(id *)v36;
              v38 = *(void **)(v36 + 8);
              if (*(_QWORD *)v36)
                v37 = v37;
              v72[0] = v37;
              v72[1] = v38;
              re::ReadOnlyCPUAccessibleBufferSliceContent::make(v72, (uint64_t)v73);
              v39 = v73[0];
              if (v73[0])
              {
                do
                {
                  v40 = v29;
                  v29 = *(_QWORD *)(v29 + 8);
                  v6 = *(_QWORD *)(v40 + 32);
                  if (v29)
                    v41 = v6 == 0;
                  else
                    v41 = 0;
                }
                while (v41);
                v43 = v68;
                v42 = v70;
                if (v6 <= v9)
                  goto LABEL_52;
                v44 = *v30;
                if (*v30)
                {
                  v45 = *(unsigned __int16 *)(*(_QWORD *)(v40 + 40) + 16 * v9);
                  v46 = (float *)(*(_QWORD *)&v73[8] + 8);
                  v3 = a3;
                  v39 = v73[0];
                  do
                  {
                    v47 = vaddq_f32(v58, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v61, *(v46 - 2)), v60, *(v46 - 1)), v59, *v46));
                    v48 = vdivq_f32(v47, (float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3));
                    v42.i32[3] = 0;
                    v48.i32[3] = 0;
                    v42 = vminnmq_f32(v42, v48);
                    v43.i32[3] = 0;
                    v43 = vmaxnmq_f32(v43, v48);
                    v46 = (float *)((char *)v46 + v45);
                    --v44;
                  }
                  while (v44);
                  v68 = v43;
                  v70 = v42;
                  *a3 = v42;
                  a3[1] = v43;
                }
                else
                {
                  v3 = a3;
                  v39 = v73[0];
                }
              }
              else
              {
                v3 = a3;
              }
              re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v73);
              if (v72[0])

              v7 = v70;
              if (!v39)
                goto LABEL_42;
LABEL_43:
              if (++v21 == v63)
                goto LABEL_46;
            }
            v3 = a3;
LABEL_42:
            v71 = v7;
            re::AABB::transform((float32x4_t *)(v23 + 560 * v21 + 432), (float32x4_t *)v78, (uint64_t)&v87);
            v49 = v68;
            v50 = v71;
            v50.i32[3] = 0;
            v51 = v87;
            v52 = v88;
            v51.i32[3] = 0;
            v49.i32[3] = 0;
            v7 = vminnmq_f32(v50, v51);
            v52.i32[3] = 0;
            v53 = vmaxnmq_f32(v49, v52);
            *v3 = v7;
            v3[1] = v53;
            v68 = v53;
            goto LABEL_43;
          }
        }
        else
        {
LABEL_45:
          v7 = v69;
        }
LABEL_46:
        v6 = v57 + 1;
        v5 = (_QWORD *)a1;
      }
      while (v57 + 1 != v56);
    }
  }
}

uint64_t re::AttributeTable::buffers(re::AttributeTable *this)
{
  re::AttributeTable *v2;
  BOOL v3;

  v2 = (re::AttributeTable *)*((_QWORD *)this + 1);
  if (v2)
    v3 = *((_QWORD *)this + 16) == 0;
  else
    v3 = 0;
  if (v3)
    return re::AttributeTable::buffers(v2);
  else
    return *((_QWORD *)this + 18);
}

__guard re::MeshAssetLoader::introspectionType(re::MeshAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::MeshAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"MeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_MeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MeshAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshAsset>, 0);
    }
  }
  return v2[290];
}

void re::DynamicArray<re::MeshAssetBlendShapeData>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = 56 * v2;
    do
    {
      re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)v3 + 2);
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 56);
      v4 -= 56;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

BOOL re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  v5 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 80 * v6 + 16, a2))
      {
        v6 = *(_DWORD *)(v7 + 80 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return v5 != 0x7FFFFFFF;
      }
      v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<char const*>(uint64_t a1, re::DynamicString *a2, const char **a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const*&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 80 * v9;
  return v12 + 48;
}

uint64_t re::MeshAsset::registerRuntimeData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  _OWORD v48[5];
  uint64_t v49;

  v2 = a2;
  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 248);
  *(_BYTE *)(a1 + 952) = 0;
  if (v4)
  {
    v27 = a1 + 248;
    if (*(_QWORD *)(a1 + 288))
    {
      re::registerMeshCollectionWithMeshPayload(a1 + 248, (id *)(a1 + 288), a2, (uint64_t)v29);
      v6 = (_OWORD *)(a1 + 360);
      if ((_OWORD *)(a1 + 360) == v29)
      {
LABEL_8:
        v10 = *((_QWORD *)&v30 + 1);
        if (v6 == v29)
        {
LABEL_13:
          if (v10)
          {
            if (*((_QWORD *)&v32 + 1))
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
            *((_QWORD *)&v32 + 1) = 0;
            v31 = 0uLL;
            *((_QWORD *)&v30 + 1) = 0;
            LODWORD(v32) = v32 + 1;
          }
          if (*(_QWORD *)&v29[0] && (_QWORD)v30)
            (*(void (**)(void))(**(_QWORD **)&v29[0] + 40))();
LABEL_27:
          re::DynamicArray<re::MeshModel>::deinit(v27);
          v2 = a2;
          goto LABEL_28;
        }
        v11 = *(_QWORD *)(a1 + 400);
        if (!v11 || !*((_QWORD *)&v30 + 1) || v11 == *((_QWORD *)&v30 + 1))
        {
          *(_QWORD *)(a1 + 400) = *((_QWORD *)&v30 + 1);
          *((_QWORD *)&v30 + 1) = v11;
          v12 = *(_OWORD *)(a1 + 408);
          *(_OWORD *)(a1 + 408) = v31;
          v31 = v12;
          v13 = *(_QWORD *)(a1 + 432);
          *(_QWORD *)(a1 + 432) = *((_QWORD *)&v32 + 1);
          *((_QWORD *)&v32 + 1) = v13;
          LODWORD(v32) = v32 + 1;
          v10 = v11;
          ++*(_DWORD *)(a1 + 424);
          goto LABEL_13;
        }
LABEL_35:
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
        _os_crash();
        __break(1u);
      }
      v7 = *(_QWORD *)v6;
      if (!*(_QWORD *)v6 || !*(_QWORD *)&v29[0] || v7 == *(_QWORD *)&v29[0])
      {
        *(_QWORD *)(a1 + 360) = *(_QWORD *)&v29[0];
        *(_QWORD *)&v29[0] = v7;
        v8 = *(_OWORD *)(a1 + 368);
        *(_OWORD *)(a1 + 368) = *(_OWORD *)((char *)v29 + 8);
        *(_OWORD *)((char *)v29 + 8) = v8;
        v9 = *(_QWORD *)(a1 + 392);
        *(_QWORD *)(a1 + 392) = v30;
        *(_QWORD *)&v30 = v9;
        ++DWORD2(v29[1]);
        ++*(_DWORD *)(a1 + 384);
        goto LABEL_8;
      }
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 264);
      if (v14)
      {
        v15 = *(uint64_t **)(a1 + 280);
        v16 = 816 * v14;
        do
        {
          *(_QWORD *)&v29[0] = re::DataArray<re::MeshModel>::create<re::MeshModel>(v2 + 8, v15);
          re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((_QWORD *)(a1 + 400), v29);
          v15 += 102;
          v16 -= 816;
        }
        while (v16);
      }
      v17 = *(_QWORD *)(a1 + 64);
      if (!v17)
        goto LABEL_27;
      v18 = *(_QWORD *)(a1 + 80);
      v19 = v18 + 96 * v17;
      while (1)
      {
        re::StringID::StringID((re::StringID *)&v38, (const StringID *)v18);
        v20 = *(unsigned int *)(v18 + 80);
        v21 = *(_QWORD *)(a1 + 416);
        if (v21 <= v20)
          break;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v20);
        v29[0] = v38;
        *(_QWORD *)&v38 = 0;
        *((_QWORD *)&v38 + 1) = &str_110;
        *(_QWORD *)&v29[1] = 0xFFFFFFFFLL;
        BYTE8(v29[1]) = 0;
        HIDWORD(v29[1]) = 1065353216;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        re::DataArray<re::MeshModel>::tryGet(a2 + 8, v22);
        v23 = *(_OWORD *)(v18 + 64);
        v25 = *(_OWORD *)(v18 + 16);
        v24 = *(_OWORD *)(v18 + 32);
        v32 = *(_OWORD *)(v18 + 48);
        v33 = v23;
        v30 = v25;
        v31 = v24;
        *(_QWORD *)&v29[1] = v22;
        *((_QWORD *)&v29[1] + 1) = *(_QWORD *)(v18 + 84);
        re::StringID::destroyString((re::StringID *)&v38);
        *(_QWORD *)&v48[0] = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(a2 + 72, (uint64_t)v29);
        re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((_QWORD *)(a1 + 360), v48);
        re::MeshInstance::~MeshInstance((re::MeshInstance *)v29);
        v18 += 96;
        if (v18 == v19)
          goto LABEL_27;
      }
      v39 = 0;
      memset(v48, 0, sizeof(v48));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v40 = 136315906;
      v41 = "operator[]";
      v42 = 1024;
      v43 = 789;
      v44 = 2048;
      v45 = v20;
      v46 = 2048;
      v47 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503, v27);
    _os_crash();
    __break(1u);
    goto LABEL_35;
  }
LABEL_28:
  *(_QWORD *)(a1 + 440) = v2;
  *(_BYTE *)(a1 + 952) = 1;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  memset(v29, 0, sizeof(v29));
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 8, (uint64_t)v29);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 48, (uint64_t)&v30 + 8);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 88, (uint64_t)&v33);
  re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 128, (uint64_t)&v35 + 8);
  if (*((_QWORD *)&v35 + 1))
  {
    if (*((_QWORD *)&v37 + 1))
      (*(void (**)(void))(**((_QWORD **)&v35 + 1) + 40))();
    *((_QWORD *)&v37 + 1) = 0;
    v36 = 0uLL;
    *((_QWORD *)&v35 + 1) = 0;
    LODWORD(v37) = v37 + 1;
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v33);
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v30 + 8);
  re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v29);
  return 0;
}

_QWORD *re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<float *>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::DataArray<re::MeshModel>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 816 * (unsigned __int16)a2;
}

void re::MeshAssetLoader::~MeshAssetLoader(re::MeshAssetLoader *this, double a2)
{
  *(_QWORD *)this = &off_24ED30A80;
  *((_QWORD *)this + 3) = 0;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 33, a2);
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 216));
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 192));
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 168));
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 144));
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 120));
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 96));
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 72));
  re::AssetHandle::~AssetHandle((re::MeshAssetLoader *)((char *)this + 48));

}

{
  re::MeshAssetLoader::~MeshAssetLoader(this, a2);
  JUMPOUT(0x2276933B8);
}

void re::MeshAssetLoader::makeSharedResourcePayload(re::MeshAssetLoader *this@<X0>, void *a2@<X1>, re::AssetSerializationScheme *a3@<X2>, RESerializedPayload **a4@<X8>)
{
  void *v8;

  v8 = (void *)*((_QWORD *)a2 + 36);
  if (v8 && objc_msgSend(v8, "isShareable"))
    *a4 = (RESerializedPayload *)*((id *)a2 + 36);
  else
    re::AssetLoader::makeSharedResourcePayload(this, (const re::IntrospectionBase **)a2, a3, a4);
}

void re::MeshAssetLoader::resourceDidUpdate(uint64_t a1, re::MeshAsset *a2, id *a3, uint64_t a4)
{
  re *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[8];
  id v12;

  re::MeshPayload::dynamicCast(a3, &v12);
  if (v12)
  {
    re::MeshAsset::replaceContentsWithPayload(a2, &v12, (id *)(a1 + 8), *(re::MeshManager **)(a1 + 16));
    re::MeshAsset::registerRuntimeData((uint64_t)a2, *(_QWORD *)(a1 + 16));
  }
  else
  {
    v9 = *re::assetsLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Using fallback Mesh resourceDidUpdate, invalid MeshPayload found.", buf, 2u);
    }
    v10 = *a3;
    re::AssetLoader::resourceDidUpdate(a1, (uint64_t **)a2, &v10, a4);

  }
}

uint64_t re::MeshAssetLoader::initializeAssetWithSerializedDataFromPayload(uint64_t a1, id *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  re *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v15;
  uint8_t buf[8];
  void *v17;

  re::MeshPayload::dynamicCast(this, &v17);
  v11 = v17;
  if (v17)
  {
    v12 = 1;
  }
  else
  {
    v13 = *re::assetsLogObjects(v10);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Using fallback Mesh resourceDidUpdate, invalid MeshPayload found.", buf, 2u);
    }
    v15 = *this;
    v12 = re::AssetLoader::initializeAssetWithSerializedDataFromPayload(a1, &v15, a3, a4, a5, 0);

    v11 = v17;
  }

  return v12;
}

uint64_t re::MeshAssetLoader::postInitializeAssetFromPayload(uint64_t a1, id *a2, re::MeshAsset *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v11;
  uuid_t dst;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24))
  {
    re::DirectMeshPayload::dynamicCast(a2, &v11);
    if (v11)
    {
      v6 = *(_QWORD *)(a1 + 24);
      v7 = re::DirectMeshPayload::connectionId(&v11);
      uuid_copy(dst, (const unsigned __int8 *)objc_msgSend(v11, "identifier"));
      if (re::DirectResourceAssetTracker::findResource(v6, v7, dst))
      {
        v8 = DRResourceAsMesh();
        if (v8)
          objc_msgSend(v11, "setDirectMesh:", v8);
      }
    }

  }
  re::MeshPayload::dynamicCast(a2, &v11);
  v9 = v11;
  if (v11)
  {
    re::MeshAsset::replaceContentsWithPayload(a3, &v11, (id *)(a1 + 8), *(re::MeshManager **)(a1 + 16));
    v9 = v11;
  }

  return 1;
}

uint64_t re::MeshAssetLoader::checkCredentialsOfNetworkAsset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _WORD *a4@<X8>)
{
  uint64_t result;

  result = re::ServiceLocator::serviceOrNull<re::EntitlementService>(*(_QWORD *)(a1 + 32));
  if (a2)
  {
    if (result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 64))(result, a3);
    *a4 = 257;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::EntitlementService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::EntitlementService>(void)::info = re::introspect_EntitlementService(0);
  }
  v3 = re::introspect<re::EntitlementService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::MeshAssetLoader::replaceAssetContentsWithMeshResourceDefinition(re::MeshAssetLoader *this, re::AssetHandle *a2, const re::MeshResourceDefinition *a3)
{
  uint64_t v4;
  unsigned int v5;
  re::MeshAsset *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    v5 = atomic_load((unsigned int *)(v4 + 704));
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon(a2);
      ++*(_DWORD *)(*((_QWORD *)a2 + 1) + 260);
      v8 = (re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>(a2);
      if (v8)
      {
        v9 = (uint64_t)v8;
        re::MeshAsset::replaceContentsWithMeshResourceDefinition(v8, a3, (Device **)this + 1, *((re::MeshManager **)this + 2), *((_DWORD *)this + 10));
        v10 = *((_QWORD *)a2 + 1);
        if (!v10 || !*(_BYTE *)(v10 + 258))
        {
          re::MeshAsset::registerRuntimeData(v9, *((_QWORD *)this + 2));
          v10 = *((_QWORD *)a2 + 1);
        }
        *(_BYTE *)(v10 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v10);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(*((re::internal::AssetEntry **)a2 + 1));
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible(a2);
}

void re::MeshAssetLoader::replaceAssetContentsWithMeshPayload(uint64_t a1, re::internal::AssetEntry **a2, id *a3)
{
  re::internal::AssetEntry *v4;
  unsigned int v5;
  uint64_t v8;
  re::MeshAsset *v9;
  uint64_t v10;
  const unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  const unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  re::internal::AssetEntry *v21;
  id v22;
  id v23;
  uint64_t v24;
  unsigned __int8 v25[16];
  uint64_t v26;
  unsigned __int8 v27[16];
  uint64_t v28;
  unsigned __int8 v29[16];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  if (v4)
  {
    v5 = atomic_load((unsigned int *)v4 + 176);
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)a2);
      ++*((_DWORD *)a2[1] + 65);
      v8 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)a2);
      if (v8)
      {
        v9 = (re::MeshAsset *)v8;
        if (*(_QWORD *)(a1 + 24))
        {
          re::DirectMeshPayload::dynamicCast((id *)(v8 + 288), &v23);
          re::DirectMeshPayload::dynamicCast(a3, &v22);
          if (v23)
          {
            v10 = re::DirectMeshPayload::connectionId(&v23);
            v11 = (const unsigned __int8 *)objc_msgSend(v23, "identifier");
            v28 = v10;
            uuid_copy(v29, v11);
            v12 = *(_QWORD *)(a1 + 24);
            v26 = v28;
            uuid_copy(v27, v29);
            v13 = re::AssetHandle::assetInfo((re::AssetHandle *)a2);
            if (v13[10] == -1)
              v14 = 0;
            else
              v14 = v13[10];
            re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(v12, (uint64_t)&v26, v14);
          }
          v15 = v22;
          if (v22)
          {
            v16 = re::DirectMeshPayload::connectionId(&v22);
            v17 = (const unsigned __int8 *)objc_msgSend(v22, "identifier");
            v28 = v16;
            uuid_copy(v29, v17);
            v18 = *(_QWORD *)(a1 + 24);
            v24 = v28;
            uuid_copy(v25, v29);
            v19 = re::AssetHandle::assetInfo((re::AssetHandle *)a2);
            if (v19[10] == -1)
              v20 = 0;
            else
              v20 = v19[10];
            re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(v18, (uint64_t)&v24, v20);
            v15 = v22;
          }

        }
        re::MeshAsset::replaceContentsWithPayload(v9, a3, (id *)(a1 + 8), *(re::MeshManager **)(a1 + 16));
        v21 = a2[1];
        if (!v21 || !*((_BYTE *)v21 + 258))
        {
          re::MeshAsset::registerRuntimeData((uint64_t)v9, *(_QWORD *)(a1 + 16));
          v21 = a2[1];
        }
        *((_BYTE *)v21 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v21);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(a2[1]);
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)a2);
}

uint64_t re::MeshAssetLoader::findDependencies@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return re::DynamicArray<re::AssetHandle>::DynamicArray(a2, a1 + 26);
}

_QWORD *re::MeshAssetLoader::internalFindAssetHandleFields@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v4 = a1[28];
  if (v4)
  {
    v5 = a1[30];
    v6 = 24 * v4;
    do
    {
      v8 = v5;
      result = re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a2, &v8);
      v5 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return result;
}

void re::MeshAssetLoader::init(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id *v8;
  id *v9;
  int v10;
  id *v11;

  v8 = (id *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  v9 = v8;
  if (v8)
    v8 = (id *)v8[23];
  v11 = v8;
  re::ObjCObject::operator=((id *)(a1 + 8), (id *)&v11);

  if (!v9)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = a3;
    *(_QWORD *)(a1 + 32) = a2;
    if ((a4 & 1) != 0)
      goto LABEL_8;
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 16) = v9[4];
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  if (!a4)
    goto LABEL_9;
  if ((objc_msgSend(*(id *)(a1 + 8), "supportsBufferWithIOSurface") & 1) == 0)
  {
LABEL_8:
    v10 = 1;
    goto LABEL_10;
  }
  v10 = 2;
LABEL_10:
  *(_DWORD *)(a1 + 40) = v10;
}

re *re::MeshAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

uint64_t re::MeshAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  re *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  BOOL v18;
  _anonymous_namespace_ *v19;
  id *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::_anonymous_namespace_::MeshAssetDataAccessor *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t i;
  re *v36;
  re::_anonymous_namespace_::MeshAssetAccessor *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _anonymous_namespace_ *v43;
  _anonymous_namespace_ *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 v50;
  id **v51;
  id *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  _QWORD *v59;
  uint64_t j;
  uint64_t k;
  void *v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  const char *v66;
  char v67;
  int v68;
  re *v69;
  unint64_t v70;
  uint64_t v71;
  _BYTE v72[12];
  __int16 v73;
  int v74;
  __int16 v75;
  id *v76;
  __int16 v77;
  id *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v2 = (re *)(a1 + 8);
  v4 = *((_DWORD *)v2 + 8);
  *(_BYTE *)(a2 + 952) = 0;
  if (!v3)
    return 1;
  v5 = a2;
  if (*(_QWORD *)(a2 + 376) || *(_QWORD *)(a2 + 64) == 0)
    return 1;
  v68 = v4;
  v69 = v2;
  v70 = *(_QWORD *)(a2 + 64);
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    v7 = *(_QWORD *)(v5 + 24);
    if (v7)
    {
      v8 = *(_QWORD *)(v5 + 40);
      v71 = v8 + (v7 << 9);
      do
      {
        re::DynamicArray<re::MeshAssetBlendShapeData>::clear(v8 + 112);
        v9 = *(_QWORD *)(v8 + 208);
        if (v9)
        {
          v10 = *(_QWORD *)(v8 + 224);
          v11 = v10 + (v9 << 8);
          do
          {
            v12 = *(_QWORD *)(v10 + 16);
            if (v12)
            {
              v13 = 0;
              v14 = 80 * v12;
              v15 = (_QWORD *)(*(_QWORD *)(v10 + 32) + 16);
              while (1)
              {
                v16 = (*(v15 - 1) & 1) != 0 ? (const char *)*v15 : (char *)v15 - 7;
                if (!strcmp(v16, "vertexUV1"))
                  break;
                v17 = (_anonymous_namespace_ *)strcmp(v16, "vertexUV");
                v13 |= (_DWORD)v17 == 0;
                v15 += 10;
                v14 -= 80;
                if (!v14)
                {
                  if ((v13 & 1) != 0)
                  {
                    v18 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v10 + 200, (uint64_t)&v79);
                    v19 = (_anonymous_namespace_ *)v79;
                    if ((_QWORD)v79 && (BYTE8(v79) & 1) != 0)
                      v19 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v79 + 40))();
                    if (!v18)
                    {
                      *(_QWORD *)v72 = "vertexUV";
                      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<char const*>(v10 + 200, (re::DynamicString *)&v79, (const char **)v72);
                      if ((_QWORD)v79)
                      {
                        if ((BYTE8(v79) & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v79 + 40))();
                      }
                    }
                  }
                  break;
                }
              }
            }
            v10 += 256;
          }
          while (v10 != v11);
        }
        v8 += 512;
      }
      while (v8 != v71);
    }
  }
  v20 = (id *)v69;
  if (!*(_QWORD *)(v5 + 936))
  {
    v21 = v5 + 88;
    if (!*(_QWORD *)(v5 + 104))
    {
      v22 = *(_QWORD *)(v5 + 24);
      if (v22)
      {
        v23 = *(_QWORD *)(v5 + 40) + 232;
        while (!*(_QWORD *)(v23 + 16))
        {
          v23 += 512;
          if (!--v22)
            goto LABEL_36;
        }
        v21 = v23;
      }
    }
LABEL_36:
    v24 = *(_QWORD *)(v21 + 32);
    v25 = *(_QWORD *)(v21 + 16);
    *(_QWORD *)&v79 = v24;
    *((_QWORD *)&v79 + 1) = v25;
    re::MeshAsset::setSkeletons((_QWORD *)v5, &v79);
  }
  v26 = (re::_anonymous_namespace_::MeshAssetDataAccessor *)(v5 + 8);
  v27 = atomic_load((unsigned __int8 *)&qword_2540FD648);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD648))
  {
    re::Defaults::BOOLValue((re::Defaults *)"EnableMeshPayload", v66, (char *)&v79);
    if ((_BYTE)v79)
      v67 = BYTE1(v79);
    else
      v67 = 1;
    _MergedGlobals_65 = v67;
    __cxa_guard_release(&qword_2540FD648);
  }
  v28 = *(_QWORD *)(v5 + 24);
  if (v28)
  {
    v29 = v28 << 9;
    v30 = (_QWORD *)(*(_QWORD *)(v5 + 40) + 488);
    while (!*(v30 - 20) && !*(v30 - 15) && !*(v30 - 10) && !*(v30 - 5) && !*v30)
    {
      v30 += 64;
      v29 -= 512;
      if (!v29)
        goto LABEL_46;
    }
LABEL_51:
    re::createMeshCollectionFromMeshAsset(v69, (const re::mtl::Device *)(v5 + 8), (uint64_t)&v79);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v5 + 248, (uint64_t)&v79);
    re::DynamicArray<re::MeshModel>::deinit((uint64_t)&v79);
    goto LABEL_52;
  }
LABEL_46:
  if (!_MergedGlobals_65)
    goto LABEL_51;
  v31 = (id *)(v5 + 288);
  if (*(_QWORD *)(v5 + 288))
    goto LABEL_83;
  *(_DWORD *)v72 = v68;
  v72[4] = *(_BYTE *)(v5 + 920);
  v32 = operator new(0x20uLL);
  *v32 = &off_24ED30C78;
  v32[1] = v5;
  v32[2] = v69;
  v32[3] = v72;
  *((_QWORD *)&v80 + 1) = v32;
  re::runInLocalAutoreleasePool((uint64_t)&v79);
  v34 = (__int128 *)*((_QWORD *)&v80 + 1);
  if (*((__int128 **)&v80 + 1) == &v79)
    goto LABEL_80;
  if (!*((_QWORD *)&v80 + 1))
    goto LABEL_82;
  for (i = 5; ; i = 4)
  {
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v34 + 8 * i))(v34, v33);
LABEL_82:
    if (!*v31)
      break;
LABEL_83:
    if (!*(_QWORD *)(v5 + 296))
    {
      v59 = (_QWORD *)(v5 + 296);
      re::MeshPayload::makeMeshPayloadBuffers(v31, v20, &v79);
      if ((__int128 *)(v5 + 296) != &v79)
      {
        for (j = 0; j != 8; ++j)
          NS::SharedPtr<MTL::Texture>::operator=((void **)&v59[j], (void **)((char *)&v79 + j * 8));
      }
      for (k = 56; k != -8; k -= 8)
      {
        v62 = *(void **)((char *)&v79 + k);
        if (v62)
        {

          *(_QWORD *)((char *)&v79 + k) = 0;
        }
      }
      if (!*v59)
        return 0;
    }
    *(_QWORD *)&v79 = &off_24ED30CF8;
    *((_QWORD *)&v79 + 1) = v5;
    *((_QWORD *)&v80 + 1) = &v79;
    re::runInLocalAutoreleasePool((uint64_t)&v79);
    v64 = (__int128 *)*((_QWORD *)&v80 + 1);
    if (*((__int128 **)&v80 + 1) == &v79)
    {
      v65 = 4;
      v64 = &v79;
    }
    else
    {
      if (!*((_QWORD *)&v80 + 1))
        goto LABEL_52;
      v65 = 5;
    }
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v64 + 8 * v65))(v64, v63);
LABEL_52:
    v36 = (re *)re::MeshNameMap::deinit((re::MeshNameMap *)(v5 + 448));
    v37 = *(re::_anonymous_namespace_::MeshAssetAccessor **)(v5 + 80);
    v38 = *(_QWORD *)(v5 + 64);
    v39 = re::globalAllocators(v36);
    re::MeshNameMap::init(v5 + 448, v26, v37, v38, v39[2]);
    v40 = *(_QWORD *)(v5 + 784);
    if (v40)
      v41 = *(unsigned int *)(*(_QWORD *)(v5 + 792) + 4 * v40 - 4);
    else
      v41 = 0;
    v42 = *(_QWORD *)(v5 + 872);
    if (v42)
    {
      if (*(_QWORD *)(v5 + 880))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(v5 + 888));
        *(_QWORD *)(v5 + 880) = 0;
        *(_QWORD *)(v5 + 888) = 0;
      }
      *(_QWORD *)(v5 + 872) = 0;
    }
    v20 = (id *)(v5 + 896);
    v43 = *(_anonymous_namespace_ **)(v5 + 896);
    if (v43)
    {
      if (*(_QWORD *)(v5 + 904))
      {
        v43 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v43 + 40))(v43, *(_QWORD *)(v5 + 912));
        *(_QWORD *)(v5 + 904) = 0;
        *(_QWORD *)(v5 + 912) = 0;
      }
      *v20 = 0;
    }
    v45 = 0;
    v46 = 0;
LABEL_64:
    v47 = *(_QWORD *)(v5 + 64);
    if (v47 <= v45)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v72 = 136315906;
      *(_QWORD *)&v72[4] = "operator[]";
      v73 = 1024;
      v74 = 789;
      v75 = 2048;
      v76 = (id *)v45;
      v77 = 2048;
      v78 = (id *)v47;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_99:
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v72 = 136315906;
      *(_QWORD *)&v72[4] = "operator[]";
      v73 = 1024;
      v74 = 789;
      v75 = 2048;
      v76 = (id *)v47;
      v77 = 2048;
      v78 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_100:
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v72 = 136315906;
      *(_QWORD *)&v72[4] = "operator[]";
      v73 = 1024;
      v74 = 468;
      v75 = 2048;
      v76 = (id *)v45;
      v77 = 2048;
      v78 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v47 = *(unsigned int *)(*(_QWORD *)(v5 + 80) + 96 * v45 + 80);
    v20 = *(id **)(v5 + 24);
    if ((unint64_t)v20 <= v47)
      goto LABEL_99;
    v20 = *(id **)(v5 + 880);
    if ((unint64_t)v20 <= v45)
      goto LABEL_100;
    v48 = *(_QWORD *)(v5 + 40) + (v47 << 9);
    v49 = (_OWORD *)(*(_QWORD *)(v5 + 888) + 32 * v45);
    v50 = *(_OWORD *)(v48 + 32);
    *v49 = *(_OWORD *)(v48 + 16);
    v49[1] = v50;
    v51 = (id **)(v48 + 208);
    v52 = *(id **)(v48 + 208);
    if (!v52)
      goto LABEL_73;
    v53 = 0;
    v31 = 0;
    v54 = (_QWORD *)(v48 + 224);
    while (1)
    {
      v20 = *v51;
      if (*v51 <= v31)
        break;
      v20 = *(id **)(v5 + 904);
      if (v20 <= (id *)((char *)v31 + v46))
        goto LABEL_79;
      v55 = *v54 + 8 * v53;
      v56 = (_OWORD *)(*(_QWORD *)(v5 + 912) + 32 * v46 + v53);
      v57 = *(_OWORD *)(v55 + 112);
      *v56 = *(_OWORD *)(v55 + 96);
      v56[1] = v57;
      v31 = (id *)((char *)v31 + 1);
      v53 += 32;
      if (v52 == v31)
      {
        v46 += (uint64_t)v31;
LABEL_73:
        if (++v45 == v70)
        {
          if (!*(_QWORD *)(v5 + 144))
            re::MeshAssetData::generateMetaData(v26);
          re::DynamicArray<float>::operator=(v5 + 168, (uint64_t *)(v5 + 128));
          return 1;
        }
        goto LABEL_64;
      }
    }
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v79 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v72 = 136315906;
    *(_QWORD *)&v72[4] = "operator[]";
    v73 = 1024;
    v74 = 797;
    v75 = 2048;
    v76 = v31;
    v77 = 2048;
    v78 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v79 = 0u;
    v5 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v72 = 136315906;
    *(_QWORD *)&v72[4] = "operator[]";
    v73 = 1024;
    v74 = 468;
    v75 = 2048;
    v76 = (id *)((char *)v31 + v46);
    v77 = 2048;
    v78 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    v34 = &v79;
  }
  return 0;
}

uint64_t re::MeshAssetLoader::assetByteSize(re::MeshAssetLoader *this, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  re::AttributeTable *v14;
  re::AttributeTable *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;

  v4 = (*(uint64_t (**)(re::MeshAssetLoader *))(*(_QWORD *)this + 40))(this);
  v5 = (void *)a2[36];
  if (v5)
  {
    v4 += objc_msgSend(v5, "totalPayloadSize");
  }
  else if (re::ServiceLocator::serviceOrNull<re::RenderManager>(*((_QWORD *)this + 4)))
  {
    v7 = re::ServiceLocator::service<re::RenderManager>(*((_QWORD *)this + 4));
    v8 = a2[52];
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 32) + 8;
      v10 = (_QWORD *)a2[54];
      v11 = &v10[v8];
      do
      {
        v12 = re::DataArray<re::MeshModel>::get(v9, *v10);
        v13 = *(_QWORD *)(v12 + 56);
        if (v13)
        {
          v14 = *(re::AttributeTable **)(v12 + 64);
          v15 = (re::AttributeTable *)((char *)v14 + 560 * v13);
          do
          {
            v16 = re::AttributeTable::buffers(v14);
            if (v17)
            {
              v18 = 16 * v17;
              v19 = (unsigned int *)(v16 + 12);
              do
              {
                v20 = *v19;
                v19 += 4;
                v4 += v20;
                v18 -= 16;
              }
              while (v18);
            }
            v14 = (re::AttributeTable *)((char *)v14 + 560);
          }
          while (v14 != v15);
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  return v4;
}

uint64_t re::MeshAssetLoader::prepareAssetForSerialization(re::MeshAssetLoader *this, const re::MeshAsset *a2)
{
  _BYTE v4[40];
  _BYTE v5[40];
  _BYTE v6[40];
  _QWORD v7[3];
  int v8;
  uint64_t v9;

  if (!*((_BYTE *)a2 + 952))
    return 0;
  re::MeshAsset::makeMeshAssetDataFromRegisteredMeshAsset((re::MeshAsset *)v4, a2);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 8, (uint64_t)v4);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 48, (uint64_t)v5);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 88, (uint64_t)v6);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a2 + 128, (uint64_t)v7);
  if (v7[0])
  {
    if (v9)
      (*(void (**)(void))(*(_QWORD *)v7[0] + 40))();
    v9 = 0;
    memset(v7, 0, sizeof(v7));
    ++v8;
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v6);
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)v5);
  re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v4);
  return 2;
}

uint64_t re::MeshAsset::makeMeshAssetDataFromRegisteredMeshAsset(re::MeshAsset *this, const re::MeshAsset *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _anonymous_namespace_ *v7;
  signed int v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  id *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _anonymous_namespace_ *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  int32x4_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96[2];
  unint64_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  uint64_t v102[4];
  int v103;
  __int128 v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  id v111[2];
  _OWORD v112[5];
  _OWORD v113[2];
  int v114;
  _OWORD v115[2];
  int v116;
  uint64_t v117;
  _OWORD v118[2];
  __int128 v119;
  __int128 v120;
  _BYTE v121[48];
  __int128 v122;
  __int128 v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[28];
  __int16 v136;
  _BYTE v137[10];
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a2 + 952))
  {
    re::DynamicArray<re::MeshAssetModel>::DynamicArray((uint64_t)this, (uint64_t *)a2 + 1);
    re::DynamicArray<re::MeshAssetInstance>::DynamicArray((uint64_t)this + 40, (uint64_t *)a2 + 6);
    re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray((uint64_t)this + 80, (uint64_t *)a2 + 11);
    return re::DynamicArray<float>::DynamicArray((uint64_t)this + 120, (uint64_t *)a2 + 16);
  }
  v4 = v96;
  v96[0] = 0;
  v96[1] = 0;
  v98 = 0;
  v97 = 0;
  v107 = 0;
  v99 = 0u;
  v100 = 0u;
  v101 = 0;
  memset(v102, 0, sizeof(v102));
  v103 = 0;
  v104 = 0u;
  v105 = 0u;
  v106 = 0;
  v5 = *((_QWORD *)a2 + 52);
  v6 = *((unsigned int *)a2 + 94);
  v90 = *((_QWORD *)a2 + 55);
  v91 = v5;
  re::DynamicArray<re::MeshAssetModel>::resize((uint64_t)v96, v5);
  v88 = v6;
  re::DynamicArray<re::MeshAssetInstance>::resize((uint64_t)&v99 + 8, v6);
  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  v95 = 0x7FFFFFFFLL;
  if ((_DWORD)v5)
    v8 = 2 * v5;
  else
    v8 = 1;
  v10 = *((_QWORD *)a2 + 55);
  if (!v10)
  {
    v20 = "No Mesh Manager on MeshAsset";
LABEL_28:
    LOBYTE(v112[0]) = 0;
    *((_QWORD *)&v112[0] + 1) = 100;
    *(_QWORD *)&v112[1] = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)((char *)&v112[1] + 8) = v118[0];
    *(_OWORD *)((char *)&v112[2] + 8) = v118[1];
    goto LABEL_29;
  }
  v11 = *((_QWORD *)a2 + 117);
  v12 = *((_QWORD *)a2 + 52);
  if (v12)
  {
    v13 = v10 + 8;
    v14 = (_QWORD *)*((_QWORD *)a2 + 54);
    v15 = 8 * v12;
    while (1)
    {
      v9 = (_anonymous_namespace_ *)re::DataArray<re::MeshModel>::get(v13, *v14);
      v16 = *((_QWORD *)v9 + 22);
      if (v16)
      {
        if (*(_QWORD *)(v16 + 8))
          break;
      }
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_11;
    }
    v21 = v16 + 32;
    v17 = *(_QWORD *)(v16 + 32);
    v18 = *(_QWORD *)(v21 + 8);
  }
  else
  {
LABEL_11:
    v17 = 0;
    v18 = 0;
  }
  if (v17 != v11)
  {
    v20 = "Inverse bind transforms array doesn't match skeleton count";
    goto LABEL_28;
  }
  *(_QWORD *)&v137[2] = 0;
  memset(v135, 0, sizeof(v135));
  re::DynamicArray<re::MeshAssetSkeleton>::resize((uint64_t)v135, v11);
  if (!v11)
  {
LABEL_26:
    v33 = *(_QWORD *)v135;
    memset(v135, 0, 24);
    v34 = *(_QWORD *)&v137[2];
    *(_QWORD *)&v137[2] = 0;
    ++*(_DWORD *)&v135[24];
    LOBYTE(v112[0]) = 1;
    *((_QWORD *)&v112[0] + 1) = v33;
    memset(v118, 0, 24);
    v112[1] = *(_OWORD *)&v135[8];
    *((_QWORD *)&v112[2] + 1) = v34;
    *(_QWORD *)&v119 = 0;
    DWORD2(v118[1]) = 2;
    LODWORD(v112[2]) = 1;
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v118);
    goto LABEL_36;
  }
  v22 = 0;
  v23 = 0;
  v24 = (id *)(v18 + 8);
  while (1)
  {
    v25 = *(_QWORD *)&v135[16];
    if (*(_QWORD *)&v135[16] <= (unint64_t)v23)
      goto LABEL_86;
    v26 = *(_QWORD *)&v137[2];
    v27 = *(_QWORD *)&v137[2] + v22;
    v28 = (uint64_t *)re::MeshAsset::skeletonAtIndex(a2, (unint64_t)v23);
    re::StringID::operator=((unint64_t *)(v26 + v22), v28);
    v29 = v28[3];
    *(_QWORD *)&v118[0] = v28[4];
    *((_QWORD *)&v118[0] + 1) = v29;
    re::FixedArray<re::StringID>::operator=((_anonymous_namespace_ *)(v27 + 16), (uint64_t)v118);
    v30 = v28[6];
    *(_QWORD *)&v118[0] = v28[7];
    *((_QWORD *)&v118[0] + 1) = v30;
    re::FixedArray<int>::operator=((_anonymous_namespace_ *)(v27 + 40), (uint64_t)v118);
    v31 = v28[9];
    *(_QWORD *)&v118[0] = v28[10];
    *((_QWORD *)&v118[0] + 1) = v31;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v27 + 64), (uint64_t)v118);
    v111[0] = *(v24 - 1);
    v111[1] = *v24;
    if (v111[0])
      break;
LABEL_25:
    v23 = (__int128 *)((char *)v23 + 1);
    v22 += 112;
    v24 += 2;
    if ((__int128 *)v11 == v23)
      goto LABEL_26;
  }
  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v111, (uint64_t)v118);
  if (!LOBYTE(v118[0]))
  {
    v35 = "Could not access inverset bind pose data";
    goto LABEL_34;
  }
  if (*(_QWORD *)&v118[1] < 0x40uLL || *(_QWORD *)(v26 + v22 + 48) == *(_QWORD *)&v118[1] >> 6)
  {
    *(_QWORD *)&v112[0] = *((_QWORD *)&v118[0] + 1);
    *((_QWORD *)&v112[0] + 1) = *(_QWORD *)&v118[1] >> 6;
    re::FixedArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(v26 + v22 + 88), (uint64_t)v112);
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v118);
    if (v111[0])

    goto LABEL_25;
  }
  v35 = "Inverse bind pose count does not match joint count";
LABEL_34:
  LOBYTE(v112[0]) = 0;
  *((_QWORD *)&v112[0] + 1) = 100;
  *(_QWORD *)&v112[1] = &re::AssetErrorCategory(void)::instance;
  *(_OWORD *)((char *)&v112[1] + 8) = v108;
  *((_QWORD *)&v112[2] + 1) = v109;
  *(_QWORD *)&v112[3] = v110;
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v118);
  if (v111[0])

LABEL_36:
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v135);
  if (LOBYTE(v112[0]))
  {
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v102[1], (uint64_t)v112 + 8);
    if (LOBYTE(v112[0]))
    {
      re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v112 + 8);
      goto LABEL_39;
    }
  }
LABEL_29:
  if (*((_QWORD *)&v112[1] + 1) && (v112[2] & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v112[1] + 1) + 40))();
LABEL_39:
  re::DirectMeshPayload::dynamicCast((id *)a2 + 36, v118);
  v4 = *(uint64_t **)&v118[0];

  if ((_DWORD)v5)
  {
    v36 = 0;
    v23 = &v119;
    v25 = 0x7FFFFFFFLL;
    while (1)
    {
      v37 = *((_QWORD *)a2 + 52);
      if (v37 <= v36)
        break;
      v38 = (int32x4_t *)re::DataArray<re::MeshModel>::get(v90 + 8, *(_QWORD *)(*((_QWORD *)a2 + 54) + 8 * v36));
      if (!LOBYTE(v118[0]))
      {
        v82 = v119;
        v119 = 0uLL;
        v83 = v120;
        v120 = 0uLL;
        LOBYTE(v112[0]) = 0;
        *(_OWORD *)((char *)v112 + 8) = v118[1];
        *(_OWORD *)((char *)&v112[1] + 8) = v82;
        *(_OWORD *)((char *)&v112[2] + 8) = v83;
        re::Result<re::MeshAssetModel,re::DetailedError>::~Result((uint64_t)v118);
        goto LABEL_75;
      }
      v37 = v97;
      if (v97 <= v36)
        goto LABEL_84;
      v39 = v99 + (v36 << 9);
      v40 = v118[1];
      *((_QWORD *)&v118[1] + 1) = &str_110;
      *(_QWORD *)&v118[1] = 0;
      v41 = *(_QWORD *)(v39 + 8);
      v42 = v40 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v39 & 1;
      *(_QWORD *)(v39 + 8) = *((_QWORD *)&v40 + 1);
      *(_QWORD *)&v112[0] = v42;
      *((_QWORD *)&v112[0] + 1) = v41;
      *(_QWORD *)v39 = v40;
      re::StringID::destroyString((re::StringID *)v112);
      v43 = v120;
      *(_OWORD *)(v39 + 16) = v119;
      *(_OWORD *)(v39 + 32) = v43;
      v44 = *(_OWORD *)v121;
      v45 = *(_OWORD *)&v121[16];
      v46 = v122;
      *(_OWORD *)(v39 + 80) = *(_OWORD *)&v121[32];
      *(_OWORD *)(v39 + 96) = v46;
      *(_OWORD *)(v39 + 48) = v44;
      *(_OWORD *)(v39 + 64) = v45;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 112, (uint64_t)&v123);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 152, (uint64_t)&v126);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 192, (uint64_t)&v127);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 232, (uint64_t)&v128);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 272, (uint64_t)&v129);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 312, (uint64_t)&v130);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 352, (uint64_t)&v131);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 392, (uint64_t)&v132);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 432, (uint64_t)&v133);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v39 + 472, (uint64_t)&v134);
      v37 = *((_QWORD *)a2 + 52);
      if (v37 <= v36)
        goto LABEL_85;
      v47 = *((_QWORD *)a2 + 54);
      v48 = *(_QWORD *)(v47 + 8 * v36);
      v49 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v48 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v48 & 0xFFFFFF)) >> 27));
      v50 = v49 ^ (v49 >> 31);
      v51 = v92;
      if (!(_QWORD)v92
        || (v51 = v50 % DWORD2(v93), v52 = *(unsigned int *)(*((_QWORD *)&v92 + 1) + 4 * v51), (_DWORD)v52 == 0x7FFFFFFF))
      {
LABEL_51:
        v56 = v95;
        if ((_DWORD)v95 == 0x7FFFFFFF)
        {
          v56 = v94;
          v57 = v94;
          if (v94 == DWORD2(v93))
          {
            re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::setCapacity((uint64_t)&v92, 2 * HIDWORD(v93));
            v57 = v94;
            v51 = v50 % DWORD2(v93);
          }
          v94 = v57 + 1;
          v58 = v93;
          v59 = *(_DWORD *)(v93 + 32 * v56 + 8);
        }
        else
        {
          v58 = v93;
          v59 = *(_DWORD *)(v93 + 32 * v95 + 8);
          LODWORD(v95) = v59 & 0x7FFFFFFF;
        }
        v60 = v58 + 32 * v56;
        *(_DWORD *)(v60 + 8) = v59 | 0x80000000;
        v61 = *((_QWORD *)&v92 + 1);
        *(_DWORD *)(v60 + 8) = *(_DWORD *)(*((_QWORD *)&v92 + 1) + 4 * v51) | 0x80000000;
        *(_QWORD *)v60 = v50;
        *(_QWORD *)(v60 + 16) = *(_QWORD *)(v47 + 8 * v36);
        *(_DWORD *)(v60 + 24) = v36;
        *(_DWORD *)(v61 + 4 * v51) = v56;
        ++HIDWORD(v93);
        ++HIDWORD(v95);
      }
      else
      {
        while (1)
        {
          v53 = v93 + 32 * v52;
          v55 = *(unsigned __int16 *)(v53 + 16);
          v54 = v53 + 16;
          if (v55 == (unsigned __int16)v48
            && *(unsigned __int16 *)(v54 + 2) == WORD1(v48)
            && ((*(_DWORD *)(v93 + 32 * v52 + 20) ^ HIDWORD(v48)) & 0xFFFFFF) == 0)
          {
            break;
          }
          v52 = *(_DWORD *)(v93 + 32 * v52 + 8) & 0x7FFFFFFF;
          if (v52 == 0x7FFFFFFF)
            goto LABEL_51;
        }
      }
      re::Result<re::MeshAssetModel,re::DetailedError>::~Result((uint64_t)v118);
      if (++v36 == v91)
        goto LABEL_58;
    }
    *(_QWORD *)v135 = 0;
    v120 = 0u;
    *(_OWORD *)v121 = 0u;
    v119 = 0u;
    memset(v118, 0, sizeof(v118));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v112[0]) = 136315906;
    *(_QWORD *)((char *)v112 + 4) = "operator[]";
    WORD6(v112[0]) = 1024;
    *(_DWORD *)((char *)v112 + 14) = 797;
    WORD1(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 4) = v36;
    WORD6(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 14) = v37;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    *(_QWORD *)&v108 = 0;
    memset(v112, 0, sizeof(v112));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v135 = 136315906;
    *(_QWORD *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(_QWORD *)&v135[20] = v36;
    v136 = 2048;
    *(_QWORD *)v137 = v37;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    *(_QWORD *)&v108 = 0;
    memset(v112, 0, sizeof(v112));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v135 = 136315906;
    *(_QWORD *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 797;
    *(_WORD *)&v135[18] = 2048;
    *(_QWORD *)&v135[20] = v36;
    v136 = 2048;
    *(_QWORD *)v137 = v37;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    *(_QWORD *)&v108 = 0;
    v120 = 0u;
    *(_OWORD *)v121 = 0u;
    v119 = 0u;
    memset(v118, 0, sizeof(v118));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v112[0]) = 136315906;
    *(uint64_t *)((char *)v4 + 212) = (uint64_t)"operator[]";
    WORD6(v112[0]) = 1024;
    *(_DWORD *)((char *)v4 + 222) = 789;
    WORD1(v112[1]) = 2048;
    *(uint64_t *)((char *)v4 + 228) = (uint64_t)v23;
    WORD6(v112[1]) = 2048;
    *(uint64_t *)((char *)v4 + 238) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    *(_QWORD *)v135 = 0;
    v120 = 0u;
    *(_OWORD *)v121 = 0u;
    v119 = 0u;
    memset(v118, 0, sizeof(v118));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v112[0]) = 136315906;
    *(_QWORD *)((char *)v112 + 4) = "operator[]";
    WORD6(v112[0]) = 1024;
    *(_DWORD *)((char *)v112 + 14) = 797;
    WORD1(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 4) = v25;
    WORD6(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 14) = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    *(_QWORD *)v135 = 0;
    v120 = 0u;
    *(_OWORD *)v121 = 0u;
    v119 = 0u;
    memset(v118, 0, sizeof(v118));
    v85 = v74;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v112[0]) = 136315906;
    *(_QWORD *)((char *)v112 + 4) = "operator[]";
    WORD6(v112[0]) = 1024;
    *(_DWORD *)((char *)v112 + 14) = 789;
    WORD1(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 4) = v25;
    WORD6(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 14) = v85;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    *(_QWORD *)v135 = 0;
    v120 = 0u;
    *(_OWORD *)v121 = 0u;
    v119 = 0u;
    memset(v118, 0, sizeof(v118));
    v86 = v75;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v112[0]) = 136315906;
    *(_QWORD *)((char *)v112 + 4) = "operator[]";
    WORD6(v112[0]) = 1024;
    *(_DWORD *)((char *)v112 + 14) = 789;
    WORD1(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 4) = v25;
    WORD6(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 14) = v86;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_90:
    *(_QWORD *)v135 = 0;
    v120 = 0u;
    *(_OWORD *)v121 = 0u;
    v119 = 0u;
    memset(v118, 0, sizeof(v118));
    v87 = v80;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v112[0]) = 136315906;
    *(_QWORD *)((char *)v112 + 4) = "operator[]";
    WORD6(v112[0]) = 1024;
    *(_DWORD *)((char *)v112 + 14) = 789;
    WORD1(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 4) = v25;
    WORD6(v112[1]) = 2048;
    *(_QWORD *)((char *)&v112[1] + 14) = v87;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_58:
  if (v88)
  {
    v25 = 0;
    v62 = DWORD2(v93);
    v63 = v92;
    v64 = v93;
    while (1)
    {
      v23 = (__int128 *)*((_QWORD *)a2 + 47);
      if ((unint64_t)v23 <= v25)
        goto LABEL_87;
      v65 = (uint64_t *)re::DataArray<re::MeshInstance>::get(v90 + 72, *(_QWORD *)(*((_QWORD *)a2 + 49) + 8 * v25));
      if (!(_QWORD)v63)
        break;
      v66 = v65;
      v67 = v65[2];
      v68 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v67 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v67 & 0xFFFFFF)) >> 27));
      v69 = *(unsigned int *)(*((_QWORD *)&v63 + 1) + 4 * ((v68 ^ (v68 >> 31)) % v62));
      if ((_DWORD)v69 == 0x7FFFFFFF)
        break;
      while (1)
      {
        v70 = v64 + 32 * v69;
        v72 = *(unsigned __int16 *)(v70 + 16);
        v71 = v70 + 16;
        if (v72 == (unsigned __int16)v67 && *(unsigned __int16 *)(v71 + 2) == WORD1(v67))
        {
          v73 = v64 + 32 * v69;
          if (((*(_DWORD *)(v73 + 20) ^ HIDWORD(v67)) & 0xFFFFFF) == 0)
            break;
        }
        v69 = *(_DWORD *)(v64 + 32 * v69 + 8) & 0x7FFFFFFF;
        if (v69 == 0x7FFFFFFF)
          goto LABEL_73;
      }
      v74 = *((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1) <= v25)
        goto LABEL_88;
      re::StringID::operator=((unint64_t *)(v102[0] + 96 * v25), v65);
      v75 = *((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1) <= v25)
        goto LABEL_89;
      v76 = (_OWORD *)(v102[0] + 96 * v25);
      v77 = *((_OWORD *)v66 + 2);
      v78 = *((_OWORD *)v66 + 3);
      v79 = *((_OWORD *)v66 + 5);
      v76[3] = *((_OWORD *)v66 + 4);
      v76[4] = v79;
      v76[1] = v77;
      v76[2] = v78;
      v80 = *((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1) <= v25)
        goto LABEL_90;
      v81 = v102[0] + 96 * v25;
      *(_DWORD *)(v81 + 80) = *(_DWORD *)(v73 + 24);
      *(_QWORD *)(v81 + 84) = v66[3];
      if (++v25 == v88)
        goto LABEL_72;
    }
LABEL_73:
    LOBYTE(v112[0]) = 0;
    *((_QWORD *)&v112[0] + 1) = 100;
    *(_QWORD *)&v112[1] = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)((char *)&v112[1] + 8) = v118[0];
    *(_OWORD *)((char *)&v112[2] + 8) = v118[1];
  }
  else
  {
LABEL_72:
    re::MeshAssetData::generateMetaData((re::MeshAssetData *)v96);
    re::DynamicArray<re::MeshAssetModel>::DynamicArray((uint64_t)v118, v96);
    re::DynamicArray<re::MeshAssetInstance>::DynamicArray((uint64_t)&v119 + 8, (uint64_t *)&v99 + 1);
    re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray((uint64_t)&v121[16], &v102[1]);
    re::DynamicArray<float>::DynamicArray((uint64_t)&v122 + 8, (uint64_t *)&v104 + 1);
    LOBYTE(v112[0]) = 1;
    *((_QWORD *)&v112[0] + 1) = *(_QWORD *)&v118[0];
    memset(v118, 0, 24);
    v112[1] = *(_OWORD *)((char *)v118 + 8);
    *(_OWORD *)((char *)&v112[2] + 8) = v119;
    *(_OWORD *)((char *)&v112[3] + 8) = v120;
    v113[0] = *(_OWORD *)&v121[8];
    v113[1] = *(_OWORD *)&v121[24];
    v115[0] = v122;
    ++DWORD2(v118[1]);
    v119 = 0u;
    v120 = 0u;
    LODWORD(v112[2]) = 1;
    DWORD2(v112[4]) = 1;
    memset(&v121[8], 0, 32);
    ++*(_DWORD *)v121;
    ++*(_DWORD *)&v121[40];
    v115[1] = v123;
    v122 = 0u;
    v123 = 0u;
    v117 = v125;
    v125 = 0;
    ++v124;
    v114 = 1;
    v116 = 1;
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v121[16]);
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v119 + 8);
    re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v118);
  }
LABEL_75:
  v84 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v92);
  if (*((_QWORD *)&v104 + 1))
  {
    if (v107)
      (*(void (**)(double))(**((_QWORD **)&v104 + 1) + 40))(v84);
    v107 = 0;
    v105 = 0uLL;
    *((_QWORD *)&v104 + 1) = 0;
    ++v106;
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v102[1]);
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v99 + 8);
  re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v96);
  if (LOBYTE(v112[0]))
  {
    re::DynamicArray<re::MeshAssetModel>::DynamicArray((uint64_t)this, (uint64_t *)v112 + 1);
    re::DynamicArray<re::MeshAssetInstance>::DynamicArray((uint64_t)this + 40, (uint64_t *)&v112[3]);
    re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray((uint64_t)this + 80, (uint64_t *)v113 + 1);
    re::DynamicArray<float>::DynamicArray((uint64_t)this + 120, (uint64_t *)v115 + 1);
  }
  else
  {
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v112);
}

uint64_t re::MeshAssetLoader::cleanupSerializationState(re::MeshAssetLoader *this, _BYTE *a2)
{
  uint64_t result;
  _OWORD v4[5];
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a2[952])
  {
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 8), (uint64_t)v4);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 48), (uint64_t)&v4[2] + 8);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 88), (uint64_t)v5);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(a2 + 128), (uint64_t)&v6 + 8);
    if (*((_QWORD *)&v6 + 1))
    {
      if (*((_QWORD *)&v8 + 1))
        (*(void (**)(void))(**((_QWORD **)&v6 + 1) + 40))();
      *((_QWORD *)&v8 + 1) = 0;
      v7 = 0uLL;
      *((_QWORD *)&v6 + 1) = 0;
      LODWORD(v8) = v8 + 1;
    }
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v5);
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v4[2] + 8);
    return re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v4);
  }
  return result;
}

uint64_t re::MeshAssetLoader::registerAsset(re::MeshAssetLoader *this, id *a2, const re::ExistingAssetInformation *a3)
{
  id v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  uint64_t v13;
  unsigned __int8 v14[16];
  uint64_t v15;
  unsigned __int8 v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 1))
  {
    re::MeshAsset::registerRuntimeData((uint64_t)a2, *((_QWORD *)this + 2));
    if (*((_QWORD *)this + 3))
    {
      re::DirectMeshPayload::dynamicCast(a2 + 36, &v12);
      v6 = v12;
      if (v12)
      {
        v7 = re::DirectMeshPayload::connectionId(&v12);
        v8 = (const unsigned __int8 *)objc_msgSend(v12, "identifier");
        v15 = v7;
        uuid_copy(v16, v8);
        v9 = *((_QWORD *)this + 3);
        v13 = v15;
        uuid_copy(v14, v16);
        if (*((_QWORD *)a3 + 10) == -1)
          v10 = 0;
        else
          v10 = *((_QWORD *)a3 + 10);
        re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(v9, (uint64_t)&v13, v10);
        v6 = v12;
      }

    }
  }
  return 0;
}

uint64_t *re::MeshAssetLoader::unregisterAsset(uint64_t *this, id *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t *v4;
  id v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unsigned __int8 v13[16];
  uint64_t v14;
  unsigned __int8 v15[16];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (this[1])
  {
    v4 = this;
    if (this[3])
    {
      re::DirectMeshPayload::dynamicCast(a2 + 36, &v11);
      v6 = v11;
      if (v11)
      {
        v7 = re::DirectMeshPayload::connectionId(&v11);
        v8 = (const unsigned __int8 *)objc_msgSend(v11, "identifier");
        v14 = v7;
        uuid_copy(v15, v8);
        v9 = v4[3];
        v12 = v14;
        uuid_copy(v13, v15);
        if (*((_QWORD *)a3 + 10) == -1)
          v10 = 0;
        else
          v10 = *((_QWORD *)a3 + 10);
        re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(v9, (uint64_t)&v12, v10);
        v6 = v11;
      }

    }
    *((_BYTE *)a2 + 952) = 0;
    this = re::MeshManager::destroyCollection((uint64_t *)v4[2], (re::MeshCollectionHandles *)(a2 + 45));
    a2[47] = 0;
    ++*((_DWORD *)a2 + 96);
    a2[52] = 0;
    ++*((_DWORD *)a2 + 106);
  }
  return this;
}

BOOL re::MeshAssetLoader::isSupportedSourceExtension(re::MeshAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "obj") || !strcasecmp(a2, "usd") || !strcasecmp(a2, "usdz") || strcasecmp(a2, "usda") == 0;
}

uint64_t re::MeshAssetLoader::defaultAssetCompileOptions(re::MeshAssetLoader *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = re::globalAllocators(this);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 72, 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 2) = 257;
  *(_BYTE *)(v3 + 4) = 1;
  *(_DWORD *)(v3 + 5) = 0;
  *(_WORD *)(v3 + 9) = 0;
  *(_DWORD *)(v3 + 12) = 1036831949;
  *(_WORD *)(v3 + 17) = 257;
  *(_BYTE *)(v3 + 19) = 1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_DWORD *)(v3 + 60) = 0x7FFFFFFF;
  v4 = *(_QWORD *)((char *)this + 253);
  *(_OWORD *)v3 = *((_OWORD *)this + 15);
  *(_QWORD *)(v3 + 13) = v4;
  re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v3 + 24, (uint64_t)this + 264);
  return v3;
}

uint64_t re::MeshAssetLoader::setDefaultAssetCompileOptions(re::MeshAssetLoader *this, char *a2)
{
  __int128 v2;

  v2 = *(_OWORD *)a2;
  *(_QWORD *)((char *)this + 253) = *(_QWORD *)(a2 + 13);
  *((_OWORD *)this + 15) = v2;
  return re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)this + 264, (uint64_t)(a2 + 24));
}

void re::MeshAssetLoader::preloadAssets(float32x4_t *this)
{
  uint64_t v2;
  re *MeshAssetDataWithGeomMeshArray;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  uint64_t v9;
  re::GeomAttribute *v10;
  re *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  _QWORD *v22;
  re::GeomAttribute *v23;
  re *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  _QWORD *v30;
  re::GeomAttribute *v31;
  re *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  uint64_t v38;
  re::GeomAttribute *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  re::internal *v45;
  const re::GeomAttribute *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  re *v50;
  re::GeomMesh *v51;
  char *v52;
  uint64_t *v53;
  re::GeomMesh *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  re *v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  re::GeomAttribute *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  re::internal *v72;
  const re::GeomAttribute *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  re *v82;
  re::GeomMesh *v83;
  char *v84;
  uint64_t *v85;
  re::GeomMesh *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  __float2 v90;
  int32x4_t v91;
  int32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  re *v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  _QWORD *v101;
  double v102;
  re::GeomAttribute *v103;
  re *v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t v109;
  _QWORD *v110;
  re::GeomAttribute *v111;
  re *v112;
  int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  float32x4_t v118;
  _QWORD *v119;
  re::GeomAttribute *v120;
  float32x4_t v121;
  _BYTE v122[40];
  __int128 v123;
  char *v124[2];
  uint64_t v125;
  float32x4_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[2];
  _QWORD v133[2];
  float32x4_t *v134;
  re::GeomMesh *v135;
  char *__s;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t *v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t *v146;
  _BYTE v147[24];
  int v148;

  v2 = re::ServiceLocator::service<re::AssetService>(this[2].i64[0]);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  re::buildCube((re *)v124, (re::GeomMesh *)1, 1.0, 1u);
  MeshAssetDataWithGeomMeshArray = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, 0, (uint64_t)&__s);
  v4 = __s;
  v5 = re::globalAllocators(MeshAssetDataWithGeomMeshArray);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 960, 8);
  v7 = v6;
  if (v4)
  {
    v6 = re::MeshAsset::MeshAsset(v6, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v6 = &off_24ED30A60;
    *(_QWORD *)(v6 + 8) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_DWORD *)(v6 + 32) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_DWORD *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_DWORD *)(v6 + 112) = 0;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_DWORD *)(v6 + 152) = 0;
    *(_DWORD *)(v6 + 424) = 0;
    *(_OWORD *)(v6 + 392) = 0u;
    *(_OWORD *)(v6 + 408) = 0u;
    *(_OWORD *)(v6 + 484) = 0u;
    *(_OWORD *)(v6 + 472) = 0u;
    *(_OWORD *)(v6 + 456) = 0u;
    *(_DWORD *)(v6 + 192) = 0;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_OWORD *)(v6 + 176) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_DWORD *)(v6 + 232) = 0;
    *(_OWORD *)(v6 + 240) = 0u;
    *(_OWORD *)(v6 + 256) = 0u;
    *(_DWORD *)(v6 + 272) = 0;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_OWORD *)(v6 + 296) = 0u;
    *(_OWORD *)(v6 + 312) = 0u;
    *(_OWORD *)(v6 + 328) = 0u;
    *(_OWORD *)(v6 + 344) = 0u;
    *(_OWORD *)(v6 + 360) = 0u;
    *(_OWORD *)(v6 + 372) = 0u;
    *(_DWORD *)(v6 + 448) = 0;
    *(_OWORD *)(v6 + 432) = 0u;
    *(_QWORD *)(v6 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v6 + 544) = 0;
    *(_OWORD *)(v6 + 512) = 0u;
    *(_OWORD *)(v6 + 528) = 0u;
    *(_QWORD *)(v6 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v6 + 905) = 0u;
    *(_OWORD *)(v6 + 880) = 0u;
    *(_OWORD *)(v6 + 896) = 0u;
    *(_OWORD *)(v6 + 848) = 0u;
    *(_OWORD *)(v6 + 864) = 0u;
    *(_OWORD *)(v6 + 816) = 0u;
    *(_OWORD *)(v6 + 832) = 0u;
    *(_OWORD *)(v6 + 784) = 0u;
    *(_OWORD *)(v6 + 800) = 0u;
    *(_OWORD *)(v6 + 752) = 0u;
    *(_OWORD *)(v6 + 768) = 0u;
    *(_OWORD *)(v6 + 720) = 0u;
    *(_OWORD *)(v6 + 736) = 0u;
    *(_OWORD *)(v6 + 688) = 0u;
    *(_OWORD *)(v6 + 704) = 0u;
    *(_OWORD *)(v6 + 656) = 0u;
    *(_OWORD *)(v6 + 672) = 0u;
    *(_OWORD *)(v6 + 624) = 0u;
    *(_OWORD *)(v6 + 640) = 0u;
    *(_OWORD *)(v6 + 592) = 0u;
    *(_OWORD *)(v6 + 608) = 0u;
    *(_OWORD *)(v6 + 560) = 0u;
    *(_OWORD *)(v6 + 576) = 0u;
    *(_BYTE *)(v6 + 952) = 0;
    *(_QWORD *)(v6 + 944) = 0;
    *(_OWORD *)(v6 + 928) = 0u;
  }
  *(_DWORD *)(v7 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v6);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v121, v2, v7, &re::MeshAsset::assetType(void)::type, "sharedCubeMesh.compiledmesh", 0, 2, 0);
  v8 = this[3];
  this[3] = v121;
  v121 = v8;
  v9 = this[4].i64[0];
  this[4].i64[0] = *(_QWORD *)v122;
  *(_QWORD *)v122 = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v121);
  re::AssetHandle::loadAsync((re::AssetHandle *)&this[3]);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v10);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  v121.i32[0] = 65537;
  v121.i16[2] = 0;
  *(_DWORD *)v122 = 0;
  *(_WORD *)&v122[4] = 257;
  __asm { FMOV            V8.2S, #1.0 }
  v121.i64[1] = _D8;
  *(_DWORD *)&v122[8] = 2;
  re::buildPlane((re *)v124, (float32x2_t *)&v121);
  v16 = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, 0, (uint64_t)&__s);
  v17 = __s;
  v18 = re::globalAllocators(v16);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 960, 8);
  v20 = v19;
  if (v17)
  {
    v19 = re::MeshAsset::MeshAsset(v19, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v19 = &off_24ED30A60;
    *(_QWORD *)(v19 + 8) = 0;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_DWORD *)(v19 + 32) = 0;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_DWORD *)(v19 + 72) = 0;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 96) = 0u;
    *(_DWORD *)(v19 + 112) = 0;
    *(_OWORD *)(v19 + 120) = 0u;
    *(_OWORD *)(v19 + 136) = 0u;
    *(_DWORD *)(v19 + 152) = 0;
    *(_DWORD *)(v19 + 424) = 0;
    *(_OWORD *)(v19 + 392) = 0u;
    *(_OWORD *)(v19 + 408) = 0u;
    *(_OWORD *)(v19 + 484) = 0u;
    *(_OWORD *)(v19 + 472) = 0u;
    *(_OWORD *)(v19 + 456) = 0u;
    *(_DWORD *)(v19 + 192) = 0;
    *(_OWORD *)(v19 + 160) = 0u;
    *(_OWORD *)(v19 + 176) = 0u;
    *(_OWORD *)(v19 + 200) = 0u;
    *(_OWORD *)(v19 + 216) = 0u;
    *(_DWORD *)(v19 + 232) = 0;
    *(_OWORD *)(v19 + 240) = 0u;
    *(_OWORD *)(v19 + 256) = 0u;
    *(_DWORD *)(v19 + 272) = 0;
    *(_OWORD *)(v19 + 280) = 0u;
    *(_OWORD *)(v19 + 296) = 0u;
    *(_OWORD *)(v19 + 312) = 0u;
    *(_OWORD *)(v19 + 328) = 0u;
    *(_OWORD *)(v19 + 344) = 0u;
    *(_OWORD *)(v19 + 360) = 0u;
    *(_OWORD *)(v19 + 372) = 0u;
    *(_DWORD *)(v19 + 448) = 0;
    *(_OWORD *)(v19 + 432) = 0u;
    *(_QWORD *)(v19 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v19 + 544) = 0;
    *(_OWORD *)(v19 + 512) = 0u;
    *(_OWORD *)(v19 + 528) = 0u;
    *(_QWORD *)(v19 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v19 + 905) = 0u;
    *(_OWORD *)(v19 + 880) = 0u;
    *(_OWORD *)(v19 + 896) = 0u;
    *(_OWORD *)(v19 + 848) = 0u;
    *(_OWORD *)(v19 + 864) = 0u;
    *(_OWORD *)(v19 + 816) = 0u;
    *(_OWORD *)(v19 + 832) = 0u;
    *(_OWORD *)(v19 + 784) = 0u;
    *(_OWORD *)(v19 + 800) = 0u;
    *(_OWORD *)(v19 + 752) = 0u;
    *(_OWORD *)(v19 + 768) = 0u;
    *(_OWORD *)(v19 + 720) = 0u;
    *(_OWORD *)(v19 + 736) = 0u;
    *(_OWORD *)(v19 + 688) = 0u;
    *(_OWORD *)(v19 + 704) = 0u;
    *(_OWORD *)(v19 + 656) = 0u;
    *(_OWORD *)(v19 + 672) = 0u;
    *(_OWORD *)(v19 + 624) = 0u;
    *(_OWORD *)(v19 + 640) = 0u;
    *(_OWORD *)(v19 + 592) = 0u;
    *(_OWORD *)(v19 + 608) = 0u;
    *(_OWORD *)(v19 + 560) = 0u;
    *(_OWORD *)(v19 + 576) = 0u;
    *(_BYTE *)(v19 + 952) = 0;
    *(_QWORD *)(v19 + 944) = 0;
    *(_OWORD *)(v19 + 928) = 0u;
  }
  *(_DWORD *)(v20 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v19);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v126, v2, v20, &re::MeshAsset::assetType(void)::type, "sharedPlaneMesh.compiledmesh", 0, 2, 0);
  v21 = *(float32x4_t *)((char *)this + 72);
  *(float32x4_t *)((char *)this + 72) = v126;
  v126 = v21;
  v22 = (_QWORD *)this[5].i64[1];
  this[5].i64[1] = (uint64_t)v127;
  v127 = v22;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v126);
  re::AssetHandle::loadAsync((re::AssetHandle *)&this[4].u32[2]);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v23);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  v121.i32[0] = 65537;
  v121.i16[2] = 0;
  *(_DWORD *)v122 = 0;
  *(_WORD *)&v122[4] = 257;
  v121.i64[1] = _D8;
  *(_DWORD *)&v122[8] = 4;
  re::buildPlane((re *)v124, (float32x2_t *)&v121);
  v24 = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, 0, (uint64_t)&__s);
  v25 = __s;
  v26 = re::globalAllocators(v24);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26[2] + 32))(v26[2], 960, 8);
  v28 = v27;
  if (v25)
  {
    v27 = re::MeshAsset::MeshAsset(v27, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v27 = &off_24ED30A60;
    *(_QWORD *)(v27 + 8) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_DWORD *)(v27 + 32) = 0;
    *(_OWORD *)(v27 + 40) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_DWORD *)(v27 + 72) = 0;
    *(_OWORD *)(v27 + 80) = 0u;
    *(_OWORD *)(v27 + 96) = 0u;
    *(_DWORD *)(v27 + 112) = 0;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_DWORD *)(v27 + 152) = 0;
    *(_DWORD *)(v27 + 424) = 0;
    *(_OWORD *)(v27 + 392) = 0u;
    *(_OWORD *)(v27 + 408) = 0u;
    *(_OWORD *)(v27 + 484) = 0u;
    *(_OWORD *)(v27 + 472) = 0u;
    *(_OWORD *)(v27 + 456) = 0u;
    *(_DWORD *)(v27 + 192) = 0;
    *(_OWORD *)(v27 + 160) = 0u;
    *(_OWORD *)(v27 + 176) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_OWORD *)(v27 + 216) = 0u;
    *(_DWORD *)(v27 + 232) = 0;
    *(_OWORD *)(v27 + 240) = 0u;
    *(_OWORD *)(v27 + 256) = 0u;
    *(_DWORD *)(v27 + 272) = 0;
    *(_OWORD *)(v27 + 280) = 0u;
    *(_OWORD *)(v27 + 296) = 0u;
    *(_OWORD *)(v27 + 312) = 0u;
    *(_OWORD *)(v27 + 328) = 0u;
    *(_OWORD *)(v27 + 344) = 0u;
    *(_OWORD *)(v27 + 360) = 0u;
    *(_OWORD *)(v27 + 372) = 0u;
    *(_DWORD *)(v27 + 448) = 0;
    *(_OWORD *)(v27 + 432) = 0u;
    *(_QWORD *)(v27 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v27 + 544) = 0;
    *(_OWORD *)(v27 + 512) = 0u;
    *(_OWORD *)(v27 + 528) = 0u;
    *(_QWORD *)(v27 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v27 + 905) = 0u;
    *(_OWORD *)(v27 + 880) = 0u;
    *(_OWORD *)(v27 + 896) = 0u;
    *(_OWORD *)(v27 + 848) = 0u;
    *(_OWORD *)(v27 + 864) = 0u;
    *(_OWORD *)(v27 + 816) = 0u;
    *(_OWORD *)(v27 + 832) = 0u;
    *(_OWORD *)(v27 + 784) = 0u;
    *(_OWORD *)(v27 + 800) = 0u;
    *(_OWORD *)(v27 + 752) = 0u;
    *(_OWORD *)(v27 + 768) = 0u;
    *(_OWORD *)(v27 + 720) = 0u;
    *(_OWORD *)(v27 + 736) = 0u;
    *(_OWORD *)(v27 + 688) = 0u;
    *(_OWORD *)(v27 + 704) = 0u;
    *(_OWORD *)(v27 + 656) = 0u;
    *(_OWORD *)(v27 + 672) = 0u;
    *(_OWORD *)(v27 + 624) = 0u;
    *(_OWORD *)(v27 + 640) = 0u;
    *(_OWORD *)(v27 + 592) = 0u;
    *(_OWORD *)(v27 + 608) = 0u;
    *(_OWORD *)(v27 + 560) = 0u;
    *(_OWORD *)(v27 + 576) = 0u;
    *(_BYTE *)(v27 + 952) = 0;
    *(_QWORD *)(v27 + 944) = 0;
    *(_OWORD *)(v27 + 928) = 0u;
  }
  *(_DWORD *)(v28 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v27);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v126, v2, v28, &re::MeshAsset::assetType(void)::type, "sharedBillboardMesh.compiledmesh", 0, 2, 0);
  v29 = this[6];
  this[6] = v126;
  v126 = v29;
  v30 = (_QWORD *)this[7].i64[0];
  this[7].i64[0] = (uint64_t)v127;
  v127 = v30;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v126);
  re::AssetHandle::loadAsync((re::AssetHandle *)&this[6]);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v31);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  LODWORD(__s) = 65537;
  WORD2(__s) = 0;
  LODWORD(v138) = 0;
  v137 = _D8;
  v139 = 4;
  WORD2(v138) = 0;
  re::buildPlane((re *)v124, (float32x2_t *)&__s);
  v32 = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, 0, (uint64_t)&__s);
  v33 = __s;
  v34 = re::globalAllocators(v32);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34[2] + 32))(v34[2], 960, 8);
  v36 = v35;
  if (v33)
  {
    v35 = re::MeshAsset::MeshAsset(v35, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v35 = &off_24ED30A60;
    *(_QWORD *)(v35 + 8) = 0;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_DWORD *)(v35 + 32) = 0;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_DWORD *)(v35 + 72) = 0;
    *(_OWORD *)(v35 + 80) = 0u;
    *(_OWORD *)(v35 + 96) = 0u;
    *(_DWORD *)(v35 + 112) = 0;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_DWORD *)(v35 + 152) = 0;
    *(_DWORD *)(v35 + 424) = 0;
    *(_OWORD *)(v35 + 392) = 0u;
    *(_OWORD *)(v35 + 408) = 0u;
    *(_OWORD *)(v35 + 484) = 0u;
    *(_OWORD *)(v35 + 472) = 0u;
    *(_OWORD *)(v35 + 456) = 0u;
    *(_DWORD *)(v35 + 192) = 0;
    *(_OWORD *)(v35 + 160) = 0u;
    *(_OWORD *)(v35 + 176) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    *(_OWORD *)(v35 + 216) = 0u;
    *(_DWORD *)(v35 + 232) = 0;
    *(_OWORD *)(v35 + 240) = 0u;
    *(_OWORD *)(v35 + 256) = 0u;
    *(_DWORD *)(v35 + 272) = 0;
    *(_OWORD *)(v35 + 280) = 0u;
    *(_OWORD *)(v35 + 296) = 0u;
    *(_OWORD *)(v35 + 312) = 0u;
    *(_OWORD *)(v35 + 328) = 0u;
    *(_OWORD *)(v35 + 344) = 0u;
    *(_OWORD *)(v35 + 360) = 0u;
    *(_OWORD *)(v35 + 372) = 0u;
    *(_DWORD *)(v35 + 448) = 0;
    *(_OWORD *)(v35 + 432) = 0u;
    *(_QWORD *)(v35 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v35 + 544) = 0;
    *(_OWORD *)(v35 + 512) = 0u;
    *(_OWORD *)(v35 + 528) = 0u;
    *(_QWORD *)(v35 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v35 + 905) = 0u;
    *(_OWORD *)(v35 + 880) = 0u;
    *(_OWORD *)(v35 + 896) = 0u;
    *(_OWORD *)(v35 + 848) = 0u;
    *(_OWORD *)(v35 + 864) = 0u;
    *(_OWORD *)(v35 + 816) = 0u;
    *(_OWORD *)(v35 + 832) = 0u;
    *(_OWORD *)(v35 + 784) = 0u;
    *(_OWORD *)(v35 + 800) = 0u;
    *(_OWORD *)(v35 + 752) = 0u;
    *(_OWORD *)(v35 + 768) = 0u;
    *(_OWORD *)(v35 + 720) = 0u;
    *(_OWORD *)(v35 + 736) = 0u;
    *(_OWORD *)(v35 + 688) = 0u;
    *(_OWORD *)(v35 + 704) = 0u;
    *(_OWORD *)(v35 + 656) = 0u;
    *(_OWORD *)(v35 + 672) = 0u;
    *(_OWORD *)(v35 + 624) = 0u;
    *(_OWORD *)(v35 + 640) = 0u;
    *(_OWORD *)(v35 + 592) = 0u;
    *(_OWORD *)(v35 + 608) = 0u;
    *(_OWORD *)(v35 + 560) = 0u;
    *(_OWORD *)(v35 + 576) = 0u;
    *(_BYTE *)(v35 + 952) = 0;
    *(_QWORD *)(v35 + 944) = 0;
    *(_OWORD *)(v35 + 928) = 0u;
  }
  *(_DWORD *)(v36 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v35);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v121, v2, v36, &re::MeshAsset::assetType(void)::type, "sharedDoubleBillboardMesh.compiledmesh", 0, 2, 0);
  v37 = *(float32x4_t *)((char *)this + 120);
  *(float32x4_t *)((char *)this + 120) = v121;
  v121 = v37;
  v38 = this[8].i64[1];
  this[8].i64[1] = *(_QWORD *)v122;
  *(_QWORD *)v122 = v38;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v121);
  re::AssetHandle::loadAsync((re::AssetHandle *)&this[7].u32[2]);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v39);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  re::GeomMeshBuilder::GeomMeshBuilder((re *)&__s, (uint64_t)v124);
  if (v137 >= 0x11 && (_DWORD)v140 && (v140 - 1) > v140)
  {
    while (1)
      ;
  }
  LODWORD(v137) = 16;
  v141 = 16;
  if (v142)
  {
    v40 = v143;
    v41 = 8 * v142;
    do
    {
      v42 = *v40++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 72))(v42, v141);
      v41 -= 8;
    }
    while (v41);
  }
  if (v140 >= 0x13)
  {
    v43 = v148;
    if (v148)
    {
      v44 = 0;
      do
      {
        v45 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v147, v44);
        re::internal::accessFaceVaryingAttributeSubmesh(v45, v46);
        ++v44;
      }
      while (v43 != v44);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v138, 0x12uLL);
  v144 = 18;
  if (v145)
  {
    v47 = v146;
    v48 = 8 * v145;
    do
    {
      v49 = *v47++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 72))(v49, v144);
      v48 -= 8;
    }
    while (v48);
  }
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0, 0, 1, 3);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 1u, 3, 1, 2);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 2u, 4, 5, 0);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 3u, 4, 0, 15);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 4u, 5, 6, 0);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 5u, 0, 6, 1);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 6u, 6, 7, 1);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 7u, 1, 7, 8);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 8u, 2, 1, 8);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 9u, 2, 8, 9);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0xAu, 2, 9, 10);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0xBu, 2, 10, 11);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0xCu, 3, 2, 12);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0xDu, 12, 2, 11);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0xEu, 14, 3, 13);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0xFu, 13, 3, 12);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0x10u, 15, 0, 14);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0x11u, 14, 0, 3);
  re::GeomMesh::operator=((uint64_t)v124, &v137);
  v50 = re::GeomMesh::setName((re *)v124, __s);
  v52 = __s;
  if (__s)
  {
    v53 = re::globalAllocators(v50);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v53[2] + 40))(v53[2], v52);
    __s = 0;
  }
  re::addVertexUVs((re *)v124, v51);
  v134 = (float32x4_t *)re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v124);
  v135 = v54;
  v133[0] = re::modifyVertexUVs((re *)v124, v54);
  v133[1] = v55;
  v132[1] = v56;
  v131[1] = v57;
  v130[1] = v58;
  v126.i64[0] = (uint64_t)&v134;
  v126.i64[1] = (uint64_t)v133;
  v127 = v132;
  v128 = v131;
  v129 = v130;
  v121 = (float32x4_t)xmmword_2260E5F10;
  *(_OWORD *)v122 = xmmword_2260E5F40;
  *(_OWORD *)&v122[16] = xmmword_2260E5F50;
  re::transform((re::GeomMesh *)v124, &v121);
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)&__s);
  v59 = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, 0, (uint64_t)&__s);
  v60 = __s;
  v61 = re::globalAllocators(v59);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61[2] + 32))(v61[2], 960, 8);
  v63 = v62;
  if (v60)
  {
    v62 = re::MeshAsset::MeshAsset(v62, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v62 = &off_24ED30A60;
    *(_QWORD *)(v62 + 8) = 0;
    *(_OWORD *)(v62 + 16) = 0u;
    *(_DWORD *)(v62 + 32) = 0;
    *(_OWORD *)(v62 + 40) = 0u;
    *(_OWORD *)(v62 + 56) = 0u;
    *(_DWORD *)(v62 + 72) = 0;
    *(_OWORD *)(v62 + 80) = 0u;
    *(_OWORD *)(v62 + 96) = 0u;
    *(_DWORD *)(v62 + 112) = 0;
    *(_OWORD *)(v62 + 120) = 0u;
    *(_OWORD *)(v62 + 136) = 0u;
    *(_DWORD *)(v62 + 152) = 0;
    *(_DWORD *)(v62 + 424) = 0;
    *(_OWORD *)(v62 + 392) = 0u;
    *(_OWORD *)(v62 + 408) = 0u;
    *(_OWORD *)(v62 + 484) = 0u;
    *(_OWORD *)(v62 + 472) = 0u;
    *(_OWORD *)(v62 + 456) = 0u;
    *(_DWORD *)(v62 + 192) = 0;
    *(_OWORD *)(v62 + 160) = 0u;
    *(_OWORD *)(v62 + 176) = 0u;
    *(_OWORD *)(v62 + 200) = 0u;
    *(_OWORD *)(v62 + 216) = 0u;
    *(_DWORD *)(v62 + 232) = 0;
    *(_OWORD *)(v62 + 240) = 0u;
    *(_OWORD *)(v62 + 256) = 0u;
    *(_DWORD *)(v62 + 272) = 0;
    *(_OWORD *)(v62 + 280) = 0u;
    *(_OWORD *)(v62 + 296) = 0u;
    *(_OWORD *)(v62 + 312) = 0u;
    *(_OWORD *)(v62 + 328) = 0u;
    *(_OWORD *)(v62 + 344) = 0u;
    *(_OWORD *)(v62 + 360) = 0u;
    *(_OWORD *)(v62 + 372) = 0u;
    *(_DWORD *)(v62 + 448) = 0;
    *(_OWORD *)(v62 + 432) = 0u;
    *(_QWORD *)(v62 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v62 + 544) = 0;
    *(_OWORD *)(v62 + 512) = 0u;
    *(_OWORD *)(v62 + 528) = 0u;
    *(_QWORD *)(v62 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v62 + 905) = 0u;
    *(_OWORD *)(v62 + 880) = 0u;
    *(_OWORD *)(v62 + 896) = 0u;
    *(_OWORD *)(v62 + 848) = 0u;
    *(_OWORD *)(v62 + 864) = 0u;
    *(_OWORD *)(v62 + 816) = 0u;
    *(_OWORD *)(v62 + 832) = 0u;
    *(_OWORD *)(v62 + 784) = 0u;
    *(_OWORD *)(v62 + 800) = 0u;
    *(_OWORD *)(v62 + 752) = 0u;
    *(_OWORD *)(v62 + 768) = 0u;
    *(_OWORD *)(v62 + 720) = 0u;
    *(_OWORD *)(v62 + 736) = 0u;
    *(_OWORD *)(v62 + 688) = 0u;
    *(_OWORD *)(v62 + 704) = 0u;
    *(_OWORD *)(v62 + 656) = 0u;
    *(_OWORD *)(v62 + 672) = 0u;
    *(_OWORD *)(v62 + 624) = 0u;
    *(_OWORD *)(v62 + 640) = 0u;
    *(_OWORD *)(v62 + 592) = 0u;
    *(_OWORD *)(v62 + 608) = 0u;
    *(_OWORD *)(v62 + 560) = 0u;
    *(_OWORD *)(v62 + 576) = 0u;
    *(_BYTE *)(v62 + 952) = 0;
    *(_QWORD *)(v62 + 944) = 0;
    *(_OWORD *)(v62 + 928) = 0u;
  }
  *(_DWORD *)(v63 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v62);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v121, v2, v63, &re::MeshAsset::assetType(void)::type, "sharedDoubleVertexdBillboardMesh.compiledmesh", 0, 2, 0);
  v64 = this[9];
  this[9] = v121;
  v121 = v64;
  v65 = this[10].i64[0];
  this[10].i64[0] = *(_QWORD *)v122;
  *(_QWORD *)v122 = v65;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v121);
  re::AssetHandle::loadAsync((re::AssetHandle *)&this[9]);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v66);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  __s = 0;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v137, (const re::internal::GeomBaseMesh *)&v125);
  re::GeomMesh::setName((re *)&__s, v124[0]);
  if (v137 >= 0x52 && (_DWORD)v140 && (v140 - 1) > v140)
  {
    while (1)
      ;
  }
  LODWORD(v137) = 81;
  v141 = 81;
  if (v142)
  {
    v67 = v143;
    v68 = 8 * v142;
    do
    {
      v69 = *v67++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 72))(v69, v141);
      v68 -= 8;
    }
    while (v68);
  }
  if (v140 >= 0x79)
  {
    v70 = v148;
    if (v148)
    {
      v71 = 0;
      do
      {
        v72 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v147, v71);
        re::internal::accessFaceVaryingAttributeSubmesh(v72, v73);
        ++v71;
      }
      while (v70 != v71);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v138, 0x78uLL);
  v144 = 120;
  if (v145)
  {
    v74 = v146;
    v75 = 8 * v145;
    do
    {
      v76 = *v74++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 72))(v76, v144);
      v75 -= 8;
    }
    while (v75);
  }
  v77 = 0;
  v78 = 1;
  do
  {
    v79 = v77 + 1;
    v80 = v78 + 2;
    if (v78 >= 0x4E)
      v81 = v78 - 78;
    else
      v81 = v78 + 2;
    re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, v77, 0, v78, v81);
    v77 = v79;
    v78 = v80;
  }
  while (v79 != 40);
  do
  {
    re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, v79, v79 - 39, v79 - 38, v79 - 36);
    re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, v79 + 1, v79 - 39, v79 - 36, v79 - 37);
    _CF = v79 >= 0x74;
    v79 += 2;
  }
  while (!_CF);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0x76u, 79, 80, 2);
  re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, 0x77u, 79, 2, 1);
  re::GeomMesh::operator=((uint64_t)v124, &v137);
  v82 = re::GeomMesh::setName((re *)v124, __s);
  v84 = __s;
  if (__s)
  {
    v85 = re::globalAllocators(v82);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v85[2] + 40))(v85[2], v84);
    __s = 0;
  }
  re::addVertexUVs((re *)v124, v83);
  v121.i64[0] = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v124);
  v121.i64[1] = (uint64_t)v86;
  v126.i64[0] = re::modifyVertexUVs((re *)v124, v86);
  v126.i64[1] = v87;
  v134 = &v121;
  v135 = (re::GeomMesh *)&v126;
  v88 = 0;
  v89 = 1;
  do
  {
    v90 = __sincosf_stret((float)v88 * 0.15708);
    *(float32x2_t *)v91.i8 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v90.__sinval), LODWORD(v90.__cosval)), (float32x2_t)0x3F0000003F000000);
    v92 = vzip1q_s32(v91, v91);
    v93 = v92.i64[1];
    v94 = v92.u32[0];
    ++v88;
    _ZF = v89 == 79;
    v89 += 2;
  }
  while (!_ZF);
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)&__s);
  v121.i8[4] = 1;
  *(__int32 *)((char *)&v121.i32[1] + 1) = 0;
  *(__int16 *)((char *)&v121.i16[4] + 1) = 0;
  v121.i32[3] = 1036831949;
  *(_DWORD *)v122 = 16843008;
  v122[4] = 0;
  v123 = 0u;
  memset(&v122[8], 0, 32);
  DWORD1(v123) = 0x7FFFFFFF;
  v121.i32[0] = 0x10000;
  v95 = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, (int *)&v121, (uint64_t)&__s);
  v96 = __s;
  v97 = re::globalAllocators(v95);
  v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v97[2] + 32))(v97[2], 960, 8);
  v99 = v98;
  if (v96)
  {
    v98 = re::MeshAsset::MeshAsset(v98, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v98 = &off_24ED30A60;
    *(_QWORD *)(v98 + 8) = 0;
    *(_OWORD *)(v98 + 16) = 0u;
    *(_DWORD *)(v98 + 32) = 0;
    *(_OWORD *)(v98 + 40) = 0u;
    *(_OWORD *)(v98 + 56) = 0u;
    *(_DWORD *)(v98 + 72) = 0;
    *(_OWORD *)(v98 + 80) = 0u;
    *(_OWORD *)(v98 + 96) = 0u;
    *(_DWORD *)(v98 + 112) = 0;
    *(_OWORD *)(v98 + 120) = 0u;
    *(_OWORD *)(v98 + 136) = 0u;
    *(_DWORD *)(v98 + 152) = 0;
    *(_DWORD *)(v98 + 424) = 0;
    *(_OWORD *)(v98 + 392) = 0u;
    *(_OWORD *)(v98 + 408) = 0u;
    *(_OWORD *)(v98 + 484) = 0u;
    *(_OWORD *)(v98 + 472) = 0u;
    *(_OWORD *)(v98 + 456) = 0u;
    *(_DWORD *)(v98 + 192) = 0;
    *(_OWORD *)(v98 + 160) = 0u;
    *(_OWORD *)(v98 + 176) = 0u;
    *(_OWORD *)(v98 + 200) = 0u;
    *(_OWORD *)(v98 + 216) = 0u;
    *(_DWORD *)(v98 + 232) = 0;
    *(_OWORD *)(v98 + 240) = 0u;
    *(_OWORD *)(v98 + 256) = 0u;
    *(_DWORD *)(v98 + 272) = 0;
    *(_OWORD *)(v98 + 280) = 0u;
    *(_OWORD *)(v98 + 296) = 0u;
    *(_OWORD *)(v98 + 312) = 0u;
    *(_OWORD *)(v98 + 328) = 0u;
    *(_OWORD *)(v98 + 344) = 0u;
    *(_OWORD *)(v98 + 360) = 0u;
    *(_OWORD *)(v98 + 372) = 0u;
    *(_DWORD *)(v98 + 448) = 0;
    *(_OWORD *)(v98 + 432) = 0u;
    *(_QWORD *)(v98 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v98 + 544) = 0;
    *(_OWORD *)(v98 + 512) = 0u;
    *(_OWORD *)(v98 + 528) = 0u;
    *(_QWORD *)(v98 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v98 + 905) = 0u;
    *(_OWORD *)(v98 + 880) = 0u;
    *(_OWORD *)(v98 + 896) = 0u;
    *(_OWORD *)(v98 + 848) = 0u;
    *(_OWORD *)(v98 + 864) = 0u;
    *(_OWORD *)(v98 + 816) = 0u;
    *(_OWORD *)(v98 + 832) = 0u;
    *(_OWORD *)(v98 + 784) = 0u;
    *(_OWORD *)(v98 + 800) = 0u;
    *(_OWORD *)(v98 + 752) = 0u;
    *(_OWORD *)(v98 + 768) = 0u;
    *(_OWORD *)(v98 + 720) = 0u;
    *(_OWORD *)(v98 + 736) = 0u;
    *(_OWORD *)(v98 + 688) = 0u;
    *(_OWORD *)(v98 + 704) = 0u;
    *(_OWORD *)(v98 + 656) = 0u;
    *(_OWORD *)(v98 + 672) = 0u;
    *(_OWORD *)(v98 + 624) = 0u;
    *(_OWORD *)(v98 + 640) = 0u;
    *(_OWORD *)(v98 + 592) = 0u;
    *(_OWORD *)(v98 + 608) = 0u;
    *(_OWORD *)(v98 + 560) = 0u;
    *(_OWORD *)(v98 + 576) = 0u;
    *(_BYTE *)(v98 + 952) = 0;
    *(_QWORD *)(v98 + 944) = 0;
    *(_OWORD *)(v98 + 928) = 0u;
  }
  *(_DWORD *)(v99 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v98);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v126, v2, v99, &re::MeshAsset::assetType(void)::type, "sharedDoubleVertexCircularPlaneMesh.compiledmesh", 0, 2, 0);
  v100 = *(float32x4_t *)((char *)this + 216);
  *(float32x4_t *)((char *)this + 216) = v126;
  v126 = v100;
  v101 = (_QWORD *)this[14].i64[1];
  this[14].i64[1] = (uint64_t)v127;
  v127 = v101;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v126);
  re::AssetHandle::loadAsync((re::AssetHandle *)&this[13].u32[2]);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v122[8], v102);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v103);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  v121.i32[0] = 65537;
  v121.i16[2] = 0;
  *(_DWORD *)v122 = 0;
  *(_WORD *)&v122[4] = 257;
  v121.i64[1] = 0x4000000040000000;
  *(_DWORD *)&v122[8] = 4;
  re::buildPlane((re *)v124, (float32x2_t *)&v121);
  v104 = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, 0, (uint64_t)&__s);
  v105 = __s;
  v106 = re::globalAllocators(v104);
  v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[2] + 32))(v106[2], 960, 8);
  v108 = v107;
  if (v105)
  {
    v107 = re::MeshAsset::MeshAsset(v107, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v107 = &off_24ED30A60;
    *(_QWORD *)(v107 + 8) = 0;
    *(_OWORD *)(v107 + 16) = 0u;
    *(_DWORD *)(v107 + 32) = 0;
    *(_OWORD *)(v107 + 40) = 0u;
    *(_OWORD *)(v107 + 56) = 0u;
    *(_DWORD *)(v107 + 72) = 0;
    *(_OWORD *)(v107 + 80) = 0u;
    *(_OWORD *)(v107 + 96) = 0u;
    *(_DWORD *)(v107 + 112) = 0;
    *(_OWORD *)(v107 + 120) = 0u;
    *(_OWORD *)(v107 + 136) = 0u;
    *(_DWORD *)(v107 + 152) = 0;
    *(_DWORD *)(v107 + 424) = 0;
    *(_OWORD *)(v107 + 392) = 0u;
    *(_OWORD *)(v107 + 408) = 0u;
    *(_OWORD *)(v107 + 484) = 0u;
    *(_OWORD *)(v107 + 472) = 0u;
    *(_OWORD *)(v107 + 456) = 0u;
    *(_DWORD *)(v107 + 192) = 0;
    *(_OWORD *)(v107 + 160) = 0u;
    *(_OWORD *)(v107 + 176) = 0u;
    *(_OWORD *)(v107 + 200) = 0u;
    *(_OWORD *)(v107 + 216) = 0u;
    *(_DWORD *)(v107 + 232) = 0;
    *(_OWORD *)(v107 + 240) = 0u;
    *(_OWORD *)(v107 + 256) = 0u;
    *(_DWORD *)(v107 + 272) = 0;
    *(_OWORD *)(v107 + 280) = 0u;
    *(_OWORD *)(v107 + 296) = 0u;
    *(_OWORD *)(v107 + 312) = 0u;
    *(_OWORD *)(v107 + 328) = 0u;
    *(_OWORD *)(v107 + 344) = 0u;
    *(_OWORD *)(v107 + 360) = 0u;
    *(_OWORD *)(v107 + 372) = 0u;
    *(_DWORD *)(v107 + 448) = 0;
    *(_OWORD *)(v107 + 432) = 0u;
    *(_QWORD *)(v107 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v107 + 544) = 0;
    *(_OWORD *)(v107 + 512) = 0u;
    *(_OWORD *)(v107 + 528) = 0u;
    *(_QWORD *)(v107 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v107 + 905) = 0u;
    *(_OWORD *)(v107 + 880) = 0u;
    *(_OWORD *)(v107 + 896) = 0u;
    *(_OWORD *)(v107 + 848) = 0u;
    *(_OWORD *)(v107 + 864) = 0u;
    *(_OWORD *)(v107 + 816) = 0u;
    *(_OWORD *)(v107 + 832) = 0u;
    *(_OWORD *)(v107 + 784) = 0u;
    *(_OWORD *)(v107 + 800) = 0u;
    *(_OWORD *)(v107 + 752) = 0u;
    *(_OWORD *)(v107 + 768) = 0u;
    *(_OWORD *)(v107 + 720) = 0u;
    *(_OWORD *)(v107 + 736) = 0u;
    *(_OWORD *)(v107 + 688) = 0u;
    *(_OWORD *)(v107 + 704) = 0u;
    *(_OWORD *)(v107 + 656) = 0u;
    *(_OWORD *)(v107 + 672) = 0u;
    *(_OWORD *)(v107 + 624) = 0u;
    *(_OWORD *)(v107 + 640) = 0u;
    *(_OWORD *)(v107 + 592) = 0u;
    *(_OWORD *)(v107 + 608) = 0u;
    *(_OWORD *)(v107 + 560) = 0u;
    *(_OWORD *)(v107 + 576) = 0u;
    *(_BYTE *)(v107 + 952) = 0;
    *(_QWORD *)(v107 + 944) = 0;
    *(_OWORD *)(v107 + 928) = 0u;
  }
  *(_DWORD *)(v108 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v107);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v126, v2, v108, &re::MeshAsset::assetType(void)::type, "sharedFullscreenMesh.compiledmesh", 0, 2, 0);
  v109 = *(float32x4_t *)((char *)this + 168);
  *(float32x4_t *)((char *)this + 168) = v126;
  v126 = v109;
  v110 = (_QWORD *)this[11].i64[1];
  this[11].i64[1] = (uint64_t)v127;
  v127 = v110;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v126);
  re::AssetHandle::loadAsync((re::AssetHandle *)&this[10].u32[2]);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v111);
  re::GeomMesh::GeomMesh((re::GeomMesh *)v124, 0);
  v121.i32[0] = 65537;
  *(_WORD *)&v122[4] = 257;
  v121.i64[1] = _D8;
  *(_DWORD *)v122 = 1056964608;
  v121.i16[2] = 10;
  *(_DWORD *)&v122[8] = 2;
  re::buildPlane((re *)v124, (float32x2_t *)&v121);
  v112 = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v124, 1uLL, 0, 0, (uint64_t)&__s);
  v113 = __s;
  v114 = re::globalAllocators(v112);
  v115 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114[2] + 32))(v114[2], 960, 8);
  v116 = v115;
  if (v113)
  {
    v115 = re::MeshAsset::MeshAsset(v115, (uint64_t)&v137);
  }
  else
  {
    *(_QWORD *)v115 = &off_24ED30A60;
    *(_QWORD *)(v115 + 8) = 0;
    *(_OWORD *)(v115 + 16) = 0u;
    *(_DWORD *)(v115 + 32) = 0;
    *(_OWORD *)(v115 + 40) = 0u;
    *(_OWORD *)(v115 + 56) = 0u;
    *(_DWORD *)(v115 + 72) = 0;
    *(_OWORD *)(v115 + 80) = 0u;
    *(_OWORD *)(v115 + 96) = 0u;
    *(_DWORD *)(v115 + 112) = 0;
    *(_OWORD *)(v115 + 120) = 0u;
    *(_OWORD *)(v115 + 136) = 0u;
    *(_DWORD *)(v115 + 152) = 0;
    *(_DWORD *)(v115 + 424) = 0;
    *(_OWORD *)(v115 + 392) = 0u;
    *(_OWORD *)(v115 + 408) = 0u;
    *(_OWORD *)(v115 + 484) = 0u;
    *(_OWORD *)(v115 + 472) = 0u;
    *(_OWORD *)(v115 + 456) = 0u;
    *(_DWORD *)(v115 + 192) = 0;
    *(_OWORD *)(v115 + 160) = 0u;
    *(_OWORD *)(v115 + 176) = 0u;
    *(_OWORD *)(v115 + 200) = 0u;
    *(_OWORD *)(v115 + 216) = 0u;
    *(_DWORD *)(v115 + 232) = 0;
    *(_OWORD *)(v115 + 240) = 0u;
    *(_OWORD *)(v115 + 256) = 0u;
    *(_DWORD *)(v115 + 272) = 0;
    *(_OWORD *)(v115 + 280) = 0u;
    *(_OWORD *)(v115 + 296) = 0u;
    *(_OWORD *)(v115 + 312) = 0u;
    *(_OWORD *)(v115 + 328) = 0u;
    *(_OWORD *)(v115 + 344) = 0u;
    *(_OWORD *)(v115 + 360) = 0u;
    *(_OWORD *)(v115 + 372) = 0u;
    *(_DWORD *)(v115 + 448) = 0;
    *(_OWORD *)(v115 + 432) = 0u;
    *(_QWORD *)(v115 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v115 + 544) = 0;
    *(_OWORD *)(v115 + 512) = 0u;
    *(_OWORD *)(v115 + 528) = 0u;
    *(_QWORD *)(v115 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v115 + 905) = 0u;
    *(_OWORD *)(v115 + 880) = 0u;
    *(_OWORD *)(v115 + 896) = 0u;
    *(_OWORD *)(v115 + 848) = 0u;
    *(_OWORD *)(v115 + 864) = 0u;
    *(_OWORD *)(v115 + 816) = 0u;
    *(_OWORD *)(v115 + 832) = 0u;
    *(_OWORD *)(v115 + 784) = 0u;
    *(_OWORD *)(v115 + 800) = 0u;
    *(_OWORD *)(v115 + 752) = 0u;
    *(_OWORD *)(v115 + 768) = 0u;
    *(_OWORD *)(v115 + 720) = 0u;
    *(_OWORD *)(v115 + 736) = 0u;
    *(_OWORD *)(v115 + 688) = 0u;
    *(_OWORD *)(v115 + 704) = 0u;
    *(_OWORD *)(v115 + 656) = 0u;
    *(_OWORD *)(v115 + 672) = 0u;
    *(_OWORD *)(v115 + 624) = 0u;
    *(_OWORD *)(v115 + 640) = 0u;
    *(_OWORD *)(v115 + 592) = 0u;
    *(_OWORD *)(v115 + 608) = 0u;
    *(_OWORD *)(v115 + 560) = 0u;
    *(_OWORD *)(v115 + 576) = 0u;
    *(_BYTE *)(v115 + 952) = 0;
    *(_QWORD *)(v115 + 944) = 0;
    *(_OWORD *)(v115 + 928) = 0u;
  }
  *(_DWORD *)(v116 + 924) = 1;
  re::MeshAsset::assetType((re::MeshAsset *)v115);
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 424))(&v126, v2, v116, &re::MeshAsset::assetType(void)::type, "sharedCircularPlaneMesh.compiledmesh", 0, 2, 0);
  v118 = this[12];
  v117 = (uint64_t *)&this[12];
  *(float32x4_t *)v117 = v126;
  v126 = v118;
  v119 = (_QWORD *)v117[2];
  v117[2] = (uint64_t)v127;
  v127 = v119;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v126);
  re::AssetHandle::loadAsync((re::AssetHandle *)v117);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v124, v120);
  re::AssetHandle::loadNow(*(v117 - 17), 0);
  re::AssetHandle::loadNow(*(v117 - 14), 0);
  re::AssetHandle::loadNow(*(v117 - 11), 0);
  re::AssetHandle::loadNow(*(v117 - 8), 0);
  re::AssetHandle::loadNow(*(v117 - 5), 0);
  re::AssetHandle::loadNow(*(v117 - 2), 0);
  re::AssetHandle::loadNow(v117[1], 0);
  re::AssetHandle::loadNow(v117[4], 0);
}

uint64_t re::MeshAssetLoader::serializableAsset@<X0>(re::MeshAsset *a1@<X1>, uint64_t *a2@<X8>)
{
  re *MeshAssetDataFromRegisteredMeshAsset;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[40];
  _BYTE v11[40];
  _BYTE v12[40];
  _QWORD v13[3];
  int v14;
  uint64_t v15;

  if (a1)
  {
    if (*((_BYTE *)a1 + 952))
    {
      MeshAssetDataFromRegisteredMeshAsset = (re *)re::MeshAsset::makeMeshAssetDataFromRegisteredMeshAsset((re::MeshAsset *)v10, a1);
    }
    else
    {
      re::DynamicArray<re::MeshAssetModel>::DynamicArray((uint64_t)v10, (uint64_t *)a1 + 1);
      re::DynamicArray<re::MeshAssetInstance>::DynamicArray((uint64_t)v11, (uint64_t *)a1 + 6);
      re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray((uint64_t)v12, (uint64_t *)a1 + 11);
      MeshAssetDataFromRegisteredMeshAsset = (re *)re::DynamicArray<float>::DynamicArray((uint64_t)v13, (uint64_t *)a1 + 16);
    }
    v6 = re::globalAllocators(MeshAssetDataFromRegisteredMeshAsset);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 960, 8);
    v8 = re::MeshAsset::MeshAsset(v7, (uint64_t)v10);
    *a2 = v8;
    a2[1] = (uint64_t)&off_24ED30D78;
    a2[4] = (uint64_t)(a2 + 1);
    if (v8)
      re::DynamicArray<re::AssetHandle>::operator=((re::AssetHandle *)(v8 + 208), (re::MeshAsset *)((char *)a1 + 208));
    if (v13[0])
    {
      if (v15)
        (*(void (**)(void))(*(_QWORD *)v13[0] + 40))();
      v15 = 0;
      memset(v13, 0, sizeof(v13));
      ++v14;
    }
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v12);
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)v11);
    return re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v10);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) ", "runtimeAssetPointer != nullptr", "serializableAsset", 1255);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

re::AssetHandle *re::DynamicArray<re::AssetHandle>::operator=(re::AssetHandle *a1, re::AssetHandle *a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::AssetHandle>::copy((uint64_t)a1, (uint64_t)a2);
        ++*((_DWORD *)a1 + 6);
      }
      else
      {
        re::DynamicArray<re::AssetHandle>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = *((_QWORD *)a2 + 2);
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::AssetHandle>::setCapacity(a1, v5);
      ++*((_DWORD *)a1 + 6);
      re::DynamicArray<re::AssetHandle>::copy((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetModel>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int32x4_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v10 = a2 << 9;
    v11 = a2;
    do
    {
      re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)(*(_QWORD *)(a1 + 32) + v10));
      ++v11;
      v10 += 512;
    }
    while (v11 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = v4 << 9;
      v7 = vdupq_n_s32(0x7F800000u);
      *(_QWORD *)&v8 = 0x7F0000007FLL;
      *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
      do
      {
        v9 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = &str_110;
        *(int32x4_t *)(v9 + 16) = v7;
        *(_OWORD *)(v9 + 32) = v8;
        *(_QWORD *)(v9 + 504) = 0;
        *(_OWORD *)(v9 + 48) = 0uLL;
        *(_OWORD *)(v9 + 64) = 0uLL;
        *(_OWORD *)(v9 + 80) = 0uLL;
        *(_OWORD *)(v9 + 96) = 0uLL;
        *(_OWORD *)(v9 + 112) = 0uLL;
        *(_OWORD *)(v9 + 124) = 0uLL;
        *(_OWORD *)(v9 + 144) = 0uLL;
        *(_OWORD *)(v9 + 160) = 0uLL;
        *(_DWORD *)(v9 + 176) = 0;
        *(_OWORD *)(v9 + 184) = 0uLL;
        *(_OWORD *)(v9 + 200) = 0uLL;
        *(_DWORD *)(v9 + 216) = 0;
        *(_OWORD *)(v9 + 224) = 0uLL;
        *(_OWORD *)(v9 + 240) = 0uLL;
        *(_DWORD *)(v9 + 256) = 0;
        *(_DWORD *)(v9 + 296) = 0;
        *(_OWORD *)(v9 + 264) = 0uLL;
        *(_OWORD *)(v9 + 280) = 0uLL;
        *(_DWORD *)(v9 + 336) = 0;
        *(_OWORD *)(v9 + 304) = 0uLL;
        *(_OWORD *)(v9 + 320) = 0uLL;
        *(_DWORD *)(v9 + 376) = 0;
        *(_OWORD *)(v9 + 344) = 0uLL;
        *(_OWORD *)(v9 + 360) = 0uLL;
        *(_DWORD *)(v9 + 416) = 0;
        *(_OWORD *)(v9 + 384) = 0uLL;
        *(_OWORD *)(v9 + 400) = 0uLL;
        *(_DWORD *)(v9 + 456) = 0;
        *(_OWORD *)(v9 + 424) = 0uLL;
        *(_OWORD *)(v9 + 440) = 0uLL;
        *(_OWORD *)(v9 + 464) = 0uLL;
        *(_OWORD *)(v9 + 480) = 0uLL;
        v6 += 512;
        *(_DWORD *)(v9 + 496) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::MeshAssetInstance>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 96 * a2;
    v9 = a2;
    do
    {
      re::StringID::destroyString((re::StringID *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 96;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 96 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_QWORD *)(v7 + 77) = 0;
        *(_DWORD *)(v7 + 88) = 1065353216;
        v6 += 96;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void `anonymous namespace'::makeMeshAssetModelFromMeshModel(_anonymous_namespace_ *this, int32x4_t *a2, unint64_t a3, unint64_t a4)
{
  int32x4_t v8;
  unint64_t v9;
  unint64_t *v10;
  int32x4_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int32x4_t *v15;
  const re::MeshModel *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  _anonymous_namespace_ *v32;
  unint64_t v33;
  unint64_t v34;
  _anonymous_namespace_ *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  _anonymous_namespace_ *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _anonymous_namespace_ *v66;
  uint64_t v67;
  _anonymous_namespace_ *v68;
  uint64_t v69;
  unint64_t v70;
  _anonymous_namespace_ *BlendShapeGroupDefinitionFromGroup;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _anonymous_namespace_ *v86;
  uint64_t v87;
  unint64_t v88;
  unsigned __int16 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _anonymous_namespace_ *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned __int16 v109;
  uint64_t v110;
  uint64_t v111;
  _anonymous_namespace_ *v112;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _anonymous_namespace_ *v119;
  uint64_t v120;
  uint64_t v121;
  _anonymous_namespace_ *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _anonymous_namespace_ *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _anonymous_namespace_ *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _anonymous_namespace_ *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  int v201;
  int v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _anonymous_namespace_ *v209;
  _anonymous_namespace_ *v210;
  unint64_t v211;
  uint64_t v212;
  _DWORD *v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _anonymous_namespace_ *v219;
  unsigned int v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  float32x4_t *v228;
  float *v229;
  float v230;
  float v231;
  float v232;
  float32x4_t v233;
  _DWORD *v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  unint64_t v239;
  __int128 v240;
  unint64_t v241;
  uint64_t v242;
  __int128 v243;
  _anonymous_namespace_ *v244;
  const re::MeshModel *v245;
  __int128 v246;
  re::BlendShapeModelUtil *v247;
  re::ContactDeformerModelUtil *v248[2];
  __int128 v249;
  int32x4_t v250;
  int32x4_t v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _OWORD v256[2];
  __int128 v257;
  __int128 v258;
  int v259;
  __int128 v260;
  __int128 v261;
  int v262;
  __int128 v263;
  __int128 v264;
  int v265;
  __int128 v266;
  __int128 v267;
  int v268;
  __int128 v269;
  __int128 v270;
  int v271;
  __int128 v272;
  __int128 v273;
  int v274;
  __int128 v275;
  __int128 v276;
  int v277;
  __int128 v278;
  __int128 v279;
  int v280;
  __int128 v281;
  __int128 v282;
  int v283;
  uint64_t v284;
  _QWORD v285[2];
  int32x4_t v286;
  unint64_t v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  id v294[2];
  char v295;
  _OWORD v296[2];
  int32x4_t v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  _BYTE v302[32];
  __int128 v303;
  __int128 v304;
  int v305;
  __int128 v306;
  __int128 v307;
  int v308;
  __int128 v309;
  __int128 v310;
  int v311;
  __int128 v312;
  __int128 v313;
  int v314;
  __int128 v315;
  __int128 v316;
  int v317;
  __int128 v318;
  __int128 v319;
  int v320;
  __int128 v321;
  __int128 v322;
  int v323;
  __int128 v324;
  __int128 v325;
  int v326;
  __int128 v327;
  __int128 v328;
  int v329;
  uint64_t v330;
  _BYTE v331[40];
  __int128 v332;
  _BYTE v333[28];
  __int16 v334;
  _BYTE v335[10];
  _BYTE v336[12];
  __int16 v337;
  int v338;
  __int16 v339;
  unint64_t v340;
  __int16 v341;
  unint64_t v342;
  _OWORD v343[5];
  uint64_t v344;

  v344 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v249 = 0;
  *((_QWORD *)&v249 + 1) = &str_110;
  v8.i64[0] = 0x7F0000007FLL;
  v8.i64[1] = 0x7F0000007FLL;
  v250 = vdupq_n_s32(0x7F800000u);
  v251 = v8;
  v9 = (unint64_t)&v260 + 8;
  v284 = 0;
  v252 = 0u;
  v253 = 0u;
  v254 = 0u;
  v255 = 0u;
  memset(v256, 0, 28);
  v257 = 0u;
  v258 = 0u;
  v260 = 0u;
  v261 = 0u;
  v259 = 0;
  v262 = 0;
  v263 = 0u;
  v264 = 0u;
  v265 = 0;
  v266 = 0u;
  v267 = 0u;
  v268 = 0;
  v271 = 0;
  v269 = 0u;
  v270 = 0u;
  v272 = 0u;
  v273 = 0u;
  v274 = 0;
  v277 = 0;
  v275 = 0u;
  v276 = 0u;
  v278 = 0u;
  v279 = 0u;
  v280 = 0;
  v281 = 0u;
  v282 = 0u;
  v283 = 0;
  v10 = re::StringID::operator=((unint64_t *)&v249, a2->i64);
  v11 = a2[2];
  v250 = a2[1];
  v251 = v11;
  v12 = a2[3].u64[1];
  if ((unint64_t)v261 < v12)
    v10 = re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)&v260 + 1, a2[3].u64[1]);
  v245 = (const re::MeshModel *)a2;
  v15 = a2 + 5;
  v13 = a2[5].u64[0];
  v14 = (char *)v15->i64[1];
  if (*((_QWORD *)&v266 + 1))
  {
    if (v13)
    {
      re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)&v266 + 1, v14, v13);
      re::DynamicArray<re::MeshLodLevelInfo>::resize((uint64_t)&v266 + 8, v13);
    }
    else
    {
      *((_QWORD *)&v267 + 1) = 0;
      ++v268;
    }
  }
  else if (v13)
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)&v266 + 1, v13);
    ++v268;
    re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)&v266 + 1, v14, v13);
  }
  v16 = v245;
  if (v12)
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *((_QWORD *)v245 + 7);
      if (v19 <= v18)
        break;
      if (!LOBYTE(v296[0]))
      {
        v343[0] = v296[1];
        re::DynamicString::DynamicString((re::DynamicString *)&v343[1], (const re::DynamicString *)&v297);
        *(_BYTE *)this = 0;
        *((_OWORD *)this + 1) = v343[0];
        v23 = *((_QWORD *)&v343[2] + 1);
        *((_QWORD *)this + 4) = *(_QWORD *)&v343[1];
        *((_QWORD *)this + 7) = v23;
        *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)&v343[1] + 8);
        re::Result<re::MeshAssetPart,re::DetailedError>::~Result((uint64_t)v296);
        goto LABEL_310;
      }
      re::DynamicArray<re::MeshAssetPart>::add((_anonymous_namespace_ *)((char *)&v260 + 8), (uint64_t)&v296[1]);
      re::Result<re::MeshAssetPart,re::DetailedError>::~Result((uint64_t)v296);
      ++v18;
      v17 += 560;
      if (v12 == v18)
        goto LABEL_14;
    }
    v290 = 0;
    v298 = 0u;
    v299 = 0u;
    v297 = 0u;
    memset(v296, 0, sizeof(v296));
    v187 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v343[0]) = 136315906;
    *(_QWORD *)((char *)v343 + 4) = "operator[]";
    WORD6(v343[0]) = 1024;
    *(_DWORD *)((char *)v343 + 14) = 476;
    WORD1(v343[1]) = 2048;
    *(_QWORD *)((char *)&v343[1] + 4) = v18;
    WORD6(v343[1]) = 2048;
    *(_QWORD *)((char *)&v343[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_260:
    v46 = a3;
    goto LABEL_261;
  }
LABEL_14:
  *(_QWORD *)&v335[2] = 0;
  memset(v333, 0, sizeof(v333));
  v20 = *((_QWORD *)v245 + 7);
  v21 = *((_QWORD *)v245 + 22);
  if (v21)
    v22 = *(_QWORD *)(v21 + 8);
  else
    v22 = 0;
  v244 = this;
  v24 = 0;
  v25 = 0;
  v26 = (unint64_t)&v286;
  v247 = (const re::MeshModel *)((char *)v245 + 96);
  v27 = 0uLL;
  v28 = 0;
  if (!v20 || v22 != v20)
    goto LABEL_87;
  re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(v333, v20);
  v9 = 0;
  v30 = (uint64_t)&re::AssetErrorCategory(void)::instance;
  do
  {
    v295 = 0;
    v294[1] = 0;
    v294[0] = 0;
    v31 = re::SkinningModelUtil::skinnedInfluenceDataBuffer((uint64_t)v247, v9, &v295, (uint64_t)v294);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(v294, (uint64_t)&v290);
    if (!v31 || !(_BYTE)v290)
    {
      v331[0] = 0;
      *(_QWORD *)&v331[8] = 100;
      *(_QWORD *)&v331[16] = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)&v331[24] = v296[0];
      v332 = v296[1];
      v41 = 1;
      goto LABEL_82;
    }
    v288 = 0uLL;
    v289 = 0;
    if (v295)
    {
      v33 = *((_QWORD *)&v291 + 1);
      a4 = v291;
      v34 = *((_QWORD *)&v291 + 1) >> 2;
      if (v33 >= 4)
      {
        v36 = 0;
        v37 = *((_QWORD *)&v288 + 1);
        if (v34 <= 1)
          v38 = 1;
        else
          v38 = v34;
        v39 = (float *)(v289 + 4);
        while (v37 != v36)
        {
          v40 = *(_DWORD *)(a4 + 4 * v36);
          *((_DWORD *)v39 - 1) = v40 >> 22;
          *v39 = (float)(v40 & 0x3FFFFF) * 0.00000023842;
          v39 += 2;
          if (v38 == ++v36)
            goto LABEL_34;
        }
        *(_QWORD *)v336 = 0;
        v298 = 0u;
        v299 = 0u;
        v297 = 0u;
        memset(v296, 0, sizeof(v296));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v343[0]) = 136315906;
        *(_QWORD *)((char *)v343 + 4) = "operator[]";
        WORD6(v343[0]) = 1024;
        *(_DWORD *)((char *)v343 + 14) = 468;
        WORD1(v343[1]) = 2048;
        *(_QWORD *)((char *)&v343[1] + 4) = v37;
        WORD6(v343[1]) = 2048;
        *(_QWORD *)((char *)&v343[1] + 14) = v37;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_212;
      }
    }
    else
    {
      *(_QWORD *)&v296[0] = v291;
      *((_QWORD *)&v296[0] + 1) = *((_QWORD *)&v291 + 1) >> 3;
      v35 = re::FixedArray<re::SkinningInfluence>::operator=((_anonymous_namespace_ *)&v288, (uint64_t)v296);
    }
LABEL_34:
    v42 = *((_QWORD *)v245 + 22);
    if (v42 && *(_QWORD *)(v42 + 8) > v9)
    {
      a4 = *(unsigned __int8 *)(*(_QWORD *)(v42 + 16) + 72 * v9 + 2);
      v286 = 0uLL;
      v287 = 0;
      if (a4)
      {
        v43 = *((_QWORD *)&v288 + 1);
        v44 = *((_QWORD *)&v288 + 1) / a4;
        if (v43 >= a4)
        {
          v45 = 0;
          v46 = v286.u64[1];
          v47 = v287;
          if (v44 <= 1)
            v48 = 1;
          else
            v48 = v44;
          v49 = a4;
          while (v46 != v45)
          {
            *(_DWORD *)(v47 + 4 * v45) = v49;
            v49 += a4;
            if (v48 == ++v45)
              goto LABEL_58;
          }
          *(_QWORD *)v336 = 0;
          v298 = 0u;
          v299 = 0u;
          v297 = 0u;
          memset(v296, 0, sizeof(v296));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v343[0]) = 136315906;
          *(_QWORD *)((char *)v343 + 4) = "operator[]";
          WORD6(v343[0]) = 1024;
          *(_DWORD *)((char *)v343 + 14) = 468;
          WORD1(v343[1]) = 2048;
          *(_QWORD *)((char *)&v343[1] + 4) = v46;
          WORD6(v343[1]) = 2048;
          *(_QWORD *)((char *)&v343[1] + 14) = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_312:
          v285[0] = 0;
          memset(v343, 0, sizeof(v343));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v336 = 136315906;
          *(_QWORD *)&v336[4] = "operator[]";
          v337 = 1024;
          v338 = 476;
          v339 = 2048;
          v340 = v9;
          v341 = 2048;
          v342 = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_313:
          *(_QWORD *)v336 = 0;
          v298 = 0u;
          v299 = 0u;
          v297 = 0u;
          memset(v296, 0, sizeof(v296));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v333 = 136315906;
          *(_QWORD *)&v333[4] = "operator[]";
          *(_WORD *)&v333[12] = 1024;
          *(_DWORD *)&v333[14] = 789;
          *(_WORD *)&v333[18] = 2048;
          *(_QWORD *)&v333[20] = v46;
          v334 = 2048;
          *(_QWORD *)v335 = v29;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_314:
          *(_QWORD *)v333 = 0;
          v298 = 0u;
          v299 = 0u;
          v297 = 0u;
          memset(v296, 0, sizeof(v296));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 789;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = a4;
          *(_WORD *)&v331[28] = 2048;
          *(_QWORD *)&v331[30] = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_315:
          *(_QWORD *)v333 = 0;
          v298 = 0u;
          v299 = 0u;
          v297 = 0u;
          memset(v296, 0, sizeof(v296));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 789;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v46;
          *(_WORD *)&v331[28] = 2048;
          *(_QWORD *)&v331[30] = v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_316:
          re::internal::assertLog((re::internal *)4, v51, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
          _os_crash();
          __break(1u);
          goto LABEL_317;
        }
LABEL_58:
        v58 = *((_QWORD *)v245 + 22);
        if (v58 && *(_QWORD *)(v58 + 8) > v9)
          v59 = *(_DWORD *)(*(_QWORD *)(v58 + 16) + 72 * v9 + 4);
        else
          v59 = -1;
        LODWORD(v296[0]) = v59;
        *(_OWORD *)((char *)v296 + 8) = v288;
        v60 = v289;
        v289 = 0;
        v288 = 0uLL;
        *((_QWORD *)&v296[1] + 1) = v60;
        v26 = (unint64_t)&v286;
        v297 = v286;
        v61 = v287;
        v287 = 0;
        v286 = 0uLL;
        v298 = v61;
        v299 = 0uLL;
        v46 = *((_QWORD *)v245 + 7);
        if (v46 <= v9)
          goto LABEL_312;
        v62 = (_OWORD *)(*((_QWORD *)v245 + 8) + 560 * v9);
        v63 = v62[26];
        v65 = v62[23];
        v64 = v62[24];
        *(_OWORD *)v302 = v62[25];
        *(_OWORD *)&v302[16] = v63;
        v300 = v65;
        v301 = v64;
        v57 = re::DynamicArray<re::MeshAssetSkinningData>::add((_anonymous_namespace_ *)v333, (uint64_t)v296);
        if (*((_QWORD *)&v298 + 1))
        {
          if ((_QWORD)v299)
          {
            (*(void (**)(__n128))(**((_QWORD **)&v298 + 1) + 40))(v57);
            v299 = 0uLL;
          }
          *((_QWORD *)&v298 + 1) = 0;
        }
        if (v297.i64[0])
        {
          if (v297.i64[1])
          {
            (*(void (**)(__n128))(*(_QWORD *)v297.i64[0] + 40))(v57);
            v297.i64[1] = 0;
            *(_QWORD *)&v298 = 0;
          }
          v297.i64[0] = 0;
        }
        if (*((_QWORD *)&v296[0] + 1) && *(_QWORD *)&v296[1])
          (*(void (**)(__n128))(**((_QWORD **)&v296[0] + 1) + 40))(v57);
        v41 = 0;
        goto LABEL_76;
      }
    }
    else
    {
      v286 = 0uLL;
      v287 = 0;
    }
    re::SkinningModelUtil::skinnedEndIndicesBuffer(v247, v9, v336);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(v336, (uint64_t)v296);
    v46 = LOBYTE(v296[0]);
    if (LOBYTE(v296[0]))
    {
      v52 = 0;
      v53 = *(_QWORD *)&v296[1] >> 2;
      v285[0] = *((_QWORD *)&v296[0] + 1);
      v285[1] = *(_QWORD *)&v296[1] >> 2;
      memset(v343, 0, 24);
      if (*(_QWORD *)&v296[1] >= 4uLL)
      {
        re::FixedArray<int>::copy(v343, (uint64_t)v285);
        v52 = *(_QWORD *)&v343[0];
      }
      v54 = v286.i64[0];
      if (v286.i64[0] && v286.i64[0] != v52)
        goto LABEL_316;
      v55 = v286.i64[1];
      v56 = v287;
      v286.i64[0] = v52;
      v286.i64[1] = *((_QWORD *)&v343[0] + 1);
      *(_QWORD *)&v343[0] = v54;
      *((_QWORD *)&v343[0] + 1) = v55;
      v287 = *(_QWORD *)&v343[1];
      *(_QWORD *)&v343[1] = v56;
      if (v54 && v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
    }
    else
    {
      v331[0] = 0;
      *(_QWORD *)&v331[8] = 100;
      *(_QWORD *)&v331[16] = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)&v331[24] = v343[0];
      v332 = v343[1];
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v296);
    if (*(_QWORD *)v336)

    if ((_DWORD)v46)
      goto LABEL_58;
    v41 = 1;
LABEL_76:
    if (v286.i64[0] && v286.i64[1])
      (*(void (**)(__n128))(*(_QWORD *)v286.i64[0] + 40))(v57);
    if ((_QWORD)v288 && *((_QWORD *)&v288 + 1))
      (*(void (**)(__n128))(*(_QWORD *)v288 + 40))(v57);
LABEL_82:
    v16 = v245;
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v290);
    if (v294[0])

    if (v41)
      goto LABEL_88;
    ++v9;
  }
  while (v9 != v20);
  v28 = *(_QWORD *)v333;
  v27 = *(_OWORD *)&v333[8];
  v24 = *(_QWORD *)&v335[2];
  v25 = *(_DWORD *)&v333[24];
LABEL_87:
  *(_QWORD *)&v335[2] = 0;
  memset(v333, 0, 24);
  *(_DWORD *)&v333[24] = v25 + 1;
  v331[0] = 1;
  *(_QWORD *)&v331[8] = v28;
  *(_OWORD *)&v331[16] = v27;
  memset(v296, 0, 24);
  *(_QWORD *)&v332 = v24;
  v297.i64[0] = 0;
  DWORD2(v296[1]) = 2;
  *(_DWORD *)&v331[32] = 1;
  re::DynamicArray<re::MeshAssetSkinningData>::deinit((uint64_t)v296);
LABEL_88:
  re::DynamicArray<re::MeshAssetSkinningData>::deinit((uint64_t)v333);
  if (!v331[0])
  {
    v81 = *(_OWORD *)&v331[24];
    *(_QWORD *)&v331[32] = 0;
    *(_QWORD *)&v331[24] = 0;
    v82 = v332;
    v332 = 0uLL;
    *(_BYTE *)this = 0;
    *((_OWORD *)this + 1) = *(_OWORD *)&v331[8];
    *((_OWORD *)this + 2) = v81;
    *((_OWORD *)this + 3) = v82;
    re::Result<re::DynamicArray<re::MeshAssetSkinningData>,re::DetailedError>::~Result((uint64_t)v331);
    goto LABEL_310;
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v257 + 8, (uint64_t)&v331[8]);
  v66 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::MeshAssetSkinningData>,re::DetailedError>::~Result((uint64_t)v331);
  *(_QWORD *)&v331[32] = 0;
  memset(v331, 0, 28);
  v67 = *(_QWORD *)v247;
  v68 = this;
  if (*(_QWORD *)v247)
  {
    v69 = *(_QWORD *)(v67 + 40);
    v30 = (uint64_t)&str_110;
    if (v69 == *((_QWORD *)v16 + 7))
    {
      v70 = *(_QWORD *)(v67 + 64);
      re::DynamicArray<re::MeshAssetBlendShapeData>::resize((uint64_t)v331, v70);
      if (v70)
      {
        v46 = 0;
        v9 = (unint64_t)&v343[1] + 8;
        a4 = 1;
        while (1)
        {
          BlendShapeGroupDefinitionFromGroup = re::BlendShapeModelUtil::makeBlendShapeGroupDefinitionFromGroup(v247, (const DeformationModelData *)(a4 - 1), (unint64_t *)v343);
          if (!LOBYTE(v343[0]))
            break;
          v29 = *(uint64_t **)&v331[16];
          if (*(_QWORD *)&v331[16] <= v46)
            goto LABEL_313;
          v72 = (_QWORD *)(*(_QWORD *)&v331[32] + 56 * v46);
          v73 = *((_QWORD *)&v343[0] + 1);
          v74 = *(_QWORD *)&v343[1];
          *((_QWORD *)&v343[0] + 1) = 0;
          *(_QWORD *)&v343[1] = &str_110;
          v75 = v72[1];
          v76 = v73 & 0xFFFFFFFFFFFFFFFELL | *v72 & 1;
          v72[1] = v74;
          *((_QWORD *)&v296[0] + 1) = v75;
          *(_QWORD *)&v296[0] = v76;
          *v72 = v73;
          re::StringID::destroyString((re::StringID *)v296);
          re::FixedArray<float>::operator=(v72 + 2, (uint64_t *)&v343[1] + 1);
          v72[5] = *(_QWORD *)&v343[3];
          re::Result<re::BlendShapeGroupDefinition,re::DetailedError>::~Result((uint64_t)v343);
          v46 = a4;
          v80 = v70 > a4;
          a4 = (a4 + 1);
          if (!v80)
            goto LABEL_96;
        }
        LOBYTE(v290) = 0;
        *(_QWORD *)&v291 = 100;
        *((_QWORD *)&v291 + 1) = &re::AssetErrorCategory(void)::instance;
        v292 = v296[0];
        v293 = v296[1];
        re::Result<re::BlendShapeGroupDefinition,re::DetailedError>::~Result((uint64_t)v343);
      }
      else
      {
LABEL_96:
        if (v69)
        {
          v77 = 0;
          v78 = *(_QWORD *)v247;
          v46 = *(_QWORD *)&v331[16];
          v79 = *(_QWORD *)&v331[32];
          do
          {
            if (v78 && *(_QWORD *)(v78 + 40) > v77)
            {
              a4 = *(unsigned int *)(*(_QWORD *)(v78 + 48) + 4 * v77);
              v80 = (_DWORD)a4 != -1 && v70 > a4;
              if (v80)
              {
                if (v46 <= a4)
                  goto LABEL_319;
                *(_WORD *)(v79 + 56 * a4 + 48) = v77;
              }
            }
            ++v77;
          }
          while (v69 != v77);
        }
        else
        {
          v46 = *(_QWORD *)&v331[16];
        }
        v83 = *(_QWORD *)v331;
        v84 = *(_QWORD *)&v331[8];
        memset(v331, 0, 24);
        v85 = *(_QWORD *)&v331[32];
        *(_QWORD *)&v331[32] = 0;
        ++*(_DWORD *)&v331[24];
        LOBYTE(v290) = 1;
        *(_QWORD *)&v291 = v83;
        *((_QWORD *)&v291 + 1) = v84;
        *(_QWORD *)&v292 = v46;
        memset(v296, 0, 24);
        *(_QWORD *)&v293 = v85;
        v297.i64[0] = 0;
        DWORD2(v296[1]) = 2;
        DWORD2(v292) = 1;
        re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)v296);
      }
      v68 = this;
    }
    else
    {
      LOBYTE(v290) = 0;
      *(_QWORD *)&v291 = 100;
      *((_QWORD *)&v291 + 1) = &re::AssetErrorCategory(void)::instance;
      v292 = v296[0];
      v293 = v296[1];
    }
  }
  else
  {
    *(_QWORD *)&v331[32] = 0;
    memset(v331, 0, 24);
    *(_DWORD *)&v331[24] = 1;
    LOBYTE(v290) = 1;
    memset(v296, 0, 24);
    v291 = 0u;
    *(_QWORD *)&v292 = 0;
    v26 = (unint64_t)&v286;
    *(_QWORD *)&v293 = 0;
    v297.i64[0] = 0;
    DWORD2(v296[1]) = 2;
    DWORD2(v292) = 1;
    re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)v296);
    v30 = (uint64_t)&str_110;
  }
  re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)v331);
  if (!(_BYTE)v290)
  {
    v114 = v292;
    v292 = 0uLL;
    v115 = v293;
    v293 = 0uLL;
    *(_BYTE *)v68 = 0;
    *((_OWORD *)v68 + 1) = v291;
    *((_OWORD *)v68 + 2) = v114;
    *((_OWORD *)v68 + 3) = v115;
    re::Result<re::DynamicArray<re::MeshAssetBlendShapeData>,re::DetailedError>::~Result((uint64_t)&v290);
    goto LABEL_310;
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v256, (uint64_t)&v291);
  v86 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::MeshAssetBlendShapeData>,re::DetailedError>::~Result((uint64_t)&v290);
  *((_QWORD *)&v292 + 1) = 0;
  v290 = 0;
  v291 = 0uLL;
  LODWORD(v292) = 0;
  v87 = *((_QWORD *)v16 + 87);
  if (!v87)
  {
    *((_QWORD *)&v292 + 1) = 0;
    v290 = 0;
    v291 = 0u;
    LODWORD(v292) = 1;
    LOBYTE(v343[0]) = 1;
    memset(v296, 0, 24);
    memset((char *)v343 + 8, 0, 24);
    *((_QWORD *)&v343[2] + 1) = 0;
    v297.i64[0] = 0;
    DWORD2(v296[1]) = 2;
    LODWORD(v343[2]) = 1;
    re::DynamicArray<re::MeshAssetContactDeformerData>::deinit((uint64_t)v296);
LABEL_162:
    re::DynamicArray<re::MeshAssetContactDeformerData>::deinit((uint64_t)&v290);
    if (!LOBYTE(v343[0]))
    {
      v134 = *(_OWORD *)((char *)&v343[1] + 8);
      memset((char *)&v343[1] + 8, 0, 32);
      v135 = *((_QWORD *)&v343[2] + 1);
      v136 = *(_QWORD *)&v343[3];
      *(_BYTE *)v68 = 0;
      *((_OWORD *)v68 + 1) = *(_OWORD *)((char *)v343 + 8);
      *((_OWORD *)v68 + 2) = v134;
      *((_QWORD *)v68 + 6) = v135;
      *((_QWORD *)v68 + 7) = v136;
      re::Result<re::DynamicArray<re::MeshAssetContactDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
      goto LABEL_310;
    }
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v269 + 8, (uint64_t)v343 + 8);
    v119 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::MeshAssetContactDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
    *((_QWORD *)&v292 + 1) = 0;
    v290 = 0;
    v291 = 0uLL;
    LODWORD(v292) = 0;
    v120 = *((_QWORD *)v16 + 67);
    if (v120)
    {
      v121 = *(unsigned __int16 *)(v120 + 32);
      if (*((_QWORD *)v16 + 7) == v121)
      {
        v122 = v68;
        v123 = *(_QWORD *)(v120 + 8);
        v124 = (unsigned __int16)v123;
        v125 = (unsigned __int16)v123;
        re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize((uint64_t)&v290, (unsigned __int16)v123);
        if (v125)
        {
          v46 = 0;
          a4 = 8;
          v9 = 0xFFFFLL;
          do
          {
            v26 = *((_QWORD *)&v291 + 1);
            if (*((_QWORD *)&v291 + 1) <= v46)
              goto LABEL_315;
            v126 = (uint64_t *)(*((_QWORD *)&v292 + 1) + a4);
            *(_WORD *)(*((_QWORD *)&v292 + 1) + a4 + 8) = -1;
            re::SmoothDeformerModelUtil::envelopeBufferNameForSmoothDataIndex(v247, (const DeformationModelData *)(unsigned __int16)v46, (re::StringID *)v331);
            v127 = *(_QWORD *)v331;
            v128 = *(_QWORD *)&v331[8];
            *(_QWORD *)&v331[8] = &str_110;
            *(_QWORD *)v331 = 0;
            v129 = v127 & 0xFFFFFFFFFFFFFFFELL | *(v126 - 1) & 1;
            v130 = *v126;
            *v126 = v128;
            *((_QWORD *)&v296[0] + 1) = v130;
            *(_QWORD *)&v296[0] = v129;
            *(v126 - 1) = v127;
            re::StringID::destroyString((re::StringID *)v296);
            re::StringID::destroyString((re::StringID *)v331);
            ++v46;
            a4 += 24;
          }
          while (v124 != v46);
        }
        if (v121)
        {
          v131 = 0;
          v132 = *((_QWORD *)v16 + 67);
          v46 = *((_QWORD *)&v291 + 1);
          v133 = *((_QWORD *)&v292 + 1);
          do
          {
            if (v132)
            {
              if (*(_QWORD *)(v132 + 32) > v131)
              {
                a4 = *(unsigned __int16 *)(*(_QWORD *)(v132 + 40) + 2 * v131);
                if (a4 < v124)
                {
                  if (v46 <= a4)
                    goto LABEL_321;
                  *(_WORD *)(v133 + 24 * *(unsigned __int16 *)(*(_QWORD *)(v132 + 40) + 2 * v131) + 16) = v131;
                }
              }
            }
            ++v131;
          }
          while (v121 != v131);
        }
        else
        {
          v46 = *((_QWORD *)&v291 + 1);
        }
        v137 = v290;
        v138 = v291;
        v290 = 0;
        v291 = 0uLL;
        v139 = *((_QWORD *)&v292 + 1);
        *((_QWORD *)&v292 + 1) = 0;
        LODWORD(v292) = v292 + 1;
        LOBYTE(v343[0]) = 1;
        *((_QWORD *)&v343[0] + 1) = v137;
        *(_QWORD *)&v343[1] = v138;
        *((_QWORD *)&v343[1] + 1) = v46;
        memset(v296, 0, 24);
        *((_QWORD *)&v343[2] + 1) = v139;
        v297.i64[0] = 0;
        DWORD2(v296[1]) = 2;
        LODWORD(v343[2]) = 1;
        re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v296);
        v68 = v122;
      }
      else
      {
        LOBYTE(v343[0]) = 0;
        *((_QWORD *)&v343[0] + 1) = 100;
        *(_QWORD *)&v343[1] = &re::AssetErrorCategory(void)::instance;
        *(_OWORD *)((char *)&v343[1] + 8) = v296[0];
        *(_OWORD *)((char *)&v343[2] + 8) = v296[1];
      }
    }
    else
    {
      *((_QWORD *)&v292 + 1) = 0;
      v290 = 0;
      v291 = 0u;
      LODWORD(v292) = 1;
      LOBYTE(v343[0]) = 1;
      memset(v296, 0, 24);
      memset((char *)v343 + 8, 0, 24);
      *((_QWORD *)&v343[2] + 1) = 0;
      v297.i64[0] = 0;
      DWORD2(v296[1]) = 2;
      LODWORD(v343[2]) = 1;
      re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v296);
    }
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v290);
    if (LOBYTE(v343[0]))
    {
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v272 + 8, (uint64_t)v343 + 8);
      v140 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::MeshAssetSmoothDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
      *((_QWORD *)&v292 + 1) = 0;
      v290 = 0;
      v291 = 0uLL;
      LODWORD(v292) = 0;
      v141 = *((_QWORD *)v16 + 77);
      if (v141)
      {
        v142 = *(unsigned __int16 *)(v141 + 32);
        if (*((_QWORD *)v16 + 7) == v142)
        {
          v143 = *(_QWORD *)(v141 + 8);
          v144 = (unsigned __int16)v143;
          v242 = (unsigned __int16)v143;
          re::DynamicArray<re::MeshAssetWrapDeformerData>::resize((uint64_t)&v290, (unsigned __int16)v143);
          if (!v144)
          {
LABEL_199:
            if (v142)
            {
              v156 = 0;
              v16 = v245;
              v157 = *((_QWORD *)v245 + 77);
              v46 = *((_QWORD *)&v291 + 1);
              v158 = *((_QWORD *)&v292 + 1);
              v30 = (uint64_t)&str_110;
              do
              {
                if (v157)
                {
                  if (*(_QWORD *)(v157 + 32) > v156)
                  {
                    a4 = *(unsigned __int16 *)(*(_QWORD *)(v157 + 40) + 2 * v156);
                    if (a4 < v242)
                    {
                      if (v46 <= a4)
                        goto LABEL_325;
                      *(_WORD *)(v158 + 112 * *(unsigned __int16 *)(*(_QWORD *)(v157 + 40) + 2 * v156) + 104) = v156;
                    }
                  }
                }
                ++v156;
              }
              while (v142 != v156);
              goto LABEL_213;
            }
LABEL_212:
            v46 = *((_QWORD *)&v291 + 1);
            v30 = (uint64_t)&str_110;
            v16 = v245;
LABEL_213:
            v162 = v290;
            v163 = v291;
            v290 = 0;
            v291 = 0uLL;
            v164 = *((_QWORD *)&v292 + 1);
            *((_QWORD *)&v292 + 1) = 0;
            LODWORD(v292) = v292 + 1;
            LOBYTE(v343[0]) = 1;
            *((_QWORD *)&v343[0] + 1) = v162;
            *(_QWORD *)&v343[1] = v163;
            *((_QWORD *)&v343[1] + 1) = v46;
            memset(v296, 0, 24);
            *((_QWORD *)&v343[2] + 1) = v164;
            v297.i64[0] = 0;
            DWORD2(v296[1]) = 2;
            LODWORD(v343[2]) = 1;
            re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit((uint64_t)v296);
            v68 = v244;
            goto LABEL_214;
          }
          v145 = 0;
          v26 = 0;
          v30 = 112 * v242;
          while (1)
          {
            v46 = *((_QWORD *)&v291 + 1);
            if (*((_QWORD *)&v291 + 1) <= v26)
              break;
            v146 = *((_QWORD *)&v292 + 1);
            a4 = *((_QWORD *)&v292 + 1) + v145;
            v9 = (unsigned __int16)v26;
            re::WrapDeformerModelUtil::targetMeshInstanceNameForWrapDataIndex(v247, (const DeformationModelData *)v9, (re::StringID *)v331);
            v147 = *(_QWORD *)v331;
            v148 = *(_QWORD *)&v331[8];
            *(_QWORD *)&v331[8] = &str_110;
            *(_QWORD *)v331 = 0;
            v149 = *(_QWORD *)(a4 + 8);
            v150 = v147 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)a4 & 1;
            *(_QWORD *)(a4 + 8) = v148;
            *((_QWORD *)&v296[0] + 1) = v149;
            *(_QWORD *)&v296[0] = v150;
            *(_QWORD *)a4 = v147;
            re::StringID::destroyString((re::StringID *)v296);
            re::StringID::destroyString((re::StringID *)v331);
            re::WrapDeformerModelUtil::envelopeBufferNameForWrapDataIndex(v247, (const DeformationModelData *)v9, (re::StringID *)v331);
            v151 = *(_QWORD *)v331;
            v152 = *(_QWORD *)&v331[8];
            *(_QWORD *)&v331[8] = &str_110;
            *(_QWORD *)v331 = 0;
            v153 = *(_QWORD *)(a4 + 24);
            v154 = v151 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a4 + 16) & 1;
            *(_QWORD *)(a4 + 24) = v152;
            *((_QWORD *)&v296[0] + 1) = v153;
            *(_QWORD *)&v296[0] = v154;
            *(_QWORD *)(a4 + 16) = v151;
            re::StringID::destroyString((re::StringID *)v296);
            re::StringID::destroyString((re::StringID *)v331);
            re::WrapDeformerModelUtil::faceIndicesForWrapDataIndex(v247, (const DeformationModelData *)v9, (uint64_t)v296);
            re::FixedArray<float>::operator=((uint64_t *)(a4 + 32), (uint64_t *)v296);
            if (*(_QWORD *)&v296[0] && *((_QWORD *)&v296[0] + 1))
              (*(void (**)(void))(**(_QWORD **)&v296[0] + 40))();
            re::WrapDeformerModelUtil::faceCoordinatesForWrapDataIndex(v247, (const DeformationModelData *)(unsigned __int16)v26, (uint64_t *)v296);
            re::FixedArray<float>::operator=((uint64_t *)(a4 + 56), (uint64_t *)v296);
            if (*(_QWORD *)&v296[0] && *((_QWORD *)&v296[0] + 1))
              (*(void (**)(void))(**(_QWORD **)&v296[0] + 40))();
            re::WrapDeformerModelUtil::positionOffsetsForWrapDataIndex(v247, (const DeformationModelData *)(unsigned __int16)v26, (uint64_t *)v296);
            v155 = v146 + v145;
            re::FixedArray<float>::operator=((uint64_t *)(v155 + 80), (uint64_t *)v296);
            if (*(_QWORD *)&v296[0] && *((_QWORD *)&v296[0] + 1))
              (*(void (**)(void))(**(_QWORD **)&v296[0] + 40))();
            *(_WORD *)(v155 + 104) = -1;
            ++v26;
            v145 += 112;
            if (v30 == v145)
              goto LABEL_199;
          }
LABEL_317:
          *(_QWORD *)v333 = 0;
          v298 = 0u;
          v299 = 0u;
          v297 = 0u;
          memset(v296, 0, sizeof(v296));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 789;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v26;
          *(_WORD *)&v331[28] = 2048;
          *(_QWORD *)&v331[30] = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_318;
        }
        LOBYTE(v343[0]) = 0;
        *((_QWORD *)&v343[0] + 1) = 100;
        *(_QWORD *)&v343[1] = &re::AssetErrorCategory(void)::instance;
        *(_OWORD *)((char *)&v343[1] + 8) = v296[0];
        *(_OWORD *)((char *)&v343[2] + 8) = v296[1];
      }
      else
      {
        *((_QWORD *)&v292 + 1) = 0;
        v290 = 0;
        v291 = 0u;
        LODWORD(v292) = 1;
        LOBYTE(v343[0]) = 1;
        memset(v296, 0, 24);
        memset((char *)v343 + 8, 0, 24);
        *((_QWORD *)&v343[2] + 1) = 0;
        v297.i64[0] = 0;
        DWORD2(v296[1]) = 2;
        LODWORD(v343[2]) = 1;
        re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit((uint64_t)v296);
      }
LABEL_214:
      re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit((uint64_t)&v290);
      if (!LOBYTE(v343[0]))
      {
        v179 = *(_OWORD *)((char *)&v343[1] + 8);
        memset((char *)&v343[1] + 8, 0, 32);
        v180 = *((_QWORD *)&v343[2] + 1);
        v181 = *(_QWORD *)&v343[3];
        *(_BYTE *)v68 = 0;
        *((_OWORD *)v68 + 1) = *(_OWORD *)((char *)v343 + 8);
        *((_OWORD *)v68 + 2) = v179;
        *((_QWORD *)v68 + 6) = v180;
        *((_QWORD *)v68 + 7) = v181;
        re::Result<re::DynamicArray<re::MeshAssetWrapDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
        goto LABEL_310;
      }
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v275 + 8, (uint64_t)v343 + 8);
      v165 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::MeshAssetWrapDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
      *((_QWORD *)&v292 + 1) = 0;
      v290 = 0;
      v291 = 0uLL;
      LODWORD(v292) = 0;
      v166 = *((_QWORD *)v16 + 62);
      if (!v166)
      {
        *((_QWORD *)&v292 + 1) = 0;
        v290 = 0;
        v291 = 0u;
        LODWORD(v292) = 1;
        LOBYTE(v343[0]) = 1;
        memset(v296, 0, 24);
        memset((char *)v343 + 8, 0, 24);
        *((_QWORD *)&v343[2] + 1) = 0;
        v297.i64[0] = 0;
        DWORD2(v296[1]) = 2;
        LODWORD(v343[2]) = 1;
        re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v296);
        goto LABEL_237;
      }
      v167 = *(unsigned __int16 *)(v166 + 32);
      if (*((_QWORD *)v16 + 7) != v167)
      {
        LOBYTE(v343[0]) = 0;
        *((_QWORD *)&v343[0] + 1) = 100;
        *(_QWORD *)&v343[1] = &re::AssetErrorCategory(void)::instance;
        *(_OWORD *)((char *)&v343[1] + 8) = v296[0];
        *(_OWORD *)((char *)&v343[2] + 8) = v296[1];
        goto LABEL_237;
      }
      v91 = (unint64_t)v68;
      v168 = *(_QWORD *)(v166 + 8);
      v169 = (unsigned __int16)v168;
      v170 = (unsigned __int16)v168;
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize((uint64_t)&v290, (unsigned __int16)v168);
      if (!v170)
      {
LABEL_221:
        if (!v167)
          goto LABEL_235;
        v176 = 0;
        v177 = *((_QWORD *)v16 + 62);
        v46 = *((_QWORD *)&v291 + 1);
        v178 = *((_QWORD *)&v292 + 1);
        do
        {
          if (v177)
          {
            if (*(_QWORD *)(v177 + 32) > v176)
            {
              a4 = *(unsigned __int16 *)(*(_QWORD *)(v177 + 40) + 2 * v176);
              if (a4 < v169)
              {
                if (v46 <= a4)
                  goto LABEL_326;
                *(_WORD *)(v178 + 24 * *(unsigned __int16 *)(*(_QWORD *)(v177 + 40) + 2 * v176) + 16) = v176;
              }
            }
          }
          ++v176;
        }
        while (v167 != v176);
        goto LABEL_236;
      }
      v46 = 0;
      a4 = 8;
      v9 = 0xFFFFLL;
      while (1)
      {
        v26 = *((_QWORD *)&v291 + 1);
        if (*((_QWORD *)&v291 + 1) <= v46)
          break;
        v171 = *((_QWORD *)&v292 + 1) + a4;
        re::OffsetsDeformerModelUtil::envelopeBufferNameForOffsetsDataIndex(v247, (const DeformationModelData *)(unsigned __int16)v46, (re::StringID *)v331);
        v172 = *(_QWORD *)v331;
        v173 = *(_QWORD *)&v331[8];
        *(_QWORD *)&v331[8] = &str_110;
        *(_QWORD *)v331 = 0;
        v174 = v172 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v171 - 8) & 1;
        v175 = *(_QWORD *)v171;
        *(_QWORD *)v171 = v173;
        *((_QWORD *)&v296[0] + 1) = v175;
        *(_QWORD *)&v296[0] = v174;
        *(_QWORD *)(v171 - 8) = v172;
        re::StringID::destroyString((re::StringID *)v296);
        re::StringID::destroyString((re::StringID *)v331);
        *(_WORD *)(v171 + 8) = -1;
        ++v46;
        a4 += 24;
        if (v169 == v46)
          goto LABEL_221;
      }
LABEL_318:
      *(_QWORD *)v333 = 0;
      v298 = 0u;
      v299 = 0u;
      v297 = 0u;
      memset(v296, 0, sizeof(v296));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v331 = 136315906;
      *(_QWORD *)&v331[4] = "operator[]";
      *(_WORD *)&v331[12] = 1024;
      *(_DWORD *)&v331[14] = 789;
      *(_WORD *)&v331[18] = 2048;
      *(_QWORD *)&v331[20] = v46;
      *(_WORD *)&v331[28] = 2048;
      *(_QWORD *)&v331[30] = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_319:
      *(_QWORD *)v333 = 0;
      v298 = 0u;
      v299 = 0u;
      v297 = 0u;
      memset(v296, 0, sizeof(v296));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v343[0]) = 136315906;
      *(_QWORD *)((char *)v343 + 4) = "operator[]";
      WORD6(v343[0]) = 1024;
      *(_DWORD *)((char *)v343 + 14) = 789;
      WORD1(v343[1]) = 2048;
      *(_QWORD *)((char *)&v343[1] + 4) = a4;
      WORD6(v343[1]) = 2048;
      *(_QWORD *)((char *)&v343[1] + 14) = v46;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_320:
      *(_QWORD *)v333 = 0;
      v298 = 0u;
      v299 = 0u;
      v297 = 0u;
      memset(v296, 0, sizeof(v296));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v331 = 136315906;
      *(_QWORD *)&v331[4] = "operator[]";
      *(_WORD *)&v331[12] = 1024;
      *(_DWORD *)&v331[14] = 789;
      *(_WORD *)&v331[18] = 2048;
      *(_QWORD *)&v331[20] = v26;
      *(_WORD *)&v331[28] = 2048;
      *(_QWORD *)&v331[30] = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_321:
      *(_QWORD *)v333 = 0;
      v298 = 0u;
      v299 = 0u;
      v297 = 0u;
      memset(v296, 0, sizeof(v296));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v331 = 136315906;
      *(_QWORD *)&v331[4] = "operator[]";
      *(_WORD *)&v331[12] = 1024;
      *(_DWORD *)&v331[14] = 789;
      *(_WORD *)&v331[18] = 2048;
      *(_QWORD *)&v331[20] = a4;
      *(_WORD *)&v331[28] = 2048;
      *(_QWORD *)&v331[30] = v46;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_322:
      *(_QWORD *)v333 = 0;
      v298 = 0u;
      v299 = 0u;
      v297 = 0u;
      memset(v296, 0, sizeof(v296));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v343[0]) = 136315906;
      *(_QWORD *)((char *)v343 + 4) = "operator[]";
      WORD6(v343[0]) = 1024;
      *(_DWORD *)((char *)v343 + 14) = 468;
      WORD1(v343[1]) = 2048;
      *(_QWORD *)((char *)&v343[1] + 4) = v46;
      WORD6(v343[1]) = 2048;
      *(_QWORD *)((char *)&v343[1] + 14) = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_323;
    }
LABEL_208:
    v159 = *(_OWORD *)((char *)&v343[1] + 8);
    memset((char *)&v343[1] + 8, 0, 32);
    v160 = *((_QWORD *)&v343[2] + 1);
    v161 = *(_QWORD *)&v343[3];
    *(_BYTE *)v68 = 0;
    *((_OWORD *)v68 + 1) = *(_OWORD *)((char *)v343 + 8);
    *((_OWORD *)v68 + 2) = v159;
    *((_QWORD *)v68 + 6) = v160;
    *((_QWORD *)v68 + 7) = v161;
    re::Result<re::DynamicArray<re::MeshAssetSmoothDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
    goto LABEL_310;
  }
  if (*(_QWORD *)(v87 + 32) != *((_QWORD *)v16 + 7))
  {
    LOBYTE(v343[0]) = 0;
    *((_QWORD *)&v343[0] + 1) = 100;
    *(_QWORD *)&v343[1] = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)((char *)&v343[1] + 8) = v296[0];
    *(_OWORD *)((char *)&v343[2] + 8) = v296[1];
    goto LABEL_162;
  }
  v239 = *(_QWORD *)(v87 + 32);
  v88 = *(_QWORD *)(v87 + 56);
  re::DynamicArray<re::MeshAssetContactDeformerData>::resize((uint64_t)&v290, v88);
  v241 = v88;
  if (!v88)
  {
LABEL_144:
    if (v239)
    {
      v109 = 0;
      v110 = *((_QWORD *)v16 + 87);
      v46 = *((_QWORD *)&v291 + 1);
      v111 = *((_QWORD *)&v292 + 1);
      v112 = v244;
      v30 = (uint64_t)&str_110;
      do
      {
        if (v110 && *(_QWORD *)(v110 + 56) > (unint64_t)v109)
        {
          a4 = *(unsigned __int16 *)(*(_QWORD *)(v110 + 64) + 2 * v109);
          if (a4 != 0xFFFF && v241 > a4)
          {
            if (v46 <= a4)
              goto LABEL_324;
            *(_WORD *)(v111 + 48 * *(unsigned __int16 *)(*(_QWORD *)(v110 + 64) + 2 * v109) + 40) = v109;
          }
        }
        ++v109;
      }
      while (v239 > v109);
    }
    else
    {
      v46 = *((_QWORD *)&v291 + 1);
      v112 = v244;
      v30 = (uint64_t)&str_110;
    }
    v116 = v290;
    v117 = v291;
    v290 = 0;
    v291 = 0uLL;
    v118 = *((_QWORD *)&v292 + 1);
    *((_QWORD *)&v292 + 1) = 0;
    LODWORD(v292) = v292 + 1;
    LOBYTE(v343[0]) = 1;
    *((_QWORD *)&v343[0] + 1) = v116;
    *(_QWORD *)&v343[1] = v117;
    *((_QWORD *)&v343[1] + 1) = v46;
    memset(v296, 0, 24);
    *((_QWORD *)&v343[2] + 1) = v118;
    v297.i64[0] = 0;
    DWORD2(v296[1]) = 2;
    LODWORD(v343[2]) = 1;
    re::DynamicArray<re::MeshAssetContactDeformerData>::deinit((uint64_t)v296);
    v68 = v112;
    goto LABEL_162;
  }
  a4 = 0;
  v89 = 0;
  v9 = 24;
  while (1)
  {
    v46 = *((_QWORD *)&v291 + 1);
    if (*((_QWORD *)&v291 + 1) <= a4)
      goto LABEL_314;
    v90 = *((_QWORD *)v16 + 87);
    if (v90 && *(_QWORD *)(v90 + 32) > (unint64_t)v89)
      v91 = *(_QWORD *)(*(_QWORD *)(v90 + 40) + 24 * v89 + 8);
    else
      v91 = 0;
    v92 = *((_QWORD *)&v292 + 1);
    v93 = *((_QWORD *)&v292 + 1) + 48 * a4;
    v30 = 48;
    *(_WORD *)(v93 + 40) = -1;
    re::ContactDeformerModelUtil::offsetBufferName(v247, (const DeformationModelData *)v89, (re::StringID *)v331);
    v94 = *(_QWORD *)v331;
    v95 = *(_QWORD *)&v331[8];
    *(_QWORD *)&v331[8] = &str_110;
    *(_QWORD *)v331 = 0;
    v96 = *(_QWORD *)(v93 + 8);
    v97 = v94 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v93 & 1;
    *(_QWORD *)(v93 + 8) = v95;
    *((_QWORD *)&v296[0] + 1) = v96;
    *(_QWORD *)&v296[0] = v97;
    *(_QWORD *)v93 = v94;
    re::StringID::destroyString((re::StringID *)v296);
    re::StringID::destroyString((re::StringID *)v331);
    v26 = v93 + 16;
    if (v91)
      break;
LABEL_143:
    a4 = ++v89;
    v16 = v245;
    if (v241 <= v89)
      goto LABEL_144;
  }
  v99 = 0;
  v100 = 0;
  v26 = 0;
  v101 = v92 + 48 * a4;
  v30 = v101 + 24;
  v102 = (uint64_t *)(v101 + 32);
  while (1)
  {
    v16 = *(const re::MeshModel **)v30;
    if (*(_QWORD *)v30 <= v26)
      break;
    v103 = *((_QWORD *)v245 + 87);
    if (v103 && *(_QWORD *)(v103 + 32) > (unint64_t)v89)
    {
      v104 = *(_QWORD *)(v103 + 40);
      if (*(_QWORD *)(v104 + 24 * v89 + 8) <= v26)
        v105 = -1;
      else
        v105 = *(_DWORD *)(*(_QWORD *)(v104 + 24 * v89 + 16) + v99);
      v106 = *v102;
      *(_DWORD *)(*v102 + v100) = v105;
      v108 = *(_QWORD *)(v103 + 40);
      v107 = 0;
      if (*(_QWORD *)(v108 + 24 * v89 + 8) > v26)
        v107 = *(_DWORD *)(*(_QWORD *)(v108 + 24 * v89 + 16) + v99 + 4);
    }
    else
    {
      v106 = *v102;
      *(_DWORD *)(*v102 + v100) = -1;
      v107 = 0;
    }
    *(_DWORD *)(v106 + v100 + 4) = v107;
    re::ContactDeformerModelUtil::heightMapForTarget(v247, (const DeformationModelData *)v89, v26, (uint64_t *)v333);
    v16 = *(const re::MeshModel **)v30;
    if (*(_QWORD *)v30 <= v26)
      goto LABEL_234;
    re::FixedArray<float>::operator=((uint64_t *)(*v102 + v100 + 8), (uint64_t *)v333);
    if (*(_QWORD *)v333 && *(_QWORD *)&v333[8])
      (*(void (**)(void))(**(_QWORD **)v333 + 40))();
    ++v26;
    v100 += 32;
    v99 += 16;
    if (v91 == v26)
      goto LABEL_143;
  }
  *(_QWORD *)v333 = 0;
  v298 = 0u;
  v299 = 0u;
  v297 = 0u;
  memset(v296, 0, sizeof(v296));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v331 = 136315906;
  *(_QWORD *)&v331[4] = "operator[]";
  *(_WORD *)&v331[12] = 1024;
  *(_DWORD *)&v331[14] = 468;
  *(_WORD *)&v331[18] = 2048;
  *(_QWORD *)&v331[20] = v26;
  *(_WORD *)&v331[28] = 2048;
  *(_QWORD *)&v331[30] = v16;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_234:
  *(_QWORD *)v336 = 0;
  v298 = 0u;
  v299 = 0u;
  v297 = 0u;
  memset(v296, 0, sizeof(v296));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v331 = 136315906;
  *(_QWORD *)&v331[4] = "operator[]";
  *(_WORD *)&v331[12] = 1024;
  *(_DWORD *)&v331[14] = 468;
  *(_WORD *)&v331[18] = 2048;
  *(_QWORD *)&v331[20] = v26;
  *(_WORD *)&v331[28] = 2048;
  *(_QWORD *)&v331[30] = v16;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_235:
  v46 = *((_QWORD *)&v291 + 1);
LABEL_236:
  v182 = v290;
  v183 = v291;
  v290 = 0;
  v291 = 0uLL;
  v184 = *((_QWORD *)&v292 + 1);
  *((_QWORD *)&v292 + 1) = 0;
  LODWORD(v292) = v292 + 1;
  LOBYTE(v343[0]) = 1;
  *((_QWORD *)&v343[0] + 1) = v182;
  *(_QWORD *)&v343[1] = v183;
  *((_QWORD *)&v343[1] + 1) = v46;
  memset(v296, 0, 24);
  *((_QWORD *)&v343[2] + 1) = v184;
  v297.i64[0] = 0;
  DWORD2(v296[1]) = 2;
  LODWORD(v343[2]) = 1;
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v296);
  v68 = (_anonymous_namespace_ *)v91;
LABEL_237:
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v290);
  if (!LOBYTE(v343[0]))
    goto LABEL_208;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v278 + 8, (uint64_t)v343 + 8);
  v185 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::MeshAssetSmoothDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
  *((_QWORD *)&v292 + 1) = 0;
  v290 = 0;
  v291 = 0uLL;
  LODWORD(v292) = 0;
  v186 = *((_QWORD *)v16 + 97);
  if (!v186)
  {
    *((_QWORD *)&v292 + 1) = 0;
    v290 = 0;
    v291 = 0u;
    LODWORD(v292) = 1;
    LOBYTE(v343[0]) = 1;
    memset(v296, 0, 24);
    memset((char *)v343 + 8, 0, 24);
    *((_QWORD *)&v343[2] + 1) = 0;
    v297.i64[0] = 0;
    DWORD2(v296[1]) = 2;
    LODWORD(v343[2]) = 1;
    re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)v296);
    goto LABEL_270;
  }
  v187 = *(unsigned __int16 *)(v186 + 104);
  if (*((_QWORD *)v16 + 7) != v187)
  {
    LOBYTE(v343[0]) = 0;
    *((_QWORD *)&v343[0] + 1) = 100;
    *(_QWORD *)&v343[1] = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)((char *)&v343[1] + 8) = v296[0];
    *(_OWORD *)((char *)&v343[2] + 8) = v296[1];
    goto LABEL_270;
  }
  a3 = *(unsigned __int16 *)(v186 + 56);
  if (*(_WORD *)(v186 + 56))
  {
    re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity(&v290, *(unsigned __int16 *)(v186 + 56));
    v188 = (char *)(a3 - *((_QWORD *)&v291 + 1));
    if (a3 > *((_QWORD *)&v291 + 1))
    {
      v189 = 48 * *((_QWORD *)&v291 + 1);
      do
      {
        v190 = *((_QWORD *)&v292 + 1) + v189;
        *(_QWORD *)v190 = 0;
        *(_QWORD *)(v190 + 8) = v30;
        *(_QWORD *)(v190 + 16) = 0;
        *(_QWORD *)(v190 + 24) = v30;
        *(_QWORD *)(v190 + 32) = 0;
        *(_WORD *)(v190 + 40) = 0;
        v189 += 48;
        --v188;
      }
      while (v188);
    }
    *((_QWORD *)&v291 + 1) = a3;
    LODWORD(v292) = v292 + 1;
  }
  if (!(_DWORD)a3)
    goto LABEL_260;
  v46 = 0;
  v26 = 0;
  a4 = 48 * a3;
  do
  {
    v9 = *((_QWORD *)&v291 + 1);
    if (*((_QWORD *)&v291 + 1) <= v26)
      goto LABEL_320;
    v30 = *((_QWORD *)&v292 + 1);
    v191 = *((_QWORD *)&v292 + 1) + v46;
    re::JiggleDeformerModelUtil::massBufferNameForJiggleDataIndex(v247, (const DeformationModelData *)(unsigned __int16)v26, (re::StringID *)v331);
    v192 = *(_QWORD *)v331;
    v193 = *(_QWORD *)&v331[8];
    *(_QWORD *)&v331[8] = &str_110;
    *(_QWORD *)v331 = 0;
    v194 = *(_QWORD *)(v191 + 8);
    v195 = v192 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v191 & 1;
    *(_QWORD *)(v191 + 8) = v193;
    *((_QWORD *)&v296[0] + 1) = v194;
    *(_QWORD *)&v296[0] = v195;
    *(_QWORD *)v191 = v192;
    re::StringID::destroyString((re::StringID *)v296);
    re::StringID::destroyString((re::StringID *)v331);
    re::JiggleDeformerModelUtil::envelopeBufferNameForJiggleDataIndex(v247, (const DeformationModelData *)(unsigned __int16)v26, (re::StringID *)v331);
    v196 = *(_QWORD *)v331;
    v197 = *(_QWORD *)&v331[8];
    *(_QWORD *)&v331[8] = &str_110;
    *(_QWORD *)v331 = 0;
    v198 = *(_QWORD *)(v191 + 24);
    v199 = v196 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v191 + 16) & 1;
    *(_QWORD *)(v191 + 24) = v197;
    *((_QWORD *)&v296[0] + 1) = v198;
    *(_QWORD *)&v296[0] = v199;
    *(_QWORD *)(v191 + 16) = v196;
    re::StringID::destroyString((re::StringID *)v296);
    re::StringID::destroyString((re::StringID *)v331);
    v200 = (_QWORD *)*((_QWORD *)v245 + 97);
    if (v200)
    {
      v201 = 0;
      v202 = 0;
      if (v200[7] > v26)
        v202 = *(_DWORD *)(v200[8] + 4 * v26);
      *(_DWORD *)(v30 + v46 + 32) = v202;
      v16 = v245;
      if (v200[10] > v26)
        v201 = *(_DWORD *)(v200[11] + 4 * v26);
    }
    else
    {
      *(_DWORD *)(v191 + 32) = 0;
      v201 = 0;
      v16 = v245;
    }
    v203 = v30 + v46;
    *(_DWORD *)(v203 + 36) = v201;
    *(_WORD *)(v203 + 40) = -1;
    ++v26;
    v46 += 48;
  }
  while (a4 != v46);
  v46 = *((_QWORD *)&v291 + 1);
LABEL_261:
  v204 = *((_QWORD *)&v292 + 1);
  if (v187)
  {
    v205 = 0;
    v206 = *((_QWORD *)v16 + 97);
    do
    {
      if (v206)
      {
        if (*(_QWORD *)(v206 + 104) > v205)
        {
          a4 = *(unsigned __int16 *)(*(_QWORD *)(v206 + 112) + 2 * v205);
          if (a4 < a3)
          {
            if (v46 <= a4)
              goto LABEL_327;
            *(_WORD *)(v204 + 48 * *(unsigned __int16 *)(*(_QWORD *)(v206 + 112) + 2 * v205) + 40) = v205;
          }
        }
      }
      ++v205;
    }
    while (v187 != v205);
  }
  v207 = v290;
  v208 = v291;
  *((_QWORD *)&v292 + 1) = 0;
  v290 = 0;
  v291 = 0uLL;
  LODWORD(v292) = v292 + 1;
  LOBYTE(v343[0]) = 1;
  *((_QWORD *)&v343[0] + 1) = v207;
  *(_QWORD *)&v343[1] = v208;
  *((_QWORD *)&v343[1] + 1) = v46;
  memset(v296, 0, 24);
  *((_QWORD *)&v343[2] + 1) = v204;
  v297.i64[0] = 0;
  DWORD2(v296[1]) = 2;
  LODWORD(v343[2]) = 1;
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)v296);
  v30 = (uint64_t)&str_110;
  v68 = v244;
LABEL_270:
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)&v290);
  if (LOBYTE(v343[0]))
  {
    v209 = v68;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v281 + 8, (uint64_t)v343 + 8);
    v210 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::MeshAssetJiggleDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
    if (*((_QWORD *)&v261 + 1))
    {
      LODWORD(v211) = 0;
      v212 = *((_QWORD *)&v261 + 1) << 8;
      v213 = (_DWORD *)(v263 + 48);
      do
      {
        v211 = (*v213 + v211);
        v213 += 64;
        v212 -= 256;
      }
      while (v212);
    }
    else
    {
      v211 = 0;
    }
    memset(v331, 0, 24);
    v217 = *((_QWORD *)&v261 + 1);
    v218 = *((_QWORD *)&v258 + 1);
    if (v217)
    {
      v220 = 0;
      a4 = 0;
      *(_OWORD *)v248 = xmmword_2260E5D70;
      v246 = xmmword_2260E5F40;
      v243 = xmmword_2260E5F20;
      v240 = xmmword_2260E5F10;
      while (1)
      {
        if (a4 >= v218)
        {
          v221 = 0;
        }
        else
        {
          v46 = *((_QWORD *)&v258 + 1);
          if (*((_QWORD *)&v258 + 1) <= a4)
            goto LABEL_329;
          v221 = *(_DWORD *)(v260 + 144 * a4) != -1;
        }
        v46 = *((_QWORD *)&v261 + 1);
        if (*((_QWORD *)&v261 + 1) <= a4)
          goto LABEL_328;
        v222 = v263 + (a4 << 8);
        v223 = *(_QWORD *)(v222 + 16);
        if (!v223)
          break;
        v224 = *(unsigned int *)(v222 + 48);
        v225 = *(_QWORD *)(v222 + 32);
        while (re::DynamicString::operator!=(v225, (uint64_t)&v290))
        {
          v225 += 80;
          if (!--v223)
            goto LABEL_302;
        }
        v227 = *(_QWORD *)(v225 + 64);
        if (v221)
        {
          v46 = *((_QWORD *)&v258 + 1);
          if (*((_QWORD *)&v258 + 1) <= a4)
            goto LABEL_330;
          if ((_DWORD)v224)
          {
            v228 = (float32x4_t *)(v260 + 144 * a4 + 80);
            v229 = (float *)(v227 + 8);
            while (1)
            {
              v46 = v220;
              v30 = *(_QWORD *)&v331[8];
              if (*(_QWORD *)&v331[8] <= (unint64_t)v220)
                break;
              ++v220;
              v230 = *(v229 - 2);
              v231 = *(v229 - 1);
              v232 = *v229;
              v229 += 3;
              v233 = vaddq_f32(v228[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v228, v230), v228[1], v231), v228[2], v232));
              *(float32x4_t *)(*(_QWORD *)&v331[16] + 16 * v46) = vdivq_f32(v233, (float32x4_t)vdupq_laneq_s32((int32x4_t)v233, 3));
              if (!--v224)
                goto LABEL_300;
            }
LABEL_323:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v343[0]) = 136315906;
            *(_QWORD *)((char *)v343 + 4) = "operator[]";
            WORD6(v343[0]) = 1024;
            *(_DWORD *)((char *)v343 + 14) = 468;
            WORD1(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 4) = v46;
            WORD6(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 14) = v30;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_324:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v331 = 136315906;
            *(_QWORD *)&v331[4] = "operator[]";
            *(_WORD *)&v331[12] = 1024;
            *(_DWORD *)&v331[14] = 789;
            *(_WORD *)&v331[18] = 2048;
            *(_QWORD *)&v331[20] = a4;
            *(_WORD *)&v331[28] = 2048;
            *(_QWORD *)&v331[30] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_325:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v331 = 136315906;
            *(_QWORD *)&v331[4] = "operator[]";
            *(_WORD *)&v331[12] = 1024;
            *(_DWORD *)&v331[14] = 789;
            *(_WORD *)&v331[18] = 2048;
            *(_QWORD *)&v331[20] = a4;
            *(_WORD *)&v331[28] = 2048;
            *(_QWORD *)&v331[30] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_326:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v331 = 136315906;
            *(_QWORD *)&v331[4] = "operator[]";
            *(_WORD *)&v331[12] = 1024;
            *(_DWORD *)&v331[14] = 789;
            *(_WORD *)&v331[18] = 2048;
            *(_QWORD *)&v331[20] = a4;
            *(_WORD *)&v331[28] = 2048;
            *(_QWORD *)&v331[30] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_327:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v331 = 136315906;
            *(_QWORD *)&v331[4] = "operator[]";
            *(_WORD *)&v331[12] = 1024;
            *(_DWORD *)&v331[14] = 789;
            *(_WORD *)&v331[18] = 2048;
            *(_QWORD *)&v331[20] = a4;
            *(_WORD *)&v331[28] = 2048;
            *(_QWORD *)&v331[30] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_328:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v343[0]) = 136315906;
            *(_QWORD *)((char *)v343 + 4) = "operator[]";
            WORD6(v343[0]) = 1024;
            *(_DWORD *)((char *)v343 + 14) = 797;
            WORD1(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 4) = a4;
            WORD6(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 14) = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_329:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v343[0]) = 136315906;
            *(_QWORD *)((char *)v343 + 4) = "operator[]";
            WORD6(v343[0]) = 1024;
            *(_DWORD *)((char *)v343 + 14) = 797;
            WORD1(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 4) = a4;
            WORD6(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 14) = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_330:
            *(_QWORD *)v333 = 0;
            v298 = 0u;
            v299 = 0u;
            v297 = 0u;
            memset(v296, 0, sizeof(v296));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v343[0]) = 136315906;
            *(_QWORD *)((char *)v343 + 4) = "operator[]";
            WORD6(v343[0]) = 1024;
            *(_DWORD *)((char *)v343 + 14) = 797;
            WORD1(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 4) = a4;
            WORD6(v343[1]) = 2048;
            *(_QWORD *)((char *)&v343[1] + 14) = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
        }
        else if ((_DWORD)v224)
        {
          v234 = (_DWORD *)(v227 + 8);
          do
          {
            v46 = v220;
            v30 = *(_QWORD *)&v331[8];
            if (*(_QWORD *)&v331[8] <= (unint64_t)v220)
              goto LABEL_322;
            *(_QWORD *)&v226 = *((_QWORD *)v234 - 1);
            DWORD2(v226) = *v234;
            ++v220;
            *(_OWORD *)(*(_QWORD *)&v331[16] + 16 * v46) = v226;
            v234 += 3;
          }
          while (--v224);
        }
LABEL_300:
        ++a4;
        v30 = (uint64_t)&str_110;
        if (a4 == v217)
          goto LABEL_301;
      }
LABEL_302:
      v30 = (uint64_t)&str_110;
    }
    else
    {
LABEL_301:
      *(double *)&v235 = MEMORY[0x227693C34](*(_QWORD *)&v331[8], *(_QWORD *)&v331[16]);
      v240 = v235;
      v243 = v236;
      v246 = v237;
      *(_OWORD *)v248 = v238;
    }
    if (v290 && (v291 & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v290 + 40))(v290, *((_QWORD *)&v291 + 1));
    if (*(_QWORD *)v331 && *(_QWORD *)&v331[8])
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v331 + 40))(*(_QWORD *)v331, *(_QWORD *)&v331[16]);
    v252 = v240;
    v253 = v243;
    v254 = v246;
    v255 = *(_OWORD *)v248;
    v296[0] = v249;
    *(_QWORD *)&v249 = 0;
    *((_QWORD *)&v249 + 1) = v30;
    v298 = v240;
    v299 = v243;
    v300 = v246;
    v301 = *(_OWORD *)v248;
    v296[1] = v250;
    v297 = v251;
    *(_QWORD *)v302 = *(_QWORD *)&v256[0];
    memset(v256, 0, 24);
    *(_OWORD *)&v302[8] = *(_OWORD *)((char *)v256 + 8);
    ++DWORD2(v256[1]);
    *(_DWORD *)&v302[24] = 1;
    v303 = v257;
    v304 = v258;
    v257 = 0u;
    v258 = 0u;
    v306 = v260;
    v260 = 0u;
    v307 = v261;
    v261 = 0u;
    ++v259;
    ++v262;
    v305 = 1;
    v308 = 1;
    v309 = v263;
    v310 = v264;
    v263 = 0u;
    v264 = 0u;
    ++v265;
    v311 = 1;
    v312 = v266;
    v313 = v267;
    v266 = 0u;
    v267 = 0u;
    ++v268;
    v314 = 1;
    v315 = v269;
    v316 = v270;
    v269 = 0u;
    v270 = 0u;
    ++v271;
    v317 = 1;
    v318 = v272;
    v319 = v273;
    v272 = 0u;
    v273 = 0u;
    ++v274;
    v320 = 1;
    v321 = v275;
    v322 = v276;
    v275 = 0u;
    v276 = 0u;
    ++v277;
    v323 = 1;
    v324 = v278;
    v325 = v279;
    v278 = 0u;
    v279 = 0u;
    ++v280;
    v326 = 1;
    v327 = v281;
    v328 = v282;
    v281 = 0u;
    v282 = 0u;
    v330 = v284;
    v284 = 0;
    ++v283;
    v329 = 1;
    *(_BYTE *)v209 = 1;
    re::MeshAssetModel::MeshAssetModel((uint64_t)v209 + 16, (uint64_t *)v296);
    re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)v296);
  }
  else
  {
    v214 = *(_OWORD *)((char *)&v343[1] + 8);
    memset((char *)&v343[1] + 8, 0, 32);
    v215 = *((_QWORD *)&v343[2] + 1);
    v216 = *(_QWORD *)&v343[3];
    *(_BYTE *)v68 = 0;
    *((_OWORD *)v68 + 1) = *(_OWORD *)((char *)v343 + 8);
    *((_OWORD *)v68 + 2) = v214;
    *((_QWORD *)v68 + 6) = v215;
    *((_QWORD *)v68 + 7) = v216;
    re::Result<re::DynamicArray<re::MeshAssetJiggleDeformerData>,re::DetailedError>::~Result((uint64_t)v343);
  }
LABEL_310:
  re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)&v249);
}

uint64_t re::DataArray<re::MeshInstance>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 144 * (unsigned __int16)a2;
}

_QWORD *re::MeshAssetLoader::downgradeMeshAssetFromFall2021@<X0>(_QWORD *this@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (this)
  {
    v5 = this;
    v6 = this[3];
    if (v6)
    {
      v7 = 0;
      v8 = 232;
      do
      {
        if (v5[3] <= v7)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        this = (_QWORD *)re::DynamicArray<re::MeshAssetSkeleton>::operator=(v5[5] + v8, v5 + 11);
        ++v7;
        v8 += 512;
      }
      while (v6 != v7);
    }
  }
  *a2 = 1;
  return this;
}

uint64_t re::DynamicArray<re::MeshAssetSkeleton>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetSkeleton>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetSkeleton>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetSkeleton>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::MeshAssetLoader::assetNonIntrospectionNonSharedDataByteSize(re::MeshAssetLoader *this, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const DeformationModelData *v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char **v33;
  size_t v34;
  re::SmoothDeformerModelUtil *v35;
  const DeformationModelData *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  const DeformationModelData *v41;
  uint64_t v42;
  const DeformationModelData *v43;
  uint64_t v44;
  const DeformationModelData *v45;
  uint64_t v46;
  const DeformationModelData *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  if (!a2)
    return 0;
  v2 = a2;
  v3 = 4 * a2[22] + 8 * a2[51] + 8 * a2[46] + 960;
  v4 = a2[55];
  if (v4)
  {
    v65 = a2[52];
    if (v65)
    {
      v5 = 0;
      v63 = v4 + 8;
      do
      {
        if (v2[52] <= v5)
          goto LABEL_63;
        v6 = re::DataArray<re::MeshModel>::get(v63, *(_QWORD *)(v2[54] + 8 * v5));
        v8 = (_QWORD *)v6;
        if ((*(_BYTE *)v6 & 1) != 0)
          v9 = strlen(*(const char **)(v6 + 8)) + 1;
        else
          v9 = 0;
        v66 = v3;
        v10 = v8[7];
        if (v10)
        {
          v11 = 0;
          v12 = v8[8];
          do
          {
            v13 = v12 + 560 * v11;
            v14 = v13;
            do
            {
              v15 = *(_QWORD *)(v14 + 32);
              v14 = *(_QWORD *)(v14 + 8);
              if (v14)
                v16 = v15 == 0;
              else
                v16 = 0;
            }
            while (v16);
            v17 = v12 + 560 * v11;
            do
            {
              v18 = v17;
              v17 = *(_QWORD *)(v17 + 8);
            }
            while (v17 && !*(_QWORD *)(v18 + 128));
            v19 = *(_QWORD *)(v18 + 64);
            v20 = v12 + 560 * v11;
            do
            {
              v21 = v20;
              v20 = *(_QWORD *)(v20 + 8);
            }
            while (v20 && !*(_QWORD *)(v21 + 128));
            v22 = v19 + v15 + (v19 >> 4) + *(_QWORD *)(v21 + 120);
            v23 = v12 + 560 * v11;
            do
            {
              v24 = *(_QWORD *)(v23 + 128);
              v23 = *(_QWORD *)(v23 + 8);
              if (v23)
                v25 = v24 == 0;
              else
                v25 = 0;
            }
            while (v25);
            do
            {
              v26 = *(_QWORD *)(v13 + 128);
              v13 = *(_QWORD *)(v13 + 8);
              if (v13)
                v27 = v26 == 0;
              else
                v27 = 0;
            }
            while (v27);
            v28 = (v26 & 7) != 0;
            if ((*(_BYTE *)(v12 + 560 * v11 + 504) & 1) != 0)
              v29 = strlen(*(const char **)(v12 + 560 * v11 + 512)) + 1;
            else
              v29 = 0;
            v30 = (v24 + 8 * v28) & 0xFFFFFFFFFFFFFFF8;
            v31 = *(_QWORD *)(v12 + 560 * v11 + 344);
            v32 = v30 + v29 + 16 * (v22 + v31) + 560;
            if (v31)
            {
              v33 = (const char **)(*(_QWORD *)(v12 + 560 * v11 + 352) + 8);
              do
              {
                if ((*(_BYTE *)(v33 - 1) & 1) != 0)
                  v34 = strlen(*v33) + 1;
                else
                  v34 = 0;
                v32 += v34;
                v33 += 2;
                --v31;
              }
              while (v31);
            }
            v9 += v32;
            ++v11;
          }
          while (v11 != v10);
        }
        v35 = (re::SmoothDeformerModelUtil *)(v8 + 12);
        v37 = re::BlendShapeModelUtil::computeBlendShapeModelSizeExcludingMetalBuffers((re::BlendShapeModelUtil *)(v8 + 12), v7);
        v38 = v8[22];
        if (v38)
          v39 = 72 * *(_QWORD *)(v38 + 8) + 16 * *(_QWORD *)(v38 + 32) + 48;
        else
          v39 = 0;
        v40 = re::ContactDeformerModelUtil::computeContactModelSizeExcludingMetalBuffers((re::ContactDeformerModelUtil *)(v8 + 12), v36);
        v42 = re::SmoothDeformerModelUtil::computeSmoothDeformerModelSizeExcludingMetalBuffers(v35, v41);
        v44 = re::WrapDeformerModelUtil::computeWrapDeformerModelSizeExcludingMetalBuffers(v35, v43);
        v46 = re::OffsetsDeformerModelUtil::computeOffsetsDeformerModelSizeExcludingMetalBuffers(v35, v45);
        v3 = v66
           + v9
           + v37
           + v39
           + v40
           + v42
           + v44
           + v46
           + re::JiggleDeformerModelUtil::computeJiggleDeformerModelSizeExcludingMetalBuffers(v35, v47)
           + 8;
        ++v5;
        v2 = a2;
      }
      while (v5 != v65);
      v4 = a2[55];
    }
    v48 = v2[47];
    if (v48)
    {
      v49 = 0;
      v50 = v4 + 72;
      while (v2[47] > v49)
      {
        v51 = re::DataArray<re::MeshInstance>::get(v50, *(_QWORD *)(v2[49] + 8 * v49));
        v52 = v51;
        if ((*(_BYTE *)v51 & 1) != 0)
          v53 = strlen(*(const char **)(v51 + 8)) + 1;
        else
          v53 = 0;
        v3 += 144 + v53 + 4 * *(_QWORD *)(v52 + 104) + 8 * *(_QWORD *)(v52 + 128);
        if (v48 == ++v49)
          goto LABEL_53;
      }
      goto LABEL_64;
    }
  }
LABEL_53:
  v54 = 24 * v2[27];
  v55 = (void *)v2[36];
  if (v55)
    v56 = objc_msgSend(v55, "estimatePayloadContainerOverheadSize");
  else
    v56 = 0;
  v58 = v2[22];
  v59 = v3
      + v54
      + v56
      + 4 * v58
      + re::MeshNameMap::estimateFootprint((re::MeshNameMap *)(v2 + 56))
      + 32 * (v2[113] + v2[110])
      - 424;
  v60 = v2[117];
  if (v60)
  {
    v61 = 0;
    v62 = 0;
    while (v2[117] > v62)
    {
      v59 += re::Skeleton::estimatedFootprint((const char **)(v2[118] + v61));
      ++v62;
      v61 += 160;
      if (v60 == v62)
        return v59 + 816 * v2[32];
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v59 + 816 * v2[32];
}

uint64_t re::MeshAsset::makeMeshAssetDataByCombiningPartsWithSharedMaterial(re::MeshAsset *this, const re::MeshAsset *a2)
{
  unint64_t v2;
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _BYTE *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _OWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  _OWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD *v87;
  uint64_t v88;
  unsigned int *v89;
  _anonymous_namespace_ *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  _OWORD *v103;
  _QWORD *v104;
  _OWORD *v105;
  int v106;
  _DWORD *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  _OWORD *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  _OWORD *v123;
  unint64_t v124;
  _anonymous_namespace_ *v125;
  re::StringID *v126;
  _anonymous_namespace_ *v127;
  _OWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  unint64_t v148;
  char v149;
  _OWORD *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  _OWORD *v160;
  _OWORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _OWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _OWORD *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  int v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  float32x4_t *v195;
  _anonymous_namespace_ *v196;
  uint64_t v197;
  int v198;
  const char *v199;
  const char **v200;
  const char *v201;
  char v202;
  _OWORD *v203;
  _OWORD *v204;
  float32x4_t v205;
  uint64_t v206;
  float32x4_t *v207;
  _anonymous_namespace_ *v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  char v212;
  unint64_t v213;
  _QWORD *v214;
  _anonymous_namespace_ *v215;
  unint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  unsigned int *v222;
  uint64_t v223;
  _BYTE *v224;
  float32x4_t *v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _anonymous_namespace_ *v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  _BYTE *v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  _anonymous_namespace_ *v245;
  const char *v246;
  uint64_t v247;
  unsigned int *v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  float *v255;
  uint64_t v256;
  _BYTE *v257;
  float32x4_t *v258;
  float32x4_t *v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int8x16_t v263;
  float v264;
  uint64_t v265;
  int v266;
  unint64_t v267;
  __int16 *v268;
  uint64_t v269;
  _WORD *v270;
  __int16 v271;
  const char *v272;
  int v273;
  _DWORD *v274;
  float *v275;
  unint64_t v276;
  float v277;
  float v278;
  float v279;
  float32x4_t v280;
  int *v281;
  uint64_t v282;
  _DWORD *v283;
  int v284;
  __n128 v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  char *v290;
  _anonymous_namespace_ *v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  float32x4_t *v296;
  float32x4_t *v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  int8x16_t v301;
  float v302;
  float32x4_t *v303;
  unint64_t v305;
  float *v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  re::StringID *v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  _OWORD *v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t result;
  unint64_t v323;
  _OWORD *v324;
  uint64_t v325;
  uint64_t v326;
  int32x4_t v327;
  unsigned int v328;
  unint64_t v329;
  _anonymous_namespace_ *v330;
  unint64_t *v331;
  int v332;
  const char *v333;
  _anonymous_namespace_ *v334;
  float32x4_t *v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  _BYTE *v339;
  char v340;
  unint64_t v341;
  int v342;
  _anonymous_namespace_ *v343;
  unsigned int *v344;
  uint64_t v345;
  char *__s1;
  int v347[2];
  unint64_t v348;
  _QWORD *v349;
  unsigned int *v350;
  unint64_t *v351;
  unint64_t v352;
  _QWORD *v353;
  unint64_t v354;
  BOOL v355;
  char *v356;
  unint64_t v357;
  StringID v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  int v363;
  char v364;
  int v365;
  uint64_t *v366;
  __int128 v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  int v372;
  re::StringID *v373;
  uint64_t *v374;
  unint64_t v375;
  int v376;
  unint64_t v377;
  unint64_t *v378;
  _BYTE v379[24];
  int v380;
  _BYTE v381[32];
  int v382;
  _BYTE v383[32];
  int v384;
  __int128 v385;
  __int128 v386;
  int v387;
  uint64_t v388;
  unint64_t v389;
  char *v390;
  uint64_t v391;
  __int128 v392;
  __int128 v393;
  _OWORD v394[3];
  _BYTE v395[40];
  _QWORD v396[3];
  int v397;
  uint64_t v398;
  uint64_t *v399;
  unint64_t v400;
  int v401;
  unint64_t v402;
  unint64_t *v403;
  _BYTE v404[104];
  int v405;
  float32x4_t v406;
  float32x4_t v407;
  int v408;
  uint64_t v409;
  _OWORD v410[3];
  __int128 v411;
  _BYTE v412[24];
  _BYTE v413[24];
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  char v419;
  char v420;
  char v421;
  char v422;
  char v423;
  char v424;
  _OWORD v425[2];
  int v426;
  uint64_t v427;
  _QWORD v428[5];
  uint64_t v429;
  unint64_t v430;
  int v431;
  uint64_t v432;
  __int16 v433;
  _BYTE v434[12];
  __int16 v435;
  int v436;
  __int16 v437;
  unint64_t v438;
  __int16 v439;
  unint64_t v440;
  _QWORD v441[6];
  __int128 v442;
  __int128 v443;
  uint64_t v444;

  MEMORY[0x24BDAC7A8](this);
  v5 = v4;
  v444 = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t)v379;
  memset(v379, 0, sizeof(v379));
  v380 = 0;
  v388 = 0;
  memset(v381, 0, sizeof(v381));
  v382 = 0;
  memset(v383, 0, sizeof(v383));
  v384 = 0;
  v385 = 0u;
  v386 = 0u;
  v387 = 0;
  if (v3[952])
  {
    re::MeshAsset::makeMeshAssetDataFromRegisteredMeshAsset((re::MeshAsset *)&v392, (const re::MeshAsset *)v3);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v379, (uint64_t)&v392);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v381[8], (uint64_t)v394 + 8);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v383[8], (uint64_t)v395);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v385 + 8, (uint64_t)v396);
    if (v396[0])
    {
      if (v398)
        (*(void (**)(_QWORD))(*(_QWORD *)v396[0] + 40))(v396[0]);
      v398 = 0;
      memset(v396, 0, sizeof(v396));
      ++v397;
    }
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v395);
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)v394 + 8);
    v3 = (_BYTE *)re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)&v392);
    v7 = v379;
  }
  else
  {
    v7 = v3 + 8;
  }
  v8 = *((_QWORD *)v7 + 2);
  if (!v8)
  {
    v85 = v392;
    v86 = v393;
    *(_BYTE *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 100;
    *(_QWORD *)(v5 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(v5 + 24) = v85;
    *(_OWORD *)(v5 + 40) = v86;
LABEL_462:
    if (*((_QWORD *)&v385 + 1))
    {
      if (v388)
        (*(void (**)(void))(**((_QWORD **)&v385 + 1) + 40))();
      v388 = 0;
      v386 = 0uLL;
      *((_QWORD *)&v385 + 1) = 0;
      ++v387;
    }
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v383[8]);
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v381[8]);
    return re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v379);
  }
  v353 = v7;
  v337 = v5;
  v9 = (uint64_t)&v399;
  v399 = 0;
  v400 = 0;
  v401 = 1;
  v402 = 0;
  v403 = 0;
  v10 = (uint64_t)re::DynamicOverflowArray<unsigned int,128ul>::setCapacity(&v399, v8);
  v11 = v401;
  v401 += 2;
  v12 = (v11 & 1) == 0;
  v13 = 128;
  if (v12)
    v13 = v402;
  if (v13 < v8)
    v10 = (uint64_t)re::DynamicOverflowArray<unsigned int,128ul>::setCapacity(&v399, v8);
  v14 = (unint64_t)&v402;
  v15 = v400;
  if (v400 < v8)
  {
    do
    {
      if ((v401 & 1) != 0)
        v16 = &v402;
      else
        v16 = v403;
      *((_DWORD *)v16 + v15++) = 0;
    }
    while (v8 != v15);
  }
  v17 = v404;
  v400 = v8;
  v401 += 2;
  v18 = v353;
  v19 = v353[2];
  v374 = 0;
  v375 = 0;
  v376 = 1;
  v20 = (unint64_t)&v377;
  v377 = 0;
  v378 = 0;
  if (v19)
  {
    v10 = re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul>::setCapacity((uint64_t *)&v374, v19);
    v21 = v376;
    v376 += 2;
    v12 = (v21 & 1) == 0;
    v22 = 128;
    if (v12)
      v22 = v377;
    if (v22 < v19)
      v10 = re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul>::setCapacity((uint64_t *)&v374, v19);
    v23 = v19 - v375;
    if (v19 > v375)
    {
      v24 = 67 * v375;
      do
      {
        if ((v376 & 1) != 0)
          v25 = &v377;
        else
          v25 = v378;
        v26 = &v25[v24];
        *v26 = 0;
        v26[1] = 0;
        *((_DWORD *)v26 + 4) = 1;
        v26[3] = 0;
        v26[4] = 0;
        v24 += 67;
        --v23;
      }
      while (v23);
    }
    v375 = v19;
    v376 += 2;
    v18 = v353;
    v17 = v404;
    if (v353[2])
    {
      v27 = 0;
      v28 = 0;
      while (1)
      {
        v29 = v375;
        if (v375 <= v28)
          goto LABEL_476;
        v14 = v18[4];
        v5 = v20;
        if ((v376 & 1) != 0)
          v30 = v20;
        else
          v30 = (unint64_t)v378;
        v31 = (_QWORD *)(v30 + 536 * v28);
        v32 = (_OWORD *)(v14 + (v28 << 9));
        v34 = *((_QWORD *)v32 + 26);
        v2 = (unint64_t)(v32 + 13);
        v33 = v34;
        v36 = v31[1];
        v35 = v31 + 1;
        v37 = v36 > v33;
        if (v36 >= v33)
        {
          v9 = (uint64_t)&v399;
          if (!v37)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (*v31)
        {
          if ((*(_DWORD *)(v30 + 536 * v28 + 16) & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          v10 = (uint64_t)re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity((_QWORD *)(v30 + 536 * v28), v33);
          v17 = v404;
          v39 = v30 + 536 * v28;
          v40 = *(_DWORD *)(v39 + 16) + 2;
          *(_DWORD *)(v39 + 16) = v40;
          if ((v40 & 1) != 0)
          {
LABEL_42:
            v38 = 64;
            goto LABEL_43;
          }
        }
        v38 = *(_QWORD *)(v30 + 536 * v28 + 24);
LABEL_43:
        if (v38 < v33)
        {
          v10 = (uint64_t)re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity((_QWORD *)(v30 + 536 * v28), v33);
          v17 = v404;
        }
        v41 = *v35;
        v9 = (uint64_t)&v399;
        if (*v35 < v33)
        {
          v42 = v30 + 536 * v28;
          v43 = (_BYTE *)(v42 + 16);
          v44 = v42 + 24;
          v45 = (uint64_t *)(v42 + 32);
          do
          {
            v46 = v44;
            if ((*v43 & 1) == 0)
              v46 = *v45;
            *(_QWORD *)(v46 + 8 * v41++) = 0;
          }
          while (v33 != v41);
        }
LABEL_50:
        *v35 = v33;
        *(_DWORD *)(v30 + 536 * v28 + 16) += 2;
LABEL_51:
        v47 = (_OWORD *)(v14 + (v28 << 9));
        v6 = (unint64_t)v379;
        v20 = v5;
        if (*((_QWORD *)v47 + 16))
          goto LABEL_59;
        if (*((_QWORD *)v47 + 21))
          goto LABEL_59;
        v48 = (_OWORD *)(v14 + (v28 << 9));
        if (*((_QWORD *)v48 + 36))
          goto LABEL_59;
        if (*((_QWORD *)v48 + 41))
          goto LABEL_59;
        v49 = (_OWORD *)(v14 + (v28 << 9));
        if (*((_QWORD *)v49 + 46))
          goto LABEL_59;
        if (*((_QWORD *)v49 + 51))
          goto LABEL_59;
        v50 = (_OWORD *)(v14 + (v28 << 9));
        if (*((_QWORD *)v50 + 56) || *((_QWORD *)v50 + 61))
          goto LABEL_59;
        if (*(_QWORD *)v2)
        {
          v53 = (_DWORD *)(*(_QWORD *)(v14 + (v28 << 9) + 224) + 64);
          v54 = *(_QWORD *)v2 << 8;
          while (!*v53)
          {
            v53 += 64;
            v54 -= 256;
            if (!v54)
              goto LABEL_70;
          }
LABEL_59:
          v29 = v400;
          if (v400 <= v28)
            goto LABEL_477;
          ++v27;
          v14 = (unint64_t)&v402;
          if ((v401 & 1) != 0)
            v51 = &v402;
          else
            v51 = v403;
          *((_DWORD *)v51 + v28) = v27;
          v18 = v353;
          v52 = v353[2];
          goto LABEL_64;
        }
LABEL_70:
        v10 = re::DynamicOverflowArray<unsigned int,128ul>::operator[]((uint64_t)&v399, v28);
        *(_DWORD *)v10 = 0;
        v52 = v353[2];
        if (v52 <= v28)
          goto LABEL_505;
        v55 = v353[4];
        v17 = v404;
        if (*(_QWORD *)(v55 + (v28 << 9) + 208))
        {
          v2 = 0;
          while (1)
          {
            v56 = *(_QWORD *)(v55 + (v28 << 9) + 224);
            v354 = v2;
            v57 = v56 + (v2 << 8);
            v58 = *(unsigned __int8 *)(v57 + 44);
            v10 = re::MeshPartFlags::flattenToRenderFlags((re::MeshPartFlags *)(v57 + 192));
            v2 = *(unsigned int *)(v57 + 232);
            if ((_DWORD)v2)
            {
              v59 = 0;
              v60 = (int *)(*(_QWORD *)(v57 + 216) + 8);
              while (1)
              {
                v61 = *v60;
                v60 += 20;
                if (v61 < 0)
                  break;
                if (v2 == ++v59)
                {
                  LODWORD(v59) = *(_DWORD *)(v57 + 232);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v59) = 0;
            }
            v62 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v58) ^ ((0xBF58476D1CE4E5B9 * v58) >> 27));
            v63 = 0xBF58476D1CE4E5B9 * (v10 ^ ((unint64_t)v10 >> 30));
            v64 = (((v62 ^ (v62 >> 31)) << 6)
                 - 0x61C8864680B583E9
                 + ((v62 ^ (v62 >> 31)) >> 2)
                 + ((0x94D049BB133111EBLL * (v63 ^ (v63 >> 27))) ^ ((0x94D049BB133111EBLL * (v63 ^ (v63 >> 27))) >> 31))) ^ v62 ^ (v62 >> 31);
            if ((_DWORD)v2 != (_DWORD)v59)
            {
              v65 = v59;
              v66 = v56 + (v354 << 8);
              v69 = *(_QWORD *)(v66 + 216);
              v68 = (uint64_t *)(v66 + 216);
              v67 = v69;
              do
              {
                v10 = re::Hash<re::DynamicString>::operator()((uint64_t)&v392, v67 + 80 * v65 + 16);
                v64 ^= (v64 << 6) - 0x61C8864680B583E9 + (v64 >> 2) + v10;
                v67 = *v68;
                if (*(_DWORD *)(v57 + 232) <= (v59 + 1))
                  v70 = v59 + 1;
                else
                  v70 = *(_DWORD *)(v57 + 232);
                v71 = v59;
                while (1)
                {
                  v65 = (v71 + 1);
                  if (v70 - 1 == v71)
                    break;
                  ++v71;
                  LODWORD(v59) = v65;
                  if ((*(_DWORD *)(v67 + 80 * v65 + 8) & 0x80000000) != 0)
                    goto LABEL_89;
                }
                LODWORD(v59) = v70;
LABEL_89:
                ;
              }
              while ((_DWORD)v2 != (_DWORD)v59);
            }
            v72 = *(_QWORD *)(v57 + 16);
            if (v72)
            {
              v73 = *(_QWORD *)(v57 + 32);
              v2 = v73 + 80 * v72;
              v6 = (unint64_t)v379;
              do
              {
                if ((*(_QWORD *)(v73 + 8) & 1) != 0)
                  v74 = *(const char **)(v73 + 16);
                else
                  v74 = (const char *)(v73 + 9);
                v10 = strncmp(v74, "original", 8uLL);
                if ((_DWORD)v10)
                {
                  if (*(_BYTE *)(v73 + 73) || !strcmp(v74, "indexTriangles"))
                  {
                    v9 = (uint64_t)&v399;
                  }
                  else
                  {
                    v77 = *(_QWORD *)(v73 + 48);
                    v9 = (uint64_t)&v399;
                    if (v77)
                    {
                      v78 = *(unsigned __int8 **)(v73 + 64);
                      do
                      {
                        v79 = *v78++;
                        v80 = 0x94D049BB133111EBLL
                            * ((0xBF58476D1CE4E5B9 * v79) ^ ((0xBF58476D1CE4E5B9 * v79) >> 27));
                        v64 ^= (v64 << 6) - 0x61C8864680B583E9 + (v64 >> 2) + (v80 ^ (v80 >> 31));
                        --v77;
                      }
                      while (v77);
                    }
                  }
                  v10 = re::Hash<re::DynamicString>::operator()((uint64_t)&v392, v73);
                  v75 = ((v64 << 6) - 0x61C8864680B583E9 + (v64 >> 2) + v10) ^ v64;
                  v76 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(v73 + 72)) ^ ((0xBF58476D1CE4E5B9
                                                                                   * *(unsigned __int8 *)(v73 + 72)) >> 27));
                  v64 = ((v75 << 6) - 0x61C8864680B583E9 + (v75 >> 2) + (v76 ^ (v76 >> 31))) ^ v75;
                }
                else
                {
                  v9 = (uint64_t)&v399;
                }
                v73 += 80;
              }
              while (v73 != v2);
            }
            else
            {
              v6 = (unint64_t)v379;
              v9 = (uint64_t)&v399;
            }
            v52 = v375;
            if (v375 <= v28)
              goto LABEL_506;
            v81 = (unint64_t)v378;
            if ((v376 & 1) != 0)
              v81 = v5;
            v52 = *(_QWORD *)(v81 + 536 * v28 + 8);
            v2 = v354;
            v17 = v404;
            if (v52 <= v354)
              goto LABEL_507;
            v20 = v5;
            v82 = (*(_BYTE *)(v81 + 536 * v28 + 16) & 1) != 0 ? v81 + 536 * v28 + 24 : *(_QWORD *)(v81 + 536 * v28 + 32);
            *(_QWORD *)(v82 + 8 * v354) = v64;
            v52 = v353[2];
            if (v52 <= v28)
              break;
            v2 = v354 + 1;
            v55 = v353[4];
            if (v354 + 1 >= *(_QWORD *)(v55 + (v28 << 9) + 208))
              goto LABEL_117;
          }
LABEL_505:
          *(_QWORD *)&v410[0] = 0;
          memset(v394, 0, sizeof(v394));
          v393 = 0u;
          v392 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v404 = 136315906;
          *(_QWORD *)&v404[4] = "operator[]";
          *(_WORD *)&v404[12] = 1024;
          *(_DWORD *)&v404[14] = 797;
          *(_WORD *)&v404[18] = 2048;
          *(_QWORD *)&v404[20] = v28;
          *(_WORD *)&v404[28] = 2048;
          *(_QWORD *)&v404[30] = v52;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_506:
          *(_QWORD *)&v410[0] = 0;
          *(_OWORD *)(v6 + 248) = 0u;
          *(_OWORD *)(v6 + 232) = 0u;
          *(_OWORD *)(v6 + 216) = 0u;
          *(_OWORD *)(v6 + 200) = 0u;
          *(_OWORD *)(v6 + 184) = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v404 = 136315906;
          *(_QWORD *)&v404[4] = "operator[]";
          *(_WORD *)&v404[12] = 1024;
          *(_DWORD *)&v404[14] = 858;
          *(_WORD *)&v404[18] = 2048;
          *(_QWORD *)&v404[20] = v28;
          *(_WORD *)&v404[28] = 2048;
          *(_QWORD *)&v404[30] = v52;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_507:
          *((_QWORD *)v17 + 260) = 0;
          *(_OWORD *)(v6 + 248) = 0u;
          *(_OWORD *)(v6 + 232) = 0u;
          *(_OWORD *)(v6 + 216) = 0u;
          *(_OWORD *)(v6 + 200) = 0u;
          *(_OWORD *)(v6 + 184) = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v404 = 136315906;
          *(_QWORD *)&v404[4] = "operator[]";
          *(_WORD *)&v404[12] = 1024;
          *(_DWORD *)&v404[14] = 858;
          *(_WORD *)&v404[18] = 2048;
          *(_QWORD *)&v404[20] = v2;
          *(_WORD *)&v404[28] = 2048;
          *(_QWORD *)&v404[30] = v52;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_508:
          re::internal::assertLog((re::internal *)4, v146, "assertion failure: '%s' (%s:line %i) ", "combinedPartCount + nonCombinedCount == partTotal", "combineParts", 3061);
          _os_crash();
          __break(1u);
LABEL_509:
          v256 = -1;
LABEL_510:
          v391 = 0;
          v442 = 0u;
          v443 = 0u;
          memset(v441, 0, sizeof(v441));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v434 = 136315906;
          *(_QWORD *)&v434[4] = "operator[]";
          v435 = 1024;
          v436 = 797;
          v437 = 2048;
          v438 = v256;
          v439 = 2048;
          v440 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_117:
        v18 = v353;
        v14 = (unint64_t)&v402;
LABEL_64:
        if (++v28 >= v52)
          goto LABEL_119;
      }
    }
  }
  v27 = 0;
  v52 = 0;
LABEL_119:
  if (v52 == v27)
  {
    v83 = v392;
    v84 = v393;
    *(_BYTE *)v337 = 0;
    *(_QWORD *)(v337 + 8) = 100;
    *(_QWORD *)(v337 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(v337 + 24) = v83;
    *(_OWORD *)(v337 + 40) = v84;
LABEL_448:
    if (v374)
    {
      v319 = v376;
      if (v375)
      {
        if ((v376 & 1) != 0)
          v320 = v20;
        else
          v320 = (uint64_t)v378;
        v321 = 536 * v375;
        do
        {
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v320);
          v320 += 536;
          v321 -= 536;
        }
        while (v321);
        v319 = v376;
      }
      if ((v319 & 1) == 0)
        (*(void (**)(uint64_t *, unint64_t *))(*v374 + 40))(v374, v378);
      v374 = 0;
      v375 = 0;
    }
    if (v399 && (v401 & 1) == 0)
      (*(void (**)(void))(*v399 + 40))();
    goto LABEL_462;
  }
  v392 = 0uLL;
  LODWORD(v393) = 1;
  v87 = v394;
  v394[0] = 0uLL;
  v88 = v18[7];
  if (!v88)
    goto LABEL_437;
  LODWORD(v341) = v27;
  v333 = (const char *)v20;
  v342 = 0;
  v355 = 0;
  v89 = (unsigned int *)v18[9];
  v90 = (_anonymous_namespace_ *)&v89[24 * v88];
  v20 = (unint64_t)&v404[8];
  v5 = 5152;
  v343 = v90;
  do
  {
    v2 = v89[20];
    v28 = v400;
    if (v400 <= v2)
      goto LABEL_478;
    v91 = v403;
    if ((v401 & 1) != 0)
      v91 = &v402;
    if (*((_DWORD *)v91 + v2))
      goto LABEL_175;
    v344 = v89;
    v92 = v353[2];
    if (v92 <= v2)
      goto LABEL_486;
    v93 = v353[4] + (v2 << 9);
    v94 = *(_QWORD *)(v93 + 208);
    v351 = (unint64_t *)(v93 + 208);
    v342 += v94;
    if (!v94)
      goto LABEL_174;
    v95 = 0;
    v14 = (unint64_t)(v89 + 4);
    *(_QWORD *)v347 = v89[20];
    v349 = (_QWORD *)(v93 + 224);
    do
    {
      v28 = *((_QWORD *)&v392 + 1);
      v96 = *v349 + (v95 << 8);
      v97 = *(unsigned __int16 *)(v96 + 56);
      v9 = v96 + 56;
      v2 = v97;
      if (*((_QWORD *)&v392 + 1) <= (unint64_t)v97)
      {
        v28 = v2 + 1;
        if ((_QWORD)v392)
        {
          v98 = v393;
        }
        else
        {
          v17 = v404;
          v98 = v393 + 2;
          LODWORD(v393) = v393 + 2;
        }
        v12 = (v98 & 1) == 0;
        v99 = 64;
        if (v12)
          v99 = *(_QWORD *)&v394[0];
        if (v99 <= v2)
        {
          v17 = v404;
        }
        if (*((_QWORD *)&v392 + 1) <= v2)
        {
          v100 = v2 - *((_QWORD *)&v392 + 1) + 1;
          v101 = 322 * *((_QWORD *)&v392 + 1);
          do
          {
            if ((v393 & 1) != 0)
              v102 = v394;
            else
              v102 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
            v103 = &v102[v101];
            *(_QWORD *)v103 = 0;
            *((_QWORD *)v103 + 1) = 0;
            *((_DWORD *)v103 + 4) = 1;
            *((_QWORD *)v103 + 4) = 0;
            *((_QWORD *)v103 + 5) = 0;
            v101 += 322;
            --v100;
          }
          while (v100);
        }
        *((_QWORD *)&v392 + 1) = v2 + 1;
        LODWORD(v393) = v393 + 2;
        v2 = *(unsigned __int16 *)v9;
      }
      if (v28 <= v2)
      {
        *(_QWORD *)&v358.var0 = 0;
        memset(v404, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v410[0]) = 136315906;
        *(_QWORD *)((char *)v410 + 4) = "operator[]";
        WORD6(v410[0]) = 1024;
        *(_DWORD *)((char *)v410 + 14) = 858;
        WORD1(v410[1]) = 2048;
        *(_QWORD *)((char *)&v410[1] + 4) = v2;
        WORD6(v410[1]) = 2048;
        *(_QWORD *)((char *)&v410[1] + 14) = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_468:
        *(_QWORD *)&v358.var0 = 0;
        *((_OWORD *)v17 + 3) = 0u;
        *((_OWORD *)v17 + 4) = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *(_OWORD *)v17 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v410[0]) = 136315906;
        *(_QWORD *)((char *)v410 + 4) = "operator[]";
        WORD6(v410[0]) = 1024;
        *(_DWORD *)((char *)v410 + 14) = 858;
        WORD1(v410[1]) = 2048;
        *(_QWORD *)((char *)&v410[1] + 4) = v28;
        WORD6(v410[1]) = 2048;
        *(_QWORD *)((char *)&v410[1] + 14) = v87;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_469:
        v391 = 0;
        v5 = (unint64_t)v428;
        v442 = 0u;
        v443 = 0u;
        memset(v441, 0, sizeof(v441));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v434 = 136315906;
        *(_QWORD *)&v434[4] = "operator[]";
        v435 = 1024;
        v436 = 797;
        v437 = 2048;
        v438 = v28;
        v439 = 2048;
        v440 = v95;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_470:
        v6 = (unint64_t)v379;
LABEL_471:
        v391 = 0;
        v29 = (unint64_t)v428;
        v442 = 0u;
        v443 = 0u;
        memset(v441, 0, sizeof(v441));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v434 = 136315906;
        *(_QWORD *)&v434[4] = "operator[]";
        v435 = 1024;
        v436 = 797;
        v437 = 2048;
        v438 = v95;
        v439 = 2048;
        v440 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_472;
      }
      if ((v393 & 1) == 0)
        v87 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
      v104 = &v87[322 * v2];
      *(_OWORD *)&v404[8] = *(_OWORD *)v14;
      *(_OWORD *)&v404[24] = *(_OWORD *)(v14 + 16);
      *(_OWORD *)&v404[40] = *(_OWORD *)(v14 + 32);
      *(_OWORD *)&v404[56] = *(_OWORD *)(v14 + 48);
      if (!*v104)
      {
        v114 = &v87[322 * v2];
        v115 = *((_QWORD *)v114 + 1) + 1;
        v17 = v404;
        v106 = *((_DWORD *)v114 + 4) + 2;
        *((_DWORD *)v114 + 4) = v106;
        goto LABEL_163;
      }
      v105 = &v87[322 * v2];
      v108 = *((_DWORD *)v105 + 4);
      v107 = v105 + 1;
      LOBYTE(v106) = v108;
      v109 = *((_QWORD *)v107 - 1);
      if ((v108 & 1) != 0)
      {
        if (v109 - 64 >= 0xFFFFFFFFFFFFFFBFLL)
          goto LABEL_163;
        v111 = v109 + 1;
        v113 = 128;
        goto LABEL_159;
      }
      v110 = *(_QWORD *)&v87[322 * v2 + 2];
      v112 = v109 >= v110;
      v111 = v109 + 1;
      v112 = !v112 || v110 >= v111;
      if (!v112)
      {
        v113 = 2 * v110;
LABEL_159:
        if (v113 <= v111)
          v116 = v111;
        else
          v116 = v113;
        v106 = *v107;
        v17 = v404;
      }
LABEL_163:
      if ((v106 & 1) != 0)
        v117 = (uint64_t)&v87[322 * v2 + 2];
      else
        v117 = v104[5];
      v6 = (unint64_t)v379;
      v118 = &v87[322 * v2];
      v119 = v117 + 80 * *((_QWORD *)v118 + 1);
      v2 = *(_QWORD *)v347;
      *(_DWORD *)v119 = v347[0];
      *(_DWORD *)(v119 + 4) = v95;
      v121 = *(_OWORD *)&v404[32];
      v120 = *(_OWORD *)&v404[48];
      v122 = *(_QWORD *)&v404[64];
      *(_OWORD *)(v119 + 24) = *(_OWORD *)&v404[16];
      *(_QWORD *)(v119 + 72) = v122;
      *(_OWORD *)(v119 + 56) = v120;
      *(_OWORD *)(v119 + 40) = v121;
      *(_OWORD *)(v119 + 8) = *(_OWORD *)v404;
      ++*((_QWORD *)v118 + 1);
      *((_DWORD *)v118 + 4) += 2;
      if (v355)
      {
        v355 = 1;
        v87 = v394;
      }
      else
      {
        v28 = *(unsigned __int16 *)v9;
        v87 = (_OWORD *)*((_QWORD *)&v392 + 1);
        if (*((_QWORD *)&v392 + 1) <= v28)
          goto LABEL_468;
        v123 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
        v87 = v394;
        if ((v393 & 1) != 0)
          v123 = v394;
        v355 = *((_QWORD *)&v123[322 * *(unsigned __int16 *)v9] + 1) > 1uLL;
      }
      ++v95;
    }
    while (v95 < *v351);
    v9 = (uint64_t)&v399;
    v14 = (unint64_t)&v402;
LABEL_174:
    v90 = v343;
    v89 = v344;
LABEL_175:
    v89 += 24;
  }
  while (v89 != (unsigned int *)v90);
  v20 = (unint64_t)v333;
  v5 = v341;
  if (!v355)
  {
LABEL_437:
    v313 = *(_OWORD *)v404;
    v314 = *(_QWORD *)&v404[16];
    v315 = *(_QWORD *)&v404[24];
    *(_BYTE *)v337 = 0;
    *(_QWORD *)(v337 + 8) = 100;
    *(_QWORD *)(v337 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(v337 + 24) = v313;
    *(_QWORD *)(v337 + 40) = v314;
    *(_QWORD *)(v337 + 48) = v315;
LABEL_438:
    if ((_QWORD)v392)
    {
      v316 = v393;
      if (*((_QWORD *)&v392 + 1))
      {
        if ((v393 & 1) != 0)
          v317 = v394;
        else
          v317 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
        v318 = 5152 * *((_QWORD *)&v392 + 1);
        do
        {
          v317 += 322;
          v318 -= 5152;
        }
        while (v318);
        v316 = v393;
      }
      if ((v316 & 1) == 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v392 + 40))(v392, *((_QWORD *)&v394[0] + 1));
    }
    goto LABEL_448;
  }
  v373 = 0;
  v371 = 0uLL;
  v370 = 0;
  v372 = 0;
  re::DynamicArray<re::MeshAssetModel>::resize((uint64_t)&v370, (v341 + 1));
  v124 = v353[7];
  v369 = 0;
  v367 = 0uLL;
  v368 = 0;
  re::DynamicArray<re::MeshAssetInstance>::setCapacity(&v366, v124);
  ++v368;
  v126 = v373;
  re::StringID::destroyString(v373);
  *(_QWORD *)v126 = 0x523B6FD560ALL;
  *((_QWORD *)v126 + 1) = "combined";
  v335 = (float32x4_t *)v126;
  *(_QWORD *)&v358.var0 = 0;
  v358.var1 = (char *)&str_110;
  v359 = xmmword_2260E5F10;
  v360 = xmmword_2260E5F20;
  v361 = xmmword_2260E5F40;
  v362 = xmmword_2260E5D70;
  v363 = 0;
  v364 = 0;
  v365 = 1065353216;
  re::DynamicArray<re::MeshAssetInstance>::add((_anonymous_namespace_ *)&v366, &v358);
  v128 = v404;
  if ((_DWORD)v341)
  {
    v129 = v353;
    v130 = v353[2];
    if (v130)
    {
      v131 = 0;
      v92 = 0;
      while (1)
      {
        v28 = v400;
        if (v400 <= v92)
          break;
        if ((v401 & 1) != 0)
          v29 = *((unsigned int *)&v402 + v92);
        else
          v29 = *((unsigned int *)v403 + v92);
        v129 = v353;
        if ((_DWORD)v29)
        {
          v28 = *((_QWORD *)&v371 + 1);
          if (*((_QWORD *)&v371 + 1) <= v29)
            goto LABEL_492;
          v132 = v353[4] + v131;
          v133 = (unint64_t *)((char *)v373 + 512 * v29);
          re::StringID::operator=(v133, (uint64_t *)v132);
          v134 = *(_OWORD *)(v132 + 32);
          *((_OWORD *)v133 + 1) = *(_OWORD *)(v132 + 16);
          *((_OWORD *)v133 + 2) = v134;
          v135 = *(_OWORD *)(v132 + 48);
          v136 = *(_OWORD *)(v132 + 64);
          v137 = *(_OWORD *)(v132 + 96);
          *((_OWORD *)v133 + 5) = *(_OWORD *)(v132 + 80);
          *((_OWORD *)v133 + 6) = v137;
          *((_OWORD *)v133 + 3) = v135;
          *((_OWORD *)v133 + 4) = v136;
          re::DynamicArray<re::MeshAssetBlendShapeData>::operator=((uint64_t)(v133 + 14), (uint64_t *)(v132 + 112));
          re::DynamicArray<re::MeshAssetSkinningData>::operator=((uint64_t)(v133 + 19), (uint64_t *)(v132 + 152));
          re::DynamicArray<re::MeshAssetPart>::operator=((uint64_t)(v133 + 24), (uint64_t *)(v132 + 192));
          re::DynamicArray<re::MeshAssetSkeleton>::operator=((uint64_t)(v133 + 29), (uint64_t *)(v132 + 232));
          re::DynamicArray<re::MeshLodLevelInfo>::operator=((uint64_t)(v133 + 34), (uint64_t *)(v132 + 272));
          re::DynamicArray<re::MeshAssetContactDeformerData>::operator=((uint64_t)(v133 + 39), (uint64_t *)(v132 + 312));
          re::DynamicArray<re::MeshAssetSmoothDeformerData>::operator=((uint64_t)(v133 + 44), (uint64_t *)(v132 + 352));
          re::DynamicArray<re::MeshAssetWrapDeformerData>::operator=((uint64_t)(v133 + 49), (uint64_t *)(v132 + 392));
          re::DynamicArray<re::MeshAssetSmoothDeformerData>::operator=((uint64_t)(v133 + 54), (uint64_t *)(v132 + 432));
          re::DynamicArray<re::MeshAssetJiggleDeformerData>::operator=((uint64_t)(v133 + 59), (uint64_t *)(v132 + 472));
          v129 = v353;
          v128 = v404;
          v130 = v353[2];
        }
        ++v92;
        v131 += 512;
        if (v92 >= v130)
          goto LABEL_188;
      }
LABEL_487:
      v29 = (unint64_t)v428;
      v441[0] = 0;
      v128[3] = 0u;
      v128[4] = 0u;
      v128[1] = 0u;
      v128[2] = 0u;
      *v128 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 858;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v92;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_488:
      v28 = (unint64_t)v428;
      v441[0] = 0;
      v128[3] = 0u;
      v128[4] = 0u;
      v128[1] = 0u;
      v128[2] = 0u;
      *v128 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 858;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v92;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_489:
      re::internal::assertLog((re::internal *)4, (uint64_t)v255, "assertion failure: '%s' (%s:line %i) ", "bufferOffset + count * sizeof(IndexType) <= destBufferSize", "copyAndOffsetTriangleIndices", 2880);
      _os_crash();
      __break(1u);
LABEL_490:
      re::internal::assertLog((re::internal *)4, (uint64_t)v255, "assertion failure: '%s' (%s:line %i) ", "bufferOffset + count * sizeof(IndexType) <= destBufferSize", "copyAndOffsetTriangleIndices", 2880);
      _os_crash();
      __break(1u);
LABEL_491:
      re::internal::assertLog((re::internal *)4, v239, "assertion failure: '%s' (%s:line %i) ", "bufferIndex >= 0", "combineAttributeBuffers", 2944);
      _os_crash();
      __break(1u);
LABEL_492:
      v92 = (unint64_t)v428;
      v441[0] = 0;
      v128[3] = 0u;
      v128[4] = 0u;
      v128[1] = 0u;
      v128[2] = 0u;
      *v128 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 789;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v29;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_493:
      v28 = (unint64_t)v410;
      v428[0] = 0;
      v411 = 0u;
      *(_OWORD *)v412 = 0u;
      memset(v410, 0, sizeof(v410));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v441[0]) = 136315906;
      *(_QWORD *)((char *)v441 + 4) = "operator[]";
      WORD2(v441[1]) = 1024;
      *(_DWORD *)((char *)&v441[1] + 6) = 858;
      WORD1(v441[2]) = 2048;
      *(_QWORD *)((char *)&v441[2] + 4) = v92;
      WORD2(v441[3]) = 2048;
      *(_QWORD *)((char *)&v441[3] + 6) = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_494:
      re::internal::assertLog((re::internal *)4, v247, "assertion failure: '%s' (%s:line %i) ", "srcBuffer.stepFunction != mtl::VertexStepFunction::kPerVertex || newElementCount == combinedPart.vertexCount", "combineAttributeBuffers", 2953);
      _os_crash();
      __break(1u);
LABEL_495:
      re::internal::assertLog((re::internal *)4, (uint64_t)v255, "assertion failure: '%s' (%s:line %i) ", "bufferOffset / elementSize == newElementCount", "combineAttributeBuffers", 2979);
      _os_crash();
      __break(1u);
      v163 = (unint64_t)v428;
      v441[0] = 0;
      v324[3] = 0u;
      v324[4] = 0u;
      v324[1] = 0u;
      v324[2] = 0u;
      *v324 = 0u;
      v326 = v325;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 858;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v326;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_496:
      v165 = v428;
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 797;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v28;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v163;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_497:
      v28 = (unint64_t)v428;
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 797;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v163;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v165;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_498:
      v163 = (unint64_t)v428;
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 866;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v28;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_499:
      v172 = (unint64_t)v428;
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 866;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v163;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v165;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_500:
      v156 = (unint64_t)v428;
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      v214 = (_QWORD *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 789;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v172;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v165;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_501:
      re::internal::assertLog((re::internal *)4, v213, "assertion failure: '%s' (%s:line %i) Combine vertex count overflow.", "combinedPart.indexType == mtl::IndexType::kUInt32 || combinedPart.vertexCount < 65535", "combineParts", 3050);
      _os_crash();
      __break(1u);
LABEL_502:
      v214[10] = 0;
      *((_OWORD *)v214 + 11) = 0u;
      *((_OWORD *)v214 + 12) = 0u;
      *((_OWORD *)v214 + 9) = 0u;
      *((_OWORD *)v214 + 10) = 0u;
      *((_OWORD *)v214 + 8) = 0u;
      v214 = (_QWORD *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 797;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v156;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v172;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_503:
      v214[10] = 0;
      *((_OWORD *)v214 + 11) = 0u;
      *((_OWORD *)v214 + 12) = 0u;
      *((_OWORD *)v214 + 9) = 0u;
      *((_OWORD *)v214 + 10) = 0u;
      *((_OWORD *)v214 + 8) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 797;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v172;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v156;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_504;
    }
LABEL_188:
    v138 = v129[7];
    if (v138)
    {
      v139 = v353[9];
      v29 = 96 * v138;
      do
      {
        v92 = *(unsigned int *)(v139 + 80);
        v5 = v400;
        if (v400 <= v92)
          goto LABEL_488;
        v140 = v403;
        if ((v401 & 1) != 0)
          v140 = &v402;
        if (*((_DWORD *)v140 + v92))
        {
          re::StringID::StringID((re::StringID *)v404, (const StringID *)v139);
          v141 = *(_OWORD *)(v139 + 16);
          v142 = *(_OWORD *)(v139 + 32);
          v143 = *(_OWORD *)(v139 + 64);
          *(_OWORD *)&v404[48] = *(_OWORD *)(v139 + 48);
          *(_OWORD *)&v404[64] = v143;
          *(_OWORD *)&v404[16] = v141;
          *(_OWORD *)&v404[32] = v142;
          v5 = v400;
          if (v400 <= v92)
            goto LABEL_493;
          if ((v401 & 1) != 0)
            v144 = &v402;
          else
            v144 = v403;
          *(_DWORD *)&v404[80] = *((_DWORD *)v144 + v92);
          *(_QWORD *)&v404[84] = *(_QWORD *)(v139 + 84);
          re::DynamicArray<re::MeshAssetInstance>::add((_anonymous_namespace_ *)&v366, (uint64_t *)v404);
          re::StringID::destroyString((re::StringID *)v404);
          v128 = v404;
        }
        v139 += 96;
        v29 -= 96;
      }
      while (v29);
    }
  }
  v330 = (_anonymous_namespace_ *)&v335[12];
  v145 = *((_QWORD *)&v392 + 1);
  v146 = *((_QWORD *)&v392 + 1) + 4;
  if (v335[12].i64[1] < (unint64_t)(*((_QWORD *)&v392 + 1) + 4))
  {
    re::DynamicArray<re::MeshAssetPart>::setCapacity(v330, v146);
    v145 = *((_QWORD *)&v392 + 1);
  }
  if (!v145)
    goto LABEL_427;
  v147 = 0;
  v332 = 0;
  v148 = 0;
  v149 = v393;
  v9 = 80;
  v327 = vdupq_n_s32(0x7F800000u);
LABEL_204:
  if ((v149 & 1) != 0)
    v150 = v394;
  else
    v150 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
  v5 = (unint64_t)v147;
  v151 = v148;
  if ((v150[322 * v148 + 1] & 1) != 0)
    v152 = (uint64_t)&v150[322 * v148 + 2];
  else
    v152 = *((_QWORD *)&v150[322 * v148 + 2] + 1);
  v153 = *((_QWORD *)&v150[322 * v148] + 1);
  *(_QWORD *)v404 = &v374;
  v154 = 126 - 2 * __clz(v153);
  if (v153)
    v155 = v154;
  else
    v155 = 0;
  v156 = *((_QWORD *)&v392 + 1);
  v157 = v151;
  if (*((_QWORD *)&v392 + 1) <= v151)
    goto LABEL_504;
  v158 = 0;
  v159 = (unint64_t *)&v394[322 * v151] + 1;
  v160 = v404;
  v329 = v151;
  v146 = 5152;
  v331 = v159;
  v147 = (const char *)v5;
  while (1)
  {
    v149 = v393;
    if ((v393 & 1) != 0)
    {
      v162 = *v159;
      v161 = v394;
    }
    else
    {
      v161 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
      v162 = *(_QWORD *)(*((_QWORD *)&v394[0] + 1) + 5152 * v157 + 8);
    }
    if (v158 >= v162)
    {
      v148 = v157 + 1;
      if (v148 >= v156)
      {
        LODWORD(v145) = v332 + (_DWORD)v147;
LABEL_427:
        if ((_DWORD)v145 != v342)
          goto LABEL_508;
        v409 = 0;
        v405 = 0;
        v406 = 0u;
        v407 = 0u;
        v408 = 0;
        *(_QWORD *)v404 = v370;
        v370 = 0;
        *(_OWORD *)&v404[8] = v371;
        v371 = 0u;
        v312 = v373;
        v373 = 0;
        ++v372;
        *(_DWORD *)&v404[24] = 1;
        *(_QWORD *)&v404[32] = v312;
        *(_QWORD *)&v404[40] = v366;
        v366 = 0;
        *(_OWORD *)&v404[48] = v367;
        v367 = 0u;
        *(_QWORD *)&v404[72] = v369;
        memset(&v404[80], 0, 24);
        v369 = 0;
        ++v368;
        *(_DWORD *)&v404[64] = 1;
        re::MeshAssetData::generateMetaData((re::MeshAssetData *)v404);
        *(_QWORD *)&v410[0] = *(_QWORD *)v404;
        memset(v404, 0, 24);
        *(_OWORD *)((char *)v410 + 8) = *(_OWORD *)&v404[8];
        ++*(_DWORD *)&v404[24];
        DWORD2(v410[1]) = 1;
        v410[2] = *(_OWORD *)&v404[32];
        v411 = *(_OWORD *)&v404[48];
        memset(&v404[32], 0, 32);
        ++*(_DWORD *)&v404[64];
        *(_DWORD *)v412 = 1;
        *(_OWORD *)&v412[8] = *(_OWORD *)&v404[72];
        memset(&v404[72], 0, 32);
        *(_OWORD *)v413 = *(_OWORD *)&v404[88];
        ++v405;
        *(_DWORD *)&v413[16] = 1;
        v414 = v406;
        v415 = v407;
        v406 = 0u;
        v407 = 0u;
        v416.i64[1] = v409;
        v409 = 0;
        ++v408;
        v416.i32[0] = 1;
        re::Result<re::MeshAssetData,re::DetailedError>::Result(v337, (uint64_t)v410);
        if (v414.i64[1])
        {
          if (v416.i64[1])
            (*(void (**)(void))(*(_QWORD *)v414.i64[1] + 40))();
          v416.i64[1] = 0;
          v415 = 0uLL;
          v414.i64[1] = 0;
          ++v416.i32[0];
        }
        re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v412[16]);
        re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v410[2] + 8);
        re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v410);
        if (v406.i64[1])
        {
          if (v409)
            (*(void (**)(void))(*(_QWORD *)v406.i64[1] + 40))();
          v409 = 0;
          v407 = 0uLL;
          v406.i64[1] = 0;
          ++v408;
        }
        re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v404[80]);
        re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v404[40]);
        re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v404);
        re::StringID::destroyString((re::StringID *)&v358);
        re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v366);
        re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)&v370);
        v20 = (unint64_t)v333;
        goto LABEL_438;
      }
      goto LABEL_204;
    }
    if ((v161[322 * v157 + 1] & 1) != 0)
      v2 = (unint64_t)&v161[322 * v157 + 2];
    else
      v2 = *((_QWORD *)&v161[322 * v157 + 2] + 1);
    v28 = *(unsigned int *)(v2 + 80 * v158);
    v163 = v353[2];
    if (v163 <= v28)
      goto LABEL_496;
    v163 = *(unsigned int *)(v2 + 80 * v158 + 4);
    v164 = v353[4] + (v28 << 9);
    v165 = *(_QWORD **)(v164 + 208);
    if ((unint64_t)v165 <= v163)
      goto LABEL_497;
    v9 = v375;
    if (v375 <= v28)
      goto LABEL_498;
    v166 = (unint64_t)v378;
    if ((v376 & 1) != 0)
      v166 = v20;
    v165 = *(_QWORD **)(v166 + 536 * v28 + 8);
    if ((unint64_t)v165 <= v163)
      goto LABEL_499;
    v167 = (*(_BYTE *)(v166 + 536 * v28 + 16) & 1) != 0
         ? v166 + 536 * v28 + 24
         : *(_QWORD *)(v166 + 536 * v28 + 32);
    v20 = v147;
    v168 = *(_QWORD *)(v164 + 224);
    v169 = v168 + (v163 << 8);
    v170 = *(_QWORD *)(v167 + 8 * v163);
    v356 = (char *)(v158 + 1);
    v171 = (unint64_t *)(*((_QWORD *)&v394[0] + 1) + 5152 * v157 + 8);
    v172 = 80 * v158;
    v173 = 80 * v158;
    v174 = 1;
    v334 = (_anonymous_namespace_ *)v158;
    while (1)
    {
      v175 = v158 + v174;
      if ((v393 & 1) != 0)
      {
        v14 = *v159;
        v176 = v394;
        if (v175 < *v159)
          goto LABEL_236;
        v180 = v394;
        if (v174 > 1)
          goto LABEL_272;
LABEL_252:
        v181 = v335[13].u64[0];
        if (v181 >= v335[12].i64[1])
        {
          re::DynamicArray<re::MeshAssetPart>::growCapacity(v330, v181 + 1);
          v181 = v335[13].u64[0];
        }
        v182 = v335[14].i64[0];
        v183 = v182 + (v181 << 8);
        re::DynamicArray<re::MeshAssetBuffer>::DynamicArray(v183, (uint64_t *)(v168 + (v163 << 8)));
        v184 = v168 + (v163 << 8);
        v185 = *(_OWORD *)(v184 + 40);
        *(_OWORD *)(v183 + 52) = *(_OWORD *)(v184 + 52);
        *(_OWORD *)(v183 + 40) = v185;
        re::StringID::StringID((re::StringID *)(v183 + 72), (const StringID *)(v184 + 72));
        v186 = *(_OWORD *)(v184 + 112);
        *(_OWORD *)(v183 + 96) = *(_OWORD *)(v184 + 96);
        *(_OWORD *)(v183 + 112) = v186;
        v187 = *(_OWORD *)(v184 + 128);
        v188 = *(_OWORD *)(v184 + 144);
        v189 = *(_OWORD *)(v184 + 176);
        *(_OWORD *)(v183 + 160) = *(_OWORD *)(v184 + 160);
        *(_OWORD *)(v183 + 176) = v189;
        *(_OWORD *)(v183 + 128) = v187;
        *(_OWORD *)(v183 + 144) = v188;
        v190 = *(unsigned __int8 *)(v184 + 192);
        *(_BYTE *)(v183 + 192) = v190;
        if (v190)
          *(_BYTE *)(v183 + 193) = *(_BYTE *)(v184 + 193);
        v191 = *(unsigned __int8 *)(v184 + 194);
        *(_BYTE *)(v183 + 194) = v191;
        if (v191)
          *(_BYTE *)(v182 + (v181 << 8) + 195) = *(_BYTE *)(v168 + (v163 << 8) + 195);
        v192 = v182 + (v181 << 8);
        v193 = v168 + (v163 << 8);
        v194 = *(unsigned __int8 *)(v193 + 196);
        *(_BYTE *)(v192 + 196) = v194;
        v195 = v335;
        if (v194)
          *(_BYTE *)(v192 + 197) = *(_BYTE *)(v193 + 197);
        v196 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v192 + 200, v193 + 200);
        ++v335[13].i64[0];
        ++v335[13].i32[2];
        v197 = *(_QWORD *)(v169 + 16);
        v6 = (unint64_t)v379;
        if (v197)
        {
          v198 = 0;
          if ((v404[8] & 1) != 0)
            v199 = *(const char **)&v404[16];
          else
            v199 = &v404[9];
          v200 = (const char **)(*(_QWORD *)(v169 + 32) + 16);
          v5 = 80 * v197;
          do
          {
            if (((unint64_t)*(v200 - 1) & 1) != 0)
              v201 = *v200;
            else
              v201 = (char *)v200 - 7;
            if (!strcmp(v199, v201))
              goto LABEL_271;
            ++v198;
            v200 += 10;
            v5 -= 80;
          }
          while (v5);
          v198 = -1;
LABEL_271:
          v160 = v404;
          v195 = v335;
        }
        else
        {
          v198 = -1;
          v160 = v404;
        }
        v146 = 5152;
        v159 = v331;
        v291 = v334;
        if (*(_QWORD *)v404 && (v404[8] & 1) != 0)
        {
          (*(void (**)(void))(**(_QWORD **)v404 + 40))();
          v291 = v334;
          v159 = v331;
          v146 = 5152;
          v160 = v404;
        }
        v292 = v195[14].i64[0] + (v195[13].i64[0] << 8);
        v172 = v198;
        v165 = *(_QWORD **)(v292 - 240);
        if ((unint64_t)v165 <= v198)
          goto LABEL_500;
        v9 = 80;
        v293 = *(_QWORD *)(v292 - 224) + 80 * (int)v172;
        v294 = *(_QWORD *)(v293 + 48);
        v295 = *(_QWORD *)(v293 + 64);
        v296 = (float32x4_t *)(v2 + 80 * (_QWORD)v291);
        v298 = v296[1];
        v299 = v296[2];
        v297 = v296 + 1;
        v300 = vaddq_f32(v297[3], vaddq_f32(v297[2], vmlaq_f32(vmulq_f32(v298, (float32x4_t)0), (float32x4_t)0, v299)));
        v157 = v329;
        if (v300.f32[2] == 1.0
          || fabsf(v300.f32[2] + -1.0) < (float)((float)((float)(fabsf(v300.f32[2]) + 1.0) + 1.0) * 0.0001))
        {
          v301 = (int8x16_t)vmulq_f32(v300, v300);
          v302 = vaddv_f32(vadd_f32(*(float32x2_t *)v301.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v301, v301, 8uLL)));
          v303 = v335;
          if (v302 == 1.0)
            goto LABEL_422;
          if (fabsf(v302 + -1.0) < (float)((float)((float)(fabsf(v302) + 1.0) + 1.0) * 0.0001) || v294 <= 0xB)
            goto LABEL_422;
        }
        else
        {
          v303 = v335;
          if (v294 < 0xC)
          {
LABEL_422:
            v308 = *(float32x4_t *)(v184 + 96);
            v309 = v303[1];
            v310 = v303[2];
            v309.i32[3] = 0;
            v308.i32[3] = 0;
            v303[1] = vminnmq_f32(v309, v308);
            v310.i32[3] = 0;
            v311 = *(float32x4_t *)(v168 + (v163 << 8) + 112);
            v311.i32[3] = 0;
            v303[2] = vmaxnmq_f32(v310, v311);
            ++v332;
            v290 = v356;
            goto LABEL_423;
          }
        }
        v305 = v294 / 0xC;
        v306 = (float *)(v295 + 8);
        do
        {
          v307 = vaddq_f32(v297[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v297, *(v306 - 2)), v297[1], *(v306 - 1)), v297[2], *v306));
          *((_QWORD *)v306 - 1) = v307.i64[0];
          *v306 = v307.f32[2];
          v306 += 3;
          --v305;
        }
        while (v305);
        goto LABEL_422;
      }
      v14 = *v171;
      v176 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
      if (v175 >= *v171)
        break;
LABEL_236:
      if (v14 <= v175)
        goto LABEL_479;
      if ((v176[322 * v157 + 1] & 1) != 0)
        v177 = (uint64_t)&v176[322 * v157 + 2];
      else
        v177 = *((_QWORD *)&v176[322 * v157 + 2] + 1);
      v178 = v177 + v173;
      v6 = *(unsigned int *)(v178 + 80);
      if (v375 <= v6)
        goto LABEL_480;
      v14 = *(unsigned int *)(v178 + 84);
      v5 = *(_QWORD *)(v166 + 536 * v6 + 8);
      if (v5 <= v14)
        goto LABEL_481;
      v179 = (*(_BYTE *)(v166 + 536 * v6 + 16) & 1) != 0
           ? v166 + 536 * v6 + 24
           : *(_QWORD *)(v166 + 536 * v6 + 32);
      v6 = (unint64_t)v379;
      if (v170 != *(_QWORD *)(v179 + 8 * v14))
        break;
      ++v174;
      v173 += 80;
    }
    if (v174 < 2)
      goto LABEL_252;
    v180 = v394;
    if ((v393 & 1) == 0)
      v180 = (_OWORD *)*((_QWORD *)&v394[0] + 1);
LABEL_272:
    v202 = v180[322 * v157 + 1];
    v203 = &v180[322 * v157];
    if ((v202 & 1) != 0)
      v204 = v203 + 2;
    else
      v204 = (_OWORD *)*((_QWORD *)v203 + 5);
    v9 = 80;
    *(_QWORD *)&v410[2] = 0;
    memset(v410, 0, 28);
    BYTE12(v410[2]) = 1;
    WORD4(v411) = -1;
    *(_QWORD *)&v412[8] = 0;
    *(_QWORD *)&v412[16] = &str_110;
    v205.i64[0] = 0x7F0000007FLL;
    v205.i64[1] = 0x7F0000007FLL;
    *(int32x4_t *)&v413[8] = v327;
    v414 = v205;
    v421 = 0;
    v423 = 0;
    v205.i8[0] = 0;
    v205.i8[4] = 0;
    v205.i8[8] = 0;
    v205.i8[12] = 0;
    v425[0] = v205;
    v425[1] = v205;
    v426 = 0;
    v415 = v205;
    v416 = v205;
    v417 = v205;
    v418 = v205;
    v419 = 0;
    v427 = 0x7FFFFFFFLL;
    v206 = v168 + (v163 << 8);
    WORD4(v411) = *(_WORD *)(v206 + 56);
    *(_QWORD *)&v411 = 0x100000000;
    DWORD1(v411) = *(_DWORD *)(v206 + 52);
    DWORD2(v410[2]) = 0;
    HIDWORD(v411) = 0;
    *(_DWORD *)v412 = 0;
    BYTE12(v410[2]) = *(_BYTE *)(v206 + 44);
    if (*(_BYTE *)(v206 + 192))
    {
      v419 = 1;
      v420 = *(_BYTE *)(v206 + 193);
    }
    if (*(_BYTE *)(v206 + 194))
    {
      v421 = 1;
      v422 = *(_BYTE *)(v168 + (v163 << 8) + 195);
    }
    v348 = v174;
    v328 = v147;
    v207 = (float32x4_t *)(v168 + (v163 << 8));
    if (v207[12].i8[4])
    {
      v423 = 1;
      v424 = v207[12].i8[5];
    }
    v208 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v425, (uint64_t)&v207[12].i64[1]);
    v209 = v207[11];
    v211 = v207[8];
    v210 = v207[9];
    v417 = v207[10];
    v418 = v209;
    v415 = v211;
    v416 = v210;
    *(_QWORD *)&v404[8] = 0;
    *(_DWORD *)&v404[16] = 1;
    *(_QWORD *)&v404[24] = 0;
    *(_QWORD *)&v404[32] = 0;
    re::DynamicOverflowArray<unsigned long,256ul>::setCapacity(v404, 0x100uLL);
    v212 = v404[16] + 2;
    *(_DWORD *)&v404[16] += 2;
    v213 = v348;
    if (*(_QWORD *)&v404[8] >= v348)
    {
      v214 = v428;
      v215 = v334;
      if (*(_QWORD *)&v404[8] > v348)
        goto LABEL_295;
    }
    else
    {
      v214 = v428;
      v215 = v334;
      if (!*(_QWORD *)v404)
      {
        re::DynamicOverflowArray<unsigned long,256ul>::setCapacity(v404, v348);
        v213 = v348;
        v215 = v334;
        v212 = v404[16] + 2;
        *(_DWORD *)&v404[16] += 2;
      }
      v12 = (v212 & 1) == 0;
      v216 = 256;
      if (v12)
        v216 = *(_QWORD *)&v404[24];
      if (v216 < v213)
      {
        re::DynamicOverflowArray<unsigned long,256ul>::setCapacity(v404, v213);
        v213 = v348;
        v215 = v334;
      }
      v217 = *(_QWORD *)&v404[8];
      if (*(_QWORD *)&v404[8] < v213)
      {
        do
        {
          if ((v404[16] & 1) != 0)
            v218 = &v404[24];
          else
            v218 = *(_BYTE **)&v404[32];
          *(_QWORD *)&v218[8 * v217++] = 0;
        }
        while (v213 != v217);
      }
LABEL_295:
      *(_QWORD *)&v404[8] = v213;
      *(_DWORD *)&v404[16] += 2;
    }
    v156 = 0;
    v350 = (unsigned int *)&v204[5 * (_QWORD)v215];
    v219 = v411;
    v220 = DWORD2(v410[2]);
    v221 = v353[4];
    v222 = (unsigned int *)((char *)v204 + v172 + 4);
    do
    {
      v172 = *(v222 - 1);
      v5 = v353[2];
      if (v5 <= v172)
        goto LABEL_482;
      v5 = *v222;
      v20 = *(_QWORD *)(v221 + (v172 << 9) + 208);
      if (v20 <= v5)
        goto LABEL_483;
      v20 = *(_QWORD *)&v404[8];
      if (*(_QWORD *)&v404[8] <= v156)
        goto LABEL_484;
      v223 = *(_QWORD *)(v221 + (v172 << 9) + 224);
      if ((v404[16] & 1) != 0)
        v224 = &v404[24];
      else
        v224 = *(_BYTE **)&v404[32];
      *(_QWORD *)&v224[8 * v156] = v219;
      v225 = (float32x4_t *)(v223 + (v5 << 8));
      v219 += v225[3].u32[0];
      LODWORD(v411) = v219;
      v220 += v225[2].i32[2];
      DWORD2(v410[2]) = v220;
      v226 = v225[6];
      v227 = *(float32x4_t *)&v413[8];
      v228 = v414;
      v227.i32[3] = 0;
      v226.i32[3] = 0;
      *(float32x4_t *)&v413[8] = vminnmq_f32(v227, v226);
      v229 = v225[7];
      v228.i32[3] = 0;
      v229.i32[3] = 0;
      v414 = vmaxnmq_f32(v228, v229);
      ++v156;
      v222 += 20;
    }
    while (v213 != v156);
    HIDWORD(v411) = v219;
    if (BYTE12(v410[2]) != 1 && v219 > 0xFFFE)
      goto LABEL_501;
    v156 = *v350;
    v172 = v353[2];
    if (v172 <= v156)
      goto LABEL_502;
    v172 = DWORD1(v204[5 * (_QWORD)v215]);
    v230 = v221 + (v156 << 9);
    v156 = *(_QWORD *)(v230 + 208);
    if (v156 <= v172)
      goto LABEL_503;
    v231 = *(_QWORD *)(v230 + 224) + (v172 << 8);
    v232 = *(_QWORD *)(v231 + 16);
    if (*((_QWORD *)&v410[0] + 1) < v232)
    {
      re::DynamicArray<re::MeshAssetBuffer>::setCapacity(v410, *(_QWORD *)(v231 + 16));
      v232 = *(_QWORD *)(v231 + 16);
    }
    if (!v232)
      goto LABEL_402;
    v5 = 0;
    v233 = 2;
    if (v348 > 2)
      v233 = v348;
    v345 = v233;
    v341 = *(_QWORD *)&v404[8];
    v340 = v404[16];
    v338 = v231;
    v339 = *(_BYTE **)&v404[32];
LABEL_314:
    v234 = *(_QWORD *)(v231 + 32);
    v29 = v234 + 80 * v5;
    v9 = v29 + 9;
    if ((*(_QWORD *)(v29 + 8) & 1) != 0)
      v20 = *(_QWORD *)(v29 + 16);
    else
      v20 = v29 + 9;
    v235 = (_anonymous_namespace_ *)strncmp((const char *)v20, "original", 8uLL);
    if (!(_DWORD)v235)
      goto LABEL_401;
    v389 = 0;
    v390 = (char *)&str_110;
    v336 = v5;
    v236 = v234 + 80 * v5;
    v5 = v236 + 72;
    v238 = re::sizeFromVertexFormat(*(unsigned __int8 *)(v236 + 72), v237);
    v241 = *(unsigned __int8 *)(v236 + 73);
    v240 = (_BYTE *)(v236 + 73);
    v357 = v238;
    v242 = *(_QWORD *)(v240 - 25) / (unint64_t)v238;
    if (v241
      || ((*(_QWORD *)(v29 + 8) & 1) != 0 ? (v246 = *(const char **)(v29 + 16)) : (v246 = (const char *)(v29 + 9)),
          v245 = (_anonymous_namespace_ *)strcmp(v246, "indexTriangles"),
          !(_DWORD)v245))
    {
      v20 = v353[2];
      v9 = 1;
      while (1)
      {
        v28 = v350[20 * v9];
        if (v20 <= v28)
          break;
        v14 = v350[20 * v9 + 1];
        v243 = v353[4] + (v28 << 9);
        v28 = *(_QWORD *)(v243 + 208);
        if (v28 <= v14)
          goto LABEL_473;
        v244 = *(_QWORD *)(v243 + 224) + (v14 << 8);
        v14 = *(_QWORD *)(v244 + 16);
        if (!v14)
          goto LABEL_491;
        v2 = 0;
        v28 = *(_QWORD *)(v244 + 32);
        v6 = 80 * v14;
        while (1)
        {
          v245 = (_anonymous_namespace_ *)re::DynamicString::operator==(v29, v28);
          if ((v245 & 1) != 0)
            break;
          v28 += 80;
          ++v2;
          v6 -= 80;
          if (!v6)
            goto LABEL_491;
        }
        if (v14 <= v2)
          goto LABEL_474;
        if (*(unsigned __int8 *)v5 != *(unsigned __int8 *)(v28 + 72))
          goto LABEL_475;
        v242 += *(_QWORD *)(v28 + 48) / v357;
        ++v9;
        v6 = (unint64_t)v379;
        if (v9 == v345)
          goto LABEL_335;
      }
LABEL_472:
      *(_QWORD *)v434 = 0;
      v442 = 0u;
      v443 = 0u;
      memset(v441, 0, sizeof(v441));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 797;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v28;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_473:
      *(_QWORD *)v434 = 0;
      v442 = 0u;
      v443 = 0u;
      memset(v441, 0, sizeof(v441));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 797;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v14;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_474:
      *(_QWORD *)v434 = 0;
      v442 = 0u;
      v443 = 0u;
      memset(v441, 0, sizeof(v441));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 797;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v2;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_475:
      re::internal::assertLog((re::internal *)4, v239, "assertion failure: '%s' (%s:line %i) ", "srcBuffer.format == buffer.format", "combineAttributeBuffers", 2946);
      _os_crash();
      __break(1u);
LABEL_476:
      *((_QWORD *)v17 + 260) = 0;
      *(_OWORD *)(v6 + 248) = 0u;
      *(_OWORD *)(v6 + 232) = 0u;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)(v9 + 536) = 136315906;
      *(_QWORD *)&v404[4] = "operator[]";
      *(_WORD *)&v404[12] = 1024;
      *(_DWORD *)&v404[14] = 858;
      *(_WORD *)&v404[18] = 2048;
      *(_QWORD *)&v404[20] = v28;
      *(_WORD *)&v404[28] = 2048;
      *(_QWORD *)&v404[30] = v29;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_477:
      *((_QWORD *)v17 + 260) = 0;
      *(_OWORD *)(v6 + 248) = 0u;
      *(_OWORD *)(v6 + 232) = 0u;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v404 = 136315906;
      *(_QWORD *)&v404[4] = "operator[]";
      *(_WORD *)&v404[12] = 1024;
      *(_DWORD *)&v404[14] = 858;
      *(_WORD *)&v404[18] = 2048;
      *(_QWORD *)&v404[20] = v28;
      *(_WORD *)&v404[28] = 2048;
      *(_QWORD *)&v404[30] = v29;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_478:
      *(_QWORD *)&v358.var0 = 0;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      *((_OWORD *)v17 + 2) = 0u;
      *(_OWORD *)v17 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 858;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v2;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_479:
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      v172 = v158;
      v323 = v174;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 858;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v172 + v323;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_480:
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 866;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v6;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_481:
      v441[0] = 0;
      v160[3] = 0u;
      v160[4] = 0u;
      v160[1] = 0u;
      v160[2] = 0u;
      *v160 = 0u;
      v214 = (_QWORD *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 866;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v14;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_482:
      v214[10] = 0;
      *((_OWORD *)v214 + 11) = 0u;
      *((_OWORD *)v214 + 12) = 0u;
      *((_OWORD *)v214 + 9) = 0u;
      *((_OWORD *)v214 + 10) = 0u;
      *((_OWORD *)v214 + 8) = 0u;
      v214 = (_QWORD *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 797;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v172;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_483:
      v214[10] = 0;
      *((_OWORD *)v214 + 11) = 0u;
      *((_OWORD *)v214 + 12) = 0u;
      *((_OWORD *)v214 + 9) = 0u;
      *((_OWORD *)v214 + 10) = 0u;
      *((_OWORD *)v214 + 8) = 0u;
      v156 = (unint64_t)v428;
      v214 = (_QWORD *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 797;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v5;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_484:
      v214[10] = 0;
      *((_OWORD *)v214 + 11) = 0u;
      *((_OWORD *)v214 + 12) = 0u;
      *((_OWORD *)v214 + 9) = 0u;
      *((_OWORD *)v214 + 10) = 0u;
      *((_OWORD *)v214 + 8) = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v428[0]) = 136315906;
      *(_QWORD *)((char *)v428 + 4) = "operator[]";
      WORD2(v428[1]) = 1024;
      *(_DWORD *)((char *)&v428[1] + 6) = 858;
      WORD1(v428[2]) = 2048;
      *(_QWORD *)((char *)&v428[2] + 4) = v156;
      WORD2(v428[3]) = 2048;
      *(_QWORD *)((char *)&v428[3] + 6) = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_485:
      v92 = (unint64_t)v379;
      v391 = 0;
      v28 = (unint64_t)v428;
      v442 = 0u;
      v443 = 0u;
      memset(v441, 0, sizeof(v441));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v434 = 136315906;
      *(_QWORD *)&v434[4] = "operator[]";
      v435 = 1024;
      v436 = 866;
      v437 = 2048;
      v438 = v6;
      v439 = 2048;
      v440 = v341;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_486:
      *(_QWORD *)&v358.var0 = 0;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      *((_OWORD *)v17 + 2) = 0u;
      *(_OWORD *)v17 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 797;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v2;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v92;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_487;
    }
LABEL_335:
    memset(v428, 0, 32);
    v28 = (unint64_t)v428;
    re::DynamicString::setCapacity(v428, 0);
    v432 = 0;
    v429 = 0;
    v430 = 0;
    v428[4] = 0;
    v431 = 0;
    v433 = 256;
    if (*v240 == 1 && v242 != v411)
      goto LABEL_494;
    re::DynamicString::operator=((re::DynamicString *)v428, (re::DynamicString *)v29);
    LOBYTE(v433) = *(_BYTE *)v5;
    HIBYTE(v433) = *v240;
    re::DynamicArray<BOOL>::resize((uint64_t)&v428[4], (v242 * v357 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v248 = v350;
    v95 = *v350;
    v28 = v353[2];
    if (v28 <= v95)
      goto LABEL_471;
    v2 = 0;
    v6 = 0;
    __s1 = v390;
    v249 = v353;
    v14 = v389 >> 1;
    v9 = 80;
LABEL_339:
    v28 = v248[20 * v6 + 1];
    v250 = v249[4] + (v95 << 9);
    v95 = *(_QWORD *)(v250 + 208);
    if (v95 <= v28)
      goto LABEL_469;
    v251 = *(_QWORD *)(v250 + 224) + (v28 << 8);
    v5 = *(_QWORD *)(v251 + 16);
    if (!v5)
      goto LABEL_509;
    v252 = 0;
    v20 = *(_QWORD *)(v251 + 32);
    v253 = 80 * v5;
    v254 = v20;
    while (!re::DynamicString::operator==(v29, v254))
    {
      ++v252;
      v254 += 80;
      v253 -= 80;
      if (!v253)
      {
        v252 = -1;
        break;
      }
    }
    v256 = v252;
    if (v5 <= v252)
      goto LABEL_510;
    v9 = 80;
    v5 = v20 + 80 * (int)v256;
    v28 = *(_QWORD *)(v5 + 48);
    v352 = v28 / v357;
    if (v14 == 0x2B3FAC222C23CAEDLL)
    {
      if (__s1 == "vertexPosition" || !strcmp(__s1, "vertexPosition"))
      {
        v255 = *(float **)(v20 + 80 * (int)v256 + 64);
        v258 = (float32x4_t *)&v350[20 * v6];
        v260 = v258[1];
        v261 = v258[2];
        v259 = v258 + 1;
        v262 = vaddq_f32(v259[3], vaddq_f32(v259[2], vmlaq_f32(vmulq_f32(v260, (float32x4_t)0), (float32x4_t)0, v261)));
        if (v262.f32[2] != 1.0
          && fabsf(v262.f32[2] + -1.0) >= (float)((float)((float)(fabsf(v262.f32[2]) + 1.0) + 1.0) * 0.0001)
          || (v263 = (int8x16_t)vmulq_f32(v262, v262),
              v264 = vaddv_f32(vadd_f32(*(float32x2_t *)v263.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v263, v263, 8uLL))),
              v264 != 1.0)
          && fabsf(v264 + -1.0) >= (float)((float)((float)(fabsf(v264) + 1.0) + 1.0) * 0.0001))
        {
          v267 = v348;
          if (v28 >= v357)
          {
            v274 = (_DWORD *)(v432 + v2 + 8);
            v275 = v255 + 2;
            v276 = v28 / v357;
            do
            {
              v277 = *(v275 - 2);
              v278 = *(v275 - 1);
              v279 = *v275;
              v275 += 3;
              v280 = vaddq_f32(v259[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v259, v277), v259[1], v278), v259[2], v279));
              *((_QWORD *)v274 - 1) = v280.i64[0];
              *v274 = v280.i32[2];
              v274 += 3;
              --v276;
            }
            while (v276);
          }
          goto LABEL_372;
        }
        memcpy((void *)(v432 + v2), v255, 12 * v352);
      }
      else
      {
LABEL_370:
        re::DynamicArray<REFrameAnalysisBottleneck>::copy(&v428[4], v2, *(char **)(v20 + 80 * (int)v256 + 64), v28);
      }
      v267 = v348;
      goto LABEL_372;
    }
    if (v14 != 0x5353CF4AA93DFAB9 || __s1 != "indexTriangles" && strcmp(__s1, "indexTriangles"))
      goto LABEL_370;
    if (v341 <= v6)
      goto LABEL_485;
    v257 = (v340 & 1) != 0 ? &v404[24] : v339;
    v265 = *(_QWORD *)&v257[8 * v6];
    if (!v265)
      goto LABEL_370;
    v266 = *(unsigned __int8 *)(v20 + 80 * (int)v256 + 72);
    if (v266 != 36)
      break;
    v267 = v348;
    if ((v28 & 0xFFFFFFFFFFFFFFFCLL) + v2 > v430)
      goto LABEL_490;
    if (v28 >= 4)
    {
      v281 = *(int **)(v20 + 80 * (int)v256 + 64);
      v282 = v28 >> 2;
      v283 = (_DWORD *)(v432 + v2);
      if (v28 >> 2 <= 1)
        v282 = 1;
      do
      {
        v284 = *v281++;
        *v283++ = v284 + v265;
        --v282;
      }
      while (v282);
    }
LABEL_372:
    v2 += v352 * v357;
    if (*(_BYTE *)(v20 + 80 * (int)v256 + 73))
    {
      if (++v6 >= v267)
        goto LABEL_392;
LABEL_380:
      v248 = v350;
      v95 = v350[20 * v6];
      v249 = v353;
      v28 = v353[2];
      if (v28 <= v95)
        goto LABEL_470;
      goto LABEL_339;
    }
    if ((*(_QWORD *)(v5 + 8) & 1) != 0)
      v272 = *(const char **)(v5 + 16);
    else
      v272 = (const char *)(v5 + 9);
    v273 = strcmp(v272, "indexTriangles");
    if (++v6 < v348 && !v273)
      goto LABEL_380;
LABEL_392:
    if (v2 / v357 != v242)
      goto LABEL_495;
    v285.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)v410, (uint64_t)v428);
    v6 = (unint64_t)v379;
    if (v428[4])
    {
      if (v432)
        (*(void (**)(double))(*(_QWORD *)v428[4] + 40))(v285.n128_f64[0]);
      v432 = 0;
      v429 = 0;
      v430 = 0;
      v428[4] = 0;
      ++v431;
    }
    if (v428[0] && (v428[1] & 1) != 0)
      (*(void (**)(__n128))(*(_QWORD *)v428[0] + 40))(v285);
    re::StringID::destroyString((re::StringID *)&v389);
    v232 = *(_QWORD *)(v338 + 16);
    v5 = v336;
LABEL_401:
    ++v5;
    v9 = 80;
    v231 = v338;
    if (v5 < v232)
      goto LABEL_314;
LABEL_402:
    v286 = v335[1];
    v287 = v335[2];
    v286.i32[3] = 0;
    v288 = *(float32x4_t *)&v413[8];
    v288.i32[3] = 0;
    v335[1] = vminnmq_f32(v286, v288);
    v289 = v414;
    v287.i32[3] = 0;
    v289.i32[3] = 0;
    v335[2] = vmaxnmq_f32(v287, v289);
    re::DynamicArray<re::MeshAssetPart>::add(v330, (uint64_t)v410);
    if (*(_QWORD *)v404 && (v404[16] & 1) == 0)
      (*(void (**)(void))(**(_QWORD **)v404 + 40))();
    v20 = v348 + v328;
    v290 = (char *)v334 + v348;
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v425);
    re::StringID::destroyString((re::StringID *)&v412[8]);
    re::DynamicArray<re::MeshAssetBuffer>::deinit((uint64_t)v410);
    v160 = v404;
    v157 = v329;
    v146 = 5152;
    v159 = v331;
LABEL_423:
    v156 = *((_QWORD *)&v392 + 1);
    v147 = (const char *)v20;
    v158 = (unint64_t)v290;
    v20 = (unint64_t)v333;
    if (*((_QWORD *)&v392 + 1) <= v157)
    {
LABEL_504:
      v28 = (unint64_t)v428;
      v441[0] = 0;
      memset(v404, 0, 80);
      v52 = v157;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v410[0]) = 136315906;
      *(_QWORD *)((char *)v410 + 4) = "operator[]";
      WORD6(v410[0]) = 1024;
      *(_DWORD *)((char *)v410 + 14) = 858;
      WORD1(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 4) = v52;
      WORD6(v410[1]) = 2048;
      *(_QWORD *)((char *)&v410[1] + 14) = v156;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_505;
    }
  }
  v267 = v348;
  if (v266 == 49)
  {
    if ((v28 & 0xFFFFFFFFFFFFFFFELL) + v2 > v430)
      goto LABEL_489;
    if (v28 >= 2)
    {
      v268 = *(__int16 **)(v20 + 80 * (int)v256 + 64);
      v269 = v28 >> 1;
      v270 = (_WORD *)(v432 + v2);
      if (v28 >> 1 <= 1)
        v269 = 1;
      do
      {
        v271 = *v268++;
        *v270++ = v271 + v265;
        --v269;
      }
      while (v269);
    }
    goto LABEL_372;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)v255, "assertion failure: '%s' (%s:line %i) Unsupported index type.", "false", "copyAndOffsetTriangleIndices", 2895);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::DynamicOverflowArray<unsigned int,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v2 = a1 + 24;
  else
    v2 = *(_QWORD *)(a1 + 32);
  return v2 + 4 * a2;
}

__n128 re::DynamicArray<re::MeshAssetInstance>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  re::StringID *v5;
  __n128 result;
  StringID v7;
  StringID v8;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshAssetInstance>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = re::StringID::StringID((re::StringID *)(*((_QWORD *)this + 4) + 96 * v4), a2);
  *((StringID *)v5 + 1) = a2[1];
  result = (__n128)a2[2];
  v7 = a2[3];
  v8 = a2[4];
  *(StringID *)((char *)v5 + 76) = *(StringID *)((char *)a2 + 76);
  *((StringID *)v5 + 3) = v7;
  *((StringID *)v5 + 4) = v8;
  *((__n128 *)v5 + 2) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::MeshAssetInstance>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshAssetInstance>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 96 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  result = *(__n128 *)((char *)a2 + 76);
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v5 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v5 + 64) = v9;
  *(_OWORD *)(v5 + 32) = v8;
  *(_OWORD *)(v5 + 16) = *((_OWORD *)a2 + 1);
  *(__n128 *)(v5 + 76) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info = (uint64_t)&off_24ED30DF8;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::introspect_AssetHandle((re *)1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info, 0);
    qword_255800930 = 0x2800000003;
    dword_255800938 = v11;
    word_25580093C = 0;
    *(_QWORD *)&xmmword_255800940 = 0;
    *((_QWORD *)&xmmword_255800940 + 1) = 0xFFFFFFFFLL;
    qword_255800950 = v10;
    unk_255800958 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info = (uint64_t)&off_24ED30DF8;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255800940 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(BOOL)::info;
}

uint64_t *re::allocInfo_MeshAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD658);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD658))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD680, 0);
    *(uint64_t *)((char *)&qword_2540FD690 + 6) = 0;
    qword_2540FD690 = 0;
    qword_2540FD6A0 = 0;
    qword_2540FD6A8 = 0xFFFFFFFFLL;
    qword_2540FD680 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD6B0 = (uint64_t)"MeshAsset";
    dword_2540FD6B8 = 0;
    unk_2540FD6C0 = 0u;
    unk_2540FD6D0 = 0u;
    unk_2540FD6E0 = 0u;
    qword_2540FD6F0 = 0;
    __cxa_guard_release(&qword_2540FD658);
  }
  return &qword_2540FD680;
}

void re::initInfo_MeshAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x7CB41A3561C6;
  v16[1] = "MeshAsset";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD650);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD650);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_MeshAssetData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "meshAssetData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2540FD668 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "skeletons";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0xD000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2540FD670 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 64, 8);
      *(_DWORD *)v14 = 6;
      *(_QWORD *)(v14 + 8) = 1;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_BYTE *)(v14 + 40) = 1;
      *(_QWORD *)(v14 + 48) = re::MeshAssetLoader::downgradeMeshAssetFromFall2021;
      *(_DWORD *)(v14 + 56) = 1;
      qword_2540FD678 = v14;
      __cxa_guard_release(&qword_2540FD650);
    }
  }
  *((_QWORD *)this + 2) = 0x3C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540FD668;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::MeshAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = &off_24ED30A60;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_DWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 424) = 0;
  *(_OWORD *)(a3 + 392) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(_OWORD *)(a3 + 484) = 0u;
  *(_OWORD *)(a3 + 472) = 0u;
  *(_OWORD *)(a3 + 456) = 0u;
  *(_DWORD *)(a3 + 192) = 0;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_OWORD *)(a3 + 372) = 0u;
  *(_DWORD *)(a3 + 448) = 0;
  *(_QWORD *)(a3 + 432) = 0;
  *(_QWORD *)(a3 + 440) = 0;
  *(_QWORD *)(a3 + 500) = 0x7FFFFFFFLL;
  *(_DWORD *)(a3 + 544) = 0;
  *(_OWORD *)(a3 + 512) = 0u;
  *(_OWORD *)(a3 + 528) = 0u;
  *(_QWORD *)(a3 + 548) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 905) = 0u;
  *(_OWORD *)(a3 + 880) = 0u;
  *(_OWORD *)(a3 + 896) = 0u;
  *(_OWORD *)(a3 + 848) = 0u;
  *(_OWORD *)(a3 + 864) = 0u;
  *(_OWORD *)(a3 + 816) = 0u;
  *(_OWORD *)(a3 + 832) = 0u;
  *(_OWORD *)(a3 + 784) = 0u;
  *(_OWORD *)(a3 + 800) = 0u;
  *(_OWORD *)(a3 + 752) = 0u;
  *(_OWORD *)(a3 + 768) = 0u;
  *(_OWORD *)(a3 + 720) = 0u;
  *(_OWORD *)(a3 + 736) = 0u;
  *(_OWORD *)(a3 + 688) = 0u;
  *(_OWORD *)(a3 + 704) = 0u;
  *(_OWORD *)(a3 + 656) = 0u;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_OWORD *)(a3 + 624) = 0u;
  *(_OWORD *)(a3 + 640) = 0u;
  *(_OWORD *)(a3 + 592) = 0u;
  *(_OWORD *)(a3 + 608) = 0u;
  *(_OWORD *)(a3 + 560) = 0u;
  *(_OWORD *)(a3 + 576) = 0u;
  *(_DWORD *)(a3 + 924) = 2;
  *(_QWORD *)(a3 + 928) = 0;
  *(_QWORD *)(a3 + 944) = 0;
  *(_QWORD *)(a3 + 936) = 0;
  *(_BYTE *)(a3 + 952) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::MeshAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24ED30A60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 500) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 548) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 905) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 924) = 2;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_MeshAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_MeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MeshAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshAsset>, this);
}

uint64_t re::DynamicArray<re::MeshModel>::deinit(uint64_t a1)
{
  uint64_t result;
  re::MeshModel *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::MeshModel **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 816 * v4;
        do
        {
          re::MeshModel::~MeshModel(v3);
          v3 = (re::MeshModel *)((char *)v3 + 816);
          v5 -= 816;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::MeshModel **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::MeshModel *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::MeshModel::~MeshModel(re::MeshModel *this)
{
  uint64_t i;
  uint64_t v3;

  for (i = 776; i != 56; i -= 40)
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)((char *)this + i));
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    if (*((_QWORD *)this + 10))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 11));
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  re::FixedArray<re::MeshPart>::deinit((_QWORD *)this + 6);
  re::StringID::destroyString(this);
}

_QWORD *re::FixedArray<re::MeshPart>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)result[2];
      v5 = 560 * v2;
      do
      {
        re::StringID::destroyString((re::StringID *)(v4 + 63));
        re::FixedArray<re::StringID>::deinit(v4 + 42);
        re::AttributeTable::~AttributeTable((re::AttributeTable *)v4);
        v4 += 70;
        v5 -= 560;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::MeshNameMap::~MeshNameMap(re::MeshNameMap *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    if (*((_QWORD *)this + 51))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 52));
      *((_QWORD *)this + 51) = 0;
      *((_QWORD *)this + 52) = 0;
    }
    *((_QWORD *)this + 50) = 0;
  }
  v3 = *((_QWORD *)this + 47);
  if (v3)
  {
    if (*((_QWORD *)this + 48))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 49));
      *((_QWORD *)this + 48) = 0;
      *((_QWORD *)this + 49) = 0;
    }
    *((_QWORD *)this + 47) = 0;
  }
  v4 = *((_QWORD *)this + 44);
  if (v4)
  {
    if (*((_QWORD *)this + 45))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 46));
      *((_QWORD *)this + 45) = 0;
      *((_QWORD *)this + 46) = 0;
    }
    *((_QWORD *)this + 44) = 0;
  }
  v5 = *((_QWORD *)this + 41);
  if (v5)
  {
    if (*((_QWORD *)this + 42))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 43));
      *((_QWORD *)this + 42) = 0;
      *((_QWORD *)this + 43) = 0;
    }
    *((_QWORD *)this + 41) = 0;
  }
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::deinit((_QWORD *)this + 38);
  v6 = *((_QWORD *)this + 35);
  if (v6)
  {
    if (*((_QWORD *)this + 36))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 37));
      *((_QWORD *)this + 36) = 0;
      *((_QWORD *)this + 37) = 0;
    }
    *((_QWORD *)this + 35) = 0;
  }
  v7 = *((_QWORD *)this + 32);
  if (v7)
  {
    if (*((_QWORD *)this + 33))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 34));
      *((_QWORD *)this + 33) = 0;
      *((_QWORD *)this + 34) = 0;
    }
    *((_QWORD *)this + 32) = 0;
  }
  v8 = *((_QWORD *)this + 29);
  if (v8)
  {
    if (*((_QWORD *)this + 30))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 31));
      *((_QWORD *)this + 30) = 0;
      *((_QWORD *)this + 31) = 0;
    }
    *((_QWORD *)this + 29) = 0;
  }
  v9 = *((_QWORD *)this + 26);
  if (v9)
  {
    if (*((_QWORD *)this + 27))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)this + 28));
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 23);
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 20);
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 17);
  v10 = *((_QWORD *)this + 14);
  if (v10)
  {
    if (*((_QWORD *)this + 15))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *((_QWORD *)this + 16));
      *((_QWORD *)this + 15) = 0;
      *((_QWORD *)this + 16) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2);
}

_QWORD *re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  double v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (uint64_t *)result[2];
      v5 = 48 * v2;
      do
      {
        v6 = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v4);
        v4 += 6;
        v5 -= 48;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, v1[2], v6);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::MeshInstance::~MeshInstance(re::MeshInstance *this)
{
  uint64_t v2;

  re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((_QWORD *)this + 15);
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if (*((_QWORD *)this + 13))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 14));
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 12) = 0;
  }
  re::StringID::destroyString(this);
}

_QWORD *re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 8 * v2;
      do
      {
        if (*(_QWORD *)v4)
        {

          *(_QWORD *)v4 = 0;
        }
        v4 += 8;
        v5 -= 8;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_192, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (_QWORD *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 56;
    }
  }
}

void re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  int v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  int v13;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_193, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = (__n128 *)(v7 + v4);
        v9 = *(_DWORD *)(v7 + v4 + 8);
        if (v9 < 0)
        {
          v8->n128_u32[2] = v9 & 0x7FFFFFFF;
          v12 = v8[1].n128_i64[0];
          v11 = v8 + 1;
          v10 = v12;
          if (v12)
          {
            if ((*(_BYTE *)(v7 + v4 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v7 + v4 + 32), v6);
              v6 = 0uLL;
            }
            *v11 = v6;
            v11[1] = v6;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        ++v5;
        v4 += 56;
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v13 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v13;
  }
}

void re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 48));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 56;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::GeomMeshBuilder::setFaceVertices(uint64_t this, unsigned int a2, int a3, int a4, int a5)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v10;
  int *v11;
  int v12;
  int v13;
  int v15;
  unsigned int i;
  re::internal *v17;
  const re::GeomAttribute *v18;
  _DWORD *v19;

  v5 = a2;
  v6 = *(_QWORD *)(this + 32);
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  v10 = (_QWORD *)this;
  v11 = (int *)(*(_QWORD *)(this + 48) + 16 * a2);
  v12 = *v11;
  v13 = v11[3];
  if (v12 != -1 && v13 == -1)
  {
    v15 = *(_DWORD *)(this + 416);
    if (v15)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(v10 + 49), i);
        this = re::internal::accessFaceVaryingAttributeSubmesh(v17, v18);
      }
      v6 = v10[4];
    }
  }
  if (v6 <= v5)
  {
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = (_DWORD *)(v10[6] + 16 * v5);
  *v19 = a3;
  v19[1] = a4;
  v19[2] = a5;
  v19[3] = -1;
  return this;
}

_QWORD *`anonymous namespace'::buildDoubleVertexBillboard(re::GeomMesh &)::$_0::operator()(_QWORD *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  if (*(_DWORD *)(*result + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  v5 = (_QWORD *)(*(_QWORD *)*result + 16 * a2);
  *v5 = a3;
  v5[1] = a4;
  v6 = result[1];
  if (*(_DWORD *)(v6 + 8) <= a2)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * a2) = a5;
  v7 = result[2];
  if (*(_DWORD *)(v7 + 8) <= a2)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  v8 = (_QWORD *)(*(_QWORD *)v7 + 16 * a2);
  *v8 = 0x3F80000000000000;
  v8[1] = 0;
  v9 = result[3];
  if (*(_DWORD *)(v9 + 8) <= a2)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = (_QWORD *)(*(_QWORD *)v9 + 16 * a2);
  *v10 = 0;
  v10[1] = 1065353216;
  v11 = result[4];
  if (*(_DWORD *)(v11 + 8) <= a2)
    goto LABEL_11;
  v12 = (_QWORD *)(*(_QWORD *)v11 + 16 * a2);
  *v12 = 1065353216;
  v12[1] = 0;
  return result;
}

_QWORD *re::DynamicArray<re::GeomCell4>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::BlendNode>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      result = (_QWORD *)(v3[4] + 16 * v4);
      v5 = 16 * a2 - 16 * v4;
      if (v5 >= 1)
        result = memset(result, 255, 16 * (((unint64_t)v5 >> 4) - ((unint64_t)v5 > 0xF)) + 16);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *`anonymous namespace'::buildDoubleVertexCircularBillboard(re::GeomMesh &)::$_0::operator()(_QWORD *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  if (*(_DWORD *)(*result + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = (_QWORD *)(*(_QWORD *)*result + 16 * a2);
  *v5 = a3;
  v5[1] = a4;
  v6 = result[1];
  if (*(_DWORD *)(v6 + 8) <= a2)
    goto LABEL_5;
  *(_QWORD *)(*(_QWORD *)v6 + 8 * a2) = a5;
  return result;
}

uint64_t re::DynamicArray<re::MeshAssetModel>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetModel>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

re::MeshAssetModel *re::DynamicArray<re::MeshAssetModel>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  re::MeshAssetModel *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetModel>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetModel *,re::MeshAssetModel *,re::MeshAssetModel *>((uint64_t)&v10, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + (a1[2] << 9), a1[4]);
    result = (re::MeshAssetModel *)re::ObjectHelper::copyConstruct<re::MeshAssetModel>(a1[4] + (a1[2] << 9), *(_QWORD *)(a2 + 32) + (a1[2] << 9), *(_QWORD *)(a2 + 32) + (v4 << 9));
  }
  else
  {
    result = (re::MeshAssetModel *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetModel *,re::MeshAssetModel *,re::MeshAssetModel *>((uint64_t)&v9, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + (v4 << 9), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      result = (re::MeshAssetModel *)(a1[4] + (v4 << 9));
      v7 = (v6 << 9) - (v4 << 9);
      do
      {
        re::MeshAssetModel::~MeshAssetModel(result);
        result = (re::MeshAssetModel *)(v8 + 512);
        v7 -= 512;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetModel>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetModel>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 55)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 512, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 9;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 9, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 9;
        v11 = (uint64_t)v7;
        do
        {
          re::MeshAssetModel::MeshAssetModel(v11, v8);
          re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)v8);
          v8 += 64;
          v11 += 512;
          v10 -= 512;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__n128 re::MeshAssetModel::MeshAssetModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *a2;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)a1 = *a2 & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(_QWORD *)(a1 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v3;
  result = *((__n128 *)a2 + 3);
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  v7 = a2[15];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = v7;
  a2[14] = 0;
  a2[15] = 0;
  v8 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = a2[16];
  a2[16] = v8;
  v9 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = a2[18];
  a2[18] = v9;
  ++*((_DWORD *)a2 + 34);
  ++*(_DWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  v10 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v10;
  a2[19] = 0;
  a2[20] = 0;
  v11 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = a2[21];
  a2[21] = v11;
  v12 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = a2[23];
  a2[23] = v12;
  ++*((_DWORD *)a2 + 44);
  ++*(_DWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  v13 = a2[25];
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = v13;
  a2[24] = 0;
  a2[25] = 0;
  v14 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = a2[26];
  a2[26] = v14;
  v15 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = a2[28];
  a2[28] = v15;
  ++*((_DWORD *)a2 + 54);
  ++*(_DWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  v16 = a2[30];
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = v16;
  a2[29] = 0;
  a2[30] = 0;
  v17 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = a2[31];
  a2[31] = v17;
  v18 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = a2[33];
  a2[33] = v18;
  ++*((_DWORD *)a2 + 64);
  ++*(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  v19 = a2[35];
  *(_QWORD *)(a1 + 272) = a2[34];
  *(_QWORD *)(a1 + 280) = v19;
  a2[34] = 0;
  a2[35] = 0;
  v20 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = a2[36];
  a2[36] = v20;
  v21 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = a2[38];
  a2[38] = v21;
  ++*((_DWORD *)a2 + 74);
  ++*(_DWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  v22 = a2[40];
  *(_QWORD *)(a1 + 312) = a2[39];
  *(_QWORD *)(a1 + 320) = v22;
  a2[39] = 0;
  a2[40] = 0;
  v23 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = a2[41];
  a2[41] = v23;
  v24 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = a2[43];
  a2[43] = v24;
  ++*((_DWORD *)a2 + 84);
  ++*(_DWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  v25 = a2[45];
  *(_QWORD *)(a1 + 352) = a2[44];
  *(_QWORD *)(a1 + 360) = v25;
  a2[44] = 0;
  a2[45] = 0;
  v26 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = a2[46];
  a2[46] = v26;
  v27 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = a2[48];
  a2[48] = v27;
  ++*((_DWORD *)a2 + 94);
  ++*(_DWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  v28 = a2[50];
  *(_QWORD *)(a1 + 392) = a2[49];
  *(_QWORD *)(a1 + 400) = v28;
  a2[49] = 0;
  a2[50] = 0;
  v29 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = a2[51];
  a2[51] = v29;
  v30 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = a2[53];
  a2[53] = v30;
  ++*((_DWORD *)a2 + 104);
  ++*(_DWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  v31 = a2[55];
  *(_QWORD *)(a1 + 432) = a2[54];
  *(_QWORD *)(a1 + 440) = v31;
  a2[54] = 0;
  a2[55] = 0;
  v32 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = a2[56];
  a2[56] = v32;
  v33 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = a2[58];
  a2[58] = v33;
  ++*((_DWORD *)a2 + 114);
  ++*(_DWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  v34 = a2[60];
  *(_QWORD *)(a1 + 472) = a2[59];
  *(_QWORD *)(a1 + 480) = v34;
  a2[59] = 0;
  a2[60] = 0;
  v35 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = a2[61];
  a2[61] = v35;
  v36 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = a2[63];
  a2[63] = v36;
  ++*((_DWORD *)a2 + 124);
  ++*(_DWORD *)(a1 + 496);
  return result;
}

uint64_t re::ObjectHelper::copyConstruct<re::MeshAssetModel>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a2 != a3)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = (_OWORD *)(v5 + v6);
      re::StringID::StringID((re::StringID *)(v5 + v6), (const StringID *)(a2 + v6));
      v8 = *(_OWORD *)(a2 + v6 + 32);
      v7[1] = *(_OWORD *)(a2 + v6 + 16);
      v7[2] = v8;
      v9 = *(_OWORD *)(a2 + v6 + 48);
      v10 = *(_OWORD *)(a2 + v6 + 64);
      v11 = *(_OWORD *)(a2 + v6 + 96);
      v7[5] = *(_OWORD *)(a2 + v6 + 80);
      v7[6] = v11;
      v7[3] = v9;
      v7[4] = v10;
      re::DynamicArray<re::MeshAssetBlendShapeData>::DynamicArray(v5 + v6 + 112, (uint64_t *)(a2 + v6 + 112));
      re::DynamicArray<re::MeshAssetSkinningData>::DynamicArray(v5 + v6 + 152, (uint64_t *)(a2 + v6 + 152));
      re::DynamicArray<re::MeshAssetPart>::DynamicArray(v5 + v6 + 192, (uint64_t *)(a2 + v6 + 192));
      re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray(v5 + v6 + 232, (uint64_t *)(a2 + v6 + 232));
      re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray(v5 + v6 + 272, (uint64_t *)(a2 + v6 + 272));
      re::DynamicArray<re::MeshAssetContactDeformerData>::DynamicArray(v5 + v6 + 312, (uint64_t *)(a2 + v6 + 312));
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::DynamicArray(v5 + v6 + 352, (uint64_t *)(a2 + v6 + 352));
      re::DynamicArray<re::MeshAssetWrapDeformerData>::DynamicArray(v5 + v6 + 392, (uint64_t *)(a2 + v6 + 392));
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::DynamicArray(v5 + v6 + 432, (uint64_t *)(a2 + v6 + 432));
      result = re::DynamicArray<re::MeshAssetJiggleDeformerData>::DynamicArray(v5 + v6 + 472, (uint64_t *)(a2 + v6 + 472));
      v6 += 512;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetModel *,re::MeshAssetModel *,re::MeshAssetModel *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = (_OWORD *)(a4 + v7);
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    v9 = *(_OWORD *)(a2 + v7 + 32);
    v8[1] = *(_OWORD *)(a2 + v7 + 16);
    v8[2] = v9;
    v10 = *(_OWORD *)(a2 + v7 + 48);
    v11 = *(_OWORD *)(a2 + v7 + 64);
    v12 = *(_OWORD *)(a2 + v7 + 96);
    v8[5] = *(_OWORD *)(a2 + v7 + 80);
    v8[6] = v12;
    v8[3] = v10;
    v8[4] = v11;
    re::DynamicArray<re::MeshAssetBlendShapeData>::operator=(a4 + v7 + 112, (uint64_t *)(a2 + v7 + 112));
    re::DynamicArray<re::MeshAssetSkinningData>::operator=(a4 + v7 + 152, (uint64_t *)(a2 + v7 + 152));
    re::DynamicArray<re::MeshAssetPart>::operator=(a4 + v7 + 192, (uint64_t *)(a2 + v7 + 192));
    re::DynamicArray<re::MeshAssetSkeleton>::operator=(a4 + v7 + 232, (uint64_t *)(a2 + v7 + 232));
    re::DynamicArray<re::MeshLodLevelInfo>::operator=(a4 + v7 + 272, (uint64_t *)(a2 + v7 + 272));
    re::DynamicArray<re::MeshAssetContactDeformerData>::operator=(a4 + v7 + 312, (uint64_t *)(a2 + v7 + 312));
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::operator=(a4 + v7 + 352, (uint64_t *)(a2 + v7 + 352));
    re::DynamicArray<re::MeshAssetWrapDeformerData>::operator=(a4 + v7 + 392, (uint64_t *)(a2 + v7 + 392));
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::operator=(a4 + v7 + 432, (uint64_t *)(a2 + v7 + 432));
    re::DynamicArray<re::MeshAssetJiggleDeformerData>::operator=(a4 + v7 + 472, (uint64_t *)(a2 + v7 + 472));
    v7 += 512;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::MeshAssetBlendShapeData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetBlendShapeData>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetBlendShapeData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetBlendShapeData *,re::MeshAssetBlendShapeData *,re::MeshAssetBlendShapeData *>((uint64_t)&v15, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 56 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = 56 * v8;
      v12 = 56 * v4;
      do
      {
        v13 = v10 + v11;
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::FixedArray<re::BlendShapeDefinition>::FixedArray((_QWORD *)(v10 + v11 + 16), v9 + v11 + 16);
        *(_QWORD *)(v13 + 40) = *(_QWORD *)(v9 + v11 + 40);
        *(_WORD *)(v13 + 48) = *(_WORD *)(v9 + v11 + 48);
        v9 += 56;
        v12 -= 56;
        v10 += 56;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetBlendShapeData *,re::MeshAssetBlendShapeData *,re::MeshAssetBlendShapeData *>((uint64_t)&v14, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 56 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (re::StringID *)(a1[4] + 56 * v4);
      v7 = -56 * v4 + 56 * v5;
      do
      {
        re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)v6 + 2);
        re::StringID::destroyString(v6);
        v6 = (re::StringID *)((char *)v6 + 56);
        v7 -= 56;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[7 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v11[2] = 0;
          v11[3] = 0;
          v11[4] = 0;
          v11[2] = v8[2];
          v8[2] = 0;
          v13 = v11[4];
          v14 = v8[4];
          v11[3] = v8[3];
          v11[4] = v14;
          v8[3] = 0;
          v8[4] = v13;
          v11[5] = v8[5];
          *((_WORD *)v11 + 24) = *((_WORD *)v8 + 24);
          re::FixedArray<re::BlendShapeDefinition>::deinit(v8 + 2);
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetBlendShapeData *,re::MeshAssetBlendShapeData *,re::MeshAssetBlendShapeData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::FixedArray<re::BlendShapeDefinition>::operator=((_QWORD *)(a4 + v7 + 16), a2 + v7 + 16);
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(a2 + v7 + 40);
    *(_WORD *)(v8 + 48) = *(_WORD *)(a2 + v7 + 48);
    v7 += 56;
  }
  while (a2 + v7 != v6);
  return v6;
}

_QWORD *re::FixedArray<re::BlendShapeDefinition>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::BlendShapeDefinition>::init<>((uint64_t)a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::BlendShapeDefinition>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

uint64_t re::FixedArray<re::BlendShapeDefinition>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x1E1E1E1E1E1E1E2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 136, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 136 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = &str_110;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + 96) = 0uLL;
      *(_OWORD *)(result + 112) = 0uLL;
      *(_QWORD *)(result + 128) = 0;
      result += 136;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_QWORD *)(result + 128) = 0;
  return result;
}

uint64_t re::FixedArray<re::BlendShapeDefinition>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendShapeDefinition *,re::BlendShapeDefinition *,re::BlendShapeDefinition *>((uint64_t)&v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) + 136 * v2, *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendShapeDefinition *,re::BlendShapeDefinition *,re::BlendShapeDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::FixedArray<unsigned int>::operator=((uint64_t *)(a4 + v7 + 16), a2 + v7 + 16);
    re::FixedArray<float>::operator=((uint64_t *)(a4 + v7 + 40), a2 + v7 + 40);
    re::FixedArray<float>::operator=((uint64_t *)(a4 + v7 + 64), a2 + v7 + 64);
    re::FixedArray<float>::operator=((uint64_t *)(a4 + v7 + 88), a2 + v7 + 88);
    re::FixedArray<float>::operator=((uint64_t *)(a4 + v7 + 112), a2 + v7 + 112);
    v7 += 136;
  }
  while (a2 + v7 != v6);
  return v6;
}

_QWORD *re::FixedArray<re::BlendShapeDefinition>::FixedArray(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::BlendShapeDefinition>::init<>((uint64_t)a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::BlendShapeDefinition>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetSkinningData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetSkinningData>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetSkinningData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  char v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkinningData *,re::MeshAssetSkinningData *,re::MeshAssetSkinningData *>((uint64_t)&v22, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 144 * a1[2], a1[4]);
    v11 = a1[2];
    if (v11 != v4)
    {
      v12 = *(_QWORD *)(a2 + 32);
      v13 = v12 + 144 * v4;
      v14 = a1[4];
      v15 = 144 * v11;
      do
      {
        v16 = v12 + v15;
        v17 = (_OWORD *)(v14 + v15);
        *(_DWORD *)(v14 + v15) = *(_DWORD *)(v12 + v15);
        re::FixedArray<re::SkinningInfluence>::FixedArray((uint64_t *)(v14 + v15 + 8), v12 + v15 + 8);
        re::FixedArray<int>::FixedArray((uint64_t *)(v14 + v15 + 32), v12 + v15 + 32);
        result = (uint64_t)re::FixedArray<int>::FixedArray((uint64_t *)(v14 + v15 + 56), v12 + v15 + 56);
        v18 = *(_OWORD *)(v12 + v15 + 80);
        v19 = *(_OWORD *)(v12 + v15 + 96);
        v20 = *(_OWORD *)(v12 + v15 + 128);
        v17[7] = *(_OWORD *)(v12 + v15 + 112);
        v17[8] = v20;
        v17[5] = v18;
        v17[6] = v19;
        v12 += 144;
        v14 += 144;
      }
      while (v16 + 144 != v13);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkinningData *,re::MeshAssetSkinningData *,re::MeshAssetSkinningData *>((uint64_t)&v21, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 144 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = 144 * v6 - 144 * v4;
      v8 = (_QWORD *)(a1[4] + 144 * v4 + 40);
      do
      {
        v9 = v8[2];
        if (v9)
        {
          if (v8[3])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, v8[4]);
            v8[3] = 0;
            v8[4] = 0;
          }
          v8[2] = 0;
        }
        v10 = *(v8 - 1);
        if (v10)
        {
          if (*v8)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, v8[1]);
            *v8 = 0;
            v8[1] = 0;
          }
          *(v8 - 1) = 0;
        }
        result = *(v8 - 4);
        if (result)
        {
          if (*(v8 - 3))
          {
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(v8 - 2));
            *(v8 - 3) = 0;
            *(v8 - 2) = 0;
          }
          *(v8 - 4) = 0;
        }
        v8 += 18;
        v7 -= 144;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 144 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::MeshAssetSkinningData>(v8, v11);
          v8 += 144;
          v11 += 144;
          v10 -= 144;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::MeshAssetSkinningData>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v7 = (_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v10 = (_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v9;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v11;
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v14;
  *(_OWORD *)(a2 + 80) = v12;
  *(_OWORD *)(a2 + 96) = v13;
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
  {
    if (*v10)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(a1 + 72));
      *v10 = 0;
      v10[1] = 0;
    }
    *(_QWORD *)(a1 + 56) = 0;
  }
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
    if (*v7)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, *(_QWORD *)(a1 + 48));
      *v7 = 0;
      v7[1] = 0;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*v4)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a1 + 24));
      *v4 = 0;
      v4[1] = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkinningData *,re::MeshAssetSkinningData *,re::MeshAssetSkinningData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    re::FixedArray<re::SkinningInfluence>::operator=((uint64_t *)(a4 + 8), v5 + 8);
    re::FixedArray<int>::operator=((uint64_t *)(a4 + 32), v5 + 32);
    re::FixedArray<int>::operator=((uint64_t *)(a4 + 56), v5 + 56);
    v7 = *(_OWORD *)(v5 + 128);
    v9 = *(_OWORD *)(v5 + 80);
    v8 = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a4 + 128) = v7;
    *(_OWORD *)(a4 + 80) = v9;
    *(_OWORD *)(a4 + 96) = v8;
    a4 += 144;
    v5 += 144;
  }
  while (v5 != v6);
  return v6;
}

uint64_t *re::FixedArray<re::SkinningInfluence>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (uint64_t *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::SkinningInfluence>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<unsigned long>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t *re::FixedArray<int>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (uint64_t *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<int>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<int>::copy(a1, a2);
    }
  }
  return a1;
}

void re::FixedArray<re::SkinningInfluence>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 4);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

uint64_t *re::FixedArray<re::SkinningInfluence>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::SkinningInfluence>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<unsigned long>::copy(a1, a2);
  }
  return a1;
}

uint64_t *re::FixedArray<int>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<int>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<int>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetPart>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetPart>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

_QWORD *re::DynamicArray<re::MeshAssetPart>::copy(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = result[2];
  if (v4 >= v5)
  {
    result = re::DynamicArray<re::MeshAssetPart>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v11 = *(_QWORD *)(a2 + 32);
    v12 = v3[2];
    v13 = v3[4];
    if (v12)
    {
      v14 = v12 << 8;
      do
      {
        result = (_QWORD *)re::MeshAssetPart::operator=(v13, v11);
        v11 += 256;
        v13 += 256;
        v14 -= 256;
      }
      while (v14);
      v13 = v3[4];
      v12 = v3[2];
      v11 = *(_QWORD *)(a2 + 32);
    }
    if (v12 != v4)
    {
      v15 = v12 << 8;
      v16 = v4 << 8;
      do
      {
        v17 = v13 + v15;
        v18 = v11 + v15;
        re::DynamicArray<re::MeshAssetBuffer>::DynamicArray(v13 + v15, (uint64_t *)(v11 + v15));
        v19 = *(_OWORD *)(v11 + v15 + 40);
        *(_OWORD *)(v17 + 52) = *(_OWORD *)(v11 + v15 + 52);
        *(_OWORD *)(v17 + 40) = v19;
        re::StringID::StringID((re::StringID *)(v13 + v15 + 72), (const StringID *)(v11 + v15 + 72));
        v20 = *(_OWORD *)(v11 + v15 + 112);
        *(_OWORD *)(v17 + 96) = *(_OWORD *)(v11 + v15 + 96);
        *(_OWORD *)(v17 + 112) = v20;
        v21 = *(_OWORD *)(v11 + v15 + 128);
        v22 = *(_OWORD *)(v11 + v15 + 144);
        v23 = *(_OWORD *)(v11 + v15 + 176);
        *(_OWORD *)(v17 + 160) = *(_OWORD *)(v11 + v15 + 160);
        *(_OWORD *)(v17 + 176) = v23;
        *(_OWORD *)(v17 + 128) = v21;
        *(_OWORD *)(v17 + 144) = v22;
        v24 = *(unsigned __int8 *)(v11 + v15 + 192);
        *(_BYTE *)(v17 + 192) = v24;
        if (v24)
          *(_BYTE *)(v17 + 193) = *(_BYTE *)(v18 + 193);
        v25 = *(unsigned __int8 *)(v18 + 194);
        *(_BYTE *)(v17 + 194) = v25;
        if (v25)
          *(_BYTE *)(v13 + v15 + 195) = *(_BYTE *)(v11 + v15 + 195);
        v26 = v13 + v15;
        v27 = v11 + v15;
        v28 = *(unsigned __int8 *)(v11 + v15 + 196);
        *(_BYTE *)(v13 + v15 + 196) = v28;
        if (v28)
          *(_BYTE *)(v26 + 197) = *(_BYTE *)(v27 + 197);
        result = (_QWORD *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v26 + 200, v27 + 200);
        v16 -= 256;
        v11 += 256;
        v13 += 256;
      }
      while (v15 != v16);
    }
  }
  else
  {
    v6 = result[4];
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 32);
      v8 = v4 << 8;
      do
      {
        result = (_QWORD *)re::MeshAssetPart::operator=(v6, v7);
        v7 += 256;
        v6 += 256;
        v8 -= 256;
      }
      while (v8);
      v6 = v3[4];
      v5 = v3[2];
    }
    if (v4 != v5)
    {
      v9 = v6 + (v4 << 8);
      v10 = (v5 << 8) - (v4 << 8);
      do
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v9 + 200));
        re::StringID::destroyString((re::StringID *)(v9 + 72));
        result = (_QWORD *)re::DynamicArray<re::MeshAssetBuffer>::deinit(v9);
        v9 += 256;
        v10 -= 256;
      }
      while (v10);
    }
  }
  v3[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetPart>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetPart>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (HIBYTE(a2))
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 256, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 8;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 8, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 8;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::MeshAssetPart>(v8, v11);
          v8 += 256;
          v11 += 256;
          v10 -= 256;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::MeshAssetPart>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  re::StringID *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  ++*(_DWORD *)(a1 + 24);
  ++*(_DWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(a2 + 40) = v6;
  v7 = (re::StringID *)(a1 + 72);
  LOBYTE(v5) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a1 + 72) & 1;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &str_110;
  v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v8;
  v9 = *(_OWORD *)(a1 + 128);
  v10 = *(_OWORD *)(a1 + 144);
  v11 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 176) = v11;
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 144) = v10;
  LODWORD(v5) = *(unsigned __int8 *)(a1 + 192);
  *(_BYTE *)(a2 + 192) = v5;
  if ((_DWORD)v5)
    *(_BYTE *)(a2 + 193) = *(_BYTE *)(a1 + 193);
  v12 = *(unsigned __int8 *)(a1 + 194);
  *(_BYTE *)(a2 + 194) = v12;
  if (v12)
    *(_BYTE *)(a2 + 195) = *(_BYTE *)(a1 + 195);
  v13 = *(unsigned __int8 *)(a1 + 196);
  *(_BYTE *)(a2 + 196) = v13;
  if (v13)
    *(_BYTE *)(a2 + 197) = *(_BYTE *)(a1 + 197);
  *(_OWORD *)(a2 + 200) = 0u;
  v14 = a2 + 200;
  *(_DWORD *)(v14 + 32) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, (uint64_t *)(a1 + 200));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 200));
  re::StringID::destroyString(v7);
  return re::DynamicArray<re::MeshAssetBuffer>::deinit(a1);
}

uint64_t re::MeshAssetPart::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  re::DynamicArray<re::MeshAssetBuffer>::operator=(a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 52) = v4;
  re::StringID::operator=((unint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 144);
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  if (*(_BYTE *)(a1 + 192) || *(_BYTE *)(a2 + 192))
  {
    if (!*(_BYTE *)(a1 + 192) || *(_BYTE *)(a2 + 192))
    {
      if (!*(_BYTE *)(a1 + 192) && *(_BYTE *)(a2 + 192))
        *(_BYTE *)(a1 + 192) = 1;
      *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
    }
    else
    {
      *(_BYTE *)(a1 + 192) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 194) || *(_BYTE *)(a2 + 194))
  {
    if (!*(_BYTE *)(a1 + 194) || *(_BYTE *)(a2 + 194))
    {
      if (!*(_BYTE *)(a1 + 194) && *(_BYTE *)(a2 + 194))
        *(_BYTE *)(a1 + 194) = 1;
      *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
    }
    else
    {
      *(_BYTE *)(a1 + 194) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 196) || *(_BYTE *)(a2 + 196))
  {
    if (!*(_BYTE *)(a1 + 196) || *(_BYTE *)(a2 + 196))
    {
      if (!*(_BYTE *)(a1 + 196) && *(_BYTE *)(a2 + 196))
        *(_BYTE *)(a1 + 196) = 1;
      *(_BYTE *)(a1 + 197) = *(_BYTE *)(a2 + 197);
    }
    else
    {
      *(_BYTE *)(a1 + 196) = 0;
    }
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 200, a2 + 200);
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetBuffer>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetBuffer>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetBuffer>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetBuffer>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetBuffer>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetBuffer *,re::MeshAssetBuffer *,re::MeshAssetBuffer *>((int)&v16, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 80 * *(_QWORD *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 != v4)
    {
      v11 = *(_QWORD *)(a2 + 32);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = 80 * v10;
      v14 = 80 * v4;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v12 + v13), (const re::DynamicString *)(v11 + v13));
        result = re::DynamicArray<BOOL>::DynamicArray(v12 + v13 + 32, (uint64_t *)(v11 + v13 + 32));
        *(_WORD *)(v12 + v13 + 72) = *(_WORD *)(v11 + v13 + 72);
        v11 += 80;
        v14 -= 80;
        v12 += 80;
      }
      while (v13 != v14);
    }
  }
  else
  {
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetBuffer *,re::MeshAssetBuffer *,re::MeshAssetBuffer *>((int)&v15, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 80 * v4), *(re::DynamicString **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 80 * v4 + 64);
      v8 = 80 * v6 - 80 * v4;
      do
      {
        v9 = *(v7 - 4);
        if (v9)
        {
          if (*v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          *v7 = 0;
          *(v7 - 3) = 0;
          *(v7 - 2) = 0;
          *(v7 - 4) = 0;
          ++*((_DWORD *)v7 - 2);
        }
        result = *(v7 - 8);
        if (result)
        {
          if ((*(_BYTE *)(v7 - 7) & 1) != 0)
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(v7 - 6));
          *((_OWORD *)v7 - 4) = 0u;
          *((_OWORD *)v7 - 3) = 0u;
        }
        v7 += 10;
        v8 -= 80;
      }
      while (v8);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetBuffer>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = (_QWORD *)(result[4] + 64);
    v4 = 80 * v2;
    do
    {
      v5 = *(v3 - 4);
      if (v5)
      {
        if (*v3)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        *v3 = 0;
        *(v3 - 3) = 0;
        *(v3 - 2) = 0;
        *(v3 - 4) = 0;
        ++*((_DWORD *)v3 - 2);
      }
      result = (_QWORD *)*(v3 - 8);
      if (result)
      {
        if ((*(_BYTE *)(v3 - 7) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(v3 - 6));
        *((_OWORD *)v3 - 4) = 0u;
        *((_OWORD *)v3 - 3) = 0u;
      }
      v3 += 10;
      v4 -= 80;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetBuffer>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetBuffer>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (uint64_t *)(v8 + 40);
        v11 = 80 * v9;
        v12 = 0uLL;
        v13 = v7;
        do
        {
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v14 = v10 - 5;
          *v13 = *(v10 - 5);
          *(v10 - 5) = 0;
          v13[3] = *(v10 - 2);
          *(v10 - 2) = 0;
          v16 = v13[1];
          v15 = v13[2];
          v17 = *(v10 - 3);
          v13[1] = *(v10 - 4);
          v13[2] = v17;
          *(v10 - 4) = v16;
          *(v10 - 3) = v15;
          v13[8] = 0;
          *((_DWORD *)v13 + 14) = 0;
          v13[5] = 0;
          v13[6] = 0;
          v13[4] = 0;
          v18 = *v10;
          v13[4] = *(v10 - 1);
          *(v10 - 1) = 0;
          v13[5] = v18;
          *v10 = 0;
          v19 = v13[6];
          v13[6] = v10[1];
          v10[1] = v19;
          v20 = v13[8];
          v13[8] = v10[3];
          v10[3] = v20;
          ++*((_DWORD *)v10 + 4);
          ++*((_DWORD *)v13 + 14);
          *((_WORD *)v13 + 36) = *((_WORD *)v10 + 16);
          v21 = *(v10 - 1);
          if (v21)
          {
            if (v10[3])
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
              v12 = 0uLL;
            }
            v10[3] = 0;
            *v10 = 0;
            v10[1] = 0;
            *(v10 - 1) = 0;
            ++*((_DWORD *)v10 + 4);
          }
          if (*v14)
          {
            if ((*(_BYTE *)(v10 - 4) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, *(v10 - 3));
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *(_OWORD *)(v10 - 3) = v12;
          }
          v10 += 10;
          v13 += 10;
          v11 -= 80;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetBuffer *,re::MeshAssetBuffer *,re::MeshAssetBuffer *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  re::DynamicString *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, v5);
      re::DynamicArray<BOOL>::operator=((uint64_t)this + 32, (uint64_t *)v5 + 4);
      *((_WORD *)this + 36) = *((_WORD *)v5 + 36);
      v5 = (re::DynamicString *)((char *)v5 + 80);
      this = (re::DynamicString *)((char *)this + 80);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (const re::DynamicString *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 80;
    }
  }
}

uint64_t re::DynamicArray<re::MeshAssetBuffer>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetBuffer>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::MeshLodLevelInfo>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 12 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 12 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 12 * (_QWORD)v5), 12 * v4 - 12 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 12 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0xCuLL))
        {
          v2 = 12 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 12 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 12 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 12, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshAssetContactDeformerData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetContactDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetContactDeformerData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetContactDeformerData *,re::MeshAssetContactDeformerData *,re::MeshAssetContactDeformerData *>((uint64_t)&v14, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 48 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = 48 * v8;
      v12 = 48 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::FixedArray<re::MeshAssetContactDeformerTarget>::FixedArray((uint64_t *)(v10 + v11 + 16), v9 + v11 + 16);
        *(_WORD *)(v10 + v11 + 40) = *(_WORD *)(v9 + v11 + 40);
        v9 += 48;
        v12 -= 48;
        v10 += 48;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetContactDeformerData *,re::MeshAssetContactDeformerData *,re::MeshAssetContactDeformerData *>((uint64_t)&v13, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 48 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (re::StringID *)(a1[4] + 48 * v4);
      v7 = 48 * v5 - 48 * v4;
      do
      {
        re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit((_QWORD *)v6 + 2);
        re::StringID::destroyString(v6);
        v6 = (re::StringID *)((char *)v6 + 48);
        v7 -= 48;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[6 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v11[2] = 0;
          v11[3] = 0;
          v11[4] = 0;
          v11[2] = v8[2];
          v8[2] = 0;
          v13 = v11[4];
          v14 = v8[4];
          v11[3] = v8[3];
          v11[4] = v14;
          v8[3] = 0;
          v8[4] = v13;
          *((_WORD *)v11 + 20) = *((_WORD *)v8 + 20);
          re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(v8 + 2);
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 6;
          v11 += 6;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetContactDeformerData *,re::MeshAssetContactDeformerData *,re::MeshAssetContactDeformerData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a4, (uint64_t *)v5);
      re::FixedArray<re::MeshAssetContactDeformerTarget>::operator=((uint64_t *)(a4 + 16), v5 + 16);
      *(_WORD *)(a4 + 40) = *(_WORD *)(v5 + 40);
      v5 += 48;
      a4 += 48;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *re::FixedArray<re::MeshAssetContactDeformerTarget>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (uint64_t *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::MeshAssetContactDeformerTarget>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::MeshAssetContactDeformerTarget>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

void re::FixedArray<re::MeshAssetContactDeformerTarget>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 32 * a3;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 32);
    v8 = (_OWORD *)((char *)v8 + v5 - 32);
  }
  *v8 = 0u;
  v8[1] = 0u;
}

uint64_t *re::FixedArray<re::MeshAssetContactDeformerTarget>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetContactDeformerTarget *,re::MeshAssetContactDeformerTarget *,re::MeshAssetContactDeformerTarget *,0>(*(uint64_t **)(a2 + 16), (uint64_t *)(*(_QWORD *)(a2 + 16) + 32 * v2), *(_QWORD **)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetContactDeformerTarget *,re::MeshAssetContactDeformerTarget *,re::MeshAssetContactDeformerTarget *,0>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (uint64_t)(v4 + 1);
    v7 = *v4;
    v4 += 4;
    v8 = a3 + 1;
    *a3 = v7;
    a3 += 4;
    re::FixedArray<float>::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

uint64_t *re::FixedArray<re::MeshAssetContactDeformerTarget>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::MeshAssetContactDeformerTarget>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::MeshAssetContactDeformerTarget>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetSmoothDeformerData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetSmoothDeformerData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::StringID *v11;
  uint64_t v12;
  re::StringID *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetSmoothDeformerData *,re::MeshAssetSmoothDeformerData *,re::MeshAssetSmoothDeformerData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = 3 * v8;
      v10 = *(_QWORD *)(a2 + 32) + 8 * v9;
      v11 = (re::StringID *)(a1[4] + 8 * v9);
      v12 = 24 * v4 - 8 * v9;
      do
      {
        v13 = re::StringID::StringID(v11, (const StringID *)v10);
        *((_WORD *)v13 + 8) = *(_WORD *)(v10 + 16);
        v10 += 24;
        v11 = (re::StringID *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetSmoothDeformerData *,re::MeshAssetSmoothDeformerData *,re::MeshAssetSmoothDeformerData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (re::StringID *)(a1[4] + 24 * v4);
      v7 = 24 * v5 - 24 * v4;
      do
      {
        re::StringID::destroyString(v6);
        v6 = (re::StringID *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[3 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          *((_WORD *)v11 + 8) = *((_WORD *)v8 + 8);
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 3;
          v11 += 3;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetSmoothDeformerData *,re::MeshAssetSmoothDeformerData *,re::MeshAssetSmoothDeformerData *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v4);
      *(_WORD *)(a3 + 16) = *(_WORD *)(v4 + 16);
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::MeshAssetWrapDeformerData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetWrapDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetWrapDeformerData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetWrapDeformerData *,re::MeshAssetWrapDeformerData *,re::MeshAssetWrapDeformerData *>((uint64_t)&v20, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 112 * a1[2], a1[4]);
    v14 = a1[2];
    if (v14 != v4)
    {
      v15 = *(_QWORD *)(a2 + 32);
      v16 = a1[4];
      v17 = 112 * v14;
      v18 = 112 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v16 + v17), (const StringID *)(v15 + v17));
        re::StringID::StringID((re::StringID *)(v16 + v17 + 16), (const StringID *)(v15 + v17 + 16));
        re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v16 + v17 + 32), v15 + v17 + 32);
        re::FixedArray<re::Vector3<float>>::FixedArray((uint64_t *)(v16 + v17 + 56), v15 + v17 + 56);
        re::FixedArray<re::Vector3<float>>::FixedArray((uint64_t *)(v16 + v17 + 80), v15 + v17 + 80);
        *(_WORD *)(v16 + v17 + 104) = *(_WORD *)(v15 + v17 + 104);
        v15 += 112;
        v18 -= 112;
        v16 += 112;
      }
      while (v17 != v18);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetWrapDeformerData *,re::MeshAssetWrapDeformerData *,re::MeshAssetWrapDeformerData *>((uint64_t)&v19, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 112 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4];
      v7 = 112 * v4;
      v8 = 112 * v5;
      do
      {
        v9 = (_QWORD *)(v6 + v7);
        v10 = *(_QWORD *)(v6 + v7 + 80);
        if (v10)
        {
          if (v9[11])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v6 + v7 + 96));
            v9[11] = 0;
            v9[12] = 0;
          }
          v9[10] = 0;
        }
        v11 = v9[7];
        if (v11)
        {
          if (*(_QWORD *)(v6 + v7 + 64))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v6 + v7 + 72));
            *(_QWORD *)(v6 + v7 + 64) = 0;
            *(_QWORD *)(v6 + v7 + 72) = 0;
          }
          v9[7] = 0;
        }
        v12 = (_QWORD *)(v6 + v7);
        v13 = *(_QWORD *)(v6 + v7 + 32);
        if (v13)
        {
          if (v12[5])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v6 + v7 + 48));
            v12[5] = 0;
            v12[6] = 0;
          }
          v12[4] = 0;
        }
        re::StringID::destroyString((re::StringID *)(v12 + 2));
        re::StringID::destroyString((re::StringID *)(v6 + v7));
        v6 += 112;
        v8 -= 112;
      }
      while (v7 != v8);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::StringID *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::StringID *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 112 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::MeshAssetWrapDeformerData>(v8, v11);
          v8 = (re::StringID *)((char *)v8 + 112);
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        v8 = (re::StringID *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::StringID *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::MeshAssetWrapDeformerData>(re::StringID *this, uint64_t a2)
{
  uint64_t v3;
  char v4;
  re::StringID *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)this;
  *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)this & 1;
  *(_QWORD *)a2 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(_QWORD *)(a2 + 8) = *((_QWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = &str_110;
  v5 = (re::StringID *)((char *)this + 16);
  v4 = *((_QWORD *)this + 2);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL | *((_QWORD *)this + 2) & 1;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = &str_110;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v7 = (_QWORD *)((char *)this + 40);
  v6 = *((_QWORD *)this + 5);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)(a2 + 40) = v6;
  *((_QWORD *)this + 5) = 0;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v8;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v10 = (_QWORD *)((char *)this + 64);
  v9 = *((_QWORD *)this + 8);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)(a2 + 64) = v9;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = v11;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v12 = *((_QWORD *)this + 11);
  *(_QWORD *)(a2 + 80) = *((_QWORD *)this + 10);
  *(_QWORD *)(a2 + 88) = v12;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v13;
  *(_WORD *)(a2 + 104) = *((_WORD *)this + 52);
  if (*((_QWORD *)this + 10))
    *((_QWORD *)this + 10) = 0;
  v14 = *((_QWORD *)this + 7);
  if (v14)
  {
    if (*v10)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 40))(v14, *((_QWORD *)this + 9));
      *v10 = 0;
      v10[1] = 0;
    }
    *((_QWORD *)this + 7) = 0;
  }
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
    if (*v7)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *((_QWORD *)this + 6));
      *v7 = 0;
      v7[1] = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  re::StringID::destroyString(v5);
  re::StringID::destroyString(this);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetWrapDeformerData *,re::MeshAssetWrapDeformerData *,re::MeshAssetWrapDeformerData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 16), (uint64_t *)(a2 + v7 + 16));
    re::FixedArray<unsigned int>::operator=((uint64_t *)(a4 + v7 + 32), a2 + v7 + 32);
    re::FixedArray<re::Vector3<float>>::operator=((uint64_t *)(a4 + v7 + 56), a2 + v7 + 56);
    re::FixedArray<re::Vector3<float>>::operator=((uint64_t *)(a4 + v7 + 80), a2 + v7 + 80);
    *(_WORD *)(a4 + v7 + 104) = *(_WORD *)(a2 + v7 + 104);
    v7 += 112;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t *re::FixedArray<re::Vector3<float>>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::Vector3<float>>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::Vector3<float>>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetJiggleDeformerData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetJiggleDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetJiggleDeformerData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetJiggleDeformerData *,re::MeshAssetJiggleDeformerData *,re::MeshAssetJiggleDeformerData *>((uint64_t)&v16, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 48 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = 48 * v8;
      v12 = 48 * v4;
      do
      {
        v13 = v10 + v11;
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 16), (const StringID *)(v9 + v11 + 16));
        v14 = *(_QWORD *)(v9 + v11 + 32);
        *(_WORD *)(v13 + 40) = *(_WORD *)(v9 + v11 + 40);
        *(_QWORD *)(v13 + 32) = v14;
        v9 += 48;
        v12 -= 48;
        v10 += 48;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetJiggleDeformerData *,re::MeshAssetJiggleDeformerData *,re::MeshAssetJiggleDeformerData *>((uint64_t)&v15, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 48 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4] + 48 * v4;
      v7 = 48 * v5 - 48 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[6 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = (uint64_t)&str_110;
          v8[2] = 0;
          v13 = v8[4];
          *((_WORD *)v11 + 20) = *((_WORD *)v8 + 20);
          v11[4] = v13;
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 6;
          v11 += 6;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetJiggleDeformerData *,re::MeshAssetJiggleDeformerData *,re::MeshAssetJiggleDeformerData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == a3)
    return a2;
  v4 = a3;
  v5 = a4 + 16;
  v6 = a2 + 16;
  do
  {
    re::StringID::operator=((unint64_t *)(v5 - 16), (uint64_t *)(v6 - 16));
    re::StringID::operator=((unint64_t *)v5, (uint64_t *)v6);
    v7 = *(_QWORD *)(v6 + 16);
    *(_WORD *)(v5 + 24) = *(_WORD *)(v6 + 24);
    *(_QWORD *)(v5 + 16) = v7;
    v5 += 48;
    v8 = v6 + 32;
    v6 += 48;
  }
  while (v8 != v4);
  return v4;
}

uint64_t re::DynamicArray<re::MeshAssetInstance>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetInstance>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetInstance>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::StringID *v11;
  uint64_t v12;
  re::StringID *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetInstance>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetInstance *,re::MeshAssetInstance *,re::MeshAssetInstance *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 96 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = 3 * v8;
      v10 = *(_QWORD *)(a2 + 32) + 32 * v9;
      v11 = (re::StringID *)(a1[4] + 32 * v9);
      v12 = 96 * v4 - 32 * v9;
      do
      {
        v13 = re::StringID::StringID(v11, (const StringID *)v10);
        *((_OWORD *)v13 + 1) = *(_OWORD *)(v10 + 16);
        v14 = *(_OWORD *)(v10 + 32);
        v15 = *(_OWORD *)(v10 + 48);
        v16 = *(_OWORD *)(v10 + 64);
        *(_OWORD *)((char *)v13 + 76) = *(_OWORD *)(v10 + 76);
        *((_OWORD *)v13 + 3) = v15;
        *((_OWORD *)v13 + 4) = v16;
        *((_OWORD *)v13 + 2) = v14;
        v10 += 96;
        v11 = (re::StringID *)((char *)v13 + 96);
        v12 -= 96;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetInstance *,re::MeshAssetInstance *,re::MeshAssetInstance *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 96 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (re::StringID *)(a1[4] + 96 * v4);
      v7 = 96 * v5 - 96 * v4;
      do
      {
        re::StringID::destroyString(v6);
        v6 = (re::StringID *)((char *)v6 + 96);
        v7 -= 96;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::MeshAssetInstance>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetInstance>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[12 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v13 = *(_OWORD *)((char *)v8 + 76);
          v14 = *((_OWORD *)v8 + 2);
          v15 = *((_OWORD *)v8 + 4);
          *((_OWORD *)v11 + 3) = *((_OWORD *)v8 + 3);
          *((_OWORD *)v11 + 4) = v15;
          *((_OWORD *)v11 + 2) = v14;
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          *(_OWORD *)((char *)v11 + 76) = v13;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 12;
          v11 += 12;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshAssetInstance *,re::MeshAssetInstance *,re::MeshAssetInstance *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v4);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 16);
      v6 = *(_OWORD *)(v4 + 32);
      v7 = *(_OWORD *)(v4 + 48);
      v8 = *(_OWORD *)(v4 + 64);
      *(_OWORD *)(a3 + 76) = *(_OWORD *)(v4 + 76);
      *(_OWORD *)(a3 + 48) = v7;
      *(_OWORD *)(a3 + 64) = v8;
      *(_OWORD *)(a3 + 32) = v6;
      v4 += 96;
      a3 += 96;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshAssetSkeleton>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetSkeleton>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton *,re::MeshAssetSkeleton *,re::MeshAssetSkeleton *>((uint64_t)&v20, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 112 * a1[2], a1[4]);
    v14 = a1[2];
    if (v14 != v4)
    {
      v15 = *(_QWORD *)(a2 + 32);
      v16 = a1[4];
      v17 = 112 * v14;
      v18 = 112 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v16 + v17), (const StringID *)(v15 + v17));
        re::FixedArray<re::StringID>::FixedArray((unint64_t *)(v16 + v17 + 16), v15 + v17 + 16);
        re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v16 + v17 + 40), v15 + v17 + 40);
        re::FixedArray<re::GenericSRT<float>>::FixedArray((_QWORD *)(v16 + v17 + 64), v15 + v17 + 64);
        re::FixedArray<re::Matrix4x4<float>>::FixedArray((uint64_t *)(v16 + v17 + 88), v15 + v17 + 88);
        v15 += 112;
        v18 -= 112;
        v16 += 112;
      }
      while (v17 != v18);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton *,re::MeshAssetSkeleton *,re::MeshAssetSkeleton *>((uint64_t)&v19, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 112 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4];
      v7 = 112 * v4;
      v8 = 112 * v5;
      do
      {
        v9 = (_QWORD *)(v6 + v7);
        v10 = *(_QWORD *)(v6 + v7 + 88);
        if (v10)
        {
          if (v9[12])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v6 + v7 + 104));
            v9[12] = 0;
            v9[13] = 0;
          }
          v9[11] = 0;
        }
        v11 = v9[8];
        if (v11)
        {
          if (*(_QWORD *)(v6 + v7 + 72))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v6 + v7 + 80));
            *(_QWORD *)(v6 + v7 + 72) = 0;
            *(_QWORD *)(v6 + v7 + 80) = 0;
          }
          v9[8] = 0;
        }
        v12 = (_QWORD *)(v6 + v7);
        v13 = *(_QWORD *)(v6 + v7 + 40);
        if (v13)
        {
          if (v12[6])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v6 + v7 + 56));
            v12[6] = 0;
            v12[7] = 0;
          }
          v12[5] = 0;
        }
        re::FixedArray<re::StringID>::deinit(v12 + 2);
        re::StringID::destroyString((re::StringID *)(v6 + v7));
        v6 += 112;
        v8 -= 112;
      }
      while (v7 != v8);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::MeshAssetSkeleton>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetSkeleton>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 112 * v9;
        v11 = v7;
        do
        {
          re::ObjectHelper::move<re::MeshAssetSkeleton>(v8, v11);
          v8 += 14;
          v11 += 14;
          v10 -= 112;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::MeshAssetSkeleton>(_QWORD *a1, unint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  *a2 = *a2 & 0xFFFFFFFFFFFFFFFELL | *a1 & 1;
  *a2 = *a1 & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  a2[1] = a1[1];
  *a1 = 0;
  a1[1] = &str_110;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  v4 = a1 + 2;
  a2[2] = a1[2];
  a1[2] = 0;
  v5 = a2[4];
  v6 = a1[4];
  a2[3] = a1[3];
  a2[4] = v6;
  a1[3] = 0;
  a1[4] = v5;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  v8 = a1 + 6;
  v7 = a1[6];
  a2[5] = a1[5];
  a1[5] = 0;
  a2[6] = v7;
  a1[6] = 0;
  v9 = a2[7];
  a2[7] = a1[7];
  a1[7] = v9;
  a2[8] = 0;
  a2[9] = 0;
  a2[10] = 0;
  v11 = a1 + 9;
  v10 = a1[9];
  a2[8] = a1[8];
  a1[8] = 0;
  a2[9] = v10;
  v12 = a2[10];
  a2[10] = a1[10];
  a1[9] = 0;
  a1[10] = v12;
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = 0;
  v13 = a1[12];
  a2[11] = a1[11];
  a2[12] = v13;
  a1[11] = 0;
  a1[12] = 0;
  v14 = a2[13];
  a2[13] = a1[13];
  a1[13] = v14;
  if (a1[11])
    a1[11] = 0;
  v15 = a1[8];
  if (v15)
  {
    if (*v11)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, a1[10]);
      *v11 = 0;
      v11[1] = 0;
    }
    a1[8] = 0;
  }
  v16 = a1[5];
  if (v16)
  {
    if (*v8)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, a1[7]);
      *v8 = 0;
      v8[1] = 0;
    }
    a1[5] = 0;
  }
  re::FixedArray<re::StringID>::deinit(v4);
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton *,re::MeshAssetSkeleton *,re::MeshAssetSkeleton *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::FixedArray<re::StringID>::operator=((unint64_t *)(a4 + v7 + 16), a2 + v7 + 16);
    re::FixedArray<unsigned int>::operator=((uint64_t *)(a4 + v7 + 40), a2 + v7 + 40);
    re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(a4 + v7 + 64), a2 + v7 + 64);
    re::FixedArray<re::Matrix4x4<float>>::operator=((uint64_t *)(a4 + v7 + 88), a2 + v7 + 88);
    v7 += 112;
  }
  while (a2 + v7 != v6);
  return v6;
}

void re::DynamicArray<re::MeshAssetSkeleton>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 112 * a2 + 56;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = (_QWORD *)(v10 + v8);
      v12 = *(_QWORD *)(v10 + v8 + 32);
      if (v12)
      {
        if (v11[5])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v10 + v8 + 48));
          v11[5] = 0;
          v11[6] = 0;
        }
        v11[4] = 0;
      }
      v13 = v11[1];
      if (v13)
      {
        if (*(_QWORD *)(v10 + v8 + 16))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v10 + v8 + 24));
          *(_QWORD *)(v10 + v8 + 16) = 0;
          *(_QWORD *)(v10 + v8 + 24) = 0;
        }
        v11[1] = 0;
      }
      v14 = (_QWORD *)(v10 + v8);
      v15 = *(_QWORD *)(v10 + v8 - 16);
      if (v15)
      {
        if (*(v14 - 1))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v10 + v8));
          *(v14 - 1) = 0;
          *v14 = 0;
        }
        *(v14 - 2) = 0;
      }
      re::FixedArray<re::StringID>::deinit(v14 - 5);
      re::StringID::destroyString((re::StringID *)(v11 - 7));
      ++v9;
      v8 += 112;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 112 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        v6 += 112;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::MeshAsset::skeletonAtIndex(re::MeshAsset *this, unint64_t a2)
{
  uint64_t result;

  if (*((_QWORD *)this + 117) > a2)
    return *((_QWORD *)this + 118) + 160 * a2;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "skeletonIndex < skeletonCount()", "skeletonAtIndex", 265);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t `anonymous namespace'::makeMeshAssetPartFromMeshPart(_anonymous_namespace_ *this, const re::MeshPart *a2, re::MeshManager *a3, int a4)
{
  re::ReadOnlyCPUAccessibleBufferSliceContent *v4;
  const re::MeshPart *v6;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const re::MeshPart *v13;
  const re::MeshPart *v14;
  id v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  _anonymous_namespace_ *v25;
  __int128 v26;
  __int128 v27;
  id v28;
  int v29;
  unsigned int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _BYTE *v37;
  int v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  __n128 v46;
  uint64_t v47;
  const char *v48;
  id *v49;
  unsigned __int16 **v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unsigned __int16 *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t *v65;
  const char *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  _BYTE *v78;
  unsigned int v79;
  int v80;
  uint64_t v82;
  int v83;
  uint64_t v85;
  int v86;
  uint64_t v88;
  int v89;
  uint64_t v91;
  int v92;
  uint64_t v94;
  int v95;
  uint64_t v97;
  int v98;
  uint64_t v100;
  int v101;
  uint64_t v103;
  int v104;
  uint64_t v106;
  int v107;
  _anonymous_namespace_ *v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  size_t v123;
  uint64_t VectorSizeForVertexFormat;
  uint64_t v125;
  uint64_t v126;
  float v127;
  float *v128;
  unsigned int v129;
  int v130;
  float *v131;
  int v132;
  float *v133;
  unsigned int v134;
  float *v135;
  int v136;
  float v137;
  float *v138;
  unsigned int v139;
  float *v140;
  int v141;
  float *v142;
  unsigned int v143;
  float *v144;
  int v145;
  float v146;
  _DWORD *v147;
  __int16 v148;
  float *v154;
  int v155;
  float *v156;
  unsigned int v157;
  uint64_t i;
  int v159;
  int v160;
  __n128 v161;
  _OWORD *v162;
  uint64_t v163;
  id *v164;
  uint64_t v165;
  char v166;
  unsigned int v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  unint64_t v173;
  char v174;
  int *v175;
  int v176;
  int v177;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  char v186;
  unsigned __int16 *v187;
  int v188;
  int v189;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  char v197;
  int *v198;
  int v199;
  int v200;
  uint64_t v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;
  __int16 v207;
  char v208;
  unsigned __int16 *v209;
  int v210;
  int v211;
  uint64_t v214;
  uint64_t v215;
  __int16 v216;
  uint64_t v217;
  __int16 v218;
  re::DynamicString *v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  int v230;
  __int128 v231;
  unsigned int v232;
  char v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  int32x4_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v250;
  uint64_t v251;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v252;
  uint64_t v253;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  id v258;
  unsigned int v259;
  re::MeshManager *v260;
  _anonymous_namespace_ *v261;
  int v262;
  unint64_t v263;
  const re::MeshPart *v264;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v265;
  unint64_t v266;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v268;
  char *v269;
  unsigned __int8 *v270;
  _QWORD *v271;
  unint64_t v272;
  unsigned __int16 *v273;
  unint64_t v274;
  char *v275;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v276;
  _QWORD v277[2];
  unint64_t v278;
  int v279;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v280;
  unint64_t v281;
  _OWORD __dst[2];
  _OWORD v283[3];
  void *v284;
  int32x4_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  char v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  __int128 v297;
  uint64_t v298;
  __int128 v299;
  int v300;
  _BYTE v301[40];
  unint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  __int16 v306;
  _OWORD v307[3];
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  int v311;
  uint64_t v312;
  _BYTE v313[28];
  unint64_t v314;
  void *v315;
  int32x4_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  char v322;
  char v323;
  char v324;
  BOOL v325;
  char v326;
  char v327;
  _BYTE v328[44];
  _BYTE v329[12];
  __int128 v330;
  __int16 v331;
  unint64_t v332;
  uint64_t v333;

  v6 = a2;
  v333 = *MEMORY[0x24BDAC8D0];
  v312 = 0;
  v309 = 0;
  v310 = 0uLL;
  v311 = 0;
  v313[4] = 1;
  *(_DWORD *)&v313[12] = 1;
  *(_WORD *)&v313[16] = -1;
  *(_DWORD *)&v313[24] = 0;
  *(_DWORD *)&v313[20] = 0;
  v8 = (unint64_t)&v314;
  v314 = 0;
  v315 = &str_110;
  *(_QWORD *)&v9 = 0x7F0000007FLL;
  *((_QWORD *)&v9 + 1) = 0x7F0000007FLL;
  v316 = vdupq_n_s32(0x7F800000u);
  v317 = v9;
  v324 = 0;
  v326 = 0;
  memset(v328, 0, 36);
  v322 = 0;
  v320 = 0u;
  v321 = 0u;
  v318 = 0u;
  v319 = 0u;
  *(_QWORD *)&v328[36] = 0x7FFFFFFFLL;
  v10 = re::AttributeTable::buffers(a2);
  v12 = v11;
  v13 = v6;
  do
  {
    v14 = v13;
    v13 = (const re::MeshPart *)*((_QWORD *)v13 + 1);
  }
  while (v13 && !*((_QWORD *)v14 + 4));
  v15 = *(id *)(*(_QWORD *)a3 + 184);
  v16 = (_anonymous_namespace_ *)objc_msgSend(v15, "supportsFamily:", 1006);
  if ((_DWORD)v16)
  {
    v16 = (_anonymous_namespace_ *)objc_msgSend(v15, "supportsFamily:", 5001);
    v262 = (int)v16;
  }
  else
  {
    v262 = 0;
  }
  if (*((_QWORD *)v14 + 4) != v12 || *((_QWORD *)v6 + 43) != v12)
  {
    v32 = __dst[0];
    v33 = __dst[1];
    *(_BYTE *)this = 0;
    *((_QWORD *)this + 2) = 100;
    *((_QWORD *)this + 3) = &re::AssetErrorCategory(void)::instance;
    *((_OWORD *)this + 2) = v32;
    *((_OWORD *)this + 3) = v33;
    goto LABEL_473;
  }
  v260 = a3;
  v261 = this;
  v258 = v15;
  v264 = v6;
  v280 = 0;
  v277[1] = 0;
  v278 = 0;
  v277[0] = 0;
  v279 = 0;
  v268 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)v12;
  if (v12)
  {
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity(&v309, v12);
    re::DynamicArray<re::ReadOnlyCPUAccessibleBufferSliceContent>::resize((uint64_t)v277, v12);
    v4 = 0;
    v18 = 0;
    v8 = (unint64_t)&v301[8];
    v272 = v278;
    v19 = (unint64_t)v280;
    while (1)
    {
      v20 = *((_QWORD *)v14 + 4);
      if (v20 <= (unint64_t)v18)
        goto LABEL_475;
      if (*((_BYTE *)v4 + *((_QWORD *)v14 + 5) + 4) != 1)
        break;
      if (a4 && (v21 = (char *)v4 + v10, !*(_DWORD *)((char *)v4 + v10 + 12)))
      {
        v28 = *(id *)v21;
        v29 = *((_DWORD *)v21 + 2);
        v30 = objc_msgSend(*(id *)v21, sel_length);
        v31 = *((_DWORD *)v21 + 2);
        *(_QWORD *)v329 = v28;
        *(_DWORD *)&v329[8] = v29;
        v6 = v264;
        LODWORD(v24) = v30 - v31;
        this = v261;
      }
      else
      {
        v22 = *(id *)((char *)v4 + v10);
        v23 = *(_QWORD *)((char *)v4 + v10 + 8);
        if (v22)
          v22 = v22;
        *(_QWORD *)v329 = v22;
        v24 = HIDWORD(v23);
        *(_DWORD *)&v329[8] = v23;
      }
      v12 = (unint64_t)v268;
      LODWORD(v330) = v24;
      re::ReadOnlyCPUAccessibleBufferSliceContent::make(v329, (uint64_t)v301);
      v20 = v301[0];
      if (v301[0])
      {
        if (v272 <= (unint64_t)v18)
          goto LABEL_479;
        re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)v19, (uint64_t *)&v301[8]);
      }
      else
      {
        v26 = __dst[0];
        v27 = __dst[1];
        *(_BYTE *)this = 0;
        *((_QWORD *)this + 2) = 100;
        *((_QWORD *)this + 3) = &re::AssetErrorCategory(void)::instance;
        *((_OWORD *)this + 2) = v26;
        *((_OWORD *)this + 3) = v27;
      }
      re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v301);
      v17 = *(_anonymous_namespace_ **)v329;
      if (*(_QWORD *)v329)

      if (!(_DWORD)v20)
        goto LABEL_466;
      v18 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v18 + 1);
      v19 += 56;
      v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 16);
      if (v268 == v18)
        goto LABEL_30;
    }
    v58 = __dst[0];
    v59 = __dst[1];
    *(_BYTE *)this = 0;
    *((_QWORD *)this + 2) = 100;
    *((_QWORD *)this + 3) = &re::AssetErrorCategory(void)::instance;
    *((_OWORD *)this + 2) = v58;
    *((_OWORD *)this + 3) = v59;
    goto LABEL_466;
  }
  re::DynamicArray<re::ReadOnlyCPUAccessibleBufferSliceContent>::resize((uint64_t)v277, 0);
LABEL_30:
  v308 = 0u;
  memset(v307, 0, sizeof(v307));
  v281 = 0;
  if (!v12)
  {
    v259 = *((_DWORD *)v6 + 117);
    v257 = *((unsigned __int8 *)v6 + 477);
    if ((a4 & 1) != 0)
      goto LABEL_77;
LABEL_92:
    v49 = (id *)v260;
    goto LABEL_315;
  }
  v8 = 0;
  v20 = v278;
  v18 = v280;
  v19 = 56;
  do
  {
    v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)*((_QWORD *)v6 + 43);
    if ((unint64_t)v4 <= v8)
    {
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v8;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_475:
      *(_QWORD *)&v307[0] = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v18;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_476:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 789;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v8;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_477:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v8;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_478:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 789;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v4;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_479:
      v281 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v307[0]) = 136315906;
      *(_QWORD *)((char *)v307 + 4) = "operator[]";
      WORD6(v307[0]) = 1024;
      *(_DWORD *)((char *)v307 + 14) = 789;
      WORD1(v307[1]) = 2048;
      *(_QWORD *)((char *)&v307[1] + 4) = v18;
      WORD6(v307[1]) = 2048;
      *(_QWORD *)((char *)&v307[1] + 14) = v272;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_480:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 789;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v20;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v263;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_481:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v20;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_482:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v4;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_483:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v4;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_484:
      v281 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v329 = 136315906;
      *(_QWORD *)&v329[4] = "operator[]";
      LOWORD(v330) = 1024;
      *(_DWORD *)((char *)&v330 + 2) = 476;
      WORD3(v330) = 2048;
      *((_QWORD *)&v330 + 1) = v4;
      v331 = 2048;
      v332 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_485:
      v281 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v8;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_486:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      v255 = v70;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v255;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_487:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 789;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v263;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v263;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_488;
    }
    v35 = 0;
    v36 = 1;
    do
    {
      v37 = (_BYTE *)qword_24ED30BD8[2 * v35 + 1];
      v38 = *v37;
      v39 = *(_BYTE **)(*((_QWORD *)v6 + 44) + 16 * v8 + 8);
      if (*v37)
      {
        v40 = v37 + 1;
        v39 = *(_BYTE **)(*((_QWORD *)v6 + 44) + 16 * v8 + 8);
        while (*v39 && v38 == *v39)
        {
          ++v39;
          v42 = *v40++;
          v38 = v42;
          if (!v42)
            goto LABEL_42;
        }
      }
      else
      {
LABEL_42:
        if (!*v39)
          break;
      }
      v36 = v35++ < 8;
    }
    while (v35 != 9);
    if (v36)
    {
      if (v20 <= v8)
        goto LABEL_476;
      v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v4 <= v8)
        goto LABEL_477;
      *(_QWORD *)&__dst[0] = *((_QWORD *)v18 + 7 * v8) + *(unsigned int *)(*((_QWORD *)v14 + 5) + 16 * v8 + 8);
      if (re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v307, *(unint64_t *)&__dst[0]) == -1)re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::addNew((uint64_t *)v307, (unint64_t *)__dst, &v281);
    }
    v281 = ++v8;
  }
  while (v8 < v12);
  v259 = *((_DWORD *)v6 + 117);
  v257 = *((unsigned __int8 *)v6 + 477);
  if ((a4 & 1) == 0)
  {
    v12 = 0;
    v4 = 0;
    v276 = 0;
    while (1)
    {
      if (v20 <= (unint64_t)v4)
        goto LABEL_478;
      v275 = *(char **)v18;
      v43 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v307, (unint64_t)v275);
      if (v43 == -1)
      {
        v43 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::addNew((uint64_t *)v307, (unint64_t *)&v275, (unint64_t *)&v276);
        v8 = v43;
      }
      else
      {
        v8 = *((_QWORD *)&v307[0] + 1) + 16 * v43 + 8;
      }
      if (v4 == *(re::ReadOnlyCPUAccessibleBufferSliceContent **)v8)
      {
        v8 = *((_QWORD *)v14 + 4);
        if (v8 <= (unint64_t)v4)
          goto LABEL_482;
        v44 = *((_QWORD *)v14 + 5);
        v8 = *((_QWORD *)v18 + 1);
        memset(v301, 0, 32);
        re::DynamicString::setCapacity(v301, 0);
        v305 = 0;
        v302 = 0;
        v303 = 0;
        *(_QWORD *)&v301[32] = 0;
        v304 = 0;
        v306 = 256;
        v19 = *((_QWORD *)v6 + 43);
        if (v19 <= (unint64_t)v4)
          goto LABEL_484;
        v19 = *(_QWORD *)(*((_QWORD *)v6 + 44) + v12 + 8);
        v45 = strlen((const char *)v19);
        *(_QWORD *)&__dst[0] = v19;
        *((_QWORD *)&__dst[0] + 1) = v45;
        re::DynamicString::operator=((re::DynamicString *)v301, (uint64_t)__dst);
        LOBYTE(v306) = *(_BYTE *)(v44 + v12 + 12);
        HIBYTE(v306) = *(_BYTE *)(v44 + v12 + 5);
        if (v302 < v8)
          re::DynamicArray<BOOL>::setCapacity(&v301[32], v8);
        re::DynamicArray<REFrameAnalysisBottleneck>::copy(&v301[32], 0, *(char **)v18, v8);
        v46.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)&v309, (uint64_t)v301);
        v6 = v264;
        if (*(_QWORD *)&v301[32])
        {
          if (v305)
            (*(void (**)(double))(**(_QWORD **)&v301[32] + 40))(v46.n128_f64[0]);
          v305 = 0;
          v302 = 0;
          v303 = 0;
          *(_QWORD *)&v301[32] = 0;
          ++v304;
        }
        v34 = *(_QWORD *)v301;
        if (!*(_QWORD *)v301 || (v301[8] & 1) == 0)
          goto LABEL_74;
        v47 = *(_QWORD *)&v301[16];
      }
      else
      {
        v19 = *((_QWORD *)v6 + 43);
        if (v19 <= (unint64_t)v4)
          goto LABEL_483;
        v48 = *(const char **)(*((_QWORD *)v6 + 44) + v12 + 8);
        v8 = *(_QWORD *)v8;
        v19 = *((_QWORD *)v6 + 43);
        if (v19 <= v8)
          goto LABEL_485;
        *(_QWORD *)&__dst[0] = *(_QWORD *)(*((_QWORD *)v6 + 44) + 16 * v8 + 8);
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<char const*>((uint64_t)v328, (re::DynamicString *)v329, (const char **)__dst);
        v34 = *(_QWORD *)v329;
        if (!*(_QWORD *)v329 || (v329[8] & 1) == 0)
          goto LABEL_74;
        v47 = *(_QWORD *)((char *)&v330 + 4);
      }
      v34 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v34 + 40))(v34, v47, v46);
LABEL_74:
      v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 1);
      v276 = v4;
      v12 += 16;
      v18 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v18 + 56);
      if (v4 >= v268)
      {
        this = v261;
        goto LABEL_92;
      }
    }
  }
LABEL_77:
  v49 = (id *)v260;
  v19 = *((unsigned __int8 *)v6 + 476);
  if (v19 == 255)
    goto LABEL_106;
  v8 = v278;
  if (v278 <= v19)
    goto LABEL_497;
  v8 = *((_QWORD *)v14 + 4);
  if (v8 <= v19)
  {
LABEL_498:
    *(_QWORD *)v329 = 0;
    memset(v283, 0, sizeof(v283));
    memset(__dst, 0, sizeof(__dst));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v301 = 136315906;
    *(_QWORD *)&v301[4] = "operator[]";
    *(_WORD *)&v301[12] = 1024;
    *(_DWORD *)&v301[14] = 476;
    *(_WORD *)&v301[18] = 2048;
    *(_QWORD *)&v301[20] = v19;
    *(_WORD *)&v301[28] = 2048;
    *(_QWORD *)&v301[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_499;
  }
  v50 = (unsigned __int16 **)((char *)v280 + 56 * *((unsigned __int8 *)v6 + 476));
  v51 = *((unsigned int *)v6 + 116);
  v52 = *(unsigned __int8 *)(*((_QWORD *)v14 + 5) + 16 * v19 + 12);
  if (v52 != 36)
  {
    if (v52 == 49
      && *((_QWORD *)v280 + 7 * *((unsigned __int8 *)v6 + 476) + 1) >= (unint64_t)(2 * v51)
      && (_DWORD)v51)
    {
      v53 = 0;
      v54 = *v50;
      do
      {
        v56 = *v54++;
        v55 = v56;
        if (v53 <= v56)
          v57 = v55;
        else
          v57 = v53;
        if (v55 != 0xFFFF)
          v53 = v57;
        --v51;
      }
      while (v51);
      goto LABEL_105;
    }
LABEL_104:
    v53 = 0;
    goto LABEL_105;
  }
  if (*((_QWORD *)v280 + 7 * *((unsigned __int8 *)v6 + 476) + 1) < (unint64_t)(4 * v51) || !(_DWORD)v51)
    goto LABEL_104;
  v53 = 0;
  v60 = *v50;
  do
  {
    v62 = *(_DWORD *)v60;
    v60 += 2;
    v61 = v62;
    if (v53 <= v62)
      v63 = v61;
    else
      v63 = v53;
    if (v61 != -1)
      v53 = v63;
    --v51;
  }
  while (v51);
LABEL_105:
  v259 = v53 + 1;
LABEL_106:
  v34 = useGPUFormatConversionForAttributeSerialization();
  if ((v34 & v262 & 1) == 0)
  {
    v276 = 0;
    if (v12)
    {
      v20 = 0;
      v263 = v278;
      v265 = v280;
      do
      {
        if (v263 <= v20)
          goto LABEL_480;
        v8 = *((_QWORD *)v14 + 4);
        if (v8 <= v20)
          goto LABEL_481;
        v275 = (char *)(*((_QWORD *)v265 + 7 * v20) + *(unsigned int *)(*((_QWORD *)v14 + 5) + 16 * v20 + 8));
        v64 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v307, (unint64_t)v275);
        if (v64 == -1)
        {
          v64 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::addNew((uint64_t *)v307, (unint64_t *)&v275, (unint64_t *)&v276);
          v65 = (unint64_t *)v64;
        }
        else
        {
          v65 = (unint64_t *)(*((_QWORD *)&v307[0] + 1) + 16 * v64 + 8);
        }
        if (*v65 == v20)
        {
          if (v20 == v19)
          {
            v20 = v19;
          }
          else
          {
            v8 = *((_QWORD *)v14 + 4);
            if (v8 <= v20)
              goto LABEL_493;
            v67 = *((_QWORD *)v14 + 5);
            if (*(_BYTE *)(v67 + 16 * v20 + 5) == 1)
            {
              v68 = *((_QWORD *)v265 + 7 * v20 + 1) / (unint64_t)*(unsigned __int16 *)(v67 + 16 * v20);
              v69 = v259;
              if (v259 >= v68)
                v69 = v68;
              v259 = v69;
            }
          }
        }
        else
        {
          v8 = *((_QWORD *)v6 + 43);
          if (v8 <= v20)
            goto LABEL_489;
          v66 = *(const char **)(*((_QWORD *)v6 + 44) + 16 * v20 + 8);
          v8 = *v65;
          v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)*((_QWORD *)v6 + 43);
          if ((unint64_t)v4 <= *v65)
            goto LABEL_490;
          *(_QWORD *)&__dst[0] = *(_QWORD *)(*((_QWORD *)v6 + 44) + 16 * v8 + 8);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<char const*>((uint64_t)v328, (re::DynamicString *)v329, (const char **)__dst);
          if (*(_QWORD *)v329 && (v329[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v329 + 40))();
        }
        v276 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)++v20;
      }
      while (v20 < v12);
      v70 = 0;
      v71 = *((_QWORD *)&v307[0] + 1);
      v49 = (id *)v260;
      v256 = *((_QWORD *)&v307[0] + 1);
      while (2)
      {
        v8 = *((_QWORD *)v14 + 4);
        if (v8 <= v70)
          goto LABEL_486;
        if (v70 == v263)
          goto LABEL_487;
        v72 = *((_QWORD *)v14 + 5);
        v20 = (unint64_t)v265 + 56 * v70;
        v273 = (unsigned __int16 *)(v72 + 16 * v70);
        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)(v273 + 4);
        v266 = v70;
        v34 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v307, *(_QWORD *)v20 + *((unsigned int *)v273 + 2));
        v74 = v266;
        if (*(_QWORD *)(v71 + 16 * v34 + 8) == v266)
        {
          v8 = *((_QWORD *)v6 + 43);
          if (v8 <= v266)
            goto LABEL_491;
          v75 = 0;
          v76 = *((_BYTE *)v273 + 5);
          v77 = *((_QWORD *)v265 + 7 * v266 + 1) / (unint64_t)*v273;
          v12 = v77;
          v78 = *(_BYTE **)(*((_QWORD *)v6 + 44) + 16 * v266 + 8);
          v270 = (unsigned __int8 *)(v72 + 16 * v266 + 12);
          v79 = *v270;
          v80 = 105;
          while (v78[v75] && v80 == v78[v75])
          {
            v80 = aIndextriangles[++v75];
            if (v75 == 14)
            {
              if (!v78[14])
              {
                if (v79 == 49)
                  v79 = 49;
                else
                  v79 = 36;
                goto LABEL_222;
              }
              break;
            }
          }
          v82 = 0;
          v83 = 118;
          while (v78[v82] && v83 == v78[v82])
          {
            v83 = aVertexposition[++v82];
            if (v82 == 14)
            {
              if (!v78[14])
              {
LABEL_215:
                v79 = 30;
                goto LABEL_222;
              }
              break;
            }
          }
          v85 = 0;
          v86 = 118;
          while (v78[v85] && v86 == v78[v85])
          {
            v86 = aVertexnormal[++v85];
            if (v85 == 12)
            {
              if (!v78[12])
                goto LABEL_215;
              break;
            }
          }
          v88 = 0;
          v89 = 118;
          while (v78[v88] && v89 == v78[v88])
          {
            v89 = aVertextangent[++v88];
            if (v88 == 13)
            {
              if (!v78[13])
                goto LABEL_215;
              break;
            }
          }
          v91 = 0;
          v92 = 118;
          while (v78[v91] && v92 == v78[v91])
          {
            v92 = aVertexbitangen[++v91];
            if (v91 == 15)
            {
              if (!v78[15])
                goto LABEL_215;
              break;
            }
          }
          v94 = 0;
          v95 = 118;
          while (v78[v94] && v95 == v78[v94])
          {
            v95 = aVertexcolor[++v94];
            if (v94 == 11)
            {
              if (!v78[11])
              {
                v79 = 31;
                goto LABEL_222;
              }
              break;
            }
          }
          v97 = 0;
          v98 = 118;
          while (v78[v97] && v98 == v78[v97])
          {
            v98 = aVertexuv[++v97];
            if (v97 == 8)
            {
              if (!v78[8])
              {
LABEL_219:
                v79 = 29;
                goto LABEL_222;
              }
              break;
            }
          }
          v100 = 0;
          v101 = 118;
          while (v78[v100] && v101 == v78[v100])
          {
            v101 = aVertexuv1[++v100];
            if (v100 == 9)
            {
              if (!v78[9])
                goto LABEL_219;
              break;
            }
          }
          v103 = 0;
          v104 = 118;
          while (v78[v103] && v104 == v78[v103])
          {
            v104 = aVertexadjacenc[++v103];
            if (v103 == 17)
            {
              if (!v78[17])
              {
                v79 = 36;
                goto LABEL_222;
              }
              break;
            }
          }
          v106 = 0;
          v107 = 97;
          while (v78[v106] && v107 == v78[v106])
          {
            v107 = aAccumulatedver[++v106];
            if (v106 == 24)
            {
              if (!v78[24])
                v79 = 36;
              break;
            }
          }
LABEL_222:
          v109 = (_anonymous_namespace_ *)re::sizeFromVertexFormat(v79, v73);
          v110 = v109;
          if (v266 == *((unsigned __int8 *)v6 + 476))
          {
            v111 = *((_DWORD *)v6 + 116);
LABEL_224:
            if (v77 >= v111)
              v12 = v111;
            else
              v12 = v77;
          }
          else
          {
            switch(*(_BYTE *)(v72 + 16 * v266 + 5))
            {
              case 0:
              case 2:
                v12 = (_DWORD)v77 != 0;
                break;
              case 1:
                v111 = v259;
                goto LABEL_224;
              case 3:
              case 4:
                v12 = 0;
                break;
              default:
                break;
            }
          }
          memset(v301, 0, 32);
          re::DynamicString::setCapacity(v301, 0);
          v305 = 0;
          v302 = 0;
          v303 = 0;
          *(_QWORD *)&v301[32] = 0;
          v304 = 0;
          v306 = 256;
          v19 = *((_QWORD *)v6 + 43);
          v112 = v266;
          if (v19 <= v266)
            goto LABEL_492;
          v113 = v77 * (unint64_t)v110;
          v114 = strlen(*(const char **)(*((_QWORD *)v6 + 44) + 16 * v266 + 8));
          *(_QWORD *)&__dst[0] = *(_QWORD *)(*((_QWORD *)v6 + 44) + 16 * v266 + 8);
          *((_QWORD *)&__dst[0] + 1) = v114;
          re::DynamicString::operator=((re::DynamicString *)v301, (uint64_t)__dst);
          LOBYTE(v306) = v79;
          HIBYTE(v306) = v76;
          if (v302 < v113)
            re::DynamicArray<BOOL>::setCapacity(&v301[32], v113);
          v116 = *(_QWORD *)v20;
          v20 = *(unsigned int *)v4;
          re::sizeFromVertexFormat(*v270, v115);
          if ((_DWORD)v12)
          {
            v117 = 0;
            v118 = 0;
            v119 = 0;
            v269 = (char *)(v116 + v20);
            v120 = v12;
            while (1)
            {
              v20 = *v270;
              v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)&v269[v119];
              if ((_DWORD)v20 == v79)
                break;
              if (v79 - 28 < 4)
              {
                v125 = VectorSizeForVertexFormat;
                v127 = 0.0;
                __dst[0] = xmmword_2260E5D70;
                switch((int)v20)
                {
                  case 1:
                  case 2:
                  case 3:
                  case 45:
                    if (v125)
                    {
                      v128 = (float *)__dst;
                      do
                      {
                        v129 = *(unsigned __int8 *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 1);
                        *v128++ = (float)v129;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 4:
                  case 5:
                  case 6:
                  case 46:
                    if (v125)
                    {
                      v131 = (float *)__dst;
                      do
                      {
                        v132 = *(char *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 1);
                        *v131++ = (float)v132;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 7:
                  case 8:
                  case 9:
                  case 47:
                    if (v125)
                    {
                      v133 = (float *)__dst;
                      do
                      {
                        v134 = *(unsigned __int8 *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 1);
                        *v133++ = (float)v134 * 0.0039216;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 10:
                  case 11:
                  case 12:
                  case 48:
                    if (v125)
                    {
                      v135 = (float *)__dst;
                      do
                      {
                        v136 = *(char *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 1);
                        v137 = (float)v136 * 0.007874;
                        if (v137 < -1.0)
                          v137 = -1.0;
                        *v135++ = v137;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 13:
                  case 14:
                  case 15:
                  case 49:
                    if (v125)
                    {
                      v138 = (float *)__dst;
                      do
                      {
                        v139 = *(unsigned __int16 *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 2);
                        *v138++ = (float)v139;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 16:
                  case 17:
                  case 18:
                  case 50:
                    if (v125)
                    {
                      v140 = (float *)__dst;
                      do
                      {
                        v141 = *(__int16 *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 2);
                        *v140++ = (float)v141;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 19:
                  case 20:
                  case 21:
                  case 51:
                    if (v125)
                    {
                      v142 = (float *)__dst;
                      do
                      {
                        v143 = *(unsigned __int16 *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 2);
                        *v142++ = (float)v143 * 0.000015259;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 22:
                  case 23:
                  case 24:
                  case 52:
                    if (v125)
                    {
                      v144 = (float *)__dst;
                      do
                      {
                        v145 = *(__int16 *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 2);
                        v146 = (float)v145 * 0.000030519;
                        if (v146 < -1.0)
                          v146 = -1.0;
                        *v144++ = v146;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 25:
                  case 26:
                  case 27:
                  case 53:
                    if (v125)
                    {
                      v147 = __dst;
                      do
                      {
                        v148 = *(_WORD *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 2);
                        _H0 = v148;
                        __asm { FCVT            S0, H0 }
                        *v147++ = _S0;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 28:
                  case 29:
                  case 30:
                  case 31:
                    if (v125)
                    {
                      v20 = v126;
                      memcpy(__dst, v4, 4 * v125);
                      v126 = v20;
                    }
                    goto LABEL_301;
                  case 32:
                  case 33:
                  case 34:
                  case 35:
                    if (v125)
                    {
                      v154 = (float *)__dst;
                      do
                      {
                        v155 = *(_DWORD *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 4);
                        *v154++ = (float)v155;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                    if (v125)
                    {
                      v156 = (float *)__dst;
                      do
                      {
                        v157 = *(_DWORD *)v4;
                        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v4 + 4);
                        *v156++ = (float)v157;
                        --v125;
                      }
                      while (v125);
                    }
                    goto LABEL_301;
                  case 42:
                    if (v125)
                    {
                      for (i = 0; i != v125; ++i)
                      {
                        LOBYTE(v127) = *((_BYTE *)v4 + i);
                        v127 = (float)LODWORD(v127) * 0.0039216;
                        *((float *)__dst + i) = v127;
                      }
                      v159 = DWORD2(__dst[0]);
                      v160 = __dst[0];
                    }
                    else
                    {
                      v160 = 0;
                      v159 = 0;
                    }
                    DWORD2(__dst[0]) = v160;
                    LODWORD(__dst[0]) = v159;
LABEL_301:
                    v123 = 4 * v126;
                    v122 = (char *)__dst;
                    v121 = v118;
                    goto LABEL_302;
                  default:
                    goto LABEL_303;
                }
              }
              if (v79 != 36)
                goto LABEL_303;
              if ((_DWORD)v20 == 49)
              {
                v130 = *(unsigned __int16 *)v4;
LABEL_248:
                LODWORD(__dst[0]) = v130;
                v122 = (char *)__dst;
                v121 = v118;
                v123 = 4;
LABEL_302:
                re::DynamicArray<REFrameAnalysisBottleneck>::copy(&v301[32], v121, v122, v123);
                goto LABEL_303;
              }
              if ((_DWORD)v20 == 45)
              {
                v130 = *(unsigned __int8 *)v4;
                goto LABEL_248;
              }
LABEL_303:
              v119 += *v273;
              v118 += v110;
              if (++v117 == v120)
                goto LABEL_304;
            }
            v121 = v118;
            v122 = &v269[v119];
            v123 = v110;
            goto LABEL_302;
          }
LABEL_304:
          v161.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)&v309, (uint64_t)v301);
          v49 = (id *)v260;
          this = v261;
          v12 = (unint64_t)v268;
          v71 = v256;
          if (*(_QWORD *)&v301[32])
          {
            if (v305)
              (*(void (**)(double))(**(_QWORD **)&v301[32] + 40))(v161.n128_f64[0]);
            v305 = 0;
            v302 = 0;
            v303 = 0;
            *(_QWORD *)&v301[32] = 0;
            ++v304;
          }
          v34 = *(_QWORD *)v301;
          v6 = v264;
          if (*(_QWORD *)v301 && (v301[8] & 1) != 0)
            v34 = (*(uint64_t (**)(__n128))(**(_QWORD **)v301 + 40))(v161);
          v74 = v266;
        }
        v70 = v74 + 1;
        if (v70 == v12)
          break;
        continue;
      }
    }
  }
LABEL_315:
  v12 = v257;
  if (a4)
  {
    v34 = useGPUFormatConversionForAttributeSerialization();
    if ((v34 & v262) == 1)
    {
      memset(__dst, 0, 24);
      *((_QWORD *)&__dst[0] + 1) = 14;
      *(_QWORD *)&__dst[1] = v162;
      if (v162)
      {
        v162[5] = 0u;
        v162[6] = 0u;
        v162[3] = 0u;
        v162[4] = 0u;
        v162[1] = 0u;
        v162[2] = 0u;
        *v162 = 0u;
        re::GPUAttributeFormatConverter::convertAttributes((uint64_t)__dst, v49, v6, (_anonymous_namespace_ *)&v309);
        if (*(_QWORD *)&__dst[0] && *((_QWORD *)&__dst[0] + 1))
        {
          v164 = *(id **)&__dst[1];
          v165 = 8 * *((_QWORD *)&__dst[0] + 1);
          do
          {
            if (*v164)
            {

              *v164 = 0;
            }
            ++v164;
            v165 -= 8;
          }
          while (v165);
          v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)&__dst[0] + 40))(*(_QWORD *)&__dst[0], *(_QWORD *)&__dst[1]);
        }
        goto LABEL_325;
      }
LABEL_499:
      re::internal::assertLog((re::internal *)4, v163, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
  }
LABEL_325:
  v19 = *((unsigned int *)v6 + 116);
  v166 = *((_BYTE *)v6 + 472);
  if (*((_BYTE *)v6 + 536) == 4 && (_DWORD)v257 != 255)
  {
    v20 = *((unsigned __int8 *)v6 + 476);
    if ((_DWORD)v20 != 255)
    {
      memset(v301, 0, 32);
      re::DynamicString::setCapacity(v301, 0);
      v305 = 0;
      v303 = 0;
      *(_QWORD *)&v301[32] = 0;
      v302 = 0;
      v304 = 0;
      v306 = 256;
      *(_QWORD *)&__dst[0] = "indexTriangles";
      *((_QWORD *)&__dst[0] + 1) = 14;
      re::DynamicString::operator=((re::DynamicString *)v301, (uint64_t)__dst);
      HIBYTE(v306) = 0;
      v167 = HIWORD(v259);
      if (HIWORD(v259))
        v168 = 36;
      else
        v168 = 49;
      LOBYTE(v306) = v168;
      v8 = *((_QWORD *)&v310 + 1);
      v19 = v20;
      if (*((_QWORD *)&v310 + 1) > v20)
      {
        v4 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)&v301[32];
        v169 = v312 + 80 * v20;
        v170 = *(_QWORD *)(v169 + 64);
        v171 = *(_QWORD *)(v169 + 48);
        v172 = *((unsigned __int8 *)v6 + 472);
        v303 = 0;
        ++v304;
        v271 = (_QWORD *)v20;
        if (v172)
        {
          v173 = v171 >> 2;
          if (v167)
          {
            if (v171 >= 0xC)
            {
              v174 = 0;
              v19 = 0;
              v12 = 2;
              do
              {
                v175 = (int *)(v170 + 4 * v12);
                v176 = *(v175 - 1);
                v177 = *v175;
                if (*(v175 - 2) == -1 || v176 == -1 || v177 == -1)
                {
                  v174 = 0;
                }
                else
                {
                  v180 = 0;
                  LODWORD(__dst[0]) = *(v175 - 2);
                  do
                  {
                    v329[0] = *((_BYTE *)__dst + v180);
                    re::DynamicArray<unsigned char>::add(&v301[32], v329);
                    ++v180;
                  }
                  while (v180 != 4);
                  v181 = 0;
                  if ((v174 & 1) != 0)
                    v182 = v177;
                  else
                    v182 = v176;
                  LODWORD(__dst[0]) = v182;
                  do
                  {
                    v329[0] = *((_BYTE *)__dst + v181);
                    re::DynamicArray<unsigned char>::add(&v301[32], v329);
                    ++v181;
                  }
                  while (v181 != 4);
                  v183 = 0;
                  if ((v174 & 1) != 0)
                    v184 = v176;
                  else
                    v184 = v177;
                  LODWORD(__dst[0]) = v184;
                  do
                  {
                    v329[0] = *((_BYTE *)__dst + v183);
                    re::DynamicArray<unsigned char>::add(&v301[32], v329);
                    ++v183;
                  }
                  while (v183 != 4);
                  v19 = (v19 + 3);
                  v174 ^= 1u;
                }
                ++v12;
              }
              while (v12 != v173);
              goto LABEL_436;
            }
LABEL_435:
            v19 = 0;
            goto LABEL_436;
          }
          if (v171 < 0xC)
            goto LABEL_435;
          v197 = 0;
          v19 = 0;
          v12 = 2;
          do
          {
            v198 = (int *)(v170 + 4 * v12);
            v199 = *(v198 - 1);
            v200 = *v198;
            if (*(v198 - 2) == -1 || v199 == -1 || v200 == -1)
            {
              v197 = 0;
            }
            else
            {
              v203 = 0;
              LOWORD(__dst[0]) = *(v198 - 2);
              do
              {
                v329[0] = *((_BYTE *)__dst + v203);
                re::DynamicArray<unsigned char>::add(&v301[32], v329);
                ++v203;
              }
              while (v203 != 2);
              v204 = 0;
              if ((v197 & 1) != 0)
                v205 = v200;
              else
                v205 = v199;
              LOWORD(__dst[0]) = v205;
              do
              {
                v329[0] = *((_BYTE *)__dst + v204);
                re::DynamicArray<unsigned char>::add(&v301[32], v329);
                ++v204;
              }
              while (v204 != 2);
              v206 = 0;
              if ((v197 & 1) != 0)
                v207 = v199;
              else
                v207 = v200;
              LOWORD(__dst[0]) = v207;
              do
              {
                v329[0] = *((_BYTE *)__dst + v206);
                re::DynamicArray<unsigned char>::add(&v301[32], v329);
                ++v206;
              }
              while (v206 != 2);
              v19 = (v19 + 3);
              v197 ^= 1u;
            }
            ++v12;
          }
          while (v12 != v173);
        }
        else
        {
          v185 = v171 >> 1;
          v274 = v171 >> 1;
          if (v167)
          {
            if (v171 < 6)
              goto LABEL_435;
            v186 = 0;
            v19 = 0;
            v12 = 2;
            do
            {
              v187 = (unsigned __int16 *)(v170 + 2 * v12);
              v188 = *(v187 - 1);
              v189 = *v187;
              if (*(v187 - 2) == 0xFFFF || v188 == 0xFFFF || v189 == 0xFFFF)
              {
                v186 = 0;
              }
              else
              {
                v192 = 0;
                LODWORD(__dst[0]) = *(v187 - 2);
                do
                {
                  v329[0] = *((_BYTE *)__dst + v192);
                  re::DynamicArray<unsigned char>::add(&v301[32], v329);
                  ++v192;
                }
                while (v192 != 4);
                v193 = 0;
                if ((v186 & 1) != 0)
                  v194 = v189;
                else
                  v194 = v188;
                LODWORD(__dst[0]) = v194;
                do
                {
                  v329[0] = *((_BYTE *)__dst + v193);
                  re::DynamicArray<unsigned char>::add(&v301[32], v329);
                  ++v193;
                }
                while (v193 != 4);
                v195 = 0;
                if ((v186 & 1) != 0)
                  v196 = v188;
                else
                  v196 = v189;
                LODWORD(__dst[0]) = v196;
                do
                {
                  v329[0] = *((_BYTE *)__dst + v195);
                  re::DynamicArray<unsigned char>::add(&v301[32], v329);
                  ++v195;
                }
                while (v195 != 4);
                v19 = (v19 + 3);
                v186 ^= 1u;
                v185 = v274;
              }
              ++v12;
            }
            while (v12 != v185);
          }
          else
          {
            if (v171 < 6)
              goto LABEL_435;
            v208 = 0;
            v19 = 0;
            v12 = 2;
            do
            {
              v209 = (unsigned __int16 *)(v170 + 2 * v12);
              v210 = *(v209 - 1);
              v211 = *v209;
              if (*(v209 - 2) == 0xFFFF || v210 == 0xFFFF || v211 == 0xFFFF)
              {
                v208 = 0;
              }
              else
              {
                v214 = 0;
                LOWORD(__dst[0]) = *(v209 - 2);
                do
                {
                  v329[0] = *((_BYTE *)__dst + v214);
                  re::DynamicArray<unsigned char>::add(&v301[32], v329);
                  ++v214;
                }
                while (v214 != 2);
                v215 = 0;
                if ((v208 & 1) != 0)
                  v216 = v211;
                else
                  v216 = v210;
                LOWORD(__dst[0]) = v216;
                do
                {
                  v329[0] = *((_BYTE *)__dst + v215);
                  re::DynamicArray<unsigned char>::add(&v301[32], v329);
                  ++v215;
                }
                while (v215 != 2);
                v217 = 0;
                if ((v208 & 1) != 0)
                  v218 = v210;
                else
                  v218 = v211;
                LOWORD(__dst[0]) = v218;
                do
                {
                  v329[0] = *((_BYTE *)__dst + v217);
                  re::DynamicArray<unsigned char>::add(&v301[32], v329);
                  ++v217;
                }
                while (v217 != 2);
                v19 = (v19 + 3);
                v208 ^= 1u;
                v185 = v274;
              }
              ++v12;
            }
            while (v12 != v185);
          }
        }
LABEL_436:
        v8 = *((_QWORD *)&v310 + 1);
        v20 = (unint64_t)v271;
        if (*((_QWORD *)&v310 + 1) > (unint64_t)v271)
        {
          v219 = (re::DynamicString *)(v312 + 80 * v271);
          re::DynamicString::operator=(v219, (re::DynamicString *)v301);
          re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)v219 + 32, (uint64_t)&v301[32]);
          *((_WORD *)v219 + 36) = v306;
          this = v261;
          v6 = v264;
          v12 = v257;
          v166 = HIWORD(v259) != 0;
          if (*(_QWORD *)&v301[32])
          {
            if (v305)
              (*(void (**)(void))(**(_QWORD **)&v301[32] + 40))();
            v305 = 0;
            v302 = 0;
            v303 = 0;
            *(_QWORD *)&v301[32] = 0;
            ++v304;
          }
          v34 = *(_QWORD *)v301;
          if (*(_QWORD *)v301 && (v301[8] & 1) != 0)
            v34 = (*(uint64_t (**)(void))(**(_QWORD **)v301 + 40))();
          goto LABEL_444;
        }
LABEL_495:
        v281 = 0;
        memset(v283, 0, sizeof(v283));
        memset(__dst, 0, sizeof(__dst));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v329 = 136315906;
        *(_QWORD *)&v329[4] = "operator[]";
        LOWORD(v330) = 1024;
        *(_DWORD *)((char *)&v330 + 2) = 789;
        WORD3(v330) = 2048;
        *((_QWORD *)&v330 + 1) = v20;
        v331 = 2048;
        v332 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_496:
        *(_QWORD *)v329 = 0;
        memset(v283, 0, sizeof(v283));
        memset(__dst, 0, sizeof(__dst));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v301 = 136315906;
        *(_QWORD *)&v301[4] = "operator[]";
        *(_WORD *)&v301[12] = 1024;
        *(_DWORD *)&v301[14] = 789;
        *(_WORD *)&v301[18] = 2048;
        *(_QWORD *)&v301[20] = v12;
        *(_WORD *)&v301[28] = 2048;
        *(_QWORD *)&v301[30] = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_497:
        *(_QWORD *)v329 = 0;
        memset(v283, 0, sizeof(v283));
        memset(__dst, 0, sizeof(__dst));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v301 = 136315906;
        *(_QWORD *)&v301[4] = "operator[]";
        *(_WORD *)&v301[12] = 1024;
        *(_DWORD *)&v301[14] = 789;
        *(_WORD *)&v301[18] = 2048;
        *(_QWORD *)&v301[20] = v19;
        *(_WORD *)&v301[28] = 2048;
        *(_QWORD *)&v301[30] = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_498;
      }
LABEL_494:
      v281 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v329 = 136315906;
      *(_QWORD *)&v329[4] = "operator[]";
      LOWORD(v330) = 1024;
      *(_DWORD *)((char *)&v330 + 2) = 789;
      WORD3(v330) = 2048;
      *((_QWORD *)&v330 + 1) = v19;
      v331 = 2048;
      v332 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_495;
    }
  }
LABEL_444:
  if ((_DWORD)v12 == 255)
    goto LABEL_456;
  v8 = *((_QWORD *)&v310 + 1);
  if (*((_QWORD *)&v310 + 1) <= v12)
    goto LABEL_496;
  v220 = v312;
  if (*(_BYTE *)(v312 + 80 * v12 + 72) != 30)
  {
LABEL_456:
    *(_DWORD *)v313 = v19;
    v313[4] = v166;
    v230 = *((_DWORD *)v6 + 135);
    *(_DWORD *)&v313[8] = v259;
    *(_DWORD *)&v313[12] = v230;
    *(_WORD *)&v313[16] = *((_WORD *)v6 + 237);
    *(_QWORD *)&v313[20] = *((_QWORD *)v6 + 66);
    re::StringID::operator=(&v314, (uint64_t *)v6 + 63);
    v231 = *((_OWORD *)v6 + 28);
    v316 = *((int32x4_t *)v6 + 27);
    v317 = v231;
    v232 = *((_DWORD *)v6 + 136);
    v233 = v232 & 1;
    if (!v322)
      v322 = 1;
    v323 = v232 & 1;
    v234 = (v232 >> 1) & 1;
    if (!v324)
      v324 = 1;
    v325 = (v232 & 2) != 0;
    if (!v326)
      v326 = 1;
    v235 = (v232 >> 17) & 3;
    v327 = (v232 >> 17) & 3;
    v236 = v309;
    v309 = 0;
    ++v311;
    *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)v313;
    *(_OWORD *)((char *)&v283[1] + 4) = *(_OWORD *)&v313[12];
    v237 = v312;
    v238 = v314;
    v239 = v315;
    v240 = *(_QWORD *)&v328[16];
    v315 = &str_110;
    v312 = 0;
    v314 = 0;
    v285 = v316;
    v286 = v317;
    v241 = v319;
    v289 = v320;
    v242 = v320;
    v290 = v321;
    v243 = v316;
    v244 = v317;
    v287 = v318;
    v245 = v318;
    v288 = v319;
    v292 = v233;
    v291 = 1;
    v293 = 1;
    v294 = v234;
    v295 = 1;
    v296 = v235;
    v300 = 0;
    *(_QWORD *)&v328[16] = 0;
    *(_BYTE *)this = 1;
    *((_QWORD *)this + 2) = v236;
    *(_QWORD *)&__dst[0] = 0;
    *(_OWORD *)((char *)this + 24) = v310;
    *(_OWORD *)((char *)this + 68) = *(_OWORD *)&v313[12];
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)v313;
    v310 = 0u;
    *(_OWORD *)((char *)__dst + 8) = 0u;
    *((_QWORD *)this + 6) = v237;
    *(_QWORD *)&v283[0] = 0;
    DWORD2(__dst[1]) = 2;
    *((_DWORD *)this + 10) = 1;
    *((_QWORD *)this + 11) = v238;
    *((_QWORD *)this + 12) = v239;
    *((_QWORD *)&v283[2] + 1) = 0;
    v284 = &str_110;
    *((int32x4_t *)this + 7) = v243;
    *((_OWORD *)this + 8) = v244;
    v246 = v321;
    *((_OWORD *)this + 11) = v242;
    *((_OWORD *)this + 12) = v246;
    *((_OWORD *)this + 9) = v245;
    *((_OWORD *)this + 10) = v241;
    *((_BYTE *)this + 208) = 1;
    *((_BYTE *)this + 209) = v292;
    *((_BYTE *)this + 210) = 1;
    *((_BYTE *)this + 211) = v294;
    *((_BYTE *)this + 212) = 1;
    *((_BYTE *)this + 213) = v296;
    *((_DWORD *)this + 64) = 0;
    v247 = *(_OWORD *)v328;
    *(_OWORD *)v328 = 0u;
    *(_OWORD *)((char *)this + 216) = v247;
    v297 = 0u;
    *((_QWORD *)this + 29) = v240;
    v298 = 0;
    v248 = *(_OWORD *)&v328[24];
    *(_OWORD *)&v328[24] = xmmword_2260F5A80;
    *((_OWORD *)this + 15) = v248;
    v299 = xmmword_2260F5A80;
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v297);
    re::StringID::destroyString((re::StringID *)((char *)&v283[2] + 8));
    re::DynamicArray<re::MeshAssetBuffer>::deinit((uint64_t)__dst);
    goto LABEL_463;
  }
  if (*(_QWORD *)(v312 + 80 * v12 + 48) >= (unint64_t)(12 * v259))
  {
    *(_QWORD *)&v301[32] = 0;
    memset(v301, 0, 28);
    re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v301, v259);
    if (v259)
    {
      v20 = 0;
      v224 = *(_QWORD *)(v220 + 80 * v12 + 64);
      v225 = v224 + 12 * v259;
      while (1)
      {
        v8 = *(_QWORD *)&v301[16];
        if (*(_QWORD *)&v301[16] <= v20)
          break;
        *(_QWORD *)&v223 = *(_QWORD *)v224;
        DWORD2(v223) = *(_DWORD *)(v224 + 8);
        *(_OWORD *)(*(_QWORD *)&v301[32] + 16 * v20++) = v223;
        v224 += 12;
        if (v224 == v225)
          goto LABEL_453;
      }
LABEL_488:
      v281 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v329 = 136315906;
      *(_QWORD *)&v329[4] = "operator[]";
      LOWORD(v330) = 1024;
      *(_DWORD *)((char *)&v330 + 2) = 789;
      WORD3(v330) = 2048;
      *((_QWORD *)&v330 + 1) = v20;
      v331 = 2048;
      v332 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_489:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v20;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_490:
      v281 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v8;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_491:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      v19 = v74;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v19;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_492:
      v281 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      v8 = v112;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v329 = 136315906;
      *(_QWORD *)&v329[4] = "operator[]";
      LOWORD(v330) = 1024;
      *(_DWORD *)((char *)&v330 + 2) = 476;
      WORD3(v330) = 2048;
      *((_QWORD *)&v330 + 1) = v8;
      v331 = 2048;
      v332 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_493:
      *(_QWORD *)v329 = 0;
      memset(v283, 0, sizeof(v283));
      memset(__dst, 0, sizeof(__dst));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v301 = 136315906;
      *(_QWORD *)&v301[4] = "operator[]";
      *(_WORD *)&v301[12] = 1024;
      *(_DWORD *)&v301[14] = 476;
      *(_WORD *)&v301[18] = 2048;
      *(_QWORD *)&v301[20] = v20;
      *(_WORD *)&v301[28] = 2048;
      *(_QWORD *)&v301[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_494;
    }
LABEL_453:
    *(double *)&v226 = MEMORY[0x227693C34](*(_QWORD *)&v301[16], *(_QWORD *)&v301[32]);
    v318 = v226;
    v319 = v227;
    v320 = v228;
    v321 = v229;
    if (*(_QWORD *)v301 && *(_QWORD *)&v301[32])
      (*(void (**)(void))(**(_QWORD **)v301 + 40))();
    goto LABEL_456;
  }
  v221 = __dst[0];
  v222 = __dst[1];
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 2) = 100;
  *((_QWORD *)this + 3) = &re::AssetErrorCategory(void)::instance;
  *((_OWORD *)this + 2) = v221;
  *((_OWORD *)this + 3) = v222;
LABEL_463:
  if (*((_QWORD *)&v308 + 1) && *(_QWORD *)&v307[0])
    (*(void (**)(void))(**((_QWORD **)&v308 + 1) + 40))();
LABEL_466:
  v249 = v277[0];
  if (v277[0])
  {
    v250 = v280;
    if (v280)
    {
      if (v278)
      {
        v251 = 56 * v278;
        v252 = v280;
        do
        {
          re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent(v252);
          v252 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)(v253 + 56);
          v251 -= 56;
        }
        while (v251);
      }
      (*(void (**)(uint64_t, re::ReadOnlyCPUAccessibleBufferSliceContent *))(*(_QWORD *)v249 + 40))(v249, v250);
    }
  }
  v15 = v258;
LABEL_473:

  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v328);
  re::StringID::destroyString((re::StringID *)&v314);
  return re::DynamicArray<re::MeshAssetBuffer>::deinit((uint64_t)&v309);
}

uint64_t *re::DynamicArray<re::MeshAssetPart>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshAssetPart>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + (v4 << 8);
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *(_DWORD *)(v6 + 24) = 0;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v9;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v6 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v6 + 52) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(v6 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = &str_110;
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 112) = v12;
  v13 = *(_OWORD *)(a2 + 128);
  v14 = *(_OWORD *)(a2 + 144);
  v15 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v6 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v6 + 176) = v15;
  *(_OWORD *)(v6 + 128) = v13;
  *(_OWORD *)(v6 + 144) = v14;
  LODWORD(v11) = *(unsigned __int8 *)(a2 + 192);
  *(_BYTE *)(v6 + 192) = v11;
  if ((_DWORD)v11)
    *(_BYTE *)(v6 + 193) = *(_BYTE *)(a2 + 193);
  v16 = *(unsigned __int8 *)(a2 + 194);
  *(_BYTE *)(v6 + 194) = v16;
  if (v16)
    *(_BYTE *)(v5 + (v4 << 8) + 195) = *(_BYTE *)(a2 + 195);
  v17 = v5 + (v4 << 8);
  v18 = *(unsigned __int8 *)(a2 + 196);
  *(_BYTE *)(v17 + 196) = v18;
  if (v18)
    *(_BYTE *)(v17 + 197) = *(_BYTE *)(a2 + 197);
  *(_OWORD *)(v17 + 200) = 0u;
  v19 = v17 + 200;
  *(_DWORD *)(v19 + 32) = 0;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_QWORD *)(v19 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v19, (uint64_t *)(a2 + 200));
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::DynamicArray<re::MeshLodLevelInfo>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 12 * v4);
      v6 = 12 * a2 - 12 * v4;
      if (v6 >= 1)
        bzero(v5, 12 * (v6 / 0xCuLL - ((unint64_t)v6 > 0xB)) + 12);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void **re::DynamicArray<re::MeshLodLevelInfo>::copy(void **this, char *__src, unint64_t a3)
{
  void **v3;
  unint64_t v4;
  void *v7;
  char *v8;

  if (a3)
  {
    v3 = this;
    v4 = (unint64_t)this[2];
    if (v4 == -1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v4 >= a3)
    {
      this = (void **)memmove(this[4], __src, 12 * a3);
    }
    else
    {
      re::DynamicArray<re::MeshLodLevelInfo>::growCapacity(this, a3);
      v7 = v3[2];
      v8 = &__src[12 * (_QWORD)v7];
      if (v7)
      {
        memmove(v3[4], __src, 12 * (_QWORD)v7);
        v7 = v3[2];
      }
      this = (void **)memcpy((char *)v3[4] + 12 * (_QWORD)v7, v8, &__src[12 * a3] - v8);
      v3[2] = (void *)a3;
    }
    ++*((_DWORD *)v3 + 6);
  }
  return this;
}

_QWORD *re::DynamicArray<re::MeshLodLevelInfo>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::DynamicArray<re::ReadOnlyCPUAccessibleBufferSliceContent>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 56 * a2;
    v9 = a2;
    do
    {
      re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 56;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ReadOnlyCPUAccessibleBufferSliceContent>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)(v7 + 48) = 0;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t *re::ReadOnlyCPUAccessibleBufferSliceContent::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  id v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *a1;
    *a1 = *a2;
    *a2 = v4;
    v5 = a1[1];
    a1[1] = a2[1];
    a2[1] = v5;
    v6 = (void **)(a2 + 2);
    v11[0] = (id)a1[2];
    a1[2] = 0;
    NS::SharedPtr<MTL::Texture>::operator=((void **)a1 + 2, (void **)a2 + 2);
    NS::SharedPtr<MTL::Texture>::operator=(v6, v11);
    if (v11[0])

    v7 = a1[3];
    a1[3] = a2[3];
    a2[3] = v7;
    v8 = a2 + 4;
    *(_OWORD *)v11 = *((_OWORD *)a1 + 2);
    a1[4] = 0;
    a1[5] = 0;
    v9 = a1[6];
    a1[6] = 0;
    v12 = v9;
    re::FixedArray<float>::operator=(a1 + 4, v8);
    re::FixedArray<float>::operator=(v8, (uint64_t *)v11);
    if (v11[0] && v11[1])
      (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
  }
  return a1;
}

uint64_t re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::addNew(uint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;

  v6 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(a1, *a2);
  if (v6 != -1)
    return a1[1] + 16 * v6 + 8;
  if (!a1[7])
  {
  }
  v9 = a1[4];
  if (!v9 || (v10 = a1[2], v10 > 8 * v9))
  {
    re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::resize(a1);
    v10 = a1[2];
  }
  v11 = 0xBF58476D1CE4E5B9;
  v12 = 0x94D049BB133111EBLL;
  v13 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
  v15 = v10 >> 4;
  v16 = *a1;
  v17 = v14 % v15;
  while (1)
  {
    v18 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v16 + 16 * v17)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v18 < 0x40)
      break;
    if (v17 + 1 == v15)
      v17 = 0;
    else
      ++v17;
    if (v17 == v14 % v15)
    {
      re::internal::assertLog((re::internal *)4, v7, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v19 = v16 + 16 * v17;
  v20 = *(unsigned __int8 *)(v19 + v18) == 255;
  *(_BYTE *)(v19 + v18) = v14 & 0x7F;
  v21 = v18 + 16 * v17;
  v22 = *a3;
  v23 = (unint64_t *)(a1[1] + 16 * v21);
  *v23 = *a2;
  v23[1] = v22;
  v24 = a1[4] - v20;
  ++a1[3];
  a1[4] = v24;
  v25 = (unint64_t *)(a1[1] + 16 * v21);
  v26 = *v25;
  result = (uint64_t)(v25 + 1);
  v27 = (((v26 ^ (v26 >> 30)) * v11) ^ (((v26 ^ (v26 >> 30)) * v11) >> 27)) * v12;
  a1[5] ^= (v27 >> 31) ^ v27;
  return result;
}

uint64_t useGPUFormatConversionForAttributeSerialization(void)
{
  unsigned __int8 v0;
  const char *v2;
  char v3;
  char v4[2];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FD660);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD660))
  {
    re::Defaults::BOOLValue((re::Defaults *)"MeshAsset.GPUFormatConversion", v2, v4);
    if (v4[0])
      v3 = v4[1];
    else
      v3 = 1;
    byte_2540FD641 = v3;
    __cxa_guard_release(&qword_2540FD660);
  }
  return byte_2540FD641;
}

uint64_t re::sizeFromVertexFormat(unsigned int a1, uint64_t a2)
{
  char v2;
  uint64_t result;

  v2 = a1 - 1;
  if (a1 - 1 < 0x35 && ((0x1FF27FFFFFFFFFuLL >> v2) & 1) != 0)
    return byte_2260F9630[v2];
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Wrong VertexFormat (%02hhx)", "!\"Unreachable code\"", "sizeFromVertexFormat", 301, a1);
  result = _os_crash();
  __break(1u);
  return result;
}

double re::DynamicArray<re::MeshAssetBuffer>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshAssetBuffer>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 80 * v4;
  result = 0.0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v12;
  v13 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v13;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(v5 + 56);
  *(_WORD *)(v5 + 72) = *(_WORD *)(a2 + 72);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ReadOnlyCPUAccessibleBufferSliceContent>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::ReadOnlyCPUAccessibleBufferSliceContent *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ReadOnlyCPUAccessibleBufferSliceContent>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = v7;
        do
        {
          re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v11, (uint64_t)v8);
          re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent(v8);
          v8 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)((char *)v8 + 56);
          v11 += 7;
          v10 -= 56;
        }
        while (v10);
        v8 = (re::ReadOnlyCPUAccessibleBufferSliceContent *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::ReadOnlyCPUAccessibleBufferSliceContent *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *(_QWORD *)a2;
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v4 = (uint64_t *)(a2 + 32);
  a1[4] = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v5 = a1[6];
  a1[6] = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = 0;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a2 + 16), &v7);
  if (v7)

  *(_QWORD *)(a2 + 24) = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  re::FixedArray<float>::operator=(v4, (uint64_t *)&v7);
  if (v7 && v8)
    (*(void (**)(void))(*(_QWORD *)v7 + 40))();
  return a1;
}

void re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent(re::ReadOnlyCPUAccessibleBufferSliceContent *this)
{
  id *v2;
  uint64_t v3;
  __IOSurface *v4;
  uint64_t v5;
  id v6;

  v6 = 0;
  v2 = (id *)((char *)this + 16);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 2, &v6);
  if (v6)

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    if (*((_QWORD *)this + 5))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 6));
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 6) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  v4 = (__IOSurface *)*((_QWORD *)this + 3);
  if (v4)
  {
    IOSurfaceUnlock(v4, 1u, 0);
    CFRelease(*((CFTypeRef *)this + 3));
    *((_QWORD *)this + 3) = 0;
    v5 = *((_QWORD *)this + 4);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      if (*((_QWORD *)this + 5))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 6));
        *((_QWORD *)this + 5) = 0;
        *((_QWORD *)this + 6) = 0;
      }
      *((_QWORD *)this + 4) = 0;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  if (*v2)
  {

    *v2 = 0;
  }
}

uint64_t re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v5 = v4 ^ (v4 >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*(_QWORD *)(a1[1] + 16 * (v12 + v13)) == a2)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  unsigned __int16 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _OWORD *v48;
  __int128 v49;
  unint64_t v50;
  _QWORD *v51;
  int8x16_t v52;
  int8x16_t v53;
  __int128 v54;
  _BYTE v55[48];

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v54 = 0u;
  *(_OWORD *)v55 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v55[16], 0, 32);
  v9 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v54, v7, v8);
  v10 = a1[2];
  if (v10 < 0x10)
    goto LABEL_12;
  v11 = 0;
  v12 = v10 >> 4;
  v13 = (int8x16_t)xmmword_2260EE390;
  while (1)
  {
    v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
    v15 = (unsigned __int16)~v14;
    if (v14 != 0xFFFF)
      break;
    v11 += 16;
    if (!--v12)
      goto LABEL_12;
  }
  v16 = __clz(__rbit64(v15)) + v11;
  if (v16 == -1)
    goto LABEL_12;
  while (1)
  {
    v26 = a1[1];
    if (*(_QWORD *)&v55[40])
    {
      v27 = *(_QWORD *)&v55[16];
      if (*(_QWORD *)&v55[16])
        goto LABEL_20;
    }
    else
    {
      v52 = v13;
      *(_QWORD *)v55 = 16;
      *(_QWORD *)&v49 = -1;
      *((_QWORD *)&v49 + 1) = -1;
      *(_QWORD *)&v54 = v48;
      *v48 = v49;
      v9 = (_anonymous_namespace_ *)(v48 + 1);
      *((_QWORD *)&v54 + 1) = v9;
      v27 = *(_QWORD *)v55;
      if (*(_QWORD *)v55)
      {
        v50 = 0;
        v51 = (_QWORD *)*((_QWORD *)&v54 + 1);
        v27 = *(_QWORD *)v55;
        do
        {
          *v51 = 0;
          v51[1] = 0;
          v51 += 2;
          ++v50;
        }
        while (v50 < v27);
      }
      v13 = v52;
      *(_QWORD *)&v55[32] = 0;
      *(_QWORD *)&v55[8] = 0;
      *(_OWORD *)&v55[16] = v27;
      if (v27)
      {
LABEL_20:
        v28 = *(_QWORD *)v55;
        if (*(_QWORD *)v55 <= 8 * v27)
          goto LABEL_21;
      }
    }
    v53 = v13;
    v9 = (_anonymous_namespace_ *)re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::resize(&v54);
    v13 = v53;
    v28 = *(_QWORD *)v55;
LABEL_21:
    v29 = (unint64_t *)(v26 + 16 * v16);
    v30 = 0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30));
    v31 = (0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31);
    v32 = v28 >> 4;
    v33 = v31 % (v28 >> 4);
    v34 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v54 + 16 * v33)), v13)))), (int8x8_t)0x3830282018100800)));
    if (v34 >= 0x40)
    {
      do
      {
        if (v33 + 1 == v32)
          v33 = 0;
        else
          ++v33;
        v34 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v54 + 16 * v33)), v13)))), (int8x8_t)0x3830282018100800)));
      }
      while (v34 > 0x3F);
    }
    v35 = (uint64_t *)(v29 + 1);
    v36 = v54 + 16 * v33;
    v37 = *(unsigned __int8 *)(v36 + v34) == 255;
    *(_BYTE *)(v36 + v34) = v31 & 0x7F;
    v38 = *v29;
    v39 = *v35;
    v40 = *(_QWORD *)&v55[8];
    v41 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 16 * (v34 + 16 * v33));
    *v41 = v38;
    v41[1] = v39;
    *(_QWORD *)&v55[8] = v40 + 1;
    *(_QWORD *)&v55[16] -= v37;
    v42 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
    *(_QWORD *)&v55[24] ^= (v42 >> 31) ^ v42;
    v43 = v16 >> 4;
    v10 = a1[2];
    if (v16 >> 4 >= v10 >> 4)
      goto LABEL_12;
    v44 = __clz(__rbit64((-2 << (v16 & 0xF)) & v15));
    if (v44 >= 0x40)
      break;
    v16 = v44 + (v16 & 0xFFFFFFFFFFFFFFF0);
LABEL_29:
    if (v16 == -1)
      goto LABEL_12;
  }
  v45 = 16 * v43;
  v46 = ~v43 + (v10 >> 4);
  while (v46)
  {
    v15 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v45 + 16)), v13)))), (int8x8_t)0x3830282018100800);
    v47 = __clz(__rbit64(v15));
    v45 += 16;
    --v46;
    if (v47 <= 0x3F)
    {
      v16 = v47 + v45;
      goto LABEL_29;
    }
  }
LABEL_12:
  v18 = *(_QWORD *)&v55[40];
  *(_QWORD *)&v55[40] = a1[7];
  result = *(_QWORD *)&v55[40];
  v19 = v54;
  v20 = *(_OWORD *)v55;
  *(_QWORD *)v55 = v10;
  v21 = *a1;
  v22 = a1[1];
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v22;
  v23 = *(_OWORD *)&v55[16];
  v24 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v55[32];
  a1[7] = v18;
  *(_OWORD *)&v55[24] = v24;
  v25 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v19;
  *((_OWORD *)a1 + 1) = v20;
  *((_OWORD *)a1 + 2) = v23;
  *(_OWORD *)&v55[8] = v25;
  if (result)
  {
    if (v22)
      *((_QWORD *)&v54 + 1) = 0;
    if (v21)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t `anonymous namespace'::getVectorSizeForVertexFormat(int a1)
{
  if ((a1 - 1) > 0x34)
    return 0;
  else
    return qword_2260F9668[(char)(a1 - 1)];
}

_QWORD *re::DynamicArray<re::MeshAssetBuffer>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetBuffer>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetBuffer>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::MeshAssetPart>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetPart>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetPart>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::Result<re::MeshAssetPart,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 216));
    re::StringID::destroyString((re::StringID *)(a1 + 88));
    re::DynamicArray<re::MeshAssetBuffer>::deinit(a1 + 16);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 32);
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 48));
      *v3 = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
    }
  }
  return a1;
}

_anonymous_namespace_ *re::FixedArray<re::SkinningInfluence>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::SkinningInfluence>::copy(a1, a2);
  }
  return a1;
}

__n128 re::DynamicArray<re::MeshAssetSkinningData>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshAssetSkinningData>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 144 * v4;
  *(_DWORD *)v5 = *(_DWORD *)a2;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 40) = v8;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v5 + 64) = v10;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v11;
  result = *(__n128 *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v5 + 128) = v14;
  *(__n128 *)(v5 + 80) = result;
  *(_OWORD *)(v5 + 96) = v13;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::FixedArray<re::SkinningInfluence>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 8 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetSkinningData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::Result<re::DynamicArray<re::MeshAssetSkinningData>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::MeshAssetSkinningData>::deinit(a1 + 8);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetBlendShapeData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 56 * a2;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)v10 + 2);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 56;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_DWORD *)(v7 + 44) = 0;
        *(_WORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_BYTE *)(v7 + 40) = 0;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::Result<re::BlendShapeGroupDefinition,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)(a1 + 24));
    re::StringID::destroyString((re::StringID *)(a1 + 8));
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::Result<re::DynamicArray<re::MeshAssetBlendShapeData>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(a1 + 8);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetContactDeformerData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 48 * a2;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit((_QWORD *)v10 + 2);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 48;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 48 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_WORD *)(v7 + 40) = 0;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::Result<re::DynamicArray<re::MeshAssetContactDeformerData>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::deinit(a1 + 8);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 24 * a2;
    v9 = a2;
    do
    {
      re::StringID::destroyString((re::StringID *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 24;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_WORD *)(v7 + 16) = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::Result<re::DynamicArray<re::MeshAssetSmoothDeformerData>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a1 + 8);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void re::DynamicArray<re::MeshAssetWrapDeformerData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 112 * a2 + 48;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = (_QWORD *)(v10 + v8);
      v12 = *(_QWORD *)(v10 + v8 + 32);
      if (v12)
      {
        if (v11[5])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v10 + v8 + 48));
          v11[5] = 0;
          v11[6] = 0;
        }
        v11[4] = 0;
      }
      v13 = v11[1];
      if (v13)
      {
        if (*(_QWORD *)(v10 + v8 + 16))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v10 + v8 + 24));
          *(_QWORD *)(v10 + v8 + 16) = 0;
          *(_QWORD *)(v10 + v8 + 24) = 0;
        }
        v11[1] = 0;
      }
      v14 = (_QWORD *)(v10 + v8);
      v15 = *(_QWORD *)(v10 + v8 - 16);
      if (v15)
      {
        if (*(v14 - 1))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v10 + v8));
          *(v14 - 1) = 0;
          *v14 = 0;
        }
        *(v14 - 2) = 0;
      }
      re::StringID::destroyString((re::StringID *)(v14 - 4));
      re::StringID::destroyString((re::StringID *)(v11 - 6));
      ++v9;
      v8 += 112;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 112 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = &str_110;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 90) = 0uLL;
        v6 += 112;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::Result<re::DynamicArray<re::MeshAssetWrapDeformerData>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit(a1 + 8);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::Result<re::DynamicArray<re::MeshAssetJiggleDeformerData>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 8);
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::MeshPartFlags::flattenToRenderFlags(re::MeshPartFlags *this)
{
  uint64_t result;

  result = 25172350;
  if (*(_BYTE *)this)
    result = *((unsigned __int8 *)this + 1) | 0x180197Eu;
  if (*((_BYTE *)this + 2))
    result = result & 0xFFFFFFFD | (2 * (*((_BYTE *)this + 3) == 1));
  if (*((_BYTE *)this + 4))
    return result & 0xFFF9FFFF | ((*((_BYTE *)this + 5) & 3) << 17);
  return result;
}

uint64_t re::DynamicArray<re::MeshAssetBlendShapeData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetBlendShapeData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetBlendShapeData>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetBlendShapeData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetSkinningData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetSkinningData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetSkinningData>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetSkinningData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetPart>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetPart>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetPart>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetPart>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshLodLevelInfo>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetContactDeformerData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetContactDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetContactDeformerData>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetContactDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetSmoothDeformerData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetSmoothDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetSmoothDeformerData>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetWrapDeformerData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetWrapDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetWrapDeformerData>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetWrapDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetJiggleDeformerData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetJiggleDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::BlendSpaceAxisDefinition>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetJiggleDeformerData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::MeshAssetSkinningData>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 144 * v2;
    v4 = (_QWORD *)(result[4] + 40);
    do
    {
      v5 = v4[2];
      if (v5)
      {
        if (v4[3])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v4[4]);
          v4[3] = 0;
          v4[4] = 0;
        }
        v4[2] = 0;
      }
      v6 = *(v4 - 1);
      if (v6)
      {
        if (*v4)
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v4[1]);
          *v4 = 0;
          v4[1] = 0;
        }
        *(v4 - 1) = 0;
      }
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if (*(v4 - 3))
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(v4 - 2));
          *(v4 - 3) = 0;
          *(v4 - 2) = 0;
        }
        *(v4 - 4) = 0;
      }
      v4 += 18;
      v3 -= 144;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::DynamicArray<re::MeshAssetPart>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = v2 << 8;
    do
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v3 + 200));
      re::StringID::destroyString((re::StringID *)(v3 + 72));
      result = re::DynamicArray<re::MeshAssetBuffer>::deinit(v3);
      v3 += 256;
      v4 -= 256;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void re::DynamicArray<re::MeshAssetContactDeformerData>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = 48 * v2;
    do
    {
      re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit((_QWORD *)v3 + 2);
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 48);
      v4 -= 48;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::MeshAssetSmoothDeformerData>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = 24 * v2;
    do
    {
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 24);
      v4 -= 24;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::MeshAssetWrapDeformerData>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 112 * v2;
    do
    {
      v6 = (_QWORD *)(v4 + v3);
      v7 = *(_QWORD *)(v4 + v3 + 80);
      if (v7)
      {
        if (v6[11])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v4 + v3 + 96));
          v6[11] = 0;
          v6[12] = 0;
        }
        v6[10] = 0;
      }
      v8 = v6[7];
      if (v8)
      {
        if (*(_QWORD *)(v4 + v3 + 64))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v4 + v3 + 72));
          *(_QWORD *)(v4 + v3 + 64) = 0;
          *(_QWORD *)(v4 + v3 + 72) = 0;
        }
        v6[7] = 0;
      }
      v9 = (_QWORD *)(v4 + v3);
      v10 = *(_QWORD *)(v4 + v3 + 32);
      if (v10)
      {
        if (v9[5])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v4 + v3 + 48));
          v9[5] = 0;
          v9[6] = 0;
        }
        v9[4] = 0;
      }
      re::StringID::destroyString((re::StringID *)(v9 + 2));
      re::StringID::destroyString((re::StringID *)(v4 + v3));
      v3 += 112;
    }
    while (v5 != v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

void std::__introsort<std::_ClassicAlgPolicy,re::`anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0 &,re::`anonymous namespace'::PartInstance*,false>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  _BOOL4 v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  BOOL v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  _OWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  _OWORD *v136;
  _OWORD *v137;
  __int128 v138;
  __int128 v139;
  BOOL v140;
  int64_t v141;
  unsigned int v142;
  uint64_t v143;
  int64_t v144;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;

BOOL re::`anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0::operator()(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) != 0)
    v7 = a1 + 24;
  else
    v7 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v7 + 536 * a2 + 8) <= (unint64_t)a3)
    goto LABEL_19;
  if ((*(_BYTE *)(v7 + 536 * a2 + 16) & 1) != 0)
    v8 = v7 + 536 * a2 + 24;
  else
    v8 = *(_QWORD *)(v7 + 536 * a2 + 32);
  if (v5 <= a4)
    goto LABEL_20;
  if ((v6 & 1) != 0)
    v9 = a1 + 24;
  else
    v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 536 * a4 + 8) <= (unint64_t)a5)
  {
LABEL_21:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(_QWORD *)(v8 + 8 * a3);
  if ((*(_BYTE *)(v9 + 536 * a4 + 16) & 1) != 0)
    v11 = v9 + 536 * a4 + 24;
  else
    v11 = *(_QWORD *)(v9 + 536 * a4 + 32);
  return v10 < *(_QWORD *)(v11 + 8 * a5);
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0 &,re::`anonymous namespace'::PartInstance*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL4 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  if (v8)
  {
    if (v9)
    {
      v34 = *(_OWORD *)(a1 + 32);
      v38 = *(_OWORD *)(a1 + 48);
      v42 = *(_OWORD *)(a1 + 64);
      v26 = *(__n128 *)a1;
      v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      v11 = *(_OWORD *)(a3 + 64);
      v13 = *(_OWORD *)(a3 + 16);
      v12 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = v11;
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = v12;
    }
    else
    {
      v37 = *(_OWORD *)(a1 + 32);
      v41 = *(_OWORD *)(a1 + 48);
      v45 = *(_OWORD *)(a1 + 64);
      v29 = *(__n128 *)a1;
      v33 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 64);
      v22 = *(_OWORD *)(a2 + 16);
      v21 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v20;
      *(_OWORD *)(a1 + 16) = v22;
      *(_OWORD *)(a1 + 32) = v21;
      *(_OWORD *)(a2 + 48) = v41;
      *(_OWORD *)(a2 + 64) = v45;
      *(__n128 *)a2 = v29;
      *(_OWORD *)(a2 + 16) = v33;
      *(_OWORD *)(a2 + 32) = v37;
      v34 = *(_OWORD *)(a2 + 32);
      v38 = *(_OWORD *)(a2 + 48);
      v42 = *(_OWORD *)(a2 + 64);
      v26 = *(__n128 *)a2;
      v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v23 = *(_OWORD *)(a3 + 64);
      v25 = *(_OWORD *)(a3 + 16);
      v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v23;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a2 + 32) = v24;
    }
    *(_OWORD *)(a3 + 48) = v38;
    *(_OWORD *)(a3 + 64) = v42;
    result = v26;
    *(__n128 *)a3 = v26;
    *(_OWORD *)(a3 + 16) = v30;
    *(_OWORD *)(a3 + 32) = v34;
  }
  else if (v9)
  {
    v35 = *(_OWORD *)(a2 + 32);
    v39 = *(_OWORD *)(a2 + 48);
    v43 = *(_OWORD *)(a2 + 64);
    v27 = *(__n128 *)a2;
    v31 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v14 = *(_OWORD *)(a3 + 64);
    v16 = *(_OWORD *)(a3 + 16);
    v15 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v14;
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v15;
    *(_OWORD *)(a3 + 48) = v39;
    *(_OWORD *)(a3 + 64) = v43;
    *(__n128 *)a3 = v27;
    *(_OWORD *)(a3 + 16) = v31;
    *(_OWORD *)(a3 + 32) = v35;
    {
      v36 = *(_OWORD *)(a1 + 32);
      v40 = *(_OWORD *)(a1 + 48);
      v44 = *(_OWORD *)(a1 + 64);
      v28 = *(__n128 *)a1;
      v32 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v17 = *(_OWORD *)(a2 + 64);
      v19 = *(_OWORD *)(a2 + 16);
      v18 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v17;
      *(_OWORD *)(a1 + 16) = v19;
      *(_OWORD *)(a1 + 32) = v18;
      *(_OWORD *)(a2 + 48) = v40;
      *(_OWORD *)(a2 + 64) = v44;
      result = v28;
      *(__n128 *)a2 = v28;
      *(_OWORD *)(a2 + 16) = v32;
      *(_OWORD *)(a2 + 32) = v36;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0 &,re::`anonymous namespace'::PartInstance*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  _BOOL8 result;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  unsigned int v26;
  unsigned int v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (_OWORD *)(a2 - 80);
      v50 = *(_OWORD *)(a1 + 32);
      v56 = *(_OWORD *)(a1 + 48);
      v62 = *(_OWORD *)(a1 + 64);
      v38 = *(_OWORD *)a1;
      v44 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *v8;
      v9 = v8[4];
      v11 = v8[1];
      v10 = v8[2];
      *(_OWORD *)(a1 + 48) = v8[3];
      *(_OWORD *)(a1 + 64) = v9;
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
      v8[3] = v56;
      v8[4] = v62;
      result = 1;
      *v8 = v38;
      v8[1] = v44;
      v8[2] = v50;
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v23 = (__int128 *)(a1 + 80);
      v24 = (__int128 *)(a1 + 160);
      v25 = (__int128 *)(a1 + 240);
      v26 = *(_DWORD *)(a2 - 80);
      v27 = *(_DWORD *)(a2 - 76);
      v28 = (__int128 *)(a2 - 80);
      v52 = *(_OWORD *)(a1 + 272);
      v58 = *(_OWORD *)(a1 + 288);
      v64 = *(_OWORD *)(a1 + 304);
      v40 = *v25;
      v46 = *(_OWORD *)(a1 + 256);
      *v25 = *v28;
      v29 = v28[4];
      v31 = v28[1];
      v30 = v28[2];
      *(_OWORD *)(a1 + 288) = v28[3];
      *(_OWORD *)(a1 + 304) = v29;
      *(_OWORD *)(a1 + 256) = v31;
      *(_OWORD *)(a1 + 272) = v30;
      v28[3] = v58;
      v28[4] = v64;
      *v28 = v40;
      v28[1] = v46;
      v28[2] = v52;
      v53 = *(_OWORD *)(a1 + 192);
      v59 = *(_OWORD *)(a1 + 208);
      v65 = *(_OWORD *)(a1 + 224);
      v41 = *v24;
      v47 = *(_OWORD *)(a1 + 176);
      v32 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v32;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 304);
      v33 = *(_OWORD *)(a1 + 256);
      *v24 = *v25;
      *(_OWORD *)(a1 + 176) = v33;
      *(_OWORD *)(a1 + 288) = v59;
      *(_OWORD *)(a1 + 304) = v65;
      *(_OWORD *)(a1 + 256) = v47;
      *(_OWORD *)(a1 + 272) = v53;
      *v25 = v41;
      v54 = *(_OWORD *)(a1 + 112);
      v60 = *(_OWORD *)(a1 + 128);
      v66 = *(_OWORD *)(a1 + 144);
      v42 = *v23;
      v48 = *(_OWORD *)(a1 + 96);
      v34 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v34;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 224);
      v35 = *(_OWORD *)(a1 + 176);
      *v23 = *v24;
      *(_OWORD *)(a1 + 96) = v35;
      *(_OWORD *)(a1 + 208) = v60;
      *(_OWORD *)(a1 + 224) = v66;
      *(_OWORD *)(a1 + 176) = v48;
      *(_OWORD *)(a1 + 192) = v54;
      *v24 = v42;
      v55 = *(_OWORD *)(a1 + 32);
      v61 = *(_OWORD *)(a1 + 48);
      v67 = *(_OWORD *)(a1 + 64);
      v43 = *(_OWORD *)a1;
      v49 = *(_OWORD *)(a1 + 16);
      v36 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v36;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 144);
      v37 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v37;
      *(_OWORD *)(a1 + 128) = v61;
      *(_OWORD *)(a1 + 144) = v67;
      *(_OWORD *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 112) = v55;
      result = 1;
      *v23 = v43;
      return result;
    default:
      v12 = (unsigned int *)(a1 + 160);
      v13 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    {
      v16 = *(_DWORD *)v13;
      v17 = *(_DWORD *)(v13 + 4);
      v51 = *(_OWORD *)(v13 + 40);
      v57 = *(_OWORD *)(v13 + 56);
      v63 = *(_QWORD *)(v13 + 72);
      v18 = v14;
      v39 = *(_OWORD *)(v13 + 8);
      v45 = *(_OWORD *)(v13 + 24);
      while (1)
      {
        v19 = a1 + v18;
        v20 = *(_OWORD *)(a1 + v18 + 208);
        *(_OWORD *)(v19 + 272) = *(_OWORD *)(a1 + v18 + 192);
        *(_OWORD *)(v19 + 288) = v20;
        *(_OWORD *)(v19 + 304) = *(_OWORD *)(a1 + v18 + 224);
        v21 = *(_OWORD *)(a1 + v18 + 176);
        *(_OWORD *)(v19 + 240) = *(_OWORD *)(a1 + v18 + 160);
        *(_OWORD *)(v19 + 256) = v21;
        if (v18 == -160)
          break;
        v18 -= 80;
        {
          v22 = a1 + v18 + 240;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *(_DWORD *)v22 = v16;
      *(_DWORD *)(v22 + 4) = v17;
      *(_OWORD *)(v22 + 24) = v45;
      *(_OWORD *)(v22 + 40) = v51;
      *(_OWORD *)(v22 + 56) = v57;
      *(_QWORD *)(v22 + 72) = v63;
      ++v15;
      *(_OWORD *)(v22 + 8) = v39;
      if (v15 == 8)
        return v13 + 80 == a2;
    }
    v12 = (unsigned int *)v13;
    v14 += 80;
    v13 += 80;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0 &,re::`anonymous namespace'::PartInstance*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  {
    v26 = *(_OWORD *)(a3 + 32);
    v29 = *(_OWORD *)(a3 + 48);
    v32 = *(_OWORD *)(a3 + 64);
    v20 = *(_OWORD *)a3;
    v23 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v11 = *(_OWORD *)(a4 + 64);
    v13 = *(_OWORD *)(a4 + 16);
    v12 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v11;
    *(_OWORD *)(a3 + 16) = v13;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a4 + 48) = v29;
    *(_OWORD *)(a4 + 64) = v32;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v23;
    *(_OWORD *)(a4 + 32) = v26;
    {
      v27 = *(_OWORD *)(a2 + 32);
      v30 = *(_OWORD *)(a2 + 48);
      v33 = *(_OWORD *)(a2 + 64);
      v21 = *(_OWORD *)a2;
      v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v14 = *(_OWORD *)(a3 + 64);
      v16 = *(_OWORD *)(a3 + 16);
      v15 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)(a2 + 32) = v15;
      *(_OWORD *)(a3 + 48) = v30;
      *(_OWORD *)(a3 + 64) = v33;
      *(_OWORD *)a3 = v21;
      *(_OWORD *)(a3 + 16) = v24;
      *(_OWORD *)(a3 + 32) = v27;
      {
        v28 = *(_OWORD *)(a1 + 32);
        v31 = *(_OWORD *)(a1 + 48);
        v34 = *(_OWORD *)(a1 + 64);
        v22 = *(__n128 *)a1;
        v25 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v17 = *(_OWORD *)(a2 + 64);
        v19 = *(_OWORD *)(a2 + 16);
        v18 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v17;
        *(_OWORD *)(a1 + 16) = v19;
        *(_OWORD *)(a1 + 32) = v18;
        *(_OWORD *)(a2 + 48) = v31;
        *(_OWORD *)(a2 + 64) = v34;
        result = v22;
        *(__n128 *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v25;
        *(_OWORD *)(a2 + 32) = v28;
      }
    }
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<unsigned long,256ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<unsigned long,256ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 256;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 0x100 || (v7 & 1) == 0))
    {
      if (a2 < 0x101)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)(a1 + 8));
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED30C78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED30C78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  REMultiBufferMeshPayload *v3;
  void *v4;
  REMultiBufferMeshPayload *v5;

  v1 = *(_QWORD *)(a1 + 8);
  re::makeMeshPayloadWithMeshAsset((re *)(v1 + 8), *(Device ***)(a1 + 16), *(_QWORD *)(a1 + 24), &v5);
  v2 = (void **)(v1 + 288);
  if ((REMultiBufferMeshPayload **)(v1 + 288) != &v5)
  {
    v3 = v5;
    v5 = 0;
    v4 = *v2;
    *v2 = v3;

  }
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED30CF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED30CF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];

  v1 = *(_QWORD *)(a1 + 8);
  re::makeMeshCollectionWithMeshPayload((id *)(v1 + 288), (id *)(v1 + 296), (uint64_t)v3);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v1 + 248, (uint64_t)v3);
  return re::DynamicArray<re::MeshModel>::deinit((uint64_t)v3);
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::target_type()
{
}

uint64_t re::FixedArray<re::AABB>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int32x4_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 16);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    v7 = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v8 = 0x7F0000007FLL;
    *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
    do
    {
      *(int32x4_t *)result = v7;
      *(_OWORD *)(result + 16) = v8;
      result += 32;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)&v9 = 0x7F0000007FLL;
  *((_QWORD *)&v9 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)result = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(result + 16) = v9;
  return result;
}

void re::AssetHandle::mutateAssetCommon(re::AssetHandle *this)
{
  uint64_t v2;
  re *v3;
  NSObject *v4;
  _QWORD *v5;
  char *v6;
  char v7[8];
  uint64_t v8;
  char v9;
  uint8_t buf[4];
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v2 + 257))
  {
    v3 = *(re **)(v2 + 24);
    if (v3)
      re::AssetManager::deviceAssetPath((uint64_t)v3, (uint64_t)this, 0, 12, v7);
    else
      v7[0] = 0;
    v4 = *re::assetsLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = re::AssetHandle::assetInfo(this);
      if ((v5[17] & 1) != 0)
        v6 = (char *)v5[18];
      else
        v6 = (char *)v5 + 137;
      *(_DWORD *)buf = 136315138;
      v11 = v6;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Trying to mutate, an immutable asset: %s. This asset needs to be created using mutable asset API instead.", buf, 0xCu);
    }
    if (v7[0] && v8 && (v9 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v8 + 40))();
    v2 = *((_QWORD *)this + 1);
  }
  if (!*(_BYTE *)(v2 + 256) && (int)objc_msgSend((id)(*(_QWORD *)(v2 + 712) + 8), "retainCount") >= 2)
    re::AssetHandle::internalCloneAssetFromSharedAsset(this);
}

uint64_t re::AssetHandle::loadedAsset<re::MeshAsset>(re::MeshAsset *a1)
{
  if (!*((_QWORD *)a1 + 1))
    return 0;
  re::MeshAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::MeshAsset::assetType(void)::type, 1);
}

uint64_t re::DynamicArray<re::AssetHandle>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AssetHandle>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t *re::DynamicArray<re::AssetHandle>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const re::AssetHandle *v11;
  uint64_t v12;
  re::AssetHandle *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 24 * *(_QWORD *)(a1 + 16)), *(uint64_t **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 3 * v9;
      v11 = (const re::AssetHandle *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v10);
      v12 = 24 * v4 - 8 * v10;
      do
      {
        v13 = re::AssetHandle::AssetHandle((re::AssetHandle *)result, v11);
        v11 = (const re::AssetHandle *)((char *)v11 + 24);
        result = (uint64_t *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 24 * v4), *(uint64_t **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + 24 * v4);
      v7 = 24 * v6 - 24 * v4;
      do
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)result);
        result = (uint64_t *)(v8 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::AssetHandle::operator=(a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED30D78;
  return result;
}

void std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED30D78;
}

re *std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::target_type()
{
}

void re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_193, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::Result<re::MeshAssetModel,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)(a1 + 16));
  }
  else
  {
    v3 = (_OWORD *)(a1 + 32);
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 48));
      *v3 = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
    }
  }
  return a1;
}

void re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *(_QWORD *)v13;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = *(_DWORD *)(v13 + 8);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::Result<re::MeshAssetData,re::DetailedError>::Result(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)result = 1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 8) = *(_QWORD *)a2;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  v4 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 32);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 56) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(result + 64);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 72);
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 112) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 96) = v8;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  v10 = *(_QWORD *)(result + 120);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 112);
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 152) = 0;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 136) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = *(_QWORD *)(result + 144);
  *(_QWORD *)(result + 144) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v12;
  v13 = *(_QWORD *)(result + 160);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v13;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(result + 152);
  return result;
}

void re::DynamicArray<re::MeshAssetSkeleton>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 112 * v2;
    do
    {
      v6 = (_QWORD *)(v4 + v3);
      v7 = *(_QWORD *)(v4 + v3 + 88);
      if (v7)
      {
        if (v6[12])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v4 + v3 + 104));
          v6[12] = 0;
          v6[13] = 0;
        }
        v6[11] = 0;
      }
      v8 = v6[8];
      if (v8)
      {
        if (*(_QWORD *)(v4 + v3 + 72))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v4 + v3 + 80));
          *(_QWORD *)(v4 + v3 + 72) = 0;
          *(_QWORD *)(v4 + v3 + 80) = 0;
        }
        v6[8] = 0;
      }
      v9 = (_QWORD *)(v4 + v3);
      v10 = *(_QWORD *)(v4 + v3 + 40);
      if (v10)
      {
        if (v9[6])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v4 + v3 + 56));
          v9[6] = 0;
          v9[7] = 0;
        }
        v9[5] = 0;
      }
      re::FixedArray<re::StringID>::deinit(v9 + 2);
      re::StringID::destroyString((re::StringID *)(v4 + v3));
      v3 += 112;
    }
    while (v5 != v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicOverflowArray<unsigned int,128ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (!*result)
  {
    result = (_QWORD *)re::DynamicOverflowArray<unsigned int,128ul>::setCapacity(v4, a2);
    v8 = *((_DWORD *)v4 + 4) + 2;
    goto LABEL_5;
  }
  v6 = *((_DWORD *)result + 4);
  if ((v6 & 1) != 0)
    v7 = 128;
  else
    v7 = result[3];
  if (v7 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 0x80 || (v6 & 1) == 0))
    {
      if (a2 >= 0x81)
      {
        if (a2 >> 62)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 4, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 4 * a2;
          v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 4 * a2, 4);
          if (v10)
          {
            v12 = v10;
            if ((v4[2] & 1) != 0)
              v13 = v4 + 3;
            else
              v13 = (const void *)v4[4];
            result = memcpy(v10, v13, 4 * v4[1]);
            v17 = *((_DWORD *)v4 + 4);
            if ((v17 & 1) == 0)
            {
              result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
              v17 = *((_DWORD *)v4 + 4);
            }
            *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
            v4[3] = a2;
            v4[4] = v12;
            return result;
          }
        }
        re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v14 = result + 3;
      v15 = v4[4];
      if ((v6 & 1) != 0)
        v16 = v4 + 3;
      else
        v16 = (const void *)v4[4];
      memcpy(v14, v16, 4 * v9);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
      v8 = *((_DWORD *)v4 + 4) | 1;
LABEL_5:
      *((_DWORD *)v4 + 4) = v8;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = *a1;
  if (a2 && !result)
  {
    result = re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 128;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 0x80 || (v7 & 1) == 0))
    {
      if (a2 < 0x81)
      {
        v14 = a1[4];
        if ((v7 & 1) != 0)
          v15 = a1 + 3;
        else
          v15 = (_QWORD *)a1[4];
        if (v9)
        {
          v16 = 0;
          v17 = 536 * v9;
          do
          {
            re::DynamicOverflowArray<unsigned long long,64ul>::DynamicOverflowArray((uint64_t)&a1[v16 / 8 + 3], (uint64_t)&v15[v16 / 8]);
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)&v15[v16 / 8]);
            v16 += 536;
          }
          while (v17 != v16);
          result = *a1;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v14);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x218uLL))
      {
        v2 = 536 * a2;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 536 * a2, 8);
        if (result)
        {
          v11 = result;
          v12 = *((_DWORD *)a1 + 4);
          if ((v12 & 1) != 0)
            v13 = (uint64_t)(a1 + 3);
          else
            v13 = a1[4];
          v18 = a1[1];
          if (v18)
          {
            v19 = 536 * v18;
            v20 = result;
            do
            {
              re::DynamicOverflowArray<unsigned long long,64ul>::DynamicOverflowArray(v20, v13);
              result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v13);
              v13 += 536;
              v20 += 536;
              v19 -= 536;
            }
            while (v19);
            v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 536, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<unsigned long long,64ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    *(_DWORD *)(a1 + 16) = 3;
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v6;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFFE | *(_DWORD *)(a1 + 16) & 1;
    *(_DWORD *)(a1 + 16) &= ~1u;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v7;
LABEL_18:
    v14 = 2;
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    goto LABEL_18;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity((_QWORD *)a1, v8);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v9 = (const void *)(a2 + 24);
  else
    v9 = *(const void **)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = v4;
  if ((v11 & 1) == 0)
    v12 = *(void **)(a1 + 32);
  if (v10)
  {
    memmove(v12, v9, 8 * v10);
    v11 = *(_DWORD *)(a1 + 16);
  }
  if ((v11 & 1) == 0)
    v4 = *(char **)(a1 + 32);
  if ((*(_DWORD *)(a2 + 16) & 1) != 0)
    v13 = a2 + 24;
  else
    v13 = *(_QWORD *)(a2 + 32);
  memcpy(&v4[8 * *(_QWORD *)(a1 + 8)], (const void *)(v13 + 8 * *(_QWORD *)(a1 + 8)), 8 * v8 - 8 * *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = 4;
LABEL_19:
  *(_DWORD *)(a2 + 16) = ((*(_DWORD *)(a2 + 16) & 0xFFFFFFFE) + v14) | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(a1 + 16) += 2;
  return a1;
}

_QWORD *re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 64;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 0x40 || (v7 & 1) == 0))
    {
      if (a2 < 0x41)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>::deinit(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_DWORD *)(a1 + 16);
    if ((v3 & 1) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a1 + 40));
      v3 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = (v3 | 1) + 2;
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>,64ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  result = *a1;
  if (!result)
  {
    v7 = *((_DWORD *)a1 + 4) + 2;
    goto LABEL_5;
  }
  v5 = *((_DWORD *)a1 + 4);
  if ((v5 & 1) != 0)
    v6 = 64;
  else
    v6 = a1[4];
  if (v6 != a2)
  {
    v8 = a1[1];
    if (v8 <= a2 && (a2 > 0x40 || (v5 & 1) == 0))
    {
      if (a2 >= 0x41)
      {
        v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 5152 * a2, 16);
        if (v9)
        {
          v11 = v9;
          if ((a1[2] & 1) != 0)
            v12 = (uint64_t)(a1 + 4);
          else
            v12 = a1[5];
          v15 = *((_DWORD *)a1 + 4);
          if ((v15 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[5]);
            v15 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v15 & 0xFFFFFFFE;
          a1[4] = a2;
          a1[5] = v11;
        }
        else
        {
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, 5152 * a2, *(_QWORD *)(*a1 + 8));
          result = _os_crash();
          __break(1u);
        }
        return result;
      }
      v13 = a1[5];
      if ((v5 & 1) != 0)
        v14 = (uint64_t)(a1 + 4);
      else
        v14 = a1[5];
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v13);
      v7 = *((_DWORD *)a1 + 4) | 1;
LABEL_5:
      *((_DWORD *)a1 + 4) = v7;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t *v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const void *v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  if (result != a2)
  {
    v5 = result;
    for (i = 0; v5 + i != a2; i += 5152)
    {
      _X22 = a3 + i;
      _X23 = v5 + i;
      *(_QWORD *)_X22 = 0;
      *(_QWORD *)(_X22 + 8) = 0;
      *(_DWORD *)(_X22 + 16) = 1;
      *(_QWORD *)(a3 + i + 32) = 0;
      v9 = (uint64_t *)(a3 + i + 32);
      *(_QWORD *)(_X22 + 40) = 0;
      __asm
      {
        PRFM            #0, [X23,#0x2850]
        PRFM            #0, [X22,#0x2848]
      }
      if ((*(_DWORD *)(v5 + i + 16) & 1) != 0)
      {
        v19 = *(_QWORD *)(_X23 + 8);
        if (v19)
        {
          v20 = v5 + i;
          *(_QWORD *)_X22 = *(_QWORD *)(v5 + i);
          if ((*(_BYTE *)(_X23 + 16) & 1) != 0)
            v21 = (const void *)(v20 + 32);
          else
            v21 = *(const void **)(v20 + 40);
          v22 = *(_DWORD *)(_X22 + 16);
          v23 = (void *)(a3 + i + 32);
          if ((v22 & 1) == 0)
            v23 = *(void **)(_X22 + 40);
          v24 = *(_QWORD *)(_X22 + 8);
          if (v24)
          {
            memmove(v23, v21, 80 * v24);
            v22 = *(_DWORD *)(_X22 + 16);
          }
          if ((v22 & 1) == 0)
            v9 = *(uint64_t **)(_X22 + 40);
          if ((*(_DWORD *)(_X23 + 16) & 1) != 0)
            v25 = v20 + 32;
          else
            v25 = *(_QWORD *)(v20 + 40);
          memcpy(&v9[10 * *(_QWORD *)(_X22 + 8)], (const void *)(v25 + 80 * *(_QWORD *)(_X22 + 8)), 80 * v19 - 80 * *(_QWORD *)(_X22 + 8));
          *(_QWORD *)(_X22 + 8) = v19;
          *(_QWORD *)(_X23 + 8) = 0;
          v26 = 4;
          goto LABEL_21;
        }
        *(_QWORD *)_X22 = *(_QWORD *)_X23;
      }
      else
      {
        *(_DWORD *)(_X22 + 16) = 3;
        v16 = *(_QWORD *)(_X23 + 8);
        *(_QWORD *)_X22 = *(_QWORD *)_X23;
        *(_QWORD *)(_X22 + 8) = v16;
        *(_QWORD *)_X23 = 0;
        *(_QWORD *)(_X23 + 8) = 0;
        v17 = *(_QWORD *)(_X22 + 40);
        *(_QWORD *)(_X22 + 40) = *(_QWORD *)(_X23 + 40);
        *(_QWORD *)(_X23 + 40) = v17;
        *(_DWORD *)(_X23 + 16) = *(_DWORD *)(_X23 + 16) & 0xFFFFFFFE | *(_DWORD *)(_X22 + 16) & 1;
        *(_DWORD *)(_X22 + 16) &= ~1u;
        v18 = *v9;
        *v9 = *(_QWORD *)(_X23 + 32);
        *(_QWORD *)(_X23 + 32) = v18;
      }
      v26 = 2;
LABEL_21:
      *(_DWORD *)(_X23 + 16) = ((*(_DWORD *)(_X23 + 16) & 0xFFFFFFFE) + v26) | *(_DWORD *)(_X23 + 16) & 1;
      *(_DWORD *)(_X22 + 16) += 2;
    }
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<re::`anonymous namespace'::PartInstance,64ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 64;
  else
    v8 = result[4];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 0x40 || (v7 & 1) == 0))
    {
      if (a2 < 0x41)
      {
        v14 = result + 4;
        v15 = v4[5];
        if ((v7 & 1) != 0)
          v16 = v4 + 4;
        else
          v16 = (const void *)v4[5];
        memcpy(v14, v16, 80 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x50uLL))
      {
        v2 = 80 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 80 * a2, 16);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 4;
          else
            v13 = (const void *)v4[5];
          result = memcpy(v10, v13, 80 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[5]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 80, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetInstance>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetInstance>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetInstance>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::AssetHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AssetHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::AssetHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AssetHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AssetHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::AssetHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::AssetHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AssetHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::AssetHandle>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AssetHandle>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[3];

  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::AssetHandle>::add(this, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 24 * *((_QWORD *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::AssetHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AssetHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

void re::DynamicArray<re::AssetHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 24 * a2;
    v9 = a2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 24;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::AssetHandle>::clear((re::AssetHandle *)a2);
  }
  else
  {
    re::DynamicArray<re::AssetHandle>::deinit(a2);
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicArray<re::AssetHandle>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
    {
      v11 = *(char **)(a2 + 32);
      v12 = 24 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::DrawableQueueManager::~DrawableQueueManager(re::DrawableQueueManager *this)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)((char *)this + 16);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2);
  *((_QWORD *)this + 1) = 0;

  v3 = *((_QWORD *)this + 8);
  if (v3)
  {

    *((_QWORD *)this + 8) = 0;
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
}

void re::DrawableQueueManager::setActiveScene(re::DrawableQueueManager *this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_QWORD *)this + 10))
  {
    v2 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 10) = a2;
    if (v2)
    {
      do
      {
        v3 = v2;
        v2 = *(_QWORD *)(v2 + 24);
      }
      while (v2);
      if (!*(_QWORD *)(v3 + 16))
        re::Collection<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*((_QWORD *)a2 + 13) + 304), (uint64_t *)this + 8);
    }
  }
}

void re::DrawableQueueManager::removeActiveScene(re::DrawableQueueManager *this, re::ecs2::Scene *a2)
{
  re::ecs2::Entity *v3;

  if (*((re::ecs2::Scene **)this + 10) == a2)
  {
    v3 = (re::ecs2::Entity *)*((_QWORD *)this + 8);
    if (v3)
      re::ecs2::Entity::removeFromSceneOrParent(v3);
    *((_QWORD *)this + 10) = 0;
  }
}

void re::DrawableQueueManager::registerDrawableQueueBackedTexture(re::DrawableQueueManager *this, re::TextureAsset *a2)
{
  unint64_t *v2;
  id v3;
  re::DrawableQueueManager *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  uint64_t v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  id v25;
  uint64_t v26;
  re::ecs2::Entity **v27;
  uint64_t *v28;
  re::ecs2::Entity *v29;
  id v30;
  uint64_t v31;
  re::DynamicString *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  re::ns::String *v56;
  id to;
  StringID v58;
  id v59;
  uint64_t v60[2];
  re::ecs2::Entity *v61;
  id location;
  const char *v63;

  v5 = this;
  v6 = *((unsigned int *)this + 10);
  v7 = (unint64_t)a2 ^ ((unint64_t)a2 >> 30);
  if ((_DWORD)v6)
  {
    v8 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
    v9 = *(unsigned int *)(*((_QWORD *)this + 3) + 4 * ((v8 ^ (v8 >> 31)) % v6));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v18 = *((_QWORD *)this + 4);
      if (*(re::TextureAsset **)(v18 + 24 * v9 + 16) == a2)
        return;
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v18 + 24 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(re::TextureAsset **)(v18 + 24 * v9 + 16) == a2)
          return;
      }
    }
  }
  v10 = *((_QWORD *)a2 + 12);
  if (!*(_BYTE *)(v10 + 295))
  {
    if (*(_QWORD *)(v10 + 328))
      goto LABEL_15;
    v27 = (re::ecs2::Entity **)((char *)this + 64);
    if (!*((_QWORD *)this + 8))
    {
      v28 = re::ecs2::EntityFactory::instance(this);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v28, 4uLL, (re::ecs2::Entity **)&location);
      v29 = *v27;
      v30 = location;
      *v27 = (re::ecs2::Entity *)location;
      if (v29)
      {

        v30 = *v27;
      }
      *((_DWORD *)v30 + 72) |= 0x1400u;
      location = (id)0x2676308E13D52C60;
      v63 = "DrawableQueueSyncRoot";
      re::StringID::operator=((unint64_t *)v30 + 34, (uint64_t *)&location);
      re::StringID::destroyString((re::StringID *)&location);
      this = (re::DrawableQueueManager *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*((_QWORD *)v5 + 8) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v31 = *((_QWORD *)v5 + 10);
      if (v31)
        re::Collection<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*(_QWORD *)(v31 + 104) + 304), (uint64_t *)v5 + 8);
    }
    v33 = re::ecs2::EntityFactory::instance(v32);
    re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v33, 4uLL, &v61);
    v2 = (unint64_t *)v61;
    *((_DWORD *)v61 + 72) |= 0x1400u;
    v60[0] = 0x214F808969F915E6;
    v60[1] = (uint64_t)"DrawableQueue";
    re::StringID::operator=(v2 + 34, v60);
    re::StringID::destroyString((re::StringID *)v60);
    re::ecs2::Entity::setParentInternal((re::ecs2::Entity *)v2, *v27, 0xFFFFFFFFFFFFFFFFLL);
    v34 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                + 7)
                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 56, 0);
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_QWORD *)(v34 + 48) = 0;
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v34, 0);
    *(_QWORD *)(v35 + 16) = 0;
    *(_BYTE *)(v35 + 24) = 0;
    *(_QWORD *)v35 = &off_24ED30EF8;
    *(_QWORD *)(v35 + 28) = 0;
    *(_QWORD *)(v35 + 44) = 0;
    *(_QWORD *)(v35 + 36) = 0;
    *(_DWORD *)(v35 + 52) = 0;
    v3 = (id)(v35 + 8);
    v60[0] = v35;
    v36 = (id)(v35 + 8);
    re::ecs2::EntityComponentCollection::add((uint64_t)(v2 + 4), v60, 1);
    if (v60[0])
    {

      v60[0] = 0;
    }
    v37 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v38 = *((_QWORD *)a2 + 12);
    *(_QWORD *)(v38 + 328) = v34;
    v39 = *(_QWORD *)(v38 + 336);
    if (v39 != v37)
    {
      v40 = v37;
      if (v37)
      {
        v41 = (id)(v37 + 8);
        v39 = *(_QWORD *)(v38 + 336);
      }
      if (v39)
      {

        v2 = (unint64_t *)v61;
        *(_QWORD *)(v38 + 336) = v40;

        if (!v2)
          goto LABEL_58;
        goto LABEL_57;
      }
      *(_QWORD *)(v38 + 336) = v40;
    }

LABEL_57:
LABEL_58:
    if (location && (v63 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)location + 40))();
LABEL_15:
    v19 = (void *)*((_QWORD *)v5 + 12);
    if (v19)
    {
LABEL_21:
      v26 = *((_QWORD *)a2 + 12);
      v59 = v19;
      re::ObjCObject::operator=((id *)(v26 + 56), &v59);

      goto LABEL_41;
    }
    v20 = (unint64_t *)*(id *)(*((_QWORD *)v5 + 1) + 184);
    if (v20)
    {
      v2 = v20;
      v3 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD510], sel_alloc), sel_init);
      objc_msgSend(v3, sel_setCommitSynchronously_, 1);
      v22 = objc_msgSend(v2, sel_newCommandQueueWithDescriptor_, v3);

      objc_msgSend(v22, "setBackgroundGPUPriority:", 2);
      v23 = (void *)*((_QWORD *)v5 + 12);
      *((_QWORD *)v5 + 12) = v22;

      v24 = atomic_load((unsigned __int8 *)&qword_2540FD700);
      if ((v24 & 1) != 0)
      {
LABEL_18:
        v25 = (id)_MergedGlobals_66;
        objc_msgSend(*((id *)v5 + 12), "setLabel:", v25);

        if (v3)
        v19 = (void *)*((_QWORD *)v5 + 12);
        goto LABEL_21;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) A device is required to create a command queue", "false", "registerDrawableQueueBackedTexture", 81);
      _os_crash();
      __break(1u);
    }
    if (__cxa_guard_acquire(&qword_2540FD700))
    {
      v56 = re::ns::String::String((re::ns::String *)&_MergedGlobals_66, (re::ns *)"DrawableQueueMipMapGenQueue");
      __cxa_guard_release((__guard *)v56 + 1);
    }
    goto LABEL_18;
  }
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 104);
    v13 = *(_QWORD *)(v12 + 328);
    if (v13)
    {
      v14 = *(uint64_t **)(v12 + 344);
      v15 = 8 * v13;
      while (1)
      {
        v16 = *v14;
        *(_QWORD *)&v58.var0 = 0;
        v58.var1 = (char *)&str_110;
        v17 = re::ecs2::Entity::findInHierarchyByName(v16, &v58);
        re::StringID::destroyString((re::StringID *)&v58);
        if (v17)
          break;
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_41;
      }
      v42 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v42)
        v43 = (void *)(v42 + 8);
      else
        v43 = 0;
      objc_initWeak(&location, v43);
      v44 = *((_QWORD *)a2 + 12);
      to = 0;
      objc_moveWeak(&to, &location);
      v45 = (id *)(v44 + 48);
      if (&to != v45)
      {
        objc_destroyWeak(v45);
        *v45 = 0;
        objc_moveWeak(v45, &to);
      }
      objc_destroyWeak(&to);
      to = 0;
      objc_destroyWeak(&location);
    }
  }
LABEL_41:
  v46 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
  v47 = v46 ^ (v46 >> 31);
  v48 = *((unsigned int *)v5 + 10);
  if ((_DWORD)v48)
  {
    v49 = v47 % v48;
    v50 = *(unsigned int *)(*((_QWORD *)v5 + 3) + 4 * (v47 % v48));
    if ((_DWORD)v50 != 0x7FFFFFFF)
    {
      v51 = *((_QWORD *)v5 + 4);
      if (*(re::TextureAsset **)(v51 + 24 * v50 + 16) == a2)
        return;
      while (1)
      {
        LODWORD(v50) = *(_DWORD *)(v51 + 24 * v50 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v50 == 0x7FFFFFFF)
          break;
        if (*(re::TextureAsset **)(v51 + 24 * v50 + 16) == a2)
          return;
      }
    }
  }
  else
  {
    LODWORD(v49) = 0;
  }
  v52 = *((unsigned int *)v5 + 13);
  if ((_DWORD)v52 == 0x7FFFFFFF)
  {
    v52 = *((unsigned int *)v5 + 12);
    v53 = v52;
    if ((_DWORD)v52 == (_DWORD)v48)
    {
      re::HashSetBase<re::TextureAsset *,re::TextureAsset *,re::internal::ValueAsKey<re::TextureAsset *>,re::Hash<re::TextureAsset *>,re::EqualTo<re::TextureAsset *>,true,false>::setCapacity((uint64_t)v5 + 16, 2 * *((_DWORD *)v5 + 11));
      LODWORD(v49) = v47 % *((unsigned int *)v5 + 10);
      v53 = *((_DWORD *)v5 + 12);
    }
    *((_DWORD *)v5 + 12) = v53 + 1;
    v54 = *((_QWORD *)v5 + 4);
    v55 = *(_DWORD *)(v54 + 24 * v52 + 8);
  }
  else
  {
    v54 = *((_QWORD *)v5 + 4);
    v55 = *(_DWORD *)(v54 + 24 * v52 + 8);
    *((_DWORD *)v5 + 13) = v55 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v54 + 24 * v52 + 8) = v55 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)v5 + 4) + 24 * v52 + 8) = *(_DWORD *)(*((_QWORD *)v5 + 4) + 24 * v52 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v5 + 3) + 4 * v49);
  *(_QWORD *)(*((_QWORD *)v5 + 4) + 24 * v52) = v47;
  *(_QWORD *)(*((_QWORD *)v5 + 4) + 24 * v52 + 16) = a2;
  *(_DWORD *)(*((_QWORD *)v5 + 3) + 4 * v49) = v52;
  ++*((_DWORD *)v5 + 11);
  ++*((_DWORD *)v5 + 14);
}

void re::DrawableQueueManager::unregisterDrawableQueueBackedTexture(re::DrawableQueueManager *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  re::ecs2::Entity *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int *v17;
  int v18;
  int v19;

  v4 = *(_QWORD *)(a2 + 96);
  if (!*(_BYTE *)(v4 + 295))
  {
    v5 = *(_QWORD *)(v4 + 328);
    if (v5)
    {
      v6 = *(re::ecs2::Entity **)(v5 + 16);
      if (v6)
      {
        re::ecs2::Entity::removeFromSceneOrParent(v6);
        v4 = *(_QWORD *)(a2 + 96);
      }
      *(_QWORD *)(v4 + 328) = 0;
    }
  }
  v7 = *((unsigned int *)this + 10);
  if ((_DWORD)v7)
  {
    v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v9 = (v8 ^ (v8 >> 31)) % v7;
    v10 = *((_QWORD *)this + 3);
    v11 = *(unsigned int *)(v10 + 4 * v9);
    if ((_DWORD)v11 != 0x7FFFFFFF)
    {
      v12 = *((_QWORD *)this + 4);
      if (*(_QWORD *)(v12 + 24 * v11 + 16) == a2)
      {
        *(_DWORD *)(v10 + 4 * v9) = *(_DWORD *)(v12 + 24 * v11 + 8) & 0x7FFFFFFF;
LABEL_13:
        v14 = *((_QWORD *)this + 4);
        v15 = v14 + 24 * v11;
        v18 = *(_DWORD *)(v15 + 8);
        v17 = (int *)(v15 + 8);
        v16 = v18;
        if (v18 < 0)
        {
          *v17 = v16 & 0x7FFFFFFF;
          v14 = *((_QWORD *)this + 4);
          v16 = *(_DWORD *)(v14 + 24 * v11 + 8);
        }
        v19 = *((_DWORD *)this + 14);
        *(_DWORD *)(v14 + 24 * v11 + 8) = *((_DWORD *)this + 13) | v16 & 0x80000000;
        --*((_DWORD *)this + 11);
        *((_DWORD *)this + 13) = v11;
        *((_DWORD *)this + 14) = v19 + 1;
      }
      else
      {
        while (1)
        {
          v13 = v11;
          LODWORD(v11) = *(_DWORD *)(v12 + 24 * v11 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v11 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v12 + 24 * v11 + 16) == a2)
          {
            *(_DWORD *)(v12 + 24 * v13 + 8) = *(_DWORD *)(v12 + 24 * v13 + 8) & 0x80000000 | *(_DWORD *)(v12 + 24 * v11 + 8) & 0x7FFFFFFF;
            goto LABEL_13;
          }
        }
      }
    }
  }
}

void re::DrawableQueueManager::afterFrameUpdate(re::DrawableQueueManager *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderFrame *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::DrawableQueue *v16;
  int v17;
  int v18;

  if (*((_DWORD *)this + 11))
  {
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = (int *)(*((_QWORD *)this + 4) + 8);
      while (1)
      {
        v5 = *v4;
        v4 += 6;
        if (v5 < 0)
          break;
        if (v2 == ++v3)
        {
          LODWORD(v3) = *((_DWORD *)this + 12);
          break;
        }
      }
    }
    else
    {
      LODWORD(v3) = 0;
    }
    if ((_DWORD)v2 == (_DWORD)v3)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v7 = v3;
      do
      {
        v8 = *(_QWORD *)(*((_QWORD *)this + 4) + 24 * v7 + 16);
        v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 104);
        if (v9)
          v10 = (re::RenderFrame *)re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
        else
          v10 = 0;
        v11 = *((_QWORD *)this + 11);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 360);
          v13 = v12 ? *(_QWORD *)(v12 + 24) : 1;
          v14 = *(_QWORD *)(v8 + 96);
          if ((*(_BYTE *)(v14 + 295) || !*(_BYTE *)(v14 + 46) || *(_QWORD *)(v14 + 304) >= 2uLL)
            && *(_BYTE *)(v14 + 294)
            && *(_QWORD *)(v14 + 304) == v13)
          {
            v15 = re::DrawableQueue::latestPresentableDrawable((re::DrawableQueue *)v14, v10);
            if (v15)
              re::TextureAsset::setMetalTexture_fromDrawableQueue(v8, *((re::ImportGraphicsContext **)this + 1), (void **)(v15 + 16), *(unsigned __int8 *)(*(_QWORD *)(v8 + 96) + 296));
            v16 = *(re::DrawableQueue **)(v8 + 96);
            v6 = v6 || *((_BYTE *)v16 + 292) != 0;
            re::DrawableQueue::afterFrameUpdate(v16);
          }
        }
        if (*((_DWORD *)this + 12) <= (v3 + 1))
          v17 = v3 + 1;
        else
          v17 = *((_DWORD *)this + 12);
        while (1)
        {
          v7 = (v3 + 1);
          if (v17 - 1 == (_DWORD)v3)
            break;
          LODWORD(v3) = v3 + 1;
          v18 = v7;
          if ((*(_DWORD *)(*((_QWORD *)this + 4) + 24 * v7 + 8) & 0x80000000) != 0)
            goto LABEL_37;
        }
        v18 = v17;
LABEL_37:
        LODWORD(v3) = v18;
      }
      while ((_DWORD)v2 != v18);
    }
    *((_BYTE *)this + 72) = v6;
  }
}

uint64_t re::DrawableQueueManager::hasNewRenderData(re::DrawableQueueManager *this)
{
  return *((unsigned __int8 *)this + 72);
}

void re::HashSetBase<re::TextureAsset *,re::TextureAsset *,re::internal::ValueAsKey<re::TextureAsset *>,re::Hash<re::TextureAsset *>,re::EqualTo<re::TextureAsset *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashSetBase<re::TextureAsset *,re::TextureAsset *,re::internal::ValueAsKey<re::TextureAsset *>,re::Hash<re::TextureAsset *>,re::EqualTo<re::TextureAsset *>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = *v14;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::ecs2::DrawableQueueSyncComponent::~DrawableQueueSyncComponent(re::ecs2::DrawableQueueSyncComponent *this)
{
  re::AssetHandle::~AssetHandle((re::ecs2::DrawableQueueSyncComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::DrawableQueueSyncComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t *re::allocInfo_FontFile(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_67);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_67))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD7A0, 0);
    *(uint64_t *)((char *)&qword_2540FD7B0 + 6) = 0;
    qword_2540FD7B0 = 0;
    qword_2540FD7C0 = 0;
    qword_2540FD7C8 = 0xFFFFFFFFLL;
    qword_2540FD7A0 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD7D0 = (uint64_t)"FontFile";
    dword_2540FD7D8 = 0;
    unk_2540FD7E0 = 0u;
    unk_2540FD7F0 = 0u;
    unk_2540FD800 = 0u;
    qword_2540FD810 = 0;
    __cxa_guard_release(&_MergedGlobals_67);
  }
  return &qword_2540FD7A0;
}

void re::initInfo_FontFile(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x3B0333E3516;
  v19[1] = "FontFile";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD710);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD710);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "fontName";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FD760 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_AssetHandle((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "sdfTexture";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FD768 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_AssetHandle((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "layout";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x3800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FD770 = v17;
      __cxa_guard_release(&qword_2540FD710);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540FD760;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FontFile>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FontFile>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FontFile>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FontFile>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

double re::internal::defaultConstruct<re::FontFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  return result;
}

double re::internal::defaultDestruct<re::FontFile>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::FontFile>(_anonymous_namespace_ *a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  re::DynamicString::setCapacity(a1, 0);
  result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  return result;
}

double re::internal::defaultDestructV2<re::FontFile>(_QWORD *a1)
{
  double result;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_FontFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FontFile", (uint64_t (*)(re::internal *))re::allocInfo_FontFile, (re::IntrospectionBase *(*)(void))re::initInfo_FontFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontFile>, this);
}

uint64_t *re::allocInfo_FontAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD718);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD718))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD818, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FD828 = 0;
    qword_2540FD838 = 0;
    qword_2540FD840 = 0xFFFFFFFFLL;
    qword_2540FD818 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD848 = (uint64_t)"FontAsset";
    dword_2540FD850 = 0;
    xmmword_2540FD858 = 0u;
    unk_2540FD868 = 0u;
    xmmword_2540FD878 = 0u;
    qword_2540FD888 = 0;
    __cxa_guard_release(&qword_2540FD718);
  }
  return &qword_2540FD818;
}

void re::initInfo_FontAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x72563404CF82;
  v12[1] = "FontAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD728);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD728);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::FontFile>;
      if (!re::internal::introspectionInfoStorage<re::FontFile>)
      {
        v8 = re::allocInfo_FontFile((re *)v6);
        re::internal::introspectionInfoStorage<re::FontFile> = (uint64_t)v8;
        re::initInfo_FontFile((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "fontFile";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FD720 = v10;
      __cxa_guard_release(&qword_2540FD728);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FD720;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FontAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FontAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FontAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FontAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::FontAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  return result;
}

double re::internal::defaultDestruct<re::FontAsset>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::FontAsset>(_anonymous_namespace_ *a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  re::DynamicString::setCapacity(a1, 0);
  result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  return result;
}

double re::internal::defaultDestructV2<re::FontAsset>(_QWORD *a1)
{
  double result;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_FontAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FontAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontAsset>, this);
}

uint64_t *re::allocInfo_FontLayout(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD730);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD730))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD890, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FD8A0 = 0;
    qword_2540FD8B0 = 0;
    qword_2540FD8B8 = 0xFFFFFFFFLL;
    qword_2540FD890 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD8C0 = (uint64_t)"FontLayout";
    dword_2540FD8C8 = 0;
    xmmword_2540FD8D0 = 0u;
    unk_2540FD8E0 = 0u;
    xmmword_2540FD8F0 = 0u;
    qword_2540FD900 = 0;
    __cxa_guard_release(&qword_2540FD730);
  }
  return &qword_2540FD890;
}

void re::initInfo_FontLayout(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;

  v24[0] = 0xDD870702A30F2;
  v24[1] = "FontLayout";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD738);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD738);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "lineHeight";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FD778 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v11 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "glyphBounds";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2540FD780 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::IntrospectionInfo<re::DynamicArray<re::Vector2<float>>>::get(1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "glyphOffsetMatrix";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x3000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2540FD788 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v17 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "glyphTexcoordBounds";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5800000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FD790 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "belowBaselineHeight";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x400000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FD798 = v22;
      __cxa_guard_release(&qword_2540FD738);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FD778;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FontLayout>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FontLayout>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FontLayout>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FontLayout>;
  re::IntrospectionRegistry::add(this, v3);
  v23 = v25;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  std::__shared_mutex_base *v7;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v2 & 1) == 0
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info = (uint64_t)&off_24ED31228;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (re *)re::introspect_Vector4F((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info, 0);
    qword_2558009A8 = 0x2800000003;
    dword_2558009B0 = v10;
    word_2558009B4 = 0;
    *(_QWORD *)&xmmword_2558009B8 = 0;
    *((_QWORD *)&xmmword_2558009B8 + 1) = 0xFFFFFFFFLL;
    qword_2558009C8 = v9;
    unk_2558009D0 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info = (uint64_t)&off_24ED31228;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *(_OWORD *)(v9 + 32);
    xmmword_2558009B8 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::FontLayout>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::FontLayout>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  v6 = *(_QWORD *)(a3 + 48);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    ++*(_DWORD *)(a3 + 72);
  }
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    if (*(_QWORD *)(a3 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    ++*(_DWORD *)(a3 + 32);
  }
  return result;
}

double re::internal::defaultConstructV2<re::FontLayout>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::FontLayout>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t *re::allocInfo_FontLayoutAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD748);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD748))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FD908, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FD918 = 0;
    qword_2540FD928 = 0;
    qword_2540FD930 = 0xFFFFFFFFLL;
    qword_2540FD908 = (uint64_t)&off_24ED7DAA8;
    qword_2540FD938 = (uint64_t)"FontLayoutAsset";
    dword_2540FD940 = 0;
    xmmword_2540FD948 = 0u;
    unk_2540FD958 = 0u;
    xmmword_2540FD968 = 0u;
    qword_2540FD978 = 0;
    __cxa_guard_release(&qword_2540FD748);
  }
  return &qword_2540FD908;
}

void re::initInfo_FontLayoutAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x56B75454A73C8BEELL;
  v12[1] = "FontLayoutAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD758);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD758);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540FD740;
      if (!qword_2540FD740)
      {
        v8 = re::allocInfo_FontLayout((re *)v6);
        qword_2540FD740 = (uint64_t)v8;
        re::initInfo_FontLayout((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "fontLayout";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FD750 = v10;
      __cxa_guard_release(&qword_2540FD758);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FD750;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FontLayoutAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FontLayoutAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FontLayoutAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FontLayoutAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::FontLayoutAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  return result;
}

void re::internal::defaultDestruct<re::FontLayoutAsset>(int a1, int a2, re::FontLayoutAsset *this)
{
  re::FontLayoutAsset::~FontLayoutAsset(this);
}

double re::internal::defaultConstructV2<re::FontLayoutAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t re::introspect_FontLayoutAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FontLayoutAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontLayoutAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontLayoutAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontLayoutAsset>, this);
}

void re::makeFontID(re *this@<X0>, re::StringID *a2@<X8>)
{
  char *v4;
  const char *v5;

  v4 = (char *)re::AssetHandle::assetInfo(this);
  if ((*((_QWORD *)v4 + 13) & 1) != 0)
    v5 = (const char *)*((_QWORD *)v4 + 14);
  else
    v5 = v4 + 105;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = &str_110;
}

uint64_t *re::FontAsset::assetType(re::FontAsset *this)
{
  unsigned __int8 v1;

  {
    re::FontAsset::assetType(void)::type = (uint64_t)"Font";
    qword_255827520 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::FontAsset::assetType(void)::type);
  }
  return &re::FontAsset::assetType(void)::type;
}

__guard re::FontAssetLoader::introspectionType(re::FontAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::FontAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"FontAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontAsset>, 0);
    }
  }
  return v2[317];
}

uint64_t re::FontAssetLoader::registerAsset(re::FontAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v6;
  uint64_t v7;
  re::AssetHandle *v8;
  uint64_t v9;
  NSObject *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  const char *v13;
  _QWORD *v15;
  char *v16;
  re::TextureAsset *v17;
  StringID v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = re::AssetLoader::registerAsset(this, a2, a3);
  if ((_DWORD)v6 || !re::ServiceLocator::serviceOrNull<re::RenderManager>(*((_QWORD *)this + 1)))
    return v6;
  v7 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(a2 + 32));
  v8 = (re::AssetHandle *)(a2 + 56);
  re::FontLayoutAsset::assetType((re::FontLayoutAsset *)v7);
  v9 = re::AssetHandle::assetWithType((re::AssetHandle *)(a2 + 56), (const re::AssetType *)&re::FontLayoutAsset::assetType(void)::type, 0);
  if (!v9)
  {
    v10 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v15 = re::AssetHandle::assetInfo(v8);
      if ((v15[17] & 1) != 0)
        v16 = (char *)v15[18];
      else
        v16 = (char *)v15 + 137;
      v18.var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315138;
      *(_QWORD *)(&v18.var0 + 1) = v16;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v18, 0xCu);
    }
  }
  v11 = (_anonymous_namespace_ *)re::ServiceLocator::service<re::RenderManager>(*((_QWORD *)this + 1));
  v12 = *((_QWORD *)v11 + 9);
  if ((*((_QWORD *)a3 + 13) & 1) != 0)
    v13 = (const char *)*((_QWORD *)a3 + 14);
  else
    v13 = (char *)a3 + 105;
  *(_QWORD *)&v18.var0 = 0;
  v18.var1 = (char *)&str_110;
  if (!*(_DWORD *)(v7 + 240))
  {
    re::TextManager::addFont(v12, &v18, (void **)(v7 + 160), v9);
    re::StringID::destroyString((re::StringID *)&v18);
    return v6;
  }
  v17 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
  return re::AssetHandle::asset<re::TextureAsset>(v17);
}

uint64_t re::AssetHandle::asset<re::TextureAsset>(re::TextureAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::TextureAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void re::FontAssetLoader::unregisterAsset(re::FontAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  _anonymous_namespace_ *v5;
  re::TextManager *v6;
  const char *v7;
  _QWORD v8[2];

  if (re::ServiceLocator::serviceOrNull<re::RenderManager>(*((_QWORD *)this + 1)))
  {
    v5 = (_anonymous_namespace_ *)re::ServiceLocator::service<re::RenderManager>(*((_QWORD *)this + 1));
    v6 = (re::TextManager *)*((_QWORD *)v5 + 9);
    if ((*((_QWORD *)a3 + 13) & 1) != 0)
      v7 = (const char *)*((_QWORD *)a3 + 14);
    else
      v7 = (char *)a3 + 105;
    v8[0] = 0;
    v8[1] = &str_110;
    re::TextManager::removeFont(v6, (const re::FontID *)v8);
    re::StringID::destroyString((re::StringID *)v8);
  }
}

re *re::FontAssetLoader::unloadAsset(re::FontAssetLoader *this, _QWORD *a2)
{
  return re::internal::destroyPersistent<re::FontAsset>((re *)"unloadAsset", 107, a2);
}

re *re::internal::destroyPersistent<re::FontAsset>(re *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 7));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
    if (*a3)
    {
      if ((a3[1] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
    }
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::FontAssetLoader::isSupportedSourceExtension(re::FontAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "refont") == 0;
}

re::AssetHandle *re::FontAssetLoader::findDependencies@<X0>(re::FontAssetLoader *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a3, 2uLL);
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 32));
  return re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 56));
}

uint64_t *re::FontLayoutAsset::assetType(re::FontLayoutAsset *this)
{
  unsigned __int8 v1;

  {
    re::FontLayoutAsset::assetType(void)::type = (uint64_t)"FontLayout";
    qword_255827540 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::FontLayoutAsset::assetType(void)::type);
  }
  return &re::FontLayoutAsset::assetType(void)::type;
}

__guard re::FontLayoutAssetLoader::introspectionType(re::FontLayoutAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::FontLayoutAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"FontLayoutAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontLayoutAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontLayoutAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontLayoutAsset>, 0);
    }
  }
  return v2[319];
}

re *re::FontLayoutAssetLoader::unloadAsset(re::FontLayoutAssetLoader *this, re::FontLayoutAsset *a2)
{
  return re::internal::destroyPersistent<re::FontLayoutAsset>((re *)"unloadAsset", 138, a2);
}

re *re::internal::destroyPersistent<re::FontLayoutAsset>(re *result, uint64_t a2, re::FontLayoutAsset *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::FontLayoutAsset::~FontLayoutAsset(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::FontLayoutAsset *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::FontLayoutAssetLoader::isSupportedSourceExtension(re::FontLayoutAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "refontlayout") == 0;
}

void re::FontAssetLoader::~FontAssetLoader(re::FontAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::FontLayoutAssetLoader::~FontLayoutAssetLoader(re::FontLayoutAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::Vector4<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::Vector4<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::Vector4<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Vector4<float>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::Vector4<float>>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::Vector4<float>>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::Vector4<float>>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::Vector4<float>>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Vector4<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __n128 v10;

  v10 = 0uLL;
  re::DynamicArray<re::Vector4<float>>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)this + 2) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::Vector4<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Vector4<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

void re::DynamicArray<re::Vector4<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 16 * v4);
      v6 = 16 * a2 - 16 * v4;
      if (v6 >= 1)
        bzero(v5, 16 * (((unint64_t)v6 >> 4) - ((unint64_t)v6 > 0xF)) + 16);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  v9 = *(_QWORD *)a2;
  if (*(re::Allocator **)a2 == a4)
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (v9)
    {
      if (*(_QWORD *)(a2 + 32))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)a2, a5);
  }
  ++*(_DWORD *)(a2 + 24);
  re::DynamicArray<re::Vector4<float>>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(char **)(a2 + 32);
      v13 = 16 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a4, 0);
        v12 += 16;
        v13 -= 16;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 16 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::FontLayoutAsset::~FontLayoutAsset(re::FontLayoutAsset *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 6) = 0;
    ++*((_DWORD *)this + 18);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

uint64_t *re::StateParameterBlackboardAsset::assetType(re::StateParameterBlackboardAsset *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    re::StateParameterBlackboardAsset::assetType(void)::type = (uint64_t)"StateParameterBlackboard";
    qword_255827560 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::StateParameterBlackboardAsset::assetType(void)::type);
  }
  return &re::StateParameterBlackboardAsset::assetType(void)::type;
}

_anonymous_namespace_ *re::StateParameterBlackboardAsset::initWithInitData(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _anonymous_namespace_ *v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v8 = result;
  if (a2)
  {
    v10 = *(_QWORD *)(a2 + 8);
    result = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=((_QWORD *)v8 + 1, a2);
  }
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    result = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=((_QWORD *)v8 + 4, a3);
  }
  if (a4)
  {
    v12 = *(_QWORD *)(a4 + 8);
    result = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=((_QWORD *)v8 + 7, a4);
  }
  if (a5)
  {
    v13 = (_QWORD *)((char *)v8 + 80);
    v14 = *(_QWORD *)(a5 + 8);
    return (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=(v13, a5);
  }
  return result;
}

_QWORD *re::FixedArray<re::StateParameterData>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::StateParameterData>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::StateParameterData>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

_QWORD *re::StateParameterBlackboardAsset::deinit(re::StateParameterBlackboardAsset *this)
{
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)this + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)this + 4);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)this + 7);
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)this + 10);
}

re *re::StateParameterBlackboardAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

BOOL re::StateParameterBlackboardAssetLoader::isSupportedSourceExtension(re::StateParameterBlackboardAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "restateparameterblackboard") == 0;
}

uint64_t re::StateParameterBlackboardAssetLoader::introspectionType(re::StateParameterBlackboardAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD9C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD9C0))
  {
    qword_2540FD9B8 = re::internal::getOrCreateInfo((re::internal *)"StateParameterBlackboardAsset", (uint64_t (*)(re::internal *))re::allocInfo_StateParameterBlackboardAsset, (re::IntrospectionBase *(*)(void))re::initInfo_StateParameterBlackboardAsset, (void (*)(re::IntrospectionBase *))&unk_2540FD9B0, 0);
    __cxa_guard_release(&qword_2540FD9C0);
  }
  return qword_2540FD9B8;
}

void re::internal::defaultConstruct<re::StateParameterData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[2] = 0;
  a3[3] = &str_110;
}

void re::internal::defaultDestruct<re::StateParameterData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::StateParameterData>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::StateParameterData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_StateParameterBlackboardAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FD9A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD9A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDAB8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FDAC8 = 0;
    qword_2540FDAD8 = 0;
    qword_2540FDAE0 = 0xFFFFFFFFLL;
    qword_2540FDAB8 = (uint64_t)&off_24ED7DAA8;
    qword_2540FDAE8 = (uint64_t)"StateParameterBlackboardAsset";
    dword_2540FDAF0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2540FDB28 = 0;
    __cxa_guard_release(&qword_2540FD9A0);
  }
  return &qword_2540FDAB8;
}

void re::initInfo_StateParameterBlackboardAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x454837C49FFCB722;
  v15[1] = "StateParameterBlackboardAsset";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FD9A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FD9A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "stateParameterIntData";
      *(_QWORD *)(v7 + 16) = &qword_2540FDA00;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0x800000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_2540FD9E0 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get();
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v8 + 32))(v8, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "stateParameterFloatData";
      *(_QWORD *)(v9 + 16) = &qword_2540FDA00;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x2000000002;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FD9E8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "stateParameterBoolData";
      *(_QWORD *)(v11 + 16) = &qword_2540FDA00;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x3800000003;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2540FD9F0 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get();
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "stateParameterTriggerData";
      *(_QWORD *)(v13 + 16) = &qword_2540FDA00;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000004;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FD9F8 = v13;
      __cxa_guard_release(&qword_2540FD9A8);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FD9E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::StateParameterBlackboardAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::StateParameterBlackboardAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::StateParameterBlackboardAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::StateParameterBlackboardAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  const char *v25;
  __int128 v26;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FD9C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD9C8))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_2540FDA00);
    qword_2540FDA00 = (uint64_t)&off_24ED31418;
    __cxa_guard_release(&qword_2540FD9C8);
  }
  if ((_MergedGlobals_68 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FD998;
    if (qword_2540FD998)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FD988);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FD988))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDA40, 0);
      *(uint64_t *)((char *)&qword_2540FDA50 + 6) = 0;
      qword_2540FDA50 = 0;
      *(_QWORD *)&xmmword_2540FDA60 = 0;
      *((_QWORD *)&xmmword_2540FDA60 + 1) = 0xFFFFFFFFLL;
      qword_2540FDA40 = (uint64_t)&off_24ED7DAA8;
      qword_2540FDA70 = (uint64_t)"StateParameterData";
      dword_2540FDA78 = 0;
      *(_OWORD *)&qword_2540FDA80 = 0u;
      xmmword_2540FDA90 = 0u;
      *(_OWORD *)&qword_2540FDAA0 = 0u;
      qword_2540FDAB0 = 0;
      __cxa_guard_release(&qword_2540FD988);
    }
    qword_2540FD998 = (uint64_t)&qword_2540FDA40;
    *(_QWORD *)&v26 = 0xA476DA435AE1EC04;
    *((_QWORD *)&v26 + 1) = "StateParameterData";
    re::StringID::destroyString((re::StringID *)&v26);
    xmmword_2540FDA60 = v24;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FD990);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_2540FD990);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "parameterName";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_2540FD9D0 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "bindPath";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x1000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_2540FD9D8 = v20;
        __cxa_guard_release(&qword_2540FD990);
      }
    }
    qword_2540FDA50 = 0x2000000008;
    v1 = &qword_2540FDA40;
    dword_2540FDA58 = 8;
    word_2540FDA5C = 0;
    dword_2540FDA78 = 2;
    qword_2540FDA80 = (uint64_t)&qword_2540FD9D0;
    unk_2540FDA88 = re::internal::defaultConstruct<re::StateParameterData>;
    *(_QWORD *)&xmmword_2540FDA90 = re::internal::defaultDestruct<re::StateParameterData>;
    *((_QWORD *)&xmmword_2540FDA90 + 1) = 0;
    qword_2540FDAA0 = 0;
    unk_2540FDAA8 = re::internal::defaultConstructV2<re::StateParameterData>;
    qword_2540FDAB0 = (uint64_t)re::internal::defaultDestructV2<re::StateParameterData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FDA40, v3);
    v26 = v24;
    if ((_MergedGlobals_68 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_68 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDA00, 0);
      qword_2540FDA10 = 0x1800000004;
      dword_2540FDA18 = v5;
      word_2540FDA1C = 0;
      *(_QWORD *)&xmmword_2540FDA20 = 0;
      *((_QWORD *)&xmmword_2540FDA20 + 1) = 0xFFFFFFFFLL;
      qword_2540FDA30 = (uint64_t)v1;
      unk_2540FDA38 = 0;
      qword_2540FDA00 = (uint64_t)&off_24ED31418;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FDA00, (const re::IntrospectionBase *)&v24);
      if ((BYTE8(v24) & 1) != 0)
        v8 = v25;
      else
        v8 = (char *)&v24 + 9;
      if ((_QWORD)v24 && (BYTE8(v24) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v22 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v21 + 1) = v10;
      }
      else
      {
        v26 = v22;
        re::TypeBuilder::beginListType((uint64_t)&v24, v23, 1, 0x18uLL, 8uLL, &v26);
        re::TypeBuilder::setConstructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v24, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v24, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v24, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v24, v11);
      }
      xmmword_2540FDA20 = v21;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::StateParameterBlackboardAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = &off_24ED314B0;
  result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::StateParameterBlackboardAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::StateParameterBlackboardAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24ED314B0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::StateParameterBlackboardAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void re::StateParameterBlackboardAssetLoader::~StateParameterBlackboardAssetLoader(re::StateParameterBlackboardAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FixedArray<re::StateParameterData>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      result[1] = &str_110;
      result[2] = 0;
      result[3] = &str_110;
      result += 4;
      --v6;
    }
    while (v6);
  }
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  return result;
}

uint64_t *re::FixedArray<re::StateParameterData>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>((uint64_t)&v4, *(uint64_t **)(a2 + 16), (uint64_t *)(*(_QWORD *)(a2 + 16) + 32 * v2), *(unint64_t **)(a1 + 16));
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::StateParameterData>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::StateParameterData>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::StateParameterData>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

_QWORD *re::IntrospectionFixedArray<re::StateParameterData>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a2);
}

void *re::IntrospectionFixedArray<re::StateParameterData>::init(uint64_t a1, _QWORD *a2, re *a3, int a4, unint64_t a5)
{
  void *result;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::StateParameterData>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (a2[1] <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v11));
      ++v12;
      v11 += 32;
    }
    while (a5 != v12);
  }
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::StateParameterData>::deinit(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::StateParameterData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::StateParameterData>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::StateParameterData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 32 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(_QWORD *a1)
{
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a1);
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(_QWORD *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a1);
  v8 = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = a1[1];
    if (v9)
    {
      v10 = (char *)a1[2];
      v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 32 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::StateParameterBlackboardAsset::~StateParameterBlackboardAsset(re::StateParameterBlackboardAsset *this)
{
  re::StateParameterBlackboardAsset::~StateParameterBlackboardAsset(this);
  JUMPOUT(0x2276933B8);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_24ED314B0;
  v2 = (_QWORD *)((char *)this + 8);
  re::StateParameterBlackboardAsset::deinit(this);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)this + 10);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)this + 7);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)this + 4);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v2);
}

void re::internal::defaultConstruct<re::MeshDeformationIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::MeshDeformationIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshDeformationIndex>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &str_110;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshDeformationIndex>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t *re::allocInfo_MeshDeformationAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDB50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDB50))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDCA0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FDCB0 = 0;
    qword_2540FDCC0 = 0;
    qword_2540FDCC8 = 0xFFFFFFFFLL;
    qword_2540FDCA0 = (uint64_t)&off_24ED7DAA8;
    qword_2540FDCD0 = (uint64_t)"MeshDeformationAsset";
    dword_2540FDCD8 = 0;
    xmmword_2540FDCE0 = 0u;
    unk_2540FDCF0 = 0u;
    xmmword_2540FDD00 = 0u;
    qword_2540FDD10 = 0;
    __cxa_guard_release(&qword_2540FDB50);
  }
  return &qword_2540FDCA0;
}

void re::initInfo_MeshDeformationAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0xC334BB550BDDC75ALL;
  v11[1] = "MeshDeformationAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FDB58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FDB58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::DeformationStackDefinition>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "stackDefinitions";
      *(_QWORD *)(v7 + 16) = &qword_2540FDBA8;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_2540FDB98 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::MeshDeformationIndex>>::get();
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v8 + 32))(v8, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "meshDeformations";
      *(_QWORD *)(v9 + 16) = qword_2540FDBE8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x2800000002;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FDBA0 = v9;
      __cxa_guard_release(&qword_2540FDB58);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FDB98;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshDeformationAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshDeformationAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshDeformationAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshDeformationAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void re::IntrospectionInfo<re::DynamicArray<re::DeformationStackDefinition>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FDB68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDB68))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FDBA8);
    qword_2540FDBA8 = (uint64_t)&off_24ED31638;
    __cxa_guard_release(&qword_2540FDB68);
  }
  if ((_MergedGlobals_69 & 1) == 0)
  {
    v1 = re::introspect_DeformationStackDefinition((re::IntrospectionBase **)1);
    if ((_MergedGlobals_69 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_69 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDBA8, 0);
      qword_2540FDBB8 = 0x2800000003;
      dword_2540FDBC0 = v3;
      word_2540FDBC4 = 0;
      *(_QWORD *)&xmmword_2540FDBC8 = 0;
      *((_QWORD *)&xmmword_2540FDBC8 + 1) = 0xFFFFFFFFLL;
      qword_2540FDBD8 = v2;
      unk_2540FDBE0 = 0;
      qword_2540FDBA8 = (uint64_t)&off_24ED31638;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2540FDBA8, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2540FDBC8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshDeformationIndex>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  const char *v25;
  __int128 v26;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FDB70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDB70))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_2540FDBE8);
    qword_2540FDBE8[0] = (uint64_t)&off_24ED316D0;
    __cxa_guard_release(&qword_2540FDB70);
  }
  if ((byte_2540FDB31 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FDB48;
    if (qword_2540FDB48)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FDB38);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDB38))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDC28, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2540FDC38 = 0;
      *(_QWORD *)&xmmword_2540FDC48 = 0;
      *((_QWORD *)&xmmword_2540FDC48 + 1) = 0xFFFFFFFFLL;
      qword_2540FDC28 = (uint64_t)&off_24ED7DAA8;
      qword_2540FDC58 = (uint64_t)"MeshDeformationIndex";
      dword_2540FDC60 = 0;
      xmmword_2540FDC68 = 0u;
      *(_OWORD *)&qword_2540FDC78 = 0u;
      xmmword_2540FDC88 = 0u;
      qword_2540FDC98 = 0;
      __cxa_guard_release(&qword_2540FDB38);
    }
    qword_2540FDB48 = (uint64_t)&qword_2540FDC28;
    *(_QWORD *)&v26 = 0xC334BB550CBA431ELL;
    *((_QWORD *)&v26 + 1) = "MeshDeformationIndex";
    re::StringID::destroyString((re::StringID *)&v26);
    xmmword_2540FDC48 = v24;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FDB40);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FDB40);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "meshIdentifier";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_2540FDB88 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::introspect_size_t((re *)1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "deformationIndex";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x2800000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_2540FDB90 = v20;
        __cxa_guard_release(&qword_2540FDB40);
      }
    }
    qword_2540FDC38 = 0x3000000008;
    v1 = &qword_2540FDC28;
    dword_2540FDC40 = 8;
    word_2540FDC44 = 0;
    dword_2540FDC60 = 2;
    *(_QWORD *)&xmmword_2540FDC68 = &qword_2540FDB88;
    *((_QWORD *)&xmmword_2540FDC68 + 1) = re::internal::defaultConstruct<re::MeshDeformationIndex>;
    qword_2540FDC78 = (uint64_t)re::internal::defaultDestruct<re::MeshDeformationIndex>;
    unk_2540FDC80 = 0;
    *(_QWORD *)&xmmword_2540FDC88 = 0;
    *((_QWORD *)&xmmword_2540FDC88 + 1) = re::internal::defaultConstructV2<re::MeshDeformationIndex>;
    qword_2540FDC98 = (uint64_t)re::internal::defaultDestructV2<re::MeshDeformationIndex>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FDC28, v3);
    v26 = v24;
    if ((byte_2540FDB31 & 1) == 0)
    {
LABEL_7:
      byte_2540FDB31 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_2540FDBE8, 0);
      unk_2540FDBF8 = 0x2800000003;
      unk_2540FDC00 = v5;
      unk_2540FDC04 = 0;
      *(_QWORD *)&xmmword_2540FDC08 = 0;
      *((_QWORD *)&xmmword_2540FDC08 + 1) = 0xFFFFFFFFLL;
      unk_2540FDC18 = v1;
      unk_2540FDC20 = 0;
      qword_2540FDBE8[0] = (uint64_t)&off_24ED316D0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)qword_2540FDBE8, (const re::IntrospectionBase *)&v24);
      if ((BYTE8(v24) & 1) != 0)
        v8 = v25;
      else
        v8 = (char *)&v24 + 9;
      if ((_QWORD)v24 && (BYTE8(v24) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v22 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v21 + 1) = v10;
      }
      else
      {
        v26 = v22;
        re::TypeBuilder::beginListType((uint64_t)&v24, v23, 1, 0x28uLL, 8uLL, &v26);
        re::TypeBuilder::setConstructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v24, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v24, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v24, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v24, v11);
      }
      xmmword_2540FDC08 = v21;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::MeshDeformationAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshDeformationAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::DeformationStackDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MeshDeformationAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshDeformationAsset>(uint64_t a1)
{
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::DeformationStackDefinition>::deinit(a1);
}

uint64_t *re::MeshDeformationAsset::assetType(re::MeshDeformationAsset *this)
{
  unsigned __int8 v1;

  {
    re::MeshDeformationAsset::assetType(void)::type = (uint64_t)"MeshDeformation";
    qword_255827580 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::MeshDeformationAsset::assetType(void)::type);
  }
  return &re::MeshDeformationAsset::assetType(void)::type;
}

_QWORD *re::MeshDeformationAsset::init(re::MeshDeformationAsset *this, re::Allocator *a2)
{
  uint64_t *v2;
  char *v4;
  _QWORD *result;

  v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(_QWORD *)this = v2;
  re::DynamicArray<re::DeformationStackDefinition>::setCapacity(this, 0);
  *((_QWORD *)this + 5) = v2;
  v4 = (char *)this + 40;
  ++*((_DWORD *)v4 - 4);
  result = re::DynamicArray<re::MeshDeformationIndex>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  return result;
}

void re::MeshDeformationAsset::init(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t *v4;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const StringID *v12;
  StringID v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 440))
  {
    v4 = a4;
    if (a3)
      v7 = a3;
    else
      v7 = &re::MeshDeformationAsset::init(re::MeshAsset const&,re::DefaultDeformationOptions const*,re::Allocator *)::kDefaultDeformationOptions;
    if (!a4)
    {
    }
    *(_QWORD *)a1 = v4;
    re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)a1, 0);
    *(_QWORD *)(a1 + 40) = v4;
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)(a1 + 40), 0);
    ++*(_DWORD *)(a1 + 64);
    if (*(_BYTE *)(a2 + 952))
      v8 = (uint64_t *)(a2 + 416);
    else
      v8 = (uint64_t *)(a2 + 24);
    v9 = *v8;
    if (*v8)
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(a2 + 416);
        if (v11 <= v10)
        {
          v14 = 0;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v23 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v15 = 136315906;
          v16 = "operator[]";
          v17 = 1024;
          v18 = 797;
          v19 = 2048;
          v20 = v10;
          v21 = 2048;
          v22 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v12 = (const StringID *)re::DataArray<re::MeshModel>::tryGet(*(_QWORD *)(a2 + 440) + 8, *(_QWORD *)(*(_QWORD *)(a2 + 432) + 8 * v10));
        re::StringID::StringID((re::StringID *)&v13, v12);
        re::MeshDeformationAsset::addDefaultModelStackDefinitions((_anonymous_namespace_ *)a1, (const char *)v12, 2, &v13, (uint64_t)v7);
        re::StringID::destroyString((re::StringID *)&v13);
        ++v10;
      }
      while (v9 != v10);
    }
  }
}

{
  uint64_t *v4;
  void *v7;
  uint64_t v8;
  StringID *v9;
  uint64_t v10;
  StringID v11;

  v4 = a4;
  if (a3)
    v7 = a3;
  else
    v7 = &re::MeshDeformationAsset::init(re::MeshAssetData const&,re::DefaultDeformationOptions const*,re::Allocator *)::kDefaultDeformationOptions;
  if (!a4)
  {
  }
  *(_QWORD *)a1 = v4;
  re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 40) = v4;
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)(a1 + 40), 0);
  ++*(_DWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(StringID **)(a2 + 32);
    v10 = v8 << 9;
    do
    {
      re::StringID::StringID((re::StringID *)&v11, v9);
      re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshAssetModel>((_anonymous_namespace_ *)a1, v9, 2, &v11, (uint64_t)v7);
      re::StringID::destroyString((re::StringID *)&v11);
      v9 += 32;
      v10 -= 512;
    }
    while (v10);
  }
}

void re::MeshDeformationAsset::addDefaultModelStackDefinitions(_anonymous_namespace_ *a1, const char *a2, char a3, StringID *a4, uint64_t a5)
{
  StringID v9;

  re::StringID::StringID((re::StringID *)&v9, a4);
  re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshModel>(a1, a2, a3, &v9, a5);
  re::StringID::destroyString((re::StringID *)&v9);
}

_anonymous_namespace_ *re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshAssetModel>(_anonymous_namespace_ *result, _QWORD *a2, char a3, const StringID *a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  const char **v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  _anonymous_namespace_ *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _anonymous_namespace_ *v57;
  unint64_t v58;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[28];
  __int16 v67;
  _BYTE v68[10];
  uint64_t v69;
  _BYTE v70[28];
  __int16 v71;
  uint64_t *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = a2[26];
  if (v6)
  {
    v8 = a2;
    v57 = result;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v11 = 0;
    v58 = v6;
    v59 = v8;
    do
    {
      v12 = v8[26];
      if (v12 <= v11)
      {
        *(_QWORD *)v70 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 797;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v11;
        v67 = 2048;
        *(_QWORD *)v68 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_146:
        v65 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 468;
        *(_WORD *)&v70[18] = 2048;
        *(_QWORD *)&v70[20] = v11;
        v71 = 2048;
        v72 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        *(_QWORD *)v70 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v5;
        v67 = 2048;
        *(_QWORD *)v68 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        *(_QWORD *)v70 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        v51 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v5;
        v67 = 2048;
        *(_QWORD *)v68 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        v65 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 797;
        *(_WORD *)&v70[18] = 2048;
        *(_QWORD *)&v70[20] = v51;
        v71 = 2048;
        v72 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        v65 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 797;
        *(_WORD *)&v70[18] = 2048;
        *(_QWORD *)&v70[20] = v51;
        v71 = 2048;
        v72 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v13 = v8[28];
      *(_QWORD *)&v68[2] = 0;
      memset(v66, 0, sizeof(v66));
      if (*(_BYTE *)a5 && (v14 = v8[16]) != 0)
      {
        v15 = (unsigned __int16 *)(v8[18] + 48);
        v16 = 56 * v14;
        while (1)
        {
          v17 = *v15;
          v15 += 28;
          if (v11 == v17)
            break;
          v16 -= 56;
          if (!v16)
            goto LABEL_9;
        }
        memset(v70, 0, 24);
        **(_DWORD **)&v70[16] = *(_DWORD *)(a5 + 8);
        *(_QWORD *)&v73 = 0x1954B86F1FEF5A4;
        *((_QWORD *)&v73 + 1) = "Blend Shape";
        v74 = *(_OWORD *)v70;
        v29 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v29;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v10 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v10 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
        v18 = 1;
      }
      else
      {
LABEL_9:
        v18 = 0;
      }
      if (*(_BYTE *)(a5 + 6))
      {
        memset(v70, 0, 24);
        **(_BYTE **)&v70[16] = *(_BYTE *)(a5 + 17);
        *(_QWORD *)&v73 = 0x70EBDC9CD6B5D4E4;
        *((_QWORD *)&v73 + 1) = "OffsetsDeformer";
        v74 = *(_OWORD *)v70;
        v19 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v19;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v10 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v10 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
        v18 = 1;
      }
      v20 = 0;
      v21 = v13 + (v11 << 8);
      if (*(_BYTE *)(a5 + 1) && v8[21] > v11)
      {
        if (*(_DWORD *)(v8[23] + 144 * v11) == -1)
        {
          v20 = 0;
        }
        else
        {
          v61 = v13;
          v22 = *(_BYTE *)(a5 + 13);
          v23 = *(_QWORD *)(v21 + 16);
          v60 = *(_BYTE *)(a5 + 12);
          if (v23)
          {
            v24 = 0;
            v25 = 0;
            v26 = (const char **)(*(_QWORD *)(v21 + 32) + 16);
            v27 = 80 * v23;
            do
            {
              if (((unint64_t)*(v26 - 1) & 1) != 0)
                v28 = *v26;
              else
                v28 = (char *)v26 - 7;
              v10 = strcmp(v28, "vertexAdjacencies");
              if ((_DWORD)v10)
              {
                v10 = strcmp(v28, "accumulatedVertexValence");
                v25 |= (_DWORD)v10 == 0;
              }
              else
              {
                v24 = 1;
              }
              v26 += 10;
              v27 -= 80;
            }
            while (v27);
          }
          else
          {
            v25 = 0;
            v24 = 0;
          }
          v30 = v24 & v25;
          if ((v24 & v25 & 1) != 0)
            v31 = v22;
          else
            v31 = 1;
          memset(v70, 0, 24);
          v32 = *(_QWORD *)&v70[16];
          **(_BYTE **)&v70[16] = v60;
          *(_BYTE *)(v32 + 1) = v31;
          *(_QWORD *)&v73 = 0x4550755B7A2;
          *((_QWORD *)&v73 + 1) = "Skinning";
          v74 = *(_OWORD *)v70;
          v33 = *(_QWORD *)&v70[16];
          memset(v70, 0, 24);
          *(_QWORD *)&v75 = v33;
          re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
          v6 = v58;
          v8 = v59;
          v13 = v61;
          if ((_QWORD)v74)
          {
            if (*((_QWORD *)&v74 + 1))
            {
              (*(void (**)(void))(*(_QWORD *)v74 + 40))();
              *((_QWORD *)&v74 + 1) = 0;
              *(_QWORD *)&v75 = 0;
            }
            *(_QWORD *)&v74 = 0;
          }
          re::StringID::destroyString((re::StringID *)&v73);
          v10 = *(_QWORD *)v70;
          if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
            v10 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
          v18 |= v30;
          v20 = 1;
        }
      }
      if (*(_BYTE *)(a5 + 5))
      {
        *(_QWORD *)&v73 = a5 + 16;
        *((_QWORD *)&v73 + 1) = 1;
        memset(v70, 0, 24);
        re::FixedArray<unsigned char>::copy(v70, (uint64_t)&v73);
        *(_QWORD *)&v73 = 0x5ADE39698BF7F040;
        *((_QWORD *)&v73 + 1) = "SmoothDeformer";
        v74 = *(_OWORD *)v70;
        v34 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v34;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v10 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v10 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
        v20 = 1;
        v18 = 1;
      }
      if (*(_BYTE *)(a5 + 2) && (v18 & 1) != 0)
      {
        memset(v70, 0, 24);
        **(_BYTE **)&v70[16] = *(_BYTE *)(a5 + 14);
        *(_QWORD *)&v73 = 0xABCEC87F22A13454;
        *((_QWORD *)&v73 + 1) = "Renormalization";
        v74 = *(_OWORD *)v70;
        v35 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v35;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v10 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v10 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
      }
      if (*(_BYTE *)(a5 + 3) && *(_DWORD *)(v13 + (v11 << 8) + 64))
      {
        *(_QWORD *)&v73 = 0xA6B838C1BF1BB512;
        *((_QWORD *)&v73 + 1) = "OpenSubdivViewIndependentComputeStep";
        *(_QWORD *)&v75 = 0;
        v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        *(_QWORD *)&v73 = 0xC6F7B7A81D0D03C8;
        *((_QWORD *)&v73 + 1) = "OpenSubdivViewDependentComputeStep";
        *(_QWORD *)&v75 = 0;
        v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
      v36 = v20 ^ 1;
      if (!*(_BYTE *)(a5 + 4))
        v36 = 1;
      if ((v36 & 1) == 0)
      {
        memset(v70, 0, 24);
        **(_BYTE **)&v70[16] = *(_BYTE *)(a5 + 15);
        *(_QWORD *)&v73 = 0x32458CCC0A585AB0;
        *((_QWORD *)&v73 + 1) = "Bounding Box Calculation";
        v74 = *(_OWORD *)v70;
        v37 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v37;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          (*(void (**)(void))(**(_QWORD **)v70 + 40))();
      }
      v38 = *(_QWORD *)(v21 + 16);
      if (v38)
      {
        v39 = (_QWORD *)(*(_QWORD *)(v21 + 32) + 16);
        v40 = 80 * v38;
        while (1)
        {
          v41 = (*(v39 - 1) & 1) != 0 ? (const char *)*v39 : (char *)v39 - 7;
          if (!strcmp(v41, "simplifiedVertexPositions"))
            break;
          v39 += 10;
          v40 -= 80;
          if (!v40)
            goto LABEL_105;
        }
        *(_QWORD *)&v73 = 0x906B1D4E64D3F318;
        *((_QWORD *)&v73 + 1) = "PrepareSimplifiedMeshBuffer";
        *(_QWORD *)&v75 = 0;
        v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
LABEL_105:
      if (*(_BYTE *)(a5 + 7))
      {
        v42 = *(_QWORD *)(v21 + 16);
        if (v42)
        {
          v43 = (_QWORD *)(*(_QWORD *)(v21 + 32) + 16);
          v44 = 80 * v42;
          while (1)
          {
            v45 = (*(v43 - 1) & 1) != 0 ? (const char *)*v43 : (char *)v43 - 7;
            v46 = (_anonymous_namespace_ *)strcmp(v45, "tension");
            if (!(_DWORD)v46)
              break;
            v43 += 10;
            v44 -= 80;
            if (!v44)
              goto LABEL_121;
          }
          *(_QWORD *)&v73 = a5 + 18;
          *((_QWORD *)&v73 + 1) = 1;
          memset(v70, 0, 24);
          re::FixedArray<unsigned char>::copy(v70, (uint64_t)&v73);
          *(_QWORD *)&v73 = 0x241C51C064;
          *((_QWORD *)&v73 + 1) = "Tension";
          v74 = *(_OWORD *)v70;
          v47 = *(_QWORD *)&v70[16];
          memset(v70, 0, 24);
          *(_QWORD *)&v75 = v47;
          re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
          if ((_QWORD)v74)
          {
            if (*((_QWORD *)&v74 + 1))
            {
              (*(void (**)(void))(*(_QWORD *)v74 + 40))();
              *((_QWORD *)&v74 + 1) = 0;
              *(_QWORD *)&v75 = 0;
            }
            *(_QWORD *)&v74 = 0;
          }
          re::StringID::destroyString((re::StringID *)&v73);
          if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
            (*(void (**)(void))(**(_QWORD **)v70 + 40))();
        }
      }
LABEL_121:
      v5 = v63;
      if ((unint64_t)v63 <= v11)
        goto LABEL_146;
      v48 = v64;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v64 + 40 * v11, (uint64_t)v66);
      v10 = re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v66);
      ++v11;
    }
    while (v11 != v6);
    if (v6 >= 2)
    {
      v49 = (uint64_t *)(v48 + 72);
      v50 = 1;
      while (1)
      {
        if (v5 == (uint64_t *)v50)
          goto LABEL_147;
        if (!re::DynamicArray<re::DeformationDefinition>::operator==(v48, *(v49 - 2), *v49))
          break;
        ++v50;
        v49 += 5;
        if (v6 == v50)
          goto LABEL_128;
      }
      v51 = 0;
      while ((uint64_t *)v51 != v5)
      {
        v9 = *(uint64_t **)(v48 + 40 * v51 + 16);
        if (v9)
        {
          v52 = (_QWORD *)*((_QWORD *)v57 + 2);
          if (v52)
          {
            v8 = 0;
            v53 = *((_QWORD *)v57 + 4);
            v54 = *(_QWORD *)(v48 + 40 * v51 + 32);
            while (!re::DynamicArray<re::DeformationDefinition>::operator==(v53, (uint64_t)v9, v54))
            {
              v8 = (_QWORD *)((char *)v8 + 1);
              v53 += 40;
              if (v52 == v8)
                goto LABEL_137;
            }
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            v9 = (uint64_t *)v59[26];
            if ((unint64_t)v9 <= v51)
              goto LABEL_150;
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(v59[28] + (v51 << 8) + 72));
            v69 = (uint64_t)v8;
          }
          else
          {
LABEL_137:
            re::DynamicArray<re::DeformationStackDefinition>::add(v57, v48 + 40 * v51);
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            v8 = (_QWORD *)v59[26];
            if ((unint64_t)v8 <= v51)
              goto LABEL_149;
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(v59[28] + (v51 << 8) + 72));
            v69 = *((_QWORD *)v57 + 2) - 1;
          }
          re::DynamicArray<re::MeshDeformationIndex>::add((_QWORD *)v57 + 5, (uint64_t)v66);
          re::StringID::destroyString((re::StringID *)&v66[24]);
          re::StringID::destroyString((re::StringID *)&v66[8]);
          v6 = v58;
        }
        if (++v51 == v6)
          return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
      }
      goto LABEL_148;
    }
LABEL_128:
    if (*(_QWORD *)(v48 + 16))
    {
      re::DynamicArray<re::DeformationStackDefinition>::add(v57, v48);
      LOBYTE(v73) = a3;
      re::StringID::StringID((re::StringID *)((char *)&v73 + 8), a4);
      *((_QWORD *)&v74 + 1) = 0;
      *(_QWORD *)&v75 = &str_110;
      *((_QWORD *)&v75 + 1) = *((_QWORD *)v57 + 2) - 1;
      re::DynamicArray<re::MeshDeformationIndex>::add((_QWORD *)v57 + 5, (uint64_t)&v73);
      re::StringID::destroyString((re::StringID *)((char *)&v74 + 8));
      re::StringID::destroyString((re::StringID *)((char *)&v73 + 8));
    }
    return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
  }
  return result;
}

uint64_t re::DynamicArray<re::DeformationStackDefinition>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          re::DynamicArray<re::DeformationDefinition>::deinit(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshDeformationIndex>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::StringID *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 48 * v4;
        v6 = (re::StringID *)(v3 + 24);
        do
        {
          re::StringID::destroyString(v6);
          re::StringID::destroyString((re::StringID *)((char *)v6 - 16));
          v6 = (re::StringID *)((char *)v6 + 48);
          v5 -= 48;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::MeshDeformationAsset::addDefaultModelStackDefinitionsForAllInstances(re::MeshDeformationAsset *this, const re::MeshAsset *a2)
{
  uint64_t v3;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  StringID v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a2 + 55))
  {
    v3 = *((_QWORD *)a2 + 47);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v6 = *((_QWORD *)a2 + 47);
        if (v6 <= i)
        {
          v10 = 0;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v19 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v11 = 136315906;
          v12 = "operator[]";
          v13 = 1024;
          v14 = 797;
          v15 = 2048;
          v16 = i;
          v17 = 2048;
          v18 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v7 = re::DataArray<re::MeshInstance>::tryGet(*((_QWORD *)a2 + 55) + 72, *(_QWORD *)(*((_QWORD *)a2 + 49) + 8 * i));
        v8 = (const char *)re::DataArray<re::MeshModel>::tryGet(*((_QWORD *)a2 + 55) + 8, *(_QWORD *)(v7 + 16));
        re::StringID::StringID((re::StringID *)&v9, (const StringID *)v7);
        re::MeshDeformationAsset::addDefaultModelStackDefinitions(this, v8, 1, &v9, (uint64_t)&re::MeshDeformationAsset::addDefaultModelStackDefinitionsForAllInstances(re::MeshAsset const&)::kDefaultDeformationOptions);
        re::StringID::destroyString((re::StringID *)&v9);
      }
    }
  }
}

uint64_t re::MeshDeformationAsset::addDefaultModelStackDefinitionForModel(re::MeshDeformationAsset *this, const re::MeshAsset *a2, unint64_t a3)
{
  uint64_t v3;
  const StringID *v5;
  StringID v7;

  if (*((_QWORD *)a2 + 52) <= a3)
    return 0;
  v3 = *((_QWORD *)a2 + 55);
  if (!v3)
    return 0;
  v5 = (const StringID *)re::DataArray<re::MeshModel>::tryGet(v3 + 8, *(_QWORD *)(*((_QWORD *)a2 + 54) + 8 * a3));
  re::StringID::StringID((re::StringID *)&v7, v5);
  re::MeshDeformationAsset::addDefaultModelStackDefinitions(this, (const char *)v5, 2, &v7, (uint64_t)&re::MeshDeformationAsset::addDefaultModelStackDefinitionForModel(re::MeshAsset const&,unsigned long)::kDefaultDeformationOptions);
  re::StringID::destroyString((re::StringID *)&v7);
  return 1;
}

uint64_t re::MeshDeformationAsset::addDefaultModelStackDefinitionForInstance(re::MeshDeformationAsset *this, const re::MeshAsset *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  StringID v10;

  if (*((_QWORD *)a2 + 47) <= a3)
    return 0;
  v4 = *((_QWORD *)a2 + 55);
  if (!v4)
    return 0;
  v6 = re::DataArray<re::MeshInstance>::tryGet(v4 + 72, *(_QWORD *)(*((_QWORD *)a2 + 49) + 8 * a3));
  v7 = (const char *)re::DataArray<re::MeshModel>::tryGet(*((_QWORD *)a2 + 55) + 8, *(_QWORD *)(v6 + 16));
  re::StringID::StringID((re::StringID *)&v10, (const StringID *)v6);
  v8 = 1;
  re::MeshDeformationAsset::addDefaultModelStackDefinitions(this, v7, 1, &v10, (uint64_t)&re::MeshDeformationAsset::addDefaultModelStackDefinitionForInstance(re::MeshAsset const&,unsigned long)::kDefaultDeformationOptions);
  re::StringID::destroyString((re::StringID *)&v10);
  return v8;
}

_anonymous_namespace_ *re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshModel>(_anonymous_namespace_ *result, const char *a2, char a3, const StringID *a4, uint64_t a5)
{
  const char *v5;
  const char *v6;
  unint64_t v7;
  const char *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  const char **v25;
  const char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char **v34;
  uint64_t v35;
  uint64_t v36;
  const char **v37;
  uint64_t v38;
  _anonymous_namespace_ *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  _anonymous_namespace_ *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char v55;
  char v56;
  uint64_t v57;
  const char *v58;
  _anonymous_namespace_ *v59;
  unint64_t v60;
  _anonymous_namespace_ *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[28];
  __int16 v67;
  _BYTE v68[10];
  uint64_t v69;
  _BYTE v70[28];
  __int16 v71;
  uint64_t *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)a2 + 7);
  if (v7)
  {
    v9 = a2;
    v59 = result;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v60 = v7;
    v12 = 0;
    v58 = v9;
    do
    {
      v13 = *((_QWORD *)v9 + 7);
      if (v13 <= v12)
      {
        *(_QWORD *)v70 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 476;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v12;
        v67 = 2048;
        *(_QWORD *)v68 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        v65 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 468;
        *(_WORD *)&v70[18] = 2048;
        *(_QWORD *)&v70[20] = v12;
        v71 = 2048;
        v72 = (uint64_t *)v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        *(_QWORD *)v70 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v6;
        v67 = 2048;
        *(_QWORD *)v68 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_139:
        *(_QWORD *)v70 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v6;
        v67 = 2048;
        *(_QWORD *)v68 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_140:
        v65 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 476;
        *(_WORD *)&v70[18] = 2048;
        *(_QWORD *)&v70[20] = v5;
        v71 = 2048;
        v72 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        v65 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(_QWORD *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 476;
        *(_WORD *)&v70[18] = 2048;
        *(_QWORD *)&v70[20] = v5;
        v71 = 2048;
        v72 = (uint64_t *)v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v14 = *((_QWORD *)v9 + 8);
      *(_QWORD *)&v68[2] = 0;
      memset(v66, 0, sizeof(v66));
      if (*(_BYTE *)a5
        && (v15 = *((_QWORD *)v9 + 12)) != 0
        && *(_QWORD *)(v15 + 40) > v12
        && *(_DWORD *)(*(_QWORD *)(v15 + 48) + 4 * v12) != -1)
      {
        memset(v70, 0, 24);
        **(_DWORD **)&v70[16] = *(_DWORD *)(a5 + 8);
        *(_QWORD *)&v73 = 0x1954B86F1FEF5A4;
        *((_QWORD *)&v73 + 1) = "Blend Shape";
        v74 = *(_OWORD *)v70;
        v16 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v16;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v11 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v11 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
        v17 = 1;
      }
      else
      {
        v17 = 0;
      }
      if (*(_BYTE *)(a5 + 6))
      {
        memset(v70, 0, 24);
        **(_BYTE **)&v70[16] = *(_BYTE *)(a5 + 17);
        *(_QWORD *)&v73 = 0x70EBDC9CD6B5D4E4;
        *((_QWORD *)&v73 + 1) = "OffsetsDeformer";
        v74 = *(_OWORD *)v70;
        v18 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v18;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v11 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v11 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
        v17 = 1;
      }
      if (*(_BYTE *)(a5 + 1)
        && (v19 = *((_QWORD *)v9 + 22)) != 0
        && *(_QWORD *)(v19 + 8) > v12
        && *(_DWORD *)(*(_QWORD *)(v19 + 16) + 72 * v12 + 4) != -1)
      {
        v55 = *(_BYTE *)(a5 + 13);
        v56 = *(_BYTE *)(a5 + 12);
        v57 = v14;
        v20 = v14 + 560 * v12;
        v21 = *(_QWORD *)(v20 + 344);
        if (v21)
        {
          v22 = 0;
          v23 = 0;
          v24 = 16 * v21;
          v25 = (const char **)(*(_QWORD *)(v20 + 352) + 8);
          do
          {
            v26 = *v25;
            v11 = strcmp(*v25, "vertexAdjacencies");
            if ((_DWORD)v11)
            {
              v11 = strcmp(v26, "accumulatedVertexValence");
              v23 |= (_DWORD)v11 == 0;
            }
            else
            {
              v22 = 1;
            }
            v25 += 2;
            v24 -= 16;
          }
          while (v24);
        }
        else
        {
          v23 = 0;
          v22 = 0;
        }
        v42 = v22 & v23;
        if ((v22 & v23 & 1) != 0)
          v43 = v55;
        else
          v43 = 1;
        memset(v70, 0, 24);
        v44 = *(_QWORD *)&v70[16];
        **(_BYTE **)&v70[16] = v56;
        *(_BYTE *)(v44 + 1) = v43;
        *(_QWORD *)&v73 = 0x4550755B7A2;
        *((_QWORD *)&v73 + 1) = "Skinning";
        v74 = *(_OWORD *)v70;
        v45 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v45;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        v14 = v57;
        v9 = v58;
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v11 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v11 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
        v17 |= v42;
        v27 = 1;
      }
      else
      {
        v27 = 0;
      }
      if (*(_BYTE *)(a5 + 5))
      {
        *(_QWORD *)&v73 = a5 + 16;
        *((_QWORD *)&v73 + 1) = 1;
        memset(v70, 0, 24);
        re::FixedArray<unsigned char>::copy(v70, (uint64_t)&v73);
        *(_QWORD *)&v73 = 0x5ADE39698BF7F040;
        *((_QWORD *)&v73 + 1) = "SmoothDeformer";
        v74 = *(_OWORD *)v70;
        v28 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v28;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v11 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v11 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
        v27 = 1;
        v17 = 1;
      }
      if (*(_BYTE *)(a5 + 2) && (v17 & 1) != 0)
      {
        memset(v70, 0, 24);
        **(_BYTE **)&v70[16] = *(_BYTE *)(a5 + 14);
        *(_QWORD *)&v73 = 0xABCEC87F22A13454;
        *((_QWORD *)&v73 + 1) = "Renormalization";
        v74 = *(_OWORD *)v70;
        v29 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v29;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        v11 = *(_QWORD *)v70;
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          v11 = (*(uint64_t (**)(void))(**(_QWORD **)v70 + 40))();
      }
      v5 = "tension";
      if (*(_BYTE *)(a5 + 3) && *(_DWORD *)(v14 + 560 * v12 + 532))
      {
        *(_QWORD *)&v73 = 0xA6B838C1BF1BB512;
        *((_QWORD *)&v73 + 1) = "OpenSubdivViewIndependentComputeStep";
        *(_QWORD *)&v75 = 0;
        v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        *(_QWORD *)&v73 = 0xC6F7B7A81D0D03C8;
        *((_QWORD *)&v73 + 1) = "OpenSubdivViewDependentComputeStep";
        *(_QWORD *)&v75 = 0;
        v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
      v30 = v27 ^ 1;
      if (!*(_BYTE *)(a5 + 4))
        v30 = 1;
      if ((v30 & 1) == 0)
      {
        memset(v70, 0, 24);
        **(_BYTE **)&v70[16] = *(_BYTE *)(a5 + 15);
        *(_QWORD *)&v73 = 0x32458CCC0A585AB0;
        *((_QWORD *)&v73 + 1) = "Bounding Box Calculation";
        v74 = *(_OWORD *)v70;
        v31 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        *(_QWORD *)&v75 = v31;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
          (*(void (**)(void))(**(_QWORD **)v70 + 40))();
      }
      v32 = v14 + 560 * v12;
      v33 = *(_QWORD *)(v32 + 344);
      if (v33)
      {
        v34 = (const char **)(*(_QWORD *)(v32 + 352) + 8);
        v35 = 16 * v33;
        while (strcmp(*v34, "simplifiedVertexPositions"))
        {
          v34 += 2;
          v35 -= 16;
          if (!v35)
            goto LABEL_87;
        }
        *(_QWORD *)&v73 = 0x906B1D4E64D3F318;
        *((_QWORD *)&v73 + 1) = "PrepareSimplifiedMeshBuffer";
        *(_QWORD *)&v75 = 0;
        v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((_QWORD)v74)
        {
          if (*((_QWORD *)&v74 + 1))
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            *((_QWORD *)&v74 + 1) = 0;
            *(_QWORD *)&v75 = 0;
          }
          *(_QWORD *)&v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
LABEL_87:
      if (*(_BYTE *)(a5 + 7))
      {
        v36 = *(_QWORD *)(v32 + 344);
        if (v36)
        {
          v37 = (const char **)(*(_QWORD *)(v32 + 352) + 8);
          v38 = 16 * v36;
          while (1)
          {
            v39 = (_anonymous_namespace_ *)strcmp(*v37, "tension");
            if (!(_DWORD)v39)
              break;
            v37 += 2;
            v38 -= 16;
            if (!v38)
              goto LABEL_100;
          }
          *(_QWORD *)&v73 = a5 + 18;
          *((_QWORD *)&v73 + 1) = 1;
          memset(v70, 0, 24);
          re::FixedArray<unsigned char>::copy(v70, (uint64_t)&v73);
          *(_QWORD *)&v73 = 0x241C51C064;
          *((_QWORD *)&v73 + 1) = "Tension";
          v74 = *(_OWORD *)v70;
          v40 = *(_QWORD *)&v70[16];
          memset(v70, 0, 24);
          *(_QWORD *)&v75 = v40;
          re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
          if ((_QWORD)v74)
          {
            if (*((_QWORD *)&v74 + 1))
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
              *((_QWORD *)&v74 + 1) = 0;
              *(_QWORD *)&v75 = 0;
            }
            *(_QWORD *)&v74 = 0;
          }
          re::StringID::destroyString((re::StringID *)&v73);
          if (*(_QWORD *)v70 && *(_QWORD *)&v70[8])
            (*(void (**)(void))(**(_QWORD **)v70 + 40))();
        }
      }
LABEL_100:
      v6 = v63;
      if ((unint64_t)v63 <= v12)
        goto LABEL_137;
      v41 = v64;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v64 + 40 * v12, (uint64_t)v66);
      v11 = re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v66);
      ++v12;
    }
    while (v12 != v60);
    v46 = (const char *)v60;
    v47 = v59;
    if (v60 >= 2)
    {
      v48 = (uint64_t *)(v41 + 72);
      v49 = 1;
      while (1)
      {
        if (v6 == (const char *)v49)
          goto LABEL_138;
        if (!re::DynamicArray<re::DeformationDefinition>::operator==(v41, *(v48 - 2), *v48))
          break;
        ++v49;
        v48 += 5;
        if (v60 == v49)
          goto LABEL_120;
      }
      v5 = 0;
      v61 = (_anonymous_namespace_ *)((char *)v59 + 40);
      while (v5 != v6)
      {
        v9 = *(const char **)(v41 + 40 * (_QWORD)v5 + 16);
        if (v9)
        {
          v50 = (uint64_t *)*((_QWORD *)v47 + 2);
          if (v50)
          {
            v10 = 0;
            v51 = *((_QWORD *)v59 + 4);
            v52 = *(_QWORD *)(v41 + 40 * (_QWORD)v5 + 32);
            while (!re::DynamicArray<re::DeformationDefinition>::operator==(v51, (uint64_t)v9, v52))
            {
              v10 = (uint64_t *)((char *)v10 + 1);
              v51 += 40;
              if (v50 == v10)
                goto LABEL_129;
            }
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            v9 = (const char *)*((_QWORD *)v58 + 7);
            v46 = (const char *)v60;
            if (v9 <= v5)
              goto LABEL_141;
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(*((_QWORD *)v58 + 8) + 560 * (_QWORD)v5 + 504));
            v69 = (uint64_t)v10;
            re::DynamicArray<re::MeshDeformationIndex>::add(v61, (uint64_t)v66);
            re::StringID::destroyString((re::StringID *)&v66[24]);
            re::StringID::destroyString((re::StringID *)&v66[8]);
            v47 = v59;
          }
          else
          {
LABEL_129:
            v47 = v59;
            re::DynamicArray<re::DeformationStackDefinition>::add(v59, v41 + 40 * (_QWORD)v5);
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            v10 = (uint64_t *)*((_QWORD *)v58 + 7);
            if (v10 <= (uint64_t *)v5)
              goto LABEL_140;
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(*((_QWORD *)v58 + 8) + 560 * (_QWORD)v5 + 504));
            v69 = *((_QWORD *)v59 + 2) - 1;
            re::DynamicArray<re::MeshDeformationIndex>::add(v61, (uint64_t)v66);
            re::StringID::destroyString((re::StringID *)&v66[24]);
            re::StringID::destroyString((re::StringID *)&v66[8]);
            v46 = (const char *)v60;
          }
        }
        if (++v5 == v46)
          return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
      }
      goto LABEL_139;
    }
LABEL_120:
    if (*(_QWORD *)(v41 + 16))
    {
      re::DynamicArray<re::DeformationStackDefinition>::add(v59, v41);
      LOBYTE(v73) = a3;
      re::StringID::StringID((re::StringID *)((char *)&v73 + 8), a4);
      *((_QWORD *)&v74 + 1) = 0;
      *(_QWORD *)&v75 = &str_110;
      *((_QWORD *)&v75 + 1) = *((_QWORD *)v59 + 2) - 1;
      re::DynamicArray<re::MeshDeformationIndex>::add((_QWORD *)v59 + 5, (uint64_t)&v73);
      re::StringID::destroyString((re::StringID *)((char *)&v74 + 8));
      re::StringID::destroyString((re::StringID *)((char *)&v73 + 8));
    }
    return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
  }
  return result;
}

void re::MeshDeformationAsset::forceVertexFrameSkinning(re::MeshDeformationAsset *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return;
  v2 = *((_QWORD *)this + 4);
  v3 = v2 + 40 * v1;
  v23 = v3;
  do
  {
    v4 = *(_QWORD *)(v2 + 16);
    if (!v4)
      goto LABEL_32;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v2 + 32);
    v8 = 16;
    while (1)
    {
      v9 = *(_QWORD *)(v7 + v8 - 16) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && v9 == 0xABCEC87F22A13454)
        break;
      if (v9 == 0x4550755B7A2)
      {
        v11 = *(char **)(v7 + v8 - 8);
        v6 = v11 == "Skinning" || strcmp(v11, "Skinning") == 0;
        goto LABEL_14;
      }
LABEL_13:
      v6 = 0;
LABEL_14:
      ++v5;
      v8 += 40;
      if (v4 == v5)
        goto LABEL_32;
    }
    v10 = *(char **)(v7 + v8 - 8);
    if (v10 != "Renormalization" && strcmp(v10, "Renormalization"))
      goto LABEL_13;
    if (v4 <= v5 - 1)
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *(_QWORD *)(v7 + v8 - 32);
    if (v12 != 2)
    {
      v13 = *(_anonymous_namespace_ **)(v7 + v8 - 40);
      if (v13)
      {
        if (v12)
        {
          v13 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v7 + v8 - 24));
          *(_QWORD *)(v7 + v8 - 32) = 0;
          *(_QWORD *)(v7 + v8 - 24) = 0;
        }
        *(_QWORD *)(v7 + v8 - 40) = 0;
      }
      **(_WORD **)(v7 + v8 - 24) = 0;
      v4 = *(_QWORD *)(v2 + 16);
    }
    *(_BYTE *)(*(_QWORD *)(v7 + v8 - 24) + 1) = 1;
    if (v4 <= v5)
      goto LABEL_35;
    v14 = *(_QWORD *)(v2 + 32);
    if (v4 - 1 > v5)
    {
      v15 = v14 + 40 * v4;
      v16 = (uint64_t *)(v14 + v8);
      v17 = *(_QWORD *)(v15 - 40);
      v18 = *(_QWORD *)(v15 - 32);
      *(_QWORD *)(v15 - 40) = 0;
      *(_QWORD *)(v15 - 32) = &str_110;
      v19 = *(v16 - 1);
      v20 = v17 & 0xFFFFFFFFFFFFFFFELL | *(v16 - 2) & 1;
      *(v16 - 1) = v18;
      *(_QWORD *)&v24 = v20;
      *((_QWORD *)&v24 + 1) = v19;
      *(v16 - 2) = v17;
      re::StringID::destroyString((re::StringID *)&v24);
      re::FixedArray<float>::operator=(v16, (uint64_t *)(v15 - 24));
      v4 = *(_QWORD *)(v2 + 16);
      v14 = *(_QWORD *)(v2 + 32);
    }
    v21 = v14 + 40 * v4;
    v22 = *(_QWORD *)(v21 - 24);
    if (v22)
    {
      if (*(_QWORD *)(v21 - 16))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 40))(v22, *(_QWORD *)(v21 - 8));
        *(_QWORD *)(v21 - 16) = 0;
        *(_QWORD *)(v21 - 8) = 0;
      }
      *(_QWORD *)(v21 - 24) = 0;
    }
    re::StringID::destroyString((re::StringID *)(v21 - 40));
    --*(_QWORD *)(v2 + 16);
    ++*(_DWORD *)(v2 + 24);
    v3 = v23;
LABEL_32:
    v2 += 40;
  }
  while (v2 != v3);
}

void re::MeshDeformationAssetLoader::initializeUsedDeformers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 181))
    {
      v3 = *(_QWORD **)(v2 + 40);
      if (v3)
      {
        v5 = (os_unfair_lock_s *)(a1 + 16);
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
        v6 = *(_QWORD *)(a2 + 16);
        if (v6)
        {
          v7 = *(_QWORD *)(a2 + 32);
          v8 = v7 + 40 * v6;
          do
          {
            v9 = *(_QWORD *)(v7 + 16);
            if (v9)
            {
              v10 = *(_QWORD **)(v7 + 32);
              v11 = 40 * v9;
              do
              {
                v12 = (unsigned __int8 *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v3 + 171), v10);
                if (v12)
                {
                  v13 = v3[5 * *v12 + 81];
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, *v3);
                }
                v10 += 5;
                v11 -= 40;
              }
              while (v11);
            }
            v7 += 40;
          }
          while (v7 != v8);
        }
        os_unfair_lock_unlock(v5);
      }
    }
  }
}

re *re::MeshDeformationAssetLoader::unloadAsset(re::MeshDeformationAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::MeshDeformationAsset>((re *)"unloadAsset", 671, a2);
}

re *re::internal::destroyPersistent<re::MeshDeformationAsset>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a3 + 40);
    re::DynamicArray<re::DeformationStackDefinition>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::MeshDeformationAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  re::MeshDeformationAssetLoader::initializeUsedDeformers(a1, a2);
  return 1;
}

BOOL re::MeshDeformationAssetLoader::isSupportedSourceExtension(re::MeshDeformationAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "remeshdeforms") == 0;
}

uint64_t re::MeshDeformationAssetLoader::introspectionType(re::MeshDeformationAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDB80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDB80))
  {
    qword_2540FDB78 = re::internal::getOrCreateInfo((re::internal *)"MeshDeformationAsset", (uint64_t (*)(re::internal *))re::allocInfo_MeshDeformationAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MeshDeformationAsset, (void (*)(re::IntrospectionBase *))&unk_2540FDB60, 0);
    __cxa_guard_release(&qword_2540FDB80);
  }
  return qword_2540FDB78;
}

void re::MeshDeformationAssetLoader::~MeshDeformationAssetLoader(re::MeshDeformationAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DeformationStackDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::DeformationStackDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationStackDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DeformationStackDefinition>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::DeformationStackDefinition>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::DeformationStackDefinition>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::DeformationStackDefinition>::add(this, (uint64_t)v10);
  re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 40 * *((_QWORD *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationStackDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DeformationStackDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

_QWORD *re::DynamicArray<re::DeformationStackDefinition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DeformationStackDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 40 * v9;
        v11 = v7 + 4;
        do
        {
          *v11 = 0;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *((_DWORD *)v11 - 2) = 0;
          v12 = *(_QWORD *)(v8 + 8);
          *(v11 - 4) = *(_QWORD *)v8;
          *(v11 - 3) = v12;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v13 = *(v11 - 2);
          *(v11 - 2) = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = v13;
          v14 = *v11;
          *v11 = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 2);
          re::DynamicArray<re::DeformationDefinition>::deinit(v8);
          v11 += 5;
          v8 += 40;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::DeformationStackDefinition>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      result = (_QWORD *)re::DynamicArray<re::DeformationDefinition>::deinit(v3[4] + v8);
      ++v9;
      v8 += 40;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::DynamicArray<re::DeformationDefinition>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          v6 = *((_QWORD *)v3 + 2);
          if (v6)
          {
            if (*((_QWORD *)v3 + 3))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)v3 + 4));
              *((_QWORD *)v3 + 3) = 0;
              *((_QWORD *)v3 + 4) = 0;
            }
            *((_QWORD *)v3 + 2) = 0;
          }
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 40);
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::DeformationStackDefinition>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::DeformationStackDefinition>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 40 * v4;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::DeformationStackDefinition>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DeformationStackDefinition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DeformationStackDefinition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::DeformationStackDefinition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::DeformationStackDefinition>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::DeformationStackDefinition>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::DynamicArray<re::DeformationStackDefinition>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 40 * v2;
    do
    {
      result = re::DynamicArray<re::DeformationDefinition>::deinit(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshDeformationIndex>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshDeformationIndex>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshDeformationIndex>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshDeformationIndex>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshDeformationIndex>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshDeformationIndex>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshDeformationIndex>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshDeformationIndex>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[3];

  v10 = 0;
  v11[0] = 0;
  v11[1] = &str_110;
  v12[0] = 0;
  v12[1] = &str_110;
  v12[2] = 0;
  re::DynamicArray<re::MeshDeformationIndex>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 48 * *((_QWORD *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshDeformationIndex>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshDeformationIndex>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

_QWORD *re::DynamicArray<re::MeshDeformationIndex>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  re::StringID *v13;
  re::StringID *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshDeformationIndex>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[6 * v9];
        v11 = v7;
        do
        {
          *(_BYTE *)v11 = *(_BYTE *)v8;
          v13 = (re::StringID *)(v8 + 1);
          v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[2] = v8[2];
          v8[2] = &str_110;
          v8[1] = 0;
          v15 = v8[3];
          v14 = (re::StringID *)(v8 + 3);
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[3] = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v16 = *((_QWORD *)v14 + 2);
          v11[4] = *((_QWORD *)v14 + 1);
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = &str_110;
          v11[5] = v16;
          re::StringID::destroyString(v14);
          re::StringID::destroyString(v13);
          v8 = (_QWORD *)((char *)v14 + 24);
          v11 += 6;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::MeshDeformationIndex>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 48 * a2 + 24;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      ++v9;
      v8 += 48;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 48 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_BYTE *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = &str_110;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = &str_110;
        *(_QWORD *)(v7 + 40) = 0;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::MeshDeformationIndex>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshDeformationIndex>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 48 * v4;
  *(_BYTE *)v5 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = &str_110;
  *(_QWORD *)(v5 + 40) = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::MeshDeformationIndex>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshDeformationIndex>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshDeformationIndex>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshDeformationIndex>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshDeformationIndex>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 48 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::MeshDeformationIndex>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  re::StringID *v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = 48 * v2;
    v4 = (re::StringID *)(*(_QWORD *)(a1 + 32) + 24);
    do
    {
      re::StringID::destroyString(v4);
      re::StringID::destroyString((re::StringID *)((char *)v4 - 16));
      v4 = (re::StringID *)((char *)v4 + 48);
      v3 -= 48;
    }
    while (v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 48 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::FixedArray<re::DeformationStackDefinition>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  *a1 = a2;
  a1[1] = a3;
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40 * a3, 8);
  a1[2] = result;
  if (!result)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v7 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 24) = 0;
      result += 40;
      --v7;
    }
    while (v7);
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

_QWORD *re::DynamicArray<re::DeformationDefinition>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::DeformationDefinition>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 40 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v7 = a2[3];
  v5[2] = a2[2];
  v5[3] = v7;
  a2[2] = 0;
  a2[3] = 0;
  v8 = v5[4];
  v5[4] = a2[4];
  a2[4] = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::DeformationDefinition>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DeformationDefinition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DeformationDefinition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::DeformationDefinition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  re::StringID *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DeformationDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::StringID *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 40 * v9;
        v11 = v7;
        do
        {
          v12 = *(_QWORD *)v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v8 & 1;
          *v11 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = *((_QWORD *)v8 + 1);
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = &str_110;
          v11[2] = 0;
          v11[3] = 0;
          v11[4] = 0;
          v13 = *((_QWORD *)v8 + 3);
          v11[2] = *((_QWORD *)v8 + 2);
          v11[3] = v13;
          *((_QWORD *)v8 + 2) = 0;
          *((_QWORD *)v8 + 3) = 0;
          v14 = v11[4];
          v11[4] = *((_QWORD *)v8 + 4);
          *((_QWORD *)v8 + 4) = v14;
          if (*((_QWORD *)v8 + 2))
            *((_QWORD *)v8 + 2) = 0;
          re::StringID::destroyString(v8);
          v8 = (re::StringID *)((char *)v8 + 40);
          v11 += 5;
          v10 -= 40;
        }
        while (v10);
        v8 = (re::StringID *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::StringID *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

BOOL re::DynamicArray<re::DeformationDefinition>::operator==(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  size_t v7;

  if (*(_QWORD *)(a1 + 16) != a2)
    return 0;
  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 40 * a2;
  while (1)
  {
    result = re::StringID::operator==((_QWORD *)v4, (_QWORD *)a3);
    if (!result)
      break;
    v7 = *(_QWORD *)(v4 + 24);
    if (v7 != *(_QWORD *)(a3 + 24) || memcmp(*(const void **)(v4 + 32), *(const void **)(a3 + 32), v7))
      return 0;
    v4 += 40;
    a3 += 40;
    if (v4 == v5)
      return 1;
  }
  return result;
}

_QWORD *re::FixedArray<re::DeformationStackDefinition>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 40 * v2;
      do
      {
        re::DynamicArray<re::DeformationDefinition>::deinit(v4);
        v4 += 40;
        v5 -= 40;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t *re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType(void)::type = (uint64_t)"AnimationScene";
    qword_255800A28 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType(void)::type;
}

void re::AnimationSceneEntityData::prepareEntityHierarchyForAnimationScene(re::AnimationSceneEntityData *this, re::ecs2::Entity *a2, re::ecs2::Entity *a3)
{
  uint64_t v6;
  _anonymous_namespace_ *v7;
  int v8;
  size_t v9;
  re::KeyValueStore *v10;
  StringID v11;
  char __str[43];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a2 + 21);
  v7 = (_anonymous_namespace_ *)snprintf(__str, 0x2BuLL, "%s%p", "animationsceneintialized::", this);
  if ((int)v7 >= 42)
    v8 = 42;
  else
    v8 = (int)v7;
  v9 = v8;
  *(_QWORD *)&v11.var0 = 0;
  v11.var1 = (char *)&str_110;
  if (!v6)
  {
    v10 = (re::KeyValueStore *)(re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 32);
    goto LABEL_8;
  }
  if (!re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v6 + 88, &v11))
  {
    v10 = (re::KeyValueStore *)(v6 + 32);
LABEL_8:
    __str[0] = 1;
    re::KeyValueStore::addOrReplaceValue<BOOL>(v10, &v11, __str);
  }
  re::StringID::destroyString((re::StringID *)&v11);
}

uint64_t re::KeyValueStore::addOrReplaceValue<BOOL>(re::KeyValueStore *a1, StringID *a2, _BYTE *a3)
{
  uint64_t v6;
  void **v7;
  __objc2_class_ro **v8;
  void *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v13;
  int v14;
  const re::IntrospectionBase *v15;
  void *v16;
  void *v17;

  v6 = (uint64_t)a1 + 8;
  v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = (__objc2_class_ro **)v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v16 = *v7;
      v9 = v16;
      if (v14)
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v15);
        v9 = v16;
      }
    }
    if (v9 == re::introspect<BOOL>(void)::info)
      return re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 56, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v13);
    }
  }
  v17 = re::introspect<BOOL>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v17);
  return re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 56, a2, a3);
}

void `anonymous namespace'::doPrepareEntityHierarchyForAnimationScene(uint64_t this, const re::AnimationSceneEntityData *a2, re::ecs2::Entity *a3)
{
  _QWORD *v5;
  re::ecs2::EntityComponentCollection *v6;
  re::ecs2::NetworkComponent *v7;
  const re::ecs2::Component *v8;
  uint64_t *v9;
  uint64_t *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  const re::AnimationSceneEntityData **v16;
  uint64_t v17;
  const re::AnimationSceneEntityData *v18;
  BOOL v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD *)this;
  v27 = *MEMORY[0x24BDAC8D0];
  v6 = (const re::AnimationSceneEntityData *)((char *)a2 + 32);
  v7 = (re::ecs2::NetworkComponent *)*((_QWORD *)a2 + 25);
  if (*(_BYTE *)(this + 56))
  {
    if (!*((_QWORD *)a2 + 21))
      this = re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v8 = (const re::ecs2::Component *)*((_QWORD *)a2 + 30);
    if (!v8)
    {
      this = re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v8 = (const re::ecs2::Component *)this;
    }
    if ((_DWORD)a3 && v7)
      re::ecs2::NetworkComponent::markDirty(v7, v8);
  }
  if (v5[9])
  {
    if (!*((_QWORD *)a2 + 21))
      re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v9 = (uint64_t *)*((_QWORD *)a2 + 29);
    if (!v9)
      v9 = (uint64_t *)re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v10 = re::AssetHandle::operator=(v9 + 4, v5 + 8);
    this = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)v10);
    if (this)
    {
      v11 = (_anonymous_namespace_ *)this;
    }
    if ((_DWORD)a3 && v7)
      re::ecs2::NetworkComponent::markDirty(v7, (const re::ecs2::Component *)v9);
  }
  v12 = v5[4];
  if (v12)
  {
    v13 = (_anonymous_namespace_ *)v5[6];
    v14 = (_anonymous_namespace_ *)((char *)v13 + 88 * v12);
    do
    {
      v15 = *((_QWORD *)a2 + 41);
      if (!v15)
        goto LABEL_28;
      v16 = (const re::AnimationSceneEntityData **)*((_QWORD *)a2 + 43);
      v17 = 8 * v15;
      while (1)
      {
        v18 = *v16;
        this = re::StringID::operator==((_QWORD *)*v16 + 34, v13);
        if ((_DWORD)this)
          break;
        ++v16;
        v17 -= 8;
        if (!v17)
          goto LABEL_28;
      }
      if (v18)
      {
      }
      else
      {
LABEL_28:
        v20 = *re::assetTypesLogObjects((re *)this);
        this = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)this)
        {
          v21 = *((_QWORD *)a2 + 35);
          v22 = *((_QWORD *)v13 + 1);
          *(_DWORD *)buf = 136315394;
          v24 = v21;
          v25 = 2080;
          v26 = v22;
          _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "Animation Scene entity (%s) could not locate expected child (%s).", buf, 0x16u);
        }
      }
      v13 = (_anonymous_namespace_ *)((char *)v13 + 88);
    }
    while (v13 != v14);
  }
}

void re::AnimationSceneEntityData::markTargetEntityAsDirty(re::AnimationSceneEntityData *this, re::ecs2::Entity *a2, _BOOL4 a3)
{
  re::ecs2::NetworkComponent *v6;
  const re::ecs2::Component *v7;
  uint64_t v8;
  re::AnimationSceneEntityData *v9;
  re::AnimationSceneEntityData *v10;
  uint64_t v11;
  re::ecs2::Entity **v12;
  uint64_t v13;
  re::ecs2::Entity *v14;

  v6 = (re::ecs2::NetworkComponent *)*((_QWORD *)a2 + 25);
  if (v6 && (!*((_QWORD *)v6 + 4) || RESyncableIsAuthoritative()))
  {
    if (*((_BYTE *)this + 56))
    {
      if (!a3)
      {
        v7 = (const re::ecs2::Component *)*((_QWORD *)a2 + 30);
        if (!v7)
          goto LABEL_12;
LABEL_11:
        re::ecs2::NetworkComponent::markDirty(v6, v7);
        goto LABEL_12;
      }
LABEL_10:
      v7 = (const re::ecs2::Component *)*((_QWORD *)a2 + 21);
      if (!v7)
        goto LABEL_12;
      goto LABEL_11;
    }
    if (!*((_QWORD *)this + 9))
      goto LABEL_12;
    if (a3)
      goto LABEL_10;
    v7 = (const re::ecs2::Component *)*((_QWORD *)a2 + 29);
    if (v7)
      goto LABEL_11;
  }
LABEL_12:
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = (re::AnimationSceneEntityData *)*((_QWORD *)this + 6);
    v10 = (re::AnimationSceneEntityData *)((char *)v9 + 88 * v8);
    do
    {
      v11 = *((_QWORD *)a2 + 41);
      if (v11)
      {
        v12 = (re::ecs2::Entity **)*((_QWORD *)a2 + 43);
        v13 = 8 * v11;
        while (1)
        {
          v14 = *v12;
          if (re::StringID::operator==((_QWORD *)*v12 + 34, v9))
            break;
          ++v12;
          v13 -= 8;
          if (!v13)
            goto LABEL_21;
        }
        if (v14)
          re::AnimationSceneEntityData::markTargetEntityAsDirty(v9, v14, a3);
      }
LABEL_21:
      v9 = (re::AnimationSceneEntityData *)((char *)v9 + 88);
    }
    while (v9 != v10);
  }
}

uint64_t *re::allocInfo_AnimationSceneEntityData(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDD20);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDD20))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDDD8, 0);
    *(uint64_t *)((char *)&qword_2540FDDE8 + 6) = 0;
    qword_2540FDDE8 = 0;
    qword_2540FDDF8 = 0;
    qword_2540FDE00 = 0xFFFFFFFFLL;
    qword_2540FDDD8 = (uint64_t)&off_24ED7DAA8;
    qword_2540FDE08 = (uint64_t)"AnimationSceneEntityData";
    dword_2540FDE10 = 0;
    unk_2540FDE18 = 0u;
    xmmword_2540FDE28 = 0u;
    unk_2540FDE38 = 0u;
    qword_2540FDE48 = 0;
    __cxa_guard_release(&qword_2540FDD20);
  }
  return &qword_2540FDDD8;
}

void re::initInfo_AnimationSceneEntityData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xAD7EB69D45DE37AALL;
  v21[1] = "AnimationSceneEntityData";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FDD28);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FDD28);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "entityName";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FDD78 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::AnimationSceneEntityData>>::get((re *)v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "childrenData";
      *(_QWORD *)(v11 + 16) = &qword_2540FDD98;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2540FDD80 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_BOOL((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "transformAnimation";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x3800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2540FDD88 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_AssetHandle((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "skeletalPoseDefinition";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x4000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2540FDD90 = v19;
      __cxa_guard_release(&qword_2540FDD28);
    }
  }
  *((_QWORD *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FDD78;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AnimationSceneEntityData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AnimationSceneEntityData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AnimationSceneEntityData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AnimationSceneEntityData>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

void re::IntrospectionInfo<re::DynamicArray<re::AnimationSceneEntityData>>::get(re *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDD60);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FDD60);
    if ((_DWORD)a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FDD98);
      qword_2540FDD98 = (uint64_t)&off_24ED31768;
      __cxa_guard_release(&qword_2540FDD60);
    }
  }
  if ((_MergedGlobals_70 & 1) == 0)
  {
    v2 = (uint64_t *)qword_2540FDD30;
    if (qword_2540FDD30
      || (v2 = re::allocInfo_AnimationSceneEntityData(a1),
          qword_2540FDD30 = (uint64_t)v2,
          re::initInfo_AnimationSceneEntityData((re *)v2, v3),
          (_MergedGlobals_70 & 1) == 0))
    {
      _MergedGlobals_70 = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDD98, 0);
      qword_2540FDDA8 = 0x2800000003;
      dword_2540FDDB0 = v4;
      word_2540FDDB4 = 0;
      *(_QWORD *)&xmmword_2540FDDB8 = 0;
      *((_QWORD *)&xmmword_2540FDDB8 + 1) = 0xFFFFFFFFLL;
      qword_2540FDDC8 = (uint64_t)v2;
      unk_2540FDDD0 = 0;
      qword_2540FDD98 = (uint64_t)&off_24ED31768;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FDD98, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FDDB8 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::internal::defaultConstruct<re::AnimationSceneEntityData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = 0;
}

void re::internal::defaultDestruct<re::AnimationSceneEntityData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 64));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a3 + 16);
  re::StringID::destroyString((re::StringID *)a3);
}

uint64_t re::internal::defaultConstructV2<re::AnimationSceneEntityData>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::AnimationSceneEntityData>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 64));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1 + 16);
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_AnimationScene(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDD38);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDD38))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDE50, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FDE60 = 0;
    qword_2540FDE70 = 0;
    qword_2540FDE78 = 0xFFFFFFFFLL;
    qword_2540FDE50 = (uint64_t)&off_24ED7DAA8;
    qword_2540FDE80 = (uint64_t)"AnimationScene";
    dword_2540FDE88 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2540FDEC0 = 0;
    __cxa_guard_release(&qword_2540FDD38);
  }
  return &qword_2540FDE50;
}

void re::initInfo_AnimationScene(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  re::IntrospectionBase *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0xC56CB686DAA8D710;
  v16[1] = "AnimationScene";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FDD40);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FDD40);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_AssetHandle((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "rootTimeline";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FDD68 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v11 = v10;
      v12 = (uint64_t *)qword_2540FDD30;
      if (!qword_2540FDD30)
      {
        v12 = re::allocInfo_AnimationSceneEntityData((re *)v10);
        qword_2540FDD30 = (uint64_t)v12;
        re::initInfo_AnimationSceneEntityData((re *)v12, v13);
      }
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "rootEntityData";
      *(_QWORD *)(v14 + 16) = v12;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1800000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FDD70 = v14;
      __cxa_guard_release(&qword_2540FDD40);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FDD68;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AnimationScene>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AnimationScene>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AnimationScene>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AnimationScene>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::AnimationScene>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  return result;
}

void re::internal::defaultDestruct<re::AnimationScene>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID *v4;

  v4 = (re::StringID *)(a3 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 88));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a3 + 40);
  re::StringID::destroyString(v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

double re::internal::defaultConstructV2<re::AnimationScene>(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::AnimationScene>(uint64_t a1)
{
  re::StringID *v2;

  v2 = (re::StringID *)(a1 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 88));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1 + 40);
  re::StringID::destroyString(v2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t re::introspect_AnimationScene(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationScene", (uint64_t (*)(re::internal *))re::allocInfo_AnimationScene, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationScene, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AnimationScene>, this);
}

uint64_t *re::allocInfo_AnimationSceneAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDD48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDD48))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDEC8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FDED8 = 0;
    qword_2540FDEE8 = 0;
    qword_2540FDEF0 = 0xFFFFFFFFLL;
    qword_2540FDEC8 = (uint64_t)&off_24ED7DAA8;
    qword_2540FDEF8 = (uint64_t)"AnimationSceneAsset";
    dword_2540FDF00 = 0;
    xmmword_2540FDF08 = 0u;
    unk_2540FDF18 = 0u;
    xmmword_2540FDF28 = 0u;
    qword_2540FDF38 = 0;
    __cxa_guard_release(&qword_2540FDD48);
  }
  return &qword_2540FDEC8;
}

void re::initInfo_AnimationSceneAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x36338DCE93270890;
  v12[1] = "AnimationSceneAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FDD58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FDD58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::AnimationScene>;
      if (!re::internal::introspectionInfoStorage<re::AnimationScene>)
      {
        v8 = re::allocInfo_AnimationScene((re *)v6);
        re::internal::introspectionInfoStorage<re::AnimationScene> = (uint64_t)v8;
        re::initInfo_AnimationScene((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "data";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FDD50 = v10;
      __cxa_guard_release(&qword_2540FDD58);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FDD50;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::~BasicAsset(a3);
}

double re::internal::defaultConstructV2<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

uint64_t re::introspect_AnimationSceneAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSceneAsset", (uint64_t (*)(re::internal *))re::allocInfo_AnimationSceneAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationSceneAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>, this);
}

uint64_t re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::SkeletalPoseDefinitionAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _BYTE *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_BYTE *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _BYTE *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _BYTE *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

_QWORD *re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AnimationSceneEntityData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::AnimationSceneEntityData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  _OWORD v11[3];
  _QWORD v12[4];

  v10[0] = 0;
  memset(v11, 0, sizeof(v11));
  v10[1] = (uint64_t)&str_110;
  memset(v12, 0, 24);
  re::DynamicArray<re::AnimationSceneEntityData>::add(this, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 88 * *((_QWORD *)this + 2) - 88);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

uint64_t re::DynamicArray<re::AnimationSceneEntityData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 88 * v4;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 64));
          re::DynamicArray<re::AnimationSceneEntityData>::deinit(v3 + 16);
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 88;
          v5 -= 88;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 88 * v9);
        v11 = (unint64_t *)(v8 + 64);
        v12 = v7;
        do
        {
          v13 = *(v11 - 8);
          *v12 = *v12 & 0xFFFFFFFFFFFFFFFELL | *(v11 - 8) & 1;
          *v12 = *(v11 - 8) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v12[1] = *(v11 - 7);
          *(v11 - 7) = (unint64_t)&str_110;
          *(v11 - 8) = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 10) = 0;
          v12[3] = 0;
          v12[4] = 0;
          v12[2] = 0;
          v14 = *(v11 - 5);
          v12[2] = *(v11 - 6);
          *(v11 - 6) = 0;
          v12[3] = v14;
          *(v11 - 5) = 0;
          v15 = v12[4];
          v12[4] = *(v11 - 4);
          *(v11 - 4) = v15;
          v16 = v12[6];
          v12[6] = *(v11 - 2);
          *(v11 - 2) = v16;
          ++*((_DWORD *)v11 - 6);
          ++*((_DWORD *)v12 + 10);
          *((_BYTE *)v12 + 56) = *((_BYTE *)v11 - 8);
          v12[9] = 0;
          v12[10] = 0;
          v12[8] = 0;
          v12[9] = v11[1];
          v11[1] = 0;
          v17 = v12[8];
          v12[8] = 0;
          v12[8] = *v11;
          *v11 = v17;
          v18 = v12[10];
          v12[10] = v11[2];
          v11[2] = v18;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)(v11 - 6));
          re::StringID::destroyString((re::StringID *)(v11 - 8));
          v19 = v11 + 3;
          v11 += 11;
          v12 += 11;
        }
        while (v19 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::AnimationSceneEntityData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 88 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 64));
      re::DynamicArray<re::AnimationSceneEntityData>::deinit(v10 + 16);
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 88;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 88 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 40) = 0;
        *(_BYTE *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::AnimationSceneEntityData>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::AnimationSceneEntityData>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 88 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = a2[3];
  *(_QWORD *)(v5 + 16) = a2[2];
  *(_QWORD *)(v5 + 24) = v7;
  a2[2] = 0;
  a2[3] = 0;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = a2[4];
  a2[4] = v8;
  v9 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = a2[6];
  a2[6] = v9;
  ++*((_DWORD *)a2 + 10);
  ++*(_DWORD *)(v5 + 40);
  *(_BYTE *)(v5 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = a2[9];
  a2[9] = 0;
  v10 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 64) = a2[8];
  a2[8] = v10;
  v11 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v5 + 80) = a2[10];
  a2[10] = v11;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::AnimationSceneEntityData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AnimationSceneEntityData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::AnimationSceneEntityData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 88 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 88;
        v11 -= 88;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::AnimationSceneEntityData>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 88 * v2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 64));
      re::DynamicArray<re::AnimationSceneEntityData>::deinit(v3 + 16);
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 88;
      v4 -= 88;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 88 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 88 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::~BasicAsset(uint64_t a1)
{
  re::StringID *v2;

  v2 = (re::StringID *)(a1 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 88));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1 + 40);
  re::StringID::destroyString(v2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t *re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType(void)::type = (uint64_t)"AssignedMeshDeformation";
    qword_255800A80 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType(void)::type;
}

uint64_t *re::allocInfo_AssignedMeshDeformation(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDF48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDF48))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDFC8, 0);
    *(uint64_t *)((char *)&qword_2540FDFD8 + 6) = 0;
    qword_2540FDFD8 = 0;
    qword_2540FDFE8 = 0;
    qword_2540FDFF0 = 0xFFFFFFFFLL;
    qword_2540FDFC8 = (uint64_t)&off_24ED7DAA8;
    qword_2540FDFF8 = (uint64_t)"AssignedMeshDeformation";
    dword_2540FE000 = 0;
    xmmword_2540FE008 = 0u;
    unk_2540FE018 = 0u;
    xmmword_2540FE028 = 0u;
    qword_2540FE038 = 0;
    __cxa_guard_release(&qword_2540FDF48);
  }
  return &qword_2540FDFC8;
}

void re::initInfo_AssignedMeshDeformation(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  v9[0] = 0x100A83A7AE6FEAAALL;
  v9[1] = "AssignedMeshDeformation";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FDF58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FDF58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::MeshIdentifierAsset>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "deformedMeshAssets";
      *(_QWORD *)(v7 + 16) = &qword_2540FDF88;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_2540FDF50 = v7;
      __cxa_guard_release(&qword_2540FDF58);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FDF50;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AssignedMeshDeformation>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AssignedMeshDeformation>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AssignedMeshDeformation>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AssignedMeshDeformation>;
  re::IntrospectionRegistry::add(this, v3);
  v8 = v10;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshIdentifierAsset>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FDF80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDF80))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FDF88);
    qword_2540FDF88 = (uint64_t)&off_24ED31800;
    __cxa_guard_release(&qword_2540FDF80);
  }
  if ((_MergedGlobals_71 & 1) == 0)
  {
    v1 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
    if ((_MergedGlobals_71 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_71 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FDF88, 0);
      qword_2540FDF98 = 0x2800000003;
      dword_2540FDFA0 = v3;
      word_2540FDFA4 = 0;
      *(_QWORD *)&xmmword_2540FDFA8 = 0;
      *((_QWORD *)&xmmword_2540FDFA8 + 1) = 0xFFFFFFFFLL;
      qword_2540FDFB8 = v2;
      unk_2540FDFC0 = 0;
      qword_2540FDF88 = (uint64_t)&off_24ED31800;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2540FDF88, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2540FDFA8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::AssignedMeshDeformation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::AssignedMeshDeformation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::MeshIdentifierAsset>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::AssignedMeshDeformation>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t *re::allocInfo_AssignedMeshDeformationAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FDF68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FDF68))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FE040, 0);
    *(uint64_t *)((char *)&qword_2540FE050 + 6) = 0;
    qword_2540FE050 = 0;
    qword_2540FE060 = 0;
    qword_2540FE068 = 0xFFFFFFFFLL;
    qword_2540FE040 = (uint64_t)&off_24ED7DAA8;
    qword_2540FE070 = (uint64_t)"AssignedMeshDeformationAsset";
    dword_2540FE078 = 0;
    xmmword_2540FE080 = 0u;
    unk_2540FE090 = 0u;
    xmmword_2540FE0A0 = 0u;
    qword_2540FE0B0 = 0;
    __cxa_guard_release(&qword_2540FDF68);
  }
  return &qword_2540FE040;
}

void re::initInfo_AssignedMeshDeformationAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xF3256EF769E2536;
  v12[1] = "AssignedMeshDeformationAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FDF78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FDF78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540FDF60;
      if (!qword_2540FDF60)
      {
        v8 = re::allocInfo_AssignedMeshDeformation((re *)v6);
        qword_2540FDF60 = (uint64_t)v8;
        re::initInfo_AssignedMeshDeformation((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "data";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FDF70 = v10;
      __cxa_guard_release(&qword_2540FDF78);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FDF70;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::MeshIdentifierAsset>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_AssignedMeshDeformationAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssignedMeshDeformationAsset", (uint64_t (*)(re::internal *))re::allocInfo_AssignedMeshDeformationAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AssignedMeshDeformationAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>, this);
}

uint64_t re::DeformedMeshAssetsMap::clear(re::DeformedMeshAssetsMap *this)
{
  uint64_t v2;
  uint64_t result;

  *((_QWORD *)this + 1) = -1;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*((_QWORD *)this + 3))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 4));
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = 0;
  }
  result = *((_QWORD *)this + 5);
  if (result)
  {
    if (*((_QWORD *)this + 6))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 7));
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *((_QWORD *)this + 5) = 0;
  }
  return result;
}

uint64_t re::DeformedMeshAssetsMap::deformedIndex(re::DeformedMeshAssetsMap *this, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if (*((_QWORD *)this + 6) <= (unint64_t)a2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v4 = (*(_DWORD *)(*((_QWORD *)this + 7) + 4 * a2) + a3);
      if (v3 > v4)
        return *(unsigned int *)(*((_QWORD *)this + 4) + 4 * v4);
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0xFFFFFFFFLL;
}

_QWORD *re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  re::StringID *v13;
  re::StringID *v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[5 * v9];
        v11 = v7;
        do
        {
          *(_BYTE *)v11 = *(_BYTE *)v8;
          v13 = (re::StringID *)(v8 + 1);
          v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[2] = v8[2];
          v8[2] = &str_110;
          v8[1] = 0;
          v15 = v8[3];
          v14 = (re::StringID *)(v8 + 3);
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[3] = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[4] = *((_QWORD *)v14 + 1);
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = &str_110;
          re::StringID::destroyString(v14);
          re::StringID::destroyString(v13);
          v8 = (_QWORD *)((char *)v14 + 16);
          v11 += 5;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshIdentifierAsset>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshIdentifierAsset>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshIdentifierAsset>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v10 = 0;
  v11[0] = 0;
  v11[1] = &str_110;
  v12[0] = 0;
  v12[1] = &str_110;
  re::DynamicArray<re::MeshIdentifierAsset>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 40 * *((_QWORD *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

uint64_t re::DynamicArray<re::MeshIdentifierAsset>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::StringID *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        v6 = (re::StringID *)(v3 + 24);
        do
        {
          re::StringID::destroyString(v6);
          re::StringID::destroyString((re::StringID *)((char *)v6 - 16));
          v6 = (re::StringID *)((char *)v6 + 40);
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::MeshIdentifierAsset>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 40 * a2 + 24;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      ++v9;
      v8 += 40;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_BYTE *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = &str_110;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = &str_110;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::MeshIdentifierAsset>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshIdentifierAsset>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 40 * v4;
  *(_BYTE *)v5 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = &str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::MeshIdentifierAsset>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  re::StringID *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 40 * v8;
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + 24);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        v10 = (re::StringID *)((char *)v10 + 40);
        v9 -= 40;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshIdentifierAsset>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshIdentifierAsset>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 40 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 40;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy@<X0>(re::AudioAssetLoadStrategyFactory *this@<X0>, re::AudioService *a2@<X1>, _QWORD *a3@<X8>)
{
  char v4;
  _QWORD *result;
  void (**v6)(re::AudioAssetLoadStrategy_Host *__hidden);

  if (this)
  {
    v4 = (*(uint64_t (**)(re::AudioAssetLoadStrategyFactory *, re::AudioService *))(*(_QWORD *)this + 544))(this, a2);
    result = (_QWORD *)operator new();
    if ((v4 & 1) != 0)
      v6 = &off_24ED36EC0;
    else
      v6 = &off_24ED3C400;
  }
  else
  {
    result = (_QWORD *)operator new();
    v6 = &off_24ED3A058;
  }
  *result = v6;
  *a3 = result;
  return result;
}

uint64_t *re::ShaderLibraryAsset::assetType(re::ShaderLibraryAsset *this)
{
  unsigned __int8 v1;

  {
    re::ShaderLibraryAsset::assetType(void)::type = (uint64_t)"ShaderLibrary";
    qword_2558275A0 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ShaderLibraryAsset::assetType(void)::type);
  }
  return &re::ShaderLibraryAsset::assetType(void)::type;
}

uint64_t re::ShaderLibraryAsset::ShaderLibraryAsset(uint64_t a1, id *a2)
{
  _QWORD *v4;
  _anonymous_namespace_ *v5;

  *(_QWORD *)a1 = &off_24ED31898;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 40), 0);
  *(_QWORD *)(a1 + 80) = 0;
  re::ObjCObject::operator=((id *)(a1 + 80), a2);
  return a1;
}

uint64_t re::ShaderLibraryAssetLoaderNameRemapper::remapLibraryName@<X0>(re::ShaderLibraryAssetLoaderNameRemapper *this@<X0>, const char *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  os_unfair_lock_s *v5;
  re::AssetPath *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  char v17;
  uint64_t v18;

  *a3 = 0;
  v5 = (os_unfair_lock_s *)*((_QWORD *)this + 1);
  re::AssetPath::invalidAssetPath(v6, (uint64_t)&v8);
  re::AssetManager::lookupAssetPathString(v5, (const re::DynamicString *)&v13, (const re::AssetPath *)&v8, (uint64_t)v15);
  if ((_QWORD)v11)
  {
    if ((BYTE8(v11) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
    v11 = 0u;
    v12 = 0u;
  }
  if (v9 && (v10 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v9 + 40))();
  if (v13 && (v14 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v13 + 40))();
  if (v15[0])
  {
    LOBYTE(v8) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v9, (const re::DynamicString *)&v16);
    re::Optional<re::DynamicString>::operator=(a3, &v8);
    if ((_BYTE)v8)
    {
      if (v9 && (v10 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  result = v16;
  if (v16)
  {
    if ((v17 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v18);
  }
  return result;
}

void sub_2252A88C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  uint64_t v22;
  _OWORD *v24;

  if (a15)
  {
    v24 = (_OWORD *)(v22 + 40);
    if ((a16 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a15 + 40))();
    *v24 = 0u;
    v24[1] = 0u;
  }
  if (a11 && (a12 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a11 + 40))();
  if (a20)
  {
    if ((a21 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a20 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::ShaderLibraryAssetLoader::registerAsset(re::ShaderLibraryAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  re::ShaderManager *v11;
  re *v12;
  NSObject *v13;
  re::ShaderManager *v14;
  unint64_t LibraryHash;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL8 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  uint64_t v26;
  char *v27;
  re::ShaderManager *v28;
  re *v29;
  NSObject *v30;
  _anonymous_namespace_ *v31;
  size_t v32;
  const char *v33;
  const char *v34;
  const char *v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  const char *v39;
  __darwin_ino64_t v40;
  re::ShaderManager *v41;
  const re::DynamicString *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  re *v46;
  NSObject *v47;
  re *v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  __darwin_ino64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  char v65[8];
  size_t v66;
  __int128 buf;
  char *v68;
  stat v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  result = re::ServiceLocator::serviceOrNull<re::RenderManager>(*((_QWORD *)this + 1));
  if (!result)
    return result;
  v7 = result;
  if (!*((_QWORD *)this + 6))
  {
    v8 = re::ServiceLocator::serviceOrNull<re::AssetService>(*((_QWORD *)this + 1));
    if (v8)
    {
      *((_QWORD *)this + 6) = v8;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 312) = (char *)this + 40;
    }
  }
  v9 = (void *)*((_QWORD *)a2 + 10);
  if (v9)
  {
    re::DynamicString::format((re::DynamicString *)"memorylib_%lu", (re::DynamicString *)&v69, objc_msgSend(v9, "hash"));
    if ((v69.st_ino & 1) != 0)
      v10 = *(const char **)&v69.st_uid;
    else
      v10 = (char *)&v69.st_ino + 1;
    *(_QWORD *)&buf = v10;
    *((_QWORD *)&buf + 1) = strlen(v10);
    re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (uint64_t)&buf);
    v11 = *(re::ShaderManager **)(v7 + 56);
    *(_QWORD *)&buf = re::ShaderManager::getLibraryHash(v11, v10);
    v12 = (re *)re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v11 + 264, (uint64_t *)&buf);
    if (v12)
    {
      v13 = *re::assetTypesLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v10;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Registering library (%s) that already exists in shader manager. Library will be overwritten.", (uint8_t *)&buf, 0xCu);
      }
    }
    v14 = *(re::ShaderManager **)(v7 + 56);
    LibraryHash = re::ShaderManager::getLibraryHash(v14, v10);
    re::ShaderManager::installLibrary(v14, LibraryHash, (id *)a2 + 10);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>((uint64_t)this + 104, (re::DynamicString *)(a2 + 8), (const re::DynamicString *)&v69);
    v16 = *(_QWORD *)&v69.st_dev;
    if (*(_QWORD *)&v69.st_dev && (v69.st_ino & 1) != 0)
    {
      v17 = *(char **)&v69.st_uid;
LABEL_15:
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 40))(v16, v17);
    }
  }
  else
  {
    v18 = *((_QWORD *)a2 + 2);
    if ((v18 & 1) != 0)
      v19 = v18 >> 1;
    else
      v19 = v18 >> 1;
    if (v19)
    {
      v20 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)this + 104, (uint64_t)(a2 + 8));
      if (!v20)
      {
        v36 = (id)*re::assetTypesLogObjects((re *)v20);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          v57 = (char *)*((_QWORD *)a3 + 18);
          if ((*((_BYTE *)a3 + 136) & 1) == 0)
            v57 = (char *)a3 + 137;
          if ((a2[16] & 1) != 0)
            v58 = (char *)*((_QWORD *)a2 + 3);
          else
            v58 = a2 + 17;
          v69.st_dev = 136315394;
          *(_QWORD *)&v69.st_mode = v57;
          WORD2(v69.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&v69.st_ino + 6) = (__darwin_ino64_t)v58;
          _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "Registration failed for asset '%s'. Could not find library key for %s.", (uint8_t *)&v69, 0x16u);
        }

        return 2;
      }
      v21 = re::Hash<re::DynamicString>::operator()((uint64_t)&v69, (uint64_t)(a2 + 8));
      v22 = 0x7FFFFFFFLL;
      if (*((_QWORD *)this + 13))
      {
        v23 = *(unsigned int *)(*((_QWORD *)this + 14) + 4 * (v21 % *((unsigned int *)this + 32)));
        if ((_DWORD)v23 != 0x7FFFFFFF)
        {
          v24 = *((_QWORD *)this + 15);
          v22 = 0x7FFFFFFFLL;
          while (!re::DynamicString::operator==(v24 + 80 * v23 + 16, (uint64_t)(a2 + 8)))
          {
            v23 = *(_DWORD *)(v24 + 80 * v23 + 8) & 0x7FFFFFFF;
            if (v23 == 0x7FFFFFFF)
              goto LABEL_62;
          }
          v22 = v23;
        }
      }
LABEL_62:
      v38 = *((_QWORD *)this + 15);
      if ((*(_BYTE *)(v38 + 80 * v22 + 56) & 1) != 0)
        v39 = *(const char **)(v38 + 80 * v22 + 64);
      else
        v39 = (const char *)(v38 + 80 * v22 + 57);
      v40 = strlen(v39);
      *(_QWORD *)&v69.st_dev = v39;
      v69.st_ino = v40;
      re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (uint64_t)&v69);
    }
    else
    {
      v25 = re::DynamicString::DynamicString((re::DynamicString *)&buf, (const re::DynamicString *)(a2 + 40));
      v26 = *((_QWORD *)&buf + 1) >> 1;
      if ((BYTE8(buf) & 1) == 0)
        v26 = BYTE8(buf) >> 1;
      if (!v26)
      {
        v37 = (id)*re::assetTypesLogObjects(v25);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          if ((*((_QWORD *)a3 + 17) & 1) != 0)
            v60 = (char *)*((_QWORD *)a3 + 18);
          else
            v60 = (char *)a3 + 137;
          v69.st_dev = 136315138;
          *(_QWORD *)&v69.st_mode = v60;
          _os_log_error_impl(&dword_224FE9000, v37, OS_LOG_TYPE_ERROR, "Registration failed for asset '%s', currentMetallibPath is Empty!", (uint8_t *)&v69, 0xCu);
        }

        if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)buf + 40))();
        return 2;
      }
      if ((BYTE8(buf) & 1) != 0)
        v27 = v68;
      else
        v27 = (char *)&buf + 9;
      v28 = *(re::ShaderManager **)(v7 + 56);
      *(_QWORD *)&v69.st_dev = re::ShaderManager::getLibraryHash(v28, v27);
      v29 = (re *)re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v28 + 264, (uint64_t *)&v69.st_dev);
      if (v29)
      {
        v30 = *re::assetTypesLogObjects(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v69.st_dev = 136315138;
          *(_QWORD *)&v69.st_mode = v27;
          _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Registering library (%s) that already exists in shader manager. Library will be overwritten.", (uint8_t *)&v69, 0xCu);
        }
      }
      re::ShaderManager::makeLibraryWithFile(*(void ***)(v7 + 56), v27, (re::ns *)v27, v27);
      v31 = (_anonymous_namespace_ *)re::DynamicString::rfind((uint64_t)&buf, 46, v65);
      if (v65[0])
      {
        v32 = v66;
        if (v66)
        {
          v63 = 0;
          v64 = 0;
          v62 = 0;
          re::DynamicString::setCapacity(&v61, v32 + 25);
          if ((BYTE8(buf) & 1) != 0)
            v33 = v68;
          else
            v33 = (char *)&buf + 9;
          re::DynamicString::append((re::DynamicString *)&v61, v33, v32);
          re::DynamicString::append((re::DynamicString *)&v61, "-binaryarchive.metallib", 0x18uLL);
          if ((v62 & 1) != 0)
            v34 = v63;
          else
            v34 = (char *)&v62 + 1;
          if (!stat(v34, &v69))
          {
            if ((v62 & 1) != 0)
              v35 = v63;
            else
              v35 = (char *)&v62 + 1;
            re::ShaderManager::makeAndAddBinaryArchive(*(re::ShaderManager **)(v7 + 56), v35, v35);
          }
          if (v61 && (v62 & 1) != 0)
            (*(void (**)(void))(*v61 + 40))();
        }
      }
      v16 = buf;
      if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
      {
        v17 = v68;
        goto LABEL_15;
      }
    }
  }
  v41 = *(re::ShaderManager **)(v7 + 56);
  v42 = (const re::DynamicString *)(a2 + 40);
  re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)(a2 + 40));
  if ((v69.st_ino & 1) != 0)
    v43 = *(const char **)&v69.st_uid;
  else
    v43 = (char *)&v69.st_ino + 1;
  *(_QWORD *)&buf = re::ShaderManager::getLibraryHash(v41, v43);
  v44 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v41 + 264, (uint64_t *)&buf);
  v45 = buf;
  if (!v44)
    v45 = 0;
  *((_QWORD *)a2 + 9) = v45;
  v46 = *(re **)&v69.st_dev;
  if (*(_QWORD *)&v69.st_dev && (v69.st_ino & 1) != 0)
  {
    v46 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v69.st_dev + 40))();
    v45 = *((_QWORD *)a2 + 9);
  }
  if (!v45)
  {
    v47 = *re::assetTypesLogObjects(v46);
    v48 = (re *)os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v48)
    {
      v55 = v47;
      re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)(a2 + 40));
      v56 = (v69.st_ino & 1) != 0 ? *(__darwin_ino64_t **)&v69.st_uid : (__darwin_ino64_t *)((char *)&v69.st_ino + 1);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v56;
      _os_log_error_impl(&dword_224FE9000, v55, OS_LOG_TYPE_ERROR, "Unable to get a library hash for %s", (uint8_t *)&buf, 0xCu);

      v48 = *(re **)&v69.st_dev;
      if (*(_QWORD *)&v69.st_dev)
      {
        if ((v69.st_ino & 1) != 0)
          v48 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v69.st_dev + 40))();
      }
    }
    if (!*((_QWORD *)a2 + 9))
    {
      v54 = (id)*re::assetTypesLogObjects(v48);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        if ((*((_QWORD *)a3 + 17) & 1) != 0)
          v59 = (char *)*((_QWORD *)a3 + 18);
        else
          v59 = (char *)a3 + 137;
        v69.st_dev = 136315138;
        *(_QWORD *)&v69.st_mode = v59;
        _os_log_error_impl(&dword_224FE9000, v54, OS_LOG_TYPE_ERROR, "Registration failed for asset '%s'", (uint8_t *)&v69, 0xCu);
      }

      return 2;
    }
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)(a2 + 40));
  v49 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)this + 56, (uint64_t)&v69);
  if (*(_QWORD *)&v69.st_dev && (v69.st_ino & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v69.st_dev + 40))();
  if (v49)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v69, v42);
    v50 = re::Hash<re::DynamicString>::operator()((uint64_t)&buf, (uint64_t)&v69);
    v51 = 0x7FFFFFFFLL;
    if (*((_QWORD *)this + 7))
    {
      v52 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (v50 % *((unsigned int *)this + 20)));
      if ((_DWORD)v52 != 0x7FFFFFFF)
      {
        v53 = *((_QWORD *)this + 9);
        v51 = 0x7FFFFFFFLL;
        while (!re::DynamicString::operator==(v53 + 56 * v52 + 16, (uint64_t)&v69))
        {
          v52 = *(_DWORD *)(v53 + 56 * v52 + 8) & 0x7FFFFFFF;
          if (v52 == 0x7FFFFFFF)
            goto LABEL_92;
        }
        v51 = v52;
      }
    }
LABEL_92:
    ++*(_DWORD *)(*((_QWORD *)this + 9) + 56 * v51 + 48);
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v69, v42);
    LODWORD(buf) = 1;
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)this + 56, (re::DynamicString *)&v69, &buf);
  }
  if (*(_QWORD *)&v69.st_dev)
  {
    if ((v69.st_ino & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v69.st_dev + 40))();
  }
  return 0;
}

void sub_2252A9154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  if (a11 && (a12 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a11 + 40))();
  if (a17)
  {
    if ((a18 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a17 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 56 * v9;
  return v12 + 48;
}

void re::ShaderLibraryAssetLoader::preloadAssets(re::ShaderLibraryAssetLoader *this)
{
  uint64_t v2;
  re::AssetHandle *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v2 = re::ServiceLocator::service<re::AssetService>(*((_QWORD *)this + 1));
  (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v2 + 8))(&v6, v2, "engine:default.metallib");
  v4 = *((_OWORD *)this + 1);
  v3 = (re::ShaderLibraryAssetLoader *)((char *)this + 16);
  *(_OWORD *)v3 = v6;
  v6 = v4;
  v5 = *((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = v7;
  v7 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2))
    re::AssetHandle::loadAsync(v3);
}

uint64_t re::ShaderLibraryAssetLoader::unregisterAsset(re::ShaderLibraryAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t result;
  uint64_t v6;
  const re::DynamicString *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;

  result = re::ServiceLocator::serviceOrNull<re::RenderManager>(*((_QWORD *)this + 1));
  if (!result)
    return result;
  v6 = result;
  v7 = (const re::DynamicString *)(a2 + 40);
  re::DynamicString::DynamicString((re::DynamicString *)&v32, v7);
  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v30, (uint64_t)&v32);
  v9 = 0x7FFFFFFFLL;
  if (*((_QWORD *)this + 7))
  {
    v10 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (v8 % *((unsigned int *)this + 20)));
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *((_QWORD *)this + 9);
      v9 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v11 + 56 * v10 + 16, (uint64_t)&v32))
      {
        v10 = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF)
          goto LABEL_9;
      }
      v9 = v10;
    }
  }
LABEL_9:
  --*(_DWORD *)(*((_QWORD *)this + 9) + 56 * v9 + 48);
  if (v32 && (v33 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v32 + 40))();
  re::DynamicString::DynamicString((re::DynamicString *)&v32, v7);
  v12 = re::Hash<re::DynamicString>::operator()((uint64_t)&v30, (uint64_t)&v32);
  if (*((_QWORD *)this + 7))
  {
    v13 = *((_QWORD *)this + 9);
    v14 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (v12 % *((unsigned int *)this + 20)));
    if ((_DWORD)v14 != 0x7FFFFFFF)
    {
      while (!re::DynamicString::operator==(v13 + 56 * v14 + 16, (uint64_t)&v32))
      {
        v14 = *(_DWORD *)(v13 + 56 * v14 + 8) & 0x7FFFFFFF;
        if (v14 == 0x7FFFFFFF)
          goto LABEL_18;
      }
      goto LABEL_19;
    }
  }
  else
  {
    v13 = *((_QWORD *)this + 9);
  }
LABEL_18:
  v14 = 0x7FFFFFFFLL;
LABEL_19:
  v15 = *(_DWORD *)(v13 + 56 * v14 + 48);
  result = v32;
  if (v32 && (v33 & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 40))();
  if (v15 <= 0)
  {
    v36 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v35 = 0;
    v16 = *((unsigned int *)this + 34);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = (int *)(*((_QWORD *)this + 15) + 8);
      while (1)
      {
        v19 = *v18;
        v18 += 20;
        if (v19 < 0)
          break;
        if (v16 == ++v17)
        {
          LODWORD(v17) = *((_DWORD *)this + 34);
          break;
        }
      }
    }
    else
    {
      LODWORD(v17) = 0;
    }
    if ((_DWORD)v16 != (_DWORD)v17)
    {
      v20 = (char *)this + 104;
      v21 = v17;
      do
      {
        v22 = *((_QWORD *)this + 15) + 80 * v21;
        re::DynamicString::DynamicString((re::DynamicString *)&v30, v7);
        v23 = re::DynamicString::operator==(v22 + 48, (uint64_t)&v30);
        if (v30 && (v31 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v30 + 40))();
        if (v23)
          re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v32, (re::DynamicString *)(v22 + 16));
        if (*((_DWORD *)this + 34) <= (v17 + 1))
          v24 = v17 + 1;
        else
          v24 = *((_DWORD *)this + 34);
        while (1)
        {
          v21 = (v17 + 1);
          if (v24 - 1 == (_DWORD)v17)
            break;
          LODWORD(v17) = v17 + 1;
          v25 = v21;
          if ((*(_DWORD *)(*((_QWORD *)this + 15) + 80 * v21 + 8) & 0x80000000) != 0)
            goto LABEL_43;
        }
        v25 = v24;
LABEL_43:
        LODWORD(v17) = v25;
      }
      while ((_DWORD)v16 != v25);
      if (v34)
      {
        v26 = v36;
        v27 = 32 * v34;
        do
        {
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)v20, v26);
          v26 += 32;
          v27 -= 32;
        }
        while (v27);
      }
    }
    v28 = *(_QWORD *)(v6 + 56);
    re::DynamicString::DynamicString((re::DynamicString *)&v30, v7);
    v29 = re::Hash<re::DynamicString>::operator()((uint64_t)&v37, (uint64_t)&v30);
    re::ShaderManager::releaseLibrary(v28, v29);
    if (v30)
    {
      if ((v31 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v30 + 40))();
    }
    return re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v32);
  }
  return result;
}

void sub_2252A9688(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a2)
  {
    if ((a3 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a2 + 40))();
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

re *re::ShaderLibraryAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

BOOL re::ShaderLibraryAssetLoader::isSupportedSourceExtension(re::ShaderLibraryAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "metallib") || strcasecmp(a2, "hmshaderlib") == 0;
}

void re::ShaderLibraryAssetLoader::findDependencies(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

__guard re::ShaderLibraryAssetLoader::introspectionType(re::ShaderLibraryAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::ShaderLibraryAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"ShaderLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_ShaderLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ShaderLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShaderLibraryAsset>, 0);
    }
  }
  return v2[340];
}

uint64_t re::ShaderLibraryAssetLoader::allocateSampleAsset(re::ShaderLibraryAssetLoader *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  const char *v5;
  size_t v6;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  _QWORD v11[2];

  v1 = re::AssetHandle::asset<re::ShaderLibraryAsset>((re::ShaderLibraryAssetLoader *)((char *)this + 16));
  v2 = re::globalAllocators((re *)v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 88, 8);
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_QWORD *)v3 = &off_24ED31898;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v3 + 8), 0);
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(v3 + 40), 0);
  *(_QWORD *)(v3 + 80) = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v8, (const re::DynamicString *)(v1 + 40));
  if ((v9 & 1) != 0)
    v5 = *(const char **)&v10[7];
  else
    v5 = v10;
  v6 = strlen(v5);
  v11[0] = v5;
  v11[1] = v6;
  re::DynamicString::operator=((re::DynamicString *)(v3 + 40), (uint64_t)v11);
  if (v8 && (v9 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v8 + 40))();
  return v3;
}

uint64_t re::AssetHandle::asset<re::ShaderLibraryAsset>(re::ShaderLibraryAsset *a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  re::ShaderLibraryAsset::assetType(a1);
  v2 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::ShaderLibraryAsset::assetType(void)::type, 0);
  if (!v2)
  {
    v3 = (id)*re::assetsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = re::AssetHandle::assetInfo(a1);
      if ((v5[17] & 1) != 0)
        v6 = (char *)v5[18];
      else
        v6 = (char *)v5 + 137;
      v7 = 136315138;
      v8 = v6;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v7, 0xCu);
    }

  }
  return v2;
}

uint64_t *re::allocInfo_ShaderLibraryAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_72);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_72))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FE0D8, 0);
    *(uint64_t *)((char *)&qword_2540FE0E8 + 6) = 0;
    qword_2540FE0E8 = 0;
    qword_2540FE0F8 = 0;
    qword_2540FE100 = 0xFFFFFFFFLL;
    qword_2540FE0D8 = (uint64_t)&off_24ED7DAA8;
    qword_2540FE108 = (uint64_t)"ShaderLibraryAsset";
    dword_2540FE110 = 0;
    xmmword_2540FE118 = 0u;
    unk_2540FE128 = 0u;
    xmmword_2540FE138 = 0u;
    qword_2540FE148 = 0;
    __cxa_guard_release(&_MergedGlobals_72);
  }
  return &qword_2540FE0D8;
}

void re::initInfo_ShaderLibraryAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xEC9A67660EC0D734;
  v15[1] = "ShaderLibraryAsset";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE0C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE0C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "networkIdentifier";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FE0C8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "serializedLibraryPath";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE0D0 = v13;
      __cxa_guard_release(&qword_2540FE0C0);
    }
  }
  *((_QWORD *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FE0C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ShaderLibraryAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ShaderLibraryAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ShaderLibraryAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ShaderLibraryAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void sub_2252A9CE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FE0C0);
  _Unwind_Resume(a1);
}

_QWORD *re::internal::defaultConstruct<re::ShaderLibraryAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _anonymous_namespace_ *v5;
  _QWORD *result;

  v3 = a3;
  *(_QWORD *)a3 = &off_24ED31898;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  v4 = (_QWORD *)(a3 + 8);
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)(v3 + 40) = 0u;
  v3 += 40;
  *(_OWORD *)(v3 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)v3, 0);
  *(_QWORD *)(v3 + 40) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ShaderLibraryAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::ShaderLibraryAsset>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _anonymous_namespace_ *v3;
  _QWORD *result;

  v1 = a1;
  *(_QWORD *)a1 = &off_24ED31898;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = (_QWORD *)(a1 + 8);
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(_OWORD *)(v1 + 40) = 0u;
  v1 += 40;
  *(_OWORD *)(v1 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)v1, 0);
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ShaderLibraryAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_ShaderLibraryAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShaderLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_ShaderLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ShaderLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShaderLibraryAsset>, this);
}

void re::ShaderLibraryAssetLoader::~ShaderLibraryAssetLoader(re::ShaderLibraryAssetLoader *this)
{
  re::AssetHandle *v2;
  double v3;

  *(_QWORD *)this = &off_24ED318F8;
  v2 = (re::ShaderLibraryAssetLoader *)((char *)this + 16);
  v3 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 7, v3);
  re::AssetHandle::~AssetHandle(v2);
}

{
  re::AssetHandle *v2;
  double v3;

  *(_QWORD *)this = &off_24ED318F8;
  v2 = (re::ShaderLibraryAssetLoader *)((char *)this + 16);
  v3 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 7, v3);
  re::AssetHandle::~AssetHandle(v2);
  JUMPOUT(0x2276933B8);
}

void re::ShaderLibraryAsset::~ShaderLibraryAsset(re::ShaderLibraryAsset *this)
{
  re::ShaderLibraryAsset::~ShaderLibraryAsset(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED31898;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _DWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 56;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void sub_2252AA16C(_Unwind_Exception *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&a10, a2);
  _Unwind_Resume(a1);
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_28, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void sub_2252AA490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2252AA670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2252AA728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2252AA7C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2252AA85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2252AAAF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2252AACFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2252AAD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2252AAE18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2252AB0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2252AB28C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2252AB47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2252AB50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::SharedTexturePayload::make(id *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, RESharedTexturePayload **a5@<X8>)
{
  re *v10;
  RESharedTexturePayload *v11;
  uint64_t v12;
  id v13;
  void *v14;
  RESharedTexturePayload *v15;
  os_log_t log;
  NSObject *loga;
  uint8_t buf[4];
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = (re *)objc_msgSend(*a1, sel_isShareable);
  if ((_DWORD)v10)
  {
    v11 = [RESharedTexturePayload alloc];
    log = (os_log_t)*a1;
    if ((*(_BYTE *)(a4 + 8) & 1) != 0)
      v12 = *(_QWORD *)(a4 + 16);
    else
      v12 = a4 + 9;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[RESharedTexturePayload initWithTexture:isLimitedRenderAsset:semantic:colorSpace:](v11, "initWithTexture:isLimitedRenderAsset:semantic:colorSpace:", log, a2, a3, v14);
    *a5 = v15;

  }
  else
  {
    loga = (id)*re::assetTypesLogObjects(v10);
    if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(objc_msgSend(*a1, sel_label), sel_cStringUsingEncoding_, 4);
      *(_DWORD *)buf = 136315138;
      v19 = v13;
      _os_log_impl(&dword_224FE9000, loga, OS_LOG_TYPE_DEFAULT, "Attempted to share an unshareable texture '%s'", buf, 0xCu);
    }

    *a5 = 0;
  }
}

void sub_2252AB758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void re::SharedTexturePayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v5;
  id v6;
  id v7;

  v7 = *this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v7;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v7;
    v5 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_2252AB7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *re::SharedTexturePayload::handle(id *this)
{
  void *v1;

  objc_msgSend(*this, "handle");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void re::SharedTexturePayload::colorSpace(id *this@<X0>, re::DynamicString *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  id v4;

  objc_msgSend(*this, "colorSpace");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v3 = (_anonymous_namespace_ *)objc_msgSend(v4, "UTF8String");

}

void sub_2252AB88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::IOSurfaceTexturePayload::make(id *a1@<X0>, REIOSurfaceTexturePayload **a2@<X8>)
{
  id v4;
  REIOSurfaceTexturePayload *v5;
  NSObject *v6;
  id v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = objc_msgSend(*a1, sel_iosurface);
  if (v4)
  {
    v5 = -[REIOSurfaceTexturePayload initWithIOSurface:plane:pixelFormat:]([REIOSurfaceTexturePayload alloc], "initWithIOSurface:plane:pixelFormat:", v4, objc_msgSend(*a1, sel_iosurfacePlane), objc_msgSend(*a1, sel_pixelFormat));
    *a2 = v5;

  }
  else
  {
    v6 = (id)*re::assetTypesLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(objc_msgSend(*a1, sel_label), sel_cStringUsingEncoding_, 4);
      v8 = 136315138;
      v9 = v7;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Attempted to share an unshareable texture '%s'", (uint8_t *)&v8, 0xCu);
    }

    *a2 = 0;
  }
}

void sub_2252ABA04(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void re::IOSurfaceTexturePayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v5;
  id v6;
  id v7;

  v7 = *this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v7;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v7;
    v5 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_2252ABA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::IOSurfaceTexturePayload::makeTextureWithDevice(id *this@<X0>, id *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  re *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = *this;
  objc_msgSend(v5, "ioSurface");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "planeIndex");
  if (objc_msgSend(v6, "planeCount"))
  {
    v8 = objc_msgSend(v6, "widthOfPlaneAtIndex:", v7);
    v9 = (re *)objc_msgSend(v6, "heightOfPlaneAtIndex:", v7);
  }
  else
  {
    v8 = objc_msgSend(v6, "width");
    v9 = (re *)objc_msgSend(v6, "height");
  }
  v10 = v9;
  if (v8 && v9)
  {
    v11 = objc_msgSend(v5, "pixelFormat");
    v12 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    objc_msgSend(v12, sel_setTextureType_, 2);
    objc_msgSend(v12, sel_setWidth_, v8);
    objc_msgSend(v12, sel_setHeight_, v10);
    objc_msgSend(v12, sel_setPixelFormat_, v11);
    objc_msgSend(v12, sel_setMipmapLevelCount_, 1);
    objc_msgSend(v12, sel_setUsage_, 1);
    objc_msgSend(v12, sel_setStorageMode_, 0);
    re::mtl::Device::makeTextureWithIOSurface(v12, a2, (uint64_t)v6, v7, a3);
    if (v12)

  }
  else
  {
    v13 = *re::assetTypesLogObjects(v9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14[0] = 67109376;
      v14[1] = v8;
      v15 = 1024;
      v16 = (int)v10;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Attempted to create an IOSurfaceTexturePayload with invalid size: [%d, %d]", (uint8_t *)v14, 0xEu);
    }
    *a3 = 0;
  }

}

void sub_2252ABCC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void re::DrawableQueueTexturePayload::make(id *a1@<X0>, REDrawableQueueTexturePayload **a2@<X8>)
{
  REDrawableQueueTexturePayload *v4;
  REDrawableQueueTexturePayload *v5;
  id v6;

  v4 = [REDrawableQueueTexturePayload alloc];
  v6 = *a1;
  v5 = -[REDrawableQueueTexturePayload initWithDrawableQueue:placeholderTexture:](v4, "initWithDrawableQueue:placeholderTexture:");
  *a2 = v5;

}

void sub_2252ABD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::DrawableQueueTexturePayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v5;
  id v6;
  id v7;

  v7 = *this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v7;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v7;
    v5 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_2252ABDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::DrawableQueueTexturePayload::drawableQueue(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "drawableQueue");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

void re::DrawableQueueTexturePayload::placeholderTexture(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(*this, "placeholderTexture");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a2 = v3;

}

uint64_t re::bufferIdentifierForMeshAttribute(re *this, const re::StringID *a2)
{
  uint64_t v3;

  if (re::StringID::operator==(this, re::MeshAttributeNames::kIndexTriangles))
    return 4;
  if (re::StringID::operator==(this, re::MeshAttributeNames::kVertexAdjacentFaces)
    || re::StringID::operator==(this, re::MeshAttributeNames::kAccumulatedVertexValence)
    || re::StringID::operator==(this, re::MeshAttributeNames::kSimplifiedAnimationJointIndices)
    || re::StringID::operator==(this, re::MeshAttributeNames::kSimplifiedAnimationInfluenceEndIndices)
    || re::StringID::operator==(this, re::MeshAttributeNames::kSimplifiedAnimationSkinningInfluences))
  {
    return 5;
  }
  if (re::StringID::operator==(this, re::MeshAttributeNames::kPatchControlHullIndices)
    || re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivStencilSizes)
    || re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivStencilIndices))
  {
    return 7;
  }
  v3 = 7;
  if (!re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivStencilOffsets))
  {
    if (re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivUVIndices))
      return 7;
    else
      return 0;
  }
  return v3;
}

void re::VideoChannelTextureHandles::invalidate(re::VideoChannelTextureHandles *this)
{
  char *v2;
  uint64_t v3;

  re::TextureHandle::invalidate(this);
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 16));
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 32));
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 48));
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 64));
  v3 = *((_QWORD *)this + 13);
  v2 = (char *)this + 104;
  *((_QWORD *)v2 - 3) = 0;
  *((_QWORD *)v2 - 2) = 0;
  *((_QWORD *)v2 - 1) = 0;
  if (v3)
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)v2);
  *(_DWORD *)(v2 + 7) = 0;
  *(_QWORD *)v2 = 0;
}

void `anonymous namespace'::registerOrSetTexture(os_unfair_lock_s *a1, re::TextureHandle *a2, void **a3)
{
  BOOL v4;
  os_unfair_lock_s *v5[2];

  if (*a3)
  {
    if (*((_QWORD *)a2 + 1))
      v4 = *(_QWORD *)a2 == 0;
    else
      v4 = 1;
    if (v4)
    {
      re::TextureManager::registerTexture(a1, a3, v5);
      re::TextureHandle::operator=(a2, (re::TextureHandle *)v5);
      re::TextureHandle::invalidate((re::TextureHandle *)v5);
    }
    else
    {
      re::TextureHandle::setMetalTexture(a2, a3);
    }
  }
}

void re::VideoChannelTextureHandles::setTextures(uint64_t a1, uint64_t a2, CVPixelBufferRef *a3, char a4, char a5, char a6, CFTypeRef *a7, __int16 *a8, char a9)
{
  unsigned int v17;
  id v18;
  __int16 v19;
  id v20;
  id v21;
  id v22;
  __CVBuffer *v23;

  v23 = 0;
  re::VideoObject<re::VideoTextureBase>::setRef((int)&v23, &v23, *a3);
  if (v23)
  {
    re::VideoTextureBase::metalTexture(&v23, &v22);
    v17 = objc_msgSend(v22, sel_pixelFormat);
  }
  else
  {
    v18 = *(id *)(a2 + 16);
    v22 = v18;
    if (*(_QWORD *)(a1 + 8) && *(_QWORD *)a1 && v18)
    {
      re::TextureHandle::setMetalTexture((const re::TextureHandle *)a1, &v22);
      v18 = v22;
    }
    v17 = objc_msgSend(v18, sel_pixelFormat);
  }
  *(_DWORD *)(a1 + 80) = v17;
  if (v22)

  v22 = 0;
  re::VideoObject<re::VideoTextureBase>::setRef((int)&v22, (__CVBuffer **)&v22, a3[1]);
  if (v22)
  {
    re::VideoTextureBase::metalTexture((__CVBuffer **)&v22, &v21);
    *(_DWORD *)(a1 + 84) = objc_msgSend(v21, sel_pixelFormat);
    if (v21)

  }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 16));
    *(_DWORD *)(a1 + 84) = 0;
  }
  v21 = 0;
  re::VideoObject<re::VideoTextureBase>::setRef((int)&v21, (__CVBuffer **)&v21, a3[2]);
  if (v21)
  {
    re::VideoTextureBase::metalTexture((__CVBuffer **)&v21, &v20);
    *(_DWORD *)(a1 + 88) = objc_msgSend(v20, sel_pixelFormat);
    if (v20)

  }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 32));
    *(_DWORD *)(a1 + 88) = 0;
  }
  *(_BYTE *)(a1 + 100) = a4;
  *(_BYTE *)(a1 + 103) = a5;
  *(_BYTE *)(a1 + 101) = a6;
  re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 104, (const void **)(a1 + 104), *a7);
  v19 = *a8;
  *(_BYTE *)(a1 + 114) = *((_BYTE *)a8 + 2);
  *(_WORD *)(a1 + 112) = v19;
  *(_BYTE *)(a1 + 102) = a9;
  if (v21)
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v21);
  if (v22)
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v22);
  if (v23)
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v23);
}

void sub_2252AC2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, id a10, id a11, uint64_t a12)
{
  if (a11)

  if (a12)
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&a12);
  _Unwind_Resume(exception_object);
}

void re::VideoChannelTextureHandles::setFallbackTextures(re::VideoChannelTextureHandles *this, id *a2)
{
  id v4;
  id v5;
  unsigned int v6;
  const void **v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v4 = a2[2];
  v12 = v4;
  v11 = a2[2];
  v10 = a2[3];
  if (*((_QWORD *)this + 1) && *(_QWORD *)this && v4)
    re::TextureHandle::setMetalTexture(this, &v12);
  if (*((_QWORD *)this + 3) && *((_QWORD *)this + 2) && v11)
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 16), &v11);
  if (*((_QWORD *)this + 5) && *((_QWORD *)this + 4) && v10)
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 32), &v10);
  *((_DWORD *)this + 20) = objc_msgSend(v12, sel_pixelFormat);
  *((_DWORD *)this + 21) = objc_msgSend(v11, sel_pixelFormat);
  *((_DWORD *)this + 22) = objc_msgSend(v10, sel_pixelFormat);
  v5 = a2[2];
  v9 = v5;
  if (*((_QWORD *)this + 7) && *((_QWORD *)this + 6) && v5)
  {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 48), &v9);
    v5 = v9;
  }
  if (*((_QWORD *)this + 9) && *((_QWORD *)this + 8) && v5)
  {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 64), &v9);
    v5 = v9;
  }
  *((_DWORD *)this + 23) = objc_msgSend(v5, sel_pixelFormat, v9);
  v6 = objc_msgSend(v9, sel_pixelFormat);
  v8 = *((_QWORD *)this + 13);
  v7 = (const void **)((char *)this + 104);
  *((_DWORD *)v7 - 2) = v6;
  *((_BYTE *)v7 - 4) = 0;
  *((_BYTE *)v7 - 1) = 0;
  if (v8)
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v7);
  *v7 = 0;
  if (v9)

  if (v10)
  if (v11)

  if (v12)
}

void sub_2252AC4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, id a10, id a11, id a12)
{
  if (a9)

  if (a10)
  if (a11)

  if (a12)
  _Unwind_Resume(exception_object);
}

void re::VideoChannelTextureHandles::setScreenFallbackTextures(re::VideoChannelTextureHandles *this, id *a2)
{
  id v4;
  id v5;
  id v6;
  unsigned int v7;
  const void **v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v4 = a2[2];
  v12 = v4;
  v5 = a2[2];
  v11 = v5;
  v6 = a2[3];
  v10 = v6;
  if (*((_QWORD *)this + 1) && *(_QWORD *)this && v4)
    re::TextureHandle::setMetalTexture(this, &v12);
  if (*((_QWORD *)this + 3) && *((_QWORD *)this + 2) && v5)
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 16), &v11);
  if (*((_QWORD *)this + 5) && *((_QWORD *)this + 4) && v6)
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 32), &v10);
  *((_DWORD *)this + 20) = objc_msgSend(v12, sel_pixelFormat);
  *((_DWORD *)this + 21) = objc_msgSend(v11, sel_pixelFormat);
  v7 = objc_msgSend(v10, sel_pixelFormat);
  v9 = *((_QWORD *)this + 13);
  v8 = (const void **)((char *)this + 104);
  *((_DWORD *)v8 - 4) = v7;
  *((_BYTE *)v8 - 4) = 0;
  *((_BYTE *)v8 - 1) = 0;
  if (v9)
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v8);
  *v8 = 0;
  if (v10)

  if (v11)
  if (v12)

}

void sub_2252AC668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id a11, id a12)
{
  if (a10)

  if (a11)
  if (a12)

  _Unwind_Resume(exception_object);
}

void re::VideoChannelTextureHandles::setTextures(uint64_t a1, uint64_t a2, id *a3, char a4, char a5, char a6, CFTypeRef *a7, __int16 *a8, char a9)
{
  id v17;
  unsigned int v18;
  id v19;
  id v20;
  unsigned int v21;
  id v22;
  __int16 v23;
  id v24;
  id v25;

  v25 = *a3;
  if (v25)
  {
    *(_DWORD *)(a1 + 80) = objc_msgSend(v25, sel_pixelFormat);
    v17 = v25;
    if (!v25)
      goto LABEL_4;
    goto LABEL_3;
  }
  v20 = *(id *)(a2 + 16);
  v24 = v20;
  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)a1 && v20)
  {
    re::TextureHandle::setMetalTexture((const re::TextureHandle *)a1, &v24);
    v20 = v24;
  }
  *(_DWORD *)(a1 + 80) = objc_msgSend(v20, sel_pixelFormat, v24);
  v17 = v24;
  if (v24)
LABEL_3:

LABEL_4:
  v25 = a3[1];
  if (v25)
  {
    v18 = objc_msgSend(v25, sel_pixelFormat);
    v19 = v25;
    *(_DWORD *)(a1 + 84) = v18;
    if (v19)

  }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 16));
    *(_DWORD *)(a1 + 84) = 0;
  }
  v25 = a3[2];
  if (v25)
  {
    v21 = objc_msgSend(v25, sel_pixelFormat);
    v22 = v25;
    *(_DWORD *)(a1 + 88) = v21;
    if (v22)

  }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 32));
    *(_DWORD *)(a1 + 88) = 0;
  }
  *(_BYTE *)(a1 + 100) = a4;
  *(_BYTE *)(a1 + 103) = a5;
  *(_BYTE *)(a1 + 101) = a6;
  re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 104, (const void **)(a1 + 104), *a7);
  v23 = *a8;
  *(_BYTE *)(a1 + 114) = *((_BYTE *)a8 + 2);
  *(_WORD *)(a1 + 112) = v23;
  *(_BYTE *)(a1 + 102) = a9;
}

void sub_2252AC854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  if (a9)

  _Unwind_Resume(exception_object);
}

void re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(__CVBuffer **a1)
{
  __CVBuffer *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *a1;
  if (v1)
  {
    CVPixelBufferRelease(v1);
  }
  else
  {
    v2 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "Video m_object is NULL", v3, 2u);
    }
  }
}

void re::VideoObject<re::VideoColorTransformBase>::setRef(int a1, const void **a2, CFTypeRef cf)
{
  if (*a2)
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a2);
  *a2 = cf;
  if (cf)
    CFRetain(cf);
}

void re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(const void **a1)
{
  const void *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *a1;
  if (v1)
  {
    CFRelease(v1);
  }
  else
  {
    v2 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "Video m_object is NULL", v3, 2u);
    }
  }
}

re::AssetHandle *re::TimelineClipAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 72));
}

void *re::TimelineGroupAssetData::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 11);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 11);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 13);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::TimelineClipAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 72;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

_QWORD *re::TimelineGroupAssetData::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[11];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[11];
  }
  if (v4)
  {
    v7 = v3[13];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void re::introspectionTable_TimelineAssetData(re *this)
{
  unsigned __int8 v1;
  re *inited;
  re *v3;
  re::IntrospectionBase *v4;
  re *v5;
  re::IntrospectionBase *v6;
  re *v7;
  re::IntrospectionBase *v8;
  re *v9;
  re::IntrospectionBase *v10;
  re *v11;
  re::IntrospectionBase *v12;
  re *v13;
  re::IntrospectionBase *v14;
  re *v15;
  re::IntrospectionBase *v16;
  re *v17;
  re::IntrospectionBase *v18;
  re *v19;
  re::IntrospectionBase *v20;
  re *v21;
  re::IntrospectionBase *v22;
  re *v23;
  re::IntrospectionBase *v24;
  re *v25;
  re::IntrospectionBase *v26;
  re *v27;
  re::IntrospectionBase *v28;
  re *v29;
  re::IntrospectionBase *v30;
  re *v31;
  re::IntrospectionBase *v32;
  re *v33;
  re::IntrospectionBase *v34;
  re *v35;
  re::IntrospectionBase *v36;
  re *v37;
  re::IntrospectionBase *v38;
  re *v39;
  re::IntrospectionBase *v40;
  re *v41;
  re::IntrospectionBase *v42;
  re *v43;
  re::IntrospectionBase *v44;
  re *v45;
  re::IntrospectionBase *v46;
  re *v47;
  re::IntrospectionBase *v48;
  re *v49;
  re::IntrospectionBase *v50;
  re *v51;
  re::IntrospectionBase *v52;
  re *v53;
  re::IntrospectionBase *v54;
  re *v55;
  re::IntrospectionBase *v56;
  re *v57;
  re::IntrospectionBase *v58;
  re *v59;
  re::IntrospectionBase *v60;
  re *v61;
  re::IntrospectionBase *v62;
  re *v63;
  re::IntrospectionBase *v64;
  re *v65;
  re::IntrospectionBase *v66;
  re *v67;
  re::IntrospectionBase *v68;
  re *v69;
  re::IntrospectionBase *v70;
  re *v71;
  re::IntrospectionBase *v72;
  re *v73;
  re::IntrospectionBase *v74;
  re *v75;
  re::IntrospectionBase *v76;
  re *v77;
  re::IntrospectionBase *v78;
  re *v79;
  re::IntrospectionBase *v80;
  re *v81;
  re::IntrospectionBase *v82;
  re *v83;
  re::IntrospectionBase *v84;
  re *v85;
  re::IntrospectionBase *v86;
  re *v87;
  re::IntrospectionBase *v88;
  re *v89;
  re::IntrospectionBase *v90;
  re *v91;
  re::IntrospectionBase *v92;
  re *v93;
  re::IntrospectionBase *v94;
  re *v95;
  re::IntrospectionBase *v96;
  re *v97;
  re::IntrospectionBase *v98;
  re *v99;
  re::IntrospectionBase *v100;

  if ((_MergedGlobals_73 & 1) == 0)
  {
    _MergedGlobals_73 = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_2540FE160);
    if ((v1 & 1) == 0)
    {
      inited = (re *)__cxa_guard_acquire(&qword_2540FE160);
      if ((_DWORD)inited)
      {
        qword_2558327E8 = (uint64_t)"TimelineClipAssetData";
        v3 = (re *)qword_2540FE188;
        if (!qword_2540FE188)
        {
          v3 = (re *)re::allocInfo_TimelineClipAssetData(inited);
          qword_2540FE188 = (uint64_t)v3;
          re::initInfo_TimelineClipAssetData(v3, v4);
        }
        qword_2558327F0 = (uint64_t)v3;
        *(_QWORD *)algn_2558327F8 = 0;
        qword_255832800 = 1;
        dword_255832808 = 0;
        qword_255832810 = (uint64_t)"TimelineGroupAssetData";
        v5 = (re *)qword_2540FE1D8;
        if (!qword_2540FE1D8)
        {
          v5 = (re *)re::allocInfo_TimelineGroupAssetData(inited);
          qword_2540FE1D8 = (uint64_t)v5;
          re::initInfo_TimelineGroupAssetData(v5, v6);
        }
        qword_255832818 = (uint64_t)v5;
        unk_255832820 = 0;
        qword_255832828 = 2;
        dword_255832830 = 0;
        qword_255832838 = (uint64_t)"FloatAnimationClipAssetData";
        v7 = (re *)re::internal::introspectionInfoStorage<re::FloatAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::FloatAnimationClipAssetData>)
        {
          v7 = (re *)re::allocInfo_FloatAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::FloatAnimationClipAssetData> = (uint64_t)v7;
          re::initInfo_FloatAnimationClipAssetData(v7, v8);
        }
        qword_255832840 = (uint64_t)v7;
        *(_QWORD *)algn_255832848 = 0;
        qword_255832850 = 3;
        dword_255832858 = 0;
        qword_255832860 = (uint64_t)"DoubleAnimationClipAssetData";
        v9 = (re *)re::internal::introspectionInfoStorage<re::DoubleAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::DoubleAnimationClipAssetData>)
        {
          v9 = (re *)re::allocInfo_DoubleAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::DoubleAnimationClipAssetData> = (uint64_t)v9;
          re::initInfo_DoubleAnimationClipAssetData(v9, v10);
        }
        qword_255832868 = (uint64_t)v9;
        unk_255832870 = 0;
        qword_255832878 = 4;
        dword_255832880 = 0;
        qword_255832888 = (uint64_t)"Vector2FAnimationClipAssetData";
        v11 = (re *)re::internal::introspectionInfoStorage<re::Vector2FAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector2FAnimationClipAssetData>)
        {
          v11 = (re *)re::allocInfo_Vector2FAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector2FAnimationClipAssetData> = (uint64_t)v11;
          re::initInfo_Vector2FAnimationClipAssetData(v11, v12);
        }
        qword_255832890 = (uint64_t)v11;
        *(_QWORD *)algn_255832898 = 0;
        qword_2558328A0 = 5;
        dword_2558328A8 = 0;
        qword_2558328B0 = (uint64_t)"Vector3FAnimationClipAssetData";
        v13 = (re *)re::internal::introspectionInfoStorage<re::Vector3FAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector3FAnimationClipAssetData>)
        {
          v13 = (re *)re::allocInfo_Vector3FAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector3FAnimationClipAssetData> = (uint64_t)v13;
          re::initInfo_Vector3FAnimationClipAssetData(v13, v14);
        }
        qword_2558328B8 = (uint64_t)v13;
        unk_2558328C0 = 0;
        qword_2558328C8 = 6;
        dword_2558328D0 = 0;
        qword_2558328D8 = (uint64_t)"Vector4FAnimationClipAssetData";
        v15 = (re *)re::internal::introspectionInfoStorage<re::Vector4FAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector4FAnimationClipAssetData>)
        {
          v15 = (re *)re::allocInfo_Vector4FAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector4FAnimationClipAssetData> = (uint64_t)v15;
          re::initInfo_Vector4FAnimationClipAssetData(v15, v16);
        }
        qword_2558328E0 = (uint64_t)v15;
        *(_QWORD *)algn_2558328E8 = 0;
        qword_2558328F0 = 7;
        dword_2558328F8 = 0;
        qword_255832900 = (uint64_t)"QuaternionFAnimationClipAssetData";
        v17 = (re *)re::internal::introspectionInfoStorage<re::QuaternionFAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::QuaternionFAnimationClipAssetData>)
        {
          v17 = (re *)re::allocInfo_QuaternionFAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::QuaternionFAnimationClipAssetData> = (uint64_t)v17;
          re::initInfo_QuaternionFAnimationClipAssetData(v17, v18);
        }
        qword_255832908 = (uint64_t)v17;
        unk_255832910 = 0;
        qword_255832918 = 8;
        dword_255832920 = 0;
        qword_255832928 = (uint64_t)"SRTAnimationClipAssetData";
        v19 = (re *)re::internal::introspectionInfoStorage<re::SRTAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SRTAnimationClipAssetData>)
        {
          v19 = (re *)re::allocInfo_SRTAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::SRTAnimationClipAssetData> = (uint64_t)v19;
          re::initInfo_SRTAnimationClipAssetData(v19, v20);
        }
        qword_255832930 = (uint64_t)v19;
        *(_QWORD *)algn_255832938 = 0;
        qword_255832940 = 9;
        dword_255832948 = 0;
        qword_255832950 = (uint64_t)"SkeletalPoseAnimationClipAssetData";
        v21 = (re *)re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationClipAssetData>)
        {
          v21 = (re *)re::allocInfo_SkeletalPoseAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationClipAssetData> = (uint64_t)v21;
          re::initInfo_SkeletalPoseAnimationClipAssetData(v21, v22);
        }
        qword_255832958 = (uint64_t)v21;
        unk_255832960 = 0;
        qword_255832968 = 10;
        dword_255832970 = 0;
        qword_255832978 = (uint64_t)"FloatAnimationAssetData";
        v23 = (re *)re::internal::introspectionInfoStorage<re::FloatAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::FloatAnimationAssetData>)
        {
          v23 = (re *)re::allocInfo_FloatAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::FloatAnimationAssetData> = (uint64_t)v23;
          re::initInfo_FloatAnimationAssetData(v23, v24);
        }
        qword_255832980 = (uint64_t)v23;
        *(_QWORD *)algn_255832988 = 0;
        qword_255832990 = 11;
        dword_255832998 = 0;
        qword_2558329A0 = (uint64_t)"DoubleAnimationAssetData";
        v25 = (re *)re::internal::introspectionInfoStorage<re::DoubleAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::DoubleAnimationAssetData>)
        {
          v25 = (re *)re::allocInfo_DoubleAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::DoubleAnimationAssetData> = (uint64_t)v25;
          re::initInfo_DoubleAnimationAssetData(v25, v26);
        }
        qword_2558329A8 = (uint64_t)v25;
        unk_2558329B0 = 0;
        qword_2558329B8 = 12;
        dword_2558329C0 = 0;
        qword_2558329C8 = (uint64_t)"Vector2FAnimationAssetData";
        v27 = (re *)re::internal::introspectionInfoStorage<re::Vector2FAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector2FAnimationAssetData>)
        {
          v27 = (re *)re::allocInfo_Vector2FAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector2FAnimationAssetData> = (uint64_t)v27;
          re::initInfo_Vector2FAnimationAssetData(v27, v28);
        }
        qword_2558329D0 = (uint64_t)v27;
        *(_QWORD *)algn_2558329D8 = 0;
        qword_2558329E0 = 13;
        dword_2558329E8 = 0;
        qword_2558329F0 = (uint64_t)"Vector3FAnimationAssetData";
        v29 = (re *)re::internal::introspectionInfoStorage<re::Vector3FAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector3FAnimationAssetData>)
        {
          v29 = (re *)re::allocInfo_Vector3FAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector3FAnimationAssetData> = (uint64_t)v29;
          re::initInfo_Vector3FAnimationAssetData(v29, v30);
        }
        qword_2558329F8 = (uint64_t)v29;
        unk_255832A00 = 0;
        qword_255832A08 = 14;
        dword_255832A10 = 0;
        qword_255832A18 = (uint64_t)"Vector4FAnimationAssetData";
        v31 = (re *)re::internal::introspectionInfoStorage<re::Vector4FAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector4FAnimationAssetData>)
        {
          v31 = (re *)re::allocInfo_Vector4FAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector4FAnimationAssetData> = (uint64_t)v31;
          re::initInfo_Vector4FAnimationAssetData(v31, v32);
        }
        qword_255832A20 = (uint64_t)v31;
        *(_QWORD *)algn_255832A28 = 0;
        qword_255832A30 = 15;
        dword_255832A38 = 0;
        qword_255832A40 = (uint64_t)"QuaternionFAnimationAssetData";
        v33 = (re *)re::internal::introspectionInfoStorage<re::QuaternionFAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::QuaternionFAnimationAssetData>)
        {
          v33 = (re *)re::allocInfo_QuaternionFAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::QuaternionFAnimationAssetData> = (uint64_t)v33;
          re::initInfo_QuaternionFAnimationAssetData(v33, v34);
        }
        qword_255832A48 = (uint64_t)v33;
        unk_255832A50 = 0;
        qword_255832A58 = 16;
        dword_255832A60 = 0;
        qword_255832A68 = (uint64_t)"SRTAnimationAssetData";
        v35 = (re *)re::internal::introspectionInfoStorage<re::SRTAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SRTAnimationAssetData>)
        {
          v35 = (re *)re::allocInfo_SRTAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::SRTAnimationAssetData> = (uint64_t)v35;
          inited = (re *)re::initInfo_SRTAnimationAssetData(v35, v36);
        }
        qword_255832A70 = (uint64_t)v35;
        *(_QWORD *)algn_255832A78 = 0;
        qword_255832A80 = 17;
        dword_255832A88 = 0;
        qword_255832A90 = (uint64_t)"SkeletalPoseAnimationAssetData";
        v37 = (re *)re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationAssetData>)
        {
          v37 = (re *)re::allocInfo_SkeletalPoseAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationAssetData> = (uint64_t)v37;
          re::initInfo_SkeletalPoseAnimationAssetData(v37, v38);
        }
        qword_255832A98 = (uint64_t)v37;
        unk_255832AA0 = 0;
        qword_255832AA8 = 18;
        dword_255832AB0 = 0;
        qword_255832AB8 = (uint64_t)"FloatKeyframeAnimationAssetData";
        v39 = (re *)qword_2540FE310;
        if (!qword_2540FE310)
        {
          v39 = (re *)re::allocInfo_FloatKeyframeAnimationAssetData(inited);
          qword_2540FE310 = (uint64_t)v39;
          re::initInfo_FloatKeyframeAnimationAssetData(v39, v40);
        }
        qword_255832AC0 = (uint64_t)v39;
        *(_QWORD *)algn_255832AC8 = 0;
        qword_255832AD0 = 19;
        dword_255832AD8 = 0;
        qword_255832AE0 = (uint64_t)"DoubleKeyframeAnimationAssetData";
        v41 = (re *)qword_2540FE328;
        if (!qword_2540FE328)
        {
          v41 = (re *)re::allocInfo_DoubleKeyframeAnimationAssetData(inited);
          qword_2540FE328 = (uint64_t)v41;
          re::initInfo_DoubleKeyframeAnimationAssetData(v41, v42);
        }
        qword_255832AE8 = (uint64_t)v41;
        unk_255832AF0 = 0;
        qword_255832AF8 = 20;
        dword_255832B00 = 0;
        qword_255832B08 = (uint64_t)"Vector2FKeyframeAnimationAssetData";
        v43 = (re *)qword_2540FE340;
        if (!qword_2540FE340)
        {
          v43 = (re *)re::allocInfo_Vector2FKeyframeAnimationAssetData(inited);
          qword_2540FE340 = (uint64_t)v43;
          re::initInfo_Vector2FKeyframeAnimationAssetData(v43, v44);
        }
        qword_255832B10 = (uint64_t)v43;
        *(_QWORD *)algn_255832B18 = 0;
        qword_255832B20 = 21;
        dword_255832B28 = 0;
        qword_255832B30 = (uint64_t)"Vector3FKeyframeAnimationAssetData";
        v45 = (re *)qword_2540FE358;
        if (!qword_2540FE358)
        {
          v45 = (re *)re::allocInfo_Vector3FKeyframeAnimationAssetData(inited);
          qword_2540FE358 = (uint64_t)v45;
          re::initInfo_Vector3FKeyframeAnimationAssetData(v45, v46);
        }
        qword_255832B38 = (uint64_t)v45;
        unk_255832B40 = 0;
        qword_255832B48 = 22;
        dword_255832B50 = 0;
        qword_255832B58 = (uint64_t)"Vector4FKeyframeAnimationAssetData";
        v47 = (re *)qword_2540FE370;
        if (!qword_2540FE370)
        {
          v47 = (re *)re::allocInfo_Vector4FKeyframeAnimationAssetData(inited);
          qword_2540FE370 = (uint64_t)v47;
          re::initInfo_Vector4FKeyframeAnimationAssetData(v47, v48);
        }
        qword_255832B60 = (uint64_t)v47;
        *(_QWORD *)algn_255832B68 = 0;
        qword_255832B70 = 23;
        dword_255832B78 = 0;
        qword_255832B80 = (uint64_t)"QuaternionFKeyframeAnimationAssetData";
        v49 = (re *)qword_2540FE388;
        if (!qword_2540FE388)
        {
          v49 = (re *)re::allocInfo_QuaternionFKeyframeAnimationAssetData(inited);
          qword_2540FE388 = (uint64_t)v49;
          re::initInfo_QuaternionFKeyframeAnimationAssetData(v49, v50);
        }
        qword_255832B88 = (uint64_t)v49;
        unk_255832B90 = 0;
        qword_255832B98 = 24;
        dword_255832BA0 = 0;
        qword_255832BA8 = (uint64_t)"SRTKeyframeAnimationAssetData";
        v51 = (re *)qword_2540FE3A0;
        if (!qword_2540FE3A0)
        {
          v51 = (re *)re::allocInfo_SRTKeyframeAnimationAssetData(inited);
          qword_2540FE3A0 = (uint64_t)v51;
          re::initInfo_SRTKeyframeAnimationAssetData(v51, v52);
        }
        qword_255832BB0 = (uint64_t)v51;
        *(_QWORD *)algn_255832BB8 = 0;
        qword_255832BC0 = 25;
        dword_255832BC8 = 0;
        qword_255832BD0 = (uint64_t)"SkeletalPoseKeyframeAnimationAssetData";
        v53 = (re *)qword_2540FE3B8;
        if (!qword_2540FE3B8)
        {
          v53 = (re *)re::allocInfo_SkeletalPoseKeyframeAnimationAssetData(inited);
          qword_2540FE3B8 = (uint64_t)v53;
          re::initInfo_SkeletalPoseKeyframeAnimationAssetData(v53, v54);
        }
        qword_255832BD8 = (uint64_t)v53;
        unk_255832BE0 = 0;
        qword_255832BE8 = 26;
        dword_255832BF0 = 0;
        qword_255832BF8 = (uint64_t)"FloatSampledAnimationAssetData";
        v55 = (re *)re::internal::introspectionInfoStorage<re::FloatSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::FloatSampledAnimationAssetData>)
        {
          v55 = (re *)re::allocInfo_FloatSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::FloatSampledAnimationAssetData> = (uint64_t)v55;
          re::initInfo_FloatSampledAnimationAssetData(v55, v56);
        }
        qword_255832C00 = (uint64_t)v55;
        *(_QWORD *)algn_255832C08 = 0;
        qword_255832C10 = 27;
        dword_255832C18 = 0;
        qword_255832C20 = (uint64_t)"DoubleSampledAnimationAssetData";
        v57 = (re *)re::internal::introspectionInfoStorage<re::DoubleSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::DoubleSampledAnimationAssetData>)
        {
          v57 = (re *)re::allocInfo_DoubleSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::DoubleSampledAnimationAssetData> = (uint64_t)v57;
          re::initInfo_DoubleSampledAnimationAssetData(v57, v58);
        }
        qword_255832C28 = (uint64_t)v57;
        unk_255832C30 = 0;
        qword_255832C38 = 28;
        dword_255832C40 = 0;
        qword_255832C48 = (uint64_t)"Vector2FSampledAnimationAssetData";
        v59 = (re *)re::internal::introspectionInfoStorage<re::Vector2FSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector2FSampledAnimationAssetData>)
        {
          v59 = (re *)re::allocInfo_Vector2FSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector2FSampledAnimationAssetData> = (uint64_t)v59;
          re::initInfo_Vector2FSampledAnimationAssetData(v59, v60);
        }
        qword_255832C50 = (uint64_t)v59;
        *(_QWORD *)algn_255832C58 = 0;
        qword_255832C60 = 29;
        dword_255832C68 = 0;
        qword_255832C70 = (uint64_t)"Vector3FSampledAnimationAssetData";
        v61 = (re *)re::internal::introspectionInfoStorage<re::Vector3FSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector3FSampledAnimationAssetData>)
        {
          v61 = (re *)re::allocInfo_Vector3FSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector3FSampledAnimationAssetData> = (uint64_t)v61;
          re::initInfo_Vector3FSampledAnimationAssetData(v61, v62);
        }
        qword_255832C78 = (uint64_t)v61;
        unk_255832C80 = 0;
        qword_255832C88 = 30;
        dword_255832C90 = 0;
        qword_255832C98 = (uint64_t)"Vector4FSampledAnimationAssetData";
        v63 = (re *)re::internal::introspectionInfoStorage<re::Vector4FSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector4FSampledAnimationAssetData>)
        {
          v63 = (re *)re::allocInfo_Vector4FSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector4FSampledAnimationAssetData> = (uint64_t)v63;
          re::initInfo_Vector4FSampledAnimationAssetData(v63, v64);
        }
        qword_255832CA0 = (uint64_t)v63;
        *(_QWORD *)algn_255832CA8 = 0;
        qword_255832CB0 = 31;
        dword_255832CB8 = 0;
        qword_255832CC0 = (uint64_t)"QuaternionFSampledAnimationAssetData";
        v65 = (re *)re::internal::introspectionInfoStorage<re::QuaternionFSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::QuaternionFSampledAnimationAssetData>)
        {
          v65 = (re *)re::allocInfo_QuaternionFSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::QuaternionFSampledAnimationAssetData> = (uint64_t)v65;
          re::initInfo_QuaternionFSampledAnimationAssetData(v65, v66);
        }
        qword_255832CC8 = (uint64_t)v65;
        unk_255832CD0 = 0;
        qword_255832CD8 = 32;
        dword_255832CE0 = 0;
        qword_255832CE8 = (uint64_t)"SRTSampledAnimationAssetData";
        v67 = (re *)re::internal::introspectionInfoStorage<re::SRTSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SRTSampledAnimationAssetData>)
        {
          v67 = (re *)re::allocInfo_SRTSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::SRTSampledAnimationAssetData> = (uint64_t)v67;
          re::initInfo_SRTSampledAnimationAssetData(v67, v68);
        }
        qword_255832CF0 = (uint64_t)v67;
        *(_QWORD *)algn_255832CF8 = 0;
        qword_255832D00 = 33;
        dword_255832D08 = 0;
        qword_255832D10 = (uint64_t)"SkeletalPoseSampledAnimationAssetData";
        v69 = (re *)re::internal::introspectionInfoStorage<re::SkeletalPoseSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SkeletalPoseSampledAnimationAssetData>)
        {
          v69 = (re *)re::allocInfo_SkeletalPoseSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::SkeletalPoseSampledAnimationAssetData> = (uint64_t)v69;
          re::initInfo_SkeletalPoseSampledAnimationAssetData(v69, v70);
        }
        qword_255832D18 = (uint64_t)v69;
        unk_255832D20 = 0;
        qword_255832D28 = 34;
        dword_255832D30 = 0;
        qword_255832D38 = (uint64_t)"OrbitAnimationAssetData";
        v71 = (re *)re::internal::introspectionInfoStorage<re::OrbitAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::OrbitAnimationAssetData>)
        {
          v71 = (re *)re::allocInfo_OrbitAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::OrbitAnimationAssetData> = (uint64_t)v71;
          re::initInfo_OrbitAnimationAssetData(v71, v72);
        }
        qword_255832D40 = (uint64_t)v71;
        *(_QWORD *)algn_255832D48 = 0;
        qword_255832D50 = 37;
        dword_255832D58 = 0;
        qword_255832D60 = (uint64_t)"AnimationStateTimelineAssetData";
        v73 = (re *)re::internal::introspectionInfoStorage<re::AnimationStateTimelineAssetData>;
        if (!re::internal::introspectionInfoStorage<re::AnimationStateTimelineAssetData>)
        {
          v73 = (re *)re::allocInfo_AnimationStateTimelineAssetData(inited);
          re::internal::introspectionInfoStorage<re::AnimationStateTimelineAssetData> = (uint64_t)v73;
          re::initInfo_AnimationStateTimelineAssetData(v73, v74);
        }
        qword_255832D68 = (uint64_t)v73;
        unk_255832D70 = 0;
        qword_255832D78 = 38;
        dword_255832D80 = 0;
        qword_255832D88 = (uint64_t)"FloatAnimationBlendTreeAssetData";
        v75 = (re *)re::internal::introspectionInfoStorage<re::FloatAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::FloatAnimationBlendTreeAssetData>)
        {
          v75 = (re *)re::allocInfo_FloatAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::FloatAnimationBlendTreeAssetData> = (uint64_t)v75;
          re::initInfo_FloatAnimationBlendTreeAssetData(v75, v76);
        }
        qword_255832D90 = (uint64_t)v75;
        *(_QWORD *)algn_255832D98 = 0;
        qword_255832DA0 = 39;
        dword_255832DA8 = 0;
        qword_255832DB0 = (uint64_t)"DoubleAnimationBlendTreeAssetData";
        v77 = (re *)re::internal::introspectionInfoStorage<re::DoubleAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::DoubleAnimationBlendTreeAssetData>)
        {
          v77 = (re *)re::allocInfo_DoubleAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::DoubleAnimationBlendTreeAssetData> = (uint64_t)v77;
          re::initInfo_DoubleAnimationBlendTreeAssetData(v77, v78);
        }
        qword_255832DB8 = (uint64_t)v77;
        unk_255832DC0 = 0;
        qword_255832DC8 = 40;
        dword_255832DD0 = 0;
        qword_255832DD8 = (uint64_t)"Vector2FAnimationBlendTreeAssetData";
        v79 = (re *)re::internal::introspectionInfoStorage<re::Vector2FAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector2FAnimationBlendTreeAssetData>)
        {
          v79 = (re *)re::allocInfo_Vector2FAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector2FAnimationBlendTreeAssetData> = (uint64_t)v79;
          re::initInfo_Vector2FAnimationBlendTreeAssetData(v79, v80);
        }
        qword_255832DE0 = (uint64_t)v79;
        *(_QWORD *)algn_255832DE8 = 0;
        qword_255832DF0 = 41;
        dword_255832DF8 = 0;
        qword_255832E00 = (uint64_t)"Vector3FAnimationBlendTreeAssetData";
        v81 = (re *)re::internal::introspectionInfoStorage<re::Vector3FAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector3FAnimationBlendTreeAssetData>)
        {
          v81 = (re *)re::allocInfo_Vector3FAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector3FAnimationBlendTreeAssetData> = (uint64_t)v81;
          re::initInfo_Vector3FAnimationBlendTreeAssetData(v81, v82);
        }
        qword_255832E08 = (uint64_t)v81;
        unk_255832E10 = 0;
        qword_255832E18 = 42;
        dword_255832E20 = 0;
        qword_255832E28 = (uint64_t)"Vector4FAnimationBlendTreeAssetData";
        v83 = (re *)re::internal::introspectionInfoStorage<re::Vector4FAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::Vector4FAnimationBlendTreeAssetData>)
        {
          v83 = (re *)re::allocInfo_Vector4FAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::Vector4FAnimationBlendTreeAssetData> = (uint64_t)v83;
          re::initInfo_Vector4FAnimationBlendTreeAssetData(v83, v84);
        }
        qword_255832E30 = (uint64_t)v83;
        *(_QWORD *)algn_255832E38 = 0;
        qword_255832E40 = 43;
        dword_255832E48 = 0;
        qword_255832E50 = (uint64_t)"QuaternionFAnimationBlendTreeAssetData";
        v85 = (re *)re::internal::introspectionInfoStorage<re::QuaternionFAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::QuaternionFAnimationBlendTreeAssetData>)
        {
          v85 = (re *)re::allocInfo_QuaternionFAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::QuaternionFAnimationBlendTreeAssetData> = (uint64_t)v85;
          re::initInfo_QuaternionFAnimationBlendTreeAssetData(v85, v86);
        }
        qword_255832E58 = (uint64_t)v85;
        unk_255832E60 = 0;
        qword_255832E68 = 44;
        dword_255832E70 = 0;
        qword_255832E78 = (uint64_t)"SRTAnimationBlendTreeAssetData";
        v87 = (re *)re::internal::introspectionInfoStorage<re::SRTAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SRTAnimationBlendTreeAssetData>)
        {
          v87 = (re *)re::allocInfo_SRTAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::SRTAnimationBlendTreeAssetData> = (uint64_t)v87;
          re::initInfo_SRTAnimationBlendTreeAssetData(v87, v88);
        }
        qword_255832E80 = (uint64_t)v87;
        *(_QWORD *)algn_255832E88 = 0;
        qword_255832E90 = 45;
        dword_255832E98 = 0;
        qword_255832EA0 = (uint64_t)"SkeletalPoseAnimationBlendTreeAssetData";
        v89 = (re *)re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationBlendTreeAssetData>;
        if (!re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationBlendTreeAssetData>)
        {
          v89 = (re *)re::allocInfo_SkeletalPoseAnimationBlendTreeAssetData(inited);
          re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationBlendTreeAssetData> = (uint64_t)v89;
          re::initInfo_SkeletalPoseAnimationBlendTreeAssetData(v89, v90);
        }
        qword_255832EA8 = (uint64_t)v89;
        unk_255832EB0 = 0;
        qword_255832EB8 = 46;
        dword_255832EC0 = 0;
        qword_255832EC8 = (uint64_t)"EventTimelineAssetData";
        v91 = (re *)re::internal::introspectionInfoStorage<re::EventTimelineAssetData>;
        if (!re::internal::introspectionInfoStorage<re::EventTimelineAssetData>)
        {
          v91 = (re *)re::allocInfo_EventTimelineAssetData(inited);
          re::internal::introspectionInfoStorage<re::EventTimelineAssetData> = (uint64_t)v91;
          re::initInfo_EventTimelineAssetData(v91, v92);
        }
        qword_255832ED0 = (uint64_t)v91;
        *(_QWORD *)algn_255832ED8 = 0;
        qword_255832EE0 = 48;
        dword_255832EE8 = 0;
        qword_255832EF0 = (uint64_t)"BlendShapeWeightsAnimationAssetData";
        v93 = (re *)re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationAssetData>)
        {
          v93 = (re *)re::allocInfo_BlendShapeWeightsAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationAssetData> = (uint64_t)v93;
          re::initInfo_BlendShapeWeightsAnimationAssetData(v93, v94);
        }
        qword_255832EF8 = (uint64_t)v93;
        unk_255832F00 = 0;
        qword_255832F08 = 50;
        dword_255832F10 = 0;
        qword_255832F18 = (uint64_t)"BlendShapeWeightsSampledAnimationAssetData";
        v95 = (re *)re::internal::introspectionInfoStorage<re::BlendShapeWeightsSampledAnimationAssetData>;
        if (!re::internal::introspectionInfoStorage<re::BlendShapeWeightsSampledAnimationAssetData>)
        {
          v95 = (re *)re::allocInfo_BlendShapeWeightsSampledAnimationAssetData(inited);
          re::internal::introspectionInfoStorage<re::BlendShapeWeightsSampledAnimationAssetData> = (uint64_t)v95;
          re::initInfo_BlendShapeWeightsSampledAnimationAssetData(v95, v96);
        }
        qword_255832F20 = (uint64_t)v95;
        *(_QWORD *)algn_255832F28 = 0;
        qword_255832F30 = 59;
        dword_255832F38 = 0;
        qword_255832F40 = (uint64_t)"BlendShapeWeightsAnimationClipAssetData";
        v97 = (re *)re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationClipAssetData>;
        if (!re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationClipAssetData>)
        {
          v97 = (re *)re::allocInfo_BlendShapeWeightsAnimationClipAssetData(inited);
          re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationClipAssetData> = (uint64_t)v97;
          re::initInfo_BlendShapeWeightsAnimationClipAssetData(v97, v98);
        }
        qword_255832F48 = (uint64_t)v97;
        unk_255832F50 = 0;
        qword_255832F58 = 60;
        dword_255832F60 = 0;
        qword_255832F68 = (uint64_t)"BlendShapeWeightsKeyframeAnimationAssetData";
        v99 = (re *)qword_2540FE3D0;
        if (!qword_2540FE3D0)
        {
          v99 = (re *)re::allocInfo_BlendShapeWeightsKeyframeAnimationAssetData(inited);
          qword_2540FE3D0 = (uint64_t)v99;
          re::initInfo_BlendShapeWeightsKeyframeAnimationAssetData(v99, v100);
        }
        qword_255832F70 = (uint64_t)v99;
        *(_QWORD *)algn_255832F78 = 0;
        qword_255832F80 = 61;
        dword_255832F88 = 0;
        __cxa_guard_release(&qword_2540FE160);
      }
    }
    dword_2540FE638 = 49;
    qword_2540FE640 = (uint64_t)&qword_2558327E8;
  }
}

void *re::allocInfo_TimelineAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE168);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE168))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830C40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "TimelineAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE168);
  }
  return &unk_255830C40;
}

void re::initInfo_TimelineAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  re *v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  __int128 v30;

  v29[0] = 0x113B1170876036B2;
  v29[1] = "TimelineAssetData";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE170);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE170);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_TimelineType((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v9 = 3;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 8;
      qword_2540FE910 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::introspectionTable_TimelineAssetData((re *)v10);
      v11 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 16, 8);
      *(_DWORD *)v11 = 2;
      *((_QWORD *)v11 + 1) = &dword_2540FE638;
      qword_2540FE918 = (uint64_t)v11;
      v12 = re::introspectionAllocator(v11);
      v14 = re::introspect_int((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "animationLayer";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0xC00000001;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2540FE920 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_FillMode((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "fillMode";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x1000000002;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2540FE928 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::IntrospectionInfo<re::StringID>::get(1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "name";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x1800000003;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2540FE930 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::IntrospectionInfo<re::DynamicString>::get(1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "targetPath";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x2800000004;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2540FE938 = v27;
      __cxa_guard_release(&qword_2540FE170);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_2540FE910;
  re::IntrospectionRegistry::add(this, v3);
  v28 = v30;
}

uint64_t re::introspect_TimelineAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineAssetData", (uint64_t (*)(re::internal *))re::allocInfo_TimelineAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TimelineAssetData>, this);
}

void *re::allocInfo_TimelineClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE178);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE178))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830CB8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "TimelineClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE178);
  }
  return &unk_255830CB8;
}

void re::initInfo_TimelineClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[2];
  __int128 v46;

  v45[0] = 0x180D6CB9D5D9D4D2;
  v45[1] = "TimelineClipAssetData";
  re::StringID::destroyString((re::StringID *)v45);
  *((_OWORD *)this + 2) = v46;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE180);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE180);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FF0C8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_AssetHandle((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "clipSource";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FF0D0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v15, v16);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "clipStart";
      *(_QWORD *)(v17 + 16) = &qword_2540FED38;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x6000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FF0D8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "clipEnd";
      *(_QWORD *)(v20 + 16) = &qword_2540FED38;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x7000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FF0E0 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_double((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipOffset";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x8000000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FF0E8 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_BOOL((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipReversed";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2540FF0F0 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_double((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "delay";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2540FF0F8 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v33, v34);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "duration";
      *(_QWORD *)(v35 + 16) = &qword_2540FED38;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_2540FF100 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::introspect_float((re *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "speed";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA800000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_2540FF108 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_LoopBehavior((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "loopBehavior";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xAC00000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_2540FF110 = v43;
      __cxa_guard_release(&qword_2540FE180);
    }
  }
  *((_QWORD *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &qword_2540FF0C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TimelineClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TimelineClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TimelineClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TimelineClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v44 = v46;
}

void re::IntrospectionInfo<re::Optional<double>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  __int128 v9;
  __int128 v10;
  const char *v11;
  uint64_t v12[2];

  v2 = atomic_load((unsigned __int8 *)&qword_2540FE5D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5D0))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FED38);
    qword_2540FED38 = (uint64_t)&off_24ED31BC0;
    __cxa_guard_release(&qword_2540FE5D0);
  }
  if ((byte_2540FE152 & 1) == 0)
  {
    v3 = re::introspect_double((re *)1, a2);
    if ((byte_2540FE152 & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_2540FE152 = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FED38, 0);
      qword_2540FED48 = 0x100000000DLL;
      dword_2540FED50 = v5;
      word_2540FED54 = 0;
      *(_QWORD *)&xmmword_2540FED58 = 0;
      *((_QWORD *)&xmmword_2540FED58 + 1) = 0xFFFFFFFFLL;
      qword_2540FED68 = v4;
      qword_2540FED70 = 0;
      qword_2540FED38 = (uint64_t)&off_24ED31BC0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FED38, (const re::IntrospectionBase *)&v10);
      if ((BYTE8(v10) & 1) != 0)
        v8 = v11;
      else
        v8 = (char *)&v10 + 9;
      if ((_QWORD)v10)
      {
        if ((BYTE8(v10) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v10 + 40))();
      }
      v10 = *(_OWORD *)(v4 + 32);
      xmmword_2540FED58 = v9;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::TimelineClipAssetData *re::internal::defaultConstruct<re::TimelineClipAssetData>(int a1, int a2, re::TimelineClipAssetData *this)
{
  return re::TimelineClipAssetData::TimelineClipAssetData(this);
}

void re::internal::defaultDestruct<re::TimelineClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

void re::internal::defaultDestructV2<re::TimelineClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SkeletalPoseAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE190);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE190))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830D30, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SkeletalPoseAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE190);
  }
  return &unk_255830D30;
}

void re::initInfo_SkeletalPoseAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x1C1B4EE87EA175E0;
  v13[1] = "SkeletalPoseAssetData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE198);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE198);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "jointTransforms";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2540FE648 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_SkeletalPose((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 64, 8);
      *(_DWORD *)v11 = 6;
      *(_QWORD *)(v11 + 8) = 2;
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = re::skeletalPoseAssetDataUpgrade;
      *(_BYTE *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_DWORD *)(v11 + 56) = 0;
      qword_2540FE650 = v11;
      __cxa_guard_release(&qword_2540FE198);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FE648;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

uint64_t re::skeletalPoseAssetDataUpgrade(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::FixedArray<re::GenericSRT<float>>::operator=(a3, a2 + 16);
  return 1;
}

void re::internal::defaultConstruct<re::SkeletalPoseAssetData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

uint64_t re::internal::defaultDestruct<re::SkeletalPoseAssetData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v5;

  result = *a3;
  if (*a3)
  {
    v5 = a3 + 1;
    if (a3[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a3[2]);
      *v5 = 0;
      v5[1] = 0;
    }
    *a3 = 0;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::SkeletalPoseAssetData>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SkeletalPoseAssetData>(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

void *re::allocInfo_BlendShapeWeightsAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE1A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE1A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830DA8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "BlendShapeWeightsAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE1A8);
  }
  return &unk_255830DA8;
}

void re::initInfo_BlendShapeWeightsAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0x881012FFB378BC1ELL;
  v11[1] = "BlendShapeWeightsAssetData";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE1B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE1B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "weights";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FE1B0 = v9;
      __cxa_guard_release(&qword_2540FE1B8);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FE1B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void re::internal::defaultConstruct<re::BlendShapeWeightsAssetData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

uint64_t re::internal::defaultDestruct<re::BlendShapeWeightsAssetData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v5;

  result = *a3;
  if (*a3)
  {
    v5 = a3 + 1;
    if (a3[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a3[2]);
      *v5 = 0;
      v5[1] = 0;
    }
    *a3 = 0;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::BlendShapeWeightsAssetData>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::BlendShapeWeightsAssetData>(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

void *re::allocInfo_TimelineGroupAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE1C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE1C8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830E20, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "TimelineGroupAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE1C8);
  }
  return &unk_255830E20;
}

void re::initInfo_TimelineGroupAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x81187C4B31D4B78;
  v16[1] = "TimelineGroupAssetData";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE1D0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE1D0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE658 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "timelines";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE660 = v14;
      __cxa_guard_release(&qword_2540FE1D0);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FE658;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TimelineGroupAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TimelineGroupAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TimelineGroupAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TimelineGroupAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

re::DynamicString *re::internal::defaultConstruct<re::TimelineGroupAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 2;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_QWORD *)a3 = off_24ED31B68;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

void re::internal::defaultDestruct<re::TimelineGroupAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::DynamicArray<re::AssetHandle>::deinit(a3 + 72);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

re::DynamicString *re::internal::defaultConstructV2<re::TimelineGroupAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_QWORD *)a1 = off_24ED31B68;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::TimelineGroupAssetData>(uint64_t a1)
{
  uint64_t v2;

  re::DynamicArray<re::AssetHandle>::deinit(a1 + 72);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_FloatAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE1E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE1E0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830E98, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "FloatAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE1E0);
  }
  return &unk_255830E98;
}

void re::initInfo_FloatAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0x81043F4DEFE98304;
  v49[1] = "FloatAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE1E8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE1E8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830810 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830818 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830820 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255830828 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830830 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255830838 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255830840 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_255830848 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_255830850 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_255830858 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_255830860 = v47;
      __cxa_guard_release(&qword_2540FE1E8);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830810;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FloatAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FloatAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FloatAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FloatAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::FloatAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<float>::AnimationClipAssetData(a3, 3);
  *result = off_24ED31C40;
  return result;
}

void re::internal::defaultDestruct<re::FloatAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED31CB0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::FloatAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<float>::AnimationClipAssetData(a1, 3);
  *result = off_24ED31C40;
  return result;
}

void re::internal::defaultDestructV2<re::FloatAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED31CB0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_DoubleAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE1F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE1F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830F10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "DoubleAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE1F0);
  }
  return &unk_255830F10;
}

void re::initInfo_DoubleAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0x85C7595DE59F22EELL;
  v49[1] = "DoubleAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE1F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE1F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830868 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830870 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830878 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255830880 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830888 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255830890 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255830898 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_2558308A0 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_2558308A8 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_2558308B0 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_2558308B8 = v47;
      __cxa_guard_release(&qword_2540FE1F8);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830868;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DoubleAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DoubleAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DoubleAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DoubleAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::DoubleAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<double>::AnimationClipAssetData(a3, 4);
  *result = off_24ED31CF0;
  return result;
}

void re::internal::defaultDestruct<re::DoubleAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED31D78;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::DoubleAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<double>::AnimationClipAssetData(a1, 4);
  *result = off_24ED31CF0;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED31D78;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector2FAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE200);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE200))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255830F88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector2FAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE200);
  }
  return &unk_255830F88;
}

void re::initInfo_Vector2FAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0xF3DCDF9C9990FFALL;
  v49[1] = "Vector2FAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE208);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE208);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2558308C0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2558308C8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2558308D0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2558308D8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2558308E0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2558308E8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2558308F0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_2558308F8 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_255830900 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_255830908 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_255830910 = v47;
      __cxa_guard_release(&qword_2540FE208);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_2558308C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector2FAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector2FAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector2FAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector2FAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::Vector2FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(a3, 5);
  *result = off_24ED31DB8;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED31E40;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::Vector2FAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(a1, 5);
  *result = off_24ED31DB8;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED31E40;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector3FAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE210);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE210))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831000, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector3FAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE210);
  }
  return &unk_255831000;
}

void re::initInfo_Vector3FAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0x447BD129C19C2DB8;
  v49[1] = "Vector3FAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE218);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE218);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830918 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830920 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830928 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255830930 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830938 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255830940 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255830948 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_255830950 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_255830958 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_255830960 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_255830968 = v47;
      __cxa_guard_release(&qword_2540FE218);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830918;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector3FAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector3FAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector3FAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector3FAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::Vector3FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(a3, 6);
  *result = off_24ED31E80;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED31F08;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::Vector3FAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(a1, 6);
  *result = off_24ED31E80;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED31F08;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector4FAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE220);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE220))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831078, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector4FAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE220);
  }
  return &unk_255831078;
}

void re::initInfo_Vector4FAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0x79B9D459B99F4B76;
  v49[1] = "Vector4FAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE228);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE228);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830970 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830978 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830980 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255830988 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830990 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255830998 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2558309A0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_2558309A8 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_2558309B0 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_2558309B8 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_2558309C0 = v47;
      __cxa_guard_release(&qword_2540FE228);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830970;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector4FAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector4FAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector4FAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector4FAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::Vector4FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(a3, 7);
  *result = off_24ED31F48;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED31FD0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::Vector4FAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(a1, 7);
  *result = off_24ED31F48;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED31FD0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_QuaternionFAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE230);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE230))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558310F0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "QuaternionFAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE230);
  }
  return &unk_2558310F0;
}

void re::initInfo_QuaternionFAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0xAA4CD8A06333BE1CLL;
  v49[1] = "QuaternionFAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE238);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE238);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2558309C8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2558309D0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2558309D8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2558309E0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2558309E8 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2558309F0 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2558309F8 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_255830A00 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_255830A08 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_255830A10 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_255830A18 = v47;
      __cxa_guard_release(&qword_2540FE238);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_2558309C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::QuaternionFAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::QuaternionFAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::QuaternionFAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(a3, 8);
  *result = off_24ED32010;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED32098;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::QuaternionFAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(a1, 8);
  *result = off_24ED32010;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED32098;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SRTAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE240);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE240))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831168, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SRTAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE240);
  }
  return &unk_255831168;
}

void re::initInfo_SRTAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0xD82E923A091050B6;
  v49[1] = "SRTAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE248);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE248);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830A20 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830A28 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830A30 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255830A38 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830A40 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255830A48 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255830A50 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_255830A58 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_255830A60 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_255830A68 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_255830A70 = v47;
      __cxa_guard_release(&qword_2540FE248);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830A20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SRTAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SRTAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SRTAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SRTAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::SRTAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(a3, 9);
  *result = off_24ED320D8;
  return result;
}

void re::internal::defaultDestruct<re::SRTAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED32160;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::SRTAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(a1, 9);
  *result = off_24ED320D8;
  return result;
}

void re::internal::defaultDestructV2<re::SRTAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED32160;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SkeletalPoseAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE250);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE250))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558311E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SkeletalPoseAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE250);
  }
  return &unk_2558311E0;
}

void re::initInfo_SkeletalPoseAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0xE138794DB1523760;
  v49[1] = "SkeletalPoseAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE258);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE258);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830A78 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830A80 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830A88 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255830A90 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830A98 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255830AA0 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255830AA8 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_255830AB0 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_255830AB8 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_255830AC0 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_255830AC8 = v47;
      __cxa_guard_release(&qword_2540FE258);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830A78;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::SkeletalPoseAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(a3, 10);
  *result = off_24ED321A0;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalPoseAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED32228;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::SkeletalPoseAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(a1, 10);
  *result = off_24ED321A0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED32228;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_BlendShapeWeightsAnimationClipAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE260);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE260))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831258, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "BlendShapeWeightsAnimationClipAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE260);
  }
  return &unk_255831258;
}

void re::initInfo_BlendShapeWeightsAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0xC1495BD0AAB385E2;
  v49[1] = "BlendShapeWeightsAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE268);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE268);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830AD0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830AD8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "clipSource";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830AE0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "clipStart";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_255830AE8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "clipEnd";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830AF0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_double((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "clipOffset";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x8800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_255830AF8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "clipReversed";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255830B00 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_double((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "delay";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_255830B08 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "duration";
      *(_QWORD *)(v39 + 16) = &qword_2540FED38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0xA000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_255830B10 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "speed";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_255830B18 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_LoopBehavior((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "loopBehavior";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_255830B20 = v47;
      __cxa_guard_release(&qword_2540FE268);
    }
  }
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830AD0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsAnimationClipAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsAnimationClipAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationClipAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

_QWORD *re::internal::defaultConstruct<re::BlendShapeWeightsAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(a3, 60);
  *result = off_24ED32268;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED322F0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

_QWORD *re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationClipAssetData>(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(a1, 60);
  *result = off_24ED32268;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationClipAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED322F0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_FloatAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE270);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE270))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558312D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "FloatAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE270);
  }
  return &unk_2558312D0;
}

void re::initInfo_FloatAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[2];
  __int128 v35;

  v34[0] = 0x3AD6F4DDD7D2CDE4;
  v34[1] = "FloatAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE278);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE278);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE970 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE978 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE980 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::Optional<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "from";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5800000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE988 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::IntrospectionInfo<re::Optional<float>>::get(1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "to";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x6000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FE990 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::IntrospectionInfo<re::Optional<float>>::get(1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "by";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x6800000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FE998 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "easingFunction";
      *(_QWORD *)(v32 + 16) = &qword_2540FED78;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x7000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2540FE9A0 = v32;
      __cxa_guard_release(&qword_2540FE278);
    }
  }
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FE970;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FloatAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FloatAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FloatAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FloatAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v33 = v35;
}

uint64_t *re::IntrospectionInfo<re::Optional<float>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info = (uint64_t)&off_24ED32330;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::introspect_float((re *)1, a2);
  if (re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info, 0);
    qword_255800C08 = 0x80000000DLL;
    dword_255800C10 = v11;
    word_255800C14 = 0;
    *(_QWORD *)&xmmword_255800C18 = 0;
    *((_QWORD *)&xmmword_255800C18 + 1) = 0xFFFFFFFFLL;
    qword_255800C28 = v10;
    unk_255800C30 = 0;
    re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info = (uint64_t)&off_24ED32330;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255800C18 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info;
}

void re::IntrospectionInfo<re::EasingFunction *>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  re::IntrospectionRegistry *v2;
  const re::IntrospectionBase *v3;
  const char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const char *v8;
  unint64_t v9;
  char *__s1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FE5D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5D8))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2540FED78);
    __cxa_guard_release(&qword_2540FE5D8);
  }
  if ((byte_2540FE153 & 1) == 0)
  {
    byte_2540FE153 = 1;
    v1 = re::introspect_EasingFunction((re::IntrospectionBase **)1);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FED78, 0);
    qword_2540FED88 = 0x800000001;
    dword_2540FED90 = 8;
    word_2540FED94 = 0;
    *(_QWORD *)&xmmword_2540FED98 = 0;
    *((_QWORD *)&xmmword_2540FED98 + 1) = 0xFFFFFFFFLL;
    qword_2540FED78 = (uint64_t)&off_24ED30800;
    qword_2540FEDA8 = v1;
    qword_2540FEDB0 = 0;
    re::IntrospectionRegistry::add(v2, v3);
    re::getPrettyTypeName((re *)&qword_2540FED78, (const re::IntrospectionBase *)&v7);
    if ((BYTE8(v7) & 1) != 0)
      v4 = v8;
    else
      v4 = (char *)&v7 + 9;
    if ((_QWORD)v7 && (BYTE8(v7) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v7 + 40))();
    if (v9 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      v5 = v7;
    }
    else
    {
      v7 = *(_OWORD *)(v1 + 32);
      v5 = v6;
    }
    xmmword_2540FED98 = v5;
    re::StringID::destroyString((re::StringID *)&v9);
  }
}

re::DynamicString *re::internal::defaultConstruct<re::FloatAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 11;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = &off_24ED364A0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::FloatAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<float>::~FromToByAnimationAssetData(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::FloatAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 11;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = &off_24ED364A0;
  return result;
}

void *re::allocInfo_DoubleAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE280);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE280))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831348, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "DoubleAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE280);
  }
  return &unk_255831348;
}

void re::initInfo_DoubleAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0xC8A4BF5B7858F2CELL;
  v31[1] = "DoubleAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE288);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE288);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE9A8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE9B0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE9B8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "from";
      *(_QWORD *)(v21 + 16) = &qword_2540FED38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x5800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE9C0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "to";
      *(_QWORD *)(v24 + 16) = &qword_2540FED38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x6800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FE9C8 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v25, v26);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "by";
      *(_QWORD *)(v27 + 16) = &qword_2540FED38;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x7800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2540FE9D0 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "easingFunction";
      *(_QWORD *)(v29 + 16) = &qword_2540FED78;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x8800000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2540FE9D8 = v29;
      __cxa_guard_release(&qword_2540FE288);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FE9A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DoubleAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DoubleAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DoubleAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DoubleAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

re::DynamicString *re::internal::defaultConstruct<re::DoubleAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 12;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)a3 = &off_24ED323B0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::DoubleAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<double>::~FromToByAnimationAssetData(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::DoubleAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 12;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_24ED323B0;
  return result;
}

void *re::allocInfo_Vector2FAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE290);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE290))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558313C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector2FAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE290);
  }
  return &unk_2558313C0;
}

void re::initInfo_Vector2FAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0x2550EAB3730B45DALL;
  v28[1] = "Vector2FAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE298);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE298);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE9E0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE9E8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE9F0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get();
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "from";
      *(_QWORD *)(v20 + 16) = &qword_2540FEDB8;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x5800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FE9F8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get();
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "to";
      *(_QWORD *)(v22 + 16) = &qword_2540FEDB8;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x6800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEA00 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get();
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "by";
      *(_QWORD *)(v24 + 16) = &qword_2540FEDB8;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FEA08 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "easingFunction";
      *(_QWORD *)(v26 + 16) = &qword_2540FED78;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x8800000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEA10 = v26;
      __cxa_guard_release(&qword_2540FE298);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FE9E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector2FAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector2FAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector2FAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector2FAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

void re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FE5E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5E0))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FEDB8);
    qword_2540FEDB8 = (uint64_t)&off_24ED32460;
    __cxa_guard_release(&qword_2540FE5E0);
  }
  if ((byte_2540FE154 & 1) == 0)
  {
    v1 = re::introspect_Vector2F((re::IntrospectionBase **)1);
    if ((byte_2540FE154 & 1) == 0)
    {
      v2 = v1;
      byte_2540FE154 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEDB8, 0);
      qword_2540FEDC8 = 0x100000000DLL;
      dword_2540FEDD0 = v3;
      word_2540FEDD4 = 0;
      *(_QWORD *)&xmmword_2540FEDD8 = 0;
      *((_QWORD *)&xmmword_2540FEDD8 + 1) = 0xFFFFFFFFLL;
      qword_2540FEDE8 = v2;
      qword_2540FEDF0 = 0;
      qword_2540FEDB8 = (uint64_t)&off_24ED32460;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2540FEDB8, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x10uLL, 8uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2540FEDD8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::DynamicString *re::internal::defaultConstruct<re::Vector2FAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 13;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)a3 = &off_24ED324E0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::Vector2FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Vector2<float>>::~FromToByAnimationAssetData(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::Vector2FAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 13;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_24ED324E0;
  return result;
}

void *re::allocInfo_Vector3FAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE2A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE2A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831438, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector3FAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE2A0);
  }
  return &unk_255831438;
}

void re::initInfo_Vector3FAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0xF47507A9424EF298;
  v31[1] = "Vector3FAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE2A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE2A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEA18 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEA20 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEA28 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v20 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "from";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FEA30 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v23 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "to";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x8000000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FEA38 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v26 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "by";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0xA000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2540FEA40 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "easingFunction";
      *(_QWORD *)(v29 + 16) = &qword_2540FED78;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0xC000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2540FEA48 = v29;
      __cxa_guard_release(&qword_2540FE2A8);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEA18;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector3FAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector3FAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector3FAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector3FAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

uint64_t *re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  std::__shared_mutex_base *v7;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v2 & 1) == 0
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info = (uint64_t)&off_24ED32590;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (re *)re::introspect_Vector3F((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info, 0);
    qword_255800C58 = 0x200000000DLL;
    dword_255800C60 = v10;
    word_255800C64 = 0;
    *(_QWORD *)&xmmword_255800C68 = 0;
    *((_QWORD *)&xmmword_255800C68 + 1) = 0xFFFFFFFFLL;
    qword_255800C78 = v9;
    unk_255800C80 = 0;
    re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info = (uint64_t)&off_24ED32590;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *(_OWORD *)(v9 + 32);
    xmmword_255800C68 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info;
}

re::DynamicString *re::internal::defaultConstruct<re::Vector3FAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 14;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)a3 = &off_24ED32610;
  return result;
}

uint64_t re::internal::defaultDestruct<re::Vector3FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Vector3<float>>::~FromToByAnimationAssetData(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::Vector3FAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 14;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)a1 = &off_24ED32610;
  return result;
}

void *re::allocInfo_Vector4FAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE2B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE2B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558314B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector4FAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE2B0);
  }
  return &unk_2558314B0;
}

void re::initInfo_Vector4FAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0xC399249F11929F56;
  v28[1] = "Vector4FAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE2B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE2B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEA50 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEA58 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEA60 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get();
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "from";
      *(_QWORD *)(v20 + 16) = &qword_2540FEDF8;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x6000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FEA68 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get();
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "to";
      *(_QWORD *)(v22 + 16) = &qword_2540FEDF8;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x8000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEA70 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get();
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "by";
      *(_QWORD *)(v24 + 16) = &qword_2540FEDF8;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0xA000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FEA78 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "easingFunction";
      *(_QWORD *)(v26 + 16) = &qword_2540FED78;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xC000000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEA80 = v26;
      __cxa_guard_release(&qword_2540FE2B8);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEA50;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector4FAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector4FAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector4FAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector4FAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

void re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FE5E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5E8))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FEDF8);
    qword_2540FEDF8 = (uint64_t)&off_24ED326C0;
    __cxa_guard_release(&qword_2540FE5E8);
  }
  if ((byte_2540FE155 & 1) == 0)
  {
    v1 = re::introspect_Vector4F((re::IntrospectionBase **)1);
    if ((byte_2540FE155 & 1) == 0)
    {
      v2 = v1;
      byte_2540FE155 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEDF8, 0);
      qword_2540FEE08 = 0x200000000DLL;
      dword_2540FEE10 = v3;
      word_2540FEE14 = 0;
      *(_QWORD *)&xmmword_2540FEE18 = 0;
      *((_QWORD *)&xmmword_2540FEE18 + 1) = 0xFFFFFFFFLL;
      qword_2540FEE28 = v2;
      qword_2540FEE30 = 0;
      qword_2540FEDF8 = (uint64_t)&off_24ED326C0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2540FEDF8, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x20uLL, 0x10uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2540FEE18 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::DynamicString *re::internal::defaultConstruct<re::Vector4FAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)a3 = &off_24ED32740;
  return result;
}

uint64_t re::internal::defaultDestruct<re::Vector4FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Vector4<float>>::~FromToByAnimationAssetData(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::Vector4FAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 15;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)a1 = &off_24ED32740;
  return result;
}

void *re::allocInfo_QuaternionFAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE2C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE2C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831528, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "QuaternionFAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE2C0);
  }
  return &unk_255831528;
}

void re::initInfo_QuaternionFAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0x744531879CE654FCLL;
  v28[1] = "QuaternionFAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE2C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE2C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEA88 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEA90 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEA98 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get();
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "from";
      *(_QWORD *)(v20 + 16) = &qword_2540FEE38;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x6000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FEAA0 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get();
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "to";
      *(_QWORD *)(v22 + 16) = &qword_2540FEE38;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x8000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEAA8 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get();
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "by";
      *(_QWORD *)(v24 + 16) = &qword_2540FEE38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0xA000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FEAB0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "easingFunction";
      *(_QWORD *)(v26 + 16) = &qword_2540FED78;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xC000000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEAB8 = v26;
      __cxa_guard_release(&qword_2540FE2C8);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEA88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::QuaternionFAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::QuaternionFAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

void re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FE5F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5F0))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FEE38);
    qword_2540FEE38 = (uint64_t)&off_24ED327F0;
    __cxa_guard_release(&qword_2540FE5F0);
  }
  if ((byte_2540FE156 & 1) == 0)
  {
    v1 = re::introspect_QuaternionF((re::IntrospectionBase **)1);
    if ((byte_2540FE156 & 1) == 0)
    {
      v2 = v1;
      byte_2540FE156 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEE38, 0);
      qword_2540FEE48 = 0x200000000DLL;
      dword_2540FEE50 = v3;
      word_2540FEE54 = 0;
      *(_QWORD *)&xmmword_2540FEE58 = 0;
      *((_QWORD *)&xmmword_2540FEE58 + 1) = 0xFFFFFFFFLL;
      qword_2540FEE68 = v2;
      qword_2540FEE70 = 0;
      qword_2540FEE38 = (uint64_t)&off_24ED327F0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2540FEE38, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x20uLL, 0x10uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2540FEE58 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::DynamicString *re::internal::defaultConstruct<re::QuaternionFAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)a3 = &off_24ED32870;
  return result;
}

uint64_t re::internal::defaultDestruct<re::QuaternionFAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Quaternion<float>>::~FromToByAnimationAssetData(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::QuaternionFAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 16;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)a1 = &off_24ED32870;
  return result;
}

void *re::allocInfo_SRTAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE2D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE2D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558315A0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SRTAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE2D0);
  }
  return &unk_2558315A0;
}

void re::initInfo_SRTAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0xCD25914272D84496;
  v28[1] = "SRTAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE2D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE2D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEAC0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEAC8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEAD0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get();
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "from";
      *(_QWORD *)(v20 + 16) = &qword_2540FEE78;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x6000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FEAD8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get();
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "to";
      *(_QWORD *)(v22 + 16) = &qword_2540FEE78;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0xA000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEAE0 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get();
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "by";
      *(_QWORD *)(v24 + 16) = &qword_2540FEE78;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0xE000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FEAE8 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "easingFunction";
      *(_QWORD *)(v26 + 16) = &qword_2540FED78;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x12000000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEAF0 = v26;
      __cxa_guard_release(&qword_2540FE2D8);
    }
  }
  *((_QWORD *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEAC0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SRTAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SRTAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SRTAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SRTAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

void re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FE5F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5F8))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FEE78);
    qword_2540FEE78 = (uint64_t)&off_24ED32920;
    __cxa_guard_release(&qword_2540FE5F8);
  }
  if ((byte_2540FE157 & 1) == 0)
  {
    v1 = re::introspect_SRT((re::IntrospectionBase **)1);
    if ((byte_2540FE157 & 1) == 0)
    {
      v2 = v1;
      byte_2540FE157 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEE78, 0);
      qword_2540FEE88 = 0x400000000DLL;
      dword_2540FEE90 = v3;
      word_2540FEE94 = 0;
      *(_QWORD *)&xmmword_2540FEE98 = 0;
      *((_QWORD *)&xmmword_2540FEE98 + 1) = 0xFFFFFFFFLL;
      qword_2540FEEA8 = v2;
      qword_2540FEEB0 = 0;
      qword_2540FEE78 = (uint64_t)&off_24ED32920;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2540FEE78, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x40uLL, 0x10uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2540FEE98 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::DynamicString *re::internal::defaultConstruct<re::SRTAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 17;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 224) = 0;
  *(_QWORD *)(a3 + 288) = 0;
  *(_QWORD *)a3 = &off_24ED329A0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SRTAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::SRTAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 17;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)a1 = &off_24ED329A0;
  return result;
}

uint64_t re::introspect_SRTAnimationAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SRTAnimationAssetData>, this);
}

void *re::allocInfo_SkeletalPoseAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE2E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE2E0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831618, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SkeletalPoseAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE2E0);
  }
  return &unk_255831618;
}

void re::initInfo_SkeletalPoseAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  _QWORD v44[2];
  __int128 v45;

  v44[0] = 0x8BC7078C7E9C1040;
  v44[1] = "SkeletalPoseAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v44);
  *((_OWORD *)this + 2) = v45;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE2E8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE2E8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830B28 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830B30 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830B38 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get((re *)v19);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "from";
      *(_QWORD *)(v20 + 16) = &qword_2540FEEB8;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x5800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_255830B40 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get((re *)v21);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "to";
      *(_QWORD *)(v22 + 16) = &qword_2540FEEB8;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x7800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_255830B48 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get((re *)v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "by";
      *(_QWORD *)(v24 + 16) = &qword_2540FEEB8;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x9800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830B50 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "easingFunction";
      *(_QWORD *)(v26 + 16) = &qword_2540FED78;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xB800000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_255830B58 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_AssetHandle((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "skeleton";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0xC000000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_255830B60 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "fromJointNames";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0xD800000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_255830B68 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "toJointNames";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x10000000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_255830B70 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = "byJointNames";
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0x1280000000ALL;
      *(_DWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_255830B78 = v42;
      __cxa_guard_release(&qword_2540FE2E8);
    }
  }
  *((_QWORD *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_255830B28;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v43 = v45;
}

void re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get(re *a1)
{
  unsigned __int8 v1;
  void *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE600);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FE600);
    if ((_DWORD)a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FEEB8);
      qword_2540FEEB8 = (uint64_t)&off_24ED32A50;
      __cxa_guard_release(&qword_2540FE600);
    }
  }
  if ((byte_2540FE158 & 1) == 0)
  {
    v2 = (void *)qword_2540FE1A0;
    if (qword_2540FE1A0
      || (v2 = re::allocInfo_SkeletalPoseAssetData(a1),
          qword_2540FE1A0 = (uint64_t)v2,
          re::initInfo_SkeletalPoseAssetData((re *)v2, v3),
          (byte_2540FE158 & 1) == 0))
    {
      byte_2540FE158 = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEEB8, 0);
      qword_2540FEEC8 = 0x200000000DLL;
      dword_2540FEED0 = v4;
      word_2540FEED4 = 0;
      *(_QWORD *)&xmmword_2540FEED8 = 0;
      *((_QWORD *)&xmmword_2540FEED8 + 1) = 0xFFFFFFFFLL;
      qword_2540FEEE8 = (uint64_t)v2;
      qword_2540FEEF0 = 0;
      qword_2540FEEB8 = (uint64_t)&off_24ED32A50;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FEEB8, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 0x20uLL, 8uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FEED8 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info = (uint64_t)&off_24ED32AD0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::IntrospectionInfo<re::StringID>::get(1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info, 0);
    qword_255800CA8 = 0x2800000003;
    dword_255800CB0 = v11;
    word_255800CB4 = 0;
    *(_QWORD *)&xmmword_255800CB8 = 0;
    *((_QWORD *)&xmmword_255800CB8 + 1) = 0xFFFFFFFFLL;
    qword_255800CC8 = v10;
    unk_255800CD0 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info = (uint64_t)&off_24ED32AD0;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255800CB8 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info;
}

re::SkeletalPoseAnimationAssetData *re::internal::defaultConstruct<re::SkeletalPoseAnimationAssetData>(int a1, int a2, re::SkeletalPoseAnimationAssetData *this)
{
  return re::SkeletalPoseAnimationAssetData::SkeletalPoseAnimationAssetData(this);
}

uint64_t re::internal::defaultDestruct<re::SkeletalPoseAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::StringID>::deinit(a3 + 296);
  re::DynamicArray<re::StringID>::deinit(a3 + 256);
  re::DynamicArray<re::StringID>::deinit(a3 + 216);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 192));
  return re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultDestructV2<re::SkeletalPoseAnimationAssetData>(uint64_t a1)
{
  re::DynamicArray<re::StringID>::deinit(a1 + 296);
  re::DynamicArray<re::StringID>::deinit(a1 + 256);
  re::DynamicArray<re::StringID>::deinit(a1 + 216);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 192));
  return re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData(a1);
}

void *re::allocInfo_BlendShapeWeightsAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE2F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE2F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831690, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "BlendShapeWeightsAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE2F0);
  }
  return &unk_255831690;
}

void re::initInfo_BlendShapeWeightsAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[2];
  __int128 v41;

  v40[0] = 0x25CA19AF0A5CEFC2;
  v40[1] = "BlendShapeWeightsAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v40);
  *((_OWORD *)this + 2) = v41;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE2F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE2F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      _MergedGlobals_523 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830778 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830780 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get((re *)v19);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "from";
      *(_QWORD *)(v20 + 16) = &qword_2540FEEF8;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x5800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_255830788 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get((re *)v21);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "to";
      *(_QWORD *)(v22 + 16) = &qword_2540FEEF8;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x7800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_255830790 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get((re *)v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "by";
      *(_QWORD *)(v24 + 16) = &qword_2540FEEF8;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x9800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_255830798 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "easingFunction";
      *(_QWORD *)(v26 + 16) = &qword_2540FED78;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xB800000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2558307A0 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "fromWeightNames";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0xC000000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2558307A8 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "toWeightNames";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0xE800000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_2558307B0 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "byWeightNames";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x11000000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2558307B8 = v38;
      __cxa_guard_release(&qword_2540FE2F8);
    }
  }
  *((_QWORD *)this + 2) = 0x13800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &_MergedGlobals_523;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v39 = v41;
}

void re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get(re *a1)
{
  unsigned __int8 v1;
  void *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE608);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FE608);
    if ((_DWORD)a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FEEF8);
      qword_2540FEEF8 = (uint64_t)&off_24ED32C18;
      __cxa_guard_release(&qword_2540FE608);
    }
  }
  if ((byte_2540FE159 & 1) == 0)
  {
    v2 = (void *)qword_2540FE1C0;
    if (qword_2540FE1C0
      || (v2 = re::allocInfo_BlendShapeWeightsAssetData(a1),
          qword_2540FE1C0 = (uint64_t)v2,
          re::initInfo_BlendShapeWeightsAssetData((re *)v2, v3),
          (byte_2540FE159 & 1) == 0))
    {
      byte_2540FE159 = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEEF8, 0);
      qword_2540FEF08 = 0x200000000DLL;
      dword_2540FEF10 = v4;
      word_2540FEF14 = 0;
      *(_QWORD *)&xmmword_2540FEF18 = 0;
      *((_QWORD *)&xmmword_2540FEF18 + 1) = 0xFFFFFFFFLL;
      qword_2540FEF28 = (uint64_t)v2;
      qword_2540FEF30 = 0;
      qword_2540FEEF8 = (uint64_t)&off_24ED32C18;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FEEF8, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 0x20uLL, 8uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FEF18 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

double re::internal::defaultConstruct<re::BlendShapeWeightsAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 50;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)a3 = &off_24ED32C98;
  *(_QWORD *)(a3 + 200) = 0;
  *(_QWORD *)(a3 + 208) = 0;
  *(_DWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 304) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_DWORD *)(a3 + 256) = 0;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_DWORD *)(a3 + 296) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::BlendShapeWeightsAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::StringID>::deinit(a3 + 272);
  re::DynamicArray<re::StringID>::deinit(a3 + 232);
  re::DynamicArray<re::StringID>::deinit(a3 + 192);
  return re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData(a3);
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 50;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)a1 = &off_24ED32C98;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationAssetData>(uint64_t a1)
{
  re::DynamicArray<re::StringID>::deinit(a1 + 272);
  re::DynamicArray<re::StringID>::deinit(a1 + 232);
  re::DynamicArray<re::StringID>::deinit(a1 + 192);
  return re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData(a1);
}

void *re::allocInfo_FloatKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE300);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE300))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&_MergedGlobals_524, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "FloatKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE300);
  }
  return &_MergedGlobals_524;
}

void re::initInfo_FloatKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0xC4EF9F04D0096C00;
  v28[1] = "FloatKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE308);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE308);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE7F8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE800 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE808 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE810 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "values";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x7800000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FE818 = v26;
      __cxa_guard_release(&qword_2540FE308);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FE7F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FloatKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FloatKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FloatKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FloatKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

double re::internal::defaultConstruct<re::FloatKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 19;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED32D48;
  return result;
}

void re::internal::defaultDestruct<re::FloatKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = off_24ED32DB8;
  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  v6 = *(_QWORD *)(a3 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::FloatKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 19;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED32D48;
  return result;
}

void re::internal::defaultDestructV2<re::FloatKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED32DB8;
  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_DoubleKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE318);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE318))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831780, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "DoubleKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE318);
  }
  return &unk_255831780;
}

void re::initInfo_DoubleKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0x1F76A011B0B906EALL;
  v28[1] = "DoubleKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE320);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE320);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE820 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE828 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE830 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE838 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::IntrospectionInfo<re::DynamicArray<double>>::get(1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "values";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x7800000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FE840 = v26;
      __cxa_guard_release(&qword_2540FE320);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FE820;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DoubleKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DoubleKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DoubleKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DoubleKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<double>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info = (uint64_t)&off_24ED32DF8;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::introspect_double((re *)1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info, 0);
    qword_255800CF8 = 0x2800000003;
    dword_255800D00 = v11;
    word_255800D04 = 0;
    *(_QWORD *)&xmmword_255800D08 = 0;
    *((_QWORD *)&xmmword_255800D08 + 1) = 0xFFFFFFFFLL;
    qword_255800D18 = v10;
    unk_255800D20 = 0;
    re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info = (uint64_t)&off_24ED32DF8;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255800D08 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::DoubleKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED32E90;
  return result;
}

void re::internal::defaultDestruct<re::DoubleKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = off_24ED32F00;
  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  v6 = *(_QWORD *)(a3 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::DoubleKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 20;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED32E90;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED32F00;
  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector2FKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE330);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE330))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558317F8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector2FKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE330);
  }
  return &unk_2558317F8;
}

void re::initInfo_Vector2FKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0x6927DBC5FC9D8DF6;
  v27[1] = "Vector2FKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE338);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE338);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE848 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE850 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE858 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE860 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v24 = re::IntrospectionInfo<re::DynamicArray<re::Vector2<float>>>::get(1);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "values";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x7800000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2540FE868 = v25;
      __cxa_guard_release(&qword_2540FE338);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FE848;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector2FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector2FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector2FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector2FKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

double re::internal::defaultConstruct<re::Vector2FKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 21;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED32F40;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = off_24ED32FB0;
  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  v6 = *(_QWORD *)(a3 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector2FKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 21;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED32F40;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED32FB0;
  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector3FKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE348);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE348))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831870, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector3FKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE348);
  }
  return &unk_255831870;
}

void re::initInfo_Vector3FKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0xFC505665DE3F9CB4;
  v27[1] = "Vector3FKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE350);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE350);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE870 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE878 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE880 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE888 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v24 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "values";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x7800000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2540FE890 = v25;
      __cxa_guard_release(&qword_2540FE350);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FE870;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector3FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector3FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector3FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector3FKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

double re::internal::defaultConstruct<re::Vector3FKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 22;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED32FF0;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = off_24ED33060;
  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  v6 = *(_QWORD *)(a3 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector3FKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 22;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED32FF0;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED33060;
  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector4FKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE360);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE360))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558318E8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector4FKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE360);
  }
  return &unk_2558318E8;
}

void re::initInfo_Vector4FKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0x8F78D105BFE1AB72;
  v27[1] = "Vector4FKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE368);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE368);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE898 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE8A0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE8A8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE8B0 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v24 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "values";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x7800000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2540FE8B8 = v25;
      __cxa_guard_release(&qword_2540FE368);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FE898;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector4FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector4FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector4FKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector4FKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

double re::internal::defaultConstruct<re::Vector4FKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 23;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED330A0;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = off_24ED33110;
  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  v6 = *(_QWORD *)(a3 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector4FKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 23;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED330A0;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED33110;
  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_QuaternionFKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE378);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE378))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831960, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "QuaternionFKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE378);
  }
  return &unk_255831960;
}

void re::initInfo_QuaternionFKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0x7ACD97FBCF105B18;
  v27[1] = "QuaternionFKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE380);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE380);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE8C0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE8C8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE8D0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE8D8 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v24 = re::IntrospectionInfo<re::DynamicArray<re::Quaternion<float>>>::get(1);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "values";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x7800000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2540FE8E0 = v25;
      __cxa_guard_release(&qword_2540FE380);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FE8C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::QuaternionFKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::QuaternionFKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

double re::internal::defaultConstruct<re::QuaternionFKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 24;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED33150;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = off_24ED331C0;
  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  v6 = *(_QWORD *)(a3 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::QuaternionFKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 24;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED33150;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED331C0;
  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SRTKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE390);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE390))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558319D8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SRTKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE390);
  }
  return &unk_2558319D8;
}

void re::initInfo_SRTKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x79FFE5F38CE10B2;
  v26[1] = "SRTKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE398);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE398);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE8E8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE8F0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE8F8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE900 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::DynamicArray<re::GenericSRT<float>>>::get();
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "values";
      *(_QWORD *)(v24 + 16) = &qword_2540FEF38;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FE908 = v24;
      __cxa_guard_release(&qword_2540FE398);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FE8E8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SRTKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SRTKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SRTKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SRTKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

void re::IntrospectionInfo<re::DynamicArray<re::GenericSRT<float>>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2540FE610);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE610))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FEF38);
    qword_2540FEF38 = (uint64_t)&off_24ED33200;
    __cxa_guard_release(&qword_2540FE610);
  }
  if ((byte_2540FE15A & 1) == 0)
  {
    v1 = re::introspect_SRT((re::IntrospectionBase **)1);
    if ((byte_2540FE15A & 1) == 0)
    {
      v2 = v1;
      byte_2540FE15A = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEF38, 0);
      qword_2540FEF48 = 0x2800000003;
      dword_2540FEF50 = v3;
      word_2540FEF54 = 0;
      *(_QWORD *)&xmmword_2540FEF58 = 0;
      *((_QWORD *)&xmmword_2540FEF58 + 1) = 0xFFFFFFFFLL;
      qword_2540FEF68 = v2;
      qword_2540FEF70 = 0;
      qword_2540FEF38 = (uint64_t)&off_24ED33200;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2540FEF38, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2540FEF58 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::SRTKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 25;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED33298;
  return result;
}

void re::internal::defaultDestruct<re::SRTKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = off_24ED33308;
  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  v6 = *(_QWORD *)(a3 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v7 = *(_QWORD *)(a3 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::SRTKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 25;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED33298;
  return result;
}

void re::internal::defaultDestructV2<re::SRTKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED33308;
  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SkeletalPoseKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE3A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE3A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831A50, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SkeletalPoseKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE3A8);
  }
  return &unk_255831A50;
}

void re::initInfo_SkeletalPoseKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[2];
  __int128 v35;

  v34[0] = 0x1C7366FF8B08925CLL;
  v34[1] = "SkeletalPoseKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE3B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE3B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEAF8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEB00 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEB08 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEB10 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseAssetData>>::get((re *)v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "values";
      *(_QWORD *)(v24 + 16) = &qword_2540FEF78;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FEB18 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_AssetHandle((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "skeleton";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0xA000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2540FEB20 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "jointNames";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0xB800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2540FEB28 = v32;
      __cxa_guard_release(&qword_2540FE3B0);
    }
  }
  *((_QWORD *)this + 2) = 0xE000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEAF8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v33 = v35;
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseAssetData>>::get(re *a1)
{
  unsigned __int8 v1;
  void *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE618);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FE618);
    if ((_DWORD)a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FEF78);
      qword_2540FEF78 = (uint64_t)&off_24ED33348;
      __cxa_guard_release(&qword_2540FE618);
    }
  }
  if ((byte_2540FE15B & 1) == 0)
  {
    v2 = (void *)qword_2540FE1A0;
    if (qword_2540FE1A0
      || (v2 = re::allocInfo_SkeletalPoseAssetData(a1),
          qword_2540FE1A0 = (uint64_t)v2,
          re::initInfo_SkeletalPoseAssetData((re *)v2, v3),
          (byte_2540FE15B & 1) == 0))
    {
      byte_2540FE15B = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEF78, 0);
      qword_2540FEF88 = 0x2800000003;
      dword_2540FEF90 = v4;
      word_2540FEF94 = 0;
      *(_QWORD *)&xmmword_2540FEF98 = 0;
      *((_QWORD *)&xmmword_2540FEF98 + 1) = 0xFFFFFFFFLL;
      qword_2540FEFA8 = (uint64_t)v2;
      qword_2540FEFB0 = 0;
      qword_2540FEF78 = (uint64_t)&off_24ED33348;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FEF78, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FEF98 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

re::SkeletalPoseKeyframeAnimationAssetData *re::internal::defaultConstruct<re::SkeletalPoseKeyframeAnimationAssetData>(int a1, int a2, re::SkeletalPoseKeyframeAnimationAssetData *this)
{
  return re::SkeletalPoseKeyframeAnimationAssetData::SkeletalPoseKeyframeAnimationAssetData(this);
}

void re::internal::defaultDestruct<re::SkeletalPoseKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  re::DynamicArray<re::StringID>::deinit(a3 + 184);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 160));
  *(_QWORD *)a3 = off_24ED33450;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 120);
  v4 = *(_QWORD *)(a3 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v5 = *(_QWORD *)(a3 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

void re::internal::defaultDestructV2<re::SkeletalPoseKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  re::DynamicArray<re::StringID>::deinit(a1 + 184);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 160));
  *(_QWORD *)a1 = off_24ED33450;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 120);
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_BlendShapeWeightsKeyframeAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE3C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE3C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831AC8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "BlendShapeWeightsKeyframeAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE3C0);
  }
  return &unk_255831AC8;
}

void re::initInfo_BlendShapeWeightsKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;

  v30[0] = 0xEC78F2B93E3ACFDELL;
  v30[1] = "BlendShapeWeightsKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE3C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE3C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE940 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE948 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE950 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "times";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x5000000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FE958 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsAssetData>>::get((re *)v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "values";
      *(_QWORD *)(v24 + 16) = &qword_2540FEFB8;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FE960 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "weightNames";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0xA000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2540FE968 = v28;
      __cxa_guard_release(&qword_2540FE3C8);
    }
  }
  *((_QWORD *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_2540FE940;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v29 = v31;
}

void re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsAssetData>>::get(re *a1)
{
  unsigned __int8 v1;
  void *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE620);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FE620);
    if ((_DWORD)a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FEFB8);
      qword_2540FEFB8 = (uint64_t)&off_24ED33490;
      __cxa_guard_release(&qword_2540FE620);
    }
  }
  if ((byte_2540FE15C & 1) == 0)
  {
    v2 = (void *)qword_2540FE1C0;
    if (qword_2540FE1C0
      || (v2 = re::allocInfo_BlendShapeWeightsAssetData(a1),
          qword_2540FE1C0 = (uint64_t)v2,
          re::initInfo_BlendShapeWeightsAssetData((re *)v2, v3),
          (byte_2540FE15C & 1) == 0))
    {
      byte_2540FE15C = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEFB8, 0);
      qword_2540FEFC8 = 0x2800000003;
      dword_2540FEFD0 = v4;
      word_2540FEFD4 = 0;
      *(_QWORD *)&xmmword_2540FEFD8 = 0;
      *((_QWORD *)&xmmword_2540FEFD8 + 1) = 0xFFFFFFFFLL;
      qword_2540FEFE8 = (uint64_t)v2;
      qword_2540FEFF0 = 0;
      qword_2540FEFB8 = (uint64_t)&off_24ED33490;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FEFB8, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FEFD8 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

double re::internal::defaultConstruct<re::BlendShapeWeightsKeyframeAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 61;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)a3 = off_24ED33528;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_DWORD *)(a3 + 184) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  re::DynamicArray<re::StringID>::deinit(a3 + 160);
  *(_QWORD *)a3 = off_24ED33598;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 120);
  v4 = *(_QWORD *)(a3 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v5 = *(_QWORD *)(a3 + 40);
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 61;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24ED33528;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  re::DynamicArray<re::StringID>::deinit(a1 + 160);
  *(_QWORD *)a1 = off_24ED33598;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 120);
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_FloatSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE3D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE3D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831B40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "FloatSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE3D8);
  }
  return &unk_255831B40;
}

void re::initInfo_FloatSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[2];
  __int128 v37;

  v36[0] = 0x9D1CC4B9BF4754A8;
  v36[1] = "FloatSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v36);
  *((_OWORD *)this + 2) = v37;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE3E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE3E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEB30 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEB38 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEB40 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEB48 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEB50 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FEB58 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "values";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x5800000006;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_2540FEB60 = v34;
      __cxa_guard_release(&qword_2540FE3E0);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEB30;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FloatSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FloatSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FloatSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FloatSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v35 = v37;
}

double re::internal::defaultConstruct<re::FloatSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 27;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED335D8;
  return result;
}

void re::internal::defaultDestruct<re::FloatSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a3 = off_24ED33648;
  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::FloatSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 27;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED335D8;
  return result;
}

void re::internal::defaultDestructV2<re::FloatSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED33648;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_DoubleSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE3E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE3E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831BB8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "DoubleSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE3E8);
  }
  return &unk_255831BB8;
}

void re::initInfo_DoubleSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[2];
  __int128 v37;

  v36[0] = 0xC952ABFC3A23B47ELL;
  v36[1] = "DoubleSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v36);
  *((_OWORD *)this + 2) = v37;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE3F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE3F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEB68 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEB70 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEB78 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEB80 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEB88 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FEB90 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::DynamicArray<double>>::get(1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "values";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x5800000006;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_2540FEB98 = v34;
      __cxa_guard_release(&qword_2540FE3F0);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEB68;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DoubleSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DoubleSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DoubleSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DoubleSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v35 = v37;
}

double re::internal::defaultConstruct<re::DoubleSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 28;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED33688;
  return result;
}

void re::internal::defaultDestruct<re::DoubleSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a3 = off_24ED336F8;
  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::DoubleSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 28;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED33688;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED336F8;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector2FSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE3F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE3F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831C30, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector2FSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE3F8);
  }
  return &unk_255831C30;
}

void re::initInfo_Vector2FSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0x791E9523134C1BF2;
  v35[1] = "Vector2FSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE400);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE400);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEBA0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEBA8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEBB0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEBB8 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEBC0 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FEBC8 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v32 = re::IntrospectionInfo<re::DynamicArray<re::Vector2<float>>>::get(1);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "values";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x5800000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_2540FEBD0 = v33;
      __cxa_guard_release(&qword_2540FE400);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEBA0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector2FSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector2FSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector2FSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector2FSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::Vector2FSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 29;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED33738;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a3 = off_24ED337A8;
  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector2FSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 29;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED33738;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED337A8;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector3FSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE408);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE408))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831CA8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector3FSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE408);
  }
  return &unk_255831CA8;
}

void re::initInfo_Vector3FSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0x5493805185EE3D74;
  v35[1] = "Vector3FSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE410);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE410);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEBD8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEBE0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEBE8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEBF0 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEBF8 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FEC00 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v32 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "values";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x5800000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_2540FEC08 = v33;
      __cxa_guard_release(&qword_2540FE410);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEBD8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector3FSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector3FSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector3FSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector3FSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::Vector3FSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 30;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED337E8;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a3 = off_24ED33858;
  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector3FSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 30;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED337E8;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED33858;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector4FSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE418);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE418))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831D20, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector4FSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE418);
  }
  return &unk_255831D20;
}

void re::initInfo_Vector4FSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0x30086B7FF8905EF6;
  v35[1] = "Vector4FSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE420);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE420);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEC10 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEC18 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEC20 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEC28 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEC30 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FEC38 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v32 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "values";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x5800000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_2540FEC40 = v33;
      __cxa_guard_release(&qword_2540FE420);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEC10;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector4FSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector4FSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector4FSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector4FSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::Vector4FSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 31;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED33898;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a3 = off_24ED33908;
  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector4FSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 31;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED33898;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED33908;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_QuaternionFSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE428);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE428))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831D98, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "QuaternionFSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE428);
  }
  return &unk_255831D98;
}

void re::initInfo_QuaternionFSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0xD48706902A9A2290;
  v35[1] = "QuaternionFSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE430);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE430);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEC48 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEC50 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEC58 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEC60 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FEC68 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FEC70 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v32 = re::IntrospectionInfo<re::DynamicArray<re::Quaternion<float>>>::get(1);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "values";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x5800000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_2540FEC78 = v33;
      __cxa_guard_release(&qword_2540FE430);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEC48;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::QuaternionFSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::QuaternionFSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::QuaternionFSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 32;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED33948;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a3 = off_24ED339B8;
  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::QuaternionFSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 32;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED33948;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED339B8;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SRTSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE438);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE438))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831E10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SRTSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE438);
  }
  return &unk_255831E10;
}

void re::initInfo_SRTSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[2];
  __int128 v35;

  v34[0] = 0x236485BCA9E251B6;
  v34[1] = "SRTSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE440);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE440);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FEC80 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FEC88 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FEC90 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FEC98 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FECA0 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FECA8 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      re::IntrospectionInfo<re::DynamicArray<re::GenericSRT<float>>>::get();
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "values";
      *(_QWORD *)(v32 + 16) = &qword_2540FEF38;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x5800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2540FECB0 = v32;
      __cxa_guard_release(&qword_2540FE440);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2540FEC80;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SRTSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SRTSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SRTSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SRTSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v33 = v35;
}

double re::internal::defaultConstruct<re::SRTSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 33;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED339F8;
  return result;
}

void re::internal::defaultDestruct<re::SRTSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a3 = off_24ED33A68;
  v5 = (_QWORD *)(a3 + 88);
  v4 = *(_QWORD *)(a3 + 88);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 120) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 112);
  }
  *(_QWORD *)a3 = off_24ED36578;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::SRTSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 33;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED339F8;
  return result;
}

void re::internal::defaultDestructV2<re::SRTSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED33A68;
  v3 = (_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 120))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 120) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 112);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SkeletalPoseSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE448);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE448))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831E88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SkeletalPoseSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE448);
  }
  return &unk_255831E88;
}

void re::initInfo_SkeletalPoseSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *v51;
  uint64_t v52;
  __int128 v53;
  _QWORD v54[2];
  __int128 v55;

  v54[0] = 0xFAC62E45F6DBF2CCLL;
  v54[1] = "SkeletalPoseSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v54);
  *((_OWORD *)this + 2) = v55;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE450);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE450);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830B80 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830B88 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830B90 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_255830B98 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_255830BA0 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_255830BA8 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseAssetData>>::get((re *)v31);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "values";
      *(_QWORD *)(v32 + 16) = &qword_2540FEF78;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x5800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_255830BB0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_AssetHandle((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "skeleton";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x8000000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_255830BB8 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "jointNames";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x9800000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_255830BC0 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::introspect_BOOL((re *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "scaleChannelMask";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0xC000000009;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_255830BC8 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v47 = re::introspect_BOOL((re *)1, v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "rotationChannelMask";
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0xC10000000ALL;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_255830BD0 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      v51 = re::introspect_BOOL((re *)1, v50);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "translationChannelMask";
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0xC20000000BLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_255830BD8 = v52;
      __cxa_guard_release(&qword_2540FE450);
    }
  }
  *((_QWORD *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((_QWORD *)this + 8) = &qword_255830B80;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v53 = v55;
}

re::SkeletalPoseSampledAnimationAssetData *re::internal::defaultConstruct<re::SkeletalPoseSampledAnimationAssetData>(int a1, int a2, re::SkeletalPoseSampledAnimationAssetData *this)
{
  return re::SkeletalPoseSampledAnimationAssetData::SkeletalPoseSampledAnimationAssetData(this);
}

void re::internal::defaultDestruct<re::SkeletalPoseSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::DynamicArray<re::StringID>::deinit(a3 + 152);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 128));
  *(_QWORD *)a3 = off_24ED33B18;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 88);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

void re::internal::defaultDestructV2<re::SkeletalPoseSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;

  re::DynamicArray<re::StringID>::deinit(a1 + 152);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 128));
  *(_QWORD *)a1 = off_24ED33B18;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 88);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_BlendShapeWeightsSampledAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE458);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE458))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831F00, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "BlendShapeWeightsSampledAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE458);
  }
  return &unk_255831F00;
}

void re::initInfo_BlendShapeWeightsSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[2];
  __int128 v39;

  v38[0] = 0xC7AD95E0998AFD0ALL;
  v38[1] = "BlendShapeWeightsSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v38);
  *((_OWORD *)this + 2) = v39;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE460);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE460);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FECB8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FECC0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "enableInterpolation";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4900000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FECC8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_float((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "frameInterval";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4C00000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FECD0 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "startTime";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x5000000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2540FECD8 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "endTime";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5400000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2540FECE0 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsAssetData>>::get((re *)v31);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "values";
      *(_QWORD *)(v32 + 16) = &qword_2540FEFB8;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x5800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2540FECE8 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "weightNames";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x8000000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_2540FECF0 = v36;
      __cxa_guard_release(&qword_2540FE460);
    }
  }
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_2540FECB8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsSampledAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsSampledAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsSampledAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v37 = v39;
}

double re::internal::defaultConstruct<re::BlendShapeWeightsSampledAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 59;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_WORD *)(a3 + 72) = 256;
  *(_DWORD *)(a3 + 76) = 1023969417;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)a3 = off_24ED33B58;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_DWORD *)(a3 + 152) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::DynamicArray<re::StringID>::deinit(a3 + 128);
  *(_QWORD *)a3 = off_24ED33BC8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 88);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsSampledAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 59;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 1023969417;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_24ED33B58;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;

  re::DynamicArray<re::StringID>::deinit(a1 + 128);
  *(_QWORD *)a1 = off_24ED33BC8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 88);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_OrbitAnimationAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE468);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE468))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831F78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "OrbitAnimationAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE468);
  }
  return &unk_255831F78;
}

void re::initInfo_OrbitAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[2];
  __int128 v39;

  v38[0] = 0x3D39B8489028CAC0;
  v38[1] = "OrbitAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v38);
  *((_OWORD *)this + 2) = v39;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE470);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE470);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FECF8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "isAdditive";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x4800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FED00 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_float((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "duration";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4C00000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FED08 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v20 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "axis";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FED10 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v23 = re::introspect_SRT((re::IntrospectionBase **)1);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "startTransform";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x6000000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FED18 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_BOOL((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "spinClockwise";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x9000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2540FED20 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "orientToPath";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x9100000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2540FED28 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_float((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "rotations";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x9400000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_2540FED30 = v36;
      __cxa_guard_release(&qword_2540FE470);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_2540FECF8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::OrbitAnimationAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::OrbitAnimationAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::OrbitAnimationAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::OrbitAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v37 = v39;
}

double re::internal::defaultConstruct<re::OrbitAnimationAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 37;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)a3 = off_24ED33C08;
  *(_DWORD *)(a3 + 76) = 1065353216;
  result = 0.0078125;
  *(_OWORD *)(a3 + 80) = xmmword_2260E5F20;
  *(_QWORD *)(a3 + 96) = 0x3F8000003F800000;
  *(_QWORD *)(a3 + 104) = 1065353216;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0x3F80000000000000;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_WORD *)(a3 + 144) = 1;
  *(_DWORD *)(a3 + 148) = 1065353216;
  return result;
}

void re::internal::defaultDestruct<re::OrbitAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;

  *(_QWORD *)a3 = off_24ED36578;
  v5 = (_OWORD *)(a3 + 40);
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *v5 = 0u;
    v5[1] = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::OrbitAnimationAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 37;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED33C08;
  *(_DWORD *)(a1 + 76) = 1065353216;
  result = 0.0078125;
  *(_OWORD *)(a1 + 80) = xmmword_2260E5F20;
  *(_QWORD *)(a1 + 96) = 0x3F8000003F800000;
  *(_QWORD *)(a1 + 104) = 1065353216;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 148) = 1065353216;
  return result;
}

void re::internal::defaultDestructV2<re::OrbitAnimationAssetData>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)a1 = off_24ED36578;
  v3 = (_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_AnimationStateTimelineAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE478);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE478))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255831FF0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "AnimationStateTimelineAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE478);
  }
  return &unk_255831FF0;
}

void re::initInfo_AnimationStateTimelineAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0xDC48FE4832FCDED8;
  v20[1] = "AnimationStateTimelineAssetData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE480);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE480);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE6C8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_double((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "startTime";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x5000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FE6D0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_double((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "endTime";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5800000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FE6D8 = v18;
      __cxa_guard_release(&qword_2540FE480);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540FE6C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AnimationStateTimelineAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AnimationStateTimelineAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AnimationStateTimelineAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AnimationStateTimelineAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

re::DynamicString *re::internal::defaultConstruct<re::AnimationStateTimelineAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  re::DynamicString *result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 38;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)a3 = off_24ED33C60;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::AnimationStateTimelineAssetData>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::DynamicString *re::internal::defaultConstructV2<re::AnimationStateTimelineAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  re::DynamicString *result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 38;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED33C60;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::AnimationStateTimelineAssetData>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *re::allocInfo_FloatAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE488);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE488))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255832068, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "FloatAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE488);
  }
  return &unk_255832068;
}

void re::initInfo_FloatAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x6825313C501E7D66;
  v23[1] = "FloatAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE490);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE490);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE6F8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE700 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE708 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE710 = v21;
      __cxa_guard_release(&qword_2540FE490);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE6F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FloatAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FloatAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FloatAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FloatAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::FloatAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 39;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED33CD0;
  return result;
}

void re::internal::defaultDestruct<re::FloatAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED33D40;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::FloatAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 39;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED33CD0;
  return result;
}

void re::internal::defaultDestructV2<re::FloatAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED33D40;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_DoubleAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE498);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE498))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558320E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "DoubleAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE498);
  }
  return &unk_2558320E0;
}

void re::initInfo_DoubleAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x5E7E51CB85623FBCLL;
  v23[1] = "DoubleAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE4A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE4A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE718 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE720 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE728 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE730 = v21;
      __cxa_guard_release(&qword_2540FE4A0);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE718;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DoubleAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DoubleAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DoubleAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DoubleAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::DoubleAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 40;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED33D80;
  return result;
}

void re::internal::defaultDestruct<re::DoubleAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED33DF0;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::DoubleAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 40;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED33D80;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED33DF0;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector2FAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE4A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE4A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255832158, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector2FAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE4A8);
  }
  return &unk_255832158;
}

void re::initInfo_Vector2FAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x4AF48CA0B60E9A30;
  v23[1] = "Vector2FAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE4B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE4B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE738 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE740 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE748 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE750 = v21;
      __cxa_guard_release(&qword_2540FE4B0);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE738;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector2FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector2FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector2FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector2FAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::Vector2FAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 41;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED33E30;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED33EA0;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector2FAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 41;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED33E30;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED33EA0;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector3FAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE4B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE4B8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558321D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector3FAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE4B8);
  }
  return &unk_2558321D0;
}

void re::initInfo_Vector3FAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x1CDB65FD08AE6332;
  v23[1] = "Vector3FAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE4C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE4C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE758 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE760 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE768 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE770 = v21;
      __cxa_guard_release(&qword_2540FE4C0);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE758;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector3FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector3FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector3FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector3FAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::Vector3FAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 42;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED33EE0;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED33F50;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector3FAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 42;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED33EE0;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED33F50;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_Vector4FAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE4C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE4C8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255832248, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "Vector4FAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE4C8);
  }
  return &unk_255832248;
}

void re::initInfo_Vector4FAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0xEEC23F595B4E2C34;
  v23[1] = "Vector4FAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE4D0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE4D0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE778 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE780 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE788 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE790 = v21;
      __cxa_guard_release(&qword_2540FE4D0);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE778;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::Vector4FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::Vector4FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::Vector4FAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::Vector4FAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::Vector4FAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 43;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED33F90;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED34000;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::Vector4FAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 43;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED33F90;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED34000;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_QuaternionFAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE4D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE4D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558322C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "QuaternionFAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE4D8);
  }
  return &unk_2558322C0;
}

void re::initInfo_QuaternionFAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x6E06572531F5714ELL;
  v23[1] = "QuaternionFAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE4E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE4E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE798 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE7A0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE7A8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE7B0 = v21;
      __cxa_guard_release(&qword_2540FE4E0);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE798;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::QuaternionFAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::QuaternionFAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::QuaternionFAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 44;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED34040;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED340B0;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::QuaternionFAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 44;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED34040;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED340B0;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SRTAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE4E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE4E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255832338, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SRTAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE4E8);
  }
  return &unk_255832338;
}

void re::initInfo_SRTAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x7B80BD2EFFEE6EF4;
  v23[1] = "SRTAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE4F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE4F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE7B8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE7C0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE7C8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE7D0 = v21;
      __cxa_guard_release(&qword_2540FE4F0);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE7B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SRTAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SRTAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SRTAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SRTAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::SRTAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 45;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED340F0;
  return result;
}

void re::internal::defaultDestruct<re::SRTAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED34160;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::SRTAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 45;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED340F0;
  return result;
}

void re::internal::defaultDestructV2<re::SRTAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED34160;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

void *re::allocInfo_SkeletalPoseAnimationBlendTreeAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE4F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE4F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558323B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "SkeletalPoseAnimationBlendTreeAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE4F8);
  }
  return &unk_2558323B0;
}

void re::initInfo_SkeletalPoseAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x11A6898F504228ALL;
  v23[1] = "SkeletalPoseAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE500);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE500);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE7D8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_blendTreeDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FE7E0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_clips";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xF800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FE7E8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "isAdditive";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FE7F0 = v21;
      __cxa_guard_release(&qword_2540FE500);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2540FE7D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAnimationBlendTreeAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::SkeletalPoseAnimationBlendTreeAssetData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString *v4;
  double result;

  *(_QWORD *)a3 = off_24ED36578;
  *(_QWORD *)(a3 + 8) = 46;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  v4 = (re::DynamicString *)(a3 + 40);
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)a3 = off_24ED341A0;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalPoseAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a3 = off_24ED34228;
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a3 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a3 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a3 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a3 + 80);
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

double re::internal::defaultConstructV2<re::SkeletalPoseAnimationBlendTreeAssetData>(uint64_t a1)
{
  re::DynamicString *v2;
  double result;

  *(_QWORD *)a1 = off_24ED36578;
  *(_QWORD *)(a1 + 8) = 46;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v2 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)a1 = off_24ED341A0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24ED34228;
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 120));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

uint64_t *re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info = (uint64_t)&off_24ED34308;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::introspect_uint8_t((re *)1, a2);
  if (re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info, 0);
    qword_255800D48 = 0x1800000004;
    dword_255800D50 = v11;
    word_255800D54 = 0;
    *(_QWORD *)&xmmword_255800D58 = 0;
    *((_QWORD *)&xmmword_255800D58 + 1) = 0xFFFFFFFFLL;
    qword_255800D68 = v10;
    unk_255800D70 = 0;
    re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info = (uint64_t)&off_24ED34308;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255800D58 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info;
}

void *re::allocInfo_TimelineEventData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE520);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE520))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255832428, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "TimelineEventData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE520);
  }
  return &unk_255832428;
}

void re::initInfo_TimelineEventData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  char *v5;
  re *v6;
  uint64_t *v7;
  const re::IntrospectionBase *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  uint64_t *v17;
  uint64_t v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  uint64_t *v22;
  unsigned __int8 v23;
  const re::IntrospectionBase *v24;
  unsigned __int8 v25;
  int v26;
  re::IntrospectionRegistry *v27;
  const re::IntrospectionBase *v28;
  const char *v29;
  StringID v30;
  uint64_t *v31;
  uint64_t v32;
  char **v33;
  void *v34;
  uint64_t v35;
  _anonymous_namespace_ *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  unsigned __int8 v42;
  const re::IntrospectionBase *v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unsigned __int8 v48;
  const re::IntrospectionBase *v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  unsigned __int8 v54;
  const re::IntrospectionBase *v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unsigned __int8 v60;
  const re::IntrospectionBase *v61;
  unsigned __int8 v62;
  uint64_t v63;
  const re::IntrospectionBase *v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  char **v67;
  char *v68;
  unsigned int *v69;
  _anonymous_namespace_ *v70;
  unint64_t v71;
  unint64_t i;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  unsigned __int8 *v77;
  int v78;
  uint64_t v79;
  unint64_t j;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unsigned __int8 v92;
  const re::IntrospectionBase *v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t *v96;
  const re::IntrospectionBase *v97;
  void *v98;
  uint64_t v99;
  uint64_t *v100;
  const re::IntrospectionBase *v101;
  uint64_t *v102;
  uint64_t v103;
  re *v104;
  uint64_t *v105;
  re *v106;
  uint64_t *v107;
  re *v108;
  uint64_t *v109;
  re *v110;
  uint64_t *v111;
  re *v112;
  uint64_t *v113;
  re *v114;
  uint64_t *v115;
  re *v116;
  uint64_t *v117;
  re *v118;
  uint64_t *v119;
  re *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  re *v124;
  uint64_t *v125;
  const re::IntrospectionBase *v126;
  void *v127;
  uint64_t v128;
  uint64_t *v129;
  const re::IntrospectionBase *v130;
  uint64_t *v131;
  uint64_t v132;
  re *v133;
  uint64_t *v134;
  const re::IntrospectionBase *v135;
  void *v136;
  uint64_t v137;
  uint64_t *v138;
  const re::IntrospectionBase *v139;
  uint64_t *v140;
  uint64_t v141;
  re *v142;
  uint64_t *v143;
  const re::IntrospectionBase *v144;
  void *v145;
  uint64_t v146;
  uint64_t *v147;
  const re::IntrospectionBase *v148;
  uint64_t *v149;
  uint64_t v150;
  re *v151;
  uint64_t *v152;
  const re::IntrospectionBase *v153;
  void *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  re *v159;
  uint64_t *v160;
  const re::IntrospectionBase *v161;
  void *v162;
  uint64_t v163;
  const re::IntrospectionBase *v164;
  unsigned __int8 v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  re::IntrospectionRegistry *v169;
  const re::IntrospectionBase *v170;
  const char *v171;
  char **v172;
  char *v173;
  re *v174;
  uint64_t *v175;
  const re::IntrospectionBase *v176;
  uint64_t v177;
  uint64_t *v178;
  const re::IntrospectionBase *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  void *v185;
  void *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  StringID v191;
  uint64_t v192[2];
  __int128 v193;
  __int128 v194;
  uint64_t *v195;
  StringID v196;
  StringID v197;
  StringID v198;
  __int128 v199;
  const char *v200;

  *(_QWORD *)&v199 = 0x113B17C5EE537C06;
  *((_QWORD *)&v199 + 1) = "TimelineEventData";
  re::StringID::destroyString((re::StringID *)&v199);
  *((_OWORD *)this + 2) = v188;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE518);
  v5 = (char *)&qword_255830BE0;
  if ((v4 & 1) == 0)
  {
    v6 = (re *)__cxa_guard_acquire(&qword_2540FE518);
    if ((_DWORD)v6)
    {
      v7 = re::introspectionAllocator(v6);
      v9 = re::IntrospectionInfo<re::StringID>::get(1, v8);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "m_eventType";
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_255830BE0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "m_times";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_255830BE8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "m_durations";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x3800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_255830BF0 = v18;
      v20 = re::introspectionAllocator((re *)v18);
      v21 = atomic_load((unsigned __int8 *)&qword_2540FE628);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE628))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2558307C0);
        qword_2558307C0 = (uint64_t)&off_24ED34268;
        __cxa_guard_release(&qword_2540FE628);
      }
      if ((byte_2540FE15D & 1) == 0)
      {
        v5 = (char *)re::IntrospectionInfo<re::StringID>::get(1, v19);
        v22 = (uint64_t *)qword_2540FE5B8;
        if (!qword_2540FE5B8)
        {
          v23 = atomic_load((unsigned __int8 *)&qword_2540FE5A8);
          v22 = &_MergedGlobals_525;
          if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5A8))
          {
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&_MergedGlobals_525, 0);
            *(uint64_t *)((char *)&qword_255832708 + 6) = 0;
            qword_255832708 = 0;
            *(_QWORD *)&xmmword_255832718 = 0;
            *((_QWORD *)&xmmword_255832718 + 1) = 0xFFFFFFFFLL;
            _MergedGlobals_525 = (uint64_t)&off_24ED7DAA8;
            qword_255832728 = (uint64_t)"TimelineEventParameterDescription";
            dword_255832730 = 0;
            xmmword_255832738 = 0u;
            *(_OWORD *)&qword_255832748 = 0u;
            xmmword_255832758 = 0u;
            qword_255832768 = 0;
            __cxa_guard_release(&qword_2540FE5A8);
          }
          qword_2540FE5B8 = (uint64_t)&_MergedGlobals_525;
          *(_QWORD *)&v194 = 0xC66E9C766DEB81D8;
          *((_QWORD *)&v194 + 1) = "TimelineEventParameterDescription";
          re::StringID::destroyString((re::StringID *)&v194);
          xmmword_255832718 = v199;
          v25 = atomic_load((unsigned __int8 *)&qword_2540FE5B0);
          if ((v25 & 1) == 0)
          {
            v174 = (re *)__cxa_guard_acquire(&qword_2540FE5B0);
            if ((_DWORD)v174)
            {
              v175 = re::introspectionAllocator(v174);
              v185 = re::introspect_size_t((re *)1, v176);
              v177 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v175 + 32))(v175, 72, 8);
              *(_DWORD *)v177 = 1;
              *(_QWORD *)(v177 + 8) = "index";
              *(_QWORD *)(v177 + 16) = v185;
              *(_QWORD *)(v177 + 24) = 0;
              *(_QWORD *)(v177 + 32) = 1;
              *(_DWORD *)(v177 + 40) = 0;
              *(_QWORD *)(v177 + 48) = 0;
              *(_QWORD *)(v177 + 56) = 0;
              *(_DWORD *)(v177 + 64) = 0;
              qword_2540FE6B8 = v177;
              v178 = re::introspectionAllocator((re *)v177);
              v186 = re::introspect_size_t((re *)1, v179);
              v180 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v178 + 32))(v178, 72, 8);
              *(_DWORD *)v180 = 1;
              *(_QWORD *)(v180 + 8) = "type";
              *(_QWORD *)(v180 + 16) = v186;
              *(_QWORD *)(v180 + 24) = 0;
              *(_QWORD *)(v180 + 32) = 0x800000002;
              *(_DWORD *)(v180 + 40) = 0;
              *(_QWORD *)(v180 + 48) = 0;
              *(_QWORD *)(v180 + 56) = 0;
              *(_DWORD *)(v180 + 64) = 0;
              qword_2540FE6C0 = v180;
              __cxa_guard_release(&qword_2540FE5B0);
            }
          }
          qword_255832708 = 0x1000000008;
          dword_255832710 = 8;
          word_255832714 = 1;
          dword_255832730 = 2;
          *(_QWORD *)&xmmword_255832738 = &qword_2540FE6B8;
          *((_QWORD *)&xmmword_255832738 + 1) = re::internal::defaultConstruct<re::TimelineEventParameterDescription>;
          qword_255832748 = (uint64_t)re::internal::defaultDestruct<re::TimelineEventParameterDescription>;
          unk_255832750 = 0;
          *(_QWORD *)&xmmword_255832758 = 0;
          *((_QWORD *)&xmmword_255832758 + 1) = re::internal::defaultConstructV2<re::TimelineEventParameterDescription>;
          qword_255832768 = (uint64_t)re::internal::defaultDestructV2<re::TimelineEventParameterDescription>;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&_MergedGlobals_525, v24);
          v194 = v199;
        }
        if ((byte_2540FE15D & 1) == 0)
        {
          byte_2540FE15D = 1;
          v26 = *((_DWORD *)v22 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558307C0, 0);
          qword_2558307D0 = 0x3000000007;
          dword_2558307D8 = v26;
          word_2558307DC = 0;
          *(_QWORD *)&xmmword_2558307E0 = 0;
          *((_QWORD *)&xmmword_2558307E0 + 1) = 0xFFFFFFFFLL;
          qword_2558307F0 = (uint64_t)v5;
          unk_2558307F8 = 0;
          qword_255830800 = (uint64_t)v22;
          unk_255830808 = 0;
          qword_2558307C0 = (uint64_t)&off_24ED34268;
          re::IntrospectionRegistry::add(v27, v28);
          re::getPrettyTypeName((re *)&qword_2558307C0, (const re::IntrospectionBase *)&v199);
          if ((BYTE8(v199) & 1) != 0)
            v29 = v200;
          else
            v29 = (char *)&v199 + 9;
          if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v199 + 40))();
          v30 = (StringID)*((_OWORD *)v5 + 2);
          v190 = *((_OWORD *)v22 + 2);
          v191 = v30;
          v31 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v192);
          if (v31)
          {
            v32 = *v31;
            *((_QWORD *)&v189 + 1) = v32;
          }
          else
          {
            *(_QWORD *)&v199 = 0x449AD97C4B77BED4;
            *((_QWORD *)&v199 + 1) = "_CompareFunc";
            v33 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v199);
            if (v33)
            {
              v5 = *v33;
              re::StringID::destroyString((re::StringID *)&v199);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v199);
              *(_QWORD *)&v194 = 0x449AD97C4B77BED4;
              *((_QWORD *)&v194 + 1) = "_CompareFunc";
              v5 = (char *)*((_QWORD *)&v199 + 1);
              v34 = (void *)v199;
              re::StringID::destroyString((re::StringID *)&v194);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v194, (uint64_t)&v199 + 8);
            if (!v34
              || (v35 = *v195,
                  *(_QWORD *)&v199 = v5,
                  *((_QWORD *)&v199 + 1) = v35,
                  LODWORD(v200) = -1,
                  (v36 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v194 + 768, (uint64_t *)&v199)) == 0)|| !*(_QWORD *)v36)
            {
              v198 = v191;
              *(_QWORD *)&v197.var0 = v34;
              v197.var1 = v5;
            }
            v196 = v191;
            v193 = v190;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v199, v192, 1, 0x30uLL, 8uLL, (__int128 *)&v196, &v193);
            re::TypeBuilder::setConstructor((uint64_t)&v199, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v199, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v199, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v199, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v199, v37);
          }
          xmmword_2558307E0 = v189;
          re::StringID::destroyString((re::StringID *)v192);
        }
      }
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      v39 = 1;
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "m_typeMap";
      *(_QWORD *)(v38 + 16) = &qword_2558307C0;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x8800000004;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_255830BF8 = v38;
      v40 = re::introspectionAllocator((re *)v38);
      v41 = (uint64_t *)qword_2540FE540;
      if (qword_2540FE540)
        goto LABEL_32;
      v42 = atomic_load((unsigned __int8 *)&qword_2540FE530);
      v41 = &qword_2558324A0;
      v5 = "EventParameterFloatArray";
      if ((v42 & 1) == 0)
        goto LABEL_85;
      while (1)
      {
        qword_2540FE540 = (uint64_t)v41;
        *(_QWORD *)&v194 = 0x784085696EA0F218;
        *((_QWORD *)&v194 + 1) = v5;
        re::StringID::destroyString((re::StringID *)&v194);
        *((_OWORD *)v41 + 2) = v199;
        v44 = atomic_load((unsigned __int8 *)&qword_2540FE538);
        if ((v44 & 1) == 0)
        {
          v5 = (char *)&qword_2540FE538;
          v124 = (re *)__cxa_guard_acquire(&qword_2540FE538);
          if ((_DWORD)v124)
          {
            v125 = re::introspectionAllocator(v124);
            v127 = re::introspect_size_t((re *)1, v126);
            v128 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v125 + 32))(v125, 72, 8);
            *(_DWORD *)v128 = 1;
            *(_QWORD *)(v128 + 8) = "numParamsPerEvent";
            *(_QWORD *)(v128 + 16) = v127;
            *(_QWORD *)(v128 + 24) = 0;
            *(_QWORD *)(v128 + 32) = 1;
            *(_DWORD *)(v128 + 40) = 0;
            *(_QWORD *)(v128 + 48) = 0;
            *(_QWORD *)(v128 + 56) = 0;
            *(_DWORD *)(v128 + 64) = 0;
            qword_2540FE668 = v128;
            v129 = re::introspectionAllocator((re *)v128);
            v131 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v130);
            v132 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v129 + 32))(v129, 72, 8);
            *(_DWORD *)v132 = 1;
            *(_QWORD *)(v132 + 8) = "parameters";
            *(_QWORD *)(v132 + 16) = v131;
            *(_QWORD *)(v132 + 24) = 0;
            *(_QWORD *)(v132 + 32) = 0x800000002;
            *(_DWORD *)(v132 + 40) = 0;
            *(_QWORD *)(v132 + 48) = 0;
            *(_QWORD *)(v132 + 56) = 0;
            *(_DWORD *)(v132 + 64) = 0;
            qword_2540FE670 = v132;
            __cxa_guard_release(&qword_2540FE538);
          }
        }
        v41[2] = 0x3000000008;
        *((_DWORD *)v41 + 6) = 8;
        *((_WORD *)v41 + 14) = 0;
        *((_DWORD *)v41 + 14) = 2;
        v41[8] = (uint64_t)&qword_2540FE668;
        v41[9] = (uint64_t)re::internal::defaultConstruct<re::EventParameterFloatArray>;
        v41[10] = (uint64_t)re::internal::defaultDestruct<re::EventParameterFloatArray>;
        v41[11] = 0;
        v41[12] = 0;
        v41[13] = (uint64_t)re::internal::defaultConstructV2<re::EventParameterFloatArray>;
        v41[14] = (uint64_t)re::internal::defaultDestructV2<re::EventParameterFloatArray>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v41, v43);
        v194 = v199;
LABEL_32:
        v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
        *(_DWORD *)v45 = v39;
        *(_QWORD *)(v45 + 8) = "m_floatData";
        *(_QWORD *)(v45 + 16) = v41;
        *(_QWORD *)(v45 + 24) = 0;
        *(_QWORD *)(v45 + 32) = 0xB800000005;
        *(_DWORD *)(v45 + 40) = 0;
        *(_QWORD *)(v45 + 48) = 0;
        *(_QWORD *)(v45 + 56) = 0;
        *(_DWORD *)(v45 + 64) = 0;
        qword_255830C00 = v45;
        v46 = re::introspectionAllocator((re *)v45);
        v47 = (uint64_t *)qword_2540FE558;
        if (!qword_2540FE558)
        {
          v48 = atomic_load((unsigned __int8 *)&qword_2540FE548);
          v47 = &qword_255832518;
          v5 = "EventParameterIntArray";
          if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE548))
          {
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255832518, 0);
            *(uint64_t *)((char *)&qword_255832528 + 6) = 0;
            qword_255832528 = 0;
            *(_QWORD *)&xmmword_255832538 = 0;
            *((_QWORD *)&xmmword_255832538 + 1) = 0xFFFFFFFFLL;
            qword_255832518 = (uint64_t)&off_24ED7DAA8;
            qword_255832548 = (uint64_t)"EventParameterIntArray";
            dword_255832550 = 0;
            xmmword_255832558 = 0u;
            *(_OWORD *)&qword_255832568 = 0u;
            xmmword_255832578 = 0u;
            qword_255832588 = 0;
            __cxa_guard_release(&qword_2540FE548);
          }
          qword_2540FE558 = (uint64_t)&qword_255832518;
          *(_QWORD *)&v194 = 0xF60099BB89454E32;
          *((_QWORD *)&v194 + 1) = "EventParameterIntArray";
          re::StringID::destroyString((re::StringID *)&v194);
          xmmword_255832538 = v199;
          v50 = atomic_load((unsigned __int8 *)&qword_2540FE550);
          if ((v50 & 1) == 0)
          {
            v5 = (char *)&qword_2540FE550;
            v133 = (re *)__cxa_guard_acquire(&qword_2540FE550);
            if ((_DWORD)v133)
            {
              v134 = re::introspectionAllocator(v133);
              v136 = re::introspect_size_t((re *)1, v135);
              v137 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 72, 8);
              *(_DWORD *)v137 = 1;
              *(_QWORD *)(v137 + 8) = "numParamsPerEvent";
              *(_QWORD *)(v137 + 16) = v136;
              *(_QWORD *)(v137 + 24) = 0;
              *(_QWORD *)(v137 + 32) = 1;
              *(_DWORD *)(v137 + 40) = 0;
              *(_QWORD *)(v137 + 48) = 0;
              *(_QWORD *)(v137 + 56) = 0;
              *(_DWORD *)(v137 + 64) = 0;
              qword_2540FE678 = v137;
              v138 = re::introspectionAllocator((re *)v137);
              v140 = re::IntrospectionInfo<re::DynamicArray<int>>::get(1, v139);
              v141 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v138 + 32))(v138, 72, 8);
              *(_DWORD *)v141 = 1;
              *(_QWORD *)(v141 + 8) = "parameters";
              *(_QWORD *)(v141 + 16) = v140;
              *(_QWORD *)(v141 + 24) = 0;
              *(_QWORD *)(v141 + 32) = 0x800000002;
              *(_DWORD *)(v141 + 40) = 0;
              *(_QWORD *)(v141 + 48) = 0;
              *(_QWORD *)(v141 + 56) = 0;
              *(_DWORD *)(v141 + 64) = 0;
              qword_2540FE680 = v141;
              __cxa_guard_release(&qword_2540FE550);
            }
          }
          qword_255832528 = 0x3000000008;
          dword_255832530 = 8;
          word_255832534 = 0;
          dword_255832550 = 2;
          *(_QWORD *)&xmmword_255832558 = &qword_2540FE678;
          *((_QWORD *)&xmmword_255832558 + 1) = re::internal::defaultConstruct<re::EventParameterIntArray>;
          qword_255832568 = (uint64_t)re::internal::defaultDestruct<re::EventParameterIntArray>;
          unk_255832570 = 0;
          *(_QWORD *)&xmmword_255832578 = 0;
          *((_QWORD *)&xmmword_255832578 + 1) = re::internal::defaultConstructV2<re::EventParameterIntArray>;
          qword_255832588 = (uint64_t)re::internal::defaultDestructV2<re::EventParameterIntArray>;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255832518, v49);
          v194 = v199;
        }
        v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
        v39 = 1;
        *(_DWORD *)v51 = 1;
        *(_QWORD *)(v51 + 8) = "m_intData";
        *(_QWORD *)(v51 + 16) = v47;
        *(_QWORD *)(v51 + 24) = 0;
        *(_QWORD *)(v51 + 32) = 0xE800000006;
        *(_DWORD *)(v51 + 40) = 0;
        *(_QWORD *)(v51 + 48) = 0;
        *(_QWORD *)(v51 + 56) = 0;
        *(_DWORD *)(v51 + 64) = 0;
        qword_255830C08 = v51;
        v52 = re::introspectionAllocator((re *)v51);
        v53 = (uint64_t *)qword_2540FE570;
        if (!qword_2540FE570)
        {
          v54 = atomic_load((unsigned __int8 *)&qword_2540FE560);
          v53 = &qword_255832590;
          v5 = "EventParameterStringArray";
          if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE560))
          {
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255832590, 0);
            *(uint64_t *)((char *)&qword_2558325A0 + 6) = 0;
            qword_2558325A0 = 0;
            *(_QWORD *)&xmmword_2558325B0 = 0;
            *((_QWORD *)&xmmword_2558325B0 + 1) = 0xFFFFFFFFLL;
            qword_255832590 = (uint64_t)&off_24ED7DAA8;
            qword_2558325C0 = (uint64_t)"EventParameterStringArray";
            dword_2558325C8 = 0;
            xmmword_2558325D0 = 0u;
            *(_OWORD *)&qword_2558325E0 = 0u;
            xmmword_2558325F0 = 0u;
            qword_255832600 = 0;
            __cxa_guard_release(&qword_2540FE560);
          }
          qword_2540FE570 = (uint64_t)&qword_255832590;
          *(_QWORD *)&v194 = 0x901D6332C27CF5F2;
          *((_QWORD *)&v194 + 1) = "EventParameterStringArray";
          re::StringID::destroyString((re::StringID *)&v194);
          xmmword_2558325B0 = v199;
          v56 = atomic_load((unsigned __int8 *)&qword_2540FE568);
          if ((v56 & 1) == 0)
          {
            v5 = (char *)&qword_2540FE568;
            v142 = (re *)__cxa_guard_acquire(&qword_2540FE568);
            if ((_DWORD)v142)
            {
              v143 = re::introspectionAllocator(v142);
              v145 = re::introspect_size_t((re *)1, v144);
              v146 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v143 + 32))(v143, 72, 8);
              *(_DWORD *)v146 = 1;
              *(_QWORD *)(v146 + 8) = "numParamsPerEvent";
              *(_QWORD *)(v146 + 16) = v145;
              *(_QWORD *)(v146 + 24) = 0;
              *(_QWORD *)(v146 + 32) = 1;
              *(_DWORD *)(v146 + 40) = 0;
              *(_QWORD *)(v146 + 48) = 0;
              *(_QWORD *)(v146 + 56) = 0;
              *(_DWORD *)(v146 + 64) = 0;
              qword_2540FE688 = v146;
              v147 = re::introspectionAllocator((re *)v146);
              v149 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v148);
              v150 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v147 + 32))(v147, 72, 8);
              *(_DWORD *)v150 = 1;
              *(_QWORD *)(v150 + 8) = "parameters";
              *(_QWORD *)(v150 + 16) = v149;
              *(_QWORD *)(v150 + 24) = 0;
              *(_QWORD *)(v150 + 32) = 0x800000002;
              *(_DWORD *)(v150 + 40) = 0;
              *(_QWORD *)(v150 + 48) = 0;
              *(_QWORD *)(v150 + 56) = 0;
              *(_DWORD *)(v150 + 64) = 0;
              qword_2540FE690 = v150;
              __cxa_guard_release(&qword_2540FE568);
            }
          }
          qword_2558325A0 = 0x3000000008;
          dword_2558325A8 = 8;
          word_2558325AC = 0;
          dword_2558325C8 = 2;
          *(_QWORD *)&xmmword_2558325D0 = &qword_2540FE688;
          *((_QWORD *)&xmmword_2558325D0 + 1) = re::internal::defaultConstruct<re::EventParameterStringArray>;
          qword_2558325E0 = (uint64_t)re::internal::defaultDestruct<re::EventParameterStringArray>;
          unk_2558325E8 = 0;
          *(_QWORD *)&xmmword_2558325F0 = 0;
          *((_QWORD *)&xmmword_2558325F0 + 1) = re::internal::defaultConstructV2<re::EventParameterStringArray>;
          qword_255832600 = (uint64_t)re::internal::defaultDestructV2<re::EventParameterStringArray>;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255832590, v55);
          v194 = v199;
        }
        v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
        *(_DWORD *)v57 = 1;
        *(_QWORD *)(v57 + 8) = "m_stringData";
        *(_QWORD *)(v57 + 16) = v53;
        *(_QWORD *)(v57 + 24) = 0;
        *(_QWORD *)(v57 + 32) = 0x11800000007;
        *(_DWORD *)(v57 + 40) = 0;
        *(_QWORD *)(v57 + 48) = 0;
        *(_QWORD *)(v57 + 56) = 0;
        *(_DWORD *)(v57 + 64) = 0;
        qword_255830C10 = v57;
        v58 = re::introspectionAllocator((re *)v57);
        v59 = (uint64_t *)qword_2540FE588;
        if (!qword_2540FE588)
        {
          v60 = atomic_load((unsigned __int8 *)&qword_2540FE578);
          v59 = &qword_255832608;
          v5 = "EventParameterVector4Array";
          if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE578))
          {
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255832608, 0);
            *(uint64_t *)((char *)&qword_255832618 + 6) = 0;
            qword_255832618 = 0;
            *(_QWORD *)&xmmword_255832628 = 0;
            *((_QWORD *)&xmmword_255832628 + 1) = 0xFFFFFFFFLL;
            qword_255832608 = (uint64_t)&off_24ED7DAA8;
            qword_255832638 = (uint64_t)"EventParameterVector4Array";
            dword_255832640 = 0;
            xmmword_255832648 = 0u;
            *(_OWORD *)&qword_255832658 = 0u;
            xmmword_255832668 = 0u;
            qword_255832678 = 0;
            __cxa_guard_release(&qword_2540FE578);
          }
          qword_2540FE588 = (uint64_t)&qword_255832608;
          *(_QWORD *)&v194 = 0x755284B38F8DEAEELL;
          *((_QWORD *)&v194 + 1) = "EventParameterVector4Array";
          v39 = 8;
          re::StringID::destroyString((re::StringID *)&v194);
          xmmword_255832628 = v199;
          v62 = atomic_load((unsigned __int8 *)&qword_2540FE580);
          if ((v62 & 1) == 0)
          {
            v5 = (char *)&qword_2540FE580;
            v151 = (re *)__cxa_guard_acquire(&qword_2540FE580);
            if ((_DWORD)v151)
            {
              v152 = re::introspectionAllocator(v151);
              v154 = re::introspect_size_t((re *)1, v153);
              v155 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v152 + 32))(v152, 72, 8);
              *(_DWORD *)v155 = 1;
              *(_QWORD *)(v155 + 8) = "numParamsPerEvent";
              *(_QWORD *)(v155 + 16) = v154;
              *(_QWORD *)(v155 + 24) = 0;
              *(_QWORD *)(v155 + 32) = 1;
              *(_DWORD *)(v155 + 40) = 0;
              *(_QWORD *)(v155 + 48) = 0;
              *(_QWORD *)(v155 + 56) = 0;
              *(_DWORD *)(v155 + 64) = 0;
              qword_2540FE698 = v155;
              v156 = re::introspectionAllocator((re *)v155);
              v157 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
              v158 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v156 + 32))(v156, 72, 8);
              *(_DWORD *)v158 = 1;
              *(_QWORD *)(v158 + 8) = "parameters";
              *(_QWORD *)(v158 + 16) = v157;
              *(_QWORD *)(v158 + 24) = 0;
              *(_QWORD *)(v158 + 32) = 0x800000002;
              *(_DWORD *)(v158 + 40) = 0;
              *(_QWORD *)(v158 + 48) = 0;
              *(_QWORD *)(v158 + 56) = 0;
              *(_DWORD *)(v158 + 64) = 0;
              qword_2540FE6A0 = v158;
              __cxa_guard_release(&qword_2540FE580);
            }
          }
          qword_255832618 = 0x3000000008;
          dword_255832620 = 8;
          word_255832624 = 0;
          dword_255832640 = 2;
          *(_QWORD *)&xmmword_255832648 = &qword_2540FE698;
          *((_QWORD *)&xmmword_255832648 + 1) = re::internal::defaultConstruct<re::EventParameterVector4Array>;
          qword_255832658 = (uint64_t)re::internal::defaultDestruct<re::EventParameterVector4Array>;
          unk_255832660 = 0;
          *(_QWORD *)&xmmword_255832668 = 0;
          *((_QWORD *)&xmmword_255832668 + 1) = re::internal::defaultConstructV2<re::EventParameterVector4Array>;
          qword_255832678 = (uint64_t)re::internal::defaultDestructV2<re::EventParameterVector4Array>;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255832608, v61);
          v194 = v199;
        }
        v63 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
        *(_DWORD *)v63 = 1;
        *(_QWORD *)(v63 + 8) = "m_vector4Data";
        *(_QWORD *)(v63 + 16) = v59;
        *(_QWORD *)(v63 + 24) = 0;
        *(_QWORD *)(v63 + 32) = 0x14800000008;
        *(_DWORD *)(v63 + 40) = 0;
        *(_QWORD *)(v63 + 48) = 0;
        *(_QWORD *)(v63 + 56) = 0;
        *(_DWORD *)(v63 + 64) = 0;
        qword_255830C18 = v63;
        v41 = re::introspectionAllocator((re *)v63);
        v65 = atomic_load((unsigned __int8 *)&qword_2540FE508);
        if ((v65 & 1) == 0)
        {
          v104 = (re *)__cxa_guard_acquire(&qword_2540FE508);
          if ((_DWORD)v104)
          {
            v105 = re::introspectionAllocator(v104);
            v106 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v105 + 32))(v105, 24, 8);
            v5 = (char *)1;
            *(_DWORD *)v106 = 1;
            *((_QWORD *)v106 + 1) = -1;
            *((_QWORD *)v106 + 2) = "REAnimatableValueTypeInvalid";
            qword_2540FF038 = (uint64_t)v106;
            v107 = re::introspectionAllocator(v106);
            v108 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v107 + 32))(v107, 24, 8);
            *(_DWORD *)v108 = 1;
            *((_QWORD *)v108 + 1) = 0;
            *((_QWORD *)v108 + 2) = "REAnimatableValueTypeFloat";
            qword_2540FF040 = (uint64_t)v108;
            v109 = re::introspectionAllocator(v108);
            v110 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v109 + 32))(v109, 24, 8);
            *(_DWORD *)v110 = 1;
            *((_QWORD *)v110 + 1) = 1;
            *((_QWORD *)v110 + 2) = "REAnimatableValueTypeDouble";
            qword_2540FF048 = (uint64_t)v110;
            v111 = re::introspectionAllocator(v110);
            v112 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v111 + 32))(v111, 24, 8);
            *(_DWORD *)v112 = 1;
            *((_QWORD *)v112 + 1) = 2;
            *((_QWORD *)v112 + 2) = "REAnimatableValueTypeVector2F";
            qword_2540FF050 = (uint64_t)v112;
            v113 = re::introspectionAllocator(v112);
            v114 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v113 + 32))(v113, 24, 8);
            *(_DWORD *)v114 = 1;
            *((_QWORD *)v114 + 1) = 3;
            *((_QWORD *)v114 + 2) = "REAnimatableValueTypeVector3F";
            qword_2540FF058 = (uint64_t)v114;
            v115 = re::introspectionAllocator(v114);
            v116 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v115 + 32))(v115, 24, 8);
            *(_DWORD *)v116 = 1;
            *((_QWORD *)v116 + 1) = 4;
            *((_QWORD *)v116 + 2) = "REAnimatableValueTypeVector4F";
            qword_2540FF060 = (uint64_t)v116;
            v117 = re::introspectionAllocator(v116);
            v118 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v117 + 32))(v117, 24, 8);
            *(_DWORD *)v118 = 1;
            *((_QWORD *)v118 + 1) = 5;
            *((_QWORD *)v118 + 2) = "REAnimatableValueTypeQuaternionF";
            qword_2540FF068 = (uint64_t)v118;
            v119 = re::introspectionAllocator(v118);
            v120 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v119 + 32))(v119, 24, 8);
            *(_DWORD *)v120 = 1;
            *((_QWORD *)v120 + 1) = 6;
            *((_QWORD *)v120 + 2) = "REAnimatableValueTypeSRT";
            qword_2540FF070 = (uint64_t)v120;
            v121 = re::introspectionAllocator(v120);
            v122 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v121 + 32))(v121, 24, 8);
            *(_DWORD *)v122 = 1;
            *(_QWORD *)(v122 + 8) = 7;
            *(_QWORD *)(v122 + 16) = "REAnimatableValueTypeSkeletalPose";
            qword_2540FF078 = v122;
            __cxa_guard_release(&qword_2540FE508);
          }
        }
        v66 = atomic_load((unsigned __int8 *)&qword_2540FE510);
        if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE510))
        {
          re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2540FF080, "REAnimatableValueType", 1, 1, 1, 1);
          qword_2540FF080 = (uint64_t)&off_24ED7D9E8;
          qword_2540FF0C0 = (uint64_t)&re::introspect_REAnimatableValueType(BOOL)::enumTable;
          dword_2540FF090 = 9;
          __cxa_guard_release(&qword_2540FE510);
        }
        if ((byte_2540FE151 & 1) != 0)
          break;
        byte_2540FE151 = 1;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FF080, v64);
        v40 = (uint64_t *)"REAnimatableValueType";
        *(_QWORD *)&v197.var0 = 0x2B6E2394F1C7DEB4;
        v197.var1 = "REAnimatableValueType";
        *(_QWORD *)&v199 = 6104748;
        *((_QWORD *)&v199 + 1) = "char";
        v67 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v199);
        if (v67)
        {
          v68 = *v67;
          re::StringID::destroyString((re::StringID *)&v199);
          v69 = (unsigned int *)qword_2540FF0C0;
          *((_QWORD *)&v194 + 1) = v68;
          re::TypeBuilder::beginEnumType((uint64_t)&v199, (uint64_t *)&v197, 1, 1, (uint64_t)&v194);
          v71 = *v69;
          if ((_DWORD)v71)
          {
            for (i = 0; i < v71; ++i)
            {
              v73 = *(_QWORD *)(*((_QWORD *)v69 + 1) + 8 * i);
              if (*(_DWORD *)v73 == 1)
              {
                v74 = *(char **)(v73 + 16);
                if (v74)
                {
                  v75 = *v74;
                  if (*v74)
                  {
                    v76 = v74[1];
                    if (v76)
                    {
                      v77 = (unsigned __int8 *)(v74 + 2);
                      do
                      {
                        v75 = 31 * v75 + v76;
                        v78 = *v77++;
                        v76 = v78;
                      }
                      while (v78);
                    }
                  }
                }
                else
                {
                  v75 = 0;
                }
                v79 = *(_QWORD *)(v73 + 8);
                *(_QWORD *)&v198.var0 = 2 * v75;
                v198.var1 = v74;
                re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v199, v79, &v198);
                re::StringID::destroyString((re::StringID *)&v198);
                v71 = *v69;
              }
            }
            if (v71)
            {
              for (j = 0; j < v71; ++j)
              {
                v81 = *(_QWORD *)(*((_QWORD *)v69 + 1) + 8 * j);
                if (*(_DWORD *)v81 == 2)
                {
                  v82 = *(char **)(v81 + 16);
                  if (v82)
                  {
                    v83 = *v82;
                    if (*v82)
                    {
                      v84 = v82[1];
                      if (v84)
                      {
                        v85 = (unsigned __int8 *)(v82 + 2);
                        do
                        {
                          v83 = 31 * v83 + v84;
                          v86 = *v85++;
                          v84 = v86;
                        }
                        while (v86);
                      }
                    }
                  }
                  else
                  {
                    v83 = 0;
                  }
                  v87 = *(_QWORD *)(v81 + 8);
                  *(_QWORD *)&v198.var0 = 2 * v83;
                  v198.var1 = v82;
                  re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v199, v87, &v198);
                  re::StringID::destroyString((re::StringID *)&v198);
                  v71 = *v69;
                }
              }
            }
          }
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v199, v88);
          xmmword_2540FF0A0 = (__int128)v198;
          re::StringID::destroyString((re::StringID *)&v197);
          break;
        }
        re::StringID::destroyString((re::StringID *)&v199);
        re::internal::assertLog((re::internal *)5, v123, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAnimatableValueType");
        _os_crash();
        __break(1u);
LABEL_85:
        if (__cxa_guard_acquire(&qword_2540FE530))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)v41, 0);
          *(uint64_t *)((char *)v41 + 22) = 0;
          v41[2] = 0;
          v41[4] = 0;
          v41[5] = 0xFFFFFFFFLL;
          *v41 = (uint64_t)&off_24ED7DAA8;
          v41[6] = (uint64_t)v5;
          *((_DWORD *)v41 + 14) = 0;
          *((_OWORD *)v41 + 4) = 0u;
          *((_OWORD *)v41 + 5) = 0u;
          *((_OWORD *)v41 + 6) = 0u;
          v41[14] = 0;
          __cxa_guard_release(&qword_2540FE530);
        }
      }
      v89 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v89 = 1;
      *(_QWORD *)(v89 + 8) = "m_animatedType";
      *(_QWORD *)(v89 + 16) = &qword_2540FF080;
      *(_QWORD *)(v89 + 24) = 0;
      *(_QWORD *)(v89 + 32) = 0x1D800000009;
      *(_DWORD *)(v89 + 40) = 0;
      *(_QWORD *)(v89 + 48) = 0;
      *(_QWORD *)(v89 + 56) = 0;
      *(_DWORD *)(v89 + 64) = 0;
      qword_255830C20 = v89;
      v90 = re::introspectionAllocator((re *)v89);
      v91 = (uint64_t *)qword_2540FE5A0;
      if (!qword_2540FE5A0)
      {
        v92 = atomic_load((unsigned __int8 *)&qword_2540FE590);
        v91 = &qword_255832680;
        if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE590))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255832680, 0);
          *(uint64_t *)((char *)&qword_255832690 + 6) = 0;
          qword_255832690 = 0;
          *(_QWORD *)&xmmword_2558326A0 = 0;
          *((_QWORD *)&xmmword_2558326A0 + 1) = 0xFFFFFFFFLL;
          qword_255832680 = (uint64_t)&off_24ED7DAA8;
          qword_2558326B0 = (uint64_t)"EventParameterDataArray";
          dword_2558326B8 = 0;
          xmmword_2558326C0 = 0u;
          *(_OWORD *)&qword_2558326D0 = 0u;
          xmmword_2558326E0 = 0u;
          qword_2558326F0 = 0;
          __cxa_guard_release(&qword_2540FE590);
        }
        qword_2540FE5A0 = (uint64_t)&qword_255832680;
        *(_QWORD *)&v199 = 0xCA12954DAFAB3680;
        *((_QWORD *)&v199 + 1) = "EventParameterDataArray";
        re::StringID::destroyString((re::StringID *)&v199);
        xmmword_2558326A0 = v193;
        v94 = atomic_load((unsigned __int8 *)&qword_2540FE598);
        if ((v94 & 1) == 0)
        {
          v159 = (re *)__cxa_guard_acquire(&qword_2540FE598);
          if ((_DWORD)v159)
          {
            v160 = re::introspectionAllocator(v159);
            v162 = re::introspect_size_t((re *)1, v161);
            v163 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v160 + 32))(v160, 72, 8);
            *(_DWORD *)v163 = 1;
            *(_QWORD *)(v163 + 8) = "numParamsPerEvent";
            *(_QWORD *)(v163 + 16) = v162;
            *(_QWORD *)(v163 + 24) = 0;
            *(_QWORD *)(v163 + 32) = 1;
            *(_DWORD *)(v163 + 40) = 0;
            *(_QWORD *)(v163 + 48) = 0;
            *(_QWORD *)(v163 + 56) = 0;
            *(_DWORD *)(v163 + 64) = 0;
            qword_2540FE6A8 = v163;
            v184 = re::introspectionAllocator((re *)v163);
            v165 = atomic_load((unsigned __int8 *)&qword_2540FE630);
            if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE630))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEFF8, 0);
              *(_QWORD *)(v183 + 22) = 0;
              qword_2540FF008 = 0;
              *(_QWORD *)&xmmword_2540FF018 = 0;
              *((_QWORD *)&xmmword_2540FF018 + 1) = 0xFFFFFFFFLL;
              qword_2540FEFF8 = (uint64_t)&off_24ED1FA08;
              qword_2540FF030 = 0;
              re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2540FF028);
              qword_2540FEFF8 = (uint64_t)&off_24ED343A0;
              __cxa_guard_release(&qword_2540FE630);
            }
            if ((byte_2540FE15E & 1) == 0)
            {
              v166 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, v164);
              if ((byte_2540FE15E & 1) == 0)
              {
                v167 = (uint64_t)v166;
                byte_2540FE15E = 1;
                v168 = *((_DWORD *)v166 + 6);
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FEFF8, 0);
                qword_2540FF008 = 0x2800000003;
                dword_2540FF010 = v168;
                word_2540FF014 = 0;
                *(_QWORD *)&xmmword_2540FF018 = 0;
                *((_QWORD *)&xmmword_2540FF018 + 1) = 0xFFFFFFFFLL;
                qword_2540FF028 = v167;
                qword_2540FF030 = 0;
                qword_2540FEFF8 = (uint64_t)&off_24ED343A0;
                re::IntrospectionRegistry::add(v169, v170);
                re::getPrettyTypeName((re *)&qword_2540FEFF8, (const re::IntrospectionBase *)&v199);
                if ((BYTE8(v199) & 1) != 0)
                  v171 = v200;
                else
                  v171 = (char *)&v199 + 9;
                if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v199 + 40))();
                v197 = *(StringID *)(v167 + 32);
                v172 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v198);
                if (v172)
                {
                  v173 = *v172;
                  v196.var1 = v173;
                }
                else
                {
                  v194 = (__int128)v197;
                  re::TypeBuilder::beginListType((uint64_t)&v199, (uint64_t *)&v198, 1, 0x28uLL, 8uLL, &v194);
                  re::TypeBuilder::setConstructor((uint64_t)&v199, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
                  re::TypeBuilder::setDestructor((uint64_t)&v199, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
                  re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v199, 1);
                  re::TypeBuilder::setListAccessors((uint64_t)&v199, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIndexer((uint64_t)&v199, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIterator((uint64_t)&v199, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
                  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v199, v181);
                }
                xmmword_2540FF018 = (__int128)v196;
                re::StringID::destroyString((re::StringID *)&v198);
              }
            }
            v182 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v184 + 32))(v184, 72, 8);
            *(_DWORD *)v182 = 1;
            *(_QWORD *)(v182 + 8) = "parameters";
            *(_QWORD *)(v182 + 16) = &qword_2540FEFF8;
            *(_QWORD *)(v182 + 24) = 0;
            *(_QWORD *)(v182 + 32) = 0x800000002;
            *(_DWORD *)(v182 + 40) = 0;
            *(_QWORD *)(v182 + 48) = 0;
            *(_QWORD *)(v182 + 56) = 0;
            *(_DWORD *)(v182 + 64) = 0;
            qword_2540FE6B0 = v182;
            __cxa_guard_release(&qword_2540FE598);
          }
        }
        qword_255832690 = 0x3000000008;
        dword_255832698 = 8;
        word_25583269C = 0;
        dword_2558326B8 = 2;
        *(_QWORD *)&xmmword_2558326C0 = &qword_2540FE6A8;
        *((_QWORD *)&xmmword_2558326C0 + 1) = re::internal::defaultConstruct<re::EventParameterDataArray>;
        qword_2558326D0 = (uint64_t)re::internal::defaultDestruct<re::EventParameterDataArray>;
        unk_2558326D8 = 0;
        *(_QWORD *)&xmmword_2558326E0 = 0;
        *((_QWORD *)&xmmword_2558326E0 + 1) = re::internal::defaultConstructV2<re::EventParameterDataArray>;
        qword_2558326F0 = (uint64_t)re::internal::defaultDestructV2<re::EventParameterDataArray>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255832680, v93);
        v199 = v193;
      }
      v95 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v90 + 32))(v90, 72, 8);
      *(_DWORD *)v95 = 1;
      *(_QWORD *)(v95 + 8) = "m_userData";
      *(_QWORD *)(v95 + 16) = v91;
      *(_QWORD *)(v95 + 24) = 0;
      *(_QWORD *)(v95 + 32) = 0x1780000000ALL;
      *(_DWORD *)(v95 + 40) = 0;
      *(_QWORD *)(v95 + 48) = 0;
      *(_QWORD *)(v95 + 56) = 0;
      *(_DWORD *)(v95 + 64) = 0;
      qword_255830C28 = v95;
      v96 = re::introspectionAllocator((re *)v95);
      v98 = re::introspect_BOOL((re *)1, v97);
      v99 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v96 + 32))(v96, 72, 8);
      *(_DWORD *)v99 = 1;
      *(_QWORD *)(v99 + 8) = "m_reversible";
      *(_QWORD *)(v99 + 16) = v98;
      *(_QWORD *)(v99 + 24) = 0;
      *(_QWORD *)(v99 + 32) = 0x2000000000BLL;
      *(_DWORD *)(v99 + 40) = 0;
      *(_QWORD *)(v99 + 48) = 0;
      *(_QWORD *)(v99 + 56) = 0;
      *(_DWORD *)(v99 + 64) = 0;
      qword_255830C30 = v99;
      v100 = re::introspectionAllocator((re *)v99);
      v102 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, v101);
      v103 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v100 + 32))(v100, 72, 8);
      *(_DWORD *)v103 = 1;
      *(_QWORD *)(v103 + 8) = "m_constantParameters";
      *(_QWORD *)(v103 + 16) = v102;
      *(_QWORD *)(v103 + 24) = 0;
      *(_QWORD *)(v103 + 32) = 0x1E00000000CLL;
      *(_DWORD *)(v103 + 40) = 0;
      *(_QWORD *)(v103 + 48) = 0;
      *(_QWORD *)(v103 + 56) = 0;
      *(_DWORD *)(v103 + 64) = 0;
      qword_255830C38 = v103;
      __cxa_guard_release(&qword_2540FE518);
    }
  }
  *((_QWORD *)this + 2) = 0x23000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((_QWORD *)this + 8) = &qword_255830BE0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TimelineEventData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TimelineEventData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TimelineEventData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TimelineEventData>;
  re::IntrospectionRegistry::add(this, v3);
  v187 = v188;
}

double re::internal::defaultConstruct<re::TimelineEventData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_DWORD *)(a3 + 120) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 156) = 0u;
  *(_QWORD *)(a3 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_DWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 464) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 252) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 300) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 348) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 396) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 444) = 0u;
  *(_BYTE *)(a3 + 472) = -1;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_BYTE *)(a3 + 512) = 1;
  *(_QWORD *)(a3 + 552) = 0;
  *(_QWORD *)(a3 + 536) = 0;
  *(_DWORD *)(a3 + 544) = 0;
  *(_OWORD *)(a3 + 520) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::TimelineEventData>(int a1, int a2, re::TimelineEventData *this)
{
  re::TimelineEventData::~TimelineEventData(this);
}

double re::internal::defaultConstructV2<re::TimelineEventData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_QWORD *)(a1 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_BYTE *)(a1 + 472) = -1;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_BYTE *)(a1 + 512) = 1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  return result;
}

double re::internal::defaultConstruct<re::EventParameterFloatArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterFloatArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 8);
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    if (*(_QWORD *)(a3 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 40) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 32);
  }
  return result;
}

double re::internal::defaultConstructV2<re::EventParameterFloatArray>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterFloatArray>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

double re::internal::defaultConstruct<re::EventParameterIntArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterIntArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 8);
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    if (*(_QWORD *)(a3 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 40) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 32);
  }
  return result;
}

double re::internal::defaultConstructV2<re::EventParameterIntArray>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterIntArray>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

double re::internal::defaultConstruct<re::EventParameterStringArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterStringArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::StringID>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::EventParameterStringArray>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterStringArray>(uint64_t a1)
{
  return re::DynamicArray<re::StringID>::deinit(a1 + 8);
}

double re::internal::defaultConstruct<re::EventParameterVector4Array>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterVector4Array>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 8);
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    if (*(_QWORD *)(a3 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 40) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 32);
  }
  return result;
}

double re::internal::defaultConstructV2<re::EventParameterVector4Array>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterVector4Array>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

double re::internal::defaultConstruct<re::EventParameterDataArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterDataArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::EventParameterDataArray>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterDataArray>(uint64_t a1)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 8);
}

void *re::allocInfo_EventTimelineAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FE5C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FE5C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255832770, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "EventTimelineAssetData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2540FE5C0);
  }
  return &unk_255832770;
}

void re::initInfo_EventTimelineAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  re *v13;
  re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x7F4FDB2050CD383ELL;
  v21[1] = "EventTimelineAssetData";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FE5C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FE5C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)re::internal::introspectionInfoStorage<re::TimelineAssetData>;
      if (!re::internal::introspectionInfoStorage<re::TimelineAssetData>)
      {
        v8 = (re *)re::allocInfo_TimelineAssetData((re *)v6);
        re::internal::introspectionInfoStorage<re::TimelineAssetData> = (uint64_t)v8;
        re::initInfo_TimelineAssetData(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "TimelineAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FE6E0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = v11;
      v13 = (re *)qword_2540FE528;
      if (!qword_2540FE528)
      {
        v13 = (re *)re::allocInfo_TimelineEventData((re *)v11);
        qword_2540FE528 = (uint64_t)v13;
        re::initInfo_TimelineEventData(v13, v14);
      }
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "m_eventData";
      *(_QWORD *)(v15 + 16) = v13;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x5000000001;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2540FE6E8 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "isAdditive";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x4800000002;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2540FE6F0 = v19;
      __cxa_guard_release(&qword_2540FE5C8);
    }
  }
  *((_QWORD *)this + 2) = 0x28000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540FE6E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::EventTimelineAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::EventTimelineAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::EventTimelineAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::EventTimelineAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

re::EventTimelineAssetData *re::internal::defaultConstruct<re::EventTimelineAssetData>(int a1, int a2, re::EventTimelineAssetData *this)
{
  return re::EventTimelineAssetData::EventTimelineAssetData(this);
}

void re::internal::defaultDestruct<re::EventTimelineAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::TimelineEventData::~TimelineEventData((re::TimelineEventData *)(a3 + 80));
  *(_QWORD *)a3 = off_24ED36578;
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 24));
}

void re::internal::defaultDestructV2<re::EventTimelineAssetData>(uint64_t a1)
{
  uint64_t v2;

  re::TimelineEventData::~TimelineEventData((re::TimelineEventData *)(a1 + 80));
  *(_QWORD *)a1 = off_24ED36578;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
}

uint64_t re::internal::convertToAssetData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (**v7)(re::FloatAnimationClipAssetData *__hidden);
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  unint64_t v13;
  _anonymous_namespace_ *v14;
  unint64_t v15;
  unint64_t v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::TimelineClipAssetData *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  _anonymous_namespace_ *v33;
  unint64_t v34;
  unint64_t v35;
  _anonymous_namespace_ *v36;
  int v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  _anonymous_namespace_ *v41;
  int v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  int v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  unint64_t *v50;
  re::DynamicString *v51;
  void (**v52)(re::Vector3FAnimationAssetData *__hidden);
  _anonymous_namespace_ *v53;
  int v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  _anonymous_namespace_ *v58;
  int v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  __int128 v63;
  __int128 v64;
  re::SkeletalPoseAnimationAssetData *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _anonymous_namespace_ *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  re::SkeletalPoseKeyframeAnimationAssetData *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _anonymous_namespace_ *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  re::SkeletalPoseSampledAnimationAssetData *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  _anonymous_namespace_ *v102;
  unint64_t v103;
  unint64_t v104;
  _anonymous_namespace_ *v105;
  unint64_t v106;
  unint64_t v107;
  _anonymous_namespace_ *v108;
  unint64_t v109;
  unint64_t v110;
  _anonymous_namespace_ *v111;
  unint64_t v112;
  unint64_t v113;
  _anonymous_namespace_ *v114;
  unint64_t v115;
  unint64_t v116;
  re::EventTimelineAssetData *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  BOOL v129;
  BOOL v130;
  int v131;
  BOOL v132;
  BOOL v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  int v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  int v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  int v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  int v162;
  BOOL v163;
  BOOL v164;
  BOOL v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  signed int v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  void **v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  unint64_t v189;
  _BYTE v191[28];
  __int16 v192;
  unint64_t v193;
  _OWORD v194[2];
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;

  v198 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 176, 8);
      v26 = re::TimelineClipAssetData::TimelineClipAssetData((re::TimelineClipAssetData *)v5);
      *((_DWORD *)v26 + 3) = *(_DWORD *)(a1 + 12);
      *((_BYTE *)v26 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)v26 + 3, (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v27 = *(_OWORD *)(v5 + 72);
      *(_OWORD *)(v5 + 72) = v194[0];
      v194[0] = v27;
      v28 = *(_QWORD *)(v5 + 88);
      *(_QWORD *)(v5 + 88) = *(_QWORD *)&v194[1];
      *(_QWORD *)&v194[1] = v28;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
      v29 = *(unsigned __int8 *)(a1 + 80);
      if (*(_BYTE *)(v5 + 96))
        v30 = 0;
      else
        v30 = v29 == 0;
      if (!v30)
      {
        if (*(_BYTE *)(v5 + 96))
          v31 = v29 == 0;
        else
          v31 = 0;
        if (v31)
        {
          *(_BYTE *)(v5 + 96) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 96))
            v32 = 1;
          else
            v32 = v29 == 0;
          if (!v32)
            *(_BYTE *)(v5 + 96) = 1;
          *(_QWORD *)(v5 + 104) = *(_QWORD *)(a1 + 88);
        }
      }
      v146 = *(unsigned __int8 *)(a1 + 96);
      if (*(_BYTE *)(v5 + 112))
        v147 = 0;
      else
        v147 = v146 == 0;
      if (!v147)
      {
        if (*(_BYTE *)(v5 + 112))
          v148 = v146 == 0;
        else
          v148 = 0;
        if (v148)
        {
          *(_BYTE *)(v5 + 112) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 112))
            v149 = 1;
          else
            v149 = v146 == 0;
          if (!v149)
            *(_BYTE *)(v5 + 112) = 1;
          *(_QWORD *)(v5 + 120) = *(_QWORD *)(a1 + 104);
        }
      }
      *(_QWORD *)(v5 + 128) = *(_QWORD *)(a1 + 112);
      *(_BYTE *)(v5 + 136) = *(_BYTE *)(a1 + 120);
      *(_QWORD *)(v5 + 144) = *(_QWORD *)(a1 + 128);
      if (*(_BYTE *)(v5 + 152) || *(_BYTE *)(a1 + 136))
      {
        if (!*(_BYTE *)(v5 + 152) || *(_BYTE *)(a1 + 136))
        {
          if (!*(_BYTE *)(v5 + 152) && *(_BYTE *)(a1 + 136))
            *(_BYTE *)(v5 + 152) = 1;
          *(_QWORD *)(v5 + 160) = *(_QWORD *)(a1 + 144);
        }
        else
        {
          *(_BYTE *)(v5 + 152) = 0;
        }
      }
      *(_DWORD *)(v5 + 168) = *(_DWORD *)(a1 + 152);
      *(_BYTE *)(v5 + 172) = *(_BYTE *)(a1 + 156);
      return v5;
    case 2:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 112, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 2;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)v5 = off_24ED31B68;
      *(_QWORD *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_DWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      v33 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v34 = *(_QWORD *)(a1 + 80);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 72), v34);
      ++*(_DWORD *)(v5 + 96);
      if (*(_QWORD *)(a1 + 80))
      {
        v35 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 72), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v35;
        }
        while (v35 < *(_QWORD *)(a1 + 80));
      }
      return v5;
    case 3:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<float>::AnimationClipAssetData(v5, 3);
      v7 = off_24ED31C40;
      goto LABEL_231;
    case 4:
    case 6:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<double>::AnimationClipAssetData(v5, 4);
      v7 = off_24ED31CF0;
      goto LABEL_231;
    case 5:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(v5, 5);
      v7 = off_24ED31DB8;
      goto LABEL_231;
    case 7:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(v5, 7);
      v7 = off_24ED31F48;
      goto LABEL_231;
    case 8:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(v5, 8);
      v7 = off_24ED32010;
      goto LABEL_231;
    case 9:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(v5, 9);
      v7 = off_24ED320D8;
      goto LABEL_231;
    case 0xA:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(v5, 10);
      v7 = off_24ED321A0;
      goto LABEL_231;
    case 0xB:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 120, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 11;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 88) = 0;
      *(_BYTE *)(v5 + 96) = 0;
      *(_BYTE *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = &off_24ED364A0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      v36 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v37 = *(unsigned __int8 *)(a1 + 88);
      if (*(_BYTE *)(v5 + 88))
        v38 = 0;
      else
        v38 = v37 == 0;
      if (!v38)
      {
        if (*(_BYTE *)(v5 + 88))
          v39 = v37 == 0;
        else
          v39 = 0;
        if (v39)
        {
          *(_BYTE *)(v5 + 88) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 88))
            v40 = 1;
          else
            v40 = v37 == 0;
          if (!v40)
            *(_BYTE *)(v5 + 88) = 1;
          *(_DWORD *)(v5 + 92) = *(_DWORD *)(a1 + 92);
        }
      }
      v150 = *(unsigned __int8 *)(a1 + 96);
      if (*(_BYTE *)(v5 + 96))
        v151 = 0;
      else
        v151 = v150 == 0;
      if (!v151)
      {
        if (*(_BYTE *)(v5 + 96))
          v152 = v150 == 0;
        else
          v152 = 0;
        if (v152)
        {
          *(_BYTE *)(v5 + 96) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 96))
            v153 = 1;
          else
            v153 = v150 == 0;
          if (!v153)
            *(_BYTE *)(v5 + 96) = 1;
          *(_DWORD *)(v5 + 100) = *(_DWORD *)(a1 + 100);
        }
      }
      if (*(_BYTE *)(v5 + 104) || *(_BYTE *)(a1 + 104))
      {
        if (!*(_BYTE *)(v5 + 104) || *(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(v5 + 104) && *(_BYTE *)(a1 + 104))
            *(_BYTE *)(v5 + 104) = 1;
          *(_DWORD *)(v5 + 108) = *(_DWORD *)(a1 + 108);
        }
        else
        {
          *(_BYTE *)(v5 + 104) = 0;
        }
      }
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 80);
      v168 = *(_QWORD *)(a1 + 112);
      if (v168)
      {
      }
      else
      {
        v169 = 0;
      }
      *(_QWORD *)(v5 + 112) = v169;
      return v5;
    case 0xC:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 144, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 12;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 88) = 0;
      *(_BYTE *)(v5 + 104) = 0;
      *(_BYTE *)(v5 + 120) = 0;
      *(_QWORD *)(v5 + 136) = 0;
      *(_QWORD *)v5 = &off_24ED323B0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      v41 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v42 = *(unsigned __int8 *)(a1 + 88);
      if (*(_BYTE *)(v5 + 88))
        v43 = 0;
      else
        v43 = v42 == 0;
      if (!v43)
      {
        if (*(_BYTE *)(v5 + 88))
          v44 = v42 == 0;
        else
          v44 = 0;
        if (v44)
        {
          *(_BYTE *)(v5 + 88) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 88))
            v45 = 1;
          else
            v45 = v42 == 0;
          if (!v45)
            *(_BYTE *)(v5 + 88) = 1;
          *(_QWORD *)(v5 + 96) = *(_QWORD *)(a1 + 96);
        }
      }
      v154 = *(unsigned __int8 *)(a1 + 104);
      if (*(_BYTE *)(v5 + 104))
        v155 = 0;
      else
        v155 = v154 == 0;
      if (!v155)
      {
        if (*(_BYTE *)(v5 + 104))
          v156 = v154 == 0;
        else
          v156 = 0;
        if (v156)
        {
          *(_BYTE *)(v5 + 104) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 104))
            v157 = 1;
          else
            v157 = v154 == 0;
          if (!v157)
            *(_BYTE *)(v5 + 104) = 1;
          *(_QWORD *)(v5 + 112) = *(_QWORD *)(a1 + 112);
        }
      }
      if (!*(_BYTE *)(v5 + 120) && !*(_BYTE *)(a1 + 120))
        goto LABEL_432;
      if (*(_BYTE *)(v5 + 120) && !*(_BYTE *)(a1 + 120))
        goto LABEL_408;
      if (!*(_BYTE *)(v5 + 120) && *(_BYTE *)(a1 + 120))
        *(_BYTE *)(v5 + 120) = 1;
      *(_QWORD *)(v5 + 128) = *(_QWORD *)(a1 + 128);
      goto LABEL_432;
    case 0xD:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 144, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 13;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 88) = 0;
      *(_BYTE *)(v5 + 104) = 0;
      *(_BYTE *)(v5 + 120) = 0;
      *(_QWORD *)(v5 + 136) = 0;
      *(_QWORD *)v5 = &off_24ED324E0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      v41 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v46 = *(unsigned __int8 *)(a1 + 88);
      if (*(_BYTE *)(v5 + 88))
        v47 = 0;
      else
        v47 = v46 == 0;
      if (!v47)
      {
        if (*(_BYTE *)(v5 + 88))
          v48 = v46 == 0;
        else
          v48 = 0;
        if (v48)
        {
          *(_BYTE *)(v5 + 88) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 88))
            v49 = 1;
          else
            v49 = v46 == 0;
          if (!v49)
            *(_BYTE *)(v5 + 88) = 1;
          *(_QWORD *)(v5 + 96) = *(_QWORD *)(a1 + 96);
        }
      }
      v158 = *(unsigned __int8 *)(a1 + 104);
      if (*(_BYTE *)(v5 + 104))
        v159 = 0;
      else
        v159 = v158 == 0;
      if (!v159)
      {
        if (*(_BYTE *)(v5 + 104))
          v160 = v158 == 0;
        else
          v160 = 0;
        if (v160)
        {
          *(_BYTE *)(v5 + 104) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 104))
            v161 = 1;
          else
            v161 = v158 == 0;
          if (!v161)
            *(_BYTE *)(v5 + 104) = 1;
          *(_QWORD *)(v5 + 112) = *(_QWORD *)(a1 + 112);
        }
      }
      if (!*(_BYTE *)(v5 + 120) && !*(_BYTE *)(a1 + 120))
        goto LABEL_432;
      if (!*(_BYTE *)(v5 + 120) || *(_BYTE *)(a1 + 120))
      {
        if (!*(_BYTE *)(v5 + 120) && *(_BYTE *)(a1 + 120))
          *(_BYTE *)(v5 + 120) = 1;
        *(_QWORD *)(v5 + 128) = *(_QWORD *)(a1 + 128);
      }
      else
      {
LABEL_408:
        *(_BYTE *)(v5 + 120) = 0;
      }
LABEL_432:
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 80);
      v170 = *(_QWORD *)(a1 + 136);
      if (v170)
      {
      }
      else
      {
        v171 = 0;
      }
      *(_QWORD *)(v5 + 136) = v171;
      return v5;
    case 0xE:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 208, 16);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 14;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      v50 = (unint64_t *)(v5 + 24);
      v51 = (re::DynamicString *)(v5 + 40);
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 96) = 0;
      *(_BYTE *)(v5 + 128) = 0;
      *(_BYTE *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 192) = 0;
      v52 = &off_24ED32610;
      goto LABEL_113;
    case 0xF:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 208, 16);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 15;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      v50 = (unint64_t *)(v5 + 24);
      v51 = (re::DynamicString *)(v5 + 40);
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 96) = 0;
      *(_BYTE *)(v5 + 128) = 0;
      *(_BYTE *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 192) = 0;
      v52 = &off_24ED32740;
      goto LABEL_113;
    case 0x10:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 208, 16);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 16;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      v50 = (unint64_t *)(v5 + 24);
      v51 = (re::DynamicString *)(v5 + 40);
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 96) = 0;
      *(_BYTE *)(v5 + 128) = 0;
      *(_BYTE *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 192) = 0;
      v52 = &off_24ED32870;
LABEL_113:
      *(_QWORD *)v5 = v52;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=(v50, (uint64_t *)(a1 + 24));
      v53 = re::DynamicString::operator=(v51, (re::DynamicString *)(a1 + 40));
      v54 = *(unsigned __int8 *)(a1 + 96);
      if (*(_BYTE *)(v5 + 96))
        v55 = 0;
      else
        v55 = v54 == 0;
      if (!v55)
      {
        if (*(_BYTE *)(v5 + 96))
          v56 = v54 == 0;
        else
          v56 = 0;
        if (v56)
        {
          *(_BYTE *)(v5 + 96) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 96))
            v57 = 1;
          else
            v57 = v54 == 0;
          if (!v57)
            *(_BYTE *)(v5 + 96) = 1;
          *(_OWORD *)(v5 + 112) = *(_OWORD *)(a1 + 112);
        }
      }
      v140 = *(unsigned __int8 *)(a1 + 128);
      if (*(_BYTE *)(v5 + 128))
        v141 = 0;
      else
        v141 = v140 == 0;
      if (!v141)
      {
        if (*(_BYTE *)(v5 + 128))
          v142 = v140 == 0;
        else
          v142 = 0;
        if (v142)
        {
          *(_BYTE *)(v5 + 128) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 128))
            v143 = 1;
          else
            v143 = v140 == 0;
          if (!v143)
            *(_BYTE *)(v5 + 128) = 1;
          *(_OWORD *)(v5 + 144) = *(_OWORD *)(a1 + 144);
        }
      }
      if (*(_BYTE *)(v5 + 160) || *(_BYTE *)(a1 + 160))
      {
        if (!*(_BYTE *)(v5 + 160) || *(_BYTE *)(a1 + 160))
        {
          if (!*(_BYTE *)(v5 + 160) && *(_BYTE *)(a1 + 160))
            *(_BYTE *)(v5 + 160) = 1;
          *(_OWORD *)(v5 + 176) = *(_OWORD *)(a1 + 176);
        }
        else
        {
          *(_BYTE *)(v5 + 160) = 0;
        }
      }
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 80);
      v144 = *(_QWORD *)(a1 + 192);
      if (v144)
      {
      }
      else
      {
        v145 = 0;
      }
      *(_QWORD *)(v5 + 192) = v145;
      return v5;
    case 0x11:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 304, 16);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 17;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 96) = 0;
      *(_BYTE *)(v5 + 160) = 0;
      *(_BYTE *)(v5 + 224) = 0;
      *(_QWORD *)(v5 + 288) = 0;
      *(_QWORD *)v5 = &off_24ED329A0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      v58 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v59 = *(unsigned __int8 *)(a1 + 96);
      if (*(_BYTE *)(v5 + 96))
        v60 = 0;
      else
        v60 = v59 == 0;
      if (!v60)
      {
        if (*(_BYTE *)(v5 + 96))
          v61 = v59 == 0;
        else
          v61 = 0;
        if (v61)
        {
          *(_BYTE *)(v5 + 96) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 96))
            v62 = 1;
          else
            v62 = v59 == 0;
          if (!v62)
            *(_BYTE *)(v5 + 96) = 1;
          v63 = *(_OWORD *)(a1 + 112);
          v64 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(v5 + 128) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(v5 + 144) = v64;
          *(_OWORD *)(v5 + 112) = v63;
        }
      }
      v162 = *(unsigned __int8 *)(a1 + 160);
      if (*(_BYTE *)(v5 + 160))
        v163 = 0;
      else
        v163 = v162 == 0;
      if (!v163)
      {
        if (*(_BYTE *)(v5 + 160))
          v164 = v162 == 0;
        else
          v164 = 0;
        if (v164)
        {
          *(_BYTE *)(v5 + 160) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 160))
            v165 = 1;
          else
            v165 = v162 == 0;
          if (!v165)
            *(_BYTE *)(v5 + 160) = 1;
          v166 = *(_OWORD *)(a1 + 176);
          v167 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(v5 + 192) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(v5 + 208) = v167;
          *(_OWORD *)(v5 + 176) = v166;
        }
      }
      if (*(_BYTE *)(v5 + 224) || *(_BYTE *)(a1 + 224))
      {
        if (!*(_BYTE *)(v5 + 224) || *(_BYTE *)(a1 + 224))
        {
          if (!*(_BYTE *)(v5 + 224) && *(_BYTE *)(a1 + 224))
            *(_BYTE *)(v5 + 224) = 1;
          v172 = *(_OWORD *)(a1 + 240);
          v173 = *(_OWORD *)(a1 + 272);
          *(_OWORD *)(v5 + 256) = *(_OWORD *)(a1 + 256);
          *(_OWORD *)(v5 + 272) = v173;
          *(_OWORD *)(v5 + 240) = v172;
        }
        else
        {
          *(_BYTE *)(v5 + 224) = 0;
        }
      }
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 80);
      v174 = *(_QWORD *)(a1 + 288);
      if (v174)
      {
      }
      else
      {
        v175 = 0;
      }
      *(_QWORD *)(v5 + 288) = v175;
      return v5;
    case 0x12:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 336, 8);
      v65 = re::SkeletalPoseAnimationAssetData::SkeletalPoseAnimationAssetData((re::SkeletalPoseAnimationAssetData *)v5);
      *((_DWORD *)v65 + 3) = *(_DWORD *)(a1 + 12);
      *((_BYTE *)v65 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)v65 + 3, (uint64_t *)(a1 + 24));
      v17 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (*(_BYTE *)(a1 + 88))
      {
        v66 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 192);
        *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 200);
        *((_QWORD *)&v194[0] + 1) = v66;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 216), (uint64_t)v194);
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v191, a1 + 112);
        LOBYTE(v194[0]) = 1;
        *(_OWORD *)((char *)v194 + 8) = *(_OWORD *)v191;
        v67 = *(_QWORD *)&v191[16];
        memset(v191, 0, 24);
        *((_QWORD *)&v194[1] + 1) = v67;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(v5 + 88), (uint64_t *)v194);
        if (LOBYTE(v194[0]) && *((_QWORD *)&v194[0] + 1))
        {
          if (*(_QWORD *)&v194[1])
          {
            (*(void (**)(void))(**((_QWORD **)&v194[0] + 1) + 40))();
            v194[1] = 0uLL;
          }
          *((_QWORD *)&v194[0] + 1) = 0;
        }
        v17 = *(_anonymous_namespace_ **)v191;
        if (*(_QWORD *)v191 && *(_QWORD *)&v191[8])
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v191 + 40))();
      }
      if (*(_BYTE *)(a1 + 184))
      {
        v68 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 192);
        *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 200);
        *((_QWORD *)&v194[0] + 1) = v68;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 256), (uint64_t)v194);
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v191, a1 + 208);
        LOBYTE(v194[0]) = 1;
        *(_OWORD *)((char *)v194 + 8) = *(_OWORD *)v191;
        v69 = *(_QWORD *)&v191[16];
        memset(v191, 0, 24);
        *((_QWORD *)&v194[1] + 1) = v69;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(v5 + 120), (uint64_t *)v194);
        if (LOBYTE(v194[0]) && *((_QWORD *)&v194[0] + 1))
        {
          if (*(_QWORD *)&v194[1])
          {
            (*(void (**)(void))(**((_QWORD **)&v194[0] + 1) + 40))();
            v194[1] = 0uLL;
          }
          *((_QWORD *)&v194[0] + 1) = 0;
        }
        v17 = *(_anonymous_namespace_ **)v191;
        if (*(_QWORD *)v191 && *(_QWORD *)&v191[8])
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v191 + 40))();
      }
      if (*(_BYTE *)(a1 + 280))
      {
        v70 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 192);
        *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 200);
        *((_QWORD *)&v194[0] + 1) = v70;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 296), (uint64_t)v194);
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v191, a1 + 304);
        LOBYTE(v194[0]) = 1;
        *(_OWORD *)((char *)v194 + 8) = *(_OWORD *)v191;
        v71 = *(_QWORD *)&v191[16];
        memset(v191, 0, 24);
        *((_QWORD *)&v194[1] + 1) = v71;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(v5 + 152), (uint64_t *)v194);
        if (LOBYTE(v194[0]) && *((_QWORD *)&v194[0] + 1))
        {
          if (*(_QWORD *)&v194[1])
          {
            (*(void (**)(void))(**((_QWORD **)&v194[0] + 1) + 40))();
            v194[1] = 0uLL;
          }
          *((_QWORD *)&v194[0] + 1) = 0;
        }
        v17 = *(_anonymous_namespace_ **)v191;
        if (*(_QWORD *)v191 && *(_QWORD *)&v191[8])
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v191 + 40))();
      }
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 80);
      v24 = *(_QWORD *)(a1 + 376);
      if (!v24)
        goto LABEL_169;
      goto LABEL_43;
    case 0x13:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 19;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      v72 = (_anonymous_namespace_ *)(v5 + 80);
      *(_QWORD *)(v5 + 152) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)v5 = off_24ED32D48;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v73 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 120);
      *((_QWORD *)&v194[0] + 1) = v73;
      re::DynamicArray<float>::operator=((_anonymous_namespace_ *)(v5 + 120), (uint64_t)v194);
      goto LABEL_178;
    case 0x14:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 20;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      v72 = (_anonymous_namespace_ *)(v5 + 80);
      *(_QWORD *)(v5 + 152) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)v5 = off_24ED32E90;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v74 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 120);
      *((_QWORD *)&v194[0] + 1) = v74;
      re::DynamicArray<double>::operator=((_anonymous_namespace_ *)(v5 + 120), (uint64_t)v194);
      goto LABEL_178;
    case 0x15:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 21;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      v72 = (_anonymous_namespace_ *)(v5 + 80);
      *(_QWORD *)(v5 + 152) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)v5 = off_24ED32F40;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v75 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 120);
      *((_QWORD *)&v194[0] + 1) = v75;
      re::DynamicArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(v5 + 120), (uint64_t)v194);
      goto LABEL_178;
    case 0x16:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 22;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      v72 = (_anonymous_namespace_ *)(v5 + 80);
      *(_QWORD *)(v5 + 152) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)v5 = off_24ED32FF0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v76 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 120);
      *((_QWORD *)&v194[0] + 1) = v76;
      re::DynamicArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(v5 + 120), (uint64_t)v194);
      goto LABEL_178;
    case 0x17:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 23;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      v72 = (_anonymous_namespace_ *)(v5 + 80);
      *(_QWORD *)(v5 + 152) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)v5 = off_24ED330A0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v77 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 120);
      *((_QWORD *)&v194[0] + 1) = v77;
      re::DynamicArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)(v5 + 120), (uint64_t)v194);
      goto LABEL_178;
    case 0x18:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 24;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      v72 = (_anonymous_namespace_ *)(v5 + 80);
      *(_QWORD *)(v5 + 152) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)v5 = off_24ED33150;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v78 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 120);
      *((_QWORD *)&v194[0] + 1) = v78;
      re::DynamicArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(v5 + 120), (uint64_t)v194);
      goto LABEL_178;
    case 0x19:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 25;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      v72 = (_anonymous_namespace_ *)(v5 + 80);
      *(_QWORD *)(v5 + 152) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)v5 = off_24ED33298;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v79 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 120);
      *((_QWORD *)&v194[0] + 1) = v79;
      re::DynamicArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v5 + 120), (uint64_t)v194);
LABEL_178:
      *(_WORD *)(v5 + 72) = *(_WORD *)(a1 + 72);
      v80 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 96);
      *((_QWORD *)&v194[0] + 1) = v80;
      re::DynamicArray<float>::operator=(v72, (uint64_t)v194);
      return v5;
    case 0x1A:
      v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 224, 8);
      v82 = re::SkeletalPoseKeyframeAnimationAssetData::SkeletalPoseKeyframeAnimationAssetData((re::SkeletalPoseKeyframeAnimationAssetData *)v81);
      *((_DWORD *)v82 + 3) = *(_DWORD *)(a1 + 12);
      *((_BYTE *)v82 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)v82 + 3, (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v81 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(_QWORD *)(a1 + 112))
        goto LABEL_184;
      v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 192);
      *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 200);
      *((_QWORD *)&v194[0] + 1) = v83;
      re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v81 + 184), (uint64_t)v194);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)(v81 + 120), *(_QWORD *)(a1 + 112));
      if (!*(_QWORD *)(a1 + 112))
        goto LABEL_184;
      v84 = 0;
      v85 = 0;
      v86 = 16;
      while (1)
      {
        v87 = *(_QWORD *)(v81 + 136);
        if (v87 <= v85)
          break;
        re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(*(_QWORD *)(v81 + 152) + v84), *(_QWORD *)(a1 + 120) + v86);
        ++v85;
        v86 += 88;
        v84 += 24;
        if (v85 >= *(_QWORD *)(a1 + 112))
        {
LABEL_184:
          *(_WORD *)(v81 + 72) = *(_WORD *)(a1 + 72);
          v88 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 96);
          *((_QWORD *)&v194[0] + 1) = v88;
          v89 = (_anonymous_namespace_ *)(v81 + 80);
          goto LABEL_277;
        }
      }
      v196 = 0u;
      v197 = 0u;
      v195 = 0u;
      memset(v194, 0, sizeof(v194));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v191 = 136315906;
      *(_QWORD *)&v191[4] = "operator[]";
      *(_WORD *)&v191[12] = 1024;
      *(_DWORD *)&v191[14] = 789;
      *(_WORD *)&v191[18] = 2048;
      *(_QWORD *)&v191[20] = v85;
      v192 = 2048;
      v193 = v87;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_485;
    case 0x1B:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 128, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 27;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED335D8;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v90 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 104);
      *((_QWORD *)&v194[0] + 1) = v90;
      re::DynamicArray<float>::operator=((_anonymous_namespace_ *)(v5 + 88), (uint64_t)v194);
      goto LABEL_229;
    case 0x1C:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 128, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 28;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED33688;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v91 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 104);
      *((_QWORD *)&v194[0] + 1) = v91;
      re::DynamicArray<double>::operator=((_anonymous_namespace_ *)(v5 + 88), (uint64_t)v194);
      goto LABEL_229;
    case 0x1D:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 128, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 29;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED33738;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v92 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 104);
      *((_QWORD *)&v194[0] + 1) = v92;
      re::DynamicArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(v5 + 88), (uint64_t)v194);
      goto LABEL_229;
    case 0x1E:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 128, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 30;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED337E8;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v93 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 104);
      *((_QWORD *)&v194[0] + 1) = v93;
      re::DynamicArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(v5 + 88), (uint64_t)v194);
      goto LABEL_229;
    case 0x1F:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 128, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 31;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED33898;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v94 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 104);
      *((_QWORD *)&v194[0] + 1) = v94;
      re::DynamicArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)(v5 + 88), (uint64_t)v194);
      goto LABEL_229;
    case 0x20:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 128, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 32;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED33948;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v95 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 104);
      *((_QWORD *)&v194[0] + 1) = v95;
      re::DynamicArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(v5 + 88), (uint64_t)v194);
      goto LABEL_229;
    case 0x21:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 128, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 33;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED339F8;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      v96 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 104);
      *((_QWORD *)&v194[0] + 1) = v96;
      re::DynamicArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v5 + 88), (uint64_t)v194);
      goto LABEL_229;
    case 0x22:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 200, 8);
      v97 = re::SkeletalPoseSampledAnimationAssetData::SkeletalPoseSampledAnimationAssetData((re::SkeletalPoseSampledAnimationAssetData *)v5);
      *((_DWORD *)v97 + 3) = *(_DWORD *)(a1 + 12);
      *((_BYTE *)v97 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)v97 + 3, (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_197;
      v98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 80) + 192);
      *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 80) + 200);
      *((_QWORD *)&v194[0] + 1) = v98;
      re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 152), (uint64_t)v194);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)(v5 + 88), *(_QWORD *)(a1 + 96));
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_197;
      v84 = 0;
      v85 = 0;
      v99 = 16;
      while (1)
      {
        v87 = *(_QWORD *)(v5 + 104);
        if (v87 <= v85)
          break;
        re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(*(_QWORD *)(v5 + 120) + v84), *(_QWORD *)(a1 + 104) + v99);
        ++v85;
        v99 += 88;
        v84 += 24;
        if (v85 >= *(_QWORD *)(a1 + 96))
        {
LABEL_197:
          *(_WORD *)(v5 + 72) = *(_WORD *)(a1 + 72);
          *(_QWORD *)(v5 + 76) = *(_QWORD *)(a1 + 76);
          *(_DWORD *)(v5 + 84) = *(_DWORD *)(a1 + 84);
          *(_BYTE *)(v5 + 192) = *(_BYTE *)(a1 + 112);
          *(_WORD *)(v5 + 193) = *(_WORD *)(a1 + 113);
          return v5;
        }
      }
LABEL_485:
      v196 = 0u;
      v197 = 0u;
      v195 = 0u;
      memset(v194, 0, sizeof(v194));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v191 = 136315906;
      *(_QWORD *)&v191[4] = "operator[]";
      *(_WORD *)&v191[12] = 1024;
      *(_DWORD *)&v191[14] = 789;
      *(_WORD *)&v191[18] = 2048;
      *(_QWORD *)&v191[20] = v85;
      v192 = 2048;
      v193 = v87;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_486:
      v196 = 0u;
      v197 = 0u;
      v195 = 0u;
      memset(v194, 0, sizeof(v194));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v191 = 136315906;
      *(_QWORD *)&v191[4] = "operator[]";
      *(_WORD *)&v191[12] = 1024;
      *(_DWORD *)&v191[14] = 789;
      *(_WORD *)&v191[18] = 2048;
      *(_QWORD *)&v191[20] = v85;
      v192 = 2048;
      v193 = v87;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_487;
    case 0x25:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 160, 16);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 37;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)v5 = off_24ED33C08;
      *(_DWORD *)(v5 + 76) = 1065353216;
      *(_OWORD *)(v5 + 80) = xmmword_2260E5F20;
      *(_QWORD *)(v5 + 96) = 0x3F8000003F800000;
      *(_QWORD *)(v5 + 104) = 1065353216;
      *(_QWORD *)(v5 + 112) = 0;
      *(_QWORD *)(v5 + 120) = 0x3F80000000000000;
      *(_QWORD *)(v5 + 128) = 0;
      *(_QWORD *)(v5 + 136) = 0;
      *(_WORD *)(v5 + 144) = 1;
      *(_DWORD *)(v5 + 148) = 1065353216;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      *(_DWORD *)(v5 + 76) = *(_DWORD *)(a1 + 76);
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 96);
      v100 = *(_OWORD *)(a1 + 128);
      v101 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(v5 + 112) = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(v5 + 128) = v101;
      *(_OWORD *)(v5 + 96) = v100;
      return v5;
    case 0x26:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 96, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 38;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)v5 = off_24ED33C60;
      *(_QWORD *)(v5 + 80) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 80);
      return v5;
    case 0x27:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 39;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED33CD0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v102 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v103 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v103);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v104 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v104;
        }
        while (v104 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x28:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 40;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED33D80;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v105 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v106 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v106);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v107 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v107;
        }
        while (v107 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x29:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 41;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED33E30;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v8 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v9 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v9);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v10 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v10;
        }
        while (v10 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x2A:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 42;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED33EE0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v11 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v12 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v12);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v13 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v13;
        }
        while (v13 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x2B:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 43;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED33F90;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v108 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v109 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v109);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v110 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v110;
        }
        while (v110 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x2C:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 44;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED34040;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v111 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v112 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v112);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v113 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v113;
        }
        while (v113 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x2D:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 45;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED340F0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v14 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v15 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v15);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v16 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v16;
        }
        while (v16 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x2E:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 288, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 46;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_DWORD *)(v5 + 232) = 0;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_DWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 272) = 0;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_OWORD *)(v5 + 256) = 0u;
      *(_QWORD *)v5 = off_24ED341A0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v5 + 80, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v5 + 120, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v5 + 168, (uint64_t *)(a1 + 544));
      v114 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v5 + 208, (uint64_t *)(a1 + 584));
      v115 = *(_QWORD *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)(v5 + 248), v115);
      ++*(_DWORD *)(v5 + 272);
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      if (*(_QWORD *)(a1 + 312))
      {
        v116 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v5 + 248), (uint64_t *)v194);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
          ++v116;
        }
        while (v116 < *(_QWORD *)(a1 + 312));
      }
      return v5;
    case 0x30:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 640, 8);
      v117 = re::EventTimelineAssetData::EventTimelineAssetData((re::EventTimelineAssetData *)v5);
      v118 = *(_QWORD *)(a1 + 80);
      v119 = (char *)(v118 + 24);
      v120 = (char *)v117 + 80;
      re::StringID::operator=((unint64_t *)v117 + 10, (uint64_t *)(v118 + 24));
      re::DynamicArray<float>::operator=(v5 + 96, (uint64_t *)(v118 + 40));
      re::DynamicArray<float>::operator=(v5 + 136, (uint64_t *)(v118 + 80));
      re::DynamicArray<float>::operator=(v5 + 176, (uint64_t *)(v118 + 120));
      if (v120 != (char *)(v118 + 24))
      {
        v121 = *(_QWORD *)(v118 + 160);
        if (*(_QWORD *)(v5 + 216))
        {
          v122 = v5 + 216;
          if (v121)
          {
            re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(v122, v118 + 160);
            ++*(_DWORD *)(v5 + 256);
          }
          else
          {
            re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(v122);
          }
        }
        else if (v121)
        {
          if (*(_DWORD *)(v118 + 188) <= 3u)
            v176 = 3;
          else
            v176 = *(_DWORD *)(v118 + 188);
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v5 + 216, v121, v176);
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(v5 + 216, v118 + 160);
        }
      }
      *(_QWORD *)(v5 + 264) = *(_QWORD *)(v118 + 208);
      re::DynamicArray<float>::operator=(v5 + 272, (uint64_t *)(v118 + 216));
      *(_QWORD *)(v5 + 312) = *(_QWORD *)(v118 + 256);
      re::DynamicArray<float>::operator=(v5 + 320, (uint64_t *)(v118 + 264));
      *(_QWORD *)(v5 + 360) = *(_QWORD *)(v118 + 304);
      re::DynamicArray<re::StringID>::operator=(v5 + 368, (uint64_t *)(v118 + 312));
      *(_QWORD *)(v5 + 408) = *(_QWORD *)(v118 + 352);
      if (v120 == v119)
      {
        *(_QWORD *)(v5 + 456) = *(_QWORD *)(v118 + 400);
        *(_QWORD *)(v5 + 504) = *(_QWORD *)(v118 + 448);
      }
      else
      {
        v177 = *(_QWORD *)(v118 + 360);
        if (*(_QWORD *)(v5 + 416))
        {
          if (v177)
            re::DynamicArray<re::Vector4<float>>::copy((void **)(v5 + 416), v118 + 360);
          else
            *(_QWORD *)(v5 + 432) = 0;
          ++*(_DWORD *)(v5 + 440);
        }
        else if (v177)
        {
          v178 = *(_QWORD *)(v118 + 376);
          *(_QWORD *)(v5 + 416) = v177;
          re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)(v5 + 416), v178);
          ++*(_DWORD *)(v5 + 440);
          re::DynamicArray<re::Vector4<float>>::copy((void **)(v5 + 416), v118 + 360);
        }
        *(_QWORD *)(v5 + 456) = *(_QWORD *)(v118 + 400);
        v179 = *(_QWORD *)(v118 + 408);
        if (*(_QWORD *)(v5 + 464))
        {
          v180 = (_QWORD *)(v5 + 464);
          if (v179)
          {
            re::DynamicArray<re::FixedArray<unsigned char>>::copy((uint64_t)v180, v118 + 408);
            ++*(_DWORD *)(v5 + 488);
          }
          else
          {
            re::DynamicArray<re::FixedArray<unsigned char>>::clear(v180);
          }
        }
        else if (v179)
        {
          v181 = *(_QWORD *)(v118 + 424);
          *(_QWORD *)(v5 + 464) = v179;
          re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v5 + 464), v181);
          ++*(_DWORD *)(v5 + 488);
          re::DynamicArray<re::FixedArray<unsigned char>>::copy(v5 + 464, v118 + 408);
        }
        *(_QWORD *)(v5 + 504) = *(_QWORD *)(v118 + 448);
        v182 = *(_QWORD *)(v118 + 456);
        if (*(_QWORD *)(v5 + 512))
        {
          if (v182)
          {
            re::DynamicArray<re::ObjCObject>::copy((_QWORD *)(v5 + 512), v118 + 456);
          }
          else
          {
            v184 = *(_QWORD *)(v5 + 528);
            *(_QWORD *)(v5 + 528) = 0;
            if (v184)
            {
              v185 = *(void ***)(v5 + 544);
              v186 = 8 * v184;
              do
              {
                v187 = *v185++;

                v186 -= 8;
              }
              while (v186);
            }
          }
          ++*(_DWORD *)(v5 + 536);
        }
        else if (v182)
        {
          v183 = *(_QWORD *)(v118 + 472);
          *(_QWORD *)(v5 + 512) = v182;
          re::DynamicArray<re::ObjCObject>::setCapacity((_QWORD *)(v5 + 512), v183);
          ++*(_DWORD *)(v5 + 536);
          re::DynamicArray<re::ObjCObject>::copy((_QWORD *)(v5 + 512), v118 + 456);
        }
      }
      *(_BYTE *)(v5 + 552) = *(_BYTE *)(v118 + 496);
      re::FixedArray<unsigned char>::operator=((uint64_t *)(v5 + 560), (uint64_t *)(v118 + 504));
      re::ObjCObject::operator=((id *)(v5 + 584), (id *)(v118 + 528));
      *(_BYTE *)(v5 + 592) = *(_BYTE *)(v118 + 536);
      if (v120 != v119)
      {
        v188 = *(_QWORD *)(v118 + 544);
        if (*(_QWORD *)(v5 + 600))
        {
          if (v188)
            re::DynamicArray<char const*>::copy((void **)(v5 + 600), v118 + 544);
          else
            *(_QWORD *)(v5 + 616) = 0;
          ++*(_DWORD *)(v5 + 624);
        }
        else if (v188)
        {
          v189 = *(_QWORD *)(v118 + 560);
          *(_QWORD *)(v5 + 600) = v188;
          re::DynamicArray<float *>::setCapacity((_QWORD *)(v5 + 600), v189);
          ++*(_DWORD *)(v5 + 624);
          re::DynamicArray<char const*>::copy((void **)(v5 + 600), v118 + 544);
        }
      }
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      return v5;
    case 0x32:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 312, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 50;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 80) = 0x3FF0000000000000;
      *(_BYTE *)(v5 + 88) = 0;
      *(_BYTE *)(v5 + 120) = 0;
      *(_BYTE *)(v5 + 152) = 0;
      *(_QWORD *)(v5 + 184) = 0;
      *(_QWORD *)(v5 + 192) = 0;
      *(_QWORD *)v5 = &off_24ED32C98;
      *(_QWORD *)(v5 + 200) = 0;
      *(_QWORD *)(v5 + 208) = 0;
      *(_DWORD *)(v5 + 216) = 0;
      *(_QWORD *)(v5 + 304) = 0;
      *(_OWORD *)(v5 + 224) = 0u;
      *(_OWORD *)(v5 + 240) = 0u;
      *(_DWORD *)(v5 + 256) = 0;
      *(_OWORD *)(v5 + 264) = 0u;
      *(_OWORD *)(v5 + 280) = 0u;
      *(_DWORD *)(v5 + 296) = 0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      v17 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (*(_BYTE *)(a1 + 88))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32);
        *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 40);
        *((_QWORD *)&v194[0] + 1) = v18;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 192), (uint64_t)v194);
        re::FixedArray<float>::FixedArray((uint64_t *)v191, a1 + 96);
        LOBYTE(v194[0]) = 1;
        *(_OWORD *)((char *)v194 + 8) = *(_OWORD *)v191;
        v19 = *(_QWORD *)&v191[16];
        memset(v191, 0, 24);
        *((_QWORD *)&v194[1] + 1) = v19;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(v5 + 88), (uint64_t *)v194);
        if (LOBYTE(v194[0]) && *((_QWORD *)&v194[0] + 1))
        {
          if (*(_QWORD *)&v194[1])
          {
            (*(void (**)(void))(**((_QWORD **)&v194[0] + 1) + 40))();
            v194[1] = 0uLL;
          }
          *((_QWORD *)&v194[0] + 1) = 0;
        }
        v17 = *(_anonymous_namespace_ **)v191;
        if (*(_QWORD *)v191 && *(_QWORD *)&v191[8])
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v191 + 40))();
      }
      if (*(_BYTE *)(a1 + 128))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 32);
        *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 40);
        *((_QWORD *)&v194[0] + 1) = v20;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 232), (uint64_t)v194);
        re::FixedArray<float>::FixedArray((uint64_t *)v191, a1 + 136);
        LOBYTE(v194[0]) = 1;
        *(_OWORD *)((char *)v194 + 8) = *(_OWORD *)v191;
        v21 = *(_QWORD *)&v191[16];
        memset(v191, 0, 24);
        *((_QWORD *)&v194[1] + 1) = v21;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(v5 + 120), (uint64_t *)v194);
        if (LOBYTE(v194[0]) && *((_QWORD *)&v194[0] + 1))
        {
          if (*(_QWORD *)&v194[1])
          {
            (*(void (**)(void))(**((_QWORD **)&v194[0] + 1) + 40))();
            v194[1] = 0uLL;
          }
          *((_QWORD *)&v194[0] + 1) = 0;
        }
        v17 = *(_anonymous_namespace_ **)v191;
        if (*(_QWORD *)v191 && *(_QWORD *)&v191[8])
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v191 + 40))();
      }
      if (*(_BYTE *)(a1 + 168))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 32);
        *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 40);
        *((_QWORD *)&v194[0] + 1) = v22;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 272), (uint64_t)v194);
        re::FixedArray<float>::FixedArray((uint64_t *)v191, a1 + 176);
        LOBYTE(v194[0]) = 1;
        *(_OWORD *)((char *)v194 + 8) = *(_OWORD *)v191;
        v23 = *(_QWORD *)&v191[16];
        memset(v191, 0, 24);
        *((_QWORD *)&v194[1] + 1) = v23;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(v5 + 152), (uint64_t *)v194);
        if (LOBYTE(v194[0]) && *((_QWORD *)&v194[0] + 1))
        {
          if (*(_QWORD *)&v194[1])
          {
            (*(void (**)(void))(**((_QWORD **)&v194[0] + 1) + 40))();
            v194[1] = 0uLL;
          }
          *((_QWORD *)&v194[0] + 1) = 0;
        }
        v17 = *(_anonymous_namespace_ **)v191;
        if (*(_QWORD *)v191 && *(_QWORD *)&v191[8])
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v191 + 40))();
      }
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 80);
      v24 = *(_QWORD *)(a1 + 208);
      if (v24)
      {
LABEL_43:
      }
      else
      {
LABEL_169:
        v25 = 0;
      }
      *(_QWORD *)(v5 + 184) = v25;
      return v5;
    case 0x3B:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 168, 8);
      *(_QWORD *)v5 = off_24ED36578;
      *(_QWORD *)(v5 + 8) = 59;
      *(_BYTE *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 32) = &str_110;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 72) = 256;
      *(_DWORD *)(v5 + 76) = 1023969417;
      *(_QWORD *)(v5 + 120) = 0;
      *(_QWORD *)(v5 + 128) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_DWORD *)(v5 + 112) = 0;
      *(_QWORD *)v5 = off_24ED33B58;
      *(_QWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 136) = 0;
      *(_QWORD *)(v5 + 144) = 0;
      *(_DWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_229;
      v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 24) + 32);
      *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 24) + 40);
      *((_QWORD *)&v194[0] + 1) = v123;
      re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 128), (uint64_t)v194);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)(v5 + 88), *(_QWORD *)(a1 + 96));
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_229;
      v84 = 0;
      v124 = 0;
      v85 = 0;
      while (1)
      {
        v87 = *(_QWORD *)(v5 + 104);
        if (v87 <= v85)
          break;
        re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v5 + 120) + v84), *(_QWORD *)(a1 + 104) + v124);
        ++v85;
        v124 += 32;
        v84 += 24;
        if (v85 >= *(_QWORD *)(a1 + 96))
        {
LABEL_229:
          *(_WORD *)(v5 + 72) = *(_WORD *)(a1 + 72);
          *(_QWORD *)(v5 + 76) = *(_QWORD *)(a1 + 76);
          *(_DWORD *)(v5 + 84) = *(_DWORD *)(a1 + 84);
          return v5;
        }
      }
      goto LABEL_486;
    case 0x3C:
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 184, 8);
      v6 = re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(v5, 60);
      v7 = off_24ED32268;
LABEL_231:
      *(_QWORD *)v6 = v7;
      *(_DWORD *)(v6 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v6 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v6 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(_BYTE *)(v5 + 72) = *(_BYTE *)(a1 + 72);
      v125 = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(v5 + 80) = v194[0];
      v194[0] = v125;
      v126 = *(_QWORD *)(v5 + 96);
      *(_QWORD *)(v5 + 96) = *(_QWORD *)&v194[1];
      *(_QWORD *)&v194[1] = v126;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v194);
      v127 = *(unsigned __int8 *)(a1 + 88);
      if (*(_BYTE *)(v5 + 104))
        v128 = 0;
      else
        v128 = v127 == 0;
      if (!v128)
      {
        if (*(_BYTE *)(v5 + 104))
          v129 = v127 == 0;
        else
          v129 = 0;
        if (v129)
        {
          *(_BYTE *)(v5 + 104) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 104))
            v130 = 1;
          else
            v130 = v127 == 0;
          if (!v130)
            *(_BYTE *)(v5 + 104) = 1;
          *(_QWORD *)(v5 + 112) = *(_QWORD *)(a1 + 96);
        }
      }
      v131 = *(unsigned __int8 *)(a1 + 104);
      if (*(_BYTE *)(v5 + 120))
        v132 = 0;
      else
        v132 = v131 == 0;
      if (!v132)
      {
        if (*(_BYTE *)(v5 + 120))
          v133 = v131 == 0;
        else
          v133 = 0;
        if (v133)
        {
          *(_BYTE *)(v5 + 120) = 0;
        }
        else
        {
          if (*(_BYTE *)(v5 + 120))
            v134 = 1;
          else
            v134 = v131 == 0;
          if (!v134)
            *(_BYTE *)(v5 + 120) = 1;
          *(_QWORD *)(v5 + 128) = *(_QWORD *)(a1 + 112);
        }
      }
      *(_QWORD *)(v5 + 136) = *(_QWORD *)(a1 + 120);
      *(_BYTE *)(v5 + 144) = *(_BYTE *)(a1 + 128);
      *(_QWORD *)(v5 + 152) = *(_QWORD *)(a1 + 136);
      if (*(_BYTE *)(v5 + 160) || *(_BYTE *)(a1 + 144))
      {
        if (!*(_BYTE *)(v5 + 160) || *(_BYTE *)(a1 + 144))
        {
          if (!*(_BYTE *)(v5 + 160) && *(_BYTE *)(a1 + 144))
            *(_BYTE *)(v5 + 160) = 1;
          *(_QWORD *)(v5 + 168) = *(_QWORD *)(a1 + 152);
        }
        else
        {
          *(_BYTE *)(v5 + 160) = 0;
        }
      }
      *(_DWORD *)(v5 + 176) = *(_DWORD *)(a1 + 160);
      *(_BYTE *)(v5 + 180) = *(_BYTE *)(a1 + 164);
      return v5;
    case 0x3D:
      v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 200, 8);
      *(_QWORD *)v135 = off_24ED36578;
      *(_QWORD *)(v135 + 8) = 61;
      *(_BYTE *)(v135 + 16) = 0;
      *(_QWORD *)(v135 + 32) = &str_110;
      *(_QWORD *)(v135 + 24) = 0;
      *(_QWORD *)(v135 + 80) = 0;
      *(_WORD *)(v135 + 72) = 256;
      *(_DWORD *)(v135 + 104) = 0;
      *(_QWORD *)(v135 + 88) = 0;
      *(_QWORD *)(v135 + 96) = 0;
      *(_QWORD *)(v135 + 152) = 0;
      *(_QWORD *)(v135 + 160) = 0;
      *(_OWORD *)(v135 + 112) = 0u;
      *(_OWORD *)(v135 + 128) = 0u;
      *(_DWORD *)(v135 + 144) = 0;
      *(_QWORD *)v135 = off_24ED33528;
      *(_QWORD *)(v135 + 192) = 0;
      *(_QWORD *)(v135 + 168) = 0;
      *(_QWORD *)(v135 + 176) = 0;
      *(_DWORD *)(v135 + 184) = 0;
      *(_DWORD *)(v135 + 12) = *(_DWORD *)(a1 + 12);
      *(_BYTE *)(v135 + 16) = *(_BYTE *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v135 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v135 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(_QWORD *)(a1 + 112))
        goto LABEL_276;
      v136 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 24) + 32);
      *(_QWORD *)&v194[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 24) + 40);
      *((_QWORD *)&v194[0] + 1) = v136;
      re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v135 + 160), (uint64_t)v194);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)(v135 + 120), *(_QWORD *)(a1 + 112));
      if (!*(_QWORD *)(a1 + 112))
        goto LABEL_276;
      v137 = 0;
      v138 = 0;
      v87 = 0;
      do
      {
        v84 = *(_QWORD *)(v135 + 136);
        if (v84 <= v87)
        {
LABEL_487:
          v196 = 0u;
          v197 = 0u;
          v195 = 0u;
          memset(v194, 0, sizeof(v194));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v191 = 136315906;
          *(_QWORD *)&v191[4] = "operator[]";
          *(_WORD *)&v191[12] = 1024;
          *(_DWORD *)&v191[14] = 789;
          *(_WORD *)&v191[18] = 2048;
          *(_QWORD *)&v191[20] = v87;
          v192 = 2048;
          v193 = v84;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v135 + 152) + v137), *(_QWORD *)(a1 + 120) + v138);
        ++v87;
        v138 += 32;
        v137 += 24;
      }
      while (v87 < *(_QWORD *)(a1 + 112));
LABEL_276:
      *(_WORD *)(v135 + 72) = *(_WORD *)(a1 + 72);
      v139 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)&v194[0] = *(_QWORD *)(a1 + 96);
      *((_QWORD *)&v194[0] + 1) = v139;
      v89 = (_anonymous_namespace_ *)(v135 + 80);
LABEL_277:
      re::DynamicArray<float>::operator=(v89, (uint64_t)v194);
      return 0;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected timeline type.", "!\"Unreachable code\"", "convertToAssetData", 1704);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2252C95CCLL);
  }
}

uint64_t re::internal::convertToTimeline(re::internal *this, const re::TimelineAssetData *a2, re::Allocator *a3)
{
  uint64_t v4;
  re::Timeline *v5;
  re::Timeline *v7;
  __int128 v8;
  __int128 v9;

  if (this)
  {
    switch(*((_DWORD *)this + 2))
    {
      case 1:
        v4 = re::Allocator::create<re::TimelineClip>((uint64_t)a2);
        return v4;
      case 2:
        v4 = re::Allocator::create<re::TimelineGroup>((uint64_t)a2);
        return v4;
      case 3:
        v4 = re::Allocator::create<re::FloatAnimationClip>((uint64_t)a2);
        return v4;
      case 4:
        v4 = re::Allocator::create<re::DoubleAnimationClip>((uint64_t)a2);
        return v4;
      case 5:
        v4 = re::Allocator::create<re::Vector2FAnimationClip>((uint64_t)a2);
        return v4;
      case 6:
        v4 = re::Allocator::create<re::Vector3FAnimationClip>((uint64_t)a2);
        return v4;
      case 7:
        v4 = re::Allocator::create<re::Vector4FAnimationClip>((uint64_t)a2);
        return v4;
      case 8:
        v4 = re::Allocator::create<re::QuaternionFAnimationClip>((uint64_t)a2);
        return v4;
      case 9:
        v4 = re::Allocator::create<re::SRTAnimationClip>((uint64_t)a2);
        return v4;
      case 0xA:
        v4 = re::Allocator::create<re::SkeletalPoseAnimationClip>((uint64_t)a2);
        return v4;
      case 0xB:
        v4 = re::Allocator::create<re::FloatAnimation>((uint64_t)a2);
        return v4;
      case 0xC:
        v4 = re::Allocator::create<re::DoubleAnimation>((uint64_t)a2);
        return v4;
      case 0xD:
        v4 = re::Allocator::create<re::Vector2FAnimation>((uint64_t)a2);
        return v4;
      case 0xE:
        v4 = re::Allocator::create<re::Vector3FAnimation>((uint64_t)a2);
        return v4;
      case 0xF:
        v4 = re::Allocator::create<re::Vector4FAnimation>((uint64_t)a2);
        return v4;
      case 0x10:
        v4 = re::Allocator::create<re::QuaternionFAnimation>((uint64_t)a2);
        return v4;
      case 0x11:
        v4 = re::Allocator::create<re::SRTAnimation>((uint64_t)a2);
        return v4;
      case 0x12:
        v4 = re::Allocator::create<re::SkeletalPoseAnimation>((uint64_t)a2);
        return v4;
      case 0x13:
        v4 = re::Allocator::create<re::FloatKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x14:
        v4 = re::Allocator::create<re::DoubleKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x15:
        v4 = re::Allocator::create<re::Vector2FKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x16:
        v4 = re::Allocator::create<re::Vector3FKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x17:
        v4 = re::Allocator::create<re::Vector4FKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x18:
        v4 = re::Allocator::create<re::QuaternionFKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x19:
        v4 = re::Allocator::create<re::SRTKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x1A:
        v4 = re::Allocator::create<re::SkeletalPoseKeyframeAnimation>((uint64_t)a2);
        return v4;
      case 0x1B:
        v4 = re::Allocator::create<re::FloatSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x1C:
        v4 = re::Allocator::create<re::DoubleSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x1D:
        v4 = re::Allocator::create<re::Vector2FSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x1E:
        v4 = re::Allocator::create<re::Vector3FSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x1F:
        v4 = re::Allocator::create<re::Vector4FSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x20:
        v4 = re::Allocator::create<re::QuaternionFSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x21:
        v4 = re::Allocator::create<re::SRTSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x22:
        v4 = re::Allocator::create<re::SkeletalPoseSampledAnimation>((uint64_t)a2);
        *(_BYTE *)(v4 + 112) = *((_BYTE *)this + 192);
        *(_WORD *)(v4 + 113) = *(_WORD *)((char *)this + 193);
        return v4;
      case 0x25:
        v4 = (*(uint64_t (**)(const re::TimelineAssetData *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 224, 16);
        re::OrbitAnimation::OrbitAnimation((re::OrbitAnimation *)v4);
        *(_BYTE *)(v4 + 72) = *((_BYTE *)this + 72);
        *(_DWORD *)(v4 + 76) = *((_DWORD *)this + 19);
        *(_OWORD *)(v4 + 96) = *((_OWORD *)this + 5);
        v8 = *((_OWORD *)this + 6);
        v9 = *((_OWORD *)this + 8);
        *(_OWORD *)(v4 + 144) = *((_OWORD *)this + 7);
        *(_OWORD *)(v4 + 160) = v9;
        *(_OWORD *)(v4 + 128) = v8;
        *(_WORD *)(v4 + 84) = *((_WORD *)this + 72);
        *(_DWORD *)(v4 + 80) = *((_DWORD *)this + 37);
        return v4;
      case 0x26:
        v4 = re::Allocator::create<re::AudioAnimationTimeline>((uint64_t)a2);
        return v4;
      case 0x27:
        return createAnimationBlendTreeFromAssetData<float>((uint64_t)this, a2);
      case 0x28:
        return createAnimationBlendTreeFromAssetData<double>((uint64_t)this, a2);
      case 0x29:
        return createAnimationBlendTreeFromAssetData<re::Vector2<float>>((uint64_t)this, a2);
      case 0x2A:
        return createAnimationBlendTreeFromAssetData<re::Vector3<float>>((uint64_t)this, a2);
      case 0x2B:
        return createAnimationBlendTreeFromAssetData<re::Vector4<float>>((uint64_t)this, a2);
      case 0x2C:
        return createAnimationBlendTreeFromAssetData<re::Quaternion<float>>((uint64_t)this, a2);
      case 0x2D:
        return createAnimationBlendTreeFromAssetData<re::GenericSRT<float>>((uint64_t)this, a2);
      case 0x2E:
        return createAnimationBlendTreeFromAssetData<re::SkeletalPose>((uint64_t)this, a2);
      case 0x30:
        v4 = re::Allocator::create<re::EventTimeline>((uint64_t)a2);
        *(_BYTE *)(v4 + 72) = *((_BYTE *)this + 72);
        return v4;
      case 0x32:
        v4 = re::Allocator::create<re::BlendShapeWeightsAnimation>((uint64_t)a2);
        return v4;
      case 0x3B:
        v4 = re::Allocator::create<re::BlendShapeWeightsSampledAnimation>((uint64_t)a2);
        return v4;
      case 0x3C:
        v4 = re::Allocator::create<re::BlendShapeWeightsAnimationClip>((uint64_t)a2);
        return v4;
      case 0x3D:
        v4 = re::Allocator::create<re::BlendShapeWeightsKeyframeAnimation>((uint64_t)a2);
        return v4;
      default:
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, "assertion failure: '%s' (%s:line %i) Unexpected timeline type.", "!\"Unreachable code\"", "convertToTimeline", 2074);
        _os_crash();
        __break(1u);
        JUMPOUT(0x2252C9D18);
    }
  }
  return 0;
}

uint64_t re::Allocator::create<re::TimelineClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 160, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 1;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_QWORD *)v1 = off_24ED24310;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 152) = 1065353216;
  *(_BYTE *)(v1 + 156) = 0;
  return v1;
}

float `anonymous namespace'::convertTimelineClip(_anonymous_namespace_ *this, const re::TimelineAssetData *a2, re::Timeline *a3)
{
  int v5;
  BOOL v6;
  BOOL v7;
  float result;

  *((_DWORD *)a2 + 3) = *((_DWORD *)this + 3);
  *((_BYTE *)a2 + 16) = *((_BYTE *)this + 16);
  re::StringID::operator=((unint64_t *)a2 + 3, (uint64_t *)this + 3);
  re::DynamicString::operator=((const re::TimelineAssetData *)((char *)a2 + 40), (_anonymous_namespace_ *)((char *)this + 40));
  *((_QWORD *)a2 + 9) = 0;
  v5 = *((unsigned __int8 *)this + 96);
  if (*((_BYTE *)a2 + 80))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (!v6)
  {
    if (*((_BYTE *)a2 + 80))
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      *((_BYTE *)a2 + 80) = 0;
    }
    else
    {
      if (!*((_BYTE *)a2 + 80) && *((_BYTE *)this + 96))
        *((_BYTE *)a2 + 80) = 1;
      *((_QWORD *)a2 + 11) = *((_QWORD *)this + 13);
    }
  }
  if (*((_BYTE *)a2 + 96) || *((_BYTE *)this + 112))
  {
    if (!*((_BYTE *)a2 + 96) || *((_BYTE *)this + 112))
    {
      if (!*((_BYTE *)a2 + 96) && *((_BYTE *)this + 112))
        *((_BYTE *)a2 + 96) = 1;
      *((_QWORD *)a2 + 13) = *((_QWORD *)this + 15);
    }
    else
    {
      *((_BYTE *)a2 + 96) = 0;
    }
  }
  *((_QWORD *)a2 + 14) = *((_QWORD *)this + 16);
  *((_BYTE *)a2 + 120) = *((_BYTE *)this + 136);
  *((_QWORD *)a2 + 16) = *((_QWORD *)this + 18);
  if (*((_BYTE *)a2 + 136) || *((_BYTE *)this + 152))
  {
    if (!*((_BYTE *)a2 + 136) || *((_BYTE *)this + 152))
    {
      if (!*((_BYTE *)a2 + 136) && *((_BYTE *)this + 152))
        *((_BYTE *)a2 + 136) = 1;
      *((_QWORD *)a2 + 18) = *((_QWORD *)this + 20);
    }
    else
    {
      *((_BYTE *)a2 + 136) = 0;
    }
  }
  result = *((float *)this + 42);
  *((float *)a2 + 38) = result;
  *((_BYTE *)a2 + 156) = *((_BYTE *)this + 172);
  return result;
}

uint64_t re::Allocator::create<re::TimelineGroup>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 96, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 2;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_QWORD *)v1 = off_24ED24658;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  return v1;
}

void `anonymous namespace'::convertTimelineGroup(_anonymous_namespace_ *this, const re::TimelineAssetData *a2, re::Timeline *a3)
{
  _anonymous_namespace_ *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;

  *((_DWORD *)a2 + 3) = *((_DWORD *)this + 3);
  *((_BYTE *)a2 + 16) = *((_BYTE *)this + 16);
  re::StringID::operator=((unint64_t *)a2 + 3, (uint64_t *)this + 3);
  v5 = re::DynamicString::operator=((const re::TimelineAssetData *)((char *)a2 + 40), (_anonymous_namespace_ *)((char *)this + 40));
  v6 = *((_QWORD *)this + 11);
  v7 = *((_QWORD *)a2 + 10);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * i) = 0;
  }
}

uint64_t re::Allocator::create<re::FloatAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 3;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED34490;
  return v1;
}

float `anonymous namespace'::convertAnimationClip<re::FloatAnimationClipAssetData,re::FloatAnimationClip>(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  if (*(_BYTE *)(a2 + 88) || *(_BYTE *)(a1 + 104))
  {
    if (!*(_BYTE *)(a2 + 88) || *(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a2 + 88) && *(_BYTE *)(a1 + 104))
        *(_BYTE *)(a2 + 88) = 1;
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 112);
    }
    else
    {
      *(_BYTE *)(a2 + 88) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 104) || *(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a2 + 104) || *(_BYTE *)(a1 + 120))
    {
      if (!*(_BYTE *)(a2 + 104) && *(_BYTE *)(a1 + 120))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 128);
    }
    else
    {
      *(_BYTE *)(a2 + 104) = 0;
    }
  }
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 136);
  *(_BYTE *)(a2 + 128) = *(_BYTE *)(a1 + 144);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(a2 + 144) || *(_BYTE *)(a1 + 160))
  {
    if (!*(_BYTE *)(a2 + 144) || *(_BYTE *)(a1 + 160))
    {
      if (!*(_BYTE *)(a2 + 144) && *(_BYTE *)(a1 + 160))
        *(_BYTE *)(a2 + 144) = 1;
      *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 168);
    }
    else
    {
      *(_BYTE *)(a2 + 144) = 0;
    }
  }
  result = *(float *)(a1 + 176);
  *(float *)(a2 + 160) = result;
  *(_BYTE *)(a2 + 164) = *(_BYTE *)(a1 + 180);
  return result;
}

uint64_t re::Allocator::create<re::DoubleAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 4;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED34530;
  return v1;
}

uint64_t re::Allocator::create<re::Vector2FAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 5;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED345D0;
  return v1;
}

uint64_t re::Allocator::create<re::Vector3FAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 6;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED34670;
  return v1;
}

uint64_t re::Allocator::create<re::Vector4FAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 7;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED34710;
  return v1;
}

uint64_t re::Allocator::create<re::QuaternionFAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 8;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED347B0;
  return v1;
}

uint64_t re::Allocator::create<re::SRTAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 9;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED34850;
  return v1;
}

uint64_t re::Allocator::create<re::SkeletalPoseAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 10;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED348F0;
  return v1;
}

uint64_t re::Allocator::create<re::FloatAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 120, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 11;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)v1 = off_24ED1FE60;
  return v1;
}

uint64_t `anonymous namespace'::convertFromToByAnimation<re::FloatAnimationAssetData,re::FloatAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v5 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a2 + 88))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (!v6)
  {
    if (*(_BYTE *)(a2 + 88))
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      *(_BYTE *)(a2 + 88) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 88) && *(_BYTE *)(a1 + 88))
        *(_BYTE *)(a2 + 88) = 1;
      *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 92);
    }
  }
  if (*(_BYTE *)(a2 + 96))
    v8 = 0;
  else
    v8 = *(_BYTE *)(a1 + 96) == 0;
  if (!v8)
  {
    if (!*(_BYTE *)(a2 + 96) || *(_BYTE *)(a1 + 96))
    {
      if (!*(_BYTE *)(a2 + 96) && *(_BYTE *)(a1 + 96))
        *(_BYTE *)(a2 + 96) = 1;
      *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 100);
    }
    else
    {
      *(_BYTE *)(a2 + 96) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 104) || *(_BYTE *)(a1 + 104))
  {
    if (!*(_BYTE *)(a2 + 104) || *(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a2 + 104) && *(_BYTE *)(a1 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 108);
    }
    else
    {
      *(_BYTE *)(a2 + 104) = 0;
    }
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 112);
  if (v9)
  {
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

uint64_t re::Allocator::create<re::DoubleAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 144, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 12;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)v1 = off_24ED34990;
  return v1;
}

uint64_t `anonymous namespace'::convertFromToByAnimation<re::DoubleAnimationAssetData,re::DoubleAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v5 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a2 + 88))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (!v6)
  {
    if (*(_BYTE *)(a2 + 88))
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      *(_BYTE *)(a2 + 88) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 88) && *(_BYTE *)(a1 + 88))
        *(_BYTE *)(a2 + 88) = 1;
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    }
  }
  if (*(_BYTE *)(a2 + 104))
    v8 = 0;
  else
    v8 = *(_BYTE *)(a1 + 104) == 0;
  if (!v8)
  {
    if (!*(_BYTE *)(a2 + 104) || *(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a2 + 104) && *(_BYTE *)(a1 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
    }
    else
    {
      *(_BYTE *)(a2 + 104) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 120) || *(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a2 + 120) || *(_BYTE *)(a1 + 120))
    {
      if (!*(_BYTE *)(a2 + 120) && *(_BYTE *)(a1 + 120))
        *(_BYTE *)(a2 + 120) = 1;
      *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
    }
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 136);
  if (v9)
  {
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 136) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector2FAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 144, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 13;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)v1 = off_24ED34A30;
  return v1;
}

uint64_t `anonymous namespace'::convertFromToByAnimation<re::Vector2FAnimationAssetData,re::Vector2FAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v5 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a2 + 88))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (!v6)
  {
    if (*(_BYTE *)(a2 + 88))
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      *(_BYTE *)(a2 + 88) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 88) && *(_BYTE *)(a1 + 88))
        *(_BYTE *)(a2 + 88) = 1;
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
    }
  }
  if (*(_BYTE *)(a2 + 104))
    v8 = 0;
  else
    v8 = *(_BYTE *)(a1 + 104) == 0;
  if (!v8)
  {
    if (!*(_BYTE *)(a2 + 104) || *(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a2 + 104) && *(_BYTE *)(a1 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
    }
    else
    {
      *(_BYTE *)(a2 + 104) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 120) || *(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a2 + 120) || *(_BYTE *)(a1 + 120))
    {
      if (!*(_BYTE *)(a2 + 120) && *(_BYTE *)(a1 + 120))
        *(_BYTE *)(a2 + 120) = 1;
      *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
    }
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 136);
  if (v9)
  {
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 136) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector3FAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 208, 16);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 14;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)v1 = off_24ED34AD0;
  return v1;
}

uint64_t `anonymous namespace'::convertFromToByAnimation<re::Vector3FAnimationAssetData,re::Vector3FAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v5 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a2 + 96))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (!v6)
  {
    if (*(_BYTE *)(a2 + 96))
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      *(_BYTE *)(a2 + 96) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 96) && *(_BYTE *)(a1 + 96))
        *(_BYTE *)(a2 + 96) = 1;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
    }
  }
  if (*(_BYTE *)(a2 + 128))
    v8 = 0;
  else
    v8 = *(_BYTE *)(a1 + 128) == 0;
  if (!v8)
  {
    if (!*(_BYTE *)(a2 + 128) || *(_BYTE *)(a1 + 128))
    {
      if (!*(_BYTE *)(a2 + 128) && *(_BYTE *)(a1 + 128))
        *(_BYTE *)(a2 + 128) = 1;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
    }
    else
    {
      *(_BYTE *)(a2 + 128) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 160) || *(_BYTE *)(a1 + 160))
  {
    if (!*(_BYTE *)(a2 + 160) || *(_BYTE *)(a1 + 160))
    {
      if (!*(_BYTE *)(a2 + 160) && *(_BYTE *)(a1 + 160))
        *(_BYTE *)(a2 + 160) = 1;
      *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 176);
    }
    else
    {
      *(_BYTE *)(a2 + 160) = 0;
    }
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 192) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector4FAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 208, 16);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 15;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)v1 = off_24ED34B70;
  return v1;
}

uint64_t re::Allocator::create<re::QuaternionFAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 208, 16);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 16;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)v1 = off_24ED34C10;
  return v1;
}

uint64_t re::Allocator::create<re::SRTAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 304, 16);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 17;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_BYTE *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)v1 = off_24ED34CB0;
  return v1;
}

uint64_t `anonymous namespace'::convertFromToByAnimation<re::SRTAnimationAssetData,re::SRTAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  int v5;
  BOOL v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t result;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v5 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a2 + 96))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (!v6)
  {
    if (*(_BYTE *)(a2 + 96))
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      *(_BYTE *)(a2 + 96) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 96) && *(_BYTE *)(a1 + 96))
        *(_BYTE *)(a2 + 96) = 1;
      v8 = *(_OWORD *)(a1 + 112);
      v9 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a2 + 144) = v9;
      *(_OWORD *)(a2 + 112) = v8;
    }
  }
  if (*(_BYTE *)(a2 + 160))
    v10 = 0;
  else
    v10 = *(_BYTE *)(a1 + 160) == 0;
  if (!v10)
  {
    if (!*(_BYTE *)(a2 + 160) || *(_BYTE *)(a1 + 160))
    {
      if (!*(_BYTE *)(a2 + 160) && *(_BYTE *)(a1 + 160))
        *(_BYTE *)(a2 + 160) = 1;
      v11 = *(_OWORD *)(a1 + 176);
      v12 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a2 + 208) = v12;
      *(_OWORD *)(a2 + 176) = v11;
    }
    else
    {
      *(_BYTE *)(a2 + 160) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 224) || *(_BYTE *)(a1 + 224))
  {
    if (!*(_BYTE *)(a2 + 224) || *(_BYTE *)(a1 + 224))
    {
      if (!*(_BYTE *)(a2 + 224) && *(_BYTE *)(a1 + 224))
        *(_BYTE *)(a2 + 224) = 1;
      v13 = *(_OWORD *)(a1 + 240);
      v14 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a2 + 272) = v14;
      *(_OWORD *)(a2 + 240) = v13;
    }
    else
    {
      *(_BYTE *)(a2 + 224) = 0;
    }
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 288);
  if (v15)
  {
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 288) = result;
  return result;
}

uint64_t re::Allocator::create<re::SkeletalPoseAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 384, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 18;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 184) = 0;
  *(_BYTE *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 376) = 0;
  *(_QWORD *)v1 = off_24ED34D50;
  return v1;
}

uint64_t `anonymous namespace'::convertFromToByAnimation<re::SkeletalPoseAnimationAssetData,re::SkeletalPoseAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[2];
  unint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v30 = 0;
  v27[1] = 0;
  v28 = 0;
  v29 = 0;
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v27, 3uLL);
  ++v29;
  if (*(_BYTE *)(a1 + 88))
  {
    re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v40, a1 + 216);
    v6 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v27, &v40);
    if ((_QWORD)v40)

    re::Optional<re::SkeletalPose>::Optional((uint64_t)&v40, (uint64_t)&v32);
    re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a2 + 88), (uint64_t *)&v40);
    if ((_BYTE)v40)
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)&v40 + 8));
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v32);
    v5 = (_anonymous_namespace_ *)re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(a2 + 112), a1 + 96);
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v7 = v28;
    if (!v28)
      goto LABEL_19;
    v8 = 0;
    v9 = v30;
    v10 = *(_QWORD *)(a1 + 272);
    while (1)
    {
      v11 = v9[v8];
      if (*(_QWORD *)(v11 + 192) == v10)
      {
        if (!v10)
        {
LABEL_18:
          if (v8 >= v7)
          {
LABEL_19:
            re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v40, a1 + 256);
            v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v27, &v40);
            if ((_QWORD)v40)

            v7 = v28;
            v8 = v28 - 1;
          }
          if (v7 > v8)
          {
            re::Optional<re::SkeletalPose>::Optional((uint64_t)&v40, (uint64_t)&v32);
            re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a2 + 184), (uint64_t *)&v40);
            if ((_BYTE)v40)
              re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)&v40 + 8));
            re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v32);
            v5 = (_anonymous_namespace_ *)re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(a2 + 208), a1 + 128);
            break;
          }
          v31 = 0;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v40 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v32 = 136315906;
          v33 = "operator[]";
          v34 = 1024;
          v35 = 789;
          v36 = 2048;
          v37 = v8;
          v38 = 2048;
          v39 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          v31 = 0;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v40 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v32 = 136315906;
          v33 = "operator[]";
          v34 = 1024;
          v35 = 789;
          v36 = 2048;
          v37 = v8;
          v38 = 2048;
          v39 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v12 = *(_QWORD **)(v11 + 200);
        v13 = *(_QWORD **)(a1 + 288);
        v14 = 16 * v10;
        while (1)
        {
          v5 = (_anonymous_namespace_ *)re::StringID::operator==(v12, v13);
          if (!(_DWORD)v5)
            break;
          v12 += 2;
          v13 += 2;
          v14 -= 16;
          if (!v14)
            goto LABEL_18;
        }
      }
      if (++v8 == v7)
        goto LABEL_19;
    }
  }
  if (!*(_BYTE *)(a1 + 152))
    goto LABEL_45;
  v7 = v28;
  if (!v28)
    goto LABEL_38;
  v8 = 0;
  v15 = v30;
  v16 = *(_QWORD *)(a1 + 312);
  while (1)
  {
    v17 = v15[v8];
    if (*(_QWORD *)(v17 + 192) == v16)
      break;
LABEL_35:
    if (++v8 == v7)
      goto LABEL_38;
  }
  if (v16)
  {
    v18 = *(_QWORD **)(v17 + 200);
    v19 = *(_QWORD **)(a1 + 328);
    v20 = 16 * v16;
    do
    {
      v5 = (_anonymous_namespace_ *)re::StringID::operator==(v18, v19);
      if (!(_DWORD)v5)
        goto LABEL_35;
      v18 += 2;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
  }
  if (v8 >= v7)
  {
LABEL_38:
    re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v40, a1 + 296);
    v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v27, &v40);
    if ((_QWORD)v40)

    v7 = v28;
    v8 = v28 - 1;
  }
  if (v7 <= v8)
    goto LABEL_58;
  re::Optional<re::SkeletalPose>::Optional((uint64_t)&v40, (uint64_t)&v32);
  re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a2 + 280), (uint64_t *)&v40);
  if ((_BYTE)v40)
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)&v40 + 8));
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v32);
  v5 = (_anonymous_namespace_ *)re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(a2 + 304), a1 + 160);
LABEL_45:
  v21 = v27[0];
  if (v27[0])
  {
    v22 = v30;
    if (v30)
    {
      if (v28)
      {
        v23 = 8 * v28;
        v24 = v30;
        do
        {
          if (*v24)
          {

            *v24 = 0;
          }
          ++v24;
          v23 -= 8;
        }
        while (v23);
      }
      v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 40))(v21, v22);
    }
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v25 = *(_QWORD *)(a1 + 184);
  if (v25)
  {
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 376) = result;
  return result;
}

uint64_t re::Allocator::create<re::FloatKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 19;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED34DF0;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::FloatKeyframeAnimationAssetData,re::FloatKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = v4;
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

uint64_t re::Allocator::create<re::DoubleKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 20;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED34E90;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::DoubleKeyframeAnimationAssetData,re::DoubleKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = v4;
  re::FixedArray<double>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

uint64_t re::Allocator::create<re::Vector2FKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 21;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED34F30;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::Vector2FKeyframeAnimationAssetData,re::Vector2FKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = v4;
  re::FixedArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

uint64_t re::Allocator::create<re::Vector3FKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 22;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED34FD0;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::Vector3FKeyframeAnimationAssetData,re::Vector3FKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = v4;
  re::FixedArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

uint64_t re::Allocator::create<re::Vector4FKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 23;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED35070;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::Vector4FKeyframeAnimationAssetData,re::Vector4FKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = v4;
  re::FixedArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

uint64_t re::Allocator::create<re::QuaternionFKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 24;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED35110;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::QuaternionFKeyframeAnimationAssetData,re::QuaternionFKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = v4;
  re::FixedArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

uint64_t re::Allocator::create<re::SRTKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 25;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED351B0;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::SRTKeyframeAnimationAssetData,re::SRTKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = v4;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

uint64_t re::Allocator::create<re::SkeletalPoseKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED35250;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::SkeletalPoseKeyframeAnimationAssetData,re::SkeletalPoseKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v12, a1 + 184);
  v5 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    v6 = 0;
    v7 = 0;
    v8 = 16;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 112);
      if (v9 <= v7)
        break;
      re::SkeletalPose::init((uint64_t *)(*(_QWORD *)(a2 + 120) + v8 - 16), &v12);
      v9 = *(_QWORD *)(a1 + 136);
      if (v9 <= v7)
        goto LABEL_11;
      v9 = *(_QWORD *)(a2 + 112);
      if (v9 <= v7)
        goto LABEL_12;
      re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(*(_QWORD *)(a2 + 120) + v8), *(_QWORD *)(a1 + 152) + v6);
      ++v7;
      v6 += 24;
      v8 += 88;
      if (v7 >= *(_QWORD *)(a1 + 136))
        goto LABEL_7;
    }
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 468;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 468;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v12)

  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v22 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)&v22 + 1) = v10;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v22);
}

uint64_t re::Allocator::create<re::FloatSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 27;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED352F0;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::FloatSampledAnimationAssetData,re::FloatSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  _QWORD v6[2];

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 104);
  v6[0] = *(_QWORD *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::DoubleSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 28;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED35390;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::DoubleSampledAnimationAssetData,re::DoubleSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  _QWORD v6[2];

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 104);
  v6[0] = *(_QWORD *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<double>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector2FSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 29;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED35430;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::Vector2FSampledAnimationAssetData,re::Vector2FSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  _QWORD v6[2];

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 104);
  v6[0] = *(_QWORD *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector3FSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 30;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED354D0;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::Vector3FSampledAnimationAssetData,re::Vector3FSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  _QWORD v6[2];

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 104);
  v6[0] = *(_QWORD *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector4FSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 31;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED35570;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::Vector4FSampledAnimationAssetData,re::Vector4FSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  _QWORD v6[2];

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 104);
  v6[0] = *(_QWORD *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::QuaternionFSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 32;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED35610;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::QuaternionFSampledAnimationAssetData,re::QuaternionFSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  _QWORD v6[2];

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 104);
  v6[0] = *(_QWORD *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::SRTSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 33;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED356B0;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::SRTSampledAnimationAssetData,re::SRTSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  _QWORD v6[2];

  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 104);
  v6[0] = *(_QWORD *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::SkeletalPoseSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 120, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 34;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED222D0;
  *(_WORD *)(v1 + 112) = 257;
  *(_BYTE *)(v1 + 114) = 1;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::SkeletalPoseSampledAnimationAssetData,re::SkeletalPoseSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v11, a1 + 152);
  v5 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    v6 = 0;
    v7 = 0;
    v8 = 16;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 96);
      if (v9 <= v7)
        break;
      re::SkeletalPose::init((uint64_t *)(*(_QWORD *)(a2 + 104) + v8 - 16), &v11);
      v9 = *(_QWORD *)(a1 + 104);
      if (v9 <= v7)
        goto LABEL_11;
      v9 = *(_QWORD *)(a2 + 96);
      if (v9 <= v7)
        goto LABEL_12;
      re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(*(_QWORD *)(a2 + 104) + v8), *(_QWORD *)(a1 + 120) + v6);
      ++v7;
      v6 += 24;
      v8 += 88;
      if (v7 >= *(_QWORD *)(a1 + 104))
        goto LABEL_7;
    }
    v12 = 0;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v13 = 136315906;
    v14 = "operator[]";
    v15 = 1024;
    v16 = 468;
    v17 = 2048;
    v18 = v7;
    v19 = 2048;
    v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    v12 = 0;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v13 = 136315906;
    v14 = "operator[]";
    v15 = 1024;
    v16 = 797;
    v17 = 2048;
    v18 = v7;
    v19 = 2048;
    v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    v12 = 0;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v13 = 136315906;
    v14 = "operator[]";
    v15 = 1024;
    v16 = 468;
    v17 = 2048;
    v18 = v7;
    v19 = 2048;
    v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v11)

  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

re::DynamicString *`anonymous namespace'::convertTimeline<re::OrbitAnimationAssetData,re::OrbitAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
}

uint64_t re::Allocator::create<re::AudioAnimationTimeline>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 96, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 38;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)v1 = off_24ED263B0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  return v1;
}

__n128 `anonymous namespace'::convertAudioAnimationTimeline<re::AnimationStateTimelineAssetData,re::AudioAnimationTimeline>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u32[3] = a1->n128_u32[3];
  a2[1].n128_u8[0] = a1[1].n128_u8[0];
  re::StringID::operator=(&a2[1].n128_u64[1], &a1[1].n128_i64[1]);
  re::DynamicString::operator=((re::DynamicString *)&a2[2].n128_i8[8], (re::DynamicString *)&a1[2].n128_i8[8]);
  result = a1[5];
  a2[5] = result;
  return result;
}

uint64_t createAnimationBlendTreeFromAssetData<float>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 39;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED35780;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<float>::buildRig((uint64_t)v80, &v43, (_QWORD *)v32, v11, (unint64_t *)v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<double>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 40;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED358C0;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<double>::buildRig((uint64_t)v80, &v43, v32, v11, v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Vector2<float>>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 41;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED35A00;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<re::Vector2<float>>::buildRig((uint64_t)v80, &v43, (_QWORD *)v32, v11, (unint64_t *)v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Vector3<float>>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 42;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED35B40;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<re::Vector3<float>>::buildRig((uint64_t)v80, &v43, (_QWORD *)v32, v11, (unint64_t *)v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Vector4<float>>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 43;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED35C80;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<double>::buildRig((uint64_t)v80, &v43, v32, v11, v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Quaternion<float>>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 44;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED35DC0;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<re::Quaternion<float>>::buildRig((uint64_t)v80, &v43, (_QWORD *)v32, v11, (unint64_t *)v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::GenericSRT<float>>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 45;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED35F00;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<re::GenericSRT<float>>::buildRig((uint64_t)v80, &v43, (_QWORD *)v32, v11, (unint64_t *)v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::SkeletalPose>(uint64_t a1, re::Allocator *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 isBlend;
  unint64_t v29;
  StringID *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t i;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  re::Allocator *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v47;
  _BYTE v48[44];
  uint64_t v49;
  _QWORD v50[5];
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  const char *v64[8];
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  _BYTE v69[32];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  char v77[24];
  __int128 v78;
  __int128 v79;
  uint64_t v80[4];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[2];
  unint64_t v85;
  _QWORD v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE v92[48];
  _QWORD v93[4];
  _QWORD v94[4];
  __int128 v95;
  _BYTE v96[40];
  _BYTE v97[40];
  _BYTE v98[48];
  _BYTE v99[28];
  __int16 v100;
  _BYTE v101[10];
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v46 = 0;
  memset(v48, 0, sizeof(v48));
  v49 = 0x7FFFFFFFLL;
  v6 = v50;
  re::StringID::invalid((re::StringID *)v50);
  memset(&v50[2], 0, 24);
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v67 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 0x7FFFFFFFLL;
  v76 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v86[1] = 0;
  v86[0] = 0;
  v87 = 1;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  memset(v92, 0, sizeof(v92));
  re::RigEnvironment::init((re::RigEnvironment *)v86, a2);
  v41 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v43, a1 + 80, (uint64_t)a2);
  v83 = 0;
  v7 = (unint64_t)v46;
  v46 = 0;
  if (v7)
  {
    v8 = 80 * v7;
    v9 = (re::StringID *)(*(_QWORD *)v48 + 64);
    do
    {
      re::StringID::destroyString(v9);
      re::StringID::destroyString((re::StringID *)((char *)v9 - 16));
      v10 = *((_QWORD *)v9 - 7);
      if (v10)
      {
        if (*((_QWORD *)v9 - 3))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        *((_QWORD *)v9 - 3) = 0;
        *((_QWORD *)v9 - 6) = 0;
        *((_QWORD *)v9 - 5) = 0;
        *((_QWORD *)v9 - 7) = 0;
        ++*((_DWORD *)v9 - 8);
      }
      v9 = (re::StringID *)((char *)v9 + 80);
      v8 -= 80;
    }
    while (v8);
  }
  ++v47;
  v11 = (unint64_t)&v48[8];
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v48[8]);
  v84[0] = 0;
  v13 = v68;
  if (v68[2])
  {
    v14 = (uint64_t)&v94[2];
    v15 = -1;
    v3 = 1;
    v16 = (unint64_t)&str_110;
    while (1)
    {
      v93[0] = -1;
      v17 = (unint64_t)v46;
      if ((unint64_t)v46 >= v45)
      {
        v18 = (unint64_t)v46 + 1;
        if (v45 < (unint64_t)v46 + 1)
        {
          if (v44)
          {
            v19 = 8;
            if (v45)
              v19 = 2 * v45;
            if (v19 <= v18)
              v20 = (unint64_t)v46 + 1;
            else
              v20 = v19;
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v20);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v44, v18);
            ++v47;
          }
        }
        v17 = (unint64_t)v46;
      }
      v21 = *(_QWORD *)v48 + 80 * v17;
      *(_QWORD *)v21 = -1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      memset(&v93[1], 0, 24);
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)&v94[1] = 0u;
      LODWORD(v94[0]) = 1;
      *(_DWORD *)(v21 + 32) = 1;
      *(_QWORD *)(v21 + 56) = &str_110;
      v94[3] = &str_110;
      *(_QWORD *)(v21 + 64) = 0;
      *(_QWORD *)(v21 + 72) = &str_110;
      *((_QWORD *)&v95 + 1) = &str_110;
      *(_QWORD *)&v95 = 0;
      v46 = (unint64_t *)((char *)v46 + 1);
      ++v47;
      re::StringID::destroyString((re::StringID *)&v95);
      re::StringID::destroyString((re::StringID *)&v94[2]);
      if (v93[1] && v94[1])
        (*(void (**)(void))(*(_QWORD *)v93[1] + 40))();
      v2 = v84[0];
      v6 = (unint64_t *)v68[2];
      if ((unint64_t)v6 <= v84[0])
        break;
      v12 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v48[8], (StringID *)(v68[4] + 88 * v84[0]++), v84);
      v13 = v68;
      if (v84[0] >= (unint64_t)v68[2])
        goto LABEL_26;
    }
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v15;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v2;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v14;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    v85 = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v16;
    v100 = 2048;
    *(_QWORD *)v101 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 797;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v80[0] = 0;
    v95 = 0u;
    memset(v94, 0, sizeof(v94));
    memset(v93, 0, sizeof(v93));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v99 = 136315906;
    *(_QWORD *)&v99[4] = "operator[]";
    *(_WORD *)&v99[12] = 1024;
    *(_DWORD *)&v99[14] = 789;
    *(_WORD *)&v99[18] = 2048;
    *(_QWORD *)&v99[20] = v3;
    v100 = 2048;
    *(_QWORD *)v101 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_26:
  if (v13[7])
  {
    v15 = 0;
    v22 = 112;
    while (1)
    {
      v14 = v13[9] + v22;
      re::StringID::StringID((re::StringID *)v80, (const StringID *)(v14 - 80));
      v16 = v68[7];
      if (v16 <= v15)
        goto LABEL_106;
      v6 = (unint64_t *)(v14 - 112);
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v68[9] + v22));
      v14 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], (_QWORD *)(v14 - 32));
      v23 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v48[8], v6);
      v24 = !v14 || v23 == 0;
      if (v24)
        break;
      v16 = *(_QWORD *)v14;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= *(_QWORD *)v14)
        goto LABEL_107;
      v6 = v23;
      re::DynamicArray<unsigned long>::add((_QWORD *)(*(_QWORD *)v48 + 80 * v16 + 8), v23);
      v2 = *v6;
      v16 = (unint64_t)v46;
      if ((unint64_t)v46 <= *v6)
        goto LABEL_108;
      v25 = *(_QWORD *)v48;
      *(_QWORD *)(*(_QWORD *)v48 + 80 * v2) = *(_QWORD *)v14;
      v14 = *v6;
      if (v16 <= *v6)
        goto LABEL_109;
      re::StringID::operator=((unint64_t *)(v25 + 80 * v14 + 48), v84);
      v16 = *v6;
      v6 = v46;
      if ((unint64_t)v46 <= v16)
        goto LABEL_110;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)v48 + 80 * v16 + 64), v80);
      re::StringID::destroyString((re::StringID *)v84);
      re::StringID::destroyString((re::StringID *)v80);
      ++v15;
      v13 = v68;
      v22 += 160;
      if (v15 >= v68[7])
        goto LABEL_40;
    }
    re::StringID::destroyString((re::StringID *)v84);
    re::StringID::destroyString((re::StringID *)v80);
  }
LABEL_40:
  if (!v46)
  {
LABEL_80:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v93);
    goto LABEL_97;
  }
  v15 = 0;
  v42 = 0;
  v26 = 0;
  v3 = 0;
  v11 = -1;
  v27 = 32;
  while (1)
  {
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_111;
    isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v68[4] + v27 - 32));
    if (isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_112;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
          goto LABEL_84;
      }
      v29 = *(_QWORD *)(*(_QWORD *)v48 + v15 + 24);
      if (v29 <= 1)
      {
        v33 = "A blend node was found, with missing inputs.";
        goto LABEL_96;
      }
      if (v29 != 2)
      {
        if (v67)
          goto LABEL_82;
        v26 = 1;
      }
      goto LABEL_69;
    }
    v16 = v68[2];
    if (v16 <= v3)
      goto LABEL_113;
    v30 = (StringID *)(v68[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v69, v30, &v83);
      ++v83;
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_114;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
      {
        v33 = "A clip node was found, with no parent blend operation.";
        goto LABEL_96;
      }
      if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      {
        v33 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_96;
      }
      goto LABEL_69;
    }
    isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      v2 = (unint64_t)v46;
      if ((unint64_t)v46 <= v3)
        goto LABEL_116;
      if (*(_QWORD *)(*(_QWORD *)v48 + v15) == -1)
      {
        v24 = v11 == -1;
        v11 = v3;
        if (!v24)
        {
LABEL_84:
          v33 = "Multiple roots found.";
          goto LABEL_96;
        }
      }
      v67 = 1;
      if ((v26 & 1) != 0)
      {
LABEL_82:
        v33 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_96;
      }
      v26 = 0;
      goto LABEL_69;
    }
    v2 = (unint64_t)v46;
    if ((unint64_t)v46 <= v3)
      goto LABEL_115;
    if (*(_QWORD *)(*(_QWORD *)v48 + v15) >= (unint64_t)v46)
    {
      v33 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_96;
    }
    if (*(_QWORD *)(*(_QWORD *)v48 + v15 + 24))
      break;
    ++v42;
LABEL_69:
    ++v3;
    v15 += 80;
    v27 += 88;
    if (v3 >= v2)
    {
      if (v11 != -1)
      {
        v15 = v68[2];
        if (v15 > v11)
        {
          v15 = v68[4];
          v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, 624, 8);
          *(_QWORD *)v32 = off_24ED1F350;
          *(_QWORD *)(v32 + 8) = 46;
          *(_BYTE *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = &str_110;
          *(_QWORD *)(v32 + 80) = 0;
          *(_BYTE *)(v32 + 72) = 0;
          *(_QWORD *)(v32 + 88) = 0;
          *(_QWORD *)(v32 + 96) = 0;
          *(_DWORD *)(v32 + 104) = 0;
          *(_OWORD *)(v32 + 112) = 0u;
          *(_OWORD *)(v32 + 128) = 0u;
          *(_DWORD *)(v32 + 144) = 0;
          *(_OWORD *)(v32 + 152) = 0u;
          *(_OWORD *)(v32 + 168) = 0u;
          *(_DWORD *)(v32 + 184) = 0;
          *(_OWORD *)(v32 + 192) = 0u;
          *(_OWORD *)(v32 + 208) = 0u;
          *(_DWORD *)(v32 + 224) = 0;
          *(_OWORD *)(v32 + 232) = 0u;
          *(_OWORD *)(v32 + 248) = 0u;
          *(_DWORD *)(v32 + 264) = 0;
          *(_QWORD *)(v32 + 528) = 0;
          *(_DWORD *)(v32 + 536) = 0;
          *(_QWORD *)(v32 + 552) = 0;
          *(_QWORD *)(v32 + 544) = 0;
          *(_DWORD *)(v32 + 568) = 0;
          *(_QWORD *)(v32 + 560) = 0;
          *(_QWORD *)(v32 + 616) = 0;
          *(_DWORD *)(v32 + 608) = 0;
          *(_OWORD *)(v32 + 576) = 0u;
          *(_OWORD *)(v32 + 592) = 0u;
          *(_DWORD *)(v32 + 520) = 0;
          *(_OWORD *)(v32 + 488) = 0u;
          *(_OWORD *)(v32 + 504) = 0u;
          *(_DWORD *)(v32 + 400) = 0;
          *(_OWORD *)(v32 + 368) = 0u;
          *(_OWORD *)(v32 + 384) = 0u;
          *(_OWORD *)(v32 + 336) = 0u;
          *(_OWORD *)(v32 + 352) = 0u;
          *(_OWORD *)(v32 + 304) = 0u;
          *(_OWORD *)(v32 + 320) = 0u;
          *(_OWORD *)(v32 + 272) = 0u;
          *(_OWORD *)(v32 + 288) = 0u;
          *(_DWORD *)(v32 + 440) = 0;
          *(_OWORD *)(v32 + 408) = 0u;
          *(_OWORD *)(v32 + 424) = 0u;
          *(_OWORD *)(v32 + 448) = 0u;
          *(_OWORD *)(v32 + 464) = 0u;
          *(_DWORD *)(v32 + 480) = 0;
          *(_QWORD *)v32 = &off_24ED36040;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v32 + 304), (uint64_t)v43, v83);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v43, v83 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v43, v83);
          *(_QWORD *)(v32 + 416) = v43;
          re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 416), v42);
          ++*(_DWORD *)(v32 + 440);
          v84[0] = 0;
          v85 = 0;
          if (v67)
          {
            re::RigGraphDefinitionBuilder::init(&v64[1], (uint64_t)v43, (uint64_t)v50, (uint64_t)v86);
            re::AnimationBlendTreeBuilder<re::SkeletalPose>::buildRig((uint64_t)v80, &v43, (_QWORD *)v32, v11, (unint64_t *)v84);
            if (!LOBYTE(v80[0]))
            {
              v37 = v82;
              v38 = v80[3];
              v39 = v81;
              goto LABEL_98;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v64[1], *(const char **)(v15 + 88 * v11 + 8), "output", "output", "", 0, (uint64_t)v77);
            if (!v77[0] && (_QWORD)v78)
            {
              if ((BYTE8(v78) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v78 + 40))();
              v78 = 0u;
              v79 = 0u;
            }
            v102 = 0;
            *(_QWORD *)&v101[2] = 0;
            v103 = 1;
            v106 = 0;
            v104 = 0;
            v105 = 0;
            v107 = 0;
            v110 = 0;
            v108 = 0;
            v109 = 0;
            v115 = 0;
            v112 = 0u;
            v113 = 0u;
            v111 = 0;
            v114 = 0;
            *(_QWORD *)&v99[16] = v86;
            v99[24] = 0;
            *(_QWORD *)v99 = v43;
            *(_QWORD *)&v99[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v101[2], v43);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v43, v50, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 80, (uint64_t)v93);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v94[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v97);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v98);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v98);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v97);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v96);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v94[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v93);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v101[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize(v32 + 416, v42);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v43, (unint64_t)v46);
            *(_QWORD *)(v32 + 376) = v43;
            re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(v32 + 376), 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize(v32 + 376, (unint64_t)v46);
            if (!*(_QWORD *)(v32 + 288))
            {
LABEL_118:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 468;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = 0;
              v100 = 2048;
              *(_QWORD *)v101 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            v34 = *(_QWORD *)(v32 + 296);
            *(_DWORD *)v34 = 1065353216;
            v15 = (unint64_t)v46;
            if ((unint64_t)v46 <= v11)
            {
LABEL_119:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 789;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v80[0] = 0;
              v95 = 0u;
              memset(v94, 0, sizeof(v94));
              memset(v93, 0, sizeof(v93));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v99 = 136315906;
              *(_QWORD *)&v99[4] = "operator[]";
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = 797;
              *(_WORD *)&v99[18] = 2048;
              *(_QWORD *)&v99[20] = v11;
              v100 = 2048;
              *(_QWORD *)v101 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_BYTE *)(v34 + 6) = *(_QWORD *)(*(_QWORD *)v48 + 80 * v11 + 24);
            v15 = v68[2];
            if (v15 <= v11)
              goto LABEL_120;
            *(_BYTE *)(v34 + 7) = re::StringID::operator==((_QWORD *)(v68[4] + 88 * v11 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v34 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v43, v32, v11, 1, v84, &v85);
          }
          if (v74)
          {
            for (i = 0; i < v74; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v76 + 8 * i));
          }
          v36 = v68;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v68);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v36 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v36 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v36 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v36 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v41 + 12);
          *(_BYTE *)(v32 + 16) = *(_BYTE *)(v41 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v41 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v41 + 40));
          *(_BYTE *)(v32 + 72) = *(_BYTE *)(v41 + 72);
          goto LABEL_101;
        }
LABEL_117:
        v80[0] = 0;
        v95 = 0u;
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v99 = 136315906;
        *(_QWORD *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(_QWORD *)&v99[20] = v11;
        v100 = 2048;
        *(_QWORD *)v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_80;
    }
  }
  v33 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_96:
LABEL_97:
  v37 = v93[2];
  v38 = v93[0];
  v39 = v93[1];
LABEL_98:
  v32 = 0;
  if (v38 && (v39 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37);
    v32 = 0;
  }
LABEL_101:
  re::BindNode::deinit((re::BindNode *)&v92[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v86);
  if (v86[0] && (v87 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)&v43);
  return v32;
}

uint64_t re::Allocator::create<re::EventTimeline>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 88, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 48;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)v1 = off_24ED24EF0;
  *(_QWORD *)(v1 + 80) = 0;
  return v1;
}

uint64_t re::Allocator::create<re::BlendShapeWeightsAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 216, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 50;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)v1 = off_24ED36180;
  return v1;
}

uint64_t `anonymous namespace'::convertFromToByAnimation<re::BlendShapeWeightsAnimationAssetData,re::BlendShapeWeightsAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t result;
  _QWORD v30[2];
  unint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE v35[38];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v33 = 0;
  v30[1] = 0;
  v31 = 0;
  v32 = 0;
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v30, 3uLL);
  ++v32;
  if (*(_BYTE *)(a1 + 88))
  {
    re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v36, a1 + 192);
    v6 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v30, &v36);
    if ((_QWORD)v36)

    v7 = v33;
    memset(v35, 0, 32);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v35[24], *v7);
    re::Optional<re::BlendShapeWeights>::Optional((uint64_t)&v36, (uint64_t)v35);
    re::Optional<re::BlendShapeWeights>::operator=((uint64_t *)(a2 + 88), (unsigned __int8 *)&v36);
    if ((_BYTE)v36)
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)((char *)&v36 + 8));
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v35);
    v5 = (_anonymous_namespace_ *)re::FixedArray<float>::operator=((uint64_t *)(a2 + 96), a1 + 96);
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v8 = v31;
    if (!v31)
      goto LABEL_19;
    v9 = 0;
    v10 = v33;
    v11 = *(_QWORD *)(a1 + 248);
    while (1)
    {
      v12 = v10[v9];
      if (*(_QWORD *)(v12 + 32) == v11)
      {
        if (!v11)
        {
LABEL_18:
          if (v9 >= v8)
          {
LABEL_19:
            re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v36, a1 + 232);
            v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v30, &v36);
            if ((_QWORD)v36)

            v8 = v31;
            v9 = v31 - 1;
          }
          if (v8 > v9)
          {
            v16 = v33;
            memset(v35, 0, 32);
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v35[24], v16[v9]);
            re::Optional<re::BlendShapeWeights>::Optional((uint64_t)&v36, (uint64_t)v35);
            re::Optional<re::BlendShapeWeights>::operator=((uint64_t *)(a2 + 128), (unsigned __int8 *)&v36);
            if ((_BYTE)v36)
              re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)((char *)&v36 + 8));
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v35);
            v5 = (_anonymous_namespace_ *)re::FixedArray<float>::operator=((uint64_t *)(a2 + 136), a1 + 128);
            break;
          }
          v34 = 0;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v36 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v35 = 136315906;
          *(_QWORD *)&v35[4] = "operator[]";
          *(_WORD *)&v35[12] = 1024;
          *(_DWORD *)&v35[14] = 789;
          *(_WORD *)&v35[18] = 2048;
          *(_QWORD *)&v35[20] = v9;
          *(_WORD *)&v35[28] = 2048;
          *(_QWORD *)&v35[30] = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          v34 = 0;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v36 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v35 = 136315906;
          *(_QWORD *)&v35[4] = "operator[]";
          *(_WORD *)&v35[12] = 1024;
          *(_DWORD *)&v35[14] = 789;
          *(_WORD *)&v35[18] = 2048;
          *(_QWORD *)&v35[20] = v9;
          *(_WORD *)&v35[28] = 2048;
          *(_QWORD *)&v35[30] = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = *(_QWORD **)(v12 + 40);
        v14 = *(_QWORD **)(a1 + 264);
        v15 = 16 * v11;
        while (1)
        {
          v5 = (_anonymous_namespace_ *)re::StringID::operator==(v13, v14);
          if (!(_DWORD)v5)
            break;
          v13 += 2;
          v14 += 2;
          v15 -= 16;
          if (!v15)
            goto LABEL_18;
        }
      }
      if (++v9 == v8)
        goto LABEL_19;
    }
  }
  if (!*(_BYTE *)(a1 + 152))
    goto LABEL_45;
  v8 = v31;
  if (!v31)
    goto LABEL_38;
  v9 = 0;
  v17 = v33;
  v18 = *(_QWORD *)(a1 + 288);
  while (1)
  {
    v19 = v17[v9];
    if (*(_QWORD *)(v19 + 32) == v18)
      break;
LABEL_35:
    if (++v9 == v8)
      goto LABEL_38;
  }
  if (v18)
  {
    v20 = *(_QWORD **)(v19 + 40);
    v21 = *(_QWORD **)(a1 + 304);
    v22 = 16 * v18;
    do
    {
      v5 = (_anonymous_namespace_ *)re::StringID::operator==(v20, v21);
      if (!(_DWORD)v5)
        goto LABEL_35;
      v20 += 2;
      v21 += 2;
      v22 -= 16;
    }
    while (v22);
  }
  if (v9 >= v8)
  {
LABEL_38:
    re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v36, a1 + 272);
    v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v30, &v36);
    if ((_QWORD)v36)

    v8 = v31;
    v9 = v31 - 1;
  }
  if (v8 <= v9)
    goto LABEL_58;
  v23 = v33;
  memset(v35, 0, 32);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v35[24], v23[v9]);
  re::Optional<re::BlendShapeWeights>::Optional((uint64_t)&v36, (uint64_t)v35);
  re::Optional<re::BlendShapeWeights>::operator=((uint64_t *)(a2 + 168), (unsigned __int8 *)&v36);
  if ((_BYTE)v36)
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)((char *)&v36 + 8));
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v35);
  v5 = (_anonymous_namespace_ *)re::FixedArray<float>::operator=((uint64_t *)(a2 + 176), a1 + 160);
LABEL_45:
  v24 = v30[0];
  if (v30[0])
  {
    v25 = v33;
    if (v33)
    {
      if (v31)
      {
        v26 = 8 * v31;
        v27 = v33;
        do
        {
          if (*v27)
          {

            *v27 = 0;
          }
          ++v27;
          v26 -= 8;
        }
        while (v26);
      }
      v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 40))(v24, v25);
    }
  }
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 184);
  if (v28)
  {
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 208) = result;
  return result;
}

uint64_t re::Allocator::create<re::BlendShapeWeightsSampledAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 112, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 59;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = off_24ED36220;
  return v1;
}

float `anonymous namespace'::convertSampledAnimation<re::BlendShapeWeightsSampledAnimationAssetData,re::BlendShapeWeightsSampledAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v11, a1 + 128);
  v5 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 96);
      if (v9 <= v8)
        break;
      re::BlendShapeWeights::init((uint64_t *)(*(_QWORD *)(a2 + 104) + v6), &v11);
      v9 = *(_QWORD *)(a1 + 104);
      if (v9 <= v8)
        goto LABEL_11;
      v9 = *(_QWORD *)(a2 + 96);
      if (v9 <= v8)
        goto LABEL_12;
      re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(a2 + 104) + v6), *(_QWORD *)(a1 + 120) + v7);
      ++v8;
      v7 += 24;
      v6 += 32;
      if (v8 >= *(_QWORD *)(a1 + 104))
        goto LABEL_7;
    }
    v12 = 0;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v13 = 136315906;
    v14 = "operator[]";
    v15 = 1024;
    v16 = 468;
    v17 = 2048;
    v18 = v8;
    v19 = 2048;
    v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    v12 = 0;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v13 = 136315906;
    v14 = "operator[]";
    v15 = 1024;
    v16 = 797;
    v17 = 2048;
    v18 = v8;
    v19 = 2048;
    v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    v12 = 0;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v13 = 136315906;
    v14 = "operator[]";
    v15 = 1024;
    v16 = 468;
    v17 = 2048;
    v18 = v8;
    v19 = 2048;
    v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v11)

  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 76);
  result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::BlendShapeWeightsAnimationClip>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 168, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 60;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 160) = 1065353216;
  *(_WORD *)(v1 + 164) = 0;
  *(_QWORD *)v1 = off_24ED362C0;
  return v1;
}

uint64_t re::Allocator::create<re::BlendShapeWeightsKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 128, 8);
  *(_QWORD *)v1 = off_24ED1F350;
  *(_QWORD *)(v1 + 8) = 61;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &str_110;
  *(_WORD *)(v1 + 72) = 256;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)v1 = off_24ED36400;
  return v1;
}

_anonymous_namespace_ *`anonymous namespace'::convertKeyframeAnimation<re::BlendShapeWeightsKeyframeAnimationAssetData,re::BlendShapeWeightsKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  v4 = re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v12, a1 + 160);
  v5 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 112);
      if (v9 <= v8)
        break;
      re::BlendShapeWeights::init((uint64_t *)(*(_QWORD *)(a2 + 120) + v6), &v12);
      v9 = *(_QWORD *)(a1 + 136);
      if (v9 <= v8)
        goto LABEL_11;
      v9 = *(_QWORD *)(a2 + 112);
      if (v9 <= v8)
        goto LABEL_12;
      re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(a2 + 120) + v6), *(_QWORD *)(a1 + 152) + v7);
      ++v8;
      v7 += 24;
      v6 += 32;
      if (v8 >= *(_QWORD *)(a1 + 136))
        goto LABEL_7;
    }
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 468;
    v18 = 2048;
    v19 = v8;
    v20 = 2048;
    v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v8;
    v20 = 2048;
    v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    v13 = 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 468;
    v18 = 2048;
    v19 = v8;
    v20 = 2048;
    v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v12)

  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v22 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)&v22 + 1) = v10;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v22);
}

uint64_t re::internal::registerAndResolveTimelineDependencies(re::internal *this, const re::TimelineAssetData *a2, re::Timeline *a3)
{
  int v3;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t i;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t Timeline;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  re::SkeletonAsset *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  const re::Skeleton *v29;
  re::SkeletalPoseJointDefinition *v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  re::SkeletalPoseJointDefinition *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[12];
  __int16 v82;
  int v83;
  __int16 v84;
  unint64_t v85;
  __int16 v86;
  unint64_t v87;
  re::SkeletalPoseJointDefinition *v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 2) - 1;
  result = 0;
  switch(v3)
  {
    case 0:
      v10 = *((_QWORD *)this + 10);
      if (v10)
      {
        v11 = atomic_load((unsigned int *)(v10 + 704));
        if (v11 == 3)
          return 2;
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v88, (re::internal *)((char *)this + 72));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v88);
      v9 = *((_QWORD *)a2 + 9);
      return v9 == 0;
    case 1:
      v12 = *((_QWORD *)a2 + 10);
      if (v12)
      {
        v13 = 0;
        v14 = *((_QWORD *)a2 + 11);
        v15 = 1;
        for (i = 8; ; i += 24)
        {
          if (!*(_QWORD *)(v14 + 8 * v13))
          {
            v17 = *((_QWORD *)this + 11);
            if (v17 <= v13)
            {
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              v74 = v17;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 797;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_162:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              v75 = v17;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 797;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = v75;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_163:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              v76 = v21;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = v76;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_164:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              v77 = v12;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = v77;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_165:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_166:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_167:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_168:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_169:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_170:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_171:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_172:
              v80 = 0;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              *(_OWORD *)v88 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v81 = 136315906;
              *(_QWORD *)&v81[4] = "operator[]";
              v82 = 1024;
              v83 = 468;
              v84 = 2048;
              v85 = v13;
              v86 = 2048;
              v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v18 = *(_QWORD *)(*((_QWORD *)this + 13) + i);
            if (v18)
            {
              v19 = atomic_load((unsigned int *)(v18 + 704));
              if (v19 == 3)
                return 2;
              v17 = *((_QWORD *)this + 11);
            }
            if (v17 <= v13)
              goto LABEL_162;
            re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 13) + i - 8));
            v21 = *((_QWORD *)a2 + 10);
            if (v21 <= v13)
              goto LABEL_163;
            *(_QWORD *)(*((_QWORD *)a2 + 11) + 8 * v13) = Timeline;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
            v12 = *((_QWORD *)a2 + 10);
            if (v12 <= v13)
              goto LABEL_164;
            v14 = *((_QWORD *)a2 + 11);
            v15 &= *(_QWORD *)(v14 + 8 * v13) != 0;
          }
          if (++v13 >= v12)
            return (v15 & 1) == 0;
        }
      }
      v15 = 1;
      return (v15 & 1) == 0;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 59:
      v7 = *((_QWORD *)this + 11);
      if (v7)
      {
        v8 = atomic_load((unsigned int *)(v7 + 704));
        if (v8 == 3)
          return 2;
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v88, (re::internal *)((char *)this + 80));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v88);
      v9 = *((_QWORD *)a2 + 10);
      return v9 == 0;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 36:
    case 37:
    case 47:
    case 49:
    case 58:
    case 60:
      return result;
    case 17:
      v22 = *((_QWORD *)this + 25);
      if (!v22)
        goto LABEL_62;
      v23 = atomic_load((unsigned int *)(v22 + 704));
      if (v23 == 3)
        return 2;
      v24 = (re::internal *)((char *)this + 192);
      v25 = *((_QWORD *)this + 25);
      if (!v25)
        goto LABEL_157;
      v26 = atomic_load((unsigned int *)(v25 + 704));
      if (v26 != 2)
        goto LABEL_157;
      v27 = *((_QWORD *)this + 25);
      if (!v27)
        goto LABEL_62;
      v28 = *(uint64_t **)(v27 + 264);
      if (v28 != re::SkeletonAsset::assetType(0))
        return 0;
      v29 = (const re::Skeleton *)(re::AssetHandle::asset<re::SkeletonAsset>(v24) + 88);
      v88[0] = 0;
      if (*((_BYTE *)a2 + 88))
      {
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v88, *((_QWORD *)a2 + 22));
        re::SkeletalPoseJointDefinition::setSkeleton(v88[0], v29);
      }
      *(_QWORD *)v81 = 0;
      if (*((_BYTE *)a2 + 184))
      {
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v81, *((_QWORD *)a2 + 34));
        if (*(re::SkeletalPoseJointDefinition **)v81 != v88[0])
          re::SkeletalPoseJointDefinition::setSkeleton(*(re::SkeletalPoseJointDefinition **)v81, v29);
      }
      v78 = 0;
      if (*((_BYTE *)a2 + 280))
      {
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v78, *((_QWORD *)a2 + 46));
        v30 = v78;
        if (v78 != v88[0] && v78 != *(re::SkeletalPoseJointDefinition **)v81)
        {
          re::SkeletalPoseJointDefinition::setSkeleton(v78, v29);
          v30 = v78;
        }
        if (v30)

      }
      if (*(_QWORD *)v81)

      if (!v88[0])
        return 0;
      v31 = (char *)v88[0] + 8;
      goto LABEL_61;
    case 25:
      v32 = *((_QWORD *)this + 21);
      if (!v32)
        goto LABEL_62;
      v33 = atomic_load((unsigned int *)(v32 + 704));
      if (v33 == 3)
        return 2;
      v24 = (re::internal *)((char *)this + 160);
      v34 = *((_QWORD *)this + 21);
      if (!v34)
        goto LABEL_157;
      v35 = atomic_load((unsigned int *)(v34 + 704));
      if (v35 != 2)
        goto LABEL_157;
      v36 = *((_QWORD *)this + 21);
      if (!v36)
        goto LABEL_62;
      v37 = *(uint64_t **)(v36 + 264);
      if (v37 != re::SkeletonAsset::assetType(0) || !*((_QWORD *)a2 + 14))
        return 0;
      v38 = *((_QWORD *)a2 + 15);
      goto LABEL_59;
    case 33:
      v39 = *((_QWORD *)this + 17);
      if (!v39)
        goto LABEL_62;
      v40 = atomic_load((unsigned int *)(v39 + 704));
      if (v40 == 3)
        return 2;
      v24 = (re::internal *)((char *)this + 128);
      v41 = *((_QWORD *)this + 17);
      if (v41 && (v42 = atomic_load((unsigned int *)(v41 + 704)), v42 == 2))
      {
        v43 = *((_QWORD *)this + 17);
        if (v43)
        {
          v44 = *(uint64_t **)(v43 + 264);
          if (v44 == re::SkeletonAsset::assetType(0) && *((_QWORD *)a2 + 12))
          {
            v38 = *((_QWORD *)a2 + 13);
LABEL_59:
            v45 = *(_QWORD *)(v38 + 80);
            if (v45)
            {
              v46 = (id)(v45 + 8);
              v47 = re::AssetHandle::asset<re::SkeletonAsset>(v24);
              re::SkeletalPoseJointDefinition::setSkeleton((re::SkeletalPoseJointDefinition *)v45, (const re::Skeleton *)(v47 + 88));
              v31 = (char *)(v45 + 8);
LABEL_61:

            }
            else
            {
              v73 = re::AssetHandle::asset<re::SkeletonAsset>(v24);
              re::SkeletalPoseJointDefinition::setSkeleton(0, (const re::Skeleton *)(v73 + 88));
            }
          }
        }
        else
        {
LABEL_62:
          re::SkeletonAsset::assetType(0);
        }
        return 0;
      }
      else
      {
LABEL_157:
        re::AssetHandle::loadAsync(v24);
        return 1;
      }
    case 38:
      if (!*((_QWORD *)this + 33))
        goto LABEL_154;
      v48 = 0;
      v13 = 0;
      v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v48));
        if (!v79)
          break;
        v50 = atomic_load((unsigned int *)(v79 + 704));
        if (v50 == 3)
          break;
        v51 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (!v51)
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
          goto LABEL_73;
        }
        re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v51 + 16));
        i = *((_QWORD *)a2 + 39);
        if (i <= v13)
          goto LABEL_165;
        if (*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
        {
LABEL_73:
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
          ++v13;
          v48 += 24;
          if (v13 >= *((_QWORD *)this + 33))
            return v49 & 1;
          continue;
        }
        break;
      }
LABEL_152:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
      return 2;
    case 39:
      if (!*((_QWORD *)this + 33))
        goto LABEL_154;
      v52 = 0;
      v13 = 0;
      v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v52));
        if (!v79)
          goto LABEL_152;
        v53 = atomic_load((unsigned int *)(v79 + 704));
        if (v53 == 3)
          goto LABEL_152;
        v54 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v54)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v54 + 16));
          i = *((_QWORD *)a2 + 39);
          if (i <= v13)
            goto LABEL_166;
          if (!*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
            goto LABEL_152;
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v52 += 24;
        if (v13 >= *((_QWORD *)this + 33))
          return v49 & 1;
        continue;
      }
    case 40:
      if (!*((_QWORD *)this + 33))
        goto LABEL_154;
      v55 = 0;
      v13 = 0;
      v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v55));
        if (!v79)
          goto LABEL_152;
        v56 = atomic_load((unsigned int *)(v79 + 704));
        if (v56 == 3)
          goto LABEL_152;
        v57 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v57)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v57 + 16));
          i = *((_QWORD *)a2 + 39);
          if (i <= v13)
            goto LABEL_167;
          if (!*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
            goto LABEL_152;
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v55 += 24;
        if (v13 >= *((_QWORD *)this + 33))
          return v49 & 1;
        continue;
      }
    case 41:
      if (!*((_QWORD *)this + 33))
        goto LABEL_154;
      v58 = 0;
      v13 = 0;
      v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v58));
        if (!v79)
          goto LABEL_152;
        v59 = atomic_load((unsigned int *)(v79 + 704));
        if (v59 == 3)
          goto LABEL_152;
        v60 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v60)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v60 + 16));
          i = *((_QWORD *)a2 + 39);
          if (i <= v13)
            goto LABEL_168;
          if (!*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
            goto LABEL_152;
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v58 += 24;
        if (v13 >= *((_QWORD *)this + 33))
          return v49 & 1;
        continue;
      }
    case 42:
      if (!*((_QWORD *)this + 33))
        goto LABEL_154;
      v61 = 0;
      v13 = 0;
      v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v61));
        if (!v79)
          goto LABEL_152;
        v62 = atomic_load((unsigned int *)(v79 + 704));
        if (v62 == 3)
          goto LABEL_152;
        v63 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v63)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v63 + 16));
          i = *((_QWORD *)a2 + 39);
          if (i <= v13)
            goto LABEL_169;
          if (!*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
            goto LABEL_152;
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v61 += 24;
        if (v13 >= *((_QWORD *)this + 33))
          return v49 & 1;
        continue;
      }
    case 43:
      if (!*((_QWORD *)this + 33))
        goto LABEL_154;
      v64 = 0;
      v13 = 0;
      v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v64));
        if (!v79)
          goto LABEL_152;
        v65 = atomic_load((unsigned int *)(v79 + 704));
        if (v65 == 3)
          goto LABEL_152;
        v66 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v66)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v66 + 16));
          i = *((_QWORD *)a2 + 39);
          if (i <= v13)
            goto LABEL_170;
          if (!*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
            goto LABEL_152;
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v64 += 24;
        if (v13 >= *((_QWORD *)this + 33))
          return v49 & 1;
        continue;
      }
    case 44:
      if (!*((_QWORD *)this + 33))
        goto LABEL_154;
      v67 = 0;
      v13 = 0;
      v49 = 0;
      while (1)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v67));
        if (!v79)
          goto LABEL_152;
        v68 = atomic_load((unsigned int *)(v79 + 704));
        if (v68 == 3)
          goto LABEL_152;
        v69 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v69)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v69 + 16));
          i = *((_QWORD *)a2 + 39);
          if (i <= v13)
            goto LABEL_171;
          if (!*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
            goto LABEL_152;
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v67 += 24;
        if (v13 >= *((_QWORD *)this + 33))
          return v49 & 1;
      }
    case 45:
      if (!*((_QWORD *)this + 33))
      {
LABEL_154:
        v49 = 0;
        return v49 & 1;
      }
      v70 = 0;
      v13 = 0;
      v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((_QWORD *)this + 35) + v70));
        if (!v79)
          goto LABEL_152;
        v71 = atomic_load((unsigned int *)(v79 + 704));
        if (v71 == 3)
          goto LABEL_152;
        v72 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v72)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v72 + 16));
          i = *((_QWORD *)a2 + 39);
          if (i <= v13)
            goto LABEL_172;
          if (!*(_QWORD *)(*((_QWORD *)a2 + 40) + 8 * v13))
            goto LABEL_152;
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v70 += 24;
        if (v13 >= *((_QWORD *)this + 33))
          return v49 & 1;
        continue;
      }
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, "assertion failure: '%s' (%s:line %i) Unexpected timeline type.", "!\"Unreachable code\"", "registerAndResolveTimelineDependencies", 2246);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2252DBAA0);
  }
}

uint64_t re::internal::destroy(uint64_t this, re::Timeline *a2, Allocator *a3)
{
  void (***v4)(_QWORD, re::Timeline *, Allocator *);
  int v5;
  void (***v6)(_QWORD, re::Timeline *, Allocator *);

  if (this)
  {
    v4 = (void (***)(_QWORD, re::Timeline *, Allocator *))this;
    v5 = *(_DWORD *)(this + 8);
    switch(v5)
    {
      case 11:
        v6 = *(void (****)(_QWORD, re::Timeline *, Allocator *))(this + 112);
        if (v6)
          goto LABEL_10;
        break;
      case 12:
      case 13:
        v6 = *(void (****)(_QWORD, re::Timeline *, Allocator *))(this + 136);
        if (v6)
          goto LABEL_10;
        break;
      case 14:
      case 15:
      case 16:
        v6 = *(void (****)(_QWORD, re::Timeline *, Allocator *))(this + 192);
        if (v6)
          goto LABEL_10;
        break;
      case 17:
        v6 = *(void (****)(_QWORD, re::Timeline *, Allocator *))(this + 288);
        if (v6)
          goto LABEL_10;
        break;
      case 18:
        v6 = *(void (****)(_QWORD, re::Timeline *, Allocator *))(this + 376);
        if (v6)
          goto LABEL_10;
        break;
      default:
        if (v5 == 50)
        {
          v6 = *(void (****)(_QWORD, re::Timeline *, Allocator *))(this + 208);
          if (v6)
          {
LABEL_10:
            (**v6)(v6, a2, a3);
            (*(void (**)(re::Timeline *, void (***)(_QWORD, re::Timeline *, Allocator *)))(*(_QWORD *)a2 + 40))(a2, v6);
          }
        }
        break;
    }
    (**v4)(v4, a2, a3);
    return (*(uint64_t (**)(re::Timeline *, void (***)(_QWORD, re::Timeline *, Allocator *)))(*(_QWORD *)a2 + 40))(a2, v4);
  }
  return this;
}

void re::TimelineClipAssetData::~TimelineClipAssetData(re::TimelineClipAssetData *this)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::TimelineClipAssetData *)((char *)this + 72));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::TimelineClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::TimelineClipAssetData *)((char *)this + 72));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::TimelineClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::TimelineClipAssetData::clone(re::TimelineClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  __int128 v8;
  int v9;
  int v10;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 176, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::TimelineClipAssetData *)((char *)this + 40));
  *(_QWORD *)v4 = off_24ED31B10;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 72), (re::TimelineClipAssetData *)((char *)this + 72));
  v6 = *((unsigned __int8 *)this + 96);
  *(_BYTE *)(v4 + 96) = v6;
  if (v6)
    *(_QWORD *)(v4 + 104) = *((_QWORD *)this + 13);
  v7 = *((unsigned __int8 *)this + 112);
  *(_BYTE *)(v4 + 112) = v7;
  if (v7)
    *(_QWORD *)(v4 + 120) = *((_QWORD *)this + 15);
  v8 = *((_OWORD *)this + 8);
  *(_QWORD *)(v4 + 144) = *((_QWORD *)this + 18);
  *(_OWORD *)(v4 + 128) = v8;
  v9 = *((unsigned __int8 *)this + 152);
  *(_BYTE *)(v4 + 152) = v9;
  if (v9)
    *(_QWORD *)(v4 + 160) = *((_QWORD *)this + 20);
  v10 = *((_DWORD *)this + 42);
  *(_BYTE *)(v4 + 172) = *((_BYTE *)this + 172);
  *(_DWORD *)(v4 + 168) = v10;
  return v4;
}

uint64_t re::TimelineClipAssetData::typeInfo(re::TimelineClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_TimelineClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineClipAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE188, 0);
}

void re::TimelineGroupAssetData::~TimelineGroupAssetData(re::TimelineGroupAssetData *this)
{
  uint64_t v2;

  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::TimelineGroupAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::TimelineGroupAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::TimelineGroupAssetData::clone(re::TimelineGroupAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 112, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::TimelineGroupAssetData *)((char *)this + 40));
  *(_QWORD *)v4 = off_24ED31B68;
  re::DynamicArray<re::AssetHandle>::DynamicArray(v4 + 72, (uint64_t *)this + 9);
  return v4;
}

uint64_t re::TimelineGroupAssetData::typeInfo(re::TimelineGroupAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineGroupAssetData", (uint64_t (*)(re::internal *))re::allocInfo_TimelineGroupAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineGroupAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE1D8, 0);
}

re::AssetHandle *`anonymous namespace'::findAssetHandle<re::Timeline>(re::AssetHandle *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    LODWORD(v3) = 0x7FFFFFFF;
    if (*(_QWORD *)a3)
    {
      v4 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v5 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 4 * ((v4 ^ (v4 >> 31)) % *(unsigned int *)(a3 + 24)));
      if ((_DWORD)v5 != 0x7FFFFFFF)
      {
        v6 = *(_QWORD *)(a3 + 16);
        if (*(_QWORD *)(v6 + 48 * v5 + 16) == a2)
        {
          LODWORD(v3) = v5;
        }
        else
        {
          v3 = v5;
          while (1)
          {
            LODWORD(v3) = *(_DWORD *)(v6 + 48 * v3 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v3 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v6 + 48 * v3 + 16) == a2)
              return re::AssetHandle::AssetHandle(result, (const re::AssetHandle *)(*(_QWORD *)(a3 + 16) + 48 * v3 + 24));
          }
          LODWORD(v3) = 0x7FFFFFFF;
        }
      }
    }
    return re::AssetHandle::AssetHandle(result, (const re::AssetHandle *)(*(_QWORD *)(a3 + 16) + 48 * v3 + 24));
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
  }
  return result;
}

_QWORD *re::DynamicArray<re::FixedArray<unsigned char>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 24 * v2;
    v4 = (_QWORD *)(result[4] + 8);
    do
    {
      result = (_QWORD *)*(v4 - 1);
      if (result)
      {
        if (*v4)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, v4[1]);
          *v4 = 0;
          v4[1] = 0;
        }
        *(v4 - 1) = 0;
      }
      v4 += 3;
      v3 -= 24;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t `anonymous namespace'::loadTimeline(re::TimelineAsset *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  v1 = *((_QWORD *)a1 + 1);
  if (v1)
  {
    v3 = *(uint64_t **)(v1 + 264);
    if (v3 == re::TimelineAsset::assetType(a1))
    {
      v4 = re::AssetHandle::loadedAsset<re::TimelineAsset>(a1);
      if (v4)
        return *(_QWORD *)(v4 + 16);
      re::AssetHandle::loadAsync(a1);
    }
  }
  else
  {
    re::TimelineAsset::assetType(a1);
  }
  return 0;
}

uint64_t re::AssetHandle::loadedAsset<re::TimelineAsset>(re::TimelineAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::TimelineAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::AssetHandle::asset<re::SkeletonAsset>(re::SkeletonAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::SkeletonAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::SkeletalPoseJointDefinition::setSkeleton(re::SkeletalPoseJointDefinition *this, const re::Skeleton *a2)
{
  re::StringID::operator=((unint64_t *)this + 3, (uint64_t *)a2);
  re::FixedArray<re::StringID>::operator=((unint64_t *)this + 5, (uint64_t)a2 + 16);
  re::FixedArray<unsigned int>::operator=((uint64_t *)this + 8, (uint64_t)a2 + 40);
  re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)this + 11, (uint64_t)a2 + 64);
  re::FixedArray<re::Matrix4x4<float>>::operator=((uint64_t *)this + 14, (uint64_t)a2 + 88);
  return re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 136, (uint64_t)a2 + 112);
}

void re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 0x10uLL, 8uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionOptional<double>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<double>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<double>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<double>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<double>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<double>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

re::TimelineClipAssetData *re::TimelineClipAssetData::TimelineClipAssetData(re::TimelineClipAssetData *this)
{
  re::DynamicString *v2;

  *(_QWORD *)this = off_24ED36578;
  *((_QWORD *)this + 1) = 1;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &str_110;
  v2 = (re::TimelineClipAssetData *)((char *)this + 40);
  *(_QWORD *)this = off_24ED31B10;
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_DWORD *)this + 42) = 1065353216;
  *((_BYTE *)this + 172) = 0;
  return this;
}

uint64_t re::TimelineAssetData::TimelineAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  return a1;
}

uint64_t re::AnimationClipAssetData<float>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED31CB0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::FloatAnimationClipAssetData::~FloatAnimationClipAssetData(re::FloatAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31CB0;
  re::AssetHandle::~AssetHandle((re::FloatAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31CB0;
  re::AssetHandle::~AssetHandle((re::FloatAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FloatAnimationClipAssetData::clone(re::FloatAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<float>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED31C40;
  return result;
}

uint64_t re::FloatAnimationClipAssetData::typeInfo(re::FloatAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FloatAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<float>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<float>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<float>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED31CB0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<double>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED31D78;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::DoubleAnimationClipAssetData::~DoubleAnimationClipAssetData(re::DoubleAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31D78;
  re::AssetHandle::~AssetHandle((re::DoubleAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31D78;
  re::AssetHandle::~AssetHandle((re::DoubleAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DoubleAnimationClipAssetData::clone(re::DoubleAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<double>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED31CF0;
  return result;
}

uint64_t re::DoubleAnimationClipAssetData::typeInfo(re::DoubleAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DoubleAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<double>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<double>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<double>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED31D78;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED31E40;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::Vector2FAnimationClipAssetData::~Vector2FAnimationClipAssetData(re::Vector2FAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31E40;
  re::AssetHandle::~AssetHandle((re::Vector2FAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31E40;
  re::AssetHandle::~AssetHandle((re::Vector2FAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector2FAnimationClipAssetData::clone(re::Vector2FAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED31DB8;
  return result;
}

uint64_t re::Vector2FAnimationClipAssetData::typeInfo(re::Vector2FAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector2FAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Vector2<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<re::Vector2<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED31E40;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED31F08;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::Vector3FAnimationClipAssetData::~Vector3FAnimationClipAssetData(re::Vector3FAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31F08;
  re::AssetHandle::~AssetHandle((re::Vector3FAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31F08;
  re::AssetHandle::~AssetHandle((re::Vector3FAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector3FAnimationClipAssetData::clone(re::Vector3FAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED31E80;
  return result;
}

uint64_t re::Vector3FAnimationClipAssetData::typeInfo(re::Vector3FAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector3FAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Vector3<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<re::Vector3<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED31F08;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED31FD0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::Vector4FAnimationClipAssetData::~Vector4FAnimationClipAssetData(re::Vector4FAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31FD0;
  re::AssetHandle::~AssetHandle((re::Vector4FAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED31FD0;
  re::AssetHandle::~AssetHandle((re::Vector4FAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector4FAnimationClipAssetData::clone(re::Vector4FAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED31F48;
  return result;
}

uint64_t re::Vector4FAnimationClipAssetData::typeInfo(re::Vector4FAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector4FAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Vector4<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<re::Vector4<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED31FD0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED32098;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::QuaternionFAnimationClipAssetData::~QuaternionFAnimationClipAssetData(re::QuaternionFAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED32098;
  re::AssetHandle::~AssetHandle((re::QuaternionFAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED32098;
  re::AssetHandle::~AssetHandle((re::QuaternionFAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::QuaternionFAnimationClipAssetData::clone(re::QuaternionFAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED32010;
  return result;
}

uint64_t re::QuaternionFAnimationClipAssetData::typeInfo(re::QuaternionFAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::QuaternionFAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Quaternion<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<re::Quaternion<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32098;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED32160;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::SRTAnimationClipAssetData::~SRTAnimationClipAssetData(re::SRTAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED32160;
  re::AssetHandle::~AssetHandle((re::SRTAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED32160;
  re::AssetHandle::~AssetHandle((re::SRTAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SRTAnimationClipAssetData::clone(re::SRTAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED320D8;
  return result;
}

uint64_t re::SRTAnimationClipAssetData::typeInfo(re::SRTAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SRTAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::GenericSRT<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<re::GenericSRT<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32160;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED32228;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::SkeletalPoseAnimationClipAssetData::~SkeletalPoseAnimationClipAssetData(re::SkeletalPoseAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED32228;
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED32228;
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SkeletalPoseAnimationClipAssetData::clone(re::SkeletalPoseAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED321A0;
  return result;
}

uint64_t re::SkeletalPoseAnimationClipAssetData::typeInfo(re::SkeletalPoseAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::SkeletalPoseAssetData>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<re::SkeletalPoseAssetData>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32228;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(uint64_t a1, int a2)
{
  re::DynamicString *v3;

  *(_QWORD *)a1 = off_24ED36578;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  v3 = (re::DynamicString *)(a1 + 40);
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_24ED322F0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_BYTE *)(a1 + 180) = 0;
  return a1;
}

void re::BlendShapeWeightsAnimationClipAssetData::~BlendShapeWeightsAnimationClipAssetData(re::BlendShapeWeightsAnimationClipAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED322F0;
  re::AssetHandle::~AssetHandle((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED322F0;
  re::AssetHandle::~AssetHandle((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::BlendShapeWeightsAnimationClipAssetData::clone(re::BlendShapeWeightsAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 184, 8);
  result = (_QWORD *)re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(v4, (uint64_t)this);
  *result = off_24ED32268;
  return result;
}

uint64_t re::BlendShapeWeightsAnimationClipAssetData::typeInfo(re::BlendShapeWeightsAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationClipAssetData>, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

_QWORD *re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED322F0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 80), (const re::AssetHandle *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_BYTE *)(a1 + 104) = v5;
  if (v5)
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 120) = v6;
  if (v6)
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  v8 = *(unsigned __int8 *)(a2 + 160);
  *(_BYTE *)(a1 + 160) = v8;
  if (v8)
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v9 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

void re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 8uLL, 4uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionOptional<float>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<float>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<float>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<float>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<float>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<float>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 4;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  int v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void re::FloatAnimationAssetData::~FloatAnimationAssetData(re::FloatAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<float>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FloatAnimationAssetData::clone(re::FloatAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 120, 8);
  result = (_QWORD *)re::FromToByAnimationAssetData<float>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *result = &off_24ED364A0;
  return result;
}

uint64_t re::FloatAnimationAssetData::typeInfo(re::FloatAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FloatAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<float>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36538;
  v2 = *(void (****)(_QWORD))(a1 + 112);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<float>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED36538;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  re::FromToByAnimationAssetData<float>::operator=(a1, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<float>::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v3 = *(unsigned __int8 *)(a2 + 88);
  if (*(_BYTE *)(a1 + 88))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 88))
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      *(_BYTE *)(a1 + 88) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 88))
        v6 = 1;
      else
        v6 = v3 == 0;
      if (!v6)
        *(_BYTE *)(a1 + 88) = 1;
      *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    }
  }
  v7 = *(unsigned __int8 *)(a2 + 96);
  if (*(_BYTE *)(a1 + 96))
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    if (*(_BYTE *)(a1 + 96))
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
      *(_BYTE *)(a1 + 96) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 96) && *(_BYTE *)(a2 + 96))
        *(_BYTE *)(a1 + 96) = 1;
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    }
  }
  if (*(_BYTE *)(a1 + 104))
    v10 = 0;
  else
    v10 = *(_BYTE *)(a2 + 104) == 0;
  if (!v10)
  {
    if (!*(_BYTE *)(a1 + 104) || *(_BYTE *)(a2 + 104))
    {
      if (!*(_BYTE *)(a1 + 104) && *(_BYTE *)(a2 + 104))
        *(_BYTE *)(a1 + 104) = 1;
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 0;
    }
  }
  v11 = *(_QWORD *)(a2 + 112);
  if (v11)
  {
  }
  return a1;
}

void re::DoubleAnimationAssetData::~DoubleAnimationAssetData(re::DoubleAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<double>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DoubleAnimationAssetData::clone(re::DoubleAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 144, 8);
  result = (_QWORD *)re::FromToByAnimationAssetData<double>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *result = &off_24ED323B0;
  return result;
}

uint64_t re::DoubleAnimationAssetData::typeInfo(re::DoubleAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DoubleAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<double>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED32420;
  v2 = *(void (****)(_QWORD))(a1 + 136);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<double>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32420;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  re::FromToByAnimationAssetData<double>::operator=(a1, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<double>::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v3 = *(unsigned __int8 *)(a2 + 88);
  if (*(_BYTE *)(a1 + 88))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 88))
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      *(_BYTE *)(a1 + 88) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 88))
        v6 = 1;
      else
        v6 = v3 == 0;
      if (!v6)
        *(_BYTE *)(a1 + 88) = 1;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    }
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  if (*(_BYTE *)(a1 + 104))
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    if (*(_BYTE *)(a1 + 104))
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
      *(_BYTE *)(a1 + 104) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 104) && *(_BYTE *)(a2 + 104))
        *(_BYTE *)(a1 + 104) = 1;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    }
  }
  if (*(_BYTE *)(a1 + 120))
    v10 = 0;
  else
    v10 = *(_BYTE *)(a2 + 120) == 0;
  if (!v10)
  {
    if (!*(_BYTE *)(a1 + 120) || *(_BYTE *)(a2 + 120))
    {
      if (!*(_BYTE *)(a1 + 120) && *(_BYTE *)(a2 + 120))
        *(_BYTE *)(a1 + 120) = 1;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
    }
  }
  v11 = *(_QWORD *)(a2 + 136);
  if (v11)
  {
  }
  return a1;
}

_QWORD *re::IntrospectionOptional<re::Vector2<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Vector2<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::Vector2<float>>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Vector2<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Vector2<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Vector2<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void re::Vector2FAnimationAssetData::~Vector2FAnimationAssetData(re::Vector2FAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Vector2<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector2FAnimationAssetData::clone(re::Vector2FAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 144, 8);
  result = (_QWORD *)re::FromToByAnimationAssetData<re::Vector2<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *result = &off_24ED324E0;
  return result;
}

uint64_t re::Vector2FAnimationAssetData::typeInfo(re::Vector2FAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector2FAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Vector2<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED32550;
  v2 = *(void (****)(_QWORD))(a1 + 136);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector2<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32550;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  re::FromToByAnimationAssetData<re::Vector2<float>>::operator=(a1, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector2<float>>::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v3 = *(unsigned __int8 *)(a2 + 88);
  if (*(_BYTE *)(a1 + 88))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 88))
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      *(_BYTE *)(a1 + 88) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 88))
        v6 = 1;
      else
        v6 = v3 == 0;
      if (!v6)
        *(_BYTE *)(a1 + 88) = 1;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    }
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  if (*(_BYTE *)(a1 + 104))
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    if (*(_BYTE *)(a1 + 104))
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
      *(_BYTE *)(a1 + 104) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 104) && *(_BYTE *)(a2 + 104))
        *(_BYTE *)(a1 + 104) = 1;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    }
  }
  if (*(_BYTE *)(a1 + 120))
    v10 = 0;
  else
    v10 = *(_BYTE *)(a2 + 120) == 0;
  if (!v10)
  {
    if (!*(_BYTE *)(a1 + 120) || *(_BYTE *)(a2 + 120))
    {
      if (!*(_BYTE *)(a1 + 120) && *(_BYTE *)(a2 + 120))
        *(_BYTE *)(a1 + 120) = 1;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
    }
  }
  v11 = *(_QWORD *)(a2 + 136);
  if (v11)
  {
  }
  return a1;
}

void re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 0x20uLL, 0x10uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionOptional<re::Vector3<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Vector3<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::Vector3<float>>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Vector3<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Vector3<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Vector3<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 16;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  if (a2)
  {
    v3 = *a2;
    if (*(_BYTE *)result)
    {
      v2 = *a2;
    }
    else
    {
      *(_BYTE *)result = 1;
      v2 = v3;
    }
    *(_OWORD *)(result + 16) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void re::Vector3FAnimationAssetData::~Vector3FAnimationAssetData(re::Vector3FAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Vector3<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector3FAnimationAssetData::clone(re::Vector3FAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 208, 16);
  result = (_QWORD *)re::FromToByAnimationAssetData<re::Vector3<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *result = &off_24ED32610;
  return result;
}

uint64_t re::Vector3FAnimationAssetData::typeInfo(re::Vector3FAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector3FAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Vector3<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED32680;
  v2 = *(void (****)(_QWORD))(a1 + 192);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector3<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32680;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(a1, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v3 = *(unsigned __int8 *)(a2 + 96);
  if (*(_BYTE *)(a1 + 96))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 96))
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      *(_BYTE *)(a1 + 96) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 96))
        v6 = 1;
      else
        v6 = v3 == 0;
      if (!v6)
        *(_BYTE *)(a1 + 96) = 1;
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    }
  }
  v7 = *(unsigned __int8 *)(a2 + 128);
  if (*(_BYTE *)(a1 + 128))
    v8 = 0;
  else
    v8 = v7 == 0;
  if (!v8)
  {
    if (*(_BYTE *)(a1 + 128))
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
      *(_BYTE *)(a1 + 128) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 128) && *(_BYTE *)(a2 + 128))
        *(_BYTE *)(a1 + 128) = 1;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    }
  }
  if (*(_BYTE *)(a1 + 160))
    v10 = 0;
  else
    v10 = *(_BYTE *)(a2 + 160) == 0;
  if (!v10)
  {
    if (!*(_BYTE *)(a1 + 160) || *(_BYTE *)(a2 + 160))
    {
      if (!*(_BYTE *)(a1 + 160) && *(_BYTE *)(a2 + 160))
        *(_BYTE *)(a1 + 160) = 1;
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    }
    else
    {
      *(_BYTE *)(a1 + 160) = 0;
    }
  }
  v11 = *(_QWORD *)(a2 + 192);
  if (v11)
  {
  }
  return a1;
}

_QWORD *re::IntrospectionOptional<re::Vector4<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Vector4<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::Vector4<float>>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Vector4<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Vector4<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Vector4<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 16;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  if (a2)
  {
    v3 = *a2;
    if (*(_BYTE *)result)
    {
      v2 = *a2;
    }
    else
    {
      *(_BYTE *)result = 1;
      v2 = v3;
    }
    *(_OWORD *)(result + 16) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void re::Vector4FAnimationAssetData::~Vector4FAnimationAssetData(re::Vector4FAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Vector4<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector4FAnimationAssetData::clone(re::Vector4FAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 208, 16);
  result = (_QWORD *)re::FromToByAnimationAssetData<re::Vector4<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *result = &off_24ED32740;
  return result;
}

uint64_t re::Vector4FAnimationAssetData::typeInfo(re::Vector4FAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector4FAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Vector4<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED327B0;
  v2 = *(void (****)(_QWORD))(a1 + 192);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector4<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED327B0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(a1, a2);
  return a1;
}

_QWORD *re::IntrospectionOptional<re::Quaternion<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Quaternion<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::Quaternion<float>>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Quaternion<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Quaternion<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 16) = xmmword_2260E5D70;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Quaternion<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 16;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  if (a2)
  {
    v3 = *a2;
    if (*(_BYTE *)result)
    {
      v2 = *a2;
    }
    else
    {
      *(_BYTE *)result = 1;
      v2 = v3;
    }
    *(_OWORD *)(result + 16) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void re::QuaternionFAnimationAssetData::~QuaternionFAnimationAssetData(re::QuaternionFAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Quaternion<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::QuaternionFAnimationAssetData::clone(re::QuaternionFAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 208, 16);
  result = (_QWORD *)re::FromToByAnimationAssetData<re::Quaternion<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *result = &off_24ED32870;
  return result;
}

uint64_t re::QuaternionFAnimationAssetData::typeInfo(re::QuaternionFAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::QuaternionFAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Quaternion<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED328E0;
  v2 = *(void (****)(_QWORD))(a1 + 192);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Quaternion<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED328E0;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(a1, a2);
  return a1;
}

_QWORD *re::IntrospectionOptional<re::GenericSRT<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::GenericSRT<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::GenericSRT<float>>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::GenericSRT<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::GenericSRT<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 16) = 0x3F8000003F800000;
    *(_QWORD *)(a2 + 24) = 1065353216;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0x3F80000000000000;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::GenericSRT<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 16;
  if (!v2)
    return 0;
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, __int128 *a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a2)
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v2 = (_OWORD *)(a1 + 16);
    if (*(_BYTE *)a1)
    {
      v3 = *a2;
      v4 = a2[2];
      *(_OWORD *)(a1 + 32) = a2[1];
      *(_OWORD *)(a1 + 48) = v4;
      *v2 = v3;
    }
    else
    {
      *(_BYTE *)a1 = 1;
      *v2 = v6;
      *(_OWORD *)(a1 + 32) = v7;
      *(_QWORD *)&v3 = v8;
      *(_OWORD *)(a1 + 48) = v8;
    }
  }
  else if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
  }
  return *(double *)&v3;
}

void re::SRTAnimationAssetData::~SRTAnimationAssetData(re::SRTAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SRTAnimationAssetData::clone(re::SRTAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 304, 16);
  result = (_QWORD *)re::FromToByAnimationAssetData<re::GenericSRT<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *result = &off_24ED329A0;
  return result;
}

uint64_t re::SRTAnimationAssetData::typeInfo(re::SRTAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SRTAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED32A10;
  v2 = *(void (****)(_QWORD))(a1 + 288);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::GenericSRT<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32A10;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  re::FromToByAnimationAssetData<re::GenericSRT<float>>::operator=(a1, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::GenericSRT<float>>::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  __int128 v7;
  __int128 v8;
  int v9;
  BOOL v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v3 = *(unsigned __int8 *)(a2 + 96);
  if (*(_BYTE *)(a1 + 96))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 96))
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      *(_BYTE *)(a1 + 96) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 96))
        v6 = 1;
      else
        v6 = v3 == 0;
      if (!v6)
        *(_BYTE *)(a1 + 96) = 1;
      v7 = *(_OWORD *)(a2 + 112);
      v8 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v8;
      *(_OWORD *)(a1 + 112) = v7;
    }
  }
  v9 = *(unsigned __int8 *)(a2 + 160);
  if (*(_BYTE *)(a1 + 160))
    v10 = 0;
  else
    v10 = v9 == 0;
  if (!v10)
  {
    if (*(_BYTE *)(a1 + 160))
      v11 = v9 == 0;
    else
      v11 = 0;
    if (v11)
    {
      *(_BYTE *)(a1 + 160) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 160) && *(_BYTE *)(a2 + 160))
        *(_BYTE *)(a1 + 160) = 1;
      v12 = *(_OWORD *)(a2 + 176);
      v13 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v13;
      *(_OWORD *)(a1 + 176) = v12;
    }
  }
  if (*(_BYTE *)(a1 + 224))
    v14 = 0;
  else
    v14 = *(_BYTE *)(a2 + 224) == 0;
  if (!v14)
  {
    if (!*(_BYTE *)(a1 + 224) || *(_BYTE *)(a2 + 224))
    {
      if (!*(_BYTE *)(a1 + 224) && *(_BYTE *)(a2 + 224))
        *(_BYTE *)(a1 + 224) = 1;
      v15 = *(_OWORD *)(a2 + 240);
      v16 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v16;
      *(_OWORD *)(a1 + 240) = v15;
    }
    else
    {
      *(_BYTE *)(a1 + 224) = 0;
    }
  }
  v17 = *(_QWORD *)(a2 + 288);
  if (v17)
  {
  }
  return a1;
}

_QWORD *re::IntrospectionOptional<re::SkeletalPoseAssetData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::SkeletalPoseAssetData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::SkeletalPoseAssetData>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::SkeletalPoseAssetData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

unsigned __int8 *re::IntrospectionOptional<re::SkeletalPoseAssetData>::setHasValue(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *result;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    LOBYTE(v4) = 1;
    v6 = 0;
    v7 = 0;
    v5 = 0;
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = re::Optional<re::SkeletalPoseAssetData>::operator=(a2, &v4);
  if ((_BYTE)v4)
  {
    result = v5;
    if (v5)
    {
      if (v6)
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 40))();
    }
  }
  return result;
}

uint64_t re::IntrospectionOptional<re::SkeletalPoseAssetData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::Optional<re::SkeletalPoseAssetData>::operator=(unsigned __int8 *a1, uint64_t *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *(unsigned __int8 *)a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      v9 = *((_QWORD *)a1 + 1);
      if (v9)
      {
        if (*((_QWORD *)a1 + 2))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)a1 + 3));
          *((_QWORD *)a1 + 2) = 0;
          *((_QWORD *)a1 + 3) = 0;
        }
        *((_QWORD *)a1 + 1) = 0;
      }
      *a1 = 0;
    }
    else
    {
      v7 = (uint64_t *)(a1 + 8);
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::FixedArray<float>::operator=(v7, a2 + 1);
      }
      else
      {
        *a1 = 1;
        *((_QWORD *)a1 + 2) = 0;
        *((_QWORD *)a1 + 3) = 0;
        *v7 = 0;
        v10 = a2[2];
        *((_QWORD *)a1 + 1) = a2[1];
        *((_QWORD *)a1 + 2) = v10;
        a2[1] = 0;
        a2[2] = 0;
        v11 = *((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 3) = a2[3];
        a2[3] = v11;
      }
    }
  }
  return a1;
}

uint64_t re::Optional<re::SkeletalPoseAssetData>::~Optional(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  return a1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  _QWORD v5[2];

  if (a2)
  {
    LOBYTE(v4) = 1;
    re::FixedArray<re::GenericSRT<float>>::FixedArray(v5, a2);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = re::Optional<re::SkeletalPoseAssetData>::operator=(a1, &v4);
  if ((_BYTE)v4)
  {
    result = (unsigned __int8 *)v5[0];
    if (v5[0])
    {
      if (v5[1])
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)v5[0] + 40))();
    }
  }
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::StringID>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::StringID>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::StringID>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::StringID>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::StringID>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::StringID>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::StringID>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::StringID>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::StringID>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::StringID>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  re::DynamicArray<re::StringID>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)this + 2) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::StringID>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::StringID>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

void re::DynamicArray<re::StringID>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 16 * a2;
    v9 = a2;
    do
    {
      re::StringID::destroyString((re::StringID *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 16;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 16 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = &str_110;
        v6 += 16;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::StringID>::clear(a2);
  }
  else
  {
    re::DynamicArray<re::StringID>::deinit(a2);
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicArray<re::StringID>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
    {
      v11 = *(char **)(a2 + 32);
      v12 = 16 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 16 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

re::SkeletalPoseAnimationAssetData *re::SkeletalPoseAnimationAssetData::SkeletalPoseAnimationAssetData(re::SkeletalPoseAnimationAssetData *this)
{
  re::DynamicString *v2;

  *(_QWORD *)this = off_24ED36578;
  *((_QWORD *)this + 1) = 18;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &str_110;
  v2 = (re::SkeletalPoseAnimationAssetData *)((char *)this + 40);
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_QWORD *)this = &off_24ED32B68;
  *((_QWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 80) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  return this;
}

void re::SkeletalPoseAnimationAssetData::~SkeletalPoseAnimationAssetData(re::SkeletalPoseAnimationAssetData *this)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 296);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 256);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 216);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationAssetData *)((char *)this + 192));
  re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData((uint64_t)this);
}

{
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 296);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 256);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 216);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationAssetData *)((char *)this + 192));
  re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SkeletalPoseAnimationAssetData::clone(re::SkeletalPoseAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 336, 8);
  v5 = (_QWORD *)re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *v5 = &off_24ED32B68;
  v6 = (uint64_t)(v5 + 27);
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v5 + 24), (re::SkeletalPoseAnimationAssetData *)((char *)this + 192));
  re::DynamicArray<re::StringID>::DynamicArray(v6, (uint64_t *)this + 27);
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 256, (uint64_t *)this + 32);
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 296, (uint64_t *)this + 37);
  return v4;
}

uint64_t re::SkeletalPoseAnimationAssetData::typeInfo(re::SkeletalPoseAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationAssetData>, 0);
}

re::AssetHandle *re::SkeletalPoseAnimationAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 192));
}

_QWORD *re::SkeletalPoseAnimationAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 192;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED32BD8;
  v2 = *(void (****)(_QWORD))(a1 + 184);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  re::Optional<re::SkeletalPoseAssetData>::~Optional(a1 + 152);
  re::Optional<re::SkeletalPoseAssetData>::~Optional(a1 + 120);
  re::Optional<re::SkeletalPoseAssetData>::~Optional(a1 + 88);
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32BD8;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::operator=(a1, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(a1 + 88), (unsigned __int8 *)(a2 + 88));
  re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(a1 + 120), (unsigned __int8 *)(a2 + 120));
  v4 = re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)(a1 + 152), (unsigned __int8 *)(a2 + 152));
  v5 = *(_QWORD *)(a2 + 184);
  if (v5)
  {
  }
  return a1;
}

unsigned __int8 *re::Optional<re::SkeletalPoseAssetData>::operator=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      v9 = *((_QWORD *)a1 + 1);
      if (v9)
      {
        if (*((_QWORD *)a1 + 2))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)a1 + 3));
          *((_QWORD *)a1 + 2) = 0;
          *((_QWORD *)a1 + 3) = 0;
        }
        *((_QWORD *)a1 + 1) = 0;
      }
      *a1 = 0;
    }
    else
    {
      v7 = a1 + 8;
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::FixedArray<re::GenericSRT<float>>::operator=(v7, (uint64_t)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v7, (uint64_t)(a2 + 8));
      }
    }
  }
  return a1;
}

_QWORD *re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

unsigned __int8 *re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::setHasValue(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *result;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    LOBYTE(v4) = 1;
    v6 = 0;
    v7 = 0;
    v5 = 0;
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = re::Optional<re::SkeletalPoseAssetData>::operator=(a2, &v4);
  if ((_BYTE)v4)
  {
    result = v5;
    if (v5)
    {
      if (v6)
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 40))();
    }
  }
  return result;
}

uint64_t re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v4;
  uint64_t v5[2];

  if (a2)
  {
    LOBYTE(v4) = 1;
    re::FixedArray<float>::FixedArray(v5, a2);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = re::Optional<re::SkeletalPoseAssetData>::operator=(a1, &v4);
  if ((_BYTE)v4)
  {
    result = (unsigned __int8 *)v5[0];
    if (v5[0])
    {
      if (v5[1])
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)v5[0] + 40))();
    }
  }
  return result;
}

void re::BlendShapeWeightsAnimationAssetData::~BlendShapeWeightsAnimationAssetData(re::BlendShapeWeightsAnimationAssetData *this)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 272);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 232);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 192);
  re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData((uint64_t)this);
}

{
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 272);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 232);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 192);
  re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::BlendShapeWeightsAnimationAssetData::clone(re::BlendShapeWeightsAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 312, 8);
  v5 = (_QWORD *)re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *v5 = &off_24ED32C98;
  v6 = (uint64_t)(v5 + 29);
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)(v5 + 24), (uint64_t *)this + 24);
  re::DynamicArray<re::StringID>::DynamicArray(v6, (uint64_t *)this + 29);
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 272, (uint64_t *)this + 34);
  return v4;
}

uint64_t re::BlendShapeWeightsAnimationAssetData::typeInfo(re::BlendShapeWeightsAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BlendShapeWeightsAnimationAssetData>, 0);
}

uint64_t re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED32D08;
  v2 = *(void (****)(_QWORD))(a1 + 184);
  if (v2)
  {
    v3 = re::globalAllocators((re *)a1)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  re::Optional<re::SkeletalPoseAssetData>::~Optional(a1 + 152);
  re::Optional<re::SkeletalPoseAssetData>::~Optional(a1 + 120);
  re::Optional<re::SkeletalPoseAssetData>::~Optional(a1 + 88);
  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED32D08;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::operator=(a1, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  re::Optional<re::BlendShapeWeightsAssetData>::operator=((unsigned __int8 *)(a1 + 88), (unsigned __int8 *)(a2 + 88));
  re::Optional<re::BlendShapeWeightsAssetData>::operator=((unsigned __int8 *)(a1 + 120), (unsigned __int8 *)(a2 + 120));
  v4 = re::Optional<re::BlendShapeWeightsAssetData>::operator=((unsigned __int8 *)(a1 + 152), (unsigned __int8 *)(a2 + 152));
  v5 = *(_QWORD *)(a2 + 184);
  if (v5)
  {
  }
  return a1;
}

unsigned __int8 *re::Optional<re::BlendShapeWeightsAssetData>::operator=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      v9 = *((_QWORD *)a1 + 1);
      if (v9)
      {
        if (*((_QWORD *)a1 + 2))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)a1 + 3));
          *((_QWORD *)a1 + 2) = 0;
          *((_QWORD *)a1 + 3) = 0;
        }
        *((_QWORD *)a1 + 1) = 0;
      }
      *a1 = 0;
    }
    else
    {
      v7 = (uint64_t *)(a1 + 8);
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::FixedArray<float>::operator=(v7, (uint64_t)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        re::FixedArray<float>::FixedArray(v7, (uint64_t)(a2 + 8));
      }
    }
  }
  return a1;
}

void re::FloatKeyframeAnimationAssetData::~FloatKeyframeAnimationAssetData(re::FloatKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED32DB8;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED32DB8;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::FloatKeyframeAnimationAssetData::clone(re::FloatKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::FloatKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED32DB8;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<float>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED32D48;
  return v4;
}

uint64_t re::FloatKeyframeAnimationAssetData::typeInfo(re::FloatKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE310, 0);
}

void re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<double>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<double>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<double>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<double>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<double>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<float *>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<double>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<double>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<double>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  re::DynamicArray<double>::add(this, (double *)&v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 8 * *((_QWORD *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<double>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<double>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

void re::DynamicArray<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<float *>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 8 * v4);
      v6 = 8 * a2 - 8 * v4;
      if (v6 >= 1)
        bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<float *>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  v9 = *(_QWORD *)a2;
  if (*(re::Allocator **)a2 == a4)
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (v9)
    {
      if (*(_QWORD *)(a2 + 32))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)a2 = a4;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a2, a5);
  }
  ++*(_DWORD *)(a2 + 24);
  re::DynamicArray<double>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(char **)(a2 + 32);
      v13 = 8 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a4, 0);
        v12 += 8;
        v13 -= 8;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::DoubleKeyframeAnimationAssetData::~DoubleKeyframeAnimationAssetData(re::DoubleKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED32F00;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED32F00;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::DoubleKeyframeAnimationAssetData::clone(re::DoubleKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::DoubleKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED32F00;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<char const*>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED32E90;
  return v4;
}

uint64_t re::DoubleKeyframeAnimationAssetData::typeInfo(re::DoubleKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE328, 0);
}

void re::Vector2FKeyframeAnimationAssetData::~Vector2FKeyframeAnimationAssetData(re::Vector2FKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED32FB0;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED32FB0;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::Vector2FKeyframeAnimationAssetData::clone(re::Vector2FKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::Vector2FKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED32FB0;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<unsigned long>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED32F40;
  return v4;
}

uint64_t re::Vector2FKeyframeAnimationAssetData::typeInfo(re::Vector2FKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE340, 0);
}

void re::Vector3FKeyframeAnimationAssetData::~Vector3FKeyframeAnimationAssetData(re::Vector3FKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED33060;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED33060;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::Vector3FKeyframeAnimationAssetData::clone(re::Vector3FKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::Vector3FKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED33060;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::Vector3<float>>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED32FF0;
  return v4;
}

uint64_t re::Vector3FKeyframeAnimationAssetData::typeInfo(re::Vector3FKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE358, 0);
}

uint64_t re::DynamicArray<re::Vector3<float>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Quaternion<float>>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void re::Vector4FKeyframeAnimationAssetData::~Vector4FKeyframeAnimationAssetData(re::Vector4FKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED33110;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED33110;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::Vector4FKeyframeAnimationAssetData::clone(re::Vector4FKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::Vector4FKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED33110;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::Vector4<float>>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED330A0;
  return v4;
}

uint64_t re::Vector4FKeyframeAnimationAssetData::typeInfo(re::Vector4FKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE370, 0);
}

void re::QuaternionFKeyframeAnimationAssetData::~QuaternionFKeyframeAnimationAssetData(re::QuaternionFKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED331C0;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED331C0;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::QuaternionFKeyframeAnimationAssetData::clone(re::QuaternionFKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::QuaternionFKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED331C0;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::Vector3<float>>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED33150;
  return v4;
}

uint64_t re::QuaternionFKeyframeAnimationAssetData::typeInfo(re::QuaternionFKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE388, 0);
}

_QWORD *re::IntrospectionDynamicArray<re::GenericSRT<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::GenericSRT<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::GenericSRT<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::GenericSRT<float>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::GenericSRT<float>>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::GenericSRT<float>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::GenericSRT<float>>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::GenericSRT<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _QWORD v10[6];

  v10[0] = 0x3F8000003F800000;
  v10[1] = 1065353216;
  v10[2] = 0;
  v10[3] = 0x3F80000000000000;
  v10[4] = 0;
  v10[5] = 0;
  re::DynamicArray<re::Matrix3x3<float>>::add(this, (uint64_t)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 48 * *((_QWORD *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::GenericSRT<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::GenericSRT<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

_QWORD *re::DynamicArray<re::GenericSRT<float>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = (_QWORD *)(v5 + 48 * v4);
      v7 = v5 + 48 * a2 - (_QWORD)v6;
      if (v7 >= 1)
      {
        v8 = v7 / 0x30uLL + 1;
        do
        {
          *v6 = 0x3F8000003F800000;
          v6[1] = 1065353216;
          v6[2] = 0;
          v6[3] = 0x3F80000000000000;
          --v8;
          v6[4] = 0;
          v6[5] = 0;
          v6 += 6;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::GenericSRT<float>>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 48 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 48;
        v12 -= 48;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 48 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::SRTKeyframeAnimationAssetData::~SRTKeyframeAnimationAssetData(re::SRTKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED33308;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_24ED33308;
  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::SRTKeyframeAnimationAssetData::clone(re::SRTKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::SRTKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED33308;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::GenericSRT<float>>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED33298;
  return v4;
}

uint64_t re::SRTKeyframeAnimationAssetData::typeInfo(re::SRTKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE3A0, 0);
}

uint64_t re::DynamicArray<re::GenericSRT<float>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Matrix3x3<float>>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  re::IntrospectionBase *v17;

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = (_QWORD *)(*(_QWORD *)(a4 + 32) + 24 * v9);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v16 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  v17 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 24 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 24 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          v12 = v8[1];
          *v11 = *v8;
          v11[1] = v12;
          *v8 = 0;
          v8[1] = 0;
          v13 = v11[2];
          v11[2] = v8[2];
          v8[2] = v13;
          if (*v8)
            *v8 = 0;
          v8 += 3;
          v11 += 3;
          v10 -= 24;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::SkeletalPoseAssetData>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 24 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      result = *(_QWORD **)(v10 + v8);
      if (result)
      {
        if (*(_QWORD *)(v10 + v8 + 8))
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)(v10 + v8 + 16));
          *(_QWORD *)(v10 + v8 + 8) = 0;
          *(_QWORD *)(v10 + v8 + 16) = 0;
          v4 = v3[2];
        }
        *(_QWORD *)(v10 + v8) = 0;
      }
      ++v9;
      v8 += 24;
    }
    while (v9 < v4);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = (_QWORD *)(v3[4] + v6);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 24 * v8;
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      do
      {
        v11 = *(v10 - 1);
        if (v11)
        {
          if (*v10)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v10[1]);
            *v10 = 0;
            v10[1] = 0;
          }
          *(v10 - 1) = 0;
        }
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 24 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 24;
        v15 -= 24;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

re::SkeletalPoseKeyframeAnimationAssetData *re::SkeletalPoseKeyframeAnimationAssetData::SkeletalPoseKeyframeAnimationAssetData(re::SkeletalPoseKeyframeAnimationAssetData *this)
{
  re::DynamicString *v2;

  *(_QWORD *)this = off_24ED36578;
  *((_QWORD *)this + 1) = 26;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &str_110;
  v2 = (re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 40);
  *((_WORD *)this + 36) = 256;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_QWORD *)this = off_24ED333E0;
  *((_QWORD *)this + 27) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 0;
  return this;
}

void re::SkeletalPoseKeyframeAnimationAssetData::~SkeletalPoseKeyframeAnimationAssetData(re::SkeletalPoseKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  uint64_t v3;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 160));
  *(_QWORD *)this = off_24ED33450;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 160));
  *(_QWORD *)this = off_24ED33450;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::SkeletalPoseKeyframeAnimationAssetData::clone(re::SkeletalPoseKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 224, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED33450;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::SkeletalPoseAssetData>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED333E0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 160), (re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 160));
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 184, (uint64_t *)this + 23);
  return v4;
}

uint64_t re::SkeletalPoseKeyframeAnimationAssetData::typeInfo(re::SkeletalPoseKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE3B8, 0);
}

re::AssetHandle *re::SkeletalPoseKeyframeAnimationAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 160));
}

_QWORD *re::SkeletalPoseKeyframeAnimationAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 160;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::DynamicArray<re::SkeletalPoseAssetData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SkeletalPoseAssetData>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

_QWORD *re::DynamicArray<re::SkeletalPoseAssetData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (_QWORD *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 3 * v9;
      v11 = *(_QWORD *)(a2 + 32) + 8 * v10;
      result = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10);
      v12 = 24 * v4 - 8 * v10;
      do
      {
        v13 = re::FixedArray<re::GenericSRT<float>>::FixedArray(result, v11);
        v11 += 24;
        result = v13 + 3;
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    result = (_QWORD *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * v4, *(_QWORD **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = 24 * v6 - 24 * v4;
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 24 * v4 + 8);
      do
      {
        result = (_QWORD *)*(v8 - 1);
        if (result)
        {
          if (*v8)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, v8[1]);
            *v8 = 0;
            v8[1] = 0;
          }
          *(v8 - 1) = 0;
        }
        v8 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<re::GenericSRT<float>>::operator=(a3, v4);
      v4 += 24;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  re::IntrospectionBase *v11;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::BlendShapeWeightsAssetData>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = (_QWORD *)(*((_QWORD *)this + 4) + 24 * v8);
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  v11 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 24 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::DynamicArray<re::BlendShapeWeightsAssetData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 24 * v8;
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      do
      {
        v11 = *(v10 - 1);
        if (v11)
        {
          if (*v10)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v10[1]);
            *v10 = 0;
            v10[1] = 0;
          }
          *(v10 - 1) = 0;
        }
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 24 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 24;
        v15 -= 24;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::BlendShapeWeightsKeyframeAnimationAssetData::~BlendShapeWeightsKeyframeAnimationAssetData(re::BlendShapeWeightsKeyframeAnimationAssetData *this)
{
  uint64_t v2;
  uint64_t v3;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160);
  *(_QWORD *)this = off_24ED33598;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160);
  *(_QWORD *)this = off_24ED33598;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  *(_QWORD *)this = off_24ED36578;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::BlendShapeWeightsKeyframeAnimationAssetData::clone(re::BlendShapeWeightsKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 200, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::BlendShapeWeightsKeyframeAnimationAssetData *)((char *)this + 40));
  *(_WORD *)(v4 + 72) = *((_WORD *)this + 36);
  *(_QWORD *)v4 = off_24ED33598;
  re::DynamicArray<float>::DynamicArray(v4 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::BlendShapeWeightsAssetData>::DynamicArray(v4 + 120, (uint64_t *)this + 15);
  *(_QWORD *)v4 = off_24ED33528;
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 160, (uint64_t *)this + 20);
  return v4;
}

uint64_t re::BlendShapeWeightsKeyframeAnimationAssetData::typeInfo(re::BlendShapeWeightsKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_2540FE3D0, 0);
}

uint64_t re::DynamicArray<re::BlendShapeWeightsAssetData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::BlendShapeWeightsAssetData>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t *re::DynamicArray<re::BlendShapeWeightsAssetData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * *(_QWORD *)(a1 + 16), *(uint64_t **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 3 * v9;
      v11 = *(_QWORD *)(a2 + 32) + 8 * v10;
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v10);
      v12 = 24 * v4 - 8 * v10;
      do
      {
        v13 = re::FixedArray<float>::FixedArray(result, v11);
        v11 += 24;
        result = v13 + 3;
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * v4, *(uint64_t **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = 24 * v6 - 24 * v4;
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 24 * v4 + 8);
      do
      {
        result = (uint64_t *)*(v8 - 1);
        if (result)
        {
          if (*v8)
          {
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*result + 40))(result, v8[1]);
            *v8 = 0;
            v8[1] = 0;
          }
          *(v8 - 1) = 0;
        }
        v8 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<float>::operator=(a3, v4);
      v4 += 24;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::FloatSampledAnimationAssetData::~FloatSampledAnimationAssetData(re::FloatSampledAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33648;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33648;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FloatSampledAnimationAssetData::clone(re::FloatSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  result = (_QWORD *)re::SampledAnimationAssetData<float>::SampledAnimationAssetData(v4, (uint64_t)this);
  *result = off_24ED335D8;
  return result;
}

uint64_t re::FloatSampledAnimationAssetData::typeInfo(re::FloatSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FloatSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<float>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33648;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<float>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::DoubleSampledAnimationAssetData::~DoubleSampledAnimationAssetData(re::DoubleSampledAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED336F8;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED336F8;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DoubleSampledAnimationAssetData::clone(re::DoubleSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  result = (_QWORD *)re::SampledAnimationAssetData<double>::SampledAnimationAssetData(v4, (uint64_t)this);
  *result = off_24ED33688;
  return result;
}

uint64_t re::DoubleSampledAnimationAssetData::typeInfo(re::DoubleSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DoubleSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<double>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED336F8;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<char const*>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::Vector2FSampledAnimationAssetData::~Vector2FSampledAnimationAssetData(re::Vector2FSampledAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED337A8;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED337A8;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector2FSampledAnimationAssetData::clone(re::Vector2FSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  result = (_QWORD *)re::SampledAnimationAssetData<re::Vector2<float>>::SampledAnimationAssetData(v4, (uint64_t)this);
  *result = off_24ED33738;
  return result;
}

uint64_t re::Vector2FSampledAnimationAssetData::typeInfo(re::Vector2FSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector2FSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<re::Vector2<float>>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED337A8;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<unsigned long>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::Vector3FSampledAnimationAssetData::~Vector3FSampledAnimationAssetData(re::Vector3FSampledAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33858;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33858;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector3FSampledAnimationAssetData::clone(re::Vector3FSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  result = (_QWORD *)re::SampledAnimationAssetData<re::Vector3<float>>::SampledAnimationAssetData(v4, (uint64_t)this);
  *result = off_24ED337E8;
  return result;
}

uint64_t re::Vector3FSampledAnimationAssetData::typeInfo(re::Vector3FSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector3FSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<re::Vector3<float>>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33858;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<re::Vector3<float>>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::Vector4FSampledAnimationAssetData::~Vector4FSampledAnimationAssetData(re::Vector4FSampledAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33908;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33908;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector4FSampledAnimationAssetData::clone(re::Vector4FSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  result = (_QWORD *)re::SampledAnimationAssetData<re::Vector4<float>>::SampledAnimationAssetData(v4, (uint64_t)this);
  *result = off_24ED33898;
  return result;
}

uint64_t re::Vector4FSampledAnimationAssetData::typeInfo(re::Vector4FSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector4FSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<re::Vector4<float>>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33908;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<re::Vector4<float>>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::QuaternionFSampledAnimationAssetData::~QuaternionFSampledAnimationAssetData(re::QuaternionFSampledAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED339B8;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED339B8;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::QuaternionFSampledAnimationAssetData::clone(re::QuaternionFSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  result = (_QWORD *)re::SampledAnimationAssetData<re::Quaternion<float>>::SampledAnimationAssetData(v4, (uint64_t)this);
  *result = off_24ED33948;
  return result;
}

uint64_t re::QuaternionFSampledAnimationAssetData::typeInfo(re::QuaternionFSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::QuaternionFSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<re::Quaternion<float>>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED339B8;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<re::Vector3<float>>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::SRTSampledAnimationAssetData::~SRTSampledAnimationAssetData(re::SRTSampledAnimationAssetData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33A68;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED33A68;
  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  *(_QWORD *)this = off_24ED36578;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SRTSampledAnimationAssetData::clone(re::SRTSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  result = (_QWORD *)re::SampledAnimationAssetData<re::GenericSRT<float>>::SampledAnimationAssetData(v4, (uint64_t)this);
  *result = off_24ED339F8;
  return result;
}

uint64_t re::SRTSampledAnimationAssetData::typeInfo(re::SRTSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SRTSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<re::GenericSRT<float>>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33A68;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<re::GenericSRT<float>>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

re::SkeletalPoseSampledAnimationAssetData *re::SkeletalPoseSampledAnimationAssetData::SkeletalPoseSampledAnimationAssetData(re::SkeletalPoseSampledAnimationAssetData *this)
{
  re::DynamicString *v2;

  *(_QWORD *)this = off_24ED36578;
  *((_QWORD *)this + 1) = 34;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &str_110;
  v2 = (re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 40);
  *((_WORD *)this + 36) = 256;
  *((_DWORD *)this + 19) = 1023969417;
  *((_QWORD *)this + 15) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_QWORD *)this = off_24ED33AA8;
  *((_QWORD *)this + 23) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 0;
  *((_WORD *)this + 96) = 257;
  *((_BYTE *)this + 194) = 1;
  return this;
}

void re::SkeletalPoseSampledAnimationAssetData::~SkeletalPoseSampledAnimationAssetData(re::SkeletalPoseSampledAnimationAssetData *this)
{
  uint64_t v2;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 152);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 128));
  *(_QWORD *)this = off_24ED33B18;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 152);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 128));
  *(_QWORD *)this = off_24ED33B18;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::SkeletalPoseSampledAnimationAssetData::clone(re::SkeletalPoseSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  __int16 v6;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 200, 8);
  v5 = (_QWORD *)re::SampledAnimationAssetData<re::SkeletalPoseAssetData>::SampledAnimationAssetData(v4, (uint64_t)this);
  *v5 = off_24ED33AA8;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v5 + 16), (re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 128));
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 152, (uint64_t *)this + 19);
  v6 = *((_WORD *)this + 96);
  *(_BYTE *)(v4 + 194) = *((_BYTE *)this + 194);
  *(_WORD *)(v4 + 192) = v6;
  return v4;
}

uint64_t re::SkeletalPoseSampledAnimationAssetData::typeInfo(re::SkeletalPoseSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletalPoseSampledAnimationAssetData>, 0);
}

re::AssetHandle *re::SkeletalPoseSampledAnimationAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 128));
}

_QWORD *re::SkeletalPoseSampledAnimationAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3;

  v3 = a1 + 128;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::SampledAnimationAssetData<re::SkeletalPoseAssetData>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33B18;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<re::SkeletalPoseAssetData>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::BlendShapeWeightsSampledAnimationAssetData::~BlendShapeWeightsSampledAnimationAssetData(re::BlendShapeWeightsSampledAnimationAssetData *this)
{
  uint64_t v2;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128);
  *(_QWORD *)this = off_24ED33BC8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128);
  *(_QWORD *)this = off_24ED33BC8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::BlendShapeWeightsSampledAnimationAssetData::clone(re::BlendShapeWeightsSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 168, 8);
  v5 = (_QWORD *)re::SampledAnimationAssetData<re::BlendShapeWeightsAssetData>::SampledAnimationAssetData(v4, (uint64_t)this);
  *v5 = off_24ED33B58;
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)(v5 + 16), (uint64_t *)this + 16);
  return v4;
}

uint64_t re::BlendShapeWeightsSampledAnimationAssetData::typeInfo(re::BlendShapeWeightsSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BlendShapeWeightsSampledAnimationAssetData>, 0);
}

uint64_t re::SampledAnimationAssetData<re::BlendShapeWeightsAssetData>::SampledAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33BC8;
  v5 = *(_QWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 73) = v5;
  re::DynamicArray<re::BlendShapeWeightsAssetData>::DynamicArray(a1 + 88, (uint64_t *)(a2 + 88));
  return a1;
}

void re::OrbitAnimationAssetData::~OrbitAnimationAssetData(re::OrbitAnimationAssetData *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED36578;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::OrbitAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED36578;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::OrbitAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::OrbitAnimationAssetData::clone(re::OrbitAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 160, 16);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::OrbitAnimationAssetData *)((char *)this + 40));
  *(_BYTE *)(v4 + 72) = *((_BYTE *)this + 72);
  *(_QWORD *)v4 = off_24ED33C08;
  *(_OWORD *)(v4 + 76) = *(_OWORD *)((char *)this + 76);
  v6 = *(_OWORD *)((char *)this + 92);
  v7 = *(_OWORD *)((char *)this + 108);
  v8 = *(_OWORD *)((char *)this + 124);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(v4 + 124) = v8;
  *(_OWORD *)(v4 + 108) = v7;
  *(_OWORD *)(v4 + 92) = v6;
  return v4;
}

uint64_t re::OrbitAnimationAssetData::typeInfo(re::OrbitAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OrbitAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_OrbitAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_OrbitAnimationAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::OrbitAnimationAssetData>, 0);
}

void re::AnimationStateTimelineAssetData::~AnimationStateTimelineAssetData(re::AnimationStateTimelineAssetData *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED36578;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::AnimationStateTimelineAssetData *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED36578;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::AnimationStateTimelineAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationStateTimelineAssetData::clone(re::AnimationStateTimelineAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 96, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::AnimationStateTimelineAssetData *)((char *)this + 40));
  *(_BYTE *)(v4 + 72) = *((_BYTE *)this + 72);
  *(_QWORD *)v4 = off_24ED33C60;
  *(_OWORD *)(v4 + 80) = *((_OWORD *)this + 5);
  return v4;
}

uint64_t re::AnimationStateTimelineAssetData::typeInfo(re::AnimationStateTimelineAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationStateTimelineAssetData", (uint64_t (*)(re::internal *))re::allocInfo_AnimationStateTimelineAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationStateTimelineAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AnimationStateTimelineAssetData>, 0);
}

void re::FloatAnimationBlendTreeAssetData::~FloatAnimationBlendTreeAssetData(re::FloatAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33D40;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33D40;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FloatAnimationBlendTreeAssetData::clone(re::FloatAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<float>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED33CD0;
  return result;
}

uint64_t re::FloatAnimationBlendTreeAssetData::typeInfo(re::FloatAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FloatAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<float>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<float>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<float>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33D40;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

uint64_t re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *>((uint64_t)&v15, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 88 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = a1[4];
      v12 = 88 * v9;
      v13 = 88 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v11 + v12), (const StringID *)(v10 + v12));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 16), (const StringID *)(v10 + v12 + 16));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 32), (const StringID *)(v10 + v12 + 32));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 48), (const StringID *)(v10 + v12 + 48));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 64), (const StringID *)(v10 + v12 + 64));
        *(_DWORD *)(v11 + v12 + 80) = *(_DWORD *)(v10 + v12 + 80);
        v10 += 88;
        v13 -= 88;
        v11 += 88;
      }
      while (v12 != v13);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *>((uint64_t)&v14, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 88 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4];
      v7 = 88 * v4;
      v8 = 88 * v5;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 64));
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 48));
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 32));
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 16));
        re::StringID::destroyString((re::StringID *)(v6 + v7));
        v6 += 88;
        v8 -= 88;
      }
      while (v7 != v8);
    }
  }
  a1[2] = v4;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 16), (uint64_t *)(a2 + v7 + 16));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 32), (uint64_t *)(a2 + v7 + 32));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 48), (uint64_t *)(a2 + v7 + 48));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 64), (uint64_t *)(a2 + v7 + 64));
    *(_DWORD *)(a4 + v7 + 80) = *(_DWORD *)(a2 + v7 + 80);
    v7 += 88;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::RigGraphConnection>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RigGraphConnection>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::RigGraphConnection>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  char v6;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::RigGraphConnection>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphConnection *,re::RigGraphConnection *,re::RigGraphConnection *>((uint64_t)&v6, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 160 * a1[2], a1[4]);
    re::ObjectHelper::copyConstruct<re::RigGraphConnection>((re::StringID *)(a1[4] + 160 * a1[2]), *(_QWORD *)(a2 + 32) + 160 * a1[2], *(_QWORD *)(a2 + 32) + 160 * v4);
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphConnection *,re::RigGraphConnection *,re::RigGraphConnection *>((uint64_t)&v5, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 160 * v4, a1[4]);
    re::ObjectHelper::destroy<re::RigGraphConnection>(a1[4] + 160 * v4, a1[4] + 160 * a1[2]);
  }
  a1[2] = v4;
}

re::StringID *re::ObjectHelper::copyConstruct<re::RigGraphConnection>(re::StringID *result, uint64_t a2, uint64_t a3)
{
  re::StringID *v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v5 = result;
    v6 = 0;
    do
    {
      re::StringID::StringID((re::StringID *)((char *)v5 + v6), (const StringID *)(a2 + v6));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 16), (const StringID *)(a2 + v6 + 16));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 32), (const StringID *)(a2 + v6 + 32));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 48), (const StringID *)(a2 + v6 + 48));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 64), (const StringID *)(a2 + v6 + 64));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 80), (const StringID *)(a2 + v6 + 80));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 96), (const StringID *)(a2 + v6 + 96));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 112), (const StringID *)(a2 + v6 + 112));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 128), (const StringID *)(a2 + v6 + 128));
      result = re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 144), (const StringID *)(a2 + v6 + 144));
      v6 += 160;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphConnection *,re::RigGraphConnection *,re::RigGraphConnection *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 16), (uint64_t *)(a2 + v7 + 16));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 32), (uint64_t *)(a2 + v7 + 32));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 48), (uint64_t *)(a2 + v7 + 48));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 64), (uint64_t *)(a2 + v7 + 64));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 80), (uint64_t *)(a2 + v7 + 80));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 96), (uint64_t *)(a2 + v7 + 96));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 112), (uint64_t *)(a2 + v7 + 112));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 128), (uint64_t *)(a2 + v7 + 128));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 144), (uint64_t *)(a2 + v7 + 144));
    v7 += 160;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::BlendSpaceAxisDefinition>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::BlendSpaceAxisDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::BlendSpaceAxisDefinition>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::BlendSpaceAxisDefinition>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *>((uint64_t)&v14, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 48 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = 48 * v8;
      v12 = 48 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 16), (const StringID *)(v9 + v11 + 16));
        *(_OWORD *)(v10 + v11 + 32) = *(_OWORD *)(v9 + v11 + 32);
        v9 += 48;
        v12 -= 48;
        v10 += 48;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *>((uint64_t)&v13, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 48 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4] + 48 * v4;
      v7 = 48 * v5 - 48 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v4 = a3;
  v5 = a4 + 16;
  v6 = a2 + 16;
  do
  {
    re::StringID::operator=((unint64_t *)(v5 - 16), (uint64_t *)(v6 - 16));
    re::StringID::operator=((unint64_t *)v5, (uint64_t *)v6);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(v6 + 16);
    v5 += 48;
    v7 = v6 + 32;
    v6 += 48;
  }
  while (v7 != v4);
  return v4;
}

uint64_t re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::BlendSpaceSampleDefinition>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::BlendSpaceSampleDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::BlendSpaceSampleDefinition>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::StringID *v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::BlendSpaceSampleDefinition>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *>((uint64_t)&v16, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + (a1[2] << 6)), a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = a1[4];
      v12 = v9 << 6;
      v13 = v4 << 6;
      do
      {
        v14 = re::StringID::StringID((re::StringID *)(v11 + v12), (const StringID *)(v10 + v12));
        *((_DWORD *)v14 + 4) = *(_DWORD *)(v10 + v12 + 16);
        re::DynamicArray<float>::DynamicArray((uint64_t)v14 + 24, (uint64_t *)(v10 + v12 + 24));
        v10 += 64;
        v13 -= 64;
        v11 += 64;
      }
      while (v12 != v13);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *>((uint64_t)&v15, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + (v4 << 6)), a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4] + (v4 << 6);
      v7 = (v5 << 6) - (v4 << 6);
      do
      {
        v8 = *(_QWORD *)(v6 + 24);
        if (v8)
        {
          if (*(_QWORD *)(v6 + 56))
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
          *(_QWORD *)(v6 + 56) = 0;
          *(_QWORD *)(v6 + 32) = 0;
          *(_QWORD *)(v6 + 40) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          ++*(_DWORD *)(v6 + 48);
        }
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 64;
        v7 -= 64;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a2 == a3)
    return a2;
  v4 = a3;
  v5 = a4 + 24;
  v6 = a2 + 3;
  do
  {
    re::StringID::operator=((unint64_t *)(v5 - 24), v6 - 3);
    *(_DWORD *)(v5 - 8) = *((_DWORD *)v6 - 2);
    re::DynamicArray<float>::operator=(v5, v6);
    v5 += 64;
    v7 = v6 + 5;
    v6 += 8;
  }
  while (v7 != v4);
  return v4;
}

void re::DoubleAnimationBlendTreeAssetData::~DoubleAnimationBlendTreeAssetData(re::DoubleAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33DF0;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33DF0;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DoubleAnimationBlendTreeAssetData::clone(re::DoubleAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<double>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED33D80;
  return result;
}

uint64_t re::DoubleAnimationBlendTreeAssetData::typeInfo(re::DoubleAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DoubleAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<double>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<double>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<double>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33DF0;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::Vector2FAnimationBlendTreeAssetData::~Vector2FAnimationBlendTreeAssetData(re::Vector2FAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33EA0;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33EA0;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector2FAnimationBlendTreeAssetData::clone(re::Vector2FAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<re::Vector2<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED33E30;
  return result;
}

uint64_t re::Vector2FAnimationBlendTreeAssetData::typeInfo(re::Vector2FAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector2FAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<re::Vector2<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<re::Vector2<float>>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Vector2<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33EA0;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::Vector3FAnimationBlendTreeAssetData::~Vector3FAnimationBlendTreeAssetData(re::Vector3FAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33F50;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED33F50;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector3FAnimationBlendTreeAssetData::clone(re::Vector3FAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<re::Vector3<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED33EE0;
  return result;
}

uint64_t re::Vector3FAnimationBlendTreeAssetData::typeInfo(re::Vector3FAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector3FAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<re::Vector3<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<re::Vector3<float>>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Vector3<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED33F50;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::Vector4FAnimationBlendTreeAssetData::~Vector4FAnimationBlendTreeAssetData(re::Vector4FAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED34000;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED34000;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Vector4FAnimationBlendTreeAssetData::clone(re::Vector4FAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<re::Vector4<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED33F90;
  return result;
}

uint64_t re::Vector4FAnimationBlendTreeAssetData::typeInfo(re::Vector4FAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Vector4FAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<re::Vector4<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<re::Vector4<float>>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Vector4<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED34000;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::QuaternionFAnimationBlendTreeAssetData::~QuaternionFAnimationBlendTreeAssetData(re::QuaternionFAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED340B0;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED340B0;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::QuaternionFAnimationBlendTreeAssetData::clone(re::QuaternionFAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<re::Quaternion<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED34040;
  return result;
}

uint64_t re::QuaternionFAnimationBlendTreeAssetData::typeInfo(re::QuaternionFAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::QuaternionFAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<re::Quaternion<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<re::Quaternion<float>>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Quaternion<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED340B0;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::SRTAnimationBlendTreeAssetData::~SRTAnimationBlendTreeAssetData(re::SRTAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED34160;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED34160;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SRTAnimationBlendTreeAssetData::clone(re::SRTAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED340F0;
  return result;
}

uint64_t re::SRTAnimationBlendTreeAssetData::typeInfo(re::SRTAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SRTAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED34160;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::SkeletalPoseAnimationBlendTreeAssetData::~SkeletalPoseAnimationBlendTreeAssetData(re::SkeletalPoseAnimationBlendTreeAssetData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED34228;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED34228;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SkeletalPoseAnimationBlendTreeAssetData::clone(re::SkeletalPoseAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 288, 8);
  result = (_QWORD *)re::AnimationBlendTreeAssetData<re::SkeletalPose>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *result = off_24ED341A0;
  return result;
}

uint64_t re::SkeletalPoseAnimationBlendTreeAssetData::typeInfo(re::SkeletalPoseAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletalPoseAnimationBlendTreeAssetData>, 0);
}

void *re::AnimationBlendTreeAssetData<re::SkeletalPose>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::AssetHandle *v7;
  uint64_t v8;

  v3 = result;
  v4 = *((_QWORD *)result + 33);
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    v4 = *((_QWORD *)v3 + 33);
  }
  if (v4)
  {
    v7 = (re::AssetHandle *)*((_QWORD *)v3 + 35);
    v8 = 24 * v4;
    do
    {
      result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::AnimationBlendTreeAssetData<re::SkeletalPose>::findAssetHandleFields(_QWORD *result, _anonymous_namespace_ *this)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[33];
  v5 = *((_QWORD *)this + 1);
  v6 = v4 + *((_QWORD *)this + 2);
  if (v5 < v6)
  {
    result = re::DynamicArray<float *>::setCapacity(this, v6);
    v4 = v3[33];
  }
  if (v4)
  {
    v7 = v3[35];
    v8 = 24 * v4;
    do
    {
      v9 = v7;
      result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::SkeletalPose>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED36578;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)a1 = off_24ED34228;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(a1 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;

  v10 = 0uLL;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 10;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 40 * v10 + 8, *(_QWORD *)(a2 + 16) + 40 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 40 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

uint64_t re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 40 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 40 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_OWORD *)(v10 + 40 * v9 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 40 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 40 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 40 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 40 * v4 + 24;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 40 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 10;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionFixedArray<unsigned char>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<unsigned char>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<unsigned char>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<unsigned char>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

void re::IntrospectionFixedArray<unsigned char>::init(uint64_t a1, _QWORD *a2, re *a3, int a4, uint64_t a5)
{
  unint64_t v10;

  re::FixedArray<BOOL>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v10 = 0;
    do
    {
      if (a2[1] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10++));
    }
    while (a5 != v10);
  }
}

uint64_t re::IntrospectionFixedArray<unsigned char>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<unsigned char>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<unsigned char>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

unint64_t re::IntrospectionFixedArray<unsigned char>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, uint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  void **v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  re::FixedArray<BOOL>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v10 = a1[1];
    if (v10)
    {
      v11 = (void **)a1[2];
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, v11, a3, 0);
        v11 = (void **)((char *)v11 + 1);
        --v10;
      }
      while (v10);
    }
  }
}

unint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  re::IntrospectionBase *v11;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::FixedArray<unsigned char>>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = (_QWORD *)(*((_QWORD *)this + 4) + 24 * v8);
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  v11 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 24 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::FixedArray<unsigned char>>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

re::EventTimelineAssetData *re::EventTimelineAssetData::EventTimelineAssetData(re::EventTimelineAssetData *this)
{
  re::DynamicString *v2;

  *(_QWORD *)this = off_24ED36578;
  *((_QWORD *)this + 1) = 48;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &str_110;
  v2 = (re::EventTimelineAssetData *)((char *)this + 40);
  *((_BYTE *)this + 72) = 0;
  *(_QWORD *)this = off_24ED34438;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = &str_110;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_QWORD *)((char *)this + 252) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 74) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 68) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 524) = 0u;
  *((_BYTE *)this + 552) = -1;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_BYTE *)this + 592) = 1;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 77) = 0;
  *((_DWORD *)this + 156) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  return this;
}

void re::EventTimelineAssetData::~EventTimelineAssetData(re::EventTimelineAssetData *this)
{
  uint64_t v2;

  re::TimelineEventData::~TimelineEventData((re::EventTimelineAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::EventTimelineAssetData *)((char *)this + 24));
}

{
  uint64_t v2;

  re::TimelineEventData::~TimelineEventData((re::EventTimelineAssetData *)((char *)this + 80));
  *(_QWORD *)this = off_24ED36578;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::EventTimelineAssetData *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::EventTimelineAssetData::clone(re::EventTimelineAssetData *this, re::Allocator *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;

  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 640, 8);
  *(_QWORD *)v4 = off_24ED36578;
  v5 = *((_BYTE *)this + 16);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)this + 1);
  *(_BYTE *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::EventTimelineAssetData *)((char *)this + 40));
  *(_BYTE *)(v4 + 72) = *((_BYTE *)this + 72);
  *(_QWORD *)v4 = off_24ED34438;
  re::TimelineEventData::TimelineEventData((re::TimelineEventData *)(v4 + 80), (re::EventTimelineAssetData *)((char *)this + 80));
  return v4;
}

uint64_t re::EventTimelineAssetData::typeInfo(re::EventTimelineAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EventTimelineAssetData", (uint64_t (*)(re::internal *))re::allocInfo_EventTimelineAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_EventTimelineAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::EventTimelineAssetData>, 0);
}

_anonymous_namespace_ *re::DynamicArray<re::StringID>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::StringID>::copy((unint64_t *)this, *(uint64_t **)a2, v4);
      re::DynamicArray<re::StringID>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      re::DynamicArray<re::StringID>::clear((uint64_t)this);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::StringID>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::StringID>::copy((unint64_t *)this, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

unint64_t *re::DynamicArray<re::StringID>::copy(unint64_t *this, uint64_t *a2, unint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  const StringID *v14;
  uint64_t v15;
  re::StringID *v16;

  if (a3)
  {
    v3 = this;
    v4 = this[2];
    if (v4 == -1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v4 >= a3)
    {
      this = (unint64_t *)this[4];
      v12 = 16 * a3;
      do
      {
        v13 = re::StringID::operator=(this, a2);
        a2 += 2;
        this = v13 + 2;
        v12 -= 16;
      }
      while (v12);
    }
    else
    {
      re::DynamicArray<re::StringID>::growCapacity(this, a3);
      v7 = v3[2];
      this = (unint64_t *)v3[4];
      if (v7)
      {
        v8 = 16 * v7;
        v9 = a2;
        do
        {
          v10 = re::StringID::operator=(this, v9);
          v9 += 2;
          this = v10 + 2;
          v8 -= 16;
        }
        while (v8);
        this = (unint64_t *)v3[4];
        v11 = v3[2];
      }
      else
      {
        v11 = 0;
      }
      if (v7 != a3)
      {
        v14 = (const StringID *)&a2[2 * v7];
        this += 2 * v11;
        v15 = 16 * a3 - 16 * v7;
        do
        {
          v16 = re::StringID::StringID((re::StringID *)this, v14++);
          this = (unint64_t *)((char *)v16 + 16);
          v15 -= 16;
        }
        while (v15);
      }
      v3[2] = a3;
    }
    ++*((_DWORD *)v3 + 6);
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<float>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<float>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<float>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<int>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<float>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<double>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<double>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<double>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<float *>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<double>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

_QWORD *re::DynamicArray<double>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 8 * a2), __src, 8 * a4);
  }
  else
  {
    re::DynamicArray<float *>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[8 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 8 * v5), __src, 8 * v10);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 8 * v5), v11, &__src[8 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Vector2<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector2<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<unsigned long>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector2<float>>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

_QWORD *re::DynamicArray<re::Vector2<float>>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 8 * a2), __src, 8 * a4);
  }
  else
  {
    re::DynamicArray<unsigned long>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[8 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 8 * v5), __src, 8 * v10);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 8 * v5), v11, &__src[8 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Vector3<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Vector3<float>>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Quaternion<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

_QWORD *re::DynamicArray<re::Vector3<float>>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 16 * a2), __src, 16 * a4);
  }
  else
  {
    re::DynamicArray<re::Vector3<float>>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[16 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 16 * v5), __src, 16 * v10);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 16 * v5), v11, &__src[16 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Vector4<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector4<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Vector4<float>>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Vector4<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector4<float>>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

_QWORD *re::DynamicArray<re::Vector4<float>>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 16 * a2), __src, 16 * a4);
  }
  else
  {
    re::DynamicArray<re::Vector4<float>>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[16 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 16 * v5), __src, 16 * v10);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 16 * v5), v11, &__src[16 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Quaternion<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Quaternion<float>>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Quaternion<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::GenericSRT<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::GenericSRT<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::GenericSRT<float>>::resize(this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Matrix3x3<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::GenericSRT<float>>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

_QWORD *re::DynamicArray<re::GenericSRT<float>>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 48 * a2), __src, 48 * a4);
  }
  else
  {
    re::DynamicArray<re::Matrix3x3<float>>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[48 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 48 * v5), __src, 48 * v10);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 48 * v5), v11, &__src[48 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

uint64_t re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::AnimationBlendTreeNodeDescription>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::RigGraphConnection>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RigGraphConnection>::copy((_QWORD *)a1, (uint64_t)a2);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        re::ObjectHelper::destroy<re::RigGraphConnection>(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) + 160 * v6);
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RigGraphConnection>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::BlendSpaceAxisDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::BlendSpaceAxisDefinition>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::BlendSpaceSampleDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::BlendSpaceSampleDefinition>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::BlendSpaceSampleDefinition>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::BlendSpaceSampleDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::FloatAnimationClip::~FloatAnimationClip(re::FloatAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::FloatAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::FloatAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::DoubleAnimationClip::~DoubleAnimationClip(re::DoubleAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector2FAnimationClip::~Vector2FAnimationClip(re::Vector2FAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector3FAnimationClip::~Vector3FAnimationClip(re::Vector3FAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector4FAnimationClip::~Vector4FAnimationClip(re::Vector4FAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::QuaternionFAnimationClip::~QuaternionFAnimationClip(re::QuaternionFAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::SRTAnimationClip::~SRTAnimationClip(re::SRTAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::SRTAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::SRTAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::SkeletalPoseAnimationClip::~SkeletalPoseAnimationClip(re::SkeletalPoseAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::DoubleAnimation::~DoubleAnimation(re::DoubleAnimation *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::DoubleAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector2FAnimation::~Vector2FAnimation(re::Vector2FAnimation *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector2FAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector3FAnimation::~Vector3FAnimation(re::Vector3FAnimation *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector3FAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector4FAnimation::~Vector4FAnimation(re::Vector4FAnimation *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::Vector4FAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::QuaternionFAnimation::~QuaternionFAnimation(re::QuaternionFAnimation *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::QuaternionFAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::SRTAnimation::~SRTAnimation(re::SRTAnimation *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::SRTAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::SRTAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::SkeletalPoseAnimation::~SkeletalPoseAnimation(re::SkeletalPoseAnimation *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED254D8;
  if (*((_BYTE *)this + 280))
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 288));
  if (*((_BYTE *)this + 184))
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 192));
  if (*((_BYTE *)this + 88))
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 96));
  *(_QWORD *)this = off_24ED1F350;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimation *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED254D8;
  if (*((_BYTE *)this + 280))
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 288));
  if (*((_BYTE *)this + 184))
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 192));
  if (*((_BYTE *)this + 88))
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 96));
  *(_QWORD *)this = off_24ED1F350;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_anonymous_namespace_ *re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = result;
  v5 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 2);
  if (v4 >= v5)
  {
    v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v5;
        if (!v5)
          v7 = 8;
        if (v7 <= v6)
          v8 = v6;
        else
          v8 = v7;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(result, v8);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v4 = *((_QWORD *)v3 + 2);
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * v4) = *a2;
  *a2 = 0;
  *((_QWORD *)v3 + 2) = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_15;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 8 * v9;
        v11 = v7;
        v12 = (_QWORD *)v5[4];
        do
        {
          *v11++ = *v12;
          *v12++ = 0;
          v10 -= 8;
        }
        while (v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t *re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>(re *a1, uint64_t a2)
{
  uint64_t *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t *result;
  _QWORD v8[2];

  v4 = re::globalAllocators(a1);
  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 256, 8);
  v6 = *(_QWORD *)(a2 + 16);
  v8[0] = *(_QWORD *)(a2 + 32);
  v8[1] = v6;
  *(_QWORD *)a1 = v5;
  return result;
}

void re::FloatKeyframeAnimation::~FloatKeyframeAnimation(re::FloatKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24950;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24950;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::DoubleKeyframeAnimation::~DoubleKeyframeAnimation(re::DoubleKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED249D8;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED249D8;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_anonymous_namespace_ *re::FixedArray<double>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::SkinningInfluence>::copy(a1, a2);
  }
  return a1;
}

void re::FixedArray<double>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

void re::Vector2FKeyframeAnimation::~Vector2FKeyframeAnimation(re::Vector2FKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24A60;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24A60;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector3FKeyframeAnimation::~Vector3FKeyframeAnimation(re::Vector3FKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24AE8;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24AE8;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector4FKeyframeAnimation::~Vector4FKeyframeAnimation(re::Vector4FKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24B70;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24B70;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

_anonymous_namespace_ *re::FixedArray<re::Vector4<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Vector4<float>>::copy(a1, a2);
  }
  return a1;
}

void *re::FixedArray<re::Vector4<float>>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 16 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::FixedArray<re::Vector4<float>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 16 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    v8 = (_QWORD *)((char *)v8 + v5 - 16);
  }
  *v8 = 0;
  v8[1] = 0;
}

void re::QuaternionFKeyframeAnimation::~QuaternionFKeyframeAnimation(re::QuaternionFKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24BF8;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24BF8;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::SRTKeyframeAnimation::~SRTKeyframeAnimation(re::SRTKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24C80;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED24C80;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::SkeletalPoseKeyframeAnimation::~SkeletalPoseKeyframeAnimation(re::SkeletalPoseKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED24D08;
  re::FixedArray<re::SkeletalPose>::deinit((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED24D08;
  re::FixedArray<re::SkeletalPose>::deinit((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::FixedArray<re::SkeletalPose>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x2E8BA2E8BA2E8BBLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 88, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 88 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_QWORD *)(result + 8) = &str_110;
      *(_DWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 80) = 0;
      result += 88;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 8) = &str_110;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

void re::FloatSampledAnimation::~FloatSampledAnimation(re::FloatSampledAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21D48;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21D48;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::FloatSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::DoubleSampledAnimation::~DoubleSampledAnimation(re::DoubleSampledAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21DD0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21DD0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::DoubleSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector2FSampledAnimation::~Vector2FSampledAnimation(re::Vector2FSampledAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21E58;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21E58;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector2FSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector3FSampledAnimation::~Vector3FSampledAnimation(re::Vector3FSampledAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21EE0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21EE0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector3FSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::Vector4FSampledAnimation::~Vector4FSampledAnimation(re::Vector4FSampledAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21F68;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21F68;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::Vector4FSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::QuaternionFSampledAnimation::~QuaternionFSampledAnimation(re::QuaternionFSampledAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21FF0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED21FF0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::QuaternionFSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::SRTSampledAnimation::~SRTSampledAnimation(re::SRTSampledAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED22078;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED22078;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::SRTSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::AnimationBlendTreeBuilder<float>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a3;
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity((_QWORD *)(a1 + 8), 0x40uLL);
  ++*(_DWORD *)(a1 + 32);
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1 + 48, a3, 64);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a2;
}

_QWORD *re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>(v5[4], v5[4] + 80 * v5[2], v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)v5;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      *(_QWORD *)(v5 + 16) = 0;
      v8 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = v8;
      v9 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 40);
      ++*(_DWORD *)(v5 + 32);
      ++*(_DWORD *)(a3 + 32);
      LOBYTE(v7) = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 40) = v9;
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 56) = &str_110;
      *(_QWORD *)(v5 + 48) = 0;
      LOBYTE(v9) = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v5 + 64) & 1;
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 72) = &str_110;
      re::StringID::destroyString((re::StringID *)(v5 + 64));
      re::StringID::destroyString((re::StringID *)(v5 + 48));
      result = *(_QWORD *)(v5 + 8);
      if (result)
      {
        if (*(_QWORD *)(v5 + 40))
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        *(_QWORD *)(v5 + 40) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 8) = 0;
        ++*(_DWORD *)(v5 + 32);
      }
      v5 += 80;
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

BOOL re::AnimationBlendTreeNodeDescription::isBlend(re::AnimationBlendTreeNodeDescription *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 16);
  return re::StringID::operator==((_QWORD *)this + 2, re::AnimationBlendTreeNodeDescription::kBlend)
      || re::StringID::operator==(v1, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
}

uint64_t re::AnimationBlendTreeBuilder<float>::buildRig(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t *a5)
{
  char *v5;
  char *v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  const StringID *v40;
  unint64_t v41;
  _BYTE *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  re *v51;
  uint64_t result;
  NSObject *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v63;
  _QWORD *v64;
  _QWORD *v65;
  const char **v66;
  char *v67;
  unint64_t v68;
  char v69[24];
  __int128 v70;
  __int128 v71;
  char v72[24];
  __int128 v73;
  __int128 v74;
  char v75[24];
  __int128 v76;
  __int128 v77;
  char v78[24];
  __int128 v79;
  __int128 v80;
  char v81[24];
  __int128 v82;
  __int128 v83;
  char v84[24];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  const char *v90;
  uint64_t v91;
  char __str[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  _QWORD *v99;
  StringID v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v5 = __str;
  v105 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4)
    goto LABEL_120;
  v8 = a2[50];
  v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v61 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    v96 = 2048;
    *(_QWORD *)(v5 + 20) = v61;
    v98 = 2048;
    *(_QWORD *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = a2[5];
  v12 = *(_QWORD *)(v8 + 32);
  v13 = (const char **)(v12 + 88 * a4);
  v14 = v13[1];
  v15 = a4;
  v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    v16 = re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    v17 = 0x7B26A3B4060ALL;
    if (v16)
    {
      v17 = 0x36B719AB4B6;
      v18 = "AddFloat";
    }
    else
    {
      v18 = "LerpFloat";
    }
    *(_QWORD *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (_QWORD)v85)
    {
      if ((BYTE8(v85) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v85 + 40))();
      v85 = 0u;
      v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip)
         && !re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((_QWORD)v82)
      {
        if ((BYTE8(v82) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v82 + 40))();
        v82 = 0u;
        v83 = 0u;
      }
    }
  }
  v19 = v11 + 80 * v15;
  v21 = *(_QWORD *)(v19 + 24);
  v20 = (_QWORD *)(v19 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = (_QWORD *)(v11 + 80 * v15 + 40);
    v66 = (const char **)(a2 + 39);
    v63 = (_anonymous_namespace_ *)(a3 + 52);
    v64 = v23;
    v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<float>::buildRig(v78, a2, a3, *(_QWORD *)(*v23 + 8 * (_QWORD)v22), a5);
      if (!v78[0] && (_QWORD)v79)
      {
        if ((BYTE8(v79) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v79 + 40))();
        v79 = 0u;
        v80 = 0u;
      }
      v24 = (_QWORD *)*v20;
      if (*v20 <= (unint64_t)v22)
        break;
      v25 = *(char **)(*v23 + 8 * (_QWORD)v22);
      v15 = a2[3];
      if (v15 <= (unint64_t)v25)
        goto LABEL_111;
      v26 = a2[50];
      v15 = *(_QWORD *)(v26 + 16);
      if (v15 <= (unint64_t)v25)
        goto LABEL_112;
      v27 = v68;
      if (v15 <= v68)
        goto LABEL_113;
      v28 = a5;
      v29 = a2[5];
      v15 = *(_QWORD *)(v26 + 32);
      v30 = v15 + 88 * (_QWORD)v25;
      v31 = v29 + 80 * (_QWORD)v25;
      v33 = *(char **)(v31 + 72);
      v32 = (_QWORD *)(v31 + 72);
      v67 = v33;
      v34 = *(const char **)(v29 + 80 * (_QWORD)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          v36 = (char *)v68;
          if ((unint64_t)a5 <= v68)
            goto LABEL_119;
          v34 = "input2";
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (_QWORD)v25 + 80));
            if ((v88 & 1) != 0)
              v37 = v90;
            else
              v37 = v89;
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if (((uint64_t)v100.var1 & 1) != 0)
              v38 = (const char *)v101;
            else
              v38 = (char *)&v100.var1 + 1;
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (_QWORD)v76)
            {
              if ((BYTE8(v76) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v76 + 40))();
              v76 = 0u;
              v77 = 0u;
            }
            if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
            v39 = v15 + 88 * (_QWORD)v25;
            v41 = *(_QWORD *)(v39 + 64);
            v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (v42 = *(_BYTE **)(v15 + 88 * (_QWORD)v25 + 72)) != 0 && !*v42)
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(_QWORD *)(v30 + 8));
            else
              re::StringID::StringID((re::StringID *)&v100, v40);
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            v34 = "input2";
          }
        }
        else
        {
          v34 = "input1";
        }
      }
      if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if ((v88 & 1) != 0)
          v43 = v90;
        else
          v43 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v44 = (const char *)v101;
        else
          v44 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v72[0] && (_QWORD)v73)
        {
          if ((BYTE8(v73) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v73 + 40))();
          v73 = 0u;
          v74 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        *(_QWORD *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        v45 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (_QWORD *)(v15 + 88 * (_QWORD)v25 + 32));
        v46 = (char *)*a5;
        v15 = a3[45];
        if (v15 <= *a5)
        {
          v91 = 0;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 468;
          v96 = 2048;
          v97 = v46;
          v98 = 2048;
          v99 = (_QWORD *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          v91 = 0;
          v6 = __str;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          v5 = v36;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 797;
          v96 = 2048;
          v97 = v5;
          v98 = 2048;
          v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          v60 = a4;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)(v5 + 4) = "operator[]";
          v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          v96 = 2048;
          *(_QWORD *)(v5 + 20) = v60;
          v98 = 2048;
          *(_QWORD *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(_QWORD *)(a3[46] + 8 * (_QWORD)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if ((v88 & 1) != 0)
          v47 = v90;
        else
          v47 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v48 = (const char *)v101;
        else
          v48 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (_QWORD)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v69[0] && (_QWORD)v70)
        {
          if ((BYTE8(v70) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v70 + 40))();
          v70 = 0u;
          v71 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (_QWORD)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (_QWORD)v25))
          && *(v32 - 1) <= 1uLL)
        {
          v49 = v67;
          if (*v32 && !*(_BYTE *)*v32)
            v49 = "output";
        }
        else
        {
          v49 = v67;
        }
        if ((v88 & 1) != 0)
          v50 = v90;
        else
          v50 = v89;
        v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(_BYTE *)&v100.var0)
        {
          v53 = *re::animationLogObjects(v51);
          v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            goto LABEL_109;
          goto LABEL_114;
        }
        a5 = v28;
        v23 = v64;
        v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22)
        goto LABEL_103;
    }
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v25 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v22;
    v98 = 2048;
    v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v91 = 0;
    v53 = __str;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v54 = (char *)MEMORY[0x24BDACB70];
    v58 = (char *)v27;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v58;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if ((v102 & 1) != 0)
      v59 = (char *)*((_QWORD *)&v102 + 1);
    else
      v59 = (char *)&v102 + 1;
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    v55 = *(_OWORD *)(v54 + 72);
    v56 = *((_QWORD *)&v102 + 1);
    v57 = v103;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(_QWORD *)(a1 + 40) = v56;
    *(_QWORD *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(_BYTE *)a1 = 1;
  }
  result = v87;
  if (v87)
  {
    if ((v88 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v87 + 40))(v87, v90);
  }
  return result;
}

void re::FixedArray<re::AnimationBlendTreeNode>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 4);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

uint64_t re::AnimationBlendTreeBuilder<float>::addChildren(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, unint64_t *a6)
{
  unint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const StringID *v28;
  unint64_t v29;
  _BYTE *v30;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  int v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  _QWORD *v50;
  __int16 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v8 = &v53;
  v58 = *MEMORY[0x24BDAC8D0];
  v9 = a1[3];
  if (v9 <= a3)
    goto LABEL_39;
  v11 = a1;
  v12 = 0;
  v40 = a4;
  v41 = *(_QWORD *)(a1[5] + 80 * a3 + 24) + a4;
  v35 = (uint64_t)(a1 + 51);
  v13 = 16 * a4;
  v14 = 8 * a4;
  v38 = a3;
  while (1)
  {
    v15 = v11[5];
    if (*(_QWORD *)(v15 + 80 * a3 + 24) <= v12)
      return v41;
    v16 = v11[50];
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 80 * a3 + 40) + 8 * v12);
    v18 = *(_QWORD *)(v16 + 16);
    if (v18 <= v17)
    {
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 797;
      v49 = 2048;
      v50 = (_QWORD *)v17;
      v51 = 2048;
      v52 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 789;
      v49 = 2048;
      v50 = (_QWORD *)v17;
      v51 = 2048;
      v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 468;
      v49 = 2048;
      v50 = v7;
      v51 = 2048;
      v52 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v6 = MEMORY[0x24BDACB70];
      v32 = (_QWORD *)a3;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 797;
      v49 = 2048;
      v50 = v32;
      v51 = 2048;
      v52 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      v44[2] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 789;
      v49 = 2048;
      v50 = (_QWORD *)(v40 + v12);
      v51 = 2048;
      v52 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v33 = (_QWORD *)a3;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 789;
      v49 = 2048;
      v50 = v33;
      v51 = 2048;
      v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 789;
      v49 = 2048;
      v50 = (_QWORD *)v38;
      v51 = 2048;
      v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 468;
      v49 = 2048;
      v50 = (_QWORD *)v13;
      v51 = 2048;
      v52 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      v44[0] = 0;
      v57 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 789;
      v49 = 2048;
      v50 = (_QWORD *)v18;
      v51 = 2048;
      v52 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v44[0] = 0;
      v8[4] = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v34 = (_QWORD *)a3;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v45 = 136315906;
      v46 = "operator[]";
      v47 = 1024;
      v48 = 789;
      v49 = 2048;
      v50 = v34;
      v51 = 2048;
      v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Unknown blend tree leaf type", "!\"Unreachable code\"", "addChildren", 559);
      _os_crash();
      __break(1u);
    }
    if (v9 <= v17)
      goto LABEL_31;
    v7 = (_QWORD *)(a4 + v12);
    v6 = *(_QWORD *)(a2 + 288);
    if (v6 <= a4 + v12)
      goto LABEL_32;
    v42 = a4 + v12;
    v43 = v13;
    v19 = *(_QWORD *)(v16 + 32);
    v7 = (_QWORD *)a2;
    v20 = *(_QWORD *)(a2 + 296);
    a2 = *(unsigned __int8 *)(v15 + 80 * v17 + 24);
    v13 = v20 + v14;
    *(_BYTE *)(v20 + v14 + 6) = a2;
    if (v18 <= a3)
      goto LABEL_33;
    v18 = a3;
    v21 = re::StringID::operator==((_QWORD *)(v19 + 88 * a3 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    if (v12)
      v22 = v21;
    else
      v22 = 0;
    *(_BYTE *)(v13 + 7) = v22;
    *(_DWORD *)v13 = *(_DWORD *)(v19 + 88 * v17 + 80);
    if ((_BYTE)a2)
    {
      *(_WORD *)(v20 + v14 + 4) = v41;
      if (v9 <= v18)
        goto LABEL_36;
      v11 = a1;
      a2 = (unint64_t)v7;
      v41 = re::AnimationBlendTreeBuilder<float>::addChildren(a1, v7, v17);
      v9 = 88;
    }
    else
    {
      a2 = v19 + 88 * v17 + 16;
      v9 = 88;
      if (re::StringID::operator==((_QWORD *)a2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        v23 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v35, (_QWORD *)(v19 + 88 * v17 + 32));
        v13 = *a5;
        v18 = v7[45];
        if (v18 <= *a5)
          goto LABEL_37;
        a2 = (unint64_t)v7;
        *(_QWORD *)(v7[46] + 8 * v13) = *v23;
        v24 = (*a5)++;
        *(_WORD *)(v20 + v14 + 4) = v24;
      }
      else
      {
        if (!re::StringID::operator==((_QWORD *)a2, re::AnimationBlendTreeNodeDescription::kInput))
          goto LABEL_40;
        v18 = *a6;
        a2 = v7[54];
        if (a2 <= *a6)
          goto LABEL_38;
        re::StringID::operator=((unint64_t *)(v7[56] + 16 * v18), (uint64_t *)(v19 + 88 * v17 + 32));
        v26 = (*a6)++;
        *(_WORD *)(v20 + v14 + 4) = v26;
        *(_BYTE *)(v13 + 7) |= 2u;
        a2 = (unint64_t)v7;
      }
      v11 = a1;
    }
    v27 = v19 + 88 * v17;
    v29 = *(_QWORD *)(v27 + 64);
    v28 = (const StringID *)(v27 + 64);
    v18 = v42;
    v13 = v43;
    if (v29 <= 1 && (v30 = *(_BYTE **)(v19 + 88 * v17 + 72)) != 0 && !*v30)
      re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)v44, *(_QWORD *)(v19 + 88 * v17 + 8));
    else
      re::StringID::StringID((re::StringID *)v44, v28);
    v6 = *(_QWORD *)(a2 + 392);
    if (v6 <= v42)
      goto LABEL_34;
    re::StringID::operator=((unint64_t *)(*(_QWORD *)(a2 + 408) + v43), v44);
    re::StringID::destroyString((re::StringID *)v44);
    ++v12;
    v9 = v11[3];
    v13 = v43 + 16;
    v14 += 8;
    a3 = v38;
    a4 = v40;
    if (v9 <= v38)
      goto LABEL_35;
  }
}

uint64_t *re::AnimationBlendTree<float>::addClip(uint64_t a1, unint64_t a2, _anonymous_namespace_ *this)
{
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (!*(_QWORD *)(a1 + 336))
      goto LABEL_14;
    **(_QWORD **)(a1 + 344) = 1;
  }
  if (*(_QWORD *)(a1 + 336) <= a2)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * a2);
  if (*(_QWORD *)(a1 + 336) <= a2 + 1)
  {
LABEL_12:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((_BYTE)v9)
    v8 = SDWORD1(v9);
  else
    v8 = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * (a2 + 1)) = v8 + v6;
  if (*(_QWORD *)(a1 + 312) <= a2)
    goto LABEL_13;
  *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2) = this;
  return result;
}

void re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_356, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::FloatAnimationBlendTree::~FloatAnimationBlendTree(re::FloatAnimationBlendTree *this)
{
  re::AnimationBlendTree<float>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<float>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<float>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<float>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<float>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<float>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<float>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<float>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED35838;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

